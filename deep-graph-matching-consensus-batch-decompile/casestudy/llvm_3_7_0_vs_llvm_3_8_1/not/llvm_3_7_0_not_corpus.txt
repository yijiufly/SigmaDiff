 CALL libcall___gmon_start___thunk
 RETURN 0
 RETURN 1
0 CAST 0
 CALLIND 0
(ARG1 + 32) INT_ADD ARG1 32
0 COPY 0
(ARG1 + 32) CAST (ARG1 + 32)
0 INT_XOR ([(ARG1 + 32)] & 1) 1
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
([(ARG1 + 32)] & 1) INT_AND [(ARG1 + 32)] 1
 RETURN 0 0
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 (ARG1 + 8) 0
 RETURN 0
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 CALLIND [([ARG1] + 56)] ARG1 [(ARG1 + 8)] ([(ARG1 + 24)] - [(ARG1 + 8)]) ARG1
 CBRANCH ([(ARG1 + 24)] INT_LESSEQUAL [(ARG1 + 8)])
[(ARG1 + 8)] CAST [(ARG1 + 8)]
[(ARG1 + 24)] CAST [(ARG1 + 24)]
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
0 INT_LESSEQUAL [(ARG1 + 24)] [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
 RETURN 1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([ARG1] + 56) CAST ([ARG1] + 56)
([ARG1] + 56) INT_ADD [ARG1] 56
 CALL libcall___assert_fail_thunk 0 0 270 0
0 COPY 0
0 COPY 0
0 COPY 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 24)] - [(ARG1 + 8)]) INT_SUB [(ARG1 + 24)] [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[([ARG1] + 56)] LOAD 433 ([ARG1] + 56)
 RETURN 0
 STORE 433 (ARG1 + 24) [(ARG1 + 8)]
 CALL func ARG1
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
(ARG1 + 24) CAST (ARG1 + 24)
 CBRANCH ([(ARG1 + 24)] INT_NOTEQUAL [(ARG1 + 8)])
0 INT_NOTEQUAL [(ARG1 + 24)] [(ARG1 + 8)]
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 24) INT_ADD ARG1 24
([(ARG1 + 24)] - [(ARG1 + 8)]) INT_SUB [(ARG1 + 24)] [(ARG1 + 8)]
(ARG1 + 24) CAST (ARG1 + 24)
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0 ([(ARG1 + 24)] - [(ARG1 + 8)])
([(ARG1 + 24)] - [(ARG1 + 8)]) COPY ([(ARG1 + 24)] - [(ARG1 + 8)])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
0 INT_NOTEQUAL ARG2 0
 STORE 433 (ARG1 + 8) ARG2
0 INT_EQUAL ARG2 0
0 INT_NOTEQUAL ARG3 0
0 INT_EQUAL ARG3 0
([(ARG1 + 8)] + ARG3) INT_ADD [(ARG1 + 8)] ARG3
0 INT_EQUAL ARG4 0
 STORE 433 (ARG1 + 32) ARG4
0 INT_NOTEQUAL ARG4 0
 CBRANCH (ARG4 INT_NOTEQUAL 0)
 CBRANCH (ARG3 INT_NOTEQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (ARG4 INT_EQUAL 0)
 CBRANCH (ARG3 INT_EQUAL 0)
 RETURN 1
0 COPY 0
((Mode == Unbuffered && !BufferStart && Size == 0) || (Mode != Unbuffered && BufferStart && Size != 0)) && "stream must be unbuffered or have at least one byte" COPY ((Mode == Unbuffered && !BufferStart && Size == 0) || (Mode != Unbuffered && BufferStart && Size != 0)) && "stream must be unbuffered or have at least one byte"
 CALL libcall___assert_fail_thunk ((Mode == Unbuffered && !BufferStart && Size == 0) || (Mode != Unbuffered && BufferStart && Size != 0)) && "stream must be unbuffered or have at least one byte" 0 93 0
0 COPY 0
 CBRANCH ([(ARG1 + 32)] INT_EQUAL 1)
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(ARG1 + 8)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 CALL libcall_operator.delete[]_thunk [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (ARG2 INT_NOTEQUAL 0)
(ARG1 + 24) CAST (ARG1 + 24)
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 1
0 INT_LESS [(ARG1 + 16)] [(ARG1 + 8)]
 CALL libcall___assert_fail_thunk GetNumBytesInBuffer() == 0 && "Current buffer is non-empty!" 0 96 0
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_LESS [(ARG1 + 8)])
(ARG1 + 32) CAST (ARG1 + 32)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (ARG1 + 24) [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 16) CAST (ARG1 + 16)
0 COPY 0
GetNumBytesInBuffer() == 0 && "Current buffer is non-empty!" COPY GetNumBytesInBuffer() == 0 && "Current buffer is non-empty!"
0 COPY 0
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
0 INT_EQUAL [(ARG1 + 32)] 1
(ARG1 + 32) CAST (ARG1 + 32)
 STORE 433 (ARG1 + 16) ([(ARG1 + 8)] + ARG3)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (ARG2 INT_EQUAL 0)
OutBufStart <= OutBufEnd && "Invalid size!" COPY OutBufStart <= OutBufEnd && "Invalid size!"
 RETURN 1
0 COPY 0
 RETURN 0
 CALL libcall___assert_fail_thunk OutBufStart <= OutBufEnd && "Invalid size!" 0 105 0
0 COPY 0
 CALL func ARG1 0 0 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1 f() ARG2 1
 CALL func ARG1
f() CALL libcall_operator.new[]_thunk ARG2
 RETURN 0
[ARG1] LOAD 433 ARG1
 CALL func ARG1 VZERO VZERO
 CALL func ARG1
VZERO CALLIND [([ARG1] + 80)] ARG1 ARG2 ARG1
 RETURN 0
0 INT_EQUAL VZERO 0
([ARG1] + 80) INT_ADD [ARG1] 80
 CBRANCH (VZERO INT_EQUAL 0)
[([ARG1] + 80)] LOAD 433 ([ARG1] + 80)
([ARG1] + 80) CAST ([ARG1] + 80)
 BRANCH VZERO
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 24) INT_ADD ARG1 24
 CALL libcall_memcpy_thunk [(ARG1 + 24)] ARG2 ARG3
(ARG2 + 1) PTRADD ARG2 1 1
(ARG2 + 2) PTRADD ARG2 2 1
(ARG2 + 3) PTRADD ARG2 3 1
[ARG2] LOAD 433 ARG2
([(ARG1 + 24)] + ARG3) INT_ADD [(ARG1 + 24)] ARG3
 BRANCHIND ARG3
0 INT_LESS ([(ARG1 + 16)] - [(ARG1 + 24)]) ARG3
([(ARG1 + 16)] - [(ARG1 + 24)]) CAST ([(ARG1 + 16)] - [(ARG1 + 24)])
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH (([(ARG1 + 16)] - [(ARG1 + 24)]) INT_LESS ARG3)
(ARG1 + 16) CAST (ARG1 + 16)
([(ARG1 + 16)] - [(ARG1 + 24)]) INT_SUB [(ARG1 + 16)] [(ARG1 + 24)]
(ARG1 + 24) CAST (ARG1 + 24)
 CALL libcall___assert_fail_thunk 0 0 340 0
(ARG1 + 24) CAST (ARG1 + 24)
 STORE 433 (ARG1 + 24) ([(ARG1 + 24)] + ARG3)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
0 COPY 0
0 COPY 0
0 COPY 0
 RETURN 0
 RETURN 1
 STORE 433 ([(ARG1 + 24)] + 1) [(ARG2 + 1)]
([(ARG1 + 24)] + 1) CAST ([(ARG1 + 24)] + 1)
[(ARG2 + 1)] LOAD 433 (ARG2 + 1)
(ARG1 + 24) CAST (ARG1 + 24)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
([(ARG1 + 24)] + 1) INT_ADD [(ARG1 + 24)] 1
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
 BRANCH VZERO
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
 STORE 433 [(ARG1 + 24)] [ARG2]
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
 STORE 433 ([(ARG1 + 24)] + 3) [(ARG2 + 3)]
[(ARG2 + 3)] LOAD 433 (ARG2 + 3)
([(ARG1 + 24)] + 3) CAST ([(ARG1 + 24)] + 3)
([(ARG1 + 24)] + 3) INT_ADD [(ARG1 + 24)] 3
([(ARG1 + 24)] + 2) INT_ADD [(ARG1 + 24)] 2
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
([(ARG1 + 24)] + 2) CAST ([(ARG1 + 24)] + 2)
 STORE 433 ([(ARG1 + 24)] + 2) [(ARG2 + 2)]
[(ARG2 + 2)] LOAD 433 (ARG2 + 2)
 BRANCH VZERO
 CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 (ARG2 + (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)])))) (ARG3 - (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)])))) (ARG2 + (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)]))))
[ARG1] LOAD 433 ARG1
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 16) PTRADD ARG1 2 8
f() CALL func ARG1 ARG2 ARG3 ARG2
(ARG1 + 24) PTRADD ARG1 3 8
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1
 CALLIND [([ARG1] + 56)] ARG1 ARG2 ARG3 ARG1
 CALL func ARG1 ARG2 ARG3 ARG2
(ARG1 + 32) PTRADD ARG1 4 8
 CALLIND [([ARG1] + 56)] ARG1 ARG2 (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)]))) ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 24) PTRADD ARG1 3 8
 CALL func ARG1 ARG2 ([(ARG1 + 16)] - [(ARG1 + 24)]) ARG2
f() CALL func ARG1 (ARG2 + ([(ARG1 + 16)] - [(ARG1 + 24)])) (ARG3 - ([(ARG1 + 16)] - [(ARG1 + 24)])) (ARG2 + ([(ARG1 + 16)] - [(ARG1 + 24)]))
(ARG1 + 24) PTRADD ARG1 3 8
f() CALL func ARG1 (ARG2 + (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)])))) (ARG3 - (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)])))) (ARG2 + (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)]))))
(ARG2 + ([(ARG1 + 16)] - [(ARG1 + 24)])) INT_ADD ARG2 ([(ARG1 + 16)] - [(ARG1 + 24)])
(ARG2 + (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)])))) INT_ADD ARG2 (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)])))
(ARG2 + (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)])))) INT_ADD ARG2 (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)])))
(ARG3 - ([(ARG1 + 16)] - [(ARG1 + 24)])) INT_SUB ARG3 ([(ARG1 + 16)] - [(ARG1 + 24)])
(ARG3 - (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)])))) INT_SUB ARG3 (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)])))
0 INT_LESS ([(ARG1 + 16)] - [(ARG1 + 24)]) ARG3
(ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)])) INT_REM ARG3 ([(ARG1 + 16)] - [(ARG1 + 24)])
(ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)]))) INT_SUB ARG3 (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)]))
([(ARG1 + 16)] - [(ARG1 + 24)]) INT_SUB [(ARG1 + 16)] [(ARG1 + 24)]
([(ARG1 + 16)] - [(ARG1 + 24)]) CAST ([(ARG1 + 16)] - [(ARG1 + 24)])
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
 CBRANCH (([(ARG1 + 16)] - [(ARG1 + 24)]) INT_LESS ARG3)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH ([(ARG1 + 24)] INT_EQUAL [(ARG1 + 8)])
0 INT_EQUAL ([(ARG1 + 16)] - [(ARG1 + 24)]) 0
 BRANCH VZERO
 RETURN 0 f(ARG1)
f() CAST f()
 CBRANCH (([(ARG1 + 16)] - [(ARG1 + 24)]) INT_EQUAL 0)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
(ARG1 + 32) CAST (ARG1 + 32)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
([(ARG1 + 16)] - [(ARG1 + 24)]) INT_SUB [(ARG1 + 16)] [(ARG1 + 24)]
 CBRANCH ([(ARG1 + 32)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 32)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
0 INT_EQUAL [(ARG1 + 24)] [(ARG1 + 8)]
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
[([ARG1] + 56)] LOAD 433 ([ARG1] + 56)
 BRANCH VZERO
([ARG1] + 56) CAST ([ARG1] + 56)
f() CAST f()
 BRANCH VZERO
([ARG1] + 56) INT_ADD [ARG1] 56
 RETURN 1
 CALL libcall___assert_fail_thunk NumBytes != 0 && "undefined behavior" 0 315 0
([ARG1] + 56) CAST ([ARG1] + 56)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 16)] - [(ARG1 + 24)]) CAST ([(ARG1 + 16)] - [(ARG1 + 24)])
 CBRANCH f(ARG1 , ARG3)
([ARG1] + 56) INT_ADD [ARG1] 56
0 INT_LESS ([(ARG1 + 16)] - [(ARG1 + 24)]) (ARG3 - (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)]))))
[([ARG1] + 56)] LOAD 433 ([ARG1] + 56)
0 COPY 0
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
NumBytes != 0 && "undefined behavior" COPY NumBytes != 0 && "undefined behavior"
0 COPY 0
([(ARG1 + 16)] - [(ARG1 + 24)]) INT_SUB [(ARG1 + 16)] [(ARG1 + 24)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_EQUAL [(ARG1 + 8)] 0
 BRANCH VZERO
 BRANCH VZERO
f() CAST f()
 CALL func ARG1 f() f() f() ARG5 ARG6 ARG2
f() CALL libcall_data_thunk
 RETURN 0
f() CALL libcall_length_thunk
ARG1 COPY ARG1
(ARG1 + 32) INT_ADD ARG1 32
 CBRANCH (([(ARG1 + 32)] & 1) INT_NOTEQUAL 0)
0 INT_NOTEQUAL ([(ARG1 + 32)] & 1) 0
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
([(ARG1 + 32)] & 1) INT_AND [(ARG1 + 32)] 1
(ARG1 + 32) CAST (ARG1 + 32)
 RETURN 1
 CALL libcall___assert_fail_thunk !HasError && "Cannot get value when an error exists!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ErrorOr.h 254 0
0 COPY 0
!HasError && "Cannot get value when an error exists!" COPY !HasError && "Cannot get value when an error exists!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ErrorOr.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ErrorOr.h
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 32) CAST (ARG1 + 32)
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
0 INT_NOTEQUAL ([(ARG1 + 32)] & 1) 1
 CBRANCH (([(ARG1 + 32)] & 1) INT_NOTEQUAL 1)
 RETURN 0
([(ARG1 + 32)] & 1) INT_AND [(ARG1 + 32)] 1
 CALL libcall_~basic_string_thunk f(ARG1)
f(ARG1) CAST f(ARG1)
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 24) PTRADD ARG1 3 8
 STORE 433 ARG1 Symbol
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 24) PTRADD ARG1 3 8
0 INT_EQUAL ARG2 0
Symbol PTRSUB 0 Symbol
(ARG1 + 32) CAST (ARG1 + 32)
 STORE 433 (ARG1 + 16) [(ARG1 + 24)]
 STORE 433 (ARG1 + 24) 0
 STORE 433 (ARG1 + 8) [(ARG1 + 16)]
 STORE 433 (ARG1 + 32) 0
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
 RETURN 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
0 INT_ZEXT 0
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
 STORE 433 (ARG1 + 40) ARG3
 CALL func ARG1 ARG4 ARG4
 STORE 433 (ARG1 + 36) ARG2
 STORE 433 ARG1 Symbol
(ARG1 + 56) PTRADD ARG1 7 8
ARG1 CAST ARG1
(ARG1 + 48) PTRADD ARG1 6 8
ARG1 CAST ARG1
(ARG1 + 40) PTRADD ARG1 5 8
(ARG1 + 40) PTRADD ARG1 5 8
(ARG1 + 48) PTRADD ARG1 6 8
ARG1 CAST ARG1
ARG1 CAST ARG1
ARG1 CAST ARG1
(ARG1 + 56) PTRADD ARG1 7 8
 STORE 433 (ARG1 + 42) 0
(ARG1 + 41) INT_ADD ARG1 41
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 STORE 433 (ARG1 + 41) 0
(ARG1 + 36) CAST (ARG1 + 36)
(ARG1 + 42) CAST (ARG1 + 42)
 CBRANCH ([(ARG1 + 36)] INT_SLESS 0)
0 INT_SLESS [(ARG1 + 36)] 0
(ARG1 + 36) INT_ADD ARG1 36
(ARG1 + 36) INT_ADD ARG1 36
(ARG1 + 41) CAST (ARG1 + 41)
 RETURN 0
(ARG1 + 40) CAST (ARG1 + 40)
(ARG1 + 42) INT_ADD ARG1 42
[(ARG1 + 36)] LOAD 433 (ARG1 + 36)
(ARG1 + 36) CAST (ARG1 + 36)
[(ARG1 + 36)] LOAD 433 (ARG1 + 36)
(ARG1 + 40) CAST (ARG1 + 40)
f() CALL libcall_lseek_thunk [(ARG1 + 36)] 0 1
0 INT_NOTEQUAL f() -1
f() CAST f()
 CBRANCH ([(ARG1 + 56)] INT_EQUAL 1)
(ARG1 + 56) CAST (ARG1 + 56)
0 INT_EQUAL [(ARG1 + 56)] 1
[(ARG1 + 56)] LOAD 433 (ARG1 + 56)
 BRANCH VZERO
(ARG1 + 36) INT_ADD ARG1 36
 STORE 433 (ARG1 + 40) 0
(ARG1 + 56) CAST (ARG1 + 56)
 STORE 433 (ARG1 + 56) 0
(ARG1 + 36) CAST (ARG1 + 36)
 STORE 433 (ARG1 + 48) 0
 STORE 433 (ARG1 + 48) f()
 BRANCH VZERO
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 2 4
 STORE 433 (ARG1 + 8) ARG3
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
f() CALL libcall_close_thunk ARG1
(RSP + -296) PTRSUB RSP -296
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
f() CALL libcall_sigfillset_thunk (RSP + -296)
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_SLESS 0)
0 INT_SLESS f() 0
(RSP + -296) CAST (RSP + -296)
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_generic_category_thunk
 CALL func (RSP + -312) f() f() f()
f() CALL libcall_generic_category_thunk
 BRANCH VZERO
(RSP + -312) PTRSUB RSP -312
(RSP + -312) PTRSUB RSP -312
 CALL func (RSP + -312) f() f() f()
[f()] LOAD 433 f()
 CALL func (RSP + -312) [f()] f() [f()]
(RSP + -296) CAST (RSP + -296)
f() CALL libcall___errno_location_thunk
 BRANCH VZERO
(RSP + -168) CAST (RSP + -168)
(RSP + -296) PTRSUB RSP -296
f() CALL libcall_generic_category_thunk
(RSP + -296) PTRSUB RSP -296
(RSP + -168) PTRADD (RSP + -296) 128 1
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_pthread_sigmask_thunk 2 (RSP + -296) (RSP + -168)
(RSP + -312) PTRSUB RSP -312
0 INT_EQUAL f() 0
(f() # f()) INT_AND (f() # f()) -1
(f() # f()) PIECE f() f()
 RETURN 1
 RETURN 0 (f() # f())
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (f() INT_SLESS 0)
f() CALL libcall___errno_location_thunk
[f()] LOAD 433 f()
 CALL func (RSP + -312) f() f() f()
0 COPY 0
f() CALL libcall_pthread_sigmask_thunk 2 (RSP + -168) 0
f() CALL libcall_generic_category_thunk
0 INT_SLESS f() 0
 BRANCH VZERO
(RSP + -168) CAST (RSP + -168)
0 INT_EQUAL f() 0
(RSP + -312) PTRSUB RSP -312
(RSP + -296) PTRSUB RSP -296
(RSP + -168) PTRADD (RSP + -296) 128 1
(ARG1 + 41) INT_ADD ARG1 41
 RETURN 0 [(ARG1 + 41)]
[(ARG1 + 41)] LOAD 433 (ARG1 + 41)
[(ARG1 + 41)] COPY [(ARG1 + 41)]
(ARG1 + 41) CAST (ARG1 + 41)
[ARG1] LOAD 433 ARG1
([ARG1] & 4294967040) INT_OR ([ARG1] & 4294967040) 0
([ARG1] & 4294967040) INT_AND [ARG1] 4294967040
([ARG1] & 4294967040) COPY ([ARG1] & 4294967040)
0 INT_NOTEQUAL [ARG1] 0
 RETURN 0 ([ARG1] & 4294967040)
0 INT_ZEXT 0
 STORE 433 ARG1 f()
 STORE 433 ARG1 0
0 INT_NOTEQUAL ARG2 0
 CBRANCH (f() INT_NOTEQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL f() 0
f() CALL libcall_malloc_thunk 40
(RSP + -20) PTRSUB RSP -20
f() CAST f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL libcall_pthread_mutexattr_init_thunk (RSP + -20)
llvm::sys::MutexImpl::MutexImpl(bool) COPY llvm::sys::MutexImpl::MutexImpl(bool)
0 INT_ZEXT 0
errorcode == 0 COPY errorcode == 0
f() CALL libcall_pthread_mutexattr_settype_thunk (RSP + -20) 0
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp
(RSP + -20) PTRSUB RSP -20
 CBRANCH (f() INT_NOTEQUAL 0)
 CALL libcall___assert_fail_thunk errorcode == 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp 54 llvm::sys::MutexImpl::MutexImpl(bool)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
40 CAST 40
llvm::sys::MutexImpl::MutexImpl(bool) COPY llvm::sys::MutexImpl::MutexImpl(bool)
[40] LOAD 433 40
40 INT_ADD 0 40
 CALL libcall___assert_fail_thunk errorcode == 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp 68 llvm::sys::MutexImpl::MutexImpl(bool)
errorcode == 0 COPY errorcode == 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp
 RETURN 1
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CBRANCH (f() INT_NOTEQUAL 0)
 RETURN 1
llvm::sys::MutexImpl::MutexImpl(bool) COPY llvm::sys::MutexImpl::MutexImpl(bool)
f() CALL libcall_pthread_mutexattr_destroy_thunk (RSP + -20)
errorcode == 0 COPY errorcode == 0
 CALL libcall___assert_fail_thunk errorcode == 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp 64 llvm::sys::MutexImpl::MutexImpl(bool)
0 INT_NOTEQUAL f() 0
(RSP + -20) PTRSUB RSP -20
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp
llvm::sys::MutexImpl::MutexImpl(bool) COPY llvm::sys::MutexImpl::MutexImpl(bool)
 RETURN 1
errorcode == 0 COPY errorcode == 0
 CALL libcall___assert_fail_thunk errorcode == 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp 60 llvm::sys::MutexImpl::MutexImpl(bool)
(RSP + -20) PTRSUB RSP -20
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp
f() CALL libcall_pthread_mutex_init_thunk f() (RSP + -20)
0 INT_NOTEQUAL f() 0
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 ARG2 ARG2
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 12) INT_ADD ARG1 12
 STORE 433 (ARG1 + 12) ARG2
(ARG1 + 12) CAST (ARG1 + 12)
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) 0
 RETURN 0
 CALL func f() 1
f() COPY f()
f() CALL libcall_operator.new_thunk 16
 RETURN 0 f()
[ARG1] LOAD 433 ARG1
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
 CALL libcall___assert_fail_thunk mutex != nullptr /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp 78 llvm::sys::MutexImpl::~MutexImpl()
llvm::sys::MutexImpl::~MutexImpl() COPY llvm::sys::MutexImpl::~MutexImpl()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp
 RETURN 0
 CALL libcall_free_thunk [ARG1]
mutex != nullptr COPY mutex != nullptr
 RETURN 1
 CALL libcall_pthread_mutex_destroy_thunk [ARG1]
 CALL func ARG1
 RETURN 0
0 INT_NOTEQUAL ARG1 0
 CALL func ARG1
 CALL libcall_operator.delete_thunk ARG1
 CBRANCH (ARG1 INT_NOTEQUAL 0)
 RETURN 0
1 COPY 1
 RETURN 0 1
 RETURN 0
f() COPY f()
 CBRANCH (VZERO INT_EQUAL 0)
0 INT_EQUAL VZERO 0
 RETURN 0 Symbol
Symbol PTRSUB 0 Symbol
f() CALL libcall___cxa_guard_acquire_thunk 6882472
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
6882472 PTRSUB 0 6882472
6882472 PTRSUB 0 6882472
6882480 PTRSUB 0 6882480
4278440 PTRSUB 0 4278440
6878568 PTRSUB 0 6878568
 CALL libcall___cxa_atexit_thunk 4278440 6882480 6878568
 CALL func 6882480 1
6882480 PTRSUB 0 6882480
 CALL libcall___cxa_guard_release_thunk 6882472
 RETURN 0
[ARG1] LOAD 433 ARG1
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
 RETURN 1
f() CALL libcall_pthread_mutex_unlock_thunk [ARG1]
0 INT_ZEXT 0
(0 # f()) PIECE 0 f()
 CALL libcall___assert_fail_thunk mutex != nullptr /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp 97 bool llvm::sys::MutexImpl::release()
 RETURN 0 (-256 & (0 # f()))
0 INT_EQUAL f() 0
(-256 & (0 # f())) INT_OR (-256 & (0 # f())) 0
bool llvm::sys::MutexImpl::release() COPY bool llvm::sys::MutexImpl::release()
(-256 & (0 # f())) INT_AND (0 # f()) -256
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp
mutex != nullptr COPY mutex != nullptr
 CALL func ARG1
 RETURN 0
[ARG1] LOAD 433 ARG1
 RETURN 0
 CALL func [ARG1]
 RETURN 0
 RETURN 0
[ARG1] LOAD 433 ARG1
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
(-256 & (0 # f())) INT_OR (-256 & (0 # f())) 0
bool llvm::sys::MutexImpl::acquire() COPY bool llvm::sys::MutexImpl::acquire()
(-256 & (0 # f())) INT_AND (0 # f()) -256
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp
mutex != nullptr COPY mutex != nullptr
f() CALL libcall_pthread_mutex_lock_thunk [ARG1]
 RETURN 1
(0 # f()) PIECE 0 f()
0 INT_ZEXT 0
 CALL libcall___assert_fail_thunk mutex != nullptr /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp 87 bool llvm::sys::MutexImpl::acquire()
 RETURN 0 (-256 & (0 # f()))
0 INT_EQUAL f() 0
 CALL func ARG1
 RETURN 0
ARG2 LOAD 433 ARG1
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func ARG2
f(ARG1) LOAD 433 ARG1
f(ARG1) LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 VZERO
ARG1 COPY ARG1
 STORE 433 ARG1 VZERO
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp 41 ARG1
ARG1 COPY ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
VZERO CALLIND ARG2
0 INT_EQUAL ARG2 0
VZERO CALLIND ARG2
 STORE 433 (ARG1 + 8) ARG3
 STORE 433 (ARG1 + 8) ARG3
 CBRANCH (ARG2 INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
 CALL libcall___assert_fail_thunk !Ptr && !DeleterFn && !Next && "Partially initialized ManagedStatic!?" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp 58 void llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const
void llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const COPY void llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 0)
!Ptr && !DeleterFn && !Next && "Partially initialized ManagedStatic!?" COPY !Ptr && !DeleterFn && !Next && "Partially initialized ManagedStatic!?"
0 INT_NOTEQUAL [(ARG1 + 8)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp
 RETURN 1
VZERO COPY VZERO
f() CALL func
void llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const COPY void llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
Creator COPY Creator
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp
 RETURN 1
 CALL libcall___assert_fail_thunk Creator /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp 34 void llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const
VZERO COPY VZERO
 CBRANCH (f(ARG1) INT_EQUAL 0)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp
VZERO CAST VZERO
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp
 STORE 433 (ARG1 + 16) VZERO
 CALL func
 CALL func /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp 49
 CALL func /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp 47
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
 BRANCH VZERO
f() CALL func
 CALL func (RSP + -32)
 CALL func (RSP + -32) f() f()
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_NOTEQUAL 0 [(f() + 40)]
(RSP + -32) PTRSUB RSP -32
0 INT_EQUAL f(ARG1) 0
0 INT_NOTEQUAL f(ARG1) 0
(f() + 40) INT_ADD f() 40
(RSP + -32) PTRSUB RSP -32
 CBRANCH ([(ARG1 + 16)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 STORE 433 (ARG1 + 16) VZERO
VZERO CAST VZERO
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
f(ARG1) COPY f(ARG1)
 RETURN 0
f(ARG1) COPY f(ARG1)
 RETURN 0
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 CALL func /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ManagedStatic.h 69 ARG1
 CALL func ARG1 4278513 4278467 4278513
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
f() CALL func
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ManagedStatic.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ManagedStatic.h
 CALL func
4278513 PTRSUB 0 4278513
4278513 PTRSUB 0 4278513
4278467 PTRSUB 0 4278467
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG2 + ARG3) INT_ADD ARG2 ARG3
 STORE 433 (ARG1 + 8) ARG2
 RETURN 0
 STORE 433 (ARG1 + 16) (ARG2 + ARG3)
 CALL func ARG1 (ARG1 + 24) ARG2 (ARG1 + 24)
(ARG1 + 24) INT_ADD ARG1 24
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 64
 RETURN 0
 CALL libcall_basic_string_thunk ARG1 [ARG2] [(ARG2 + 8)]
ARG1 COPY ARG1
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 1 8
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([ARG2] INT_EQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL [ARG2] 0
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) CAST (f() + 40)
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
(RSP + -17) PTRSUB RSP -17
 BRANCH VZERO
 CALL libcall_allocator_thunk
 CALL libcall_basic_string_thunk
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
[(ARG2 + 8)] CAST [(ARG2 + 8)]
 CALL libcall_~allocator_thunk (RSP + -17)
 RETURN 0
(ARG1 + 24) PTRADD ARG1 3 8
[ARG1] LOAD 433 ARG1
([ARG1] & -256) INT_AND [ARG1] -256
([ARG1] & -256) INT_OR ([ARG1] & -256) 0
0 INT_EQUAL [ARG1] (ARG1 + 24)
 RETURN 0 ([ARG1] & -256)
[ARG1] CAST [ARG1]
[ARG1] CAST [ARG1]
0 INT_ZEXT 0
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 CALL func f() f()
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 RETURN 0
 CALL libcall_free_thunk f()
f() CAST f()
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1 256
 RETURN 0
 CALL func ARG1
 RETURN 0
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
f() CALL func ARG1
f() CALL func ARG1
(f() - f()) COPY (f() - f())
(f() - f()) INT_SUB f() f()
 RETURN 0 (f() - f())
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 (ARG1 + 8) 0
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
 RETURN 0 [(ARG1 + 16)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
(ARG1 + 16) CAST (ARG1 + 16)
ARG2 COPY ARG2
 CALLIND [([ARG1] + 56)] ARG1 (RSP + -20) 1 ARG1
 CALL func ARG1
(ARG1 + 16) PTRADD ARG1 2 8
ARG1 COPY ARG1
(ARG1 + 32) PTRADD ARG1 4 8
[ARG1] LOAD 433 ARG1
 CALL func ARG1
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 8) PTRADD ARG1 1 8
[(ARG1 + 24)] CAST [(ARG1 + 24)]
[(ARG1 + 16)] CAST [(ARG1 + 16)]
0 INT_LESSEQUAL [(ARG1 + 16)] [(ARG1 + 24)]
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_LESSEQUAL [(ARG1 + 24)])
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(f(ARG1) + 24) PTRADD f(ARG1) 3 8
f(ARG1) COPY f(ARG1)
 RETURN 0 ARG1
([(f(ARG1) + 24)] + 1) CAST ([(f(ARG1) + 24)] + 1)
 RETURN 0 f()
([(f(ARG1) + 24)] + 1) PTRADD [(f(ARG1) + 24)] 1 1
 STORE 433 [(f(ARG1) + 24)] f(ARG2)
 CBRANCH ([(ARG1 + 32)] INT_EQUAL 0)
 RETURN 0 f(ARG1)
[(f(ARG1) + 24)] LOAD 433 (f(ARG1) + 24)
0 INT_EQUAL [(ARG1 + 32)] 0
ARG1 COPY ARG1
f() COPY f()
[(f(ARG1) + 24)] CAST [(f(ARG1) + 24)]
(f(ARG1) + 24) PTRADD f(ARG1) 3 8
(ARG1 + 32) CAST (ARG1 + 32)
 STORE 433 (f(ARG1) + 24) ([(f(ARG1) + 24)] + 1)
([ARG1] + 56) CAST ([ARG1] + 56)
f() CALL func ARG1 ARG2 ARG2
f() CAST f()
([ARG1] + 56) INT_ADD [ARG1] 56
(RSP + -20) PTRSUB RSP -20
[([ARG1] + 56)] LOAD 433 ([ARG1] + 56)
0 INT_EQUAL [(ARG1 + 8)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 24) INT_ADD ARG1 24
f(ARG1) CALL func ARG1 ARG2 ARG2
 STORE 433 [(ARG1 + 24)] ARG2
 CBRANCH ([(ARG1 + 24)] INT_LESS [(ARG1 + 16)])
0 INT_LESS [(ARG1 + 24)] [(ARG1 + 16)]
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 24) CAST (ARG1 + 24)
 RETURN 0 f(ARG1)
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG1 + 24) ([(ARG1 + 24)] + 1)
([(ARG1 + 24)] + 1) PTRADD [(ARG1 + 24)] 1 1
(ARG1 + 24) CAST (ARG1 + 24)
 BRANCH VZERO
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
 CALL func ARG1 f(RSP) ((~(f(RSP)) + 1) + (RSP + -20)) f(RSP)
 CALL func ARG1 48
0 INT_EQUAL ARG2 0
ARG2 COPY ARG2
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
 CBRANCH (ARG2 INT_EQUAL 0)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) CAST (f() + 40)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
((f(ARG2) / 2147483647) + (((((f(ARG2) / 10) * 4) / 2147483647) + (f(ARG2) / 21474836470)) * 254)) INT_ADD (f(ARG2) / 2147483647) (((((f(ARG2) / 10) * 4) / 2147483647) + (f(ARG2) / 21474836470)) * 254)
(f(ARG2) / 10) INT_DIV f(ARG2) 10
(f(ARG2) / 10) INT_DIV f(ARG2) 10
(f(ARG2) / 2147483647) SUBPIECE f(ARG2) 0
 STORE 433 (f(RSP) + -1) f(ARG2)
(((((f(ARG2) / 10) * 4) / 2147483647) + (f(ARG2) / 21474836470)) * 254) INT_MULT ((((f(ARG2) / 10) * 4) / 2147483647) + (f(ARG2) / 21474836470)) 254
f(ARG2) INT_ADD ((f(ARG2) / 2147483647) + (((((f(ARG2) / 10) * 4) / 2147483647) + (f(ARG2) / 21474836470)) * 254)) 48
 BRANCH VZERO
(f(RSP) + -1) PTRADD f(RSP) -1 1
((f(ARG2) / 10) * 4) INT_LEFT (f(ARG2) / 10) 2
((((f(ARG2) / 10) * 4) / 2147483647) + (f(ARG2) / 21474836470)) INT_ADD (((f(ARG2) / 10) * 4) / 2147483647) (f(ARG2) / 21474836470)
0 INT_NOTEQUAL f(ARG2) 0
(f(ARG2) / 21474836470) SUBPIECE (f(ARG2) / 10) 0
(((f(ARG2) / 10) * 4) / 2147483647) SUBPIECE ((f(ARG2) / 10) * 4) 0
((~(f(RSP)) + 1) + (RSP + -20)) PTRADD (RSP + -20) (~(f(RSP)) + 1) 1
(~(f(RSP)) + 1) INT_2COMP f(RSP)
 BRANCH VZERO
(RSP + -21) PTRSUB RSP -21
(RSP + -20) PTRADD (RSP + -21) 1 1
(RSP + -20) COPY (RSP + -20)
f(RSP) CAST f(RSP)
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
0 INT_EQUAL ARG2 0
f() CALL libcall_strlen_thunk ARG2
 CBRANCH (ARG2 INT_EQUAL 0)
 RETURN 1
 STORE 433 (ARG1 + 8) f()
llvm::StringRef::StringRef(const char*) COPY llvm::StringRef::StringRef(const char*)
Str && "StringRef cannot be built from a NULL argument" COPY Str && "StringRef cannot be built from a NULL argument"
 CALL libcall___assert_fail_thunk Str && "StringRef cannot be built from a NULL argument" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 71 llvm::StringRef::StringRef(const char*)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
f() CAST f()
 RETURN 0
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0 [(ARG1 + 8)]
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
(ARG1 + 24) INT_ADD ARG1 24
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 16)] - [(ARG1 + 24)]) CAST ([(ARG1 + 16)] - [(ARG1 + 24)])
 CBRANCH (([(ARG1 + 16)] - [(ARG1 + 24)]) INT_LESS f())
0 INT_LESS ([(ARG1 + 16)] - [(ARG1 + 24)]) f()
(ARG1 + 24) CAST (ARG1 + 24)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
f() CALL func (RSP + -56)
(ARG1 + 16) INT_ADD ARG1 16
(RSP + -56) PTRSUB RSP -56
([(ARG1 + 16)] - [(ARG1 + 24)]) INT_SUB [(ARG1 + 16)] [(ARG1 + 24)]
 RETURN 0 f(ARG1)
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH (f() INT_NOTEQUAL 0)
(ARG1 + 24) CAST (ARG1 + 24)
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 24) INT_ADD ARG1 24
f() CALL func (RSP + -56)
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 24) CAST (ARG1 + 24)
f() CAST f()
 STORE 433 (ARG1 + 24) ([(ARG1 + 24)] + f())
([(ARG1 + 24)] + f()) INT_ADD [(ARG1 + 24)] f()
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
(RSP + -56) PTRSUB RSP -56
 CALL libcall_memcpy_thunk [(ARG1 + 24)] f() f()
 BRANCH VZERO
f(ARG1) CALL func ARG1 f() f() f()
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -56)
0 INT_NOTEQUAL f() 0
 CALL func ARG1 A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
 CALL func (RSP + -40) ARG2 ARG2
(RSP + -40) PTRSUB RSP -40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
40 INT_ADD 0 40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 1152921504606846975
1152921504606846975 COPY 1152921504606846975
f() CALL func ARG1
0 INT_LESS f() ARG2
(ARG2 * 16) INT_LEFT ARG2 4
 CALL libcall_operator.new_thunk (ARG2 * 16)
 RETURN 0
 CBRANCH (f() INT_LESS ARG2)
 CALL libcall___throw_bad_alloc_thunk
 CALL func ARG1 ARG2 0 ARG2
 RETURN 0
f() CALL func ARG1 ARG2 ARG2
0 INT_EQUAL ARG2 0
 RETURN 0 f()
 CBRANCH (ARG2 INT_EQUAL 0)
 BRANCH VZERO
0 COPY 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
 RETURN 0
 CALL func f(ARG1)
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(([(ARG1 + 8)] - [ARG1]) / 16) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 4
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0 (([(ARG1 + 8)] - [ARG1]) / 16)
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
[ARG1] LOAD 433 ARG1
[ARG2] LOAD 433 ARG2
ARG2 COPY ARG2
 RETURN 0 f(ARG1 , ARG2)
 CBRANCH ([ARG1] INT_LESS [ARG2])
0 INT_LESS [ARG1] [ARG2]
 BRANCH VZERO
f() CALL func ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
 CALL libcall___throw_length_error_thunk ARG3
0 INT_LESS ([f(RSP)] + f()) f()
[(f() + 40)] LOAD 433 (f() + 40)
f() CALL func f(ARG1)
f(RSP) CALL func (RSP + -48) (RSP + -72) (RSP + -72)
(f() - f()) INT_SUB f() f()
 CBRANCH (([f(RSP)] + f()) INT_LESS f())
[f(RSP)] LOAD 433 f(RSP)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
f(RSP) CAST f(RSP)
(f() - f()) CAST (f() - f())
f() CALL func ARG1
f() CALL func f(ARG1)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
 CBRANCH ((f() - f()) INT_LESS ARG2)
(RSP + -48) PTRSUB RSP -48
(f() + 40) INT_ADD f() 40
(RSP + -72) PTRSUB RSP -72
f() CALL func f(ARG1)
0 INT_EQUAL f() [(f() + 40)]
([f(RSP)] + f()) INT_ADD [f(RSP)] f()
0 INT_LESS (f() - f()) ARG2
f() CALL func f(ARG1)
f() COPY f()
 CBRANCH (f() INT_LESS ([f(RSP)] + f()))
0 INT_LESS f() ([f(RSP)] + f())
f() CALL func f(ARG1)
([f(RSP)] + f()) COPY ([f(RSP)] + f())
 BRANCH VZERO
 RETURN 1
 RETURN 0 f(RSP)
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL libcall_operator.delete_thunk ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
0 INT_NOTEQUAL ARG2 0
 RETURN 0
 CBRANCH (ARG2 INT_NOTEQUAL 0)
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
(RSP + -24) PTRSUB RSP -24
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
40 CAST 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
ARG2 COPY ARG2
 RETURN 0 ARG2
f(ARG1) CALL func 16 ARG1
f(ARG2) CALL func ARG2
f(ARG2) CAST f(ARG2)
f(ARG1) CAST f(ARG1)
 RETURN 0
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG1) 0
 STORE 433 f(ARG1) [f(ARG2)]
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
 STORE 433 (f(ARG1) + 8) [(f(ARG2) + 8)]
[(f(ARG2) + 8)] LOAD 433 (f(ARG2) + 8)
[f(ARG2)] LOAD 433 f(ARG2)
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
ARG1 COPY ARG1
 RETURN 0 ARG1
[ARG1] LOAD 433 ARG1
ARG1 COPY ARG1
 STORE 433 ARG1 ([ARG1] + 16)
 RETURN 0 ARG1
([ARG1] + 16) INT_ADD [ARG1] 16
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
f() CALL func ARG1
f() CALL func ARG2
0 INT_ZEXT 0
0 INT_EQUAL f() f()
 RETURN 0 (f() & -256)
(f() & -256) INT_OR (f() & -256) 0
(f() & -256) INT_AND f() -256
f() CALL func ARG1 ARG2 ARG2
 RETURN 0 0
0 INT_XOR f() 1
0 COPY 0
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
0 INT_EQUAL f() 0
(RSP + -56) PTRSUB RSP -56
 RETURN 0 f(ARG3)
f(ARG3) COPY f(ARG3)
(RSP + -48) PTRSUB RSP -48
f() CALL func (RSP + -48) (RSP + -56) (RSP + -56)
 CBRANCH (f() INT_EQUAL 0)
f(ARG3) CALL func f(ARG3)
 CALL func (RSP + -48)
 BRANCH VZERO
(f(ARG3) + 16) INT_ADD f(ARG3) 16
(RSP + -48) PTRSUB RSP -48
 CALL func f(ARG3) f()
(RSP + -48) PTRSUB RSP -48
f() CALL func (RSP + -48)
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG4
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 ARG4
 RETURN 0
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
f(ARG2) CALL func 16 ARG2
f(ARG3) CALL func ARG3
 RETURN 0
f(ARG2) CAST f(ARG2)
f(ARG3) CAST f(ARG3)
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG2) 0
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
[(f(ARG3) + 8)] LOAD 433 (f(ARG3) + 8)
 STORE 433 (f(ARG2) + 8) [(f(ARG3) + 8)]
(f(ARG3) + 8) PTRADD f(ARG3) 1 8
 STORE 433 f(ARG2) [f(ARG3)]
[f(ARG3)] LOAD 433 f(ARG3)
 CALL func ARG1 ARG2 f(ARG3) ARG2
f(ARG3) CALL func ARG3
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
f() CALL func ARG1 f(RSP) f(RSP)
f(RSP) CALL func ARG1 1 0
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 16) [ARG1]
[ARG1] LOAD 433 ARG1
f(ARG1) CALL func ARG1
 CALL func ARG1 ((f() * 16) + f()) f(ARG2) ((f() * 16) + f())
f(ARG1) CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 f()
f(ARG2) CALL func ARG2
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(f(RSP) * 16) INT_MULT f(RSP) 16
((f() * 16) + f()) INT_ADD (f() * 16) f()
(f() + 16) INT_ADD f() 16
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (ARG1 + 16) ((f(RSP) * 16) + f())
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
((f(RSP) * 16) + f()) INT_ADD (f(RSP) * 16) f()
 STORE 433 (ARG1 + 8) (f() + 16)
f() CALL func [ARG1] [(ARG1 + 8)] f() f(ARG1)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() * 16) INT_MULT f() 16
0 COPY 0
 RETURN 0
(([(ARG1 + 16)] - [ARG1]) / 16) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 4
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1 [(ARG1 + 8)] f(ARG2) [(ARG1 + 8)]
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1 f(ARG2) f(ARG2)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
f(ARG2) CALL func ARG2
f(ARG2) CALL func ARG2
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL [(ARG1 + 16)])
0 INT_EQUAL [(ARG1 + 8)] [(ARG1 + 16)]
 RETURN 0
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 16)
([(ARG1 + 8)] + 16) INT_ADD [(ARG1 + 8)] 16
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1 f(ARG2) f(ARG2)
f(ARG2) CALL func ARG2
 RETURN 0
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 16) [ARG1]
 CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
(([(ARG1 + 16)] - [ARG1]) / 16) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 4
 RETURN 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1
f(ARG1) CALL func ARG1
[ARG1] LOAD 433 ARG1
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func ARG1
 CALL libcall_operator.delete_thunk ARG1
0 INT_NOTEQUAL ARG1 0
 RETURN 0
 CBRANCH (ARG1 INT_NOTEQUAL 0)
 RETURN 0
 CALL func ARG1
 RETURN 0
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
 CALL func ARG1
 STORE 433 (ARG1 + 16) 0
 STORE 433 (ARG1 + 8) 0
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 RETURN 0 f()
f() CALL libcall_operator.new_thunk 24
f() COPY f()
 CALL func f()
 CALL func ARG1 4321242 4321196 4321242
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 CALL func /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ManagedStatic.h 77 ARG1
f() CALL func
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ManagedStatic.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ManagedStatic.h
 RETURN 0 [ARG1]
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
[ARG1] COPY [ARG1]
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
 CALL func
4321242 PTRSUB 0 4321242
4321242 PTRSUB 0 4321242
4321196 PTRSUB 0 4321196
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0 (([(ARG1 + 8)] - [ARG1]) / 32)
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
(([(ARG1 + 8)] - [ARG1]) / 32) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 5
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[ARG1] LOAD 433 ARG1
([ARG1] & -256) INT_OR ([ARG1] & -256) 0
([ARG1] & -256) INT_AND [ARG1] -256
0 INT_NOTEQUAL [ARG1] 0
 RETURN 0 ([ARG1] & -256)
0 INT_ZEXT 0
 CALL libcall___xstat_thunk 1 ARG1 ARG2
 RETURN 0
[ARG1] LOAD 433 ARG1
(ARG2 * 32) INT_MULT ARG2 32
 RETURN 0 ([ARG1] + (ARG2 * 32))
([ARG1] + (ARG2 * 32)) INT_ADD [ARG1] (ARG2 * 32)
 CALL libcall_operator.delete_thunk ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
0 INT_NOTEQUAL ARG2 0
 RETURN 0
 CBRANCH (ARG2 INT_NOTEQUAL 0)
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 32) [ARG1]
(ARG1 + 16) PTRADD ARG1 2 8
(([(ARG1 + 16)] - [ARG1]) / 32) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 5
 RETURN 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL libcall_~basic_string_thunk ARG1
 RETURN 0
ARG1 COPY ARG1
0 INT_NOTEQUAL f(ARG1) ARG2
 RETURN 0
 CBRANCH (f(ARG1) INT_NOTEQUAL ARG2)
 CALL func f(ARG1)
 BRANCH VZERO
(f(ARG1) + 32) INT_ADD f(ARG1) 32
f(ARG1) CALL func f(ARG1)
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
f(ARG1) CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
 CALL libcall_operator.delete_thunk ARG1
0 INT_NOTEQUAL ARG1 0
 CALL func ARG1
 RETURN 0
 CBRANCH (ARG1 INT_NOTEQUAL 0)
 RETURN 0
 CALL func ARG1
 RETURN 0
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
 CALL func ARG1
 STORE 433 (ARG1 + 16) 0
 STORE 433 (ARG1 + 8) 0
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 RETURN 0 f()
f() CALL libcall_operator.new_thunk 24
f() COPY f()
 CALL func f()
 CALL func /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ManagedStatic.h 69 ARG1
 CALL func ARG1 4320716 4320670 4320716
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
f() CALL func
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ManagedStatic.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ManagedStatic.h
0 INT_NOTEQUAL f() 0
 RETURN 0 [ARG1]
 CBRANCH (f() INT_NOTEQUAL 0)
[ARG1] COPY [ARG1]
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
 CALL func
4320716 PTRSUB 0 4320716
4320716 PTRSUB 0 4320716
4320670 PTRSUB 0 4320670
6882576 PTRSUB 0 6882576
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL 0 [(f() + 40)]
f() CALL func 6882576
 CBRANCH (f() INT_EQUAL 1)
(f() + 40) CAST (f() + 40)
0 INT_EQUAL f() 1
 CBRANCH (0 INT_EQUAL [(f() + 40)])
 CBRANCH (f() INT_NOTEQUAL f())
 BRANCH VZERO
f() CALL libcall_c_str_thunk
f() CAST f()
f() CALL func f() (RSP + -168) (RSP + -168)
0 INT_NOTEQUAL f() f()
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(f() + 1) INT_ADD f() 1
(RSP + -168) PTRSUB RSP -168
 CALL func f() f() f()
(f() & 61440) INT_AND f() 61440
 CBRANCH ((f() & 61440) INT_EQUAL 32768)
0 INT_EQUAL (f() & 61440) 32768
6882576 PTRSUB 0 6882576
f() CALL func 6882576
f() CALL func f()
0 COPY 0
 BRANCH VZERO
 CALL libcall_unlink_thunk f()
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
(RSP + -24) PTRSUB RSP -24
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
[ARG1] LOAD 433 ARG1
[ARG2] LOAD 433 ARG2
0 INT_EQUAL [ARG2] [[ARG1]]
([[ARG1]] & 4294967040) INT_OR ([[ARG1]] & 4294967040) 0
([[ARG1]] & 4294967040) INT_AND [[ARG1]] 4294967040
 RETURN 0 ([[ARG1]] & 4294967040)
[[ARG1]] LOAD 433 [ARG1]
0 INT_ZEXT 0
([[ARG1]] & 4294967040) COPY ([[ARG1]] & 4294967040)
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG1 COPY ARG1
((ARG2 - ARG1) / 16) INT_SRIGHT (ARG2 - ARG1) 4
0 INT_SLESS 0 f(ARG1 , ARG2)
 CBRANCH (0 INT_SLESS f(ARG1 , ARG2))
 CBRANCH (f() INT_NOTEQUAL 0)
f(ARG2) COPY f(ARG2)
 RETURN 0 (f(ARG1) + 12)
 RETURN 0 (f(ARG1) + 8)
f(ARG1) COPY f(ARG1)
 RETURN 0 f(ARG1)
 CBRANCH (f() INT_EQUAL 0)
 RETURN 0 f(ARG1)
0 INT_EQUAL f() 0
(f(ARG1) + 4) COPY (f(ARG1) + 4)
f(ARG1) COPY f(ARG1)
f(ARG2) COPY f(ARG2)
(f(ARG1) + 12) COPY (f(ARG1) + 12)
(f(ARG1) + 8) COPY (f(ARG1) + 8)
f(ARG1) COPY f(ARG1)
(f(ARG1) + 4) INT_ADD f(ARG1) 4
f() CALL func (RSP + -48) f(ARG1) f(ARG1)
 RETURN 0 f(ARG2)
f(ARG1) COPY f(ARG1)
 RETURN 0 f(ARG2)
(RSP + -48) PTRSUB RSP -48
 RETURN 0 f(ARG1)
 RETURN 0 (f(ARG1) + 4)
 RETURN 0 f(ARG1)
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(RSP + -48) PTRSUB RSP -48
(f(ARG1) + 12) INT_ADD (f(ARG1) + 8) 4
f() CALL func (RSP + -48) (f(ARG1) + 12) (f(ARG1) + 12)
(RSP + -48) PTRSUB RSP -48
((f(ARG2) - f(ARG1)) / 4) INT_SRIGHT (f(ARG2) - f(ARG1)) 2
(f(ARG2) - f(ARG1)) INT_SUB f(ARG2) f(ARG1)
0 INT_NOTEQUAL ((f(ARG2) - f(ARG1)) / 4) 2
f() CALL func (RSP + -48) f(ARG1) f(ARG1)
 CBRANCH (((f(ARG2) - f(ARG1)) / 4) INT_NOTEQUAL 2)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 0)
(f(ARG1) + 8) INT_ADD (f(ARG1) + 4) 4
f() CALL func (RSP + -48) (f(ARG1) + 8) (f(ARG1) + 8)
(RSP + -48) PTRSUB RSP -48
0 INT_NOTEQUAL f() 0
f() CALL func (RSP + -48) f(ARG1) f(ARG1)
(RSP + -48) PTRSUB RSP -48
0 INT_NOTEQUAL f() 0
0 INT_NOTEQUAL ((f(ARG2) - f(ARG1)) / 4) 3
 CBRANCH (((f(ARG2) - f(ARG1)) / 4) INT_NOTEQUAL 3)
 CBRANCH (((f(ARG2) - f(ARG1)) / 4) INT_NOTEQUAL 1)
(RSP + -48) PTRSUB RSP -48
0 INT_NOTEQUAL ((f(ARG2) - f(ARG1)) / 4) 1
f() CALL func (RSP + -48) f(ARG1) f(ARG1)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
(f(ARG1) + 4) INT_ADD f(ARG1) 4
(f(ARG1) + 16) INT_ADD (f(ARG1) + 12) 4
(f(ARG1 , ARG2) + -1) INT_ADD f(ARG1 , ARG2) -1
 BRANCH VZERO
0 INT_NOTEQUAL f() 0
(f(ARG1) + 4) INT_ADD f(ARG1) 4
f() CALL func (RSP + -48) (f(ARG1) + 4) (f(ARG1) + 4)
(RSP + -48) PTRSUB RSP -48
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG3 ARG2
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -48) PTRSUB RSP -48
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (RSP + -48)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 CALL func ARG1 ARG2 f() ARG2
f() CALL func ARG3
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 8)] COPY [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
 CBRANCH (f() INT_EQUAL 0)
f() CALL func
0 INT_EQUAL f() 0
 RETURN 0 f()
0 INT_NOTEQUAL [(ARG1 + 12)] 1
 CBRANCH ([(ARG1 + 12)] INT_NOTEQUAL 1)
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
 BRANCH VZERO
(ARG1 + 12) CAST (ARG1 + 12)
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 1)
((recursive && acquired) || (acquired == 1)) && "Lock not acquired before release!" COPY ((recursive && acquired) || (acquired == 1)) && "Lock not acquired before release!"
0 COPY 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Mutex.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Mutex.h
 RETURN 1
(ARG1 + 8) CAST (ARG1 + 8)
1 COPY 1
 CALL libcall___assert_fail_thunk ((recursive && acquired) || (acquired == 1)) && "Lock not acquired before release!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Mutex.h 120 0
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 4294967295)
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + 4294967295) INT_ADD [(ARG1 + 8)] 4294967295
0 INT_NOTEQUAL [(ARG1 + 8)] 1
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_EQUAL [(ARG1 + 8)] 0
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
 RETURN 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CALL func [ARG1]
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 CALL func /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ManagedStatic.h 69 ARG1
 CALL func ARG1 4321242 4321196 4321242
[ARG1] COPY [ARG1]
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
f() CALL func
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ManagedStatic.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ManagedStatic.h
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 RETURN 0 [ARG1]
4321242 PTRSUB 0 4321242
4321242 PTRSUB 0 4321242
4321196 PTRSUB 0 4321196
 CALL func
(ARG1 + 24) INT_ADD ARG1 24
 RETURN 0 (ARG1 + 24)
 CBRANCH (f() INT_NOTEQUAL VZERO)
0 INT_NOTEQUAL f() VZERO
0 COPY 0
 RETURN 0
VZERO COPY VZERO
0 COPY 0
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
(f() * 160) INT_MULT f() 160
(f() * 160) INT_MULT f() 160
Symbol PTRSUB 0 Symbol
6882656 PTRSUB 0 6882656
f() INT_ZEXT f()
(Symbol + (f() * 160)) CAST (Symbol + (f() * 160))
((f() * 160) + 6882656) CAST ((f() * 160) + 6882656)
f() INT_ZEXT f()
((f() * 160) + 6882656) PTRADD 6882656 (f() * 160) 1
[(Symbol + (f() * 160))] LOAD 433 (Symbol + (f() * 160))
(Symbol + (f() * 160)) PTRADD Symbol (f() * 160) 1
 CALL libcall_sigaction_thunk [(Symbol + (f() * 160))] ((f() * 160) + 6882656) 0
 CALL func ARG1
 RETURN 0
0 INT_NOTEQUAL ARG1 0
 CALL func ARG1
 CALL libcall_operator.delete_thunk ARG1
 CBRANCH (ARG1 INT_NOTEQUAL 0)
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 12) INT_ADD ARG1 12
 CALL func ARG1 ARG2 ARG2
 STORE 433 (ARG1 + 12) ARG2
 RETURN 0
 STORE 433 (ARG1 + 8) 0
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 12) CAST (ARG1 + 12)
 CALL func f() 1
f() COPY f()
f() CALL libcall_operator.new_thunk 16
 RETURN 0 f()
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 CALL func /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ManagedStatic.h 69 ARG1
 CALL func ARG1 4320625 4320579 4320625
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
f() CALL func
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ManagedStatic.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ManagedStatic.h
 CALL func
4320625 PTRSUB 0 4320625
4320625 PTRSUB 0 4320625
4320579 PTRSUB 0 4320579
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
 CBRANCH (f() INT_EQUAL 0)
f() CALL func
0 INT_EQUAL f() 0
 CBRANCH ([(ARG1 + 12)] INT_NOTEQUAL 1)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0 f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
1 COPY 1
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 1)
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(ARG1 + 8)] 0
([(ARG1 + 8)] + 1) INT_ADD [(ARG1 + 8)] 1
(ARG1 + 8) CAST (ARG1 + 8)
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Mutex.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Mutex.h
(recursive || acquired == 0) && "Lock already acquired!!" COPY (recursive || acquired == 0) && "Lock already acquired!!"
 RETURN 1
 CALL libcall___assert_fail_thunk (recursive || acquired == 0) && "Lock already acquired!!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Mutex.h 106 0
0 INT_NOTEQUAL [(ARG1 + 12)] 1
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(ARG1 + 12) CAST (ARG1 + 12)
 BRANCH VZERO
ARG2 LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 ARG2
 CALL func ARG2
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) 1
[ARG1] LOAD 433 ARG1
(ARG2 * 16) INT_MULT ARG2 16
([ARG1] + (ARG2 * 16)) INT_ADD [ARG1] (ARG2 * 16)
 RETURN 0 ([ARG1] + (ARG2 * 16))
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 8)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([ARG1] INT_EQUAL 0)
 CALL func [ARG1]
 RETURN 0
 RETURN 1
 STORE 433 (ARG1 + 8) 0
0 COPY 0
M && "no associated mutex!" COPY M && "no associated mutex!"
(ARG1 + 8) CAST (ARG1 + 8)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/UniqueLock.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/UniqueLock.h
 CALL libcall___assert_fail_thunk M && "no associated mutex!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/UniqueLock.h 58 0
 CALL libcall___assert_fail_thunk locked && "unlocking a mutex that isn't locked!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/UniqueLock.h 57 0
0 COPY 0
0 INT_EQUAL [ARG1] 0
locked && "unlocking a mutex that isn't locked!" COPY locked && "unlocking a mutex that isn't locked!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/UniqueLock.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/UniqueLock.h
 RETURN 1
ARG1 COPY ARG1
(RSP + -168) PTRSUB RSP -168
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
4601632 PTRSUB 0 4601632
(RSP + -184) PTRSUB RSP -184
f() CALL func 4601632
(f() + 40) CAST (f() + 40)
 CALL libcall_sigprocmask_thunk 1 (RSP + -168) 0
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
(RSP + -168) CAST (RSP + -168)
4601632 PTRSUB 0 4601632
f() CALL func f() f() (RSP + -220) f()
(RSP + -168) PTRSUB RSP -168
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -184) PTRSUB RSP -184
 CBRANCH (f() INT_EQUAL f())
 CALL func (RSP + -184) f() f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -220) PTRSUB RSP -220
6882544 PTRSUB 0 6882544
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL libcall_sigfillset_thunk (RSP + -168)
0 INT_EQUAL f() f()
 CBRANCH f()
f() CALL func 4601632
4601632 PTRSUB 0 4601632
f() CALL func 6882544
f() CALL func 4601632
(RSP + -168) CAST (RSP + -168)
 CALL func (RSP + -184)
 CALL func
 RETURN 1
 RETURN 0
f() COPY f()
f() COPY f()
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (VZERO INT_EQUAL 0)
 CALL libcall_raise_thunk ARG1
0 COPY 0
 BRANCH VZERO
0 COPY 0
(RSP + -184) PTRSUB RSP -184
 CALL func
VZERO COPY VZERO
 BRANCH VZERO
 CALLIND VZERO
0 COPY 0
 CALL func (RSP + -184)
 CBRANCH (f() INT_NOTEQUAL f())
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
[f()] LOAD 433 f()
f() CALL func f() f() f()
 CALLIND [f()] [(f() + 8)]
(f() + 8) INT_ADD f() 8
[(f() + 8)] LOAD 433 (f() + 8)
(f() + 8) CAST (f() + 8)
f() CALL func f() f() f()
0 INT_NOTEQUAL f() f()
f() CAST f()
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func f()
f() CALL func 6882608
6882608 PTRSUB 0 6882608
0 COPY 0
6882608 PTRSUB 0 6882608
f() CALL func 6882608
1 COPY 1
0 INT_EQUAL VZERO 0
0 INT_NOTEQUAL f() 0
f() CALL func 6882608
6882608 PTRSUB 0 6882608
 STORE 433 Symbol ARG1
 CALL libcall_sigaction_thunk ARG1 (RSP + -168) 6882656
 CBRANCH (15 INT_LESS VZERO)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_LESS 15 VZERO
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
Symbol PTRADD Symbol 0 1
VZERO COPY VZERO
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
0 INT_MULT VZERO 160
(RSP + -168) CAST (RSP + -168)
Symbol CAST Symbol
(RSP + -168) PTRSUB RSP -168
6882656 CAST 6882656
VZERO INT_ZEXT VZERO
6882656 PTRSUB 0 6882656
Symbol PTRSUB 0 Symbol
[40] LOAD 433 40
3221225472 COPY 3221225472
VZERO INT_ZEXT VZERO
Symbol PTRSUB 0 Symbol
void RegisterHandler(int) COPY void RegisterHandler(int)
0 INT_MULT VZERO 160
1 INT_ADD VZERO 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Signals.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Signals.inc
NumRegisteredSignals < sizeof(RegisteredSignalInfo)/sizeof(RegisteredSignalInfo[0]) && "Out of space for signal handlers!" COPY NumRegisteredSignals < sizeof(RegisteredSignalInfo)/sizeof(RegisteredSignalInfo[0]) && "Out of space for signal handlers!"
 RETURN 1
 CALL libcall_sigemptyset_thunk (RSP + -160)
 CALL libcall___assert_fail_thunk NumRegisteredSignals < sizeof(RegisteredSignalInfo)/sizeof(RegisteredSignalInfo[0]) && "Out of space for signal handlers!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Signals.inc 99 void RegisterHandler(int)
6882656 PTRADD 6882656 0 1
40 CAST 40
(RSP + -168) PTRSUB RSP -168
(RSP + -160) PTRADD (RSP + -168) 8 1
(RSP + -160) CAST (RSP + -160)
1 COPY 1
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
1 COPY 1
 CALL func 6882544
 RETURN 0
 CBRANCH (VZERO INT_EQUAL 0)
0 INT_EQUAL VZERO 0
6882544 PTRSUB 0 6882544
f() COPY f()
 CBRANCH f(/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Signals.inc , Symbol)
0 INT_NOTEQUAL f(Symbol) /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Signals.inc
 BRANCH VZERO
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Signals.inc CAST /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Signals.inc
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Signals.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Signals.inc
[f(Symbol)] LOAD 433 f(Symbol)
 CALL func [f(Symbol)]
(f(Symbol) + 4) PTRADD f(Symbol) 1 4
 CBRANCH (f(Symbol) INT_NOTEQUAL 4601656)
(f(Symbol) + 4) PTRADD f(Symbol) 1 4
 BRANCH VZERO
0 INT_NOTEQUAL f(Symbol) 4601656
4601656 CAST 4601656
4601656 PTRSUB 0 4601656
[f(Symbol)] LOAD 433 f(Symbol)
 CALL func [f(Symbol)]
Symbol PTRSUB 0 Symbol
Symbol PTRSUB 0 Symbol
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 [f(ARG2)]
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
f(ARG3) CAST f(ARG3)
 RETURN 0
 STORE 433 (ARG1 + 8) [f(ARG3)]
f(ARG2) CAST f(ARG2)
[f(ARG3)] LOAD 433 f(ARG3)
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -56) f(ARG1) f(ARG2) f(ARG1)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(RSP + -56) PTRSUB RSP -56
40 CAST 40
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
40 INT_ADD 0 40
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
ARG1 COPY ARG1
ARG2 COPY ARG2
(RSP + -48) PTRSUB RSP -48
(f() / 2147483647) SUBPIECE f() 0
6882608 PTRSUB 0 6882608
[40] LOAD 433 40
(f() / 2147483647) SUBPIECE f() 8
(RSP + -56) PTRSUB RSP -56
(f() / 2147483647) SUBPIECE f() 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -48) (RSP + -56) (RSP + -56)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func
f() CALL func 6882608
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
 CALL func f() (RSP + -40) f()
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -40) PTRSUB RSP -40
(f() / 2147483647) SUBPIECE f() 8
40 CAST 40
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 40) INT_ADD ARG1 40
 CALLIND [([[(ARG1 + 40)]] + 8)] [(ARG1 + 40)] ARG2 [(ARG1 + 40)]
0 INT_NOTEQUAL [(ARG1 + 40)] 0
 CBRANCH ([(ARG1 + 40)] INT_NOTEQUAL 0)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
 RETURN 0
 CBRANCH ([(ARG1 + 48)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(ARG1 + 40)] 0
 CBRANCH ([(ARG1 + 40)] INT_NOTEQUAL 0)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
0 INT_NOTEQUAL [(ARG1 + 48)] 0
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
(ARG1 + 48) CAST (ARG1 + 48)
(ARG1 + 40) CAST (ARG1 + 40)
([[(ARG1 + 40)]] + 8) INT_ADD [[(ARG1 + 40)]] 8
[([[(ARG1 + 40)]] + 8)] LOAD 433 ([[(ARG1 + 40)]] + 8)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
([[(ARG1 + 40)]] + 8) CAST ([[(ARG1 + 40)]] + 8)
[[(ARG1 + 40)]] LOAD 433 [(ARG1 + 40)]
 BRANCH VZERO
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
 STORE 433 (ARG1 + 48) ARG3
(ARG1 + 48) INT_ADD ARG1 48
 CALL func ARG1
(ARG1 + 40) INT_ADD ARG1 40
 STORE 433 (ARG1 + 40) ARG2
(ARG1 + 48) CAST (ARG1 + 48)
(ARG1 + 40) CAST (ARG1 + 40)
 RETURN 0
(ARG1 + 64) PTRADD ARG1 8 8
(ARG1 + 56) PTRADD ARG1 7 8
(ARG1 + 40) PTRADD ARG1 5 8
(ARG1 + 88) PTRADD ARG1 11 8
 CALL func ARG1 1
(ARG1 + 56) PTRADD ARG1 7 8
(ARG1 + 72) PTRADD ARG1 9 8
(ARG1 + 56) PTRADD ARG1 7 8
 STORE 433 ARG1 Symbol
(ARG1 + 80) PTRADD ARG1 10 8
(ARG1 + 64) PTRADD ARG1 8 8
 CALL func ARG1 ARG2 ARG5 ARG2
(ARG1 + 48) PTRADD ARG1 6 8
(ARG1 + 64) PTRADD ARG1 8 8
 STORE 433 (ARG1 + 88) ARG3
 STORE 433 (ARG1 + 56) ARG4
 STORE 433 (ARG1 + 48) ARG5
 STORE 433 (ARG1 + 72) [(ARG1 + 64)]
0 INT_NOTEQUAL [(ARG1 + 56)] 0
 CBRANCH ([(ARG1 + 56)] INT_NOTEQUAL 0)
 STORE 433 (ARG1 + 40) 0
 RETURN 0
(ARG1 + 48) CAST (ARG1 + 48)
 STORE 433 (ARG1 + 64) 0
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
[(ARG1 + 56)] LOAD 433 (ARG1 + 56)
Symbol CAST Symbol
(ARG1 + 80) CAST (ARG1 + 80)
Symbol PTRSUB 0 Symbol
 STORE 433 (ARG1 + 80) 0
[(ARG1 + 56)] CAST [(ARG1 + 56)]
f() CAST f()
[(ARG1 + 56)] LOAD 433 (ARG1 + 56)
 STORE 433 (ARG1 + 64) f()
f() CALL libcall_operator.new[]_thunk [(ARG1 + 56)]
(ARG1 + 72) INT_ADD ARG1 72
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 80) INT_ADD ARG1 80
(ARG1 + 56) INT_ADD ARG1 56
(ARG1 + 72) INT_ADD ARG1 72
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 72) INT_ADD ARG1 72
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 72) INT_ADD ARG1 72
(ARG1 + 80) INT_ADD ARG1 80
(ARG1 + 64) INT_ADD ARG1 64
 STORE 433 (ARG1 + 72) [(ARG1 + 64)]
([(ARG1 + 72)] - [(ARG1 + 64)]) INT_SUB [(ARG1 + 72)] [(ARG1 + 64)]
(ARG1 + 64) CAST (ARG1 + 64)
[(ARG1 + 80)] LOAD 433 (ARG1 + 80)
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(ARG1 + 64) CAST (ARG1 + 64)
(ARG1 + 80) CAST (ARG1 + 80)
 CALL func [(ARG1 + 40)] [(ARG1 + 64)] ([(ARG1 + 72)] - [(ARG1 + 64)]) [(ARG1 + 64)]
(ARG1 + 72) CAST (ARG1 + 72)
(ARG1 + 72) CAST (ARG1 + 72)
 RETURN 0
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(ARG1 + 64) CAST (ARG1 + 64)
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 80) CAST (ARG1 + 80)
 STORE 433 (ARG1 + 80) 0
0 INT_NOTEQUAL [(ARG1 + 80)] 0
 CBRANCH ([(ARG1 + 80)] INT_NOTEQUAL 0)
(ARG1 + 40) CAST (ARG1 + 40)
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(ARG1 + 56) CAST (ARG1 + 56)
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
(([(ARG1 + 56)] + [(ARG1 + 64)]) - [(ARG1 + 72)]) INT_SUB ([(ARG1 + 56)] + [(ARG1 + 64)]) [(ARG1 + 72)]
([(ARG1 + 56)] + [(ARG1 + 64)]) INT_ADD [(ARG1 + 56)] [(ARG1 + 64)]
(ARG1 + 64) CAST (ARG1 + 64)
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(ARG1 + 72) CAST (ARG1 + 72)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
 CALL func [(ARG1 + 40)] [(ARG1 + 72)] (([(ARG1 + 56)] + [(ARG1 + 64)]) - [(ARG1 + 72)]) [(ARG1 + 72)]
(ARG1 + 72) CAST (ARG1 + 72)
[(ARG1 + 56)] LOAD 433 (ARG1 + 56)
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 56) INT_ADD ARG1 56
 CALL func ARG1
0 INT_NOTEQUAL [(ARG1 + 56)] 0
(ARG1 + 56) CAST (ARG1 + 56)
 CBRANCH ([(ARG1 + 56)] INT_NOTEQUAL 0)
[(ARG1 + 56)] LOAD 433 (ARG1 + 56)
 RETURN 0
[(ARG1 + 88)] LOAD 433 (ARG1 + 88)
 CALL func [(ARG1 + 40)] [(ARG1 + 88)] f() [(ARG1 + 88)]
f() CALL libcall_strlen_thunk [(ARG1 + 88)]
(ARG1 + 40) CAST (ARG1 + 40)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
[(ARG1 + 88)] LOAD 433 (ARG1 + 88)
(ARG1 + 88) CAST (ARG1 + 88)
(ARG1 + 88) CAST (ARG1 + 88)
f() CALL func
 CALL func f()
 RETURN 0
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
 CALL func ARG1
 RETURN 0
 CALL func ARG1 f() *** Debug Log Output ***  f() 0
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
*** Debug Log Output ***  COPY *** Debug Log Output *** 
f() COPY f()
0 INT_EQUAL VZERO 0
f() CALL func
 RETURN 0
 CBRANCH (VZERO INT_EQUAL 0)
 CBRANCH f()
f() COPY f()
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
6887520 PTRSUB 0 6887520
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
f() CALL func 6887520
 BRANCH VZERO
1 COPY 1
0 INT_EQUAL VZERO 0
 CBRANCH (VZERO INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
f() CALL func 6887520
6887520 PTRSUB 0 6887520
f() INT_SEXT f()
4391219 PTRSUB 0 4391219
 CALL func 4391219 0
(ARG1 + 24) PTRADD ARG1 3 8
 STORE 433 ARG1 Symbol
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
 CBRANCH ([(ARG1 + 24)] INT_EQUAL [(ARG1 + 8)])
Symbol PTRSUB 0 Symbol
0 INT_EQUAL [(ARG1 + 24)] [(ARG1 + 8)]
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 32)] INT_EQUAL 1)
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(ARG1 + 8)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL libcall_operator.delete[]_thunk [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] CAST [(ARG1 + 8)]
 CALL libcall___assert_fail_thunk 0 0 66 0
0 INT_EQUAL [(ARG1 + 32)] 1
 RETURN 0
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
0 COPY 0
(ARG1 + 32) CAST (ARG1 + 32)
0 COPY 0
0 COPY 0
 RETURN 1
(ARG1 + 64) PTRADD ARG1 8 8
 CALL func ARG1
 CALL func ARG1
(ARG1 + 64) PTRADD ARG1 8 8
 CALL func ARG1
 STORE 433 ARG1 Symbol
 CALL func ARG1
0 INT_NOTEQUAL [(ARG1 + 64)] 0
 CBRANCH ([(ARG1 + 64)] INT_NOTEQUAL 0)
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
 CALL libcall_operator.delete[]_thunk [(ARG1 + 64)]
 CALL func ARG1
 RETURN 0
f() COPY f()
 RETURN 0 Symbol
0 INT_EQUAL VZERO 0
Symbol PTRSUB 0 Symbol
 CBRANCH (VZERO INT_EQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 0)
 CALL libcall___cxa_atexit_thunk 4391440 6887680 6878568
 CALL func 6887680
6887680 PTRSUB 0 6887680
 CALL libcall___cxa_guard_release_thunk 6887672
6887672 PTRSUB 0 6887672
6887680 PTRSUB 0 6887680
4391440 PTRSUB 0 4391440
6878568 PTRSUB 0 6878568
6887672 PTRSUB 0 6887672
0 INT_NOTEQUAL f() 0
f() CALL libcall___cxa_guard_acquire_thunk 6887672
0 INT_NOTEQUAL ARG2 0
f() CALL func f() ARG2 f()
 CALL func f() ARG3 f()
f() CALL func f() ARG1 f()
0 INT_NOTEQUAL ARG1 0
 CALL func f() 4594834
4594834 PTRSUB 0 4594834
 CBRANCH (ARG2 INT_NOTEQUAL 0)
UNREACHABLE executed COPY UNREACHABLE executed
f() CALL func
 RETURN 1
 CALL libcall_abort_thunk
 CALL func f() UNREACHABLE executed
 CBRANCH (ARG1 INT_NOTEQUAL 0)
f() CALL func
f() CALL func f() 4594827
4594832 PTRSUB 0 4594832
f() CALL func f() 4594832
4594827 PTRSUB 0 4594827
f() CALL func
f() CALL func
 CALL func f() 4594804
4594804 PTRSUB 0 4594804
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
0 INT_EQUAL ARG2 0
 STORE 433 (ARG1 + 8) ARG3
0 INT_NOTEQUAL ARG3 0
 CBRANCH (ARG2 INT_EQUAL 0)
 CBRANCH (ARG3 INT_NOTEQUAL 0)
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 RETURN 1
 RETURN 0
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 79 0
 CALL func ARG1
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 f()
 RETURN 0
f() CALL libcall_length_thunk
 STORE 433 (ARG1 + 8) f()
f() CALL libcall_data_thunk
(ARG1 + 17) INT_ADD ARG1 17
 RETURN 0 [(ARG1 + 17)]
[(ARG1 + 17)] LOAD 433 (ARG1 + 17)
[(ARG1 + 17)] COPY [(ARG1 + 17)]
(ARG1 + 17) CAST (ARG1 + 17)
f() CALL func ARG1
f() CALL func ARG1
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
 RETURN 0 f()
0 COPY 0
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_LESS (f() + 3) 4
0 COPY 0
(f() + 3) INT_SUB f() 3
 CBRANCH ((f() + 3) INT_LESS 4)
0 INT_NOTEQUAL f() 0
 BRANCH VZERO
f() INT_ZEXT f()
1 COPY 1
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 RETURN 1
 RETURN 0 (f(ARG1) # f(ARG1))
(f(ARG1) # f(ARG1)) PIECE f(ARG1) f(ARG1)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CALL libcall___assert_fail_thunk isSingleStringRef() &&"This cannot be had as a single stringref!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h 439 llvm::StringRef llvm::Twine::getSingleStringRef() const
(f() + 40) INT_ADD f() 40
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h
0 INT_NOTEQUAL 0 [(f() + 40)]
isSingleStringRef() &&"This cannot be had as a single stringref!" COPY isSingleStringRef() &&"This cannot be had as a single stringref!"
llvm::StringRef llvm::Twine::getSingleStringRef() const COPY llvm::StringRef llvm::Twine::getSingleStringRef() const
 BRANCHIND f()
(RSP + -56) PTRSUB RSP -56
([ARG1] + 8) PTRADD [ARG1] 1 8
[ARG1] CAST [ARG1]
[[ARG1]] LOAD 433 [ARG1]
 CALL func Out of sync with isSingleStringRef /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h 441
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h
Out of sync with isSingleStringRef COPY Out of sync with isSingleStringRef
 BRANCH VZERO
[([ARG1] + 8)] LOAD 433 ([ARG1] + 8)
 CALL func (RSP + -56) [ARG1] [ARG1]
(RSP + -56) PTRSUB RSP -56
f() CALL func [ARG1]
 CALL func (RSP + -56) [ARG1] [ARG1]
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) f() f() f()
(RSP + -56) PTRSUB RSP -56
f() CALL func [ARG1]
 CALL func (RSP + -56)
 BRANCH VZERO
 BRANCH VZERO
 CALL func ARG1
 RETURN 0
 CALL func ARG1 ARG2 ARG3 2
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
 RETURN 0 [(ARG1 + 16)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
(ARG1 + 16) CAST (ARG1 + 16)
f() CALL func ARG1
f() CALL func ARG1
 RETURN 0 (f() - f())
(f() - f()) COPY (f() - f())
(f() - f()) INT_SUB f() f()
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
 RETURN 0 ([(ARG1 + 16)] - [ARG1])
([(ARG1 + 16)] - [ARG1]) COPY ([(ARG1 + 16)] - [ARG1])
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
([(ARG1 + 8)] - [ARG1]) COPY ([(ARG1 + 8)] - [ARG1])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
 RETURN 0 ([(ARG1 + 8)] - [ARG1])
f() CALL func ARG1
f(ARG1) LOAD 433 ARG1
f(ARG1) LOAD 433 ARG1
f(ARG1) LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
f(ARG1) LOAD 433 ARG1
 STORE 433 ARG1 f()
0 INT_EQUAL f(ARG1) ARG2
ARG3 COPY ARG3
0 INT_LESS (ARG4 + (f() * 2)) ARG3
(ARG4 + (f() * 2)) INT_ADD ARG4 (f() * 2)
0 INT_EQUAL f() 0
(f() * 2) INT_MULT f() 2
 CBRANCH (f(ARG1) INT_EQUAL ARG2)
 CBRANCH ((ARG4 + (f() * 2)) INT_LESS ARG3)
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_malloc_thunk f(ARG3 , ARG4)
 CALL libcall_memcpy_thunk f() f(ARG1) f()
f() CALL libcall_realloc_thunk f(ARG1) f(ARG3 , ARG4)
 BRANCH VZERO
(f() + f()) CAST (f() + f())
f() CAST f()
NewElts && "Out of memory" COPY NewElts && "Out of memory"
 STORE 433 (ARG1 + 16) (f(ARG1) + f(ARG3 , ARG4))
 STORE 433 (ARG1 + 8) (f() + f())
0 COPY 0
(f() + f()) INT_ADD f() f()
(f(ARG1) + f(ARG3 , ARG4)) INT_ADD f(ARG1) f(ARG3 , ARG4)
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallVector.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallVector.cpp
 CALL libcall___assert_fail_thunk NewElts && "Out of memory" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallVector.cpp 36 0
f(ARG1) CAST f(ARG1)
 RETURN 0
(f(ARG1) + f(ARG3 , ARG4)) CAST (f(ARG1) + f(ARG3 , ARG4))
 CALL func ARG1 (ARG1 + 24) ARG2 ARG3
(ARG1 + 24) INT_ADD ARG1 24
 RETURN 0
 CALL func ARG1 ARG2 1 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
f() CALL func ARG1
0 INT_LESS f() ARG2
 CBRANCH (f() INT_LESS ARG2)
 RETURN 0
(ARG1 + 40) INT_ADD ARG1 40
 CALL func ARG1 f() (f() - f()) f()
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
 RETURN 0
f() CALL func [(ARG1 + 40)]
f() CALL func [(ARG1 + 40)]
f() CALL func [(ARG1 + 40)]
(ARG1 + 40) CAST (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
(f() - f()) INT_SUB f() f()
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(f() + 128) INT_ADD f() 128
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
 CALL func [(ARG1 + 40)] (f() + 128) (f() + 128)
(ARG1 + 40) CAST (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
f() CALL func [(ARG1 + 40)]
 CALL func ARG1 0
 STORE 433 ARG1 Symbol
(ARG1 + 40) PTRADD ARG1 5 8
 CALL func ARG1
 STORE 433 (ARG1 + 40) ARG2
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func ARG1
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol PTRSUB 0 Symbol
 STORE 433 ARG1 Symbol
 CALL func ARG1
 CALL func ARG1
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
f() CALL func ARG2
f() CALL func ARG2
 CALL func ARG1 f() f() f()
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
40 CAST 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 f(ARG2) f(ARG2)
 CALL func ARG1 45
0 INT_SLESS ARG2 0
(~(ARG2) + 1) INT_2COMP ARG2
ARG2 COPY ARG2
 CBRANCH (ARG2 INT_SLESS 0)
 RETURN 0
 CALL func ARG1 ARG2 ARG2
ARG2 INT_SEXT ARG2
 RETURN 0
 CALL func ARG1 48
 CALL func ARG1 f(RSP) ((~(f(RSP)) + 1) + (RSP + -20)) f(RSP)
ARG2 COPY ARG2
0 INT_EQUAL ARG2 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
 CBRANCH (ARG2 INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
 STORE 433 (f(RSP) + -1) f(ARG2)
(15 & (f(ARG2) / 2147483647)) INT_AND (f(ARG2) / 2147483647) 15
(f(ARG2) / 2147483647) SUBPIECE f(ARG2) 0
 BRANCH VZERO
(f(RSP) + -1) PTRADD f(RSP) -1 1
0 INT_LESS (15 & (f(ARG2) / 2147483647)) 10
0 INT_NOTEQUAL f(ARG2) 0
(f(ARG2) / 16) INT_RIGHT f(ARG2) 4
 CBRANCH ((15 & (f(ARG2) / 2147483647)) INT_LESS 10)
((15 & (f(ARG2) / 2147483647)) / 2147483647) SUBPIECE (15 & (f(ARG2) / 2147483647)) 0
(~(f(RSP)) + 1) INT_2COMP f(RSP)
f(RSP) CAST f(RSP)
(RSP + -21) PTRSUB RSP -21
(RSP + -20) PTRADD (RSP + -21) 1 1
((~(f(RSP)) + 1) + (RSP + -20)) PTRADD (RSP + -20) (~(f(RSP)) + 1) 1
(RSP + -20) COPY (RSP + -20)
 BRANCH VZERO
(((15 & (f(ARG2) / 2147483647)) / 2147483647) + 48) INT_ADD ((15 & (f(ARG2) / 2147483647)) / 2147483647) 48
(((15 & (f(ARG2) / 2147483647)) / 2147483647) + 87) INT_ADD ((15 & (f(ARG2) / 2147483647)) / 2147483647) 87
 BRANCH VZERO
 CALL func ARG1 f(ARG2) f(ARG2)
 CALL func ARG1 45
0 INT_SLESS ARG2 0
(~(ARG2) + 1) INT_2COMP ARG2
ARG2 COPY ARG2
 CBRANCH (ARG2 INT_SLESS 0)
 RETURN 0
 BRANCHIND ARG4
 CALL func ARG2 (ARG3 & 4294967295) (ARG3 & 4294967295)
 CALL func ARG2 [ARG3] [ARG3]
 CALL func ARG2 [ARG3] [ARG3]
 CALL func ARG2 (ARG3 / 2147483647) (ARG3 / 2147483647)
 CALL func ARG3 ARG2 ARG2
 CALL func ARG2 [ARG3] [ARG3]
 CALL func ARG2 ARG3 ARG3
 CALL func ARG2 [ARG3] [ARG3]
 CALL func ARG2 ARG3 ARG3
 CALL func ARG2 (ARG3 & 4294967295) (ARG3 & 4294967295)
 CALL func ARG2 [ARG3] [ARG3]
 CALL func ARG2 ARG3 ARG3
 CALL func ARG2 [ARG3] [(ARG3 + 8)] [ARG3]
[ARG3] LOAD 433 ARG3
ARG3 CAST ARG3
(ARG3 + 8) PTRADD ARG3 1 8
[ARG3] LOAD 433 ARG3
[ARG3] LOAD 433 ARG3
[ARG3] LOAD 433 ARG3
ARG3 CAST ARG3
(ARG3 / 2147483647) SUBPIECE ARG3 0
ARG3 CAST ARG3
[ARG3] LOAD 433 ARG3
ARG3 CAST ARG3
[ARG3] LOAD 433 ARG3
 RETURN 0
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
(ARG3 & 4294967295) INT_AND ARG3 4294967295
 BRANCH VZERO
(ARG3 & 4294967295) INT_AND ARG3 4294967295
(ARG3 & 4294967295) INT_AND ARG3 4294967295
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
 BRANCH VZERO
 BRANCH VZERO
(ARG3 & 4294967295) INT_AND ARG3 4294967295
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
(ARG3 / 2147483647) INT_SEXT (ARG3 / 2147483647)
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
 CALL func ARG1 ARG2 [ARG1] f()
 CALL func ARG1 ARG2 [(ARG1 + 8)] f()
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func ARG1 (RSP + -72) (RSP + -72)
 CALL func (RSP + -72) ARG2 ARG2
(RSP + -72) PTRSUB RSP -72
[40] LOAD 433 40
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -72) PTRSUB RSP -72
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (RSP + -72)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -72) PTRSUB RSP -72
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALL func ARG1 ARG2 ARG2
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG2
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
 CALL func (RSP + -56) f() f() f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 f()
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -312) (RSP + -312)
 CALL libcall_basic_string_thunk ARG1
f() CALL func ARG2 (RSP + -296) (RSP + -296)
(ARG2 + 16) INT_ADD ARG2 16
(ARG2 + 17) INT_ADD ARG2 17
(ARG2 + 16) CAST (ARG2 + 16)
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
 CBRANCH ([(ARG2 + 16)] INT_EQUAL 4)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL [(ARG2 + 16)] 4
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
(RSP + -296) PTRSUB RSP -296
(RSP + -296) PTRSUB RSP -296
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -296)
(f() / 2147483647) SUBPIECE f() 0
[(ARG2 + 17)] LOAD 433 (ARG2 + 17)
(RSP + -312) PTRSUB RSP -312
(RSP + -296) PTRSUB RSP -296
(ARG2 + 17) CAST (ARG2 + 17)
 CBRANCH ([(ARG2 + 17)] INT_EQUAL 1)
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -296)
0 INT_EQUAL [(ARG2 + 17)] 1
(f() / 2147483647) SUBPIECE f() 0
(A_Stack[-0x130]:8 # A_Stack[-0x138]:8) PIECE A_Stack[-0x130]:8 A_Stack[-0x138]:8
 BRANCH VZERO
ARG1 COPY ARG1
 CALL func ARG2 ARG1 ARG1
 RETURN 0 ARG1
 CALL func ARG1
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -56) PTRSUB RSP -56
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(ARG1 + 40) CAST (ARG1 + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
f() CALL func [(ARG1 + 40)]
f() CALL func [(ARG1 + 40)]
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
 CALL func (RSP + -56) f() f() f()
(ARG1 + 40) CAST (ARG1 + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
 RETURN 1
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL func ARG1
 RETURN 0
[ARG1] LOAD 433 ARG1
 RETURN 0
 CALL func [ARG1]
 STORE 433 ARG1 ARG2
ARG2 LOAD 433 ARG1
 CALL func ARG2
 RETURN 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -24) PTRSUB RSP -24
 CALL func
[40] LOAD 433 40
f() CALL func 6882544
 CALL func (RSP + -24) f() f()
6882544 PTRSUB 0 6882544
(RSP + -24) PTRSUB RSP -24
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (RSP + -24)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
40 CAST 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALLIND VZERO VZERO (RSP + -120) ARG2 VZERO
f() CALL func f() ARG1 f()
 CALL func (RSP + -120) ARG1 ARG1
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (VZERO INT_EQUAL 0)
(RSP + -168) PTRSUB RSP -168
 CALL func
VZERO COPY VZERO
0 INT_EQUAL VZERO 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
VZERO COPY VZERO
6882432 PTRSUB 0 6882432
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func 6882432
(RSP + -168) PTRSUB RSP -168
 RETURN 1
f() COPY f()
 CALL func (RSP + -168) f() f()
 CALL libcall_exit_thunk 1
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -168)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -168) PTRSUB RSP -168
 BRANCH VZERO
 CALL libcall_~basic_string_thunk (RSP + -120)
 CALL func (RSP + -168) (RSP + -120) (RSP + -120)
4594804 PTRSUB 0 4594804
(RSP + -184) PTRSUB RSP -184
(f() / 2147483647) SUBPIECE f() 0
 CALL libcall_write_thunk 2 f() f()
(f() / 2147483647) SUBPIECE f() 0
(RSP + -120) PTRSUB RSP -120
(RSP + -120) PTRSUB RSP -120
(f() / 2147483647) SUBPIECE f() 8
(RSP + -120) PTRSUB RSP -120
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -120)
(RSP + -120) PTRSUB RSP -120
(RSP + -168) PTRSUB RSP -168
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -184)
f() CALL func (RSP + -168)
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -120)
(RSP + -120) PTRSUB RSP -120
f() CALL func (RSP + -168) LLVM ERROR: 
(f() / 2147483647) SUBPIECE f() 8
LLVM ERROR:  COPY LLVM ERROR: 
 CALL func (RSP + -168)
(A_Stack[-0xb0]:8 # A_Stack[-0xb8]:8) PIECE A_Stack[-0xb0]:8 A_Stack[-0xb8]:8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -168) PTRSUB RSP -168
(f() / 2147483647) SUBPIECE f() 8
(RSP + -168) PTRSUB RSP -168
(f() / 2147483647) SUBPIECE f() 8
 CALL func f() 4594804
f() CAST f()
f() CALL func (RSP + -184)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -120) PTRSUB RSP -120
f() CALL func ARG1
f() CALL func ARG1
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 1)
 RETURN 0 0
 RETURN 0 1
0 COPY 0
1 COPY 1
0 INT_NOTEQUAL f() 1
f() CALL func ARG1
(f() / 2147483647) SUBPIECE f() 0
(f() & -256) INT_AND f() -256
 RETURN 0 (f() & -256)
0 INT_EQUAL (f() / 2147483647) 1
0 INT_ZEXT 0
(f() & -256) INT_OR (f() & -256) 0
f() CALL func ARG1
(f() & -256) INT_OR (f() & -256) 0
(f() / 2147483647) SUBPIECE f() 0
(f() & -256) INT_AND f() -256
 RETURN 0 (f() & -256)
0 INT_EQUAL (f() / 2147483647) 0
0 INT_ZEXT 0
f() CALL func ARG1
f() CALL func ARG1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 RETURN 0 1
0 COPY 0
 RETURN 0 0
0 INT_EQUAL f() 0
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
f() CALL func ARG1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH f()
 CBRANCH (f() INT_EQUAL 2)
0 COPY 0
f() CALL func [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
1 COPY 1
 BRANCH VZERO
0 COPY 0
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 0)
 RETURN 0 0
0 COPY 0
0 COPY 0
 RETURN 0 0
0 COPY 0
0 COPY 0
 RETURN 0 ~(f())
 RETURN 0 0
~(f()) COPY ~(f())
~(f()) BOOL_NEGATE f()
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
 CBRANCH ~(f())
 RETURN 0 0
 CBRANCH (f() INT_NOTEQUAL 1)
0 COPY 0
1 COPY 1
 BRANCH VZERO
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH (f() INT_EQUAL 2)
f() CALL func [ARG1]
0 INT_NOTEQUAL f() 1
 BRANCH VZERO
1 COPY 1
~(f()) BOOL_NEGATE f()
0 INT_EQUAL f() 2
~(f()) BOOL_NEGATE f()
 CBRANCH ~(f())
0 INT_EQUAL f() 2
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 ARG2
f() CALL func ARG1
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
[ARG2] LOAD 433 ARG2
 STORE 433 (ARG1 + 17) 1
 CBRANCH ([ARG2] INT_EQUAL 0)
0 INT_EQUAL [ARG2] 0
(ARG1 + 17) INT_ADD ARG1 17
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(ARG1 + 17) CAST (ARG1 + 17)
 BRANCH VZERO
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG1 + 16) 3
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG1 + 16) 1
 RETURN 0
 CALL libcall___assert_fail_thunk isValid() && "Invalid twine!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h 276 llvm::Twine::Twine(const char*)
llvm::Twine::Twine(const char*) COPY llvm::Twine::Twine(const char*)
isValid() && "Invalid twine!" COPY isValid() && "Invalid twine!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h
 RETURN 1
ARG2 INT_ZEXT ARG2
ARG2 COPY ARG2
ARG1 COPY ARG1
(RSP + -200) PTRSUB RSP -200
(RSP + -80) PTRSUB RSP -80
 CALL func (RSP + -128)
(RSP + -216) PTRSUB RSP -216
(RSP + -8) CAST (RSP + -8)
[40] LOAD 433 40
 CALL func (RSP + -56)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -128) PTRSUB RSP -128
(RSP + -8) COPY (RSP + -8)
4291047 COPY 4291047
ARG2 COPY ARG2
(RSP + -8) PTRSUB RSP -8
40 CAST 40
 RETURN 0
4290977 COPY 4290977
 CALL func (RSP + -200) 0
(RSP + -56) PTRSUB RSP -56
(RSP + -128) PTRSUB RSP -128
40 INT_ADD 0 40
ARG2 INT_ZEXT ARG2
(RSP + -56) PTRSUB RSP -56
40 CAST 40
 CALL func (RSP + -200) (RSP + -216) (RSP + -216)
[40] LOAD 433 40
(RSP + -80) CAST (RSP + -80)
 CALL func
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func
(RSP + -200) PTRSUB RSP -200
4291061 PTRSUB 0 4291061
(RSP + -80) COPY (RSP + -80)
40 INT_ADD 0 40
4290991 PTRSUB 0 4290991
(FS_OFFSET + 40) INT_ADD 0 40
ARG2 INT_ZEXT ARG2
(ARG1 + 41) INT_ADD ARG1 41
(ARG1 + 41) CAST (ARG1 + 41)
 RETURN 0
 STORE 433 (ARG1 + 41) 1
ARG1 CAST ARG1
(ARG1 + 40) PTRADD ARG1 5 8
f() CALL func ARG1
 CALL func ARG1
 CALL func ARG1
 STORE 433 ARG1 Symbol
ARG1 CAST ARG1
 CALL func ARG1
[(ARG1 + 36)] LOAD 433 (ARG1 + 36)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f() [(f() + 40)]
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(ARG1 + 36) CAST (ARG1 + 36)
 CBRANCH ([(ARG1 + 36)] INT_SLESS 0)
0 INT_SLESS [(ARG1 + 36)] 0
[(f() + 40)] LOAD 433 (f() + 40)
(ARG1 + 36) INT_ADD ARG1 36
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CALL func IO failure on output stream. 0
IO failure on output stream. COPY IO failure on output stream.
 CBRANCH ([(ARG1 + 40)] INT_EQUAL 0)
f() CALL func (RSP + -56)
(ARG1 + 36) CAST (ARG1 + 36)
0 INT_EQUAL f() 0
0 COPY 0
(RSP + -56) PTRSUB RSP -56
f() CALL func [(ARG1 + 36)]
(ARG1 + 36) INT_ADD ARG1 36
[(ARG1 + 36)] LOAD 433 (ARG1 + 36)
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CBRANCH f()
0 INT_EQUAL [(ARG1 + 40)] 0
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
 RETURN 0 Symbol
f() COPY f()
Symbol PTRSUB 0 Symbol
 CBRANCH (VZERO INT_EQUAL 0)
0 INT_EQUAL VZERO 0
f() CALL libcall___cxa_guard_acquire_thunk 6882128
6882128 PTRSUB 0 6882128
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
6878568 PTRSUB 0 6878568
4219516 PTRSUB 0 4219516
6882208 PTRSUB 0 6882208
 CALL libcall___cxa_atexit_thunk 4219516 6882208 6878568
6882128 PTRSUB 0 6882128
 CALL func 6882208 2 0 1
 CALL libcall___cxa_guard_release_thunk 6882128
6882208 PTRSUB 0 6882208
(ARG1 + 32) INT_ADD ARG1 32
ARG1 COPY ARG1
 CBRANCH (([(ARG1 + 32)] & 1) INT_EQUAL 0)
0 INT_EQUAL ([(ARG1 + 32)] & 1) 0
([(ARG1 + 32)] & 1) INT_AND [(ARG1 + 32)] 1
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(ARG1 + 32) CAST (ARG1 + 32)
HasError && "Cannot get error when a value exists!" COPY HasError && "Cannot get error when a value exists!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ErrorOr.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ErrorOr.h
 RETURN 0 ARG1
 RETURN 1
 CALL libcall___assert_fail_thunk HasError && "Cannot get error when a value exists!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ErrorOr.h 264 0
0 COPY 0
 CALL func ARG1
 RETURN 0
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 2 4
 RETURN 0
f() CALL libcall_system_category_thunk
 STORE 433 (ARG1 + 8) f()
(ARG1 + 8) CAST (ARG1 + 8)
f() CALL func ARG1
(ARG1 + 32) INT_ADD ARG1 32
 CBRANCH (([(ARG1 + 32)] & 1) INT_EQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL ([(ARG1 + 32)] & 1) 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(f() + 40) CAST (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(ARG1 + 32) CAST (ARG1 + 32)
(f() # f()) PIECE f() f()
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
([(ARG1 + 32)] & 1) INT_AND [(ARG1 + 32)] 1
 BRANCH VZERO
 CALL func (RSP + -56)
[f()] LOAD 433 f()
(RSP + -56) PTRSUB RSP -56
(f() + 8) PTRADD f() 1 8
f() CAST f()
[(f() + 8)] LOAD 433 (f() + 8)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (f() # f())
(f() # f()) INT_AND (f() # f()) -1
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
f() CALL func ARG2
f() CALL func ARG2
 CALLIND [([f()] + 32)] ARG1 f() f()
ARG1 COPY ARG1
([f()] + 32) CAST ([f()] + 32)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[f()] LOAD 433 f()
(FS_OFFSET + 40) INT_ADD 0 40
f() CAST f()
([f()] + 32) INT_ADD [f()] 32
[40] LOAD 433 40
[([f()] + 32)] LOAD 433 ([f()] + 32)
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 4) PTRADD ARG1 1 4
 STORE 433 ARG1 0
 RETURN 0
 STORE 433 (ARG1 + 4) 0
f() CALL libcall_strerror_r_thunk ARG2 (RSP + -2024) 1999
0 INT_NOTEQUAL ARG2 0
ARG1 COPY ARG1
 CALL libcall_operator=_thunk ARG1 f()
0 INT_NOTEQUAL 0 [(f() + 40)]
 CBRANCH (ARG2 INT_NOTEQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CALL libcall_basic_string_thunk
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
 BRANCH VZERO
0 COPY 0
(RSP + -2024) PTRSUB RSP -2024
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0
ARG1 CAST ARG1
ARG1 COPY ARG1
 CALL libcall_basic_string_thunk ARG1
 CALL libcall_append_thunk ARG1
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
40 INT_ADD 0 40
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 CALL libcall_basic_string_thunk ARG1
f() CALL libcall_append_thunk ARG2
f() CALL libcall_insert_thunk ARG3 0
f() CALL libcall_size_thunk
f() CALL libcall_capacity_thunk
0 INT_LESS f() (f() + f())
 RETURN 0 ARG1
(f() + f()) INT_ADD f() f()
f() CALL libcall_size_thunk
 CBRANCH (f() INT_LESS (f() + f()))
(f() + f()) CAST (f() + f())
 CBRANCH f()
 CBRANCH ((f() + f()) INT_LESSEQUAL f())
1 COPY 1
0 COPY 0
 BRANCH VZERO
(f() + f()) CAST (f() + f())
f() CALL libcall_capacity_thunk
0 INT_LESSEQUAL (f() + f()) f()
 CALL func f()
 CALL func f()
 BRANCH VZERO
0 INT_EQUAL ARG3 4294967295
ARG3 COPY ARG3
 CALL libcall_operator=_thunk ARG1 (RSP + -56)
0 INT_NOTEQUAL ARG1 0
 CALL func (RSP + -120) ARG2 4592135 ARG2
0 INT_EQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
1 COPY 1
 CBRANCH (ARG1 INT_NOTEQUAL 0)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
 CALL libcall_~basic_string_thunk (RSP + -56)
(RSP + -56) CAST (RSP + -56)
(RSP + -88) PTRSUB RSP -88
(RSP + -56) PTRSUB RSP -56
(RSP + -120) PTRSUB RSP -120
 CBRANCH (ARG3 INT_EQUAL 4294967295)
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -56) (RSP + -120) (RSP + -88) (RSP + -120)
 CALL libcall_~basic_string_thunk (RSP + -120)
(RSP + -120) PTRSUB RSP -120
(RSP + -88) PTRSUB RSP -88
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -88) f(ARG3) f(ARG3)
(RSP + -56) PTRSUB RSP -56
(RSP + -120) PTRSUB RSP -120
4592135 PTRSUB 0 4592135
 CALL libcall_~basic_string_thunk (RSP + -88)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 1
 RETURN 1
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
0 INT_NOTEQUAL ARG3 1
0 INT_NOTEQUAL ARG3 1
0 INT_EQUAL ARG3 0
 CALL func ARG4 (RSP + -360) 4294967295 (RSP + -360)
 CALL libcall_operator+=_thunk ARG4 (core dumped)
 CALL libcall_operator=_thunk ARG4 Program could not be executed
 CALL libcall_operator=_thunk ARG4 f()
0 INT_NOTEQUAL ARG4 0
 CALL libcall_operator=_thunk ARG4 (RSP + -360)
 CALL func ARG4 (RSP + -360) 0 (RSP + -360)
 CALL func ARG4 (RSP + -360) 4294967295 (RSP + -360)
0 INT_NOTEQUAL ARG4 0
0 INT_NOTEQUAL ARG4 0
 CALL libcall_alarm_thunk ARG2
0 INT_EQUAL ARG2 0
ARG2 COPY ARG2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 CBRANCH (ARG4 INT_NOTEQUAL 0)
 CALL libcall_~basic_string_thunk (RSP + -360)
(RSP + -360) PTRSUB RSP -360
(RSP + -360) PTRSUB RSP -360
(RSP + -360) CAST (RSP + -360)
 CALL func (RSP + -360) 2
(RSP + -360) PTRSUB RSP -360
 CBRANCH ([f()] INT_EQUAL 4)
 BRANCH VZERO
(RSP + -328) PTRSUB RSP -328
(RSP + -168) PTRADD (RSP + -328) 160 1
(RSP + -384) PTRSUB RSP -384
0 INT_EQUAL f() f(ARG1)
f() CALL libcall___errno_location_thunk
 CALL libcall_alarm_thunk 0
 CALL libcall_sigaction_thunk 14 (RSP + -168) 0
[f()] LOAD 433 f()
 CBRANCH (f() INT_EQUAL f(ARG1))
(RSP + -168) CAST (RSP + -168)
(4294967294 # f()) PIECE 4294967294 f()
f() CALL libcall_wait_thunk (RSP + -384)
4294967294 COPY 4294967294
0 INT_NOTEQUAL [f()] 4
 CBRANCH ([f()] INT_NOTEQUAL 4)
 CALL libcall_kill_thunk [ARG1] 9
 CBRANCH (ARG3 INT_NOTEQUAL 1)
 CBRANCH (f() INT_NOTEQUAL 4294967295)
0 INT_NOTEQUAL f() 4294967295
 CBRANCH (f() INT_NOTEQUAL [ARG1])
(f() & 127) INT_AND f() 127
 CBRANCH ((f() & 127) INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL (f() & 127) 0
0 COPY 0
0 INT_EQUAL f() 0
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG2) 0
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
(f() * 2147483647) INT_LEFT f() 32
0 INT_NOTEQUAL f(ARG2) 0
 BRANCH VZERO
f() INT_ZEXT f()
 CBRANCH (ARG4 INT_NOTEQUAL 0)
(f() & 127) INT_AND f() 127
f() CALL libcall_strsignal_thunk (f() & 127)
 CBRANCH ((f() & 128) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (f() & 128) 0
(f() & 128) INT_AND f() 128
0 INT_EQUAL [f()] 4
f() CALL libcall___errno_location_thunk
[f()] LOAD 433 f()
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
 CBRANCH ([f()] INT_EQUAL 4)
0 INT_EQUAL [f()] 4
 CBRANCH (ARG3 INT_EQUAL 0)
 CBRANCH (ARG2 INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
(RSP + -384) CAST (RSP + -384)
f() CALL libcall_waitpid_thunk f(ARG1) (RSP + -384) f()
(RSP + -384) PTRSUB RSP -384
 CALL func
0 COPY 0
0 COPY 0
 RETURN 1
0 INT_NOTEQUAL f() [ARG1]
 CALL libcall___assert_fail_thunk PI.Pid && "invalid pid to wait on, process not started?" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Program.inc 328 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Program.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Program.inc
0 INT_NOTEQUAL f() [(f() + 40)]
PI.Pid && "invalid pid to wait on, process not started?" COPY PI.Pid && "invalid pid to wait on, process not started?"
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL ((f() & 65280) / 256) 127
(f() & 65280) CAST (f() & 65280)
(f() & 65280) INT_AND f() 65280
(((127 & (f() / 2147483647)) + 1) / 2) INT_SRIGHT ((127 & (f() / 2147483647)) + 1) 1
(f() # f()) PIECE f() f()
(f() / 2147483647) SUBPIECE f() 0
((f() & 65280) / 256) INT_SRIGHT (f() & 65280) 8
0 INT_SLESS 0 (((127 & (f() / 2147483647)) + 1) / 2)
((f() & 65280) / 256) COPY ((f() & 65280) / 256)
 CBRANCH (((f() & 65280) / 256) INT_EQUAL 127)
((127 & (f() / 2147483647)) + 1) INT_ADD (127 & (f() / 2147483647)) 1
 CBRANCH (0 INT_SLESS (((127 & (f() / 2147483647)) + 1) / 2))
((127 & (f() / 2147483647)) + 1) CAST ((127 & (f() / 2147483647)) + 1)
(127 & (f() / 2147483647)) INT_AND (f() / 2147483647) 127
(RSP + -385) PTRSUB RSP -385
 CALL libcall_allocator_thunk
 CALL libcall_basic_string_thunk (RSP + -360) Child timed out
 CALL libcall_~basic_string_thunk (RSP + -360)
 BRANCH VZERO
 CALL libcall_~allocator_thunk (RSP + -385)
(RSP + -360) PTRSUB RSP -360
Child timed out COPY Child timed out
(RSP + -360) CAST (RSP + -360)
Child timed out CAST Child timed out
(RSP + -360) PTRSUB RSP -360
 CALL libcall_basic_string_thunk (RSP + -360) Child timed out but wouldn't die
(RSP + -360) PTRSUB RSP -360
 CALL libcall_~basic_string_thunk (RSP + -360)
 CALL libcall_allocator_thunk
(RSP + -360) PTRSUB RSP -360
 CALL libcall_~allocator_thunk (RSP + -385)
(RSP + -385) PTRSUB RSP -385
Child timed out but wouldn't die COPY Child timed out but wouldn't die
(RSP + -360) PTRSUB RSP -360
(RSP + -360) CAST (RSP + -360)
Child timed out but wouldn't die CAST Child timed out but wouldn't die
(RSP + -360) PTRSUB RSP -360
 CBRANCH (ARG3 INT_NOTEQUAL 1)
(RSP + -168) CAST (RSP + -168)
 CALL libcall_alarm_thunk 0
 CALL libcall_sigaction_thunk 14 (RSP + -168) 0
(RSP + -328) PTRSUB RSP -328
(RSP + -168) PTRADD (RSP + -328) 160 1
 CBRANCH (((f() & 65280) / 256) INT_EQUAL 126)
(4294967295 # f()) PIECE 4294967295 f()
4294967295 COPY 4294967295
 BRANCH VZERO
 CBRANCH (ARG4 INT_NOTEQUAL 0)
4294967294 COPY 4294967294
(core dumped) COPY (core dumped)
(RSP + -360) PTRSUB RSP -360
(RSP + -360) CAST (RSP + -360)
Error waiting for child process CAST Error waiting for child process
(RSP + -360) PTRSUB RSP -360
 CALL libcall_basic_string_thunk (RSP + -360) Error waiting for child process
 CALL libcall_~basic_string_thunk (RSP + -360)
 CALL libcall_allocator_thunk
4294967295 COPY 4294967295
 CALL libcall_~allocator_thunk (RSP + -385)
(4294967295 # f()) PIECE 4294967295 f()
(RSP + -385) PTRSUB RSP -385
 BRANCH VZERO
(RSP + -360) PTRSUB RSP -360
Error waiting for child process COPY Error waiting for child process
Program could not be executed COPY Program could not be executed
1 COPY 1
(RSP + -328) CAST (RSP + -328)
(RSP + -328) PTRSUB RSP -328
(RSP + -168) CAST (RSP + -168)
(RSP + -168) PTRADD (RSP + -328) 160 1
(4294967295 # f()) PIECE 4294967295 f()
Symbol PTRSUB 0 Symbol
 CALL libcall_sigemptyset_thunk (RSP + -320)
(RSP + -320) CAST (RSP + -320)
 BRANCH VZERO
(RSP + -320) PTRADD (RSP + -328) 8 1
(RSP + -328) PTRSUB RSP -328
(RSP + -328) PTRSUB RSP -328
 CALL libcall_sigaction_thunk 14 (RSP + -328) (RSP + -168)
 CALL libcall_memset_thunk (RSP + -328) 0 152
(RSP + -328) PTRSUB RSP -328
0 INT_EQUAL ((f() & 65280) / 256) 126
4294967295 COPY 4294967295
 BRANCH VZERO
ARG1 INT_ZEXT ARG1
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL libcall_getrlimit_thunk 2 (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(ARG1 * 1048576) COPY (ARG1 * 1048576)
 CALL libcall_getrlimit_thunk 5 (RSP + -40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CALL libcall_getrlimit_thunk 9 (RSP + -40)
(RSP + -40) PTRSUB RSP -40
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
(ARG1 * 1048576) COPY (ARG1 * 1048576)
 CALL libcall_setrlimit_thunk 2 (RSP + -40)
(FS_OFFSET + 40) INT_ADD 0 40
 CALL libcall_setrlimit_thunk 5 (RSP + -40)
 CALL libcall_setrlimit_thunk 9 (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(ARG1 * 1048576) INT_LEFT ARG1 20
(RSP + -40) PTRSUB RSP -40
(ARG1 * 1048576) COPY (ARG1 * 1048576)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
(RSP + -40) PTRSUB RSP -40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
0 INT_EQUAL ARG2 0
f() CALL libcall_posix_spawn_file_actions_addopen_thunk ARG4 ARG2 f(/dev/null) f() 438
0 INT_EQUAL ARG1 0
f() CALL func ARG3 (RSP + -72) f() (RSP + -72)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CBRANCH (ARG1 INT_EQUAL 0)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() COPY f()
 CBRANCH (ARG2 INT_EQUAL 0)
65 COPY 65
 BRANCH VZERO
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
(RSP + -72) CAST (RSP + -72)
(RSP + -72) PTRSUB RSP -72
 CALL libcall_~allocator_thunk (RSP + -85)
Cannot dup2 COPY Cannot dup2
 CALL libcall_allocator_thunk
 CALL libcall_basic_string_thunk (RSP + -72) Cannot dup2
0 COPY 0
(RSP + -72) PTRSUB RSP -72
 CALL libcall_~basic_string_thunk (RSP + -72)
(RSP + -85) PTRSUB RSP -85
(RSP + -72) PTRSUB RSP -72
Cannot dup2 CAST Cannot dup2
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_c_str_thunk
 BRANCH VZERO
f() CAST f()
/dev/null COPY /dev/null
0 COPY 0
 BRANCH VZERO
0 INT_EQUAL f() 0
f() CALL libcall_empty_thunk
0 INT_EQUAL f() 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
 CALL func (RSP + -56) ARG1 f() ARG1
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
f() CALL libcall_generic_category_thunk
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) INT_AND (A_Stack[-0x30]:8 # A_Stack[-0x38]:8) -1
 RETURN 1
(ARG1 + 8) PTRADD ARG1 2 4
 STORE 433 ARG1 f()
f() CALL func ARG2
 STORE 433 (ARG1 + 8) 0
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
0 INT_EQUAL ARG1 1
0 INT_EQUAL ARG1 2
0 INT_EQUAL ARG1 0
 CBRANCH (ARG1 INT_EQUAL 1)
 RETURN 0 f()
2 COPY 2
 CBRANCH (ARG1 INT_EQUAL 2)
 BRANCH VZERO
 BRANCH VZERO
 CBRANCH (ARG1 INT_EQUAL 0)
5 COPY 5
0 COPY 0
invalid enum COPY invalid enum
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc
f() CALL func invalid enum /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc 305
 BRANCH VZERO
 CALL func ARG1 128
 RETURN 0
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG1
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
 CBRANCH (f() INT_NOTEQUAL 1)
0 COPY 0
1 COPY 1
 RETURN 0 0
 RETURN 0 1
0 INT_NOTEQUAL f() 1
(ARG1 + 8) INT_ADD ARG1 8
 STORE 433 (ARG1 + 8) ARG2
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
 CALL func ARG1 (f() + 1) (f() + 1)
f() CALL func ARG1
 CALL func ARG1 0
(ARG1 + 8) INT_ADD ARG1 8
[ARG2] LOAD 433 ARG2
(f() + 1) INT_ADD f() 1
f() CAST f()
 RETURN 0
 CBRANCH ([(ARG1 + 16)] INT_LESSEQUAL [(ARG1 + 8)])
 STORE 433 f() [ARG2]
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_LESSEQUAL [(ARG1 + 16)] [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() CALL func ARG1
 CALL func ARG1 (f() + -1) (f() + -1)
 RETURN 0
(f() + -1) INT_ADD f() -1
f() CALL func ARG1
 CALL func ARG1 ARG2 ARG2
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG2
 CALL func ARG2
 CALL func ARG2 (RSP + -56) (RSP + -56)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_EQUAL 3)
0 INT_EQUAL f() 3
0 COPY 0
 CALL func (RSP + -56) f() f() f()
(f() * 256) PIECE f() 0
(RSP + -56) PTRSUB RSP -56
(f() # f()) PIECE f() f()
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (f() # f())
(A_Stack[-0x37]:7 # A_Stack[-0x38]:1) PIECE A_Stack[-0x37]:7 A_Stack[-0x38]:1
 CBRANCH (f() INT_EQUAL 4)
 BRANCH VZERO
0 INT_EQUAL f() 4
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) [ARG1] [ARG1]
 BRANCH VZERO
(A_Stack[-0x37]:7 # A_Stack[-0x38]:1) PIECE A_Stack[-0x37]:7 A_Stack[-0x38]:1
f() CALL libcall_size_thunk
f() CALL libcall_c_str_thunk
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) f() f() f()
f() CALL func ARG2
0 INT_EQUAL ARG2 2
f() CALL func ARG1
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -200)
f() CALL func (RSP + -376)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -376) PTRSUB RSP -376
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(RSP + -200) PTRSUB RSP -200
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL 4294967295)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL f() 4294967295
 CALL func (RSP + -200)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL libcall_access_thunk f() f()
(f() / 2147483647) SUBPIECE f() 8
f() CAST f()
(RSP + -200) PTRSUB RSP -200
 RETURN 0 (f() # f())
(f() # f()) INT_AND (f() # f()) -1
(f() / 2147483647) SUBPIECE f() 8
(f() # f()) PIECE f() f()
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (f() INT_NOTEQUAL 0)
 CALL func (RSP + -360) 13
0 INT_NOTEQUAL (A_Stack[-0x140]:4 & 61440) 32768
(A_Stack[-0x140]:4 & 61440) INT_AND A_Stack[-0x140]:4 61440
(RSP + -360) PTRSUB RSP -360
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH ((A_Stack[-0x140]:4 & 61440) INT_NOTEQUAL 32768)
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -360) [f()] f() [f()]
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
f() CALL libcall_generic_category_thunk
(f() / 2147483647) SUBPIECE f() 8
(RSP + -360) PTRSUB RSP -360
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (ARG2 INT_EQUAL 2)
 CALL func (RSP + -360) 13
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -360)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -360) PTRSUB RSP -360
 BRANCH VZERO
(RSP + -360) PTRSUB RSP -360
(f() / 2147483647) SUBPIECE f() 0
(RSP + -376) PTRSUB RSP -376
f() CALL func (RSP + -376)
f() CALL func f() (RSP + -344) f()
(f() / 2147483647) SUBPIECE f() 0
(RSP + -344) PTRSUB RSP -344
(f() / 2147483647) SUBPIECE f() 8
0 INT_NOTEQUAL f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func ARG1 0
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
0 COPY 0
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 COPY 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
f() CALL func (RSP + -40)
0 INT_XOR f() 1
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 0
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
40 CAST 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
f() CALL libcall_memcmp_thunk ARG1 ARG2 ARG3
0 INT_EQUAL ARG3 0
 CBRANCH (ARG3 INT_EQUAL 0)
 RETURN 0 f()
 BRANCH VZERO
0 COPY 0
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
f() CALL func [ARG1] ARG2 ARG3 ARG2
0 INT_EQUAL [(ARG1 + 8)] ARG3
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL ARG3)
 CBRANCH (f() INT_EQUAL 0)
 RETURN 0 1
 RETURN 0 0
0 COPY 0
1 COPY 1
0 INT_EQUAL f() 0
ARG1 COPY ARG1
ARG2 COPY ARG2
 CALL func (RSP + -24) ARG3 ARG4 ARG3
(RSP + -24) PTRSUB RSP -24
 RETURN 0
ARG1 COPY ARG1
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
 RETURN 0 (~(f()) + -1)
 CBRANCH ([f(ARG1)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [f(ARG1)] 0
(f() + 1) INT_SUB f() 1
(~(f()) + -1) INT_SUB ~(f()) -1
(f(ARG1) + 1) COPY (f(ARG1) + 1)
~(f()) INT_NEGATE f()
[f(ARG1)] LOAD 433 f(ARG1)
0 INT_EQUAL f() 0
-1 COPY -1
 CBRANCH (f() INT_EQUAL 0)
 CALL libcall_append_thunk ARG1 ARG2
ARG1 CAST ARG1
(ARG1 / 2147483647) SUBPIECE ARG1 0
ARG1 CAST ARG1
 CALL func ARG2
ARG2 CAST ARG2
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL libcall_size_thunk
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CALL libcall_append_thunk ARG1
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL libcall_reserve_thunk ARG1
 CALL libcall_basic_string_thunk
[40] LOAD 433 40
 RETURN 0 (ARG1 / 2147483647)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] & -256) INT_AND [(ARG1 + 8)] -256
([(ARG1 + 8)] & -256) INT_OR ([(ARG1 + 8)] & -256) 0
 RETURN 0 ([(ARG1 + 8)] & -256)
0 INT_EQUAL [(ARG1 + 8)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_ZEXT 0
ARG1 COPY ARG1
 CALL libcall_basic_string_thunk ARG1
f() CALL libcall_append_thunk ARG2
 CALL func f()
 RETURN 0 ARG1
 CALL func ARG3 (RSP + -72) 4294967295 (RSP + -72)
 CALL func ARG3 (RSP + -72) 4294967295 (RSP + -72)
f() CALL libcall_dup2_thunk f() ARG2
0 INT_EQUAL ARG2 0
0 INT_EQUAL ARG2 0
 CALL func (RSP + -72) ARG1 ARG1
f() CALL func ARG1
0 INT_EQUAL ARG1 0
 CBRANCH (ARG1 INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() COPY f()
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_EQUAL 4294967295)
 CALL libcall_~basic_string_thunk (RSP + -72)
 CALL libcall_~allocator_thunk (RSP + -173)
(RSP + -72) PTRSUB RSP -72
(RSP + -173) PTRSUB RSP -173
 BRANCH VZERO
Cannot dup2 COPY Cannot dup2
1 COPY 1
 CALL libcall_close_thunk f()
Cannot dup2 CAST Cannot dup2
(RSP + -72) CAST (RSP + -72)
(RSP + -72) PTRSUB RSP -72
(RSP + -72) CAST (RSP + -72)
0 COPY 0
 CALL libcall_close_thunk f()
 CALL libcall_basic_string_thunk (RSP + -72) Cannot dup2
 CALL libcall_allocator_thunk
(RSP + -72) PTRSUB RSP -72
 CALL libcall_~basic_string_thunk (RSP + -168)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 BRANCH VZERO
 CALL libcall_basic_string_thunk
0 COPY 0
f() CALL libcall_c_str_thunk
f() CAST f()
 CBRANCH (ARG2 INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 4294967295)
(RSP + -168) PTRSUB RSP -168
f() CALL libcall_open_thunk f() f() 438
0 INT_EQUAL f() 4294967295
(RSP + -168) PTRSUB RSP -168
(RSP + -72) CAST (RSP + -72)
 CALL libcall_~basic_string_thunk (RSP + -72)
 CALL libcall_operator=_thunk (RSP + -168) (RSP + -72)
(RSP + -168) PTRSUB RSP -168
(RSP + -72) PTRSUB RSP -72
 BRANCH VZERO
 CALL libcall_operator=_thunk (RSP + -168) /dev/null
/dev/null COPY /dev/null
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
65 COPY 65
0 COPY 0
 BRANCH VZERO
 CALL func (RSP + -104) (RSP + -136) ' for  (RSP + -136)
0 INT_EQUAL f() 4294967295
(RSP + -104) PTRSUB RSP -104
1 COPY 1
 CALL libcall_~basic_string_thunk (RSP + -136)
(RSP + -72) PTRSUB RSP -72
Cannot open file ' COPY Cannot open file '
 CALL libcall_~basic_string_thunk (RSP + -104)
(RSP + -136) PTRSUB RSP -136
 CBRANCH (ARG2 INT_EQUAL 0)
(RSP + -136) PTRSUB RSP -136
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -72) (RSP + -104) f(input , output) (RSP + -104)
(RSP + -104) PTRSUB RSP -104
(RSP + -72) CAST (RSP + -72)
 CALL libcall_operator+ (RSP + -136) Cannot open file '
(RSP + -72) PTRSUB RSP -72
 CALL libcall_~basic_string_thunk (RSP + -72)
(RSP + -72) PTRSUB RSP -72
Cannot open file ' CAST Cannot open file '
(RSP + -136) CAST (RSP + -136)
' for  COPY ' for 
(RSP + -136) PTRSUB RSP -136
 BRANCH VZERO
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 f()
 BRANCH VZERO
input COPY input
output COPY output
(ARG1 + 16) PTRADD ARG1 2 8
ARG1 CAST ARG1
f() CALL func ARG1
 STORE 433 ARG1 ARG2
 STORE 433 (ARG1 + 17) 1
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 17) INT_ADD ARG1 17
(ARG1 + 17) CAST (ARG1 + 17)
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 STORE 433 (ARG1 + 16) 5
 RETURN 1
 RETURN 0
 CALL libcall___assert_fail_thunk isValid() && "Invalid twine!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h 290 llvm::Twine::Twine(const llvm::StringRef&)
llvm::Twine::Twine(const llvm::StringRef&) COPY llvm::Twine::Twine(const llvm::StringRef&)
isValid() && "Invalid twine!" COPY isValid() && "Invalid twine!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h
f() CALL func ARG1 ARG2 ARG3 ARG4
 RETURN 0 0
0 INT_XOR f() 1
0 COPY 0
0 INT_NOTEQUAL ARG7 0
0 INT_NOTEQUAL ARG7 0
 CALL func ARG7
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
0 INT_EQUAL ARG5 0
 CALL libcall_execve_thunk f() f(ARG4) ARG5
ARG5 COPY ARG5
0 INT_EQUAL ARG5 0
(ARG6 + 8) PTRADD ARG6 1 8
[ARG6] LOAD 433 ARG6
(ARG6 + 16) PTRADD ARG6 2 8
(ARG6 + (f() * 8)) PTRADD ARG6 f() 8
(ARG6 + 8) PTRADD ARG6 1 8
(ARG6 + (f() * 8)) PTRADD ARG6 f() 8
(ARG6 + 8) PTRADD ARG6 1 8
(ARG6 + 16) PTRADD ARG6 2 8
(ARG6 + 8) PTRADD ARG6 1 8
0 INT_EQUAL ARG6 0
0 INT_EQUAL ARG6 0
(ARG6 + 8) PTRADD ARG6 1 8
(ARG6 + 16) PTRADD ARG6 2 8
(ARG6 + 16) PTRADD ARG6 2 8
(ARG6 + 16) PTRADD ARG6 2 8
f() CALL func [ARG6] 0 ARG8
f() CALL func [(ARG6 + 16)] 2 ARG8
f() CALL func f() 1 ARG8 (RSP + -216)
f() CALL func f() 0 ARG8 (RSP + -216)
f() CALL func ARG8 (RSP + -248) f() (RSP + -248)
f() CALL func ARG8 (RSP + -248) f() (RSP + -248)
f() CALL func f() 2 ARG8 f(RSP)
 CALL libcall_operator=_thunk ARG8 (RSP + -136)
 CALL func ARG8 (RSP + -136) 4294967295 (RSP + -136)
f() CALL func [(ARG6 + 8)] 1 ARG8
 CALL func ARG8 (RSP + -136) 4294967295 (RSP + -136)
0 INT_NOTEQUAL ARG8 0
f() CALL func (RSP + -344)
(RSP + -344) PTRSUB RSP -344
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -408) PTRSUB RSP -408
(RSP + -344) PTRSUB RSP -344
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -344) (RSP + -408) (RSP + -408)
 CBRANCH (ARG7 INT_NOTEQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
 CALL libcall_basic_string_thunk (RSP + -248) Can't redirect stderr to stdout
Can't redirect stderr to stdout COPY Can't redirect stderr to stdout
f() CAST f()
(RSP + -248) PTRSUB RSP -248
f() CALL libcall_posix_spawn_thunk (RSP + -344) f() f(RSP) 0 f(ARG4) f(ARG5)
 BRANCH VZERO
(RSP + -408) PTRSUB RSP -408
 CBRANCH (f(RSP) INT_NOTEQUAL 0)
f() CALL libcall_c_str_thunk
 CALL libcall_~allocator_thunk (RSP + -344)
(RSP + -344) PTRSUB RSP -344
0 COPY 0
(RSP + -344) CAST (RSP + -344)
(RSP + -344) PTRSUB RSP -344
0 INT_NOTEQUAL f(RSP) 0
(RSP + -248) PTRSUB RSP -248
(RSP + -248) CAST (RSP + -248)
Can't redirect stderr to stdout CAST Can't redirect stderr to stdout
(RSP + -248) PTRSUB RSP -248
 CBRANCH (f() INT_EQUAL 0)
(RSP + -248) PTRSUB RSP -248
 CALL libcall_allocator_thunk
 CALL func (RSP + -248) (RSP + -408) (RSP + -408)
0 INT_EQUAL f() 0
 CALL libcall_~basic_string_thunk (RSP + -248)
 CALL libcall_~basic_string_thunk (RSP + -248)
 CBRANCH (ARG5 INT_EQUAL 0)
(RSP + -248) PTRSUB RSP -248
0 INT_XOR f() 1
 CBRANCH ([(ARG6 + 16)] INT_EQUAL 0)
([(ARG6 + 8)] + 8) PTRADD [(ARG6 + 8)] 1 8
f() CALL func [[(ARG6 + 8)]] [([(ARG6 + 8)] + 8)] [[(ARG6 + 16)]] [([(ARG6 + 16)] + 8)]
[[(ARG6 + 16)]] LOAD 433 [(ARG6 + 16)]
1 COPY 1
[([(ARG6 + 16)] + 8)] LOAD 433 ([(ARG6 + 16)] + 8)
[(ARG6 + 16)] CAST [(ARG6 + 16)]
[(ARG6 + 16)] LOAD 433 (ARG6 + 16)
 BRANCH VZERO
([(ARG6 + 16)] + 8) PTRADD [(ARG6 + 16)] 1 8
[(ARG6 + 8)] LOAD 433 (ARG6 + 8)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
[([(ARG6 + 8)] + 8)] LOAD 433 ([(ARG6 + 8)] + 8)
[(ARG6 + 8)] CAST [(ARG6 + 8)]
[[(ARG6 + 8)]] LOAD 433 [(ARG6 + 8)]
 CBRANCH ([(ARG6 + 8)] INT_EQUAL 0)
0 COPY 0
 CBRANCH ([(ARG6 + 16)] INT_EQUAL 0)
0 INT_EQUAL [(ARG6 + 16)] 0
[(ARG6 + 16)] LOAD 433 (ARG6 + 16)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CALL libcall___stack_chk_fail_thunk
f() COPY f()
 RETURN 0 f()
f() COPY f()
 RETURN 1
 CBRANCH (ARG8 INT_NOTEQUAL 0)
 CALL libcall_~basic_string_thunk (RSP + -216)
 CALL func (RSP + -248) (RSP + -312) (RSP + -280) (RSP + -312)
(RSP + -248) PTRSUB RSP -248
Executable " COPY Executable "
(RSP + -312) PTRSUB RSP -312
 CALL libcall_basic_string_thunk (RSP + -216) " doesn't exist!
(RSP + -248) PTRSUB RSP -248
(RSP + -216) PTRSUB RSP -216
" doesn't exist! COPY " doesn't exist!
(RSP + -216) PTRSUB RSP -216
(RSP + -136) PTRSUB RSP -136
Executable " CAST Executable "
(RSP + -216) PTRSUB RSP -216
(RSP + -312) CAST (RSP + -312)
 CALL libcall_~basic_string_thunk (RSP + -280)
(RSP + -344) CAST (RSP + -344)
 CALL libcall_~basic_string_thunk (RSP + -248)
 CALL libcall_allocator_thunk
(RSP + -216) CAST (RSP + -216)
" doesn't exist! CAST " doesn't exist!
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -136) (RSP + -248) (RSP + -216) (RSP + -248)
(RSP + -280) PTRSUB RSP -280
(RSP + -312) PTRSUB RSP -312
(RSP + -216) CAST (RSP + -216)
 CALL libcall_~basic_string_thunk (RSP + -136)
 CALL func (RSP + -280) (RSP + -408) (RSP + -408)
(RSP + -369) PTRSUB RSP -369
 CALL libcall_~allocator_thunk (RSP + -344)
(RSP + -280) PTRSUB RSP -280
 CALL libcall_~allocator_thunk (RSP + -369)
(RSP + -136) PTRSUB RSP -136
 CALL libcall_basic_string_thunk (RSP + -312) Executable "
 CALL libcall_allocator_thunk
(RSP + -408) PTRSUB RSP -408
(RSP + -248) PTRSUB RSP -248
(RSP + -280) CAST (RSP + -280)
(RSP + -136) CAST (RSP + -136)
(RSP + -312) PTRSUB RSP -312
(RSP + -344) PTRSUB RSP -344
(RSP + -280) PTRSUB RSP -280
 CALL libcall_~basic_string_thunk (RSP + -312)
 CBRANCH (f() INT_EQUAL 4294967295)
(RSP + -136) CAST (RSP + -136)
 CALL libcall_~allocator_thunk (RSP + -344)
(RSP + -136) CAST (RSP + -136)
Couldn't fork CAST Couldn't fork
(f() + 40) CAST (f() + 40)
f() COPY f()
(RSP + -136) PTRSUB RSP -136
(f() + 40) INT_ADD f() 40
(RSP + -344) PTRSUB RSP -344
(RSP + -344) CAST (RSP + -344)
0 INT_NOTEQUAL 0 [(f() + 40)]
 CALL libcall_basic_string_thunk (RSP + -136) Couldn't fork
 CALL libcall_allocator_thunk
0 COPY 0
(RSP + -136) PTRSUB RSP -136
Couldn't fork COPY Couldn't fork
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CALL libcall_~basic_string_thunk (RSP + -136)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -136) PTRSUB RSP -136
 CBRANCH f()
[(ARG6 + 8)] LOAD 433 (ARG6 + 8)
 BRANCH VZERO
0 COPY 0
 CBRANCH f()
 CBRANCH ([(ARG6 + 8)] INT_EQUAL 0)
0 INT_EQUAL [(ARG6 + 8)] 0
 CBRANCH (ARG6 INT_EQUAL 0)
 RETURN 1
(RSP + -136) PTRSUB RSP -136
0 INT_EQUAL [f()] 2
 CALL libcall__exit_thunk f()
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CALL func (RSP + -136) (RSP + -408) (RSP + -408)
f() CALL libcall___errno_location_thunk
[f()] LOAD 433 f()
 CBRANCH (ARG5 INT_EQUAL 0)
 CBRANCH ([f()] INT_EQUAL 2)
f() COPY f()
(RSP + -408) PTRSUB RSP -408
 BRANCH VZERO
[(ARG6 + 8)] LOAD 433 (ARG6 + 8)
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH f()
[(ARG6 + 16)] LOAD 433 (ARG6 + 16)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_NOTEQUAL f() 4294967295
 CBRANCH (f() INT_NOTEQUAL 4294967295)
f() CALL libcall_dup2_thunk 1 2
 CBRANCH ([(ARG6 + (f() * 8))] INT_NOTEQUAL 0)
 CALL libcall_operator=_thunk ((f() * 32) + (RSP + -136)) (RSP + -216)
[(ARG6 + (f() * 8))] LOAD 433 (ARG6 + (f() * 8))
 CALL func (RSP + -216) [(ARG6 + (f() * 8))] [(ARG6 + (f() * 8))]
f() INT_SEXT f()
((f() * 8) + (RSP + -280)) PTRADD (RSP + -280) f() 8
((f() * 32) + (RSP + -136)) CAST ((f() * 32) + (RSP + -136))
(RSP + -216) CAST (RSP + -216)
f() INT_SEXT f()
f() INT_SEXT f()
(RSP + -280) PTRSUB RSP -280
 CALL libcall_~basic_string_thunk (RSP + -216)
(RSP + -216) PTRSUB RSP -216
(f() * 32) INT_MULT f() 32
 STORE 433 ((f() * 8) + (RSP + -280)) ((f() * 32) + (RSP + -136))
f() INT_SEXT f()
(RSP + -136) PTRSUB RSP -136
((f() * 32) + (RSP + -136)) PTRADD (RSP + -136) (f() * 32) 1
(f() * 32) INT_MULT f() 32
(RSP + -216) CAST (RSP + -216)
(RSP + -136) PTRSUB RSP -136
((f() * 32) + (RSP + -136)) PTRADD (RSP + -136) (f() * 32) 1
(RSP + -216) PTRSUB RSP -216
(RSP + -216) PTRSUB RSP -216
0 COPY 0
 BRANCH VZERO
0 COPY 0
 CBRANCH (f(RSP) INT_NOTEQUAL (RSP + -136))
(f(RSP) + -32) PTRADD f(RSP) -32 1
 BRANCH VZERO
0 INT_NOTEQUAL f(RSP) (RSP + -136)
(RSP + -136) PTRSUB RSP -136
(RSP + -136) CAST (RSP + -136)
 CALL libcall_~basic_string_thunk (f(RSP) + -32)
 CBRANCH (f() INT_SLESS 3)
0 INT_SLESS f() 3
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
0 INT_NOTEQUAL [(ARG6 + (f() * 8))] 0
[(ARG6 + (f() * 8))] LOAD 433 (ARG6 + (f() * 8))
f() INT_SEXT f()
(RSP + -344) CAST (RSP + -344)
 CALL libcall_allocator_thunk
(RSP + -136) PTRSUB RSP -136
 BRANCH VZERO
 CALL libcall_~allocator_thunk (RSP + -344)
Can't redirect stderr to stdout COPY Can't redirect stderr to stdout
(RSP + -136) CAST (RSP + -136)
(RSP + -136) PTRSUB RSP -136
(RSP + -344) PTRSUB RSP -344
 CALL libcall_basic_string_thunk (RSP + -136) Can't redirect stderr to stdout
 CALL libcall_~basic_string_thunk (RSP + -136)
(RSP + -136) PTRSUB RSP -136
0 COPY 0
(RSP + -136) CAST (RSP + -136)
Can't redirect stderr to stdout CAST Can't redirect stderr to stdout
[(ARG6 + 16)] CAST [(ARG6 + 16)]
[([(ARG6 + 16)] + 8)] LOAD 433 ([(ARG6 + 16)] + 8)
([(ARG6 + 16)] + 8) PTRADD [(ARG6 + 16)] 1 8
[(ARG6 + 16)] LOAD 433 (ARG6 + 16)
[(ARG6 + 8)] LOAD 433 (ARG6 + 8)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
[(ARG6 + 8)] CAST [(ARG6 + 8)]
[([(ARG6 + 8)] + 8)] LOAD 433 ([(ARG6 + 8)] + 8)
([(ARG6 + 8)] + 8) PTRADD [(ARG6 + 8)] 1 8
[[(ARG6 + 8)]] LOAD 433 [(ARG6 + 8)]
[[(ARG6 + 16)]] LOAD 433 [(ARG6 + 16)]
f() CALL func [[(ARG6 + 8)]] [([(ARG6 + 8)] + 8)] [[(ARG6 + 16)]] [([(ARG6 + 16)] + 8)]
 CALL libcall_posix_spawn_file_actions_destroy_thunk f(RSP)
 CBRANCH (ARG7 INT_NOTEQUAL 0)
2 COPY 2
f() CALL libcall_fork_thunk
0 INT_EQUAL f() 4294967295
 CBRANCH (ARG6 INT_EQUAL 0)
 CBRANCH (f() INT_NOTEQUAL -1)
0 INT_NOTEQUAL f() -1
0 COPY 0
(RSP + -40) PTRSUB RSP -40
 BRANCH VZERO
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
1 COPY 1
 BRANCH VZERO
0 COPY 0
0 COPY 0
(RSP + -216) PTRSUB RSP -216
0 COPY 0
 CALL libcall_posix_spawn_file_actions_init_thunk (RSP + -216)
0 INT_EQUAL f() 0
0 COPY 0
0 COPY 0
(RSP + -369) PTRSUB RSP -369
 BRANCH VZERO
0 INT_XOR f() 1
 CALL libcall_~allocator_thunk (RSP + -369)
1 COPY 1
 STORE 433 f(ARG1) f()
 CALL libcall_basic_string_thunk (RSP + -248) 0
0 CAST 0
(RSP + -248) CAST (RSP + -248)
(RSP + -248) PTRSUB RSP -248
(RSP + -248) PTRSUB RSP -248
(RSP + -248) PTRSUB RSP -248
 CALL libcall_allocator_thunk
0 COPY 0
 CALL libcall_~basic_string_thunk (RSP + -248)
0 INT_EQUAL [(ARG6 + 16)] 0
[(ARG6 + 16)] LOAD 433 (ARG6 + 16)
 BRANCH VZERO
1 COPY 1
 CALL libcall_basic_string_thunk
(f() + -1) INT_ADD f() -1
 BRANCH VZERO
f() CALL libcall_posix_spawn_file_actions_adddup2_thunk f(RSP) 1 2
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
1 COPY 1
 STORE 433 ARG1 f()
 BRANCH VZERO
0 COPY 0
f() CALL libcall_c_str_thunk
 CALL libcall_execv_thunk f() f(ARG4)
f() CAST f()
f() CALL libcall_c_str_thunk
f() CAST f()
 BRANCH VZERO
126 COPY 126
 BRANCH VZERO
127 COPY 127
0 COPY 0
0 INT_EQUAL [(ARG6 + 8)] 0
 BRANCH VZERO
[(ARG6 + 8)] LOAD 433 (ARG6 + 8)
f() COPY f()
f() CALL func (RSP + -32) ARG1 ARG2 ARG3 ARG4 ARG5 ARG7 ARG8
0 INT_EQUAL ARG6 0
f() CALL func (RSP + -32) ARG6 0 ARG8
0 INT_NOTEQUAL ARG9 0
 STORE 433 ARG9 0
0 INT_NOTEQUAL ARG9 0
 STORE 433 ARG9 1
(RSP + -32) PTRSUB RSP -32
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CALL func
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
 CBRANCH (ARG9 INT_NOTEQUAL 0)
 BRANCH VZERO
f() CAST f()
(RSP + -32) PTRSUB RSP -32
4294967295 COPY 4294967295
(f() / 2147483647) INT_RIGHT f() 32
 CBRANCH (ARG9 INT_NOTEQUAL 0)
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1
 CALL func ARG1
 CALL func ARG1 (RSP + -17) (RSP + -17)
40 CAST 40
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -17) PTRSUB RSP -17
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
0 COPY 0
40 INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
[ARG1] LOAD 433 ARG1
ARG2 COPY ARG2
[ARG2] LOAD 433 ARG2
 CBRANCH ([ARG2] INT_LESS [ARG1])
0 INT_LESS [ARG2] [ARG1]
 RETURN 0 f(ARG1 , ARG2)
 BRANCH VZERO
ARG1 COPY ARG1
(ARG1 + 8) PTRADD ARG1 1 8
ARG2 COPY ARG2
ARG3 COPY ARG3
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -80) (RSP + -48) (RSP + -48)
f(RSP) CAST f(RSP)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -40) ([ARG1] + [f(ARG1 , RSP)]) [f(RSP)] ([ARG1] + [f(ARG1 , RSP)])
40 CAST 40
(RSP + -80) PTRSUB RSP -80
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
([ARG1] + [f(ARG1 , RSP)]) INT_ADD [ARG1] [f(ARG1 , RSP)]
f(ARG1 , RSP) CALL func (RSP + -72) (ARG1 + 8) (ARG1 + 8)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -48) PTRSUB RSP -48
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
([(ARG1 + 8)] - [f(ARG1 , RSP)]) INT_SUB [(ARG1 + 8)] [f(ARG1 , RSP)]
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(ARG1 + 8) PTRADD ARG1 1 8
[40] LOAD 433 40
(RSP + -40) PTRSUB RSP -40
f(ARG1 , RSP) CAST f(ARG1 , RSP)
[ARG1] LOAD 433 ARG1
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
 RETURN 1
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) COPY (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 RETURN 0 (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 24) PTRADD ARG1 3 8
 STORE 433 ARG1 [f(ARG2)]
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
[(f(ARG2) + 8)] LOAD 433 (f(ARG2) + 8)
 STORE 433 (ARG1 + 16) [f(ARG3)]
 RETURN 0
[f(ARG3)] LOAD 433 f(ARG3)
 STORE 433 (ARG1 + 8) [(f(ARG2) + 8)]
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
[(f(ARG3) + 8)] LOAD 433 (f(ARG3) + 8)
(f(ARG3) + 8) PTRADD f(ARG3) 1 8
f(ARG2) CAST f(ARG2)
f(ARG3) CAST f(ARG3)
 STORE 433 (ARG1 + 24) [(f(ARG3) + 8)]
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
ARG1 COPY ARG1
 CALL func ARG1 f(ARG2) f(ARG3) f(ARG2)
 RETURN 0 ARG1
(ARG1 / 64) INT_RIGHT ARG1 6
 RETURN 0 (ARG1 / 64)
f() CALL func ARG2
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
 RETURN 0 (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
(ARG1 & 63) INT_AND ARG1 63
 RETURN 0 (ARG1 & 63)
(ARG1 & 63) COPY (ARG1 & 63)
f() CALL func ARG1
(1 << (f() & 63)) INT_LEFT 1 (f() & 63)
(f() & 63) INT_AND f() 63
 RETURN 0 (1 << (f() & 63))
(1 << (f() & 63)) COPY (1 << (f() & 63))
0 INT_EQUAL ARG3 0
ARG1 COPY ARG1
f() CALL func ARG1 ARG2 ARG2
f() CALL func ARG1 ARG2 ARG2
f() CALL func ARG2
f() CALL func ARG2
 RETURN 0 ARG1
 CBRANCH (ARG3 INT_EQUAL 0)
 STORE 433 f() (~(f()) & f())
 BRANCH VZERO
~(f()) INT_NEGATE f()
f() CAST f()
 STORE 433 f() (f() | f())
f() CAST f()
(~(f()) & f()) INT_AND f() ~(f())
f() LOAD 433 f()
f() LOAD 433 f()
(f() | f()) INT_OR f() f()
 CALL libcall___throw_out_of_range_fmt_thunk 0 ARG3 ARG2 256
0 INT_LESS 255 ARG2
 CBRANCH (255 INT_LESS ARG2)
 RETURN 0
0 COPY 0
 CALL func ARG1 ARG2 ARG3 ARG2
 CALL func ARG1 ARG2 bitset::set ARG2
bitset::set COPY bitset::set
 RETURN 0
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
f() CALL func ARG2
 RETURN 0 [(ARG1 + (f() * 8))]
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
[(ARG1 + (f() * 8))] COPY [(ARG1 + (f() * 8))]
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
f() CALL func ARG1 ARG2 ARG2
f() CALL func ARG2
0 INT_NOTEQUAL f() 0
 RETURN 0 (f() & -256)
f() INT_AND f() f()
(f() & -256) INT_AND f() -256
0 INT_ZEXT 0
(f() & -256) INT_OR (f() & -256) 0
 CALL func ARG1 ARG2 bitset::test ARG2
 CALL func ARG1 ARG2 ARG2
bitset::test COPY bitset::test
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(ARG2 + [ARG1]) INT_ADD ARG2 [ARG1]
0 INT_LESSEQUAL [(ARG1 + 8)] ARG2
[(ARG1 + 8)] CAST [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_LESSEQUAL ARG2)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 RETURN 0 [(ARG2 + [ARG1])]
[(ARG2 + [ARG1])] COPY [(ARG2 + [ARG1])]
(ARG2 + [ARG1]) CAST (ARG2 + [ARG1])
[(ARG2 + [ARG1])] LOAD 433 (ARG2 + [ARG1])
 RETURN 1
 CALL libcall___assert_fail_thunk Index < Length && "Invalid index!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 198 0
0 COPY 0
Index < Length && "Invalid index!" COPY Index < Length && "Invalid index!"
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG1 COPY ARG1
(f() + 40) CAST (f() + 40)
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL f())
f(ARG1 , RSP) CALL func (RSP + -104) (f(ARG1) + 8) (f(ARG1) + 8)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
0 COPY 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f(ARG1 , RSP) INT_NOTEQUAL f(ARG1))
(RSP + -120) PTRSUB RSP -120
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f(ARG1 , RSP) f(ARG1)
0 INT_EQUAL f() [(f() + 40)]
0 INT_NOTEQUAL f() f()
0 COPY 0
[(f() + 40)] LOAD 433 (f() + 40)
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
0 COPY 0
f(ARG1 , RSP) CAST f(ARG1 , RSP)
f() CALL func (RSP + -120)
0 COPY 0
[(f(ARG1) + 8)] LOAD 433 (f(ARG1) + 8)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -104) PTRSUB RSP -104
(FS_OFFSET + 40) INT_ADD 0 40
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -56) f() 1 f()
f() CALL func (RSP + -120) f() f()
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(ARG1 , RSP)
f(ARG1 , RSP) COPY f(ARG1 , RSP)
-1 COPY -1
[f(ARG1)] LOAD 433 f(ARG1)
-1 COPY -1
(f(ARG1 , RSP) + [f(ARG1)]) CAST (f(ARG1 , RSP) + [f(ARG1)])
(f(ARG1 , RSP) + [f(ARG1)]) INT_ADD f(ARG1 , RSP) [f(ARG1)]
(RSP + -56) PTRSUB RSP -56
[(f(ARG1 , RSP) + [f(ARG1)])] LOAD 433 (f(ARG1 , RSP) + [f(ARG1)])
f() CALL func (RSP + -56) [(f(ARG1 , RSP) + [f(ARG1)])] [(f(ARG1 , RSP) + [f(ARG1)])]
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(f(ARG1 , RSP) + 1) INT_ADD f(ARG1 , RSP) 1
 BRANCH VZERO
ARG4 COPY ARG4
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -104) PTRSUB RSP -104
0 COPY 0
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
f() CALL func (RSP + -120)
(f() + 40) CAST (f() + 40)
0 COPY 0
(RSP + -120) PTRSUB RSP -120
[(f(ARG1) + 8)] LOAD 433 (f(ARG1) + 8)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() [(f() + 40)]
 CBRANCH (f() INT_NOTEQUAL f())
0 COPY 0
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
f(ARG1 , RSP) CALL func (RSP + -104) (f(ARG1) + 8) (f(ARG1) + 8)
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
0 COPY 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f(ARG1 , RSP) CAST f(ARG1 , RSP)
 CBRANCH (f(ARG1 , RSP) INT_NOTEQUAL f(ARG1))
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_NOTEQUAL f(ARG1 , RSP) f(ARG1)
0 INT_NOTEQUAL f() f()
0 COPY 0
 CALL func (RSP + -56) f() 1 f()
f() CALL func (RSP + -120) f() f()
(RSP + -56) PTRSUB RSP -56
(RSP + -120) PTRSUB RSP -120
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
 RETURN 1
 RETURN 0 f(ARG1 , RSP)
 CALL libcall___stack_chk_fail_thunk
(RSP + -56) PTRSUB RSP -56
(f(ARG1 , RSP) + [f(ARG1)]) CAST (f(ARG1 , RSP) + [f(ARG1)])
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
-1 COPY -1
[f(ARG1)] LOAD 433 f(ARG1)
f(ARG1 , RSP) COPY f(ARG1 , RSP)
(f(ARG1 , RSP) + [f(ARG1)]) INT_ADD f(ARG1 , RSP) [f(ARG1)]
-1 COPY -1
[(f(ARG1 , RSP) + [f(ARG1)])] LOAD 433 (f(ARG1 , RSP) + [f(ARG1)])
f() CALL func (RSP + -56) [(f(ARG1 , RSP) + [f(ARG1)])] [(f(ARG1 , RSP) + [f(ARG1)])]
(f(ARG1 , RSP) + 1) INT_ADD f(ARG1 , RSP) 1
 BRANCH VZERO
ARG1 COPY ARG1
(ARG1 + 8) PTRADD ARG1 1 8
ARG2 COPY ARG2
ARG3 COPY ARG3
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -56) ([ARG1] + [f(ARG1 , RSP)]) ([f(ARG1 , RSP)] - [f(ARG1 , RSP)]) ([ARG1] + [f(ARG1 , RSP)])
(RSP + -80) PTRSUB RSP -80
(RSP + -56) PTRSUB RSP -56
(ARG1 + 8) PTRADD ARG1 1 8
([ARG1] + [f(ARG1 , RSP)]) INT_ADD [ARG1] [f(ARG1 , RSP)]
(FS_OFFSET + 40) INT_ADD 0 40
f(ARG1 , RSP) CAST f(ARG1 , RSP)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
40 INT_ADD 0 40
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
f(ARG1 , RSP) CALL func f(RSP) (ARG1 + 8)
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
f(ARG1 , RSP) CALL func (RSP + -72) (ARG1 + 8) (ARG1 + 8)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -72) PTRSUB RSP -72
40 CAST 40
f(ARG1 , RSP) CAST f(ARG1 , RSP)
[40] LOAD 433 40
f(RSP) CALL func (RSP + -72) (RSP + -80) (RSP + -80)
([f(ARG1 , RSP)] - [f(ARG1 , RSP)]) INT_SUB [f(ARG1 , RSP)] [f(ARG1 , RSP)]
[ARG1] LOAD 433 ARG1
 RETURN 1
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
f(RSP) CALL func (RSP + -104) ARG4 ARG5 0
f(RSP) CALL func (RSP + -104) ARG4 ARG5 f(RSP)
(RSP + -56) PTRSUB RSP -56
(RSP + -104) PTRSUB RSP -104
(RSP + -40) PTRSUB RSP -40
(RSP + -104) PTRSUB RSP -104
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -104) f(RSP) -1 f(RSP)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -104) PTRSUB RSP -104
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 8
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) f(RSP) f(RSP) f(RSP)
40 CAST 40
(f() / 2147483647) SUBPIECE f() 0
ARG1 COPY ARG1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func ARG1 (RSP + -56) (RSP + -40) (RSP + -56)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
 RETURN 0 ARG1
(f() / 2147483647) SUBPIECE f() 0
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
 STORE 433 ARG1 [f(ARG2)]
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 16) PTRADD ARG1 2 8
ARG1 COPY ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG2 + 16) INT_ADD ARG2 16
f(ARG2) CALL func ARG2
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
[(f(ARG2) + 8)] LOAD 433 (f(ARG2) + 8)
[(f(ARG2) + 8)] LOAD 433 (f(ARG2) + 8)
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
f(ARG2) CAST f(ARG2)
f(ARG2) CALL func (ARG2 + 16)
f(ARG2) CAST f(ARG2)
 STORE 433 (ARG1 + 24) [(f(ARG2) + 8)]
 STORE 433 (ARG1 + 8) [(f(ARG2) + 8)]
 RETURN 0 ARG1
 STORE 433 (ARG1 + 16) [f(ARG2)]
[f(ARG2)] LOAD 433 f(ARG2)
[f(ARG2)] LOAD 433 f(ARG2)
(ARG1 + 24) INT_ADD ARG1 24
 CALL func ARG1 (ARG1 + 24) ARG2 ARG3
 RETURN 0
 CALL func ARG1 (ARG2 * 16) 16 (ARG2 * 16)
(ARG2 * 16) INT_LEFT ARG2 4
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) INT_ADD ARG1 8
 STORE 433 (ARG1 + 8) ARG2
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
f() CALL func ARG1
 CALL func ARG1 0
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
 CALL func ARG1 (f() + 16) (f() + 16)
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 1 8
(f() + 8) PTRADD f() 1 8
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
(f() + 16) INT_ADD f() 16
 RETURN 0
 STORE 433 (f() + 8) [(ARG2 + 8)]
0 INT_LESSEQUAL [(ARG1 + 16)] [(ARG1 + 8)]
f() CAST f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 f() [ARG2]
 CBRANCH ([(ARG1 + 16)] INT_LESSEQUAL [(ARG1 + 8)])
 CALL func (RSP + -88) ARG1 ARG2 ARG4 ARG5
 CALL func ARG3 (RSP + -88) (RSP + -88)
 CALL func (RSP + -56) f() f() ARG4 ARG5
(f() + 40) INT_ADD f() 40
(RSP + -88) PTRSUB RSP -88
0 INT_NOTEQUAL 0 [40]
(RSP + -88) PTRSUB RSP -88
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func (RSP + -88)
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (0 INT_NOTEQUAL [40])
(f() + 40) CAST (f() + 40)
(RSP + -88) PTRSUB RSP -88
 BRANCH VZERO
(RSP + -88) PTRSUB RSP -88
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -88) (RSP + -56) (RSP + -56)
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
f() CALL func ARG1
f() CALL func ARG1
(f() - f()) INT_SUB f() f()
 RETURN 0 ((f() - f()) / 16)
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
 CALL func ARG1
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 f()
f() CALL func ARG2
f() CALL func ARG2
 RETURN 0
 STORE 433 (ARG1 + 8) f()
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 32) INT_ADD ARG1 32
f(ARG1) CALL func ARG1
f() CALL func ARG2
 RETURN 0
0 INT_NOTEQUAL f(ARG1) 0
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
(ARG1 + 32) CAST (ARG1 + 32)
(ARG1 + 32) CAST (ARG1 + 32)
f(ARG1) CAST f(ARG1)
([(ARG1 + 32)] | 1) INT_OR [(ARG1 + 32)] 1
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
f(ARG1) CALL func 16 f(ARG1)
 STORE 433 (ARG1 + 32) ([(ARG1 + 32)] | 1)
 STORE 433 (f(ARG1) + 8) 0
(f(ARG1) + 8) PTRADD f(ARG1) 2 4
 STORE 433 f(ARG1) f()
(f(ARG1) + 8) CAST (f(ARG1) + 8)
(ARG1 + 8) INT_ADD ARG1 8
0 INT_ZEXT 0
([(ARG1 + 8)] & -256) INT_AND [(ARG1 + 8)] -256
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0 ([(ARG1 + 8)] & -256)
0 INT_EQUAL [(ARG1 + 8)] 0
([(ARG1 + 8)] & -256) INT_OR ([(ARG1 + 8)] & -256) 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
 RETURN 0
[ARG1] LOAD 433 ARG1
(ARG1 + 24) PTRADD ARG1 3 8
0 INT_ZEXT 0
([ARG1] & -256) INT_AND [ARG1] -256
0 INT_EQUAL [ARG1] (ARG1 + 24)
 RETURN 0 ([ARG1] & -256)
([ARG1] & -256) INT_OR ([ARG1] & -256) 0
[ARG1] CAST [ARG1]
[ARG1] CAST [ARG1]
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 CALL func f() f()
 RETURN 0
 CALL libcall_free_thunk f()
f() CAST f()
 CALL func ARG1
 RETURN 0
 CALL libcall_memcpy_thunk ARG3 ARG1 (ARG2 - ARG1)
0 INT_NOTEQUAL ARG1 ARG2
ARG1 CAST ARG1
ARG2 CAST ARG2
 CBRANCH (ARG1 INT_NOTEQUAL ARG2)
 RETURN 0
(ARG2 - ARG1) INT_SUB ARG2 ARG1
(ARG2 - ARG1) CAST (ARG2 - ARG1)
 RETURN 0
(ARG2 - ARG1) INT_SUB ARG2 ARG1
 RETURN 0 (ARG2 - ARG1)
(ARG2 - ARG1) COPY (ARG2 - ARG1)
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -48) PTRSUB RSP -48
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -48)
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
40 INT_ADD 0 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
(ARG1 + 16) INT_ADD ARG1 16
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 0 [(ARG1 + 16)]
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1 (f() + f()) (f() + f())
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1 (f() + f()) (f() + f())
 CALL func ARG2 ARG3 f() 0
f() CALL func ARG2 ARG3 ARG3
(f() - f()) INT_SUB f() f()
 CBRANCH ((f() - f()) INT_LESS f())
 RETURN 0
(f() - f()) CAST (f() - f())
0 INT_LESS (f() - f()) f()
(f() + f()) INT_ADD f() f()
(f() + f()) INT_ADD f() f()
f() CALL func ARG1
f() CALL func ARG1
0 INT_LESSEQUAL f() ARG2
(ARG2 + f()) INT_ADD ARG2 f()
 CBRANCH (f() INT_LESSEQUAL ARG2)
idx < size() COPY idx < size()
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 139 0
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
 RETURN 0 (ARG2 + f())
 RETURN 1
 CALL func ARG1
 RETURN 0
ARG3 COPY ARG3
ARG2 COPY ARG2
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 COPY ARG1
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1 , RSP) CALL func (RSP + -48) (ARG1 + 8) (ARG1 + 8)
 CBRANCH (f(ARG1 , RSP) INT_EQUAL [(ARG1 + 8)])
0 INT_EQUAL f(ARG1 , RSP) [(ARG1 + 8)]
(RSP + -48) PTRSUB RSP -48
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f(ARG1 , RSP) CAST f(ARG1 , RSP)
(f(ARG1 , RSP) + [ARG1]) INT_ADD f(ARG1 , RSP) [ARG1]
(f(ARG1 , RSP) + [ARG1]) CAST (f(ARG1 , RSP) + [ARG1])
[ARG1] LOAD 433 ARG1
0 INT_NOTEQUAL [(f(ARG1 , RSP) + [ARG1])] ARG2
f(ARG1 , RSP) COPY f(ARG1 , RSP)
 RETURN 0 -1
[(f(ARG1 , RSP) + [ARG1])] LOAD 433 (f(ARG1 , RSP) + [ARG1])
-1 COPY -1
 RETURN 0 f(ARG1 , RSP)
 CBRANCH ([(f(ARG1 , RSP) + [ARG1])] INT_NOTEQUAL ARG2)
 BRANCH VZERO
(f(ARG1 , RSP) + 1) INT_ADD f(ARG1 , RSP) 1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
0 INT_EQUAL ARG1 47
 RETURN 0 0
0 COPY 0
ARG1 COPY ARG1
(ARG1 + 8) PTRADD ARG1 1 8
ARG3 COPY ARG3
ARG2 COPY ARG2
 CBRANCH ([f(ARG1 , RSP)] INT_LESS [(ARG1 + 8)])
(RSP + -48) PTRSUB RSP -48
(ARG1 + 8) PTRADD ARG1 1 8
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
f(ARG1 , RSP) CALL func (RSP + -48) (ARG1 + 8) (ARG1 + 8)
f(ARG1 , RSP) CAST f(ARG1 , RSP)
0 INT_LESS [f(ARG1 , RSP)] [(ARG1 + 8)]
[(ARG1 + 8)] CAST [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (f() INT_NOTEQUAL 0)
(f() - [ARG1]) COPY (f() - [ARG1])
(f() - [ARG1]) INT_SUB f() [ARG1]
(f() - [ARG1]) CAST (f() - [ARG1])
f() CAST f()
-1 COPY -1
 RETURN 0 (f() - [ARG1])
[ARG1] LOAD 433 ARG1
 RETURN 0 -1
f() CALL libcall_memchr_thunk ([f(ARG1 , RSP)] + [ARG1]) ARG2 ([(ARG1 + 8)] - [f(ARG1 , RSP)])
([f(ARG1 , RSP)] + [ARG1]) CAST ([f(ARG1 , RSP)] + [ARG1])
([(ARG1 + 8)] - [f(ARG1 , RSP)]) INT_SUB [(ARG1 + 8)] [f(ARG1 , RSP)]
ARG2 INT_SEXT ARG2
([f(ARG1 , RSP)] + [ARG1]) INT_ADD [f(ARG1 , RSP)] [ARG1]
[ARG1] LOAD 433 ARG1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) PTRADD ARG1 1 8
0 INT_NOTEQUAL f() 0
ARG2 INT_SEXT ARG2
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
ARG1 COPY ARG1
ARG2 COPY ARG2
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -56)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (2 INT_LESS f())
(RSP + -56) PTRSUB RSP -56
f() INT_SEXT f()
f() CALL func f()
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func (RSP + -56) 0
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 1)
1 COPY 1
 BRANCH VZERO
 CBRANCH f()
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -56) 0 f()
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
f() CALL func f()
f() INT_SEXT f()
 CBRANCH (f() INT_EQUAL 0)
f() CALL func (RSP + -56) 0
f() CALL func (RSP + -56) 47 2
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL f())
f() CALL func (RSP + -56) 2
0 INT_NOTEQUAL f() 1
(RSP + -56) PTRSUB RSP -56
f() CALL func f()
f() INT_SEXT f()
f() CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
 RETURN 0 f()
0 INT_LESS 2 f()
ARG1 COPY ARG1
 RETURN 0 ARG1
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -56) 0 f()
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -56) 47 0
f() CALL func (RSP + -56) 0 1
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -56) 0
f() CALL func (RSP + -56) 1
0 INT_EQUAL f() f()
(RSP + -56) PTRSUB RSP -56
 RETURN 0
 CALL func ARG1
 CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
 RETURN 0
 CALL func (ARG1 + 16)
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 COPY ARG1
 STORE 433 ARG1 ARG2
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 32) PTRADD ARG1 4 8
 CALL func ARG1
f(ARG2) CALL func ARG2 ARG3 ARG2
 STORE 433 (ARG1 + 8) ARG3
 STORE 433 (ARG1 + 16) (f(ARG2) / 2147483647)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
 STORE 433 (ARG1 + 32) 0
[40] LOAD 433 40
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f(ARG2) / 2147483647) INT_RIGHT f(ARG2) 64
 STORE 433 (ARG1 + 24) (f(ARG2) / 4611686014132420609)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f(ARG2) / 4611686014132420609) SUBPIECE (f(ARG2) / 2147483647) 0
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(f(ARG2) / 2147483647) SUBPIECE f(ARG2) 0
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 16) INT_ADD ARG1 16
 RETURN 0 (ARG1 + 16)
f() CALL func ARG1
(ARG1 + 32) INT_ADD ARG1 32
(ARG2 + 32) INT_ADD ARG2 32
f() CALL func ARG2
 RETURN 0 f()
 CBRANCH (f() INT_EQUAL f())
0 INT_EQUAL f() f()
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(ARG1 + 32) CAST (ARG1 + 32)
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
0 COPY 0
(ARG2 + 32) CAST (ARG2 + 32)
 CBRANCH ([(ARG1 + 32)] INT_EQUAL [(ARG2 + 32)])
0 INT_EQUAL [(ARG1 + 32)] [(ARG2 + 32)]
 BRANCH VZERO
1 COPY 1
f() CALL func ARG1 ARG2 ARG2
 RETURN 0 0
0 INT_XOR f() 1
0 COPY 0
 CALL func ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
 STORE 433 ARG1 ARG2
(ARG1 + 32) PTRADD ARG1 4 8
f() CALL func (RSP + -56)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
ARG1 COPY ARG1
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -56) PTRSUB RSP -56
 STORE 433 (ARG1 + 32) f()
(FS_OFFSET + 40) INT_ADD 0 40
 STORE 433 (ARG1 + 8) ARG3
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 16) INT_ADD ARG1 16
 RETURN 0 (ARG1 + 16)
 CALL func (RSP + -120) ARG1 ARG2 ARG1
 CALL func (RSP + -72) ARG1 ARG2 ARG1
f() CALL func (RSP + -120) (RSP + -72) (RSP + -72)
(RSP + -120) PTRSUB RSP -120
(f() + 40) INT_ADD f() 40
(RSP + -120) PTRSUB RSP -120
0 INT_NOTEQUAL f() [(f() + 40)]
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 CBRANCH (f() INT_NOTEQUAL f())
0 COPY 0
 BRANCH VZERO
1 COPY 1
f() CALL func f()
0 INT_LESS f() 3
 CBRANCH f()
 CALL func (RSP + -136)
(RSP + -120) PTRSUB RSP -120
(RSP + -136) PTRSUB RSP -136
f() CALL func (RSP + -120)
 CBRANCH (f() INT_LESS 3)
 BRANCH VZERO
(RSP + -120) PTRSUB RSP -120
(f() + 8) PTRADD f() 1 8
[f()] LOAD 433 f()
f() CAST f()
[(f() + 8)] LOAD 433 (f() + 8)
f() CALL func (RSP + -120)
 CBRANCH (f() INT_EQUAL 0)
f() CALL func f() 0
0 INT_NOTEQUAL f() f()
f() CALL func (RSP + -120)
(RSP + -120) PTRSUB RSP -120
f() CALL func f() 1
f() CALL func (RSP + -120)
(RSP + -120) PTRSUB RSP -120
 RETURN 1
 RETURN 0 (f() # f())
 CALL libcall___stack_chk_fail_thunk
(f() # f()) PIECE f() f()
f() INT_SEXT f()
f() CALL func f()
f() CALL func f() 0
0 INT_EQUAL f() 0
f() CALL func (RSP + -120)
(RSP + -120) PTRSUB RSP -120
f() CALL func ARG1 (RSP + -184) (RSP + -184)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
f() CALL func (RSP + -200)
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -184)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
[40] LOAD 433 40
(f() / 2147483647) SUBPIECE f() 0
(RSP + -184) PTRSUB RSP -184
40 CAST 40
 CALL func (RSP + -184)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) INT_RIGHT f() 64
(RSP + -184) PTRSUB RSP -184
(f() / 2147483647) SUBPIECE f() 0
0 INT_XOR f() 1
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
0 COPY 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -184) PTRSUB RSP -184
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 RETURN 0 0
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1 (ARG1 + 24) ARG2 (ARG1 + 24)
(ARG1 + 24) INT_ADD ARG1 24
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
ARG2 INT_ZEXT ARG2
 CALL func ARG1 (ARG2 * 16) (ARG2 * 16)
 RETURN 0
(ARG2 * 16) INT_LEFT ARG2 4
 CALL func ARG1 4
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
([(ARG1 + 8)] & -256) INT_AND [(ARG1 + 8)] -256
([(ARG1 + 8)] & -256) INT_OR ([(ARG1 + 8)] & -256) 0
0 INT_EQUAL [ARG1] [(ARG1 + 8)]
 RETURN 0 ([(ARG1 + 8)] & -256)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_ZEXT 0
 CALL func ARG1 32
 RETURN 0
 CALL func ARG1
 RETURN 0
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0 ([(ARG1 + 8)] + [ARG1])
([(ARG1 + 8)] + [ARG1]) INT_ADD [(ARG1 + 8)] [ARG1]
f() CALL func ARG1
 CALL func ARG1 f() f() f()
 CALL func ARG1 4585812
 CALL func ARG1 f() f() f()
f() CALL func ARG1
f() CALL func ARG1 (f() + -1) (f() + -1)
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG2 (RSP + -376) (RSP + -376)
f() CALL func ARG3
f() CALL func ARG3 (RSP + -312) (RSP + -312)
f() CALL func ARG4
f() CALL func ARG4 (RSP + -248) (RSP + -248)
f() CALL func ARG5
f() CALL func ARG5 (RSP + -184) (RSP + -184)
f() CALL func (RSP + -120)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -248)
(RSP + -376) PTRSUB RSP -376
(RSP + -184) PTRSUB RSP -184
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -120) PTRSUB RSP -120
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -184)
f() CALL func (RSP + -120)
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -312)
(RSP + -248) PTRSUB RSP -248
(RSP + -312) PTRSUB RSP -312
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 CALL func (RSP + -312)
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(A_Stack[-0x190]:8 # A_Stack[-0x198]:8) PIECE A_Stack[-0x190]:8 A_Stack[-0x198]:8
(RSP + -248) PTRSUB RSP -248
(RSP + -312) PTRSUB RSP -312
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -376)
 CALL func (RSP + -184)
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL f() [40]
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -120) PTRSUB RSP -120
(f() / 2147483647) SUBPIECE f() 8
[40] LOAD 433 (f() + 40)
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -248)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -184) PTRSUB RSP -184
(RSP + -376) PTRSUB RSP -376
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -376)
(f() / 2147483647) SUBPIECE f() 0
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -120)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -120)
 CBRANCH (f() INT_EQUAL f())
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL f() f()
 CBRANCH (f() INT_NOTEQUAL [40])
 CBRANCH (f() INT_EQUAL 1)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f()
f() INT_SEXT f()
 CBRANCH (f() INT_EQUAL 0)
f() CALL func f() 0
0 INT_EQUAL f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
 CBRANCH (f() INT_EQUAL 1)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_EQUAL 1)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_EQUAL 0)
f() CAST f()
0 INT_EQUAL f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
[f()] LOAD 433 f()
(f() / 2147483647) SUBPIECE f() 8
f() CALL func [f()]
[f()] INT_SEXT [f()]
0 COPY 0
(f() + -1) INT_ADD f() -1
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH f()
(f() / 2147483647) SUBPIECE f() 0
4585812 PTRSUB 0 4585812
(f() / 2147483647) SUBPIECE f() 8
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
(RSP + -408) PTRSUB RSP -408
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -120) (RSP + -408) (RSP + -408)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -184) PTRSUB RSP -184
(RSP + -120) PTRSUB RSP -120
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
1 COPY 1
(f() / 2147483647) SUBPIECE f() 0
f() COPY f()
(RSP + -408) PTRSUB RSP -408
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -120) (RSP + -408) (RSP + -408)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -248) PTRSUB RSP -248
(RSP + -120) PTRSUB RSP -120
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -120) (RSP + -408) (RSP + -408)
(RSP + -312) PTRSUB RSP -312
(RSP + -120) PTRSUB RSP -120
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() COPY f()
(RSP + -408) PTRSUB RSP -408
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f()
f(RSP) CALL func f() 47 0
f() CALL func (RSP + -408)
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f() f(RSP) -1 f(RSP)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -408) PTRSUB RSP -408
f() COPY f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -408)
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f()
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH f()
(RSP + -408) PTRSUB RSP -408
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() 1
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL f() 1
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
0 INT_EQUAL f() 1
(f() + 16) INT_ADD f() 16
(f() / 2147483647) SUBPIECE f() 8
(RSP + -408) PTRSUB RSP -408
 CALL func (RSP + -408) f() f()
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -408)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f()
(RSP + -408) PTRSUB RSP -408
(f() / 2147483647) SUBPIECE f() 8
(RSP + -408) PTRSUB RSP -408
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -120) (RSP + -408) (RSP + -408)
(RSP + -376) PTRSUB RSP -376
(RSP + -120) PTRSUB RSP -120
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
 RETURN 0
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
f() CALL func ARG1 2
f() CALL func (RSP + -40)
0 INT_XOR f() 1
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
0 COPY 0
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 COPY 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 0
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
f() CALL func ARG1
f() CALL func ARG1
(RSP + -56) PTRSUB RSP -56
40 CAST 40
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -56) f() f() f()
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 RETURN 1
 CALL func ARG1 ARG2 ARG3 ARG2
 CALL func ARG1 128
 RETURN 0
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -56)
 CALL func ARG1 f() f() f()
f() CALL func (RSP + -56)
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 RETURN 0 (([(ARG1 + 8)] * 16) + [ARG1])
([(ARG1 + 8)] * 16) INT_MULT [(ARG1 + 8)] 16
(([(ARG1 + 8)] * 16) + [ARG1]) INT_ADD ([(ARG1 + 8)] * 16) [ARG1]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func ARG1
 RETURN 0
(ARG1 + 32) INT_ADD ARG1 32
f(ARG1) CALL func ARG1
(ARG1 + 32) INT_ADD ARG1 32
 CALL func ARG2
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
(ARG1 + 32) CAST (ARG1 + 32)
0 INT_NOTEQUAL f(ARG1) 0
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(ARG1 + 32) CAST (ARG1 + 32)
 STORE 433 (ARG1 + 32) ([(ARG1 + 32)] & 254)
([(ARG1 + 32)] & 254) INT_AND [(ARG1 + 32)] 254
f(ARG1) CALL func 32 f(ARG1)
 RETURN 0
f(ARG1) CAST f(ARG1)
 CALL libcall_basic_string_thunk f(ARG1)
 CALL func ARG1 16
 RETURN 0
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG5 COPY ARG5
ARG1 COPY ARG1
ARG2 COPY ARG2
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -712) PTRSUB RSP -712
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
f() CALL func (RSP + -712)
 CBRANCH (f() INT_NOTEQUAL 0)
 CALL func (RSP + -536) 4592418
A_Stack[-0x218]:8 COPY A_Stack[-0x218]:8
(RSP + -536) PTRSUB RSP -536
 CALL func (RSP + -536) (RSP + -312) (RSP + -312)
4592418 PTRSUB 0 4592418
A_Stack[-0x210]:8 COPY A_Stack[-0x210]:8
 CALL func A_Stack[-0x238]:8 A_Stack[-0x230]:8 (RSP + -312) A_Stack[-0x218]:8 A_Stack[-0x210]:8
(RSP + -312) PTRSUB RSP -312
(RSP + -536) PTRSUB RSP -536
(RSP + -568) PTRSUB RSP -568
(RSP + -312) PTRSUB RSP -312
 CALL func (RSP + -568) f() f()
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_getenv_thunk 4592413
4592413 COPY 4592413
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_EQUAL -1)
(A_Stack[-0x210]:8 # A_Stack[-0x218]:8) PIECE A_Stack[-0x210]:8 A_Stack[-0x218]:8
(RSP + -312) PTRSUB RSP -312
(f() / 2147483647) SUBPIECE f() 0
(RSP + -728) PTRSUB RSP -728
 CALL func (RSP + -312)
f() CALL func (RSP + -728)
(RSP + -312) PTRSUB RSP -312
 CALL func ARG1 (RSP + -312) (RSP + -312)
(RSP + -312) PTRSUB RSP -312
0 INT_NOTEQUAL f() 0
(RSP + -712) PTRSUB RSP -712
 CBRANCH (f() INT_NOTEQUAL f())
(f() / 2147483647) SUBPIECE f() 8
0 INT_NOTEQUAL f() f()
(RSP + -312) PTRSUB RSP -312
f() CAST f()
f() CALL func (RSP + -728)
f() CALL func (RSP + -728)
(RSP + -312) PTRSUB RSP -312
(f() # f()) PIECE f() f()
(RSP + -728) PTRSUB RSP -728
 CALL func (RSP + -312) (RSP + -712) (RSP + -712)
f() CAST f()
 CALL func (RSP + -312)
 BRANCH VZERO
 CALL libcall_~basic_string_thunk (RSP + -312)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
(f() + 16) PTRADD f() 2 8
 CBRANCH (f() INT_EQUAL 0)
 CALL func (RSP + -600) 4592420
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -472)
(RSP + -536) PTRSUB RSP -536
(RSP + -472) PTRSUB RSP -472
4592420 PTRSUB 0 4592420
(RSP + -632) PTRSUB RSP -632
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -600) PTRSUB RSP -600
(RSP + -472) PTRSUB RSP -472
 CALL func (RSP + -568) 4592420
(f() / 2147483647) SUBPIECE f() 8
4592420 PTRSUB 0 4592420
(RSP + -536) PTRSUB RSP -536
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -536) f() f()
(f() / 2147483647) SUBPIECE f() 0
(RSP + -568) PTRSUB RSP -568
4592420 PTRSUB 0 4592420
(RSP + -472) PTRSUB RSP -472
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -712) PTRSUB RSP -712
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(RSP + -472) PTRSUB RSP -472
(RSP + -536) PTRSUB RSP -536
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -472) [f()] [(f() + 8)] [f()]
f() CALL func (RSP + -536)
 CALL func (RSP + -632) (RSP + -712) (RSP + -712)
(RSP + -600) PTRSUB RSP -600
 CALL func (RSP + -472) (RSP + -632) (RSP + -600) (RSP + -568) (RSP + -536)
(RSP + -568) PTRSUB RSP -568
 CALL func (RSP + -472)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -536) PTRSUB RSP -536
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -536) 4592420
(RSP + -632) PTRSUB RSP -632
 CBRANCH (0 INT_EQUAL [(f() + 40)])
 RETURN 0 f(ARG1)
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -648) PTRSUB RSP -648
[f()] LOAD 433 f()
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -648)
[(f() + 8)] LOAD 433 (f() + 8)
 CALL func f(ARG1) 2 0
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL f() 0
(f() + 8) PTRADD f() 1 8
(RSP + -504) PTRSUB RSP -504
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
f() COPY f()
 CALL func (RSP + -504) (RSP + -536) (RSP + -536)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -504) PTRSUB RSP -504
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall_~basic_string_thunk (RSP + -504)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -504) PTRSUB RSP -504
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -536) PTRSUB RSP -536
f() CALL func (RSP + -472)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -472) PTRSUB RSP -472
 CALL func f(ARG1) (RSP + -504) (RSP + -504)
(f() + 40) INT_ADD f() 40
(RSP + -712) PTRSUB RSP -712
0 INT_EQUAL 0 [(f() + 40)]
f(ARG1) COPY f(ARG1)
0 INT_EQUAL f() -1
0 COPY 0
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
!Name.empty() && "Must have a name!" COPY !Name.empty() && "Must have a name!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Program.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Program.inc
 RETURN 1
f() CALL func (RSP + -712) 47 0
 CALL libcall___assert_fail_thunk !Name.empty() && "Must have a name!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Program.inc 73 0
 CALL func ARG1
 RETURN 0
(ARG1 + 4294967294) INT_ADD ARG1 4294967294
(ARG1 + 4294967295) INT_ADD ARG1 4294967295
(ARG2 + 16) INT_ADD ARG2 16
(ARG2 + 8) INT_ADD ARG2 8
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_SLESS (ARG1 + 4294967295))
 CBRANCH (f(ARG1) INT_EQUAL 0)
f() COPY f()
0 INT_EQUAL f(ARG1) 0
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
 CBRANCH f()
(ARG2 + 8) CAST (ARG2 + 8)
0 INT_SLESS 0 (ARG1 + 4294967295)
(f() + 40) CAST (f() + 40)
 CBRANCH f()
1 COPY 1
 BRANCH VZERO
0 COPY 0
 BRANCH VZERO
 CBRANCH f()
1 COPY 1
0 INT_EQUAL f() 0
 BRANCH VZERO
 CBRANCH (f() INT_SLESS 0)
(RSP + -104) PTRSUB RSP -104
f() CALL func f() Error: 
 CALL func f() 4580789
4580789 PTRSUB 0 4580789
f() CALL func
Error:  COPY Error: 
f() CALL func f() (RSP + -104) f()
 CBRANCH (f() INT_EQUAL 1)
(RSP + -104) PTRSUB RSP -104
(RSP + -120) PTRSUB RSP -120
 BRANCH VZERO
4212415 COPY 4212415
f() CALL func
(RSP + -104) PTRSUB RSP -104
f() CALL func f() ' in PATH: 
' in PATH:  COPY ' in PATH: 
 CALL libcall_~basic_string_thunk (RSP + -104)
f() CALL func (RSP + -72)
[f(ARG2)] LOAD 433 f(ARG2)
 CALL libcall_~basic_string_thunk (RSP + -104)
f() CALL func (RSP + -72)
(RSP + -104) PTRSUB RSP -104
(f() # f()) PIECE f() f()
 CALL func (RSP + -104) (RSP + -120) (RSP + -120)
 CALL func f() 4580789
(RSP + -104) PTRSUB RSP -104
(RSP + -72) PTRSUB RSP -72
f() CALL func (f() # f()) f() f(ARG2) 0 0 0 0 (RSP + -104) 0 4212415
f() CALL func f() [f(ARG2)]
(RSP + -120) PTRSUB RSP -120
Error: Unable to find ` COPY Error: Unable to find `
 CALL libcall_basic_string_thunk
1 COPY 1
4580789 PTRSUB 0 4580789
0 COPY 0
f() CALL func f() Error: Unable to find `
f() CALL func f() (RSP + -104) f()
(RSP + -72) PTRSUB RSP -72
0 INT_SLESS f() 0
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -120) f() f()
(RSP + -168) PTRSUB RSP -168
0 COPY 0
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CALL func (RSP + -152) --crash
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -168) [(ARG2 + 8)] [(ARG2 + 8)]
f() CALL func A_Stack[-0xa8]:8 A_Stack[-0xa0]:8 A_Stack[-0x98]:8 A_Stack[-0x90]:8
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
--crash COPY --crash
 CALL func (RSP + -136) [f(ARG2)] [f(ARG2)]
0 INT_EQUAL f() 1
 CALL func (RSP + -72)
 CALL func (RSP + -120)
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -72) f() f() (f() # f()) f()
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
(f() # f()) PIECE f() f()
[f(ARG2)] LOAD 433 f(ARG2)
 BRANCH VZERO
f() CALL func (RSP + -72)
1 COPY 1
(RSP + -120) PTRSUB RSP -120
(ARG2 + 16) CAST (ARG2 + 16)
 BRANCH VZERO
1 COPY 1
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 RETURN 0
 RETURN 0
VZERO COPY VZERO
 CALL func 1 65535
 RETURN 0
VZERO COPY VZERO
 RETURN 0
 CALLIND [((f() * 8) + 6872488)] ARG1 ARG2 ARG3
 CBRANCH ((f() + 1) INT_NOTEQUAL 13)
[((f() * 8) + 6872488)] LOAD 433 ((f() * 8) + 6872488)
 RETURN 0
0 INT_NOTEQUAL (f() + 1) 13
0 COPY 0
 CALL libcall__DT_INIT
(f() + 1) INT_ADD f() 1
6872488 PTRSUB 0 6872488
((f() * 8) + 6872488) PTRADD 6872488 f() 8
[((f() * 8) + 6872488)] CAST [((f() * 8) + 6872488)]
 CALL libcall___libc_start_main_thunk 4211878 A_Stack[0x0]:8 (RSP + 8) 4580064 4580176 ARG3 (RSP + -8)
4580064 PTRSUB 0 4580064
4211878 PTRSUB 0 4211878
(RSP + -8) PTRSUB RSP -8
(RSP + 8) PTRSUB RSP 8
 BRANCH VZERO
4580176 PTRSUB 0 4580176
 RETURN 0
0 INT_EQUAL VZERO 0
f() COPY f()
 RETURN 0
 CBRANCH (VZERO INT_EQUAL 0)
1 COPY 1
 CALL func
0 INT_EQUAL ARG2 0
(ARG1 + 48) INT_ADD ARG1 48
0 INT_LESS ARG1 10
(ARG1 + f()) INT_ADD f() ARG1
 CBRANCH (ARG1 INT_LESS 10)
f(ARG1) COPY f(ARG1)
 CBRANCH (ARG2 INT_EQUAL 0)
 RETURN 0 f(ARG1)
((ARG1 + f()) + 4294967286) INT_ADD (ARG1 + f()) 4294967286
f() INT_ZEXT f()
 BRANCH VZERO
 BRANCH VZERO
65 COPY 65
97 COPY 97
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
 RETURN 0
 RETURN 0 8192
8192 COPY 8192
(ARG1 + 24) INT_ADD ARG1 24
f(ARG1) CALL func ARG1 ARG2 ARG2
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 24) INT_ADD ARG1 24
 STORE 433 [(ARG1 + 24)] ARG2
 CBRANCH ([(ARG1 + 24)] INT_LESS [(ARG1 + 16)])
(ARG1 + 24) CAST (ARG1 + 24)
0 INT_LESS [(ARG1 + 24)] [(ARG1 + 16)]
 RETURN 0 f(ARG1)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 BRANCH VZERO
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
 STORE 433 (ARG1 + 24) ([(ARG1 + 24)] + 1)
([(ARG1 + 24)] + 1) PTRADD [(ARG1 + 24)] 1 1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG1 COPY ARG1
0 COPY 0
 CBRANCH (f() INT_EQUAL f())
 RETURN 0 f(ARG1)
f() CALL func (RSP + -56)
0 INT_EQUAL f() f()
f(ARG1) COPY f(ARG1)
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
 CALL func f(ARG1) f() f()
 CBRANCH (f(ARG4) INT_EQUAL 0)
0 INT_EQUAL f(ARG4) 0
 CBRANCH (f() INT_LESS 11)
 CBRANCH (f() INT_EQUAL 9)
0 INT_EQUAL f() 9
 CBRANCH (f() INT_EQUAL 34)
0 INT_EQUAL f() 34
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() CALL func (RSP + -56) f() f()
 CBRANCH (f() INT_EQUAL 10)
0 INT_EQUAL f() 10
(RSP + -56) PTRSUB RSP -56
f(ARG1) CALL func f(ARG1) 92
f() INT_ZEXT f()
f() CALL libcall_isprint_thunk f()
0 INT_EQUAL f() 0
 BRANCH VZERO
 CALL func f(ARG1) 116
 BRANCH VZERO
 CALL func f(ARG1) 110
0 INT_LESS f() 11
f(ARG1) CALL func f(ARG1) 92
((f() / 64) + 48) INT_ADD (f() / 64) 48
f() INT_SEXT f()
 CALL func f(ARG1) ((f() / 64) + 48) ((f() / 64) + 48)
f() INT_ZEXT f()
f() INT_SEXT f()
f() CAST f()
(f() / 17179869176) SUBPIECE (f() / 8) 0
f() CALL func (f() & 15) 0
f() CALL func (f() / 16) 0
(f() & 15) INT_AND f() 15
(f() / 8) INT_SRIGHT f() 3
 CALL func f(ARG1) 92
 CALL func f(ARG1) 120
 CALL func f(ARG1) ((7 & (f() / 17179869176)) + 48) ((7 & (f() / 17179869176)) + 48)
 CALL func f(ARG1) ((f() & 7) + 48) ((f() & 7) + 48)
((f() & 7) + 48) INT_ADD (f() & 7) 48
(f() & 7) INT_AND f() 7
f(ARG1) CALL func f(ARG1) 92
((7 & (f() / 17179869176)) + 48) INT_ADD (7 & (f() / 17179869176)) 48
 BRANCH VZERO
(f() / 64) INT_RIGHT f() 6
(f() / 16) INT_RIGHT f() 4
 CALL func f(ARG1) f() f()
(7 & (f() / 17179869176)) INT_AND (f() / 17179869176) 7
 CALL func f(ARG1) f() f()
 BRANCH VZERO
 CALL func f(ARG1) 34
f(ARG1) CALL func f(ARG1) 92
 CBRANCH (f() INT_NOTEQUAL 92)
0 INT_NOTEQUAL f() 92
f(ARG1) CALL func f(ARG1) 92
 BRANCH VZERO
 CALL func f(ARG1) 92
f(ARG1) CALL func ARG1 48
 CALL func ARG1 ARG2 ARG2
 CALL func f(ARG1) 120
 RETURN 0
f() CALL func ARG1
 CALL func ARG1 (ARG2 + f()) (ARG2 + f())
f() CALL func ARG1
 CALL func ARG1 (ARG2 + f()) (ARG2 + f())
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1 ARG2 ARG2
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
0 INT_LESS ARG2 f()
(ARG2 + f()) INT_ADD f() ARG2
(ARG2 + f()) INT_ADD ARG2 f()
0 INT_LESS f() ARG2
(ARG2 + f()) INT_ADD ARG2 f()
0 INT_LESS f() ARG2
(ARG2 + f()) INT_ADD f() ARG2
 CBRANCH (ARG2 INT_LESS f())
 RETURN 0
 CALL func (ARG2 + f()) f() f()
 CBRANCH (f() INT_LESS ARG2)
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL (ARG2 + f()))
0 INT_NOTEQUAL f() (ARG2 + f())
 CBRANCH (f() INT_LESS ARG2)
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() CAST f()
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func 1 f()
0 INT_NOTEQUAL f() 0
 STORE 433 f() 0
VZERO CALLIND [([ARG1] + 8)] ARG1 ARG2 ARG3 ARG1
0 INT_LESSEQUAL ARG3 VZERO
0 INT_NOTEQUAL ARG3 0
(ARG3 * 2) INT_MULT ARG3 2
[ARG1] LOAD 433 ARG1
 CBRANCH (ARG3 INT_NOTEQUAL 0)
([ARG1] + 8) CAST ([ARG1] + 8)
[([ARG1] + 8)] LOAD 433 ([ARG1] + 8)
 CBRANCH (VZERO INT_SLESS 0)
VZERO CAST VZERO
0 INT_SLESS VZERO 0
 RETURN 0 f(ARG3)
0 COPY 0
BufferSize && "Invalid buffer size!" COPY BufferSize && "Invalid buffer size!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Format.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Format.h
 RETURN 1
([ARG1] + 8) INT_ADD [ARG1] 8
 CALL libcall___assert_fail_thunk BufferSize && "Invalid buffer size!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Format.h 54 0
 CBRANCH (ARG3 INT_LESSEQUAL VZERO)
 BRANCH VZERO
1 INT_ADD VZERO 1
 BRANCH VZERO
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 24) INT_ADD ARG1 24
f(ARG1) CALL func ARG1 f() f(ARG1) f()
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 24) INT_ADD ARG1 24
f(ARG1) CALL func ARG2 [(ARG1 + 24)] (4294967295 & ([(ARG1 + 16)] - [(ARG1 + 24)])) [(ARG1 + 24)]
f(ARG1) CALL func ARG2 f() f(ARG1) f()
0 INT_LESS 3 ([(ARG1 + 16)] - [(ARG1 + 24)])
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(ARG1 + 16) CAST (ARG1 + 16)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
([(ARG1 + 16)] - [(ARG1 + 24)]) INT_SUB [(ARG1 + 16)] [(ARG1 + 24)]
 CBRANCH (3 INT_LESS ([(ARG1 + 16)] - [(ARG1 + 24)]))
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
127 COPY 127
(ARG1 + 24) CAST (ARG1 + 24)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (0 INT_EQUAL [(f() + 40)])
 RETURN 1
 RETURN 0 f(ARG1)
 CALL libcall___stack_chk_fail_thunk
0 INT_LESSEQUAL f(ARG1) ([(ARG1 + 16)] - [(ARG1 + 24)])
f() CALL func (RSP + -184)
 CALL func (RSP + -184) f(ARG1) f(ARG1)
(RSP + -184) PTRSUB RSP -184
(ARG1 + 24) CAST (ARG1 + 24)
 CALL func (RSP + -184)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
f(ARG1) INT_ZEXT f(ARG1)
(4294967295 & ([(ARG1 + 16)] - [(ARG1 + 24)])) INT_AND ([(ARG1 + 16)] - [(ARG1 + 24)]) 4294967295
 CBRANCH (f(ARG1) INT_LESSEQUAL f(ARG1))
(RSP + -184) PTRSUB RSP -184
(RSP + -184) PTRSUB RSP -184
0 INT_LESSEQUAL f(ARG1) f(ARG1)
f(ARG1) COPY f(ARG1)
f(ARG1) INT_ZEXT f(ARG1)
 CBRANCH (f(ARG1) INT_LESSEQUAL ([(ARG1 + 16)] - [(ARG1 + 24)]))
f(ARG1) COPY f(ARG1)
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_LESSEQUAL f(ARG1) f(ARG1)
f() CALL func (RSP + -184)
(RSP + -184) PTRSUB RSP -184
0 INT_EQUAL 0 [(f() + 40)]
(ARG1 + 24) CAST (ARG1 + 24)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -184) PTRSUB RSP -184
f(ARG1) COPY f(ARG1)
0 COPY 0
BytesUsed > NextBufferSize && "Didn't grow buffer!?" COPY BytesUsed > NextBufferSize && "Didn't grow buffer!?"
0 COPY 0
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
 BRANCH VZERO
 CALL func (RSP + -184)
 STORE 433 (ARG1 + 24) ([(ARG1 + 24)] + f(ARG1))
([(ARG1 + 24)] + f(ARG1)) INT_ADD [(ARG1 + 24)] f(ARG1)
 CBRANCH (f(ARG1) INT_LESSEQUAL f(ARG1))
 RETURN 1
 CALL libcall___assert_fail_thunk BytesUsed > NextBufferSize && "Didn't grow buffer!?" 0 394 0
 BRANCH VZERO
 STORE 433 ARG1 Symbol
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 (ARG1 + 8) ARG2
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 Symbol
 CALL func (ARG1 + 16) ARG3 (ARG1 + 16)
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG2 COPY ARG2
ARG1 COPY ARG1
4582740 PTRSUB 0 4582740
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -56) PTRSUB RSP -56
[40] LOAD 433 40
(RSP + -40) PTRSUB RSP -40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -40) 4582740 (RSP + -56)
(RSP + -40) PTRSUB RSP -40
 CALL func ARG2 (RSP + -40) (RSP + -40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 81
81 COPY 81
[ARG1] LOAD 433 ARG1
[ARG2] LOAD 433 ARG2
ARG2 COPY ARG2
 CBRANCH ([ARG2] INT_LESS [ARG1])
0 INT_LESS [ARG2] [ARG1]
 RETURN 0 f(ARG1 , ARG2)
 BRANCH VZERO
ARG1 COPY ARG1
ARG2 INT_ZEXT ARG2
ARG2 COPY ARG2
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
f() CALL func 
 CBRANCH (ARG2 INT_LESS f())
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) INT_ADD f() 40
 COPY 
0 INT_EQUAL 0 [(f() + 40)]
0 INT_LESS ARG2 f()
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(ARG1)
f(ARG1) COPY f(ARG1)
 COPY 
 BRANCH VZERO
f(ARG1) CALL func ARG1  ARG2
f(ARG1) COPY f(ARG1)
 CBRANCH (f(ARG2 , RSP) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG2 , RSP) 0
(f(ARG2 , RSP) - [f(RSP)]) INT_SUB f(ARG2 , RSP) [f(RSP)]
[f(RSP)] LOAD 433 f(RSP)
 COPY 
f(RSP) CAST f(RSP)
f(RSP) CALL func (RSP + -52) (RSP + -40) (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -52) PTRSUB RSP -52
 CALL func f(ARG1)  [f(RSP)]
(f() + 4294967295) INT_ADD f() 4294967295
f() CALL func 
 COPY 
 BRANCH VZERO
 CALL func ARG1 [ARG2] [(ARG2 + 8)] [ARG2]
ARG1 COPY ARG1
 CALL func ARG1 ([(ARG2 + 16)] - f()) ([(ARG2 + 16)] - f())
 CALL func ARG1 ([(ARG2 + 16)] - f()) ([(ARG2 + 16)] - f())
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 16) PTRADD ARG2 2 8
ARG2 CAST ARG2
[ARG2] LOAD 433 ARG2
ARG2 CAST ARG2
f() CALL func ARG2
 RETURN 0 ARG1
(ARG2 + 16) CAST (ARG2 + 16)
[(ARG2 + 20)] LOAD 433 (ARG2 + 20)
 CBRANCH ([(ARG2 + 20)] INT_NOTEQUAL 1)
0 INT_NOTEQUAL [(ARG2 + 20)] 1
[(ARG2 + 20)] LOAD 433 (ARG2 + 20)
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
([(ARG2 + 16)] - f()) INT_SUB [(ARG2 + 16)] f()
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CBRANCH ([(ARG2 + 20)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(ARG2 + 20)] 0
(ARG2 + 20) CAST (ARG2 + 20)
(ARG2 + 20) CAST (ARG2 + 20)
(ARG2 + 20) INT_ADD ARG2 20
(ARG2 + 20) INT_ADD ARG2 20
0 INT_SLESS 0 ([(ARG2 + 16)] - f())
 CBRANCH (0 INT_SLESS ([(ARG2 + 16)] - f()))
 CBRANCH (0 INT_SLESS ([(ARG2 + 16)] - f()))
0 INT_SLESS 0 ([(ARG2 + 16)] - f())
[ARG1] LOAD 433 ARG1
[ARG2] LOAD 433 ARG2
ARG2 COPY ARG2
 RETURN 0 f(ARG1 , ARG2)
 CBRANCH ([ARG1] INT_LESS [ARG2])
0 INT_LESS [ARG1] [ARG2]
 BRANCH VZERO
(ARG1 >> f()) INT_RIGHT ARG1 f()
0 INT_NOTEQUAL ARG1 0
0 INT_NOTEQUAL ARG1 0
0 INT_EQUAL ARG2 0
 CBRANCH (ARG2 INT_EQUAL 0)
 RETURN 0 f()
(f() + -1) INT_ADD f() -1
 CBRANCH (ARG1 INT_NOTEQUAL 0)
0 CAST 0
0 INT_EQUAL (ARG1 >> f()) 0
0 INT_SEXT 0
 BRANCH 4294967291
(f() / 2147483647) SUBPIECE f() 0
0 INT_XOR (f() / 2147483647) 63
 CBRANCH ((ARG1 >> f()) INT_EQUAL 0)
 CBRANCH (ARG1 INT_NOTEQUAL 0)
63 COPY 63
 BRANCH VZERO
64 COPY 64
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 f(ARG2 , RSP) f(ARG2 , RSP)
 CALL func ARG1 f(RSP) f(RSP) f(RSP)
 CALL func ARG1 ([(ARG2 + 16)] + 4294967295) ([(ARG2 + 16)] + 4294967295)
 CALL func ARG1 48
 CALL func ARG1 (RSP + -56) [f(RSP)] (RSP + -56)
 CALL func ARG1 45
[ARG2] LOAD 433 ARG2
(ARG2 + 16) PTRADD ARG2 2 8
(ARG2 + 8) PTRADD ARG2 1 8
ARG2 CAST ARG2
(ARG2 + 16) PTRADD ARG2 2 8
[ARG2] LOAD 433 ARG2
ARG2 CAST ARG2
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 8) PTRADD ARG2 1 8
ARG2 CAST ARG2
ARG2 CAST ARG2
(ARG2 + 16) PTRADD ARG2 2 8
[(ARG2 + 20)] LOAD 433 (ARG2 + 20)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(ARG2 + 20)] INT_EQUAL 0)
(f() + 40) INT_ADD f() 40
0 INT_EQUAL [(ARG2 + 20)] 0
0 INT_EQUAL 0 [(f() + 40)]
(ARG2 + 20) INT_ADD ARG2 20
(ARG2 + 20) CAST (ARG2 + 20)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (0 INT_SLESS f(ARG2 , RSP))
 CBRANCH ([(ARG2 + 22)] INT_EQUAL 0)
2 COPY 2
 BRANCH VZERO
0 COPY 0
 CBRANCH ([(ARG2 + 22)] INT_NOTEQUAL 1)
3472328296227680304 COPY 3472328296227680304
 CBRANCH ([(ARG2 + 8)] INT_EQUAL 0)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
f(RSP) INT_SEXT f(RSP)
(RSP + -25) PTRSUB RSP -25
(RSP + -24) PTRADD (RSP + -25) 1 1
(RSP + -24) COPY (RSP + -24)
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
[(ARG2 + 8)] CAST [(ARG2 + 8)]
 CBRANCH ([(ARG2 + 8)] INT_SLESS 0)
0 INT_SLESS [(ARG2 + 8)] 0
(((RSP + -24) / 2147483647) - (f(RSP) / 2147483647)) INT_SUB ((RSP + -24) / 2147483647) (f(RSP) / 2147483647)
[(ARG2 + 8)] CAST [(ARG2 + 8)]
0 INT_SLESS 0 f(ARG2 , RSP)
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
(ARG2 + 16) CAST (ARG2 + 16)
0 INT_NOTEQUAL f(ARG2) 0
 CBRANCH ([(ARG2 + 8)] INT_SLESS 0)
([(ARG2 + 16)] - (((RSP + -24) / 2147483647) - (f(RSP) / 2147483647))) INT_SUB [(ARG2 + 16)] (((RSP + -24) / 2147483647) - (f(RSP) / 2147483647))
(ARG2 + 16) CAST (ARG2 + 16)
([(ARG2 + 16)] + 4294967295) INT_ADD [(ARG2 + 16)] 4294967295
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
0 INT_SLESS [(ARG2 + 8)] 0
((RSP + -24) / 2147483647) SUBPIECE (RSP + -24) 0
 BRANCH VZERO
 CBRANCH ([(ARG2 + 8)] INT_SLESS 0)
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
0 INT_SLESS [(ARG2 + 8)] 0
[(ARG2 + 8)] CAST [(ARG2 + 8)]
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(((f(ARG2) % 10) / 2147483647) + 48) INT_ADD ((f(ARG2) % 10) / 2147483647) 48
(f(ARG2) % 10) INT_REM f(ARG2) 10
 BRANCH VZERO
(f(RSP) + -1) COPY (f(RSP) + -1)
(f(ARG2) / 10) INT_DIV f(ARG2) 10
(f(RSP) + -1) PTRADD f(RSP) -1 1
 STORE 433 (f(RSP) + -1) (((f(ARG2) % 10) / 2147483647) + 48)
((f(ARG2) % 10) / 2147483647) SUBPIECE (f(ARG2) % 10) 0
(([(ARG2 + 16)] - (((RSP + -24) / 2147483647) - (f(RSP) / 2147483647))) + 4294967295) INT_ADD ([(ARG2 + 16)] - (((RSP + -24) / 2147483647) - (f(RSP) / 2147483647))) 4294967295
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG2) 0
 BRANCH VZERO
(f(ARG2) / 2147483647) SUBPIECE f(ARG2) 0
 CBRANCH ((15 & (f(ARG2) / 2147483647)) INT_LESS 10)
(f(ARG2) / 16) INT_RIGHT f(ARG2) 4
((15 & (f(ARG2) / 2147483647)) / 2147483647) SUBPIECE (15 & (f(ARG2) / 2147483647)) 0
(15 & (f(ARG2) / 2147483647)) INT_AND (f(ARG2) / 2147483647) 15
(15 & (f(ARG2) / 2147483647)) INT_ZEXT (15 & (f(ARG2) / 2147483647))
 STORE 433 (f(RSP) + -1) f(ARG2)
0 INT_LESS (15 & (f(ARG2) / 2147483647)) 10
(f(RSP) + -1) PTRADD f(RSP) -1 1
(ARG2 + 22) CAST (ARG2 + 22)
([f(RSP)] + (RSP + -56)) COPY ([f(RSP)] + (RSP + -56))
[(ARG2 + 22)] LOAD 433 (ARG2 + 22)
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
f() CALL func [ARG2] 2
[f(RSP)] LOAD 433 f(RSP)
0 INT_EQUAL [(ARG2 + 8)] 0
f(RSP) CALL func (ARG2 + 16) (RSP + -136) (ARG2 + 16)
 CBRANCH ([(ARG2 + 21)] INT_EQUAL 0)
0 INT_EQUAL [(ARG2 + 21)] 0
[f(RSP)] INT_ZEXT [f(RSP)]
(ARG2 + 21) CAST (ARG2 + 21)
(ARG2 + 21) INT_ADD ARG2 21
((67 - f()) / 4) INT_RIGHT (67 - f()) 2
12336 COPY 12336
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(RSP + -136) PTRSUB RSP -136
3472328296227680304 COPY 3472328296227680304
[(ARG2 + 21)] LOAD 433 (ARG2 + 21)
0 INT_NOTEQUAL [(ARG2 + 22)] 1
0 INT_EQUAL [(ARG2 + 22)] 0
(ARG2 + 22) INT_ADD ARG2 22
([f(RSP)] + (RSP + -56)) CAST ([f(RSP)] + (RSP + -56))
(RSP + -56) CAST (RSP + -56)
(67 - f()) INT_SUB 67 f()
(((67 - f()) / 8589934588) + f()) INT_ADD f() ((67 - f()) / 8589934588)
(ARG2 + 22) CAST (ARG2 + 22)
3472328296227698736 COPY 3472328296227698736
(RSP + -56) PTRSUB RSP -56
(ARG2 + 22) INT_ADD ARG2 22
([f(RSP)] + (RSP + -56)) INT_ADD (RSP + -56) [f(RSP)]
f(RSP) CAST f(RSP)
[(ARG2 + 22)] LOAD 433 (ARG2 + 22)
((67 - f()) / 8589934588) SUBPIECE ((67 - f()) / 4) 0
65 COPY 65
 BRANCH VZERO
97 COPY 97
((((15 & (f(ARG2) / 2147483647)) / 2147483647) + f()) + 246) INT_ADD (((15 & (f(ARG2) / 2147483647)) / 2147483647) + f()) 246
(((15 & (f(ARG2) / 2147483647)) / 2147483647) + f()) INT_ADD f() ((15 & (f(ARG2) / 2147483647)) / 2147483647)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(((15 & (f(ARG2) / 2147483647)) / 2147483647) + 48) INT_ADD ((15 & (f(ARG2) / 2147483647)) / 2147483647) 48
(~([(ARG2 + 8)]) + 1) INT_2COMP [(ARG2 + 8)]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 BRANCH VZERO
 BRANCH VZERO
 RETURN 0
(RSP + -56) PTRSUB RSP -56
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CALL func (RSP + -56)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) INT_AND (A_Stack[-0x30]:8 # A_Stack[-0x38]:8) -1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
(ARG3 & 2) INT_AND ARG3 2
(ARG3 & 2) INT_AND ARG3 2
(ARG3 & 1) INT_AND ARG3 1
(ARG3 & 8) INT_AND ARG3 8
(ARG3 & 1) INT_AND ARG3 1
ARG4 INT_ZEXT ARG4
f() CALL func ARG1
f() LOAD 433 ARG2
 STORE 433 ARG2 f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ((ARG3 & 1) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (ARG3 & 1) 0
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ((ARG3 & 2) INT_NOTEQUAL 0)
 CBRANCH ((ARG3 & 2) INT_EQUAL 0)
0 INT_EQUAL (ARG3 & 2) 0
0 COPY 0
0 COPY 0
(f() / 2147483647) SUBPIECE f() 8
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc
 CBRANCH ((ARG3 & 8) INT_EQUAL 0)
0 INT_EQUAL (ARG3 & 8) 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -200)
f() CALL libcall_open_thunk f() f() ARG4
(f() / 2147483647) SUBPIECE f() 0
f() CAST f()
(RSP + -200) PTRSUB RSP -200
(f() + 40) CAST (f() + 40)
 CALL func (RSP + -200)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -232) PTRSUB RSP -232
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
(f() / 2147483647) SUBPIECE f() 0
0 INT_SLESS 4294967295 f()
 CBRANCH (4294967295 INT_SLESS f())
 CBRANCH ((ARG3 & 1) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (ARG3 & 1) 0
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___assert_fail_thunk 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc 518 0
f() CALL func (RSP + -232)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -200) PTRSUB RSP -200
(f() | 1024) INT_OR f() 1024
 BRANCH VZERO
(f() | 512) INT_OR f() 512
0 INT_NOTEQUAL (ARG3 & 2) 0
66 COPY 66
65 COPY 65
 BRANCH VZERO
(f() | 128) INT_OR f() 128
f() CALL libcall___errno_location_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -216)
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH ([f()] INT_EQUAL 4)
(RSP + -216) PTRSUB RSP -216
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL [f()] 4
[f()] LOAD 433 f()
 CALL libcall___stack_chk_fail_thunk
(f() # f()) PIECE f() f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 RETURN 0 (f() # f())
(f() # f()) INT_AND (f() # f()) -1
 RETURN 1
(RSP + -216) PTRSUB RSP -216
(f() / 2147483647) SUBPIECE f() 0
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
f() CALL libcall_generic_category_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -216) [f()] f() [f()]
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -56) (RSP + -60) ARG4
(ARG4 & 4) INT_AND ARG4 4
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 CAST ARG3
(ARG3 + 8) PTRADD ARG3 1 8
 STORE 433 ARG3 A_Stack[-0x38]:8
(ARG3 + 8) PTRADD ARG3 1 8
f() CALL func ARG3
0 INT_EQUAL f() 0
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
(RSP + -56) PTRSUB RSP -56
f() CALL func ARG1 ARG2 A_Stack[-0x38]:8 A_Stack[-0x30]:8
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -56) 4582981
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
 CBRANCH (f() INT_EQUAL 0)
4582981 PTRSUB 0 4582981
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
4294967295 COPY 4294967295
 CBRANCH ((ARG4 & 4) INT_EQUAL 0)
 CALL func
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
(RSP + -60) PTRSUB RSP -60
1 COPY 1
0 INT_EQUAL (ARG4 & 4) 0
 CALL func (RSP + -56) (RSP + -88) (RSP + -88)
 BRANCH VZERO
 CALL func (RSP + -56)
0 INT_NOTEQUAL f() 0
 STORE 433 (ARG3 + 8) A_Stack[-0x30]:8
(RSP + -56) PTRSUB RSP -56
 STORE 433 (ARG3 + 8) 0
(RSP + -56) PTRSUB RSP -56
(RSP + -88) PTRSUB RSP -88
 STORE 433 ARG3 f()
(RSP + -56) PTRSUB RSP -56
 CALL func ARG1 f() 1 0
f() CALL func ARG2 ARG3 ARG4 ARG5
 RETURN 0
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
ARG2 COPY ARG2
([(ARG1 + 48)] + ARG3) INT_ADD [(ARG1 + 48)] ARG3
ARG3 COPY ARG3
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 42) INT_ADD ARG1 42
(ARG1 + 36) INT_ADD ARG1 36
 CALL func ARG1
(ARG1 + 36) INT_ADD ARG1 36
(ARG1 + 36) INT_ADD ARG1 36
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(ARG1 + 36) CAST (ARG1 + 36)
 CBRANCH ([(ARG1 + 36)] INT_SLESS 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_SLESS [(ARG1 + 36)] 0
[(ARG1 + 36)] LOAD 433 (ARG1 + 36)
 CBRANCH ([f()] INT_NOTEQUAL 4)
0 INT_EQUAL f(ARG3) 0
 CBRANCH ([f()] INT_NOTEQUAL 11)
0 INT_NOTEQUAL [f()] 11
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
 CBRANCH (f(ARG3) INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CBRANCH ([f()] INT_NOTEQUAL 11)
0 INT_NOTEQUAL [f()] 11
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
 STORE 433 (ARG1 + 48) ([(ARG1 + 48)] + ARG3)
(ARG1 + 48) CAST (ARG1 + 48)
 CBRANCH (f() INT_SLESS 0)
 CBRANCH ([(ARG1 + 42)] INT_EQUAL 1)
0 INT_EQUAL [(ARG1 + 42)] 1
0 INT_SLESS f() 0
0 COPY 0
FD >= 0 && "File already closed." COPY FD >= 0 && "File already closed."
0 COPY 0
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() [(f() + 40)]
 RETURN 1
(ARG1 + 42) CAST (ARG1 + 42)
 CALL libcall___assert_fail_thunk FD >= 0 && "File already closed." 0 567 0
[(ARG1 + 42)] LOAD 433 (ARG1 + 42)
(ARG1 + 48) CAST (ARG1 + 48)
[(f() + 40)] LOAD 433 (f() + 40)
 BRANCH VZERO
0 INT_NOTEQUAL [f()] 4
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
(f(ARG2) + f()) CAST (f(ARG2) + f())
f(ARG2) CAST f(ARG2)
(f(ARG2) + f()) INT_ADD f(ARG2) f()
(f(ARG3) - f()) INT_SUB f(ARG3) f()
 BRANCH VZERO
(ARG1 + 36) CAST (ARG1 + 36)
f() CALL libcall_write_thunk [(ARG1 + 36)] f(ARG2) f(ARG3)
[(ARG1 + 36)] LOAD 433 (ARG1 + 36)
(RSP + -40) PTRSUB RSP -40
(ARG1 + 36) CAST (ARG1 + 36)
 BRANCH VZERO
f(ARG2) COPY f(ARG2)
f(ARG3) COPY f(ARG3)
f() CALL libcall_writev_thunk [(ARG1 + 36)] (RSP + -40) 1
[(ARG1 + 36)] LOAD 433 (ARG1 + 36)
(ARG1 + 36) INT_ADD ARG1 36
(ARG1 + 36) INT_ADD ARG1 36
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
 CALL func ARG1
 CALL func ARG1
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(ARG1 + 40)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 40)] 0
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
 CALL libcall___assert_fail_thunk ShouldClose 0 617 0
(ARG1 + 40) CAST (ARG1 + 40)
f() CALL func [(ARG1 + 36)]
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
ShouldClose COPY ShouldClose
0 COPY 0
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
0 COPY 0
[(ARG1 + 36)] LOAD 433 (ARG1 + 36)
(RSP + -40) PTRSUB RSP -40
f() CALL func (RSP + -40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
(ARG1 + 36) CAST (ARG1 + 36)
 STORE 433 (ARG1 + 36) 4294967295
 STORE 433 (ARG1 + 40) 0
(ARG1 + 36) CAST (ARG1 + 36)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 36) INT_ADD ARG1 36
 CALL func ARG1
f() CALL libcall_lseek_thunk [(ARG1 + 36)] ARG2 0
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
[(ARG1 + 48)] COPY [(ARG1 + 48)]
[(ARG1 + 36)] LOAD 433 (ARG1 + 36)
 RETURN 0 [(ARG1 + 48)]
(ARG1 + 48) CAST (ARG1 + 48)
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
(ARG1 + 36) CAST (ARG1 + 36)
(ARG1 + 48) CAST (ARG1 + 48)
(ARG1 + 48) CAST (ARG1 + 48)
 CALL func
 CBRANCH ([(ARG1 + 48)] INT_EQUAL -1)
 STORE 433 (ARG1 + 48) f()
0 INT_EQUAL [(ARG1 + 48)] -1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
VZERO CALLIND [([ARG1] + 72)] ARG1 ARG2 ARG1
[([ARG1] + 72)] LOAD 433 ([ARG1] + 72)
([ARG1] + 72) CAST ([ARG1] + 72)
f() INT_ADD f() VZERO
([ARG1] + 72) INT_ADD [ARG1] 72
 RETURN 0 f()
f() CALL func ARG1
 CALL func ARG1 ARG2 ARG3 ARG2
 CALL func ARG1 f() f()
 CALL func ARG1 ARG4 ARG4
 RETURN 0
 CALL libcall___fxstat_thunk 1 ARG1 ARG2
 RETURN 0
(ARG1 + 36) INT_ADD ARG1 36
(ARG1 + 36) INT_ADD ARG1 36
(ARG1 + 36) INT_ADD ARG1 36
[(ARG1 + 36)] LOAD 433 (ARG1 + 36)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(ARG1 + 36)] INT_SLESS 0)
(ARG1 + 36) CAST (ARG1 + 36)
0 INT_SLESS [(ARG1 + 36)] 0
 CBRANCH ((A_Stack[-0x90]:4 & 61440) INT_EQUAL 8192)
0 COPY 0
(ARG1 + 36) CAST (ARG1 + 36)
f() CALL libcall_isatty_thunk [(ARG1 + 36)]
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
[(ARG1 + 36)] LOAD 433 (ARG1 + 36)
1 COPY 1
 BRANCH VZERO
 CBRANCH (0 INT_EQUAL [(f() + 40)])
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 CBRANCH f()
 BRANCH VZERO
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL (A_Stack[-0x90]:4 & 61440) 8192
(A_Stack[-0x90]:4 & 61440) INT_AND A_Stack[-0x90]:4 61440
 BRANCH VZERO
0 COPY 0
(RSP + -168) PTRSUB RSP -168
(ARG1 + 36) CAST (ARG1 + 36)
(f() + 40) INT_ADD f() 40
[(ARG1 + 36)] LOAD 433 (ARG1 + 36)
0 INT_EQUAL 0 [(f() + 40)]
f() CALL func [(ARG1 + 36)] (RSP + -168) (RSP + -168)
0 COPY 0
FD >= 0 && "File not yet open!" COPY FD >= 0 && "File not yet open!"
0 COPY 0
(f() + 40) CAST (f() + 40)
 RETURN 1
[(f() + 40)] LOAD 433 (f() + 40)
 CALL libcall___assert_fail_thunk FD >= 0 && "File not yet open!" 0 644 0
0 INT_EQUAL f() 0
0 INT_NOTEQUAL ARG2 0
0 INT_NOTEQUAL ARG3 0
ARG1 INT_SEXT ARG1
0 CAST 0
0 INT_SEXT 0
0 INT_ZEXT 0
((ARG1 & 7) * 10) INT_MULT (ARG1 & 7) 10
(ARG1 & 7) INT_SEXT (ARG1 & 7)
0 INT_MULT 0 160
4589920 PTRSUB 0 4589920
(ARG1 & 7) INT_AND ARG1 7
((ARG1 & 7) * 10) INT_ADD ((ARG1 & 7) * 10) 0
(ARG1 & 7) CAST (ARG1 & 7)
0 INT_ZEXT 0
(((ARG1 & 7) * 10) + 4589920) PTRADD 4589920 ((ARG1 & 7) * 10) 1
0 INT_SEXT 0
0 INT_MULT 0 80
 RETURN 0 (((ARG1 & 7) * 10) + 4589920)
0 CAST 0
((ARG1 & 7) * 10) INT_ADD ((ARG1 & 7) * 10) 0
 RETURN 0 0
0 COPY 0
Symbol PTRSUB 0 Symbol
 RETURN 0 Symbol
0 INT_EQUAL ARG2 8
(ARG2 / 2147483647) SUBPIECE ARG2 0
f() CALL func (ARG2 / 2147483647) ARG3 ARG4 ARG3
ARG1 COPY ARG1
 CALL func ARG1
 CALL func ARG1 f() f() f()
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 48) INT_ADD ARG1 48
f() CALL func ARG4
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
0 INT_NOTEQUAL f() 0
 CBRANCH (ARG2 INT_EQUAL 8)
 RETURN 0 ARG1
f() CALL libcall_strlen_thunk f()
 STORE 433 (ARG1 + 48) ([(ARG1 + 48)] - f())
(ARG1 + 48) CAST (ARG1 + 48)
(ARG1 + 48) CAST (ARG1 + 48)
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
([(ARG1 + 48)] - f()) INT_SUB [(ARG1 + 48)] f()
(ARG2 / 2147483647) INT_SEXT (ARG2 / 2147483647)
 BRANCH VZERO
f() CAST f()
f() CAST f()
 RETURN 0 Symbol
Symbol PTRSUB 0 Symbol
 CALL func ARG1 f() f() f()
 CALL func ARG1
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 48) INT_ADD ARG1 48
ARG1 COPY ARG1
f() CAST f()
0 INT_NOTEQUAL f() 0
f() CALL func
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 RETURN 0 ARG1
f() CALL func
 CBRANCH (f() INT_NOTEQUAL 0)
 STORE 433 (ARG1 + 48) ([(ARG1 + 48)] - f())
(ARG1 + 48) CAST (ARG1 + 48)
(ARG1 + 48) CAST (ARG1 + 48)
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
([(ARG1 + 48)] - f()) INT_SUB [(ARG1 + 48)] f()
f() CALL libcall_strlen_thunk f()
 RETURN 0 Symbol
Symbol PTRSUB 0 Symbol
(ARG1 + 48) INT_ADD ARG1 48
ARG1 COPY ARG1
 CALL func ARG1 f() f() f()
 CALL func ARG1
(ARG1 + 48) INT_ADD ARG1 48
 RETURN 0 ARG1
f() CALL func
 CBRANCH (f() INT_NOTEQUAL 0)
f() CAST f()
0 INT_NOTEQUAL f() 0
f() CALL func
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
([(ARG1 + 48)] - f()) INT_SUB [(ARG1 + 48)] f()
f() CALL libcall_strlen_thunk f()
 STORE 433 (ARG1 + 48) ([(ARG1 + 48)] - f())
(ARG1 + 48) CAST (ARG1 + 48)
(ARG1 + 48) CAST (ARG1 + 48)
f() CALL libcall_isatty_thunk ARG1
 RETURN 0 (-256 & (0 # f()))
0 INT_NOTEQUAL f() 0
(0 # f()) PIECE 0 f()
(-256 & (0 # f())) INT_OR (-256 & (0 # f())) 0
0 INT_ZEXT 0
(-256 & (0 # f())) INT_AND (0 # f()) -256
(ARG1 + 36) INT_ADD ARG1 36
 CALL func [(ARG1 + 36)]
 RETURN 0
[(ARG1 + 36)] LOAD 433 (ARG1 + 36)
(ARG1 + 36) CAST (ARG1 + 36)
f() CALL libcall_setupterm_thunk 0 ARG1 (RSP + -52)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -48) PTRSUB RSP -48
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func 6882336
(RSP + -48) PTRSUB RSP -48
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CALL func (RSP + -48)
0 COPY 0
f() COPY f()
 CALL func (RSP + -48) f() f()
6882336 PTRSUB 0 6882336
(RSP + -52) PTRSUB RSP -52
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
0 INT_EQUAL f() 0
[(f() + 40)] LOAD 433 (f() + 40)
 CALL libcall_del_curterm_thunk f()
f() CALL libcall_tigetnum_thunk colors
0 COPY 0
colors COPY colors
0 INT_SLESS f() 1
f() CALL libcall_set_curterm_thunk 0
 BRANCH VZERO
 CBRANCH (f() INT_SLESS 1)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 RETURN 1
0 COPY 0
 BRANCH VZERO
1 COPY 1
f() CALL func ARG1
f() CALL func ARG1
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 RETURN 0 1
0 COPY 0
 RETURN 0 0
(ARG1 + 36) INT_ADD ARG1 36
(ARG1 + 36) CAST (ARG1 + 36)
 CALL func [(ARG1 + 36)]
[(ARG1 + 36)] LOAD 433 (ARG1 + 36)
 RETURN 0
 CBRANCH (VZERO INT_EQUAL 0)
f() CALL func (RSP + -56)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
0 INT_EQUAL VZERO 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -56)
f() CALL libcall___cxa_guard_acquire_thunk 6882120
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
6882120 PTRSUB 0 6882120
f() COPY f()
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
[(f() + 40)] LOAD 433 (f() + 40)
 RETURN 1
Symbol PTRSUB 0 Symbol
(f() + 40) INT_ADD f() 40
0 COPY 0
0 INT_NOTEQUAL 0 [(f() + 40)]
4583096 COPY 4583096
 CALL libcall___assert_fail_thunk 4583096 0 723 0
0 COPY 0
(f() + 40) CAST (f() + 40)
6882120 PTRSUB 0 6882120
 CALL libcall___cxa_atexit_thunk 4219516 6882144 6878568
6882144 PTRSUB 0 6882144
4582981 PTRSUB 0 4582981
 CALL libcall___cxa_guard_release_thunk 6882120
6878568 PTRSUB 0 6878568
 CALL func 6882144 A_Stack[-0x28]:8 A_Stack[-0x20]:8 (RSP + -56) 0
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40) 4582981
4219516 PTRSUB 0 4219516
6882144 PTRSUB 0 6882144
(RSP + -40) PTRSUB RSP -40
f() COPY f()
 RETURN 1
 RETURN 0 Symbol
 CALL libcall___stack_chk_fail_thunk
f() COPY f()
 CALL func ARG1 0
 STORE 433 ARG1 Symbol
Symbol CAST Symbol
 RETURN 0
Symbol PTRSUB 0 Symbol
 STORE 433 ARG1 Symbol
 CALL func ARG1
 CALL func ARG1
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0 Symbol
Symbol PTRSUB 0 Symbol
 CBRANCH (VZERO INT_EQUAL 0)
0 INT_EQUAL VZERO 0
f() COPY f()
6882136 PTRSUB 0 6882136
f() CALL libcall___cxa_guard_acquire_thunk 6882136
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
6882272 PTRSUB 0 6882272
6878568 PTRSUB 0 6878568
4223050 PTRSUB 0 4223050
 CALL libcall___cxa_atexit_thunk 4223050 6882272 6878568
6882272 PTRSUB 0 6882272
 CALL func 6882272
 CALL libcall___cxa_guard_release_thunk 6882136
6882136 PTRSUB 0 6882136
 STORE 433 ARG1 Symbol
 CALL func ARG1
 CALL func ARG1
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
(ARG1 + 40) INT_ADD ARG1 40
 CALL libcall_append_thunk [(ARG1 + 40)] ARG2
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
 RETURN 0
 CALL func ARG1 0
(ARG1 + 40) PTRADD ARG1 5 8
 STORE 433 ARG1 Symbol
 STORE 433 (ARG1 + 40) ARG2
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
(ARG1 + 40) INT_ADD ARG1 40
 CALL func ARG1
 CALL libcall_memcpy_thunk (ARG4 + f()) ARG2 ARG3
(ARG4 + f()) INT_ADD f() ARG4
(ARG1 + 40) CAST (ARG1 + 40)
f() CALL func [(ARG1 + 40)]
 RETURN 0
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG4 + f()) CAST (ARG4 + f())
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
f() CALL func ARG1
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
 CALL func ARG1 f() (f() - f()) f()
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH ((f() - f()) INT_LESS 64)
(ARG1 + 40) CAST (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
 CALL func [(ARG1 + 40)] (f() * 2) (f() * 2)
(f() * 2) INT_MULT f() 2
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
f() CALL func [(ARG1 + 40)]
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
f() CALL func [(ARG1 + 40)]
f() CALL func [(ARG1 + 40)]
(ARG1 + 40) CAST (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(f() - f()) INT_SUB f() f()
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
0 COPY 0
GetNumBytesInBuffer() == 0 && "Didn't flush before mutating vector" COPY GetNumBytesInBuffer() == 0 && "Didn't flush before mutating vector"
0 COPY 0
f() CALL func [(ARG1 + 40)]
(ARG1 + 40) CAST (ARG1 + 40)
 RETURN 0
 RETURN 1
f() CALL func [(ARG1 + 40)]
 CALL libcall___assert_fail_thunk GetNumBytesInBuffer() == 0 && "Didn't flush before mutating vector" 0 795 0
(f() - f()) CAST (f() - f())
f() CALL func [(ARG1 + 40)]
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(f() - f()) INT_SUB f() f()
(ARG1 + 40) CAST (ARG1 + 40)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
0 INT_LESS (f() - f()) 64
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1 (ARG2 + f()) (ARG2 + f())
0 INT_LESS f() ARG2
(ARG2 + f()) INT_ADD f() ARG2
 CBRANCH (f() INT_LESS ARG2)
 CALL libcall___assert_fail_thunk N <= this->capacity() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 686 0
0 COPY 0
N <= this->capacity() COPY N <= this->capacity()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
 RETURN 1
 RETURN 0
f() CALL func ARG1
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
 CALL func ARG1 f() (f() - f()) f()
0 INT_EQUAL f() ARG2
(ARG2 + ARG3) INT_ADD ARG2 ARG3
 CALL func [(ARG1 + 40)] ARG2 (ARG2 + ARG3) ARG2
(ARG3 + f()) INT_ADD ARG3 f()
 CBRANCH (f() INT_EQUAL ARG2)
f() CALL func [(ARG1 + 40)]
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
 CBRANCH (f() INT_NOTEQUAL 0)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
f() CALL func [(ARG1 + 40)]
f() CALL func [(ARG1 + 40)]
 RETURN 0
f() CALL func [(ARG1 + 40)]
 RETURN 1
 CALL libcall___assert_fail_thunk !GetNumBytesInBuffer() 0 809 0
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(f() - f()) INT_SUB f() f()
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
 CALL func [(ARG1 + 40)] (f() + 64) (f() + 64)
f() CALL func [(ARG1 + 40)]
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
0 COPY 0
!GetNumBytesInBuffer() COPY !GetNumBytesInBuffer()
(f() + 64) INT_ADD f() 64
0 COPY 0
f() CALL func [(ARG1 + 40)]
0 INT_NOTEQUAL f() 0
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
 CBRANCH (f() INT_LESS (ARG3 + f()))
(ARG1 + 40) CAST (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
0 INT_LESS f() (ARG3 + f())
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
f() CALL func [(ARG1 + 40)]
0 COPY 0
0 COPY 0
0 COPY 0
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
 RETURN 1
 CALL libcall___assert_fail_thunk 0 0 806 0
(ARG1 + 40) CAST (ARG1 + 40)
 BRANCH VZERO
 CALL func [(ARG1 + 40)] (ARG3 + f()) (ARG3 + f())
(ARG1 + 40) INT_ADD ARG1 40
 CALL func [(ARG1 + 40)]
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
 RETURN 0
(ARG1 + 40) CAST (ARG1 + 40)
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
 RETURN 0
 RETURN 0 0
0 COPY 0
 RETURN 0
 RETURN 0
VZERO COPY VZERO
 CALL func 1 65535
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
 RETURN 0 0
0 COPY 0
 CALLIND [([ARG1] + 40)] ARG1 ARG2 ARG1
[ARG1] LOAD 433 ARG1
([ARG1] + 40) INT_ADD [ARG1] 40
 RETURN 0
[([ARG1] + 40)] LOAD 433 ([ARG1] + 40)
([ARG1] + 40) CAST ([ARG1] + 40)
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 48) CAST (ARG1 + 48)
 RETURN 0 [(ARG1 + 48)]
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
[(ARG1 + 48)] COPY [(ARG1 + 48)]
 CALL libcall_size_thunk
 RETURN 0
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CALL libcall_snprintf_thunk [f()] ARG2 ARG3 [(ARG1 + 8)]
ARG3 INT_ZEXT ARG3
[f()] LOAD 433 f()
f() CALL func (ARG1 + 16)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
ARG3 CAST ARG3
f() CAST f()
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG5
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
[40] LOAD 433 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
ARG2 COPY ARG2
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 COPY ARG1
ARG3 COPY ARG3
0 INT_EQUAL f(ARG1 , RSP) 0
(RSP + -48) PTRSUB RSP -48
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
f(ARG1 , RSP) CALL func (RSP + -48) (ARG1 + 8) (ARG1 + 8)
f(ARG1 , RSP) CAST f(ARG1 , RSP)
 CBRANCH (f(ARG1 , RSP) INT_EQUAL 0)
((f(ARG1 , RSP) + -1) + [ARG1]) INT_ADD (f(ARG1 , RSP) + -1) [ARG1]
((f(ARG1 , RSP) + -1) + [ARG1]) CAST ((f(ARG1 , RSP) + -1) + [ARG1])
 RETURN 0 -1
(f(ARG1 , RSP) + -1) INT_ADD f(ARG1 , RSP) -1
[((f(ARG1 , RSP) + -1) + [ARG1])] LOAD 433 ((f(ARG1 , RSP) + -1) + [ARG1])
 CBRANCH ([((f(ARG1 , RSP) + -1) + [ARG1])] INT_NOTEQUAL ARG2)
-1 COPY -1
 RETURN 0 (f(ARG1 , RSP) + -1)
[ARG1] LOAD 433 ARG1
(f(ARG1 , RSP) + -1) COPY (f(ARG1 , RSP) + -1)
0 INT_NOTEQUAL [((f(ARG1 , RSP) + -1) + [ARG1])] ARG2
ARG2 INT_SEXT ARG2
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
ARG1 COPY ARG1
ARG2 COPY ARG2
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_EQUAL 2)
f() CALL func (RSP + -56)
0 INT_EQUAL f() 2
 CBRANCH f()
 CBRANCH f()
0 COPY 0
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
 CBRANCH (f() INT_EQUAL 0)
f() CALL func (RSP + -56)
0 COPY 0
f() INT_SEXT f()
f() CALL func f()
 CBRANCH (f() INT_EQUAL 0)
f() CALL func (RSP + -56) (f() + -1) (f() + -1)
0 INT_EQUAL f() 0
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(f() + -1) INT_ADD f() -1
0 COPY 0
f() INT_SEXT f()
f() CALL func f()
 CBRANCH (f() INT_EQUAL 0)
f() CALL func (RSP + -56) 0
(RSP + -56) PTRSUB RSP -56
0 INT_EQUAL f() 0
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 1)
(RSP + -56) PTRSUB RSP -56
0 COPY 0
f() CALL func f()
f() INT_SEXT f()
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func (RSP + -56) 0
0 INT_NOTEQUAL f() 0
 CBRANCH f()
0 COPY 0
(f() + -1) COPY (f() + -1)
(f() + -1) INT_ADD f() -1
(f() + -1) INT_ADD f() -1
(RSP + -56) PTRSUB RSP -56
 RETURN 0 0
 RETURN 0 (f() + -1)
 RETURN 0 f()
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -56)
f() CALL func (RSP + -56) 47 (f() + -1)
f() CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_EQUAL -1)
0 INT_EQUAL f() -1
1 COPY 1
 BRANCH VZERO
0 INT_EQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL f())
1 COPY 1
 BRANCH VZERO
f() CALL func (RSP + -56) 0
f() CALL func (RSP + -56) 1
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL f() f()
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -56)
0 INT_EQUAL f() 0
(RSP + -56) PTRSUB RSP -56
ARG2 COPY ARG2
ARG1 COPY ARG1
 CBRANCH (f() INT_EQUAL 2)
f() CALL func (RSP + -40)
0 INT_EQUAL f() 2
 CBRANCH f()
(RSP + -40) PTRSUB RSP -40
0 COPY 0
(RSP + -40) PTRSUB RSP -40
f() CALL func f()
f() INT_SEXT f()
f() CALL func (RSP + -40) 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_NOTEQUAL f() f()
(RSP + -40) PTRSUB RSP -40
f() CALL func (RSP + -40) 0
0 COPY 0
(RSP + -40) PTRSUB RSP -40
 CBRANCH (f() INT_NOTEQUAL f())
f() CALL func (RSP + -40) 1
 CBRANCH (f() INT_NOTEQUAL f())
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_LESS 4)
f() CALL func f()
f() INT_SEXT f()
f() CALL func (RSP + -40) 0
0 INT_EQUAL f() 0
(RSP + -40) PTRSUB RSP -40
f() CALL func (RSP + -40) 0
(RSP + -40) PTRSUB RSP -40
f() CALL func (RSP + -40) 1
0 INT_NOTEQUAL f() f()
(RSP + -40) PTRSUB RSP -40
0 INT_LESS f() 4
(RSP + -40) PTRSUB RSP -40
 RETURN 0 -1
-1 COPY -1
 RETURN 0 f()
f() COPY f()
f() CALL func (RSP + -40)
 RETURN 0 f()
 CBRANCH f()
 CBRANCH f()
 BRANCH VZERO
-1 COPY -1
0 COPY 0
 CBRANCH (f() INT_EQUAL 1)
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
f() INT_SEXT f()
f() CALL func f()
(RSP + -40) PTRSUB RSP -40
f() CALL func (RSP + -40) 0
0 INT_NOTEQUAL f() 0
(RSP + -40) PTRSUB RSP -40
f() CALL func (RSP + -40) 47 2
(RSP + -40) PTRSUB RSP -40
f() CALL func (RSP + -40)
0 INT_NOTEQUAL f() 0
(RSP + -40) PTRSUB RSP -40
f() CALL func f()
f() INT_SEXT f()
f() CALL func (RSP + -40) 2
0 INT_EQUAL f() 1
ARG1 COPY ARG1
f() CALL func ARG1 ARG2 ARG1
ARG2 COPY ARG2
 RETURN 0 f()
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -72)
f() CALL func (RSP + -72) 0 f()
 CBRANCH ~(f())
(RSP + -72) PTRSUB RSP -72
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 4611686014132420609) (f() / 2147483647)
 CBRANCH (f() INT_EQUAL 0)
(RSP + -72) PTRSUB RSP -72
0 INT_EQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_EQUAL 1)
~(f()) BOOL_NEGATE f()
(f() / 2147483647) INT_RIGHT f() 64
0 INT_EQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 0)
-1 COPY -1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
f() CALL func f()
f() INT_SEXT f()
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func (RSP + -72) f() f()
0 INT_NOTEQUAL f() 0
0 COPY 0
(RSP + -72) PTRSUB RSP -72
 CBRANCH ((f() + -1) INT_EQUAL f())
f() CALL func f()
(RSP + -72) PTRSUB RSP -72
f() INT_SEXT f()
f() CALL func (RSP + -72) (f() + -1) (f() + -1)
0 INT_EQUAL f() 0
(f() + -1) INT_ADD f() -1
 BRANCH VZERO
(f() + -1) INT_ADD f() -1
 BRANCH VZERO
1 COPY 1
0 INT_EQUAL f() 0
(f() + -1) INT_ADD f() -1
0 INT_EQUAL (f() + -1) f()
f() CALL func ARG1 (RSP + -200) (RSP + -200)
0 INT_NOTEQUAL ARG2 1
(RSP + -200) PTRSUB RSP -200
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(RSP + -232) PTRSUB RSP -232
(f() / 2147483647) SUBPIECE f() 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL f() 4294967295
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL libcall_mkdir_thunk f() 504
[(f() + 40)] LOAD 433 (f() + 40)
(f() / 2147483647) SUBPIECE f() 8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func (RSP + -232)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 0
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -200)
 CALL func (RSP + -200)
 CBRANCH (f() INT_EQUAL 4294967295)
f() CAST f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() # f()) INT_AND (f() # f()) -1
 RETURN 0 (f() # f())
 RETURN 1
(f() # f()) PIECE f() f()
 CBRANCH (ARG2 INT_NOTEQUAL 1)
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -216) [f()] f() [f()]
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -216)
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL libcall_generic_category_thunk
(RSP + -216) PTRSUB RSP -216
(f() / 2147483647) SUBPIECE f() 0
(RSP + -216) PTRSUB RSP -216
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
0 INT_NOTEQUAL [f()] 17
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH ([f()] INT_NOTEQUAL 17)
ARG1 CAST ARG1
f() CALL func ARG1
 STORE 433 ARG1 ARG2
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 17) INT_ADD ARG1 17
(ARG1 + 17) CAST (ARG1 + 17)
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
 STORE 433 (ARG1 + 16) 6
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG1 + 17) 1
 RETURN 0
 CALL libcall___assert_fail_thunk isValid() && "Invalid twine!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h 297 llvm::Twine::Twine(const llvm::SmallVectorImpl<char>&)
llvm::Twine::Twine(const llvm::SmallVectorImpl<char>&) COPY llvm::Twine::Twine(const llvm::SmallVectorImpl<char>&)
isValid() && "Invalid twine!" COPY isValid() && "Invalid twine!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h
 RETURN 1
 RETURN 0 Symbol
Symbol PTRSUB 0 Symbol
f() CALL func ARG1
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func f() f()
 RETURN 0
 STORE 433 (ARG1 + 8) [ARG1]
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f(RSP) INT_NOTEQUAL (RSP + -24))
0 INT_NOTEQUAL f(RSP) (RSP + -24)
TMPDIR COPY TMPDIR
Symbol PTRSUB 0 Symbol
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() [(f() + 40)]
Symbol PTRSUB 0 Symbol
TEMPDIR COPY TEMPDIR
(RSP + -24) PTRSUB RSP -24
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_NOTEQUAL 0)
(f(RSP) + 8) PTRADD f(RSP) 1 8
 BRANCH VZERO
0 INT_NOTEQUAL f() 0
0 COPY 0
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_getenv_thunk [f(RSP)]
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG2
 CALL func ARG2 f() (f() + f()) f()
 CALL func ARG2 f() (f() + f()) f()
0 INT_NOTEQUAL ARG1 0
f() CALL func ARG1
 CBRANCH (ARG1 INT_NOTEQUAL 0)
f() CALL libcall_strlen_thunk f()
0 INT_NOTEQUAL f() 0
 RETURN 0
(f() + f()) PTRADD f() f() 1
f() CALL func
 RETURN 0
f() CAST f()
 CBRANCH (f() INT_NOTEQUAL 0)
f() CAST f()
f() CALL libcall_strlen_thunk f()
(f() + f()) PTRADD f() f() 1
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 >> (63 & (ARG2 / 2147483647))) INT_RIGHT ARG1 (63 & (ARG2 / 2147483647))
(ARG1 << (64 - (63 & (ARG2 / 2147483647)))) INT_LEFT ARG1 (64 - (63 & (ARG2 / 2147483647)))
0 INT_NOTEQUAL ARG2 0
(ARG2 / 2147483647) SUBPIECE ARG2 0
 CBRANCH (ARG2 INT_NOTEQUAL 0)
 RETURN 0 f(ARG1 , ARG2)
 BRANCH VZERO
((ARG1 >> (63 & (ARG2 / 2147483647))) | (ARG1 << (64 - (63 & (ARG2 / 2147483647))))) INT_OR (ARG1 >> (63 & (ARG2 / 2147483647))) (ARG1 << (64 - (63 & (ARG2 / 2147483647))))
(63 & (ARG2 / 2147483647)) INT_AND (ARG2 / 2147483647) 63
(64 - (63 & (ARG2 / 2147483647))) INT_SUB 64 (63 & (ARG2 / 2147483647))
[ARG1] LOAD 433 ARG1
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[ARG1] COPY [ARG1]
[40] LOAD 433 40
40 INT_ADD 0 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 RETURN 0 [ARG1]
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 24) INT_ADD ARG1 24
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
 STORE 433 ARG2 ([ARG2] + f())
f(ARG2) LOAD 433 ARG2
f(ARG2) LOAD 433 ARG2
f(ARG2) LOAD 433 ARG2
f(ARG2) LOAD 433 ARG2
f(ARG2) LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
 STORE 433 ARG2 (f(ARG2) + f())
 STORE 433 ARG2 (f(ARG2) + (f() + f()))
 STORE 433 ARG3 f(ARG3)
 STORE 433 ARG3 ((f(ARG2) + f()) + f(ARG3))
[ARG3] LOAD 433 ARG3
f(ARG3) LOAD 433 ARG3
(f(ARG2) + (f() + f())) INT_ADD (f() + f()) f(ARG2)
([ARG2] + f()) INT_ADD f() [ARG2]
f() CALL func (ARG1 + 8)
f(ARG3) CALL func (([ARG3] + f(ARG2)) + f()) 21 ([ARG3] + f(ARG2))
(f() + f()) INT_ADD f() f()
 RETURN 0
(([ARG3] + f(ARG2)) + f()) INT_ADD f() ([ARG3] + f(ARG2))
f() CALL func f(ARG2) 44
f() CALL func (ARG1 + 24)
f() CALL func (ARG1 + 16)
((f(ARG2) + f()) + f(ARG3)) INT_ADD (f(ARG2) + f()) f(ARG3)
([ARG3] + f(ARG2)) INT_ADD [ARG3] f(ARG2)
(f(ARG2) + f()) INT_ADD f(ARG2) f()
(f(ARG2) + f()) INT_ADD f() f(ARG2)
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
 STORE 433 ARG1 [f(ARG2)]
 STORE 433 ARG2 [f(RSP)]
f(ARG2) CALL func ARG2
(FS_OFFSET + 40) INT_ADD 0 40
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG1) CAST f(ARG1)
40 CAST 40
[f(ARG1)] LOAD 433 f(ARG1)
[40] LOAD 433 40
f(ARG2) CAST f(ARG2)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
f(RSP) CAST f(RSP)
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f(RSP) CALL func (RSP + -24)
[f(RSP)] LOAD 433 f(RSP)
(RSP + -24) PTRSUB RSP -24
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
(ARG1 + 40) PTRADD ARG1 5 8
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) LOAD 433 ARG1
(ARG1 + 40) PTRADD ARG1 5 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 48) PTRADD ARG1 6 8
(ARG1 + 40) PTRADD ARG1 5 8
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 48) PTRADD ARG1 6 8
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 (f(ARG1) * -5435081209227447693)
(ARG1 + 48) PTRADD ARG1 6 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 24) PTRADD ARG1 3 8
 STORE 433 ARG1 0
(ARG1 + 24) PTRADD ARG1 3 8
 CALL func (ARG1 + 16) ARG1 (ARG1 + 16)
f(ARG1) LOAD 433 ARG1
(ARG1 + 40) PTRADD ARG1 5 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 24) PTRADD ARG1 3 8
[ARG1] LOAD 433 ARG1
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 48) PTRADD ARG1 6 8
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG2 + 8) INT_ADD ARG2 8
 CALL func ARG2 (ARG1 + 24) (ARG1 + 32) (ARG1 + 24)
(ARG2 + 40) INT_ADD ARG2 40
(ARG2 + 32) INT_ADD ARG2 32
(ARG2 + 16) INT_ADD ARG2 16
(ARG2 + 48) INT_ADD ARG2 48
f() CALL func (ARG2 + 8) ARG2 ([ARG1] + [(ARG1 + 8)])
f(ARG1) CALL func ((([ARG1] + [(ARG1 + 8)]) + [(ARG1 + 24)]) + f()) 37
(([(ARG1 + 8)] + [(ARG1 + 32)]) + f()) INT_ADD f() ([(ARG1 + 8)] + [(ARG1 + 32)])
f(ARG1) CALL func ([(ARG1 + 40)] + [(ARG1 + 16)]) 33 [(ARG1 + 16)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
((([ARG1] + [(ARG1 + 8)]) + [(ARG1 + 24)]) + f()) INT_ADD f() (([ARG1] + [(ARG1 + 8)]) + [(ARG1 + 24)])
 CALL func (ARG2 + 32) (ARG1 + 40) (ARG1 + 48) (ARG1 + 40)
([(ARG1 + 40)] + [(ARG1 + 16)]) INT_ADD [(ARG1 + 40)] [(ARG1 + 16)]
 STORE 433 (ARG1 + 40) ([(ARG1 + 16)] + [(ARG1 + 48)])
([(ARG1 + 16)] + [(ARG1 + 48)]) INT_ADD [(ARG1 + 16)] [(ARG1 + 48)]
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
f() CALL func (ARG2 + 48)
0 INT_XOR f(ARG1) [(ARG1 + 48)]
f() CALL func (ARG2 + 16)
 STORE 433 (ARG1 + 16) (f(ARG1) * -5435081209227447693)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() CALL func (ARG2 + 40)
 STORE 433 (ARG1 + 32) (f(ARG1) + [(ARG1 + 40)])
f(ARG1) CALL func (([(ARG1 + 8)] + [(ARG1 + 32)]) + f()) 42
(f(ARG1) + [(ARG1 + 40)]) INT_ADD f(ARG1) [(ARG1 + 40)]
 STORE 433 (ARG1 + 8) (([(ARG1 + 24)] + f()) + [(ARG1 + 8)])
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
 RETURN 0
(f(ARG1) * -5435081209227447693) INT_MULT f(ARG1) -5435081209227447693
(([(ARG1 + 24)] + f()) + [(ARG1 + 8)]) INT_ADD ([(ARG1 + 24)] + f()) [(ARG1 + 8)]
([ARG1] + [(ARG1 + 8)]) INT_ADD [ARG1] [(ARG1 + 8)]
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(f(ARG1) * -5435081209227447693) INT_MULT f(ARG1) -5435081209227447693
 STORE 433 (ARG1 + 48) ([(ARG1 + 8)] + f())
([(ARG1 + 8)] + f()) INT_ADD [(ARG1 + 8)] f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (ARG1 + 8) (f(ARG1) * -5435081209227447693)
(f(ARG1) * -5435081209227447693) INT_MULT f(ARG1) -5435081209227447693
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
([(ARG1 + 24)] + f()) INT_ADD [(ARG1 + 24)] f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 32)] * -5435081209227447693) INT_MULT [(ARG1 + 32)] -5435081209227447693
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
([(ARG1 + 8)] + [(ARG1 + 32)]) INT_ADD [(ARG1 + 8)] [(ARG1 + 32)]
 STORE 433 (ARG1 + 24) ([(ARG1 + 32)] * -5435081209227447693)
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
(([ARG1] + [(ARG1 + 8)]) + [(ARG1 + 24)]) INT_ADD ([ARG1] + [(ARG1 + 8)]) [(ARG1 + 24)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
0 INT_XOR ARG1 ARG2
0 INT_XOR ARG2 0
0 INT_MULT 0 -7070675565921424023
0 INT_MULT 0 -7070675565921424023
0 INT_XOR 0 0
0 INT_RIGHT 0 47
0 INT_RIGHT 0 47
 RETURN 0 0
0 COPY 0
0 INT_MULT 0 -7070675565921424023
0 INT_XOR 0 0
0 INT_XOR (ARG1 / 2147483647) ARG1
(ARG1 / 2147483647) INT_RIGHT ARG1 47
 RETURN 0 0
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 COPY ARG1
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 40) PTRADD ARG1 5 8
 CALL func ARG1 ARG2 ARG2
ARG1 COPY ARG1
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 40) PTRADD ARG1 5 8
(ARG1 + 48) PTRADD ARG1 6 8
f() CALL func ARG3 -5435081209227447693
 STORE 433 (ARG1 + 8) ARG3
f() CALL func ARG3
0 INT_XOR ARG3 -5435081209227447693
(ARG3 * -5435081209227447693) INT_MULT ARG3 -5435081209227447693
(f() + -1) INT_ADD f() -1
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 40
(f(ARG1) + 8) COPY (f(ARG1) + 8)
 STORE 433 (ARG1 + 16) f()
 BRANCH VZERO
f() CALL func [(ARG1 + 32)] [(ARG1 + 40)] [(ARG1 + 40)]
 STORE 433 (ARG1 + 24) f()
0 INT_NOTEQUAL f() 0
 STORE 433 f(ARG1) 0
 CBRANCH (f() INT_NOTEQUAL 0)
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func 0 49
7 COPY 7
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
 STORE 433 (ARG1 + 32) (ARG3 * -5435081209227447693)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 STORE 433 (ARG1 + 40) f()
40 INT_ADD 0 40
 STORE 433 (ARG1 + 48) f()
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 STORE 433 ARG1 (f(ARG1 , ARG4) + (8 - ARG4))
f(ARG1 , ARG4) LOAD 433 ARG1
f(ARG1 , ARG4) LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
0 INT_LESSEQUAL ((8 - ARG4) + [ARG1]) ARG2
(ARG3 + ARG4) INT_ADD ARG3 ARG4
(8 - ARG4) INT_SUB 8 ARG4
((8 - ARG4) + [ARG1]) INT_ADD (8 - ARG4) [ARG1]
 CBRANCH (((8 - ARG4) + [ARG1]) INT_LESSEQUAL ARG2)
0 COPY 0
 RETURN 0 0
[ARG1] CAST [ARG1]
f(ARG1 , ARG4) CAST f(ARG1 , ARG4)
(f(ARG1 , ARG4) + (8 - ARG4)) CAST (f(ARG1 , ARG4) + (8 - ARG4))
(f(ARG1 , ARG4) + (8 - ARG4)) INT_ADD f(ARG1 , ARG4) (8 - ARG4)
(ARG3 + ARG4) CAST (ARG3 + ARG4)
 CALL libcall_memcpy_thunk f(ARG1 , ARG4) (ARG3 + ARG4) (8 - ARG4)
ARG3 COPY ARG3
f() CALL func (RSP + -64) ARG4 (RSP + -80) 0
ARG4 COPY ARG4
ARG5 COPY ARG5
ARG1 COPY ARG1
ARG2 COPY ARG2
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -80) PTRSUB RSP -80
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(RSP + -64) PTRSUB RSP -64
 CBRANCH ([ARG2] INT_EQUAL 0)
 CALL func (RSP + -152) ARG1 [(ARG1 + 120)] ARG1
(ARG1 + 104) CAST (ARG1 + 104)
 BRANCH VZERO
 STORE 433 (ARG1 + 88) A_Stack[-0x80]:8
(ARG1 + 80) INT_ADD ARG1 80
ARG1 CAST ARG1
 CALL func (ARG1 + 64) ARG1 (ARG1 + 64)
(ARG1 + 96) CAST (ARG1 + 96)
(ARG1 + 112) INT_ADD ARG1 112
(ARG1 + 64) INT_ADD ARG1 64
ARG1 CAST ARG1
 STORE 433 ARG2 64
(ARG1 + 72) INT_ADD ARG1 72
 STORE 433 (ARG1 + 80) A_Stack[-0x88]:8
(ARG1 + 88) CAST (ARG1 + 88)
ARG1 CAST ARG1
(ARG1 + 104) INT_ADD ARG1 104
 STORE 433 (ARG1 + 112) A_Stack[-0x68]:8
(ARG1 + 120) INT_ADD ARG1 120
(ARG1 + 120) CAST (ARG1 + 120)
(RSP + -152) PTRSUB RSP -152
 STORE 433 (ARG1 + 72) A_Stack[-0x90]:8
(ARG1 + 80) CAST (ARG1 + 80)
ARG1 CAST ARG1
ARG1 CAST ARG1
(ARG1 + 64) INT_ADD ARG1 64
 STORE 433 (ARG1 + 104) A_Stack[-0x70]:8
(ARG1 + 96) INT_ADD ARG1 96
(f(ARG2) + 64) INT_ADD f(ARG2) 64
(ARG1 + 72) CAST (ARG1 + 72)
 STORE 433 ARG2 (f(ARG2) + 64)
ARG1 CAST ARG1
[(ARG1 + 120)] LOAD 433 (ARG1 + 120)
ARG1 CAST ARG1
 STORE 433 (ARG1 + 64) A_Stack[-0x98]:8
 STORE 433 (ARG1 + 96) A_Stack[-0x78]:8
(ARG1 + 88) INT_ADD ARG1 88
ARG1 CAST ARG1
(ARG1 + 112) CAST (ARG1 + 112)
(ARG1 + 64) CAST (ARG1 + 64)
ARG1 CAST ARG1
f(ARG2) LOAD 433 ARG2
f(ARG1 , ARG3) COPY f(ARG1 , ARG3)
(f() + 40) INT_ADD f() 40
(RSP + -64) PTRSUB RSP -64
0 INT_NOTEQUAL 0 [(f() + 40)]
[ARG2] LOAD 433 ARG2
f() CALL func (RSP + -64) f(ARG4) (RSP + -80) f(ARG3 , ARG4)
(RSP + -80) PTRSUB RSP -80
(f() + 40) CAST (f() + 40)
(RSP + -80) PTRSUB RSP -80
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 CALL libcall_memcpy_thunk ARG3 (RSP + -80) (ARG4 - ARG3)
[(f() + 40)] LOAD 433 (f() + 40)
ARG3 CAST ARG3
f(ARG1) COPY f(ARG1)
(ARG4 - ARG3) INT_SUB ARG4 ARG3
0 INT_EQUAL [ARG2] 0
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
ARG1 COPY ARG1
 RETURN 1
 RETURN 0 f(ARG1 , ARG3)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL libcall_abort_thunk
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
f(ARG1 , ARG4) LOAD 433 ARG1
 STORE 433 ARG1 (f(ARG1 , ARG4) + (4 - ARG4))
f(ARG1 , ARG4) LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
0 INT_LESSEQUAL ((4 - ARG4) + [ARG1]) ARG2
(ARG3 + ARG4) INT_ADD ARG3 ARG4
(4 - ARG4) INT_SUB 4 ARG4
[ARG1] CAST [ARG1]
 RETURN 0 0
((4 - ARG4) + [ARG1]) INT_ADD (4 - ARG4) [ARG1]
 CBRANCH (((4 - ARG4) + [ARG1]) INT_LESSEQUAL ARG2)
0 COPY 0
(ARG3 + ARG4) CAST (ARG3 + ARG4)
(f(ARG1 , ARG4) + (4 - ARG4)) INT_ADD f(ARG1 , ARG4) (4 - ARG4)
 CALL libcall_memcpy_thunk f(ARG1 , ARG4) (ARG3 + ARG4) (4 - ARG4)
(f(ARG1 , ARG4) + (4 - ARG4)) CAST (f(ARG1 , ARG4) + (4 - ARG4))
f(ARG1 , ARG4) CAST f(ARG1 , ARG4)
ARG3 COPY ARG3
ARG4 COPY ARG4
f() CALL func (RSP + -64) ARG4 (RSP + -76) 0
ARG5 COPY ARG5
ARG1 COPY ARG1
ARG2 COPY ARG2
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(RSP + -64) PTRSUB RSP -64
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -76) PTRSUB RSP -76
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
ARG1 COPY ARG1
f(ARG1 , ARG3) COPY f(ARG1 , ARG3)
(f() + 40) INT_ADD f() 40
(RSP + -64) PTRSUB RSP -64
0 INT_NOTEQUAL 0 [(f() + 40)]
[ARG2] LOAD 433 ARG2
f() CALL func (RSP + -64) f(ARG4) (RSP + -76) f(ARG3 , ARG4)
(RSP + -76) PTRSUB RSP -76
(f() + 40) CAST (f() + 40)
(RSP + -76) PTRSUB RSP -76
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 CALL libcall_memcpy_thunk ARG3 (RSP + -76) (ARG4 - ARG3)
[(f() + 40)] LOAD 433 (f() + 40)
ARG3 CAST ARG3
f(ARG1) COPY f(ARG1)
(ARG4 - ARG3) INT_SUB ARG4 ARG3
 CBRANCH ([ARG2] INT_EQUAL 0)
0 INT_EQUAL [ARG2] 0
 RETURN 1
 RETURN 0 f(ARG1 , ARG3)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL libcall_abort_thunk
(ARG1 + 112) CAST (ARG1 + 112)
ARG1 CAST ARG1
(ARG1 + 64) CAST (ARG1 + 64)
ARG1 CAST ARG1
f(ARG2) LOAD 433 ARG2
 CALL func (RSP + -152) ARG1 [(ARG1 + 120)] ARG1
(ARG1 + 104) CAST (ARG1 + 104)
(ARG1 + 80) INT_ADD ARG1 80
 BRANCH VZERO
 STORE 433 (ARG1 + 88) A_Stack[-0x80]:8
ARG1 CAST ARG1
 CALL func (ARG1 + 64) ARG1 (ARG1 + 64)
(ARG1 + 112) INT_ADD ARG1 112
(ARG1 + 96) CAST (ARG1 + 96)
(ARG1 + 64) INT_ADD ARG1 64
ARG1 CAST ARG1
 STORE 433 ARG2 64
 STORE 433 (ARG1 + 80) A_Stack[-0x88]:8
(ARG1 + 72) INT_ADD ARG1 72
(ARG1 + 88) CAST (ARG1 + 88)
ARG1 CAST ARG1
 STORE 433 (ARG1 + 112) A_Stack[-0x68]:8
(ARG1 + 104) INT_ADD ARG1 104
(ARG1 + 120) INT_ADD ARG1 120
(ARG1 + 120) CAST (ARG1 + 120)
(RSP + -152) PTRSUB RSP -152
(ARG1 + 80) CAST (ARG1 + 80)
 STORE 433 (ARG1 + 72) A_Stack[-0x90]:8
ARG1 CAST ARG1
ARG1 CAST ARG1
(ARG1 + 64) INT_ADD ARG1 64
 STORE 433 (ARG1 + 104) A_Stack[-0x70]:8
(ARG1 + 96) INT_ADD ARG1 96
(f(ARG2) + 64) INT_ADD f(ARG2) 64
(ARG1 + 72) CAST (ARG1 + 72)
 STORE 433 ARG2 (f(ARG2) + 64)
ARG1 CAST ARG1
[(ARG1 + 120)] LOAD 433 (ARG1 + 120)
ARG1 CAST ARG1
 STORE 433 (ARG1 + 64) A_Stack[-0x98]:8
 STORE 433 (ARG1 + 96) A_Stack[-0x78]:8
(ARG1 + 88) INT_ADD ARG1 88
 STORE 433 ARG1 ARG2
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + (ARG2 + -16)) INT_ADD ARG1 (ARG2 + -16)
(ARG1 + (ARG2 + -24)) INT_ADD ARG1 (ARG2 + -24)
(ARG1 + (ARG2 + -16)) INT_ADD ARG1 (ARG2 + -16)
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + (ARG2 + -8)) INT_ADD ARG1 (ARG2 + -8)
(ARG1 + (ARG2 + -32)) INT_ADD ARG1 (ARG2 + -32)
f() CALL func ARG1
(ARG1 + 24) INT_ADD ARG1 24
(ARG2 + f()) INT_ADD f() ARG2
(ARG2 + -16) INT_ADD ARG2 -16
(ARG2 + -16) INT_ADD ARG2 -16
(ARG2 + -24) INT_ADD ARG2 -24
(ARG2 + -32) INT_ADD ARG2 -32
(ARG2 + -8) INT_ADD ARG2 -8
0 INT_XOR (f() * -4348849565147123417) ARG3
f() CALL func (((ARG2 + f()) * -4348849565147123417) + f()) 37
(f() + f()) INT_ADD f() f()
(f() + f()) INT_ADD f() f()
f() CALL func (ARG1 + (ARG2 + -16))
(f() + f()) INT_ADD f() f()
(f() + f()) INT_ADD f() f()
f() CALL func (f() + f()) 37
(f() + f()) INT_ADD f() f()
(((((ARG2 + f()) * -4348849565147123417) + f()) + f()) + f()) INT_ADD ((((ARG2 + f()) * -4348849565147123417) + f()) + f()) f()
f() CALL func (ARG1 + (ARG2 + -24))
f() CALL func (ARG1 + (ARG2 + -8))
 RETURN 0 (f() * -7286425919675154353)
((f() + f()) + (f() + f())) INT_ADD (f() + f()) (f() + f())
(f() * -7286425919675154353) INT_MULT f() -7286425919675154353
f() CALL func (ARG1 + (ARG2 + -16))
((f() + f()) + (f() + f())) INT_ADD (f() + f()) (f() + f())
f() CALL func (ARG1 + 16)
f() CALL func f(ARG2)
((((f() + f()) + (f() + f())) + ((((f() + f()) + f()) + f()) + f())) * -4348849565147123417) INT_MULT (((f() + f()) + (f() + f())) + ((((f() + f()) + f()) + f()) + f())) -4348849565147123417
f(ARG2) INT_ADD ((((f() + f()) + (f() + f())) + ((((f() + f()) + f()) + f()) + f())) * -4348849565147123417) f(ARG2)
((((((ARG2 + f()) * -4348849565147123417) + f()) + f()) + f()) + f()) INT_ADD f() (((((ARG2 + f()) * -4348849565147123417) + f()) + f()) + f())
((f() + f()) + f()) INT_ADD f() (f() + f())
((((ARG2 + f()) * -4348849565147123417) + f()) + f()) INT_ADD (((ARG2 + f()) * -4348849565147123417) + f()) f()
((f() + f()) + f()) INT_ADD (f() + f()) f()
((ARG2 + f()) * -4348849565147123417) INT_MULT (ARG2 + f()) -4348849565147123417
(((ARG2 + f()) * -4348849565147123417) + f()) INT_ADD ((ARG2 + f()) * -4348849565147123417) f()
f(ARG2) INT_ADD ((((((ARG2 + f()) * -4348849565147123417) + f()) + f()) + f()) + f()) ((f() + f()) + (f() + f()))
f() CALL func (ARG1 + 24)
f() CALL func (ARG1 + 16)
f() CALL func (ARG1 + 8)
(((f() + f()) + f()) + f()) INT_ADD ((f() + f()) + f()) f()
(((f() + f()) + (f() + f())) + ((((f() + f()) + f()) + f()) + f())) INT_ADD ((((f() + f()) + f()) + f()) + f()) ((f() + f()) + (f() + f()))
f() CALL func ((f() + f()) + (f() + f()))
f() CALL func ((((ARG2 + f()) * -4348849565147123417) + f()) + f()) 52 (((ARG2 + f()) * -4348849565147123417) + f())
f() CALL func (((f() + f()) + f()) + f()) 31
((f() + f()) + (f() + f())) INT_ADD ((f() + f()) + (f() + f())) 0
f() CALL func (((((ARG2 + f()) * -4348849565147123417) + f()) + f()) + f()) 31
f() CALL func (ARG1 + (ARG2 + -32))
f(ARG2) INT_MULT f(ARG2) -7286425919675154353
f() CALL func ((((ARG2 + f()) * -4348849565147123417) + f()) + f()) 7
((((ARG2 + f()) * -4348849565147123417) + f()) + f()) INT_ADD f() (((ARG2 + f()) * -4348849565147123417) + f())
f() CALL func ((f() + f()) + f()) 7
f() CALL func ((f() + f()) + f()) 52 (f() + f())
((((f() + f()) + f()) + f()) + f()) INT_ADD f() (((f() + f()) + f()) + f())
(f() * -4348849565147123417) INT_MULT f() -4348849565147123417
(ARG1 + (ARG2 + -1)) PTRADD ARG1 (ARG2 + -1) 1
[ARG1] LOAD 433 ARG1
(ARG1 + (ARG2 / 2)) PTRADD ARG1 (ARG2 / 2) 1
f() CALL func 0 ARG2 (([ARG1] + ([(ARG1 + (ARG2 / 2))] * 256)) * -7286425919675154353) ((ARG2 / 2147483647) + ([(ARG1 + (ARG2 + -1))] * 4))
(ARG2 / 2) INT_RIGHT ARG2 1
(ARG2 + -1) INT_SUB ARG2 -1
(ARG2 / 2147483647) SUBPIECE ARG2 0
0 INT_XOR 0 ARG3
((ARG2 / 2147483647) + ([(ARG1 + (ARG2 + -1))] * 4)) INT_ADD (ARG2 / 2147483647) ([(ARG1 + (ARG2 + -1))] * 4)
([ARG1] + ([(ARG1 + (ARG2 / 2))] * 256)) INT_ZEXT ([ARG1] + ([(ARG1 + (ARG2 / 2))] * 256))
[(ARG1 + (ARG2 + -1))] LOAD 433 (ARG1 + (ARG2 + -1))
([(ARG1 + (ARG2 + -1))] * 4) INT_MULT [(ARG1 + (ARG2 + -1))] 4
((ARG2 / 2147483647) + ([(ARG1 + (ARG2 + -1))] * 4)) INT_ZEXT ((ARG2 / 2147483647) + ([(ARG1 + (ARG2 + -1))] * 4))
([ARG1] + ([(ARG1 + (ARG2 / 2))] * 256)) INT_ADD [ARG1] ([(ARG1 + (ARG2 / 2))] * 256)
0 INT_XOR (((ARG2 / 2147483647) + ([(ARG1 + (ARG2 + -1))] * 4)) * -3942382747735136937) (([ARG1] + ([(ARG1 + (ARG2 / 2))] * 256)) * -7286425919675154353)
(([ARG1] + ([(ARG1 + (ARG2 / 2))] * 256)) * -7286425919675154353) INT_MULT ([ARG1] + ([(ARG1 + (ARG2 / 2))] * 256)) -7286425919675154353
(f() * -7286425919675154353) INT_MULT f() -7286425919675154353
(((ARG2 / 2147483647) + ([(ARG1 + (ARG2 + -1))] * 4)) * -3942382747735136937) INT_MULT ((ARG2 / 2147483647) + ([(ARG1 + (ARG2 + -1))] * 4)) -3942382747735136937
[(ARG1 + (ARG2 / 2))] LOAD 433 (ARG1 + (ARG2 / 2))
[ARG1] INT_ZEXT [ARG1]
([(ARG1 + (ARG2 / 2))] * 256) INT_MULT [(ARG1 + (ARG2 / 2))] 256
 RETURN 0 (f() * -7286425919675154353)
[(ARG1 + (ARG2 + -1))] INT_ZEXT [(ARG1 + (ARG2 + -1))]
[(ARG1 + (ARG2 / 2))] INT_ZEXT [(ARG1 + (ARG2 / 2))]
(ARG1 + (ARG2 + -8)) INT_ADD ARG1 (ARG2 + -8)
f() CALL func ARG1
(ARG2 + -8) INT_ADD ARG2 -8
f(ARG2) CALL func (ARG2 + f()) ARG2 (ARG2 + f())
(ARG2 + f()) INT_ADD f() ARG2
0 INT_XOR ARG3 f()
f() CALL func 0 f(ARG2) f(ARG2)
f() CALL func (ARG1 + (ARG2 + -8))
 RETURN 0 0
0 INT_XOR f() f()
((ARG2 + ((f() * 7286425919675154353) + ((f() * -5435081209227447693) + f()))) + ARG3) INT_ADD (ARG2 + ((f() * 7286425919675154353) + ((f() * -5435081209227447693) + f()))) ARG3
0 INT_XOR (f() * -7286425919675154353) ARG3
(ARG1 + (ARG2 + -8)) INT_ADD ARG1 (ARG2 + -8)
(ARG1 + (ARG2 + -16)) INT_ADD ARG1 (ARG2 + -16)
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
(ARG2 + ((f() * 7286425919675154353) + ((f() * -5435081209227447693) + f()))) INT_ADD ((f() * 7286425919675154353) + ((f() * -5435081209227447693) + f())) ARG2
(ARG2 + -8) INT_ADD ARG2 -8
(ARG2 + -16) INT_ADD ARG2 -16
(f() + f()) INT_ADD f() f()
f() CALL func ((f() * -5435081209227447693) - f()) 43 (ARG2 + ((f() * 7286425919675154353) + ((f() * -5435081209227447693) + f())))
f() CALL func (ARG1 + (ARG2 + -16))
f() CALL func (ARG1 + 8)
((f() * 7286425919675154353) + ((f() * -5435081209227447693) + f())) INT_ADD ((f() * -5435081209227447693) + f()) (f() * 7286425919675154353)
 RETURN 0
((f() * -5435081209227447693) - f()) INT_SUB (f() * -5435081209227447693) f()
f() CALL func (ARG1 + (ARG2 + -8))
f() CALL func 0 30
(f() * -4348849565147123417) INT_MULT f() -4348849565147123417
(f() * -5435081209227447693) INT_MULT f() -5435081209227447693
(f() * 7286425919675154353) INT_MULT f() 7286425919675154353
((f() * -5435081209227447693) + f()) INT_ADD (f() * -5435081209227447693) f()
(f() * -7286425919675154353) INT_MULT f() -7286425919675154353
 CALL func ((f() + f()) + (f() * -4348849565147123417)) ((ARG2 + ((f() * 7286425919675154353) + ((f() * -5435081209227447693) + f()))) + ARG3) (f() + f())
((f() + f()) + (f() * -4348849565147123417)) INT_ADD (f() * -4348849565147123417) (f() + f())
f() CALL func 0 20
0 INT_XOR f() -3942382747735136937
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 [ARG1]
(ARG1 + (ARG2 + -4)) INT_ADD ARG1 (ARG2 + -4)
f() CALL func ARG1
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
(ARG2 + -4) INT_ADD ARG2 -4
0 INT_XOR f() ARG3
 RETURN 0
f() CALL func (ARG1 + (ARG2 + -4))
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
 CALL func (ARG2 + (f() * 8)) 0 (ARG2 + (f() * 8)) (f() * 8)
f() CALL func ARG1 ARG2 ARG3 ARG2
f() CALL func ARG1 ARG2 ARG3 ARG2
f() CALL func ARG1 ARG2 ARG3 ARG2
f() CALL func ARG1 ARG2 ARG3 ARG2
f() CALL func ARG1 ARG2 ARG3 ARG2
0 INT_LESS 32 ARG2
0 INT_LESS ARG2 33
0 INT_LESS ARG2 4
0 INT_LESS ARG2 9
0 INT_EQUAL ARG2 0
0 INT_LESS 8 ARG2
0 INT_LESS ARG2 17
0 INT_LESS 16 ARG2
0 INT_XOR ARG3 -7286425919675154353
 CBRANCH (ARG2 INT_LESS 4)
 RETURN 0 f()
 CBRANCH (8 INT_LESS ARG2)
 BRANCH VZERO
 CBRANCH (ARG2 INT_LESS 9)
 CBRANCH (ARG2 INT_EQUAL 0)
 BRANCH VZERO
 CBRANCH (16 INT_LESS ARG2)
 CBRANCH (ARG2 INT_LESS 17)
 BRANCH VZERO
 CBRANCH (32 INT_LESS ARG2)
 CBRANCH (ARG2 INT_LESS 33)
 BRANCH VZERO
 BRANCH VZERO
f() CALL func ARG2
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 48) PTRADD ARG1 6 8
(ARG1 + 40) PTRADD ARG1 5 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 32) PTRADD ARG1 4 8
[ARG1] LOAD 433 ARG1
(ARG1 + 24) PTRADD ARG1 3 8
f() CALL func [(ARG1 + 24)] [(ARG1 + 40)] [(ARG1 + 40)]
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
 CALL func ([(ARG1 + 16)] + ((f() * -5435081209227447693) + f())) ([ARG1] + ((f() * -5435081209227447693) + f())) ((f() * -5435081209227447693) + f())
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
([(ARG1 + 16)] + ((f() * -5435081209227447693) + f())) INT_ADD [(ARG1 + 16)] ((f() * -5435081209227447693) + f())
([ARG1] + ((f() * -5435081209227447693) + f())) INT_ADD ((f() * -5435081209227447693) + f()) [ARG1]
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
f() CALL func [(ARG1 + 8)]
(f() * -5435081209227447693) INT_MULT f() -5435081209227447693
(f() * -5435081209227447693) INT_MULT f() -5435081209227447693
((f() * -5435081209227447693) + f()) INT_ADD f() (f() * -5435081209227447693)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0
((f() * -5435081209227447693) + f()) INT_ADD f() (f() * -5435081209227447693)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
f() CALL func [(ARG1 + 32)] [(ARG1 + 48)] [(ARG1 + 48)]
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
 STORE 433 ARG1 [f(ARG2)]
 STORE 433 ARG2 [f(RSP)]
f(ARG2) CALL func ARG2
f(ARG2) CAST f(ARG2)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
f(RSP) CAST f(RSP)
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f(RSP) CALL func (RSP + -24)
(RSP + -24) PTRSUB RSP -24
[f(RSP)] LOAD 433 f(RSP)
(FS_OFFSET + 40) INT_ADD 0 40
[f(ARG2)] LOAD 433 f(ARG2)
[f(ARG1)] LOAD 433 f(ARG1)
f(ARG1) CAST f(ARG1)
40 CAST 40
[40] LOAD 433 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 [f(ARG2)]
f(ARG1) CALL func ARG1
 STORE 433 ARG2 [f(RSP)]
f(ARG2) CALL func ARG2
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
f(ARG1) CAST f(ARG1)
(RSP + -17) PTRSUB RSP -17
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
f(ARG2) CAST f(ARG2)
[f(RSP)] LOAD 433 f(RSP)
[f(ARG1)] LOAD 433 f(ARG1)
f(RSP) CALL func (RSP + -17)
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
[f(ARG2)] LOAD 433 f(ARG2)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f(RSP) CAST f(RSP)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 ARG2 ARG2
 RETURN 0
ARG1 COPY ARG1
0 INT_NOTEQUAL f(ARG1) ARG2
ARG3 COPY ARG3
 RETURN 0 f(ARG3)
 CBRANCH (f(ARG1) INT_NOTEQUAL ARG2)
f(ARG3) COPY f(ARG3)
(f(ARG1) + 1) INT_ADD f(ARG1) 1
 BRANCH VZERO
 CALL func f(ARG1) f(ARG3) f(ARG3)
(f(ARG3) + 1) INT_ADD f(ARG3) 1
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL libcall_memmove_thunk ARG3 ARG1 (ARG2 - ARG1)
ARG1 CAST ARG1
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG3 CAST ARG3
(ARG3 + (ARG2 - ARG1)) INT_ADD ARG3 (ARG2 - ARG1)
 CBRANCH ((ARG2 - ARG1) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (ARG2 - ARG1) 0
 RETURN 0 (ARG3 + (ARG2 - ARG1))
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 RETURN 0
 CALL func f() f() f()
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
ARG1 CAST ARG1
 CALL libcall_memmove_thunk (ARG3 - (ARG2 - ARG1)) ARG1 (ARG2 - ARG1)
(ARG2 - ARG1) INT_SUB ARG2 ARG1
(ARG3 - (ARG2 - ARG1)) INT_SUB ARG3 (ARG2 - ARG1)
(ARG3 - (ARG2 - ARG1)) INT_SUB ARG3 (ARG2 - ARG1)
 CBRANCH ((ARG2 - ARG1) INT_NOTEQUAL 0)
 RETURN 0 (ARG3 - (ARG2 - ARG1))
0 INT_NOTEQUAL (ARG2 - ARG1) 0
(ARG3 - (ARG2 - ARG1)) CAST (ARG3 - (ARG2 - ARG1))
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 RETURN 0
 CALL func f() f() f()
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
ARG1 CAST ARG1
 CALL func ARG1 ARG2 ARG2 ARG2
ARG1 CAST ARG1
ARG1 COPY ARG1
ARG1 COPY ARG1
(ARG1 + (ARG3 + (~(ARG2) + 1))) PTRADD ARG1 (ARG3 + (~(ARG2) + 1)) 1
0 INT_NOTEQUAL ARG1 ARG2
0 INT_NOTEQUAL ARG3 ARG2
ARG2 CAST ARG2
ARG2 COPY ARG2
(ARG2 + (~(ARG1) + 1)) PTRADD ARG2 (~(ARG1) + 1) 1
(ARG3 + (~(ARG1) + 1)) PTRADD ARG3 (~(ARG1) + 1) 1
(ARG3 + (~(ARG2) + 1)) PTRADD ARG3 (~(ARG2) + 1) 1
ARG3 COPY ARG3
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
 CBRANCH (ARG1 INT_NOTEQUAL ARG2)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
 CBRANCH ((f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1)) INT_EQUAL 1)
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
(~((f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1))) + 1) INT_2COMP (f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1))
f(ARG1 , ARG2 , ARG3) PTRADD (f(ARG1 , ARG2 , ARG3) + f(ARG1 , ARG2 , ARG3)) (~((f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1))) + 1) 1
(RSP + -97) PTRSUB RSP -97
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
(f(ARG1 , ARG2 , ARG3) % f(ARG1 , ARG2 , ARG3)) CAST (f(ARG1 , ARG2 , ARG3) % f(ARG1 , ARG2 , ARG3))
 BRANCH VZERO
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
 CBRANCH ((f(ARG1 , ARG2 , ARG3) % f(ARG1 , ARG2 , ARG3)) INT_EQUAL 0)
0 INT_EQUAL (f(ARG1 , ARG2 , ARG3) % f(ARG1 , ARG2 , ARG3)) 0
(f(ARG1 , ARG2 , ARG3) % f(ARG1 , ARG2 , ARG3)) INT_SREM f(ARG1 , ARG2 , ARG3) f(ARG1 , ARG2 , ARG3)
(f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1)) PTRADD f(ARG1 , ARG2 , ARG3) (~(f(ARG1 , ARG2 , ARG3)) + 1) 1
f(RSP) CAST f(RSP)
 STORE 433 f(ARG1 , ARG2 , ARG3) [f(RSP)]
(f(ARG1 , ARG2 , ARG3) + (f(ARG1 , ARG2 , ARG3) + -1)) PTRADD f(ARG1 , ARG2 , ARG3) (f(ARG1 , ARG2 , ARG3) + -1) 1
f(ARG1 , ARG2 , ARG3) CALL func (f(ARG1 , ARG2 , ARG3) + (f(ARG1 , ARG2 , ARG3) + -1))
[f(ARG1 , ARG3)] LOAD 433 f(ARG1 , ARG2 , ARG3)
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
f(ARG1 , ARG2 , ARG3) COPY f(ARG1 , ARG2 , ARG3)
(f(ARG1 , ARG2 , ARG3) + -1) CAST (f(ARG1 , ARG2 , ARG3) + -1)
f(ARG1 , ARG2 , ARG3) COPY f(ARG1 , ARG2 , ARG3)
f(ARG1 , ARG2 , ARG3) COPY f(ARG1 , ARG2 , ARG3)
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -97)
(f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1)) CAST (f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1))
(f(ARG1 , ARG2 , ARG3) + -1) PTRADD f(ARG1 , ARG2 , ARG3) -1 1
f(ARG1 , ARG2 , ARG3) COPY f(ARG1 , ARG2 , ARG3)
0 INT_SLESS f() (f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1))
(f(ARG1 , ARG2 , ARG3) + (f(ARG1 , ARG2 , ARG3) + -1)) PTRADD f(ARG1 , ARG2 , ARG3) (f(ARG1 , ARG2 , ARG3) + -1) 1
(f(ARG1 , ARG2 , ARG3) + -1) CAST (f(ARG1 , ARG2 , ARG3) + -1)
0 COPY 0
 CBRANCH (f() INT_SLESS (f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1)))
(f(ARG1 , ARG2 , ARG3) + f(ARG1 , ARG2 , ARG3)) PTRADD f(ARG1 , ARG2 , ARG3) f(ARG1 , ARG2 , ARG3) 1
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
(f(ARG1 , ARG2 , ARG3) + f(ARG1 , ARG2 , ARG3)) PTRADD f(ARG1 , ARG2 , ARG3) f(ARG1 , ARG2 , ARG3) 1
 CALL func f(ARG1 , ARG2 , ARG3) (f(ARG1 , ARG2 , ARG3) + (f(ARG1 , ARG2 , ARG3) + -1)) (f(ARG1 , ARG2 , ARG3) + f(ARG1 , ARG2 , ARG3)) (f(ARG1 , ARG2 , ARG3) + (f(ARG1 , ARG2 , ARG3) + -1))
(f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1)) CAST (f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1))
(~(f(ARG1 , ARG2 , ARG3)) + 1) INT_2COMP f(ARG1 , ARG2 , ARG3)
(f(ARG1 , ARG2 , ARG3) + -1) PTRADD f(ARG1 , ARG2 , ARG3) -1 1
 CBRANCH (((ARG3 + (~(ARG1) + 1)) + (~((ARG2 + (~(ARG1) + 1))) + 1)) INT_EQUAL (ARG2 + (~(ARG1) + 1)))
(ARG3 + (~(ARG2) + 1)) CAST (ARG3 + (~(ARG2) + 1))
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
(f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1)) CAST (f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1))
(~(ARG2) + 1) INT_2COMP ARG2
0 INT_SLESS f(ARG1 , ARG2 , ARG3) (f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1))
(~(f(ARG1 , ARG2 , ARG3)) + 1) INT_2COMP f(ARG1 , ARG2 , ARG3)
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
 BRANCH VZERO
 CBRANCH (f(ARG1 , ARG2 , ARG3) INT_SLESS (f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1)))
(f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1)) PTRADD f(ARG1 , ARG2 , ARG3) (~(f(ARG1 , ARG2 , ARG3)) + 1) 1
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(ARG1 , ARG2 , ARG3)
 CBRANCH (f(ARG1 , ARG2 , ARG3) INT_EQUAL 1)
(f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1)) CAST (f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1))
f(RSP) CAST f(RSP)
(~(f(ARG1 , ARG2 , ARG3)) + 1) INT_2COMP f(ARG1 , ARG2 , ARG3)
f(ARG1 , ARG2 , ARG3) COPY f(ARG1 , ARG2 , ARG3)
(f(ARG1 , ARG2 , ARG3) + f(ARG1 , ARG2 , ARG3)) PTRADD f(ARG1 , ARG2 , ARG3) f(ARG1 , ARG2 , ARG3) 1
(f(ARG1 , ARG2 , ARG3) + f(ARG1 , ARG2 , ARG3)) PTRADD f(ARG1 , ARG2 , ARG3) f(ARG1 , ARG2 , ARG3) 1
(f(ARG1 , ARG2 , ARG3) + (f(ARG1 , ARG2 , ARG3) + -1)) PTRADD f(ARG1 , ARG2 , ARG3) (f(ARG1 , ARG2 , ARG3) + -1) 1
f(ARG1 , ARG2 , ARG3) COPY f(ARG1 , ARG2 , ARG3)
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
(f(ARG1 , ARG2 , ARG3) + -1) CAST (f(ARG1 , ARG2 , ARG3) + -1)
(f(ARG1 , ARG2 , ARG3) % f(ARG1 , ARG2 , ARG3)) CAST (f(ARG1 , ARG2 , ARG3) % f(ARG1 , ARG2 , ARG3))
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
 CBRANCH ((f(ARG1 , ARG2 , ARG3) % f(ARG1 , ARG2 , ARG3)) INT_EQUAL 0)
f(ARG1 , ARG2 , ARG3) COPY f(ARG1 , ARG2 , ARG3)
f(ARG1 , ARG2 , ARG3) COPY f(ARG1 , ARG2 , ARG3)
0 INT_EQUAL (f(ARG1 , ARG2 , ARG3) % f(ARG1 , ARG2 , ARG3)) 0
(f(ARG1 , ARG2 , ARG3) % f(ARG1 , ARG2 , ARG3)) INT_SREM f(ARG1 , ARG2 , ARG3) f(ARG1 , ARG2 , ARG3)
(f(ARG1 , ARG2 , ARG3) + -1) PTRADD f(ARG1 , ARG2 , ARG3) -1 1
(f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1)) PTRADD f(ARG1 , ARG2 , ARG3) (~(f(ARG1 , ARG2 , ARG3)) + 1) 1
 CALL func (f(ARG1 , ARG2 , ARG3) + 1) (f(ARG1 , ARG2 , ARG3) + f(ARG1 , ARG2 , ARG3)) f(ARG1 , ARG2 , ARG3) (f(ARG1 , ARG2 , ARG3) + 1)
 BRANCH VZERO
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
[f(ARG1)] LOAD 433 f(ARG1 , ARG2 , ARG3)
(RSP + -97) PTRSUB RSP -97
 STORE 433 (f(ARG1 , ARG2 , ARG3) + (f(ARG1 , ARG2 , ARG3) + -1)) [f(RSP)]
f(ARG1 , ARG2 , ARG3) CALL func f(ARG1 , ARG2 , ARG3)
0 INT_SLESS f() (f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1))
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -97)
0 COPY 0
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
 CBRANCH (f() INT_SLESS (f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1)))
(f(ARG1 , ARG2 , ARG3) + 1) PTRADD f(ARG1 , ARG2 , ARG3) 1 1
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
(f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1)) PTRADD f(ARG1 , ARG2 , ARG3) (~(f(ARG1 , ARG2 , ARG3)) + 1) 1
((f(ARG1 , ARG2 , ARG3) % f(ARG1 , ARG2 , ARG3)) + (~(f(ARG1 , ARG2 , ARG3)) + 1)) PTRADD (f(ARG1 , ARG2 , ARG3) % f(ARG1 , ARG2 , ARG3)) (~(f(ARG1 , ARG2 , ARG3)) + 1) 1
0 INT_EQUAL (f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1)) 1
0 INT_EQUAL ((ARG3 + (~(ARG1) + 1)) + (~((ARG2 + (~(ARG1) + 1))) + 1)) (ARG2 + (~(ARG1) + 1))
((ARG3 + (~(ARG1) + 1)) + (~((ARG2 + (~(ARG1) + 1))) + 1)) PTRADD (ARG3 + (~(ARG1) + 1)) (~((ARG2 + (~(ARG1) + 1))) + 1) 1
(~(ARG1) + 1) INT_2COMP ARG1
(~((ARG2 + (~(ARG1) + 1))) + 1) INT_2COMP (ARG2 + (~(ARG1) + 1))
(ARG2 + (~(ARG1) + 1)) CAST (ARG2 + (~(ARG1) + 1))
(RSP + -96) PTRSUB RSP -96
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
 CALL func f(ARG1 , ARG2 , ARG3) f(ARG1 , ARG2 , ARG3) f(ARG1 , ARG2 , ARG3)
(f(ARG1 , ARG2 , ARG3) + 1) PTRADD f(ARG1 , ARG2 , ARG3) 1 1
(f(ARG1 , ARG2 , ARG3) + -1) PTRADD f(ARG1 , ARG2 , ARG3) -1 1
(f(ARG1 , ARG2 , ARG3) + 1) PTRADD f(ARG1 , ARG2 , ARG3) 1 1
(~(f(ARG1 , ARG2 , ARG3)) + 1) INT_2COMP f(ARG1 , ARG2 , ARG3)
(RSP + -88) PTRSUB RSP -88
 BRANCH VZERO
 CALL func (RSP + -96) (RSP + -88) (RSP + -88)
(~(f(ARG1 , ARG2 , ARG3)) + 1) INT_2COMP f(ARG1 , ARG2 , ARG3)
0 INT_EQUAL f(ARG1 , ARG2 , ARG3) 1
 BRANCH VZERO
(RSP + -96) PTRSUB RSP -96
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
(f(ARG1 , ARG2 , ARG3) + -1) PTRADD f(ARG1 , ARG2 , ARG3) -1 1
(RSP + -88) PTRSUB RSP -88
(f() + 1) INT_ADD f() 1
(~(ARG1) + 1) INT_2COMP ARG1
 CBRANCH (ARG3 INT_NOTEQUAL ARG2)
 CALL func (f(ARG1 , ARG2 , ARG3) + -1) (f(ARG1 , ARG2 , ARG3) + -1) (f(ARG1 , ARG2 , ARG3) + -1)
 CALL func (RSP + -96) (RSP + -88) (RSP + -88)
 BRANCH VZERO
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG3 ARG2
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (RSP + -48)
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
(RSP + -48) PTRSUB RSP -48
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 ARG3 ARG4 ARG3
f() CALL func ARG1 (ARG3 - ARG1) [(ARG1 + 120)] (ARG3 - ARG1)
(ARG3 - ARG1) INT_SUB ARG3 ARG1
 CALL func (ARG1 + 64) ARG1 (ARG1 + 64)
(ARG3 - ARG1) INT_SUB ARG3 ARG1
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 120) INT_ADD ARG1 120
(ARG1 + 64) INT_ADD ARG1 64
(ARG2 + (ARG3 - ARG1)) INT_ADD ARG2 (ARG3 - ARG1)
0 INT_EQUAL ARG2 0
 CBRANCH (ARG2 INT_EQUAL 0)
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
f() CALL func (ARG1 + 64) (ARG2 + (ARG3 - ARG1)) (ARG1 + 64)
 CALL func (RSP + -24) f() f()
 CALL func (RSP + -24) f() f()
(RSP + -24) PTRSUB RSP -24
[(ARG1 + 120)] LOAD 433 (ARG1 + 120)
(RSP + -24) PTRSUB RSP -24
 BRANCH VZERO
(ARG1 + 120) CAST (ARG1 + 120)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
ARG1 COPY ARG1
ARG2 COPY ARG2
f(ARG1 , ARG3) CALL func ARG1 (RSP + -24) ARG3 ARG4 f()
 CALL func ARG1 ARG2 f(ARG1 , ARG3) ARG4
f() CALL func ARG5
 RETURN 0
(RSP + -24) PTRSUB RSP -24
ARG2 COPY ARG2
f(ARG1 , ARG3) CALL func ARG1 (RSP + -24) ARG3 ARG4 f()
 CALL func ARG1 ARG2 f(ARG1 , ARG3) ARG4 ARG6
f() CALL func ARG5
ARG1 COPY ARG1
 RETURN 0
(RSP + -24) PTRSUB RSP -24
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
 CALL func ARG1 ARG2 f(ARG1 , ARG3) ARG4 ARG6 ARG7
ARG1 COPY ARG1
ARG2 COPY ARG2
f(ARG1 , ARG3) CALL func ARG1 (RSP + -24) ARG3 ARG4 f()
f() CALL func ARG5
(RSP + -24) PTRSUB RSP -24
 RETURN 0
0 INT_EQUAL VZERO 0
f() COPY f()
 RETURN 0 f()
f() COPY f()
f() COPY f()
 CBRANCH (VZERO INT_EQUAL 0)
f() COPY f()
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (VZERO INT_EQUAL 0)
VZERO COPY VZERO
0 INT_EQUAL VZERO 0
6882384 PTRSUB 0 6882384
 CALL libcall___cxa_guard_release_thunk 6882384
f() CALL libcall___cxa_guard_acquire_thunk 6882384
6882384 PTRSUB 0 6882384
0 INT_NOTEQUAL f() 0
-49064778989728563 COPY -49064778989728563
-49064778989728563 COPY -49064778989728563
(ARG1 + 120) INT_ADD ARG1 120
(ARG1 + 120) CAST (ARG1 + 120)
 RETURN 0
 STORE 433 (ARG1 + 120) f()
f() CALL func
 CALL func (RSP + -152) 0 (RSP + -152) (RSP + -88) ARG1 ARG2 ARG3 4276992
(RSP + -152) PTRSUB RSP -152
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(RSP + -152) PTRSUB RSP -152
40 CAST 40
 CALL func (RSP + -152)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -88) PTRSUB RSP -88
4276992 COPY 4276992
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -152) PTRSUB RSP -152
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) LOAD 433 ARG1
f(ARG1) LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) LOAD 433 ARG1
 STORE 433 ARG1 (f(ARG1) + -1)
 STORE 433 ARG1 (f(ARG1) + 1)
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 (f(ARG1) + -1)
 STORE 433 ARG1 (f(ARG1) + 1)
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) LOAD 433 ARG1
 CBRANCH ([(ARG1 + 8)] INT_SLESS 1000000000)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_SLESS f(ARG1) 1
0 INT_SLESS [(ARG1 + 8)] 1000000000
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (f(ARG1) INT_SLESS 1)
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_SLESS f(ARG1) 3294967297
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + 3294967296) INT_ADD [(ARG1 + 8)] 3294967296
0 INT_SLESS 999999999 [(ARG1 + 8)]
 CBRANCH (f(ARG1) INT_SLESS 3294967297)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (999999999 INT_SLESS [(ARG1 + 8)])
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 3294967296)
(f(ARG1) + 1) INT_ADD f(ARG1) 1
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (f(ARG1) INT_SLESS 0)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_SLESS 0 [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (0 INT_SLESS [(ARG1 + 8)])
([(ARG1 + 8)] + 3294967296) INT_ADD [(ARG1 + 8)] 3294967296
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 3294967296)
(f(ARG1) + 1) INT_ADD f(ARG1) 1
0 INT_SLESS 4294967295 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_SLESS f(ARG1) 0
 CBRANCH (4294967295 INT_SLESS [(ARG1 + 8)])
([(ARG1 + 8)] + 1000000000) INT_ADD [(ARG1 + 8)] 1000000000
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 1000000000)
(f(ARG1) + -1) INT_ADD f(ARG1) -1
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 1000000000)
([(ARG1 + 8)] + 1000000000) INT_ADD [(ARG1 + 8)] 1000000000
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f(ARG1) + -1) INT_ADD f(ARG1) -1
 STORE 433 (ARG1 + 8) ARG3
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
40 INT_ADD 0 40
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
 CALL func (RSP + -40) -9223372036854775808 0
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) COPY (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 RETURN 1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
(f() + 40) INT_ADD f() 40
0 COPY 0
0 INT_EQUAL f() 0
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
0 COPY 0
f() CALL libcall_gettimeofday_thunk (RSP + -56) 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CALL func (RSP + -40) -946684800 0 -946684800
(RSP + -40) PTRSUB RSP -40
0 SUBPIECE 0 0
0 INT_MULT 0 1000
 BRANCH VZERO
-946684800 INT_ADD 0 -946684800
f() CALL func
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
0 INT_NOTEQUAL f() 0
(FS_OFFSET + 40) INT_ADD 0 40
4590544 COPY 4590544
/dev/urandom COPY /dev/urandom
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
f() CALL libcall_fopen_thunk /dev/urandom 4590544
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL 0)
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH ((f() / 2147483647) INT_EQUAL 1)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -40) PTRSUB RSP -40
(RSP + -72) PTRSUB RSP -72
(f() / 2147483647) SUBPIECE f() 8
(RSP + -56) PTRSUB RSP -56
f() CALL libcall_getpid_thunk
f() CALL func (RSP + -64) (RSP + -76) (RSP + -72) (RSP + -76)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -40)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -40) PTRSUB RSP -40
(A_Stack[-0x28]:8 & 4294967295) INT_AND A_Stack[-0x28]:8 4294967295
f() CALL func (RSP + -56)
f() CALL func (RSP + -40)
(RSP + -64) PTRSUB RSP -64
(f() / 2147483647) SUBPIECE f() 0
f() CALL func
(RSP + -76) PTRSUB RSP -76
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
f() CALL libcall_fread_thunk (RSP + -40) 4 1 f()
0 INT_EQUAL (f() / 2147483647) 1
(RSP + -40) PTRSUB RSP -40
(f() / 2147483647) SUBPIECE f() 0
 CALL libcall_fclose_thunk f()
 CALL libcall_rand_thunk
f() COPY f()
 RETURN 0
 CBRANCH (VZERO INT_EQUAL 0)
0 INT_EQUAL VZERO 0
f() COPY f()
f() CALL libcall___cxa_guard_acquire_thunk
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
0 COPY 0
 CALL libcall_srand_thunk f()
 CALL libcall___cxa_guard_release_thunk 6882360
f() CALL func
6882360 PTRSUB 0 6882360
(ARG2 | ARG1) INT_OR ARG1 ARG2
 RETURN 0 (ARG2 | ARG1)
(ARG2 | ARG1) COPY (ARG2 | ARG1)
 CALL libcall_memcpy_thunk ARG3 ARG1 (ARG2 - ARG1)
ARG1 CAST ARG1
0 INT_NOTEQUAL ARG1 ARG2
ARG2 CAST ARG2
 RETURN 0
 CBRANCH (ARG1 INT_NOTEQUAL ARG2)
(ARG2 - ARG1) INT_SUB ARG2 ARG1
(ARG2 - ARG1) CAST (ARG2 - ARG1)
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
 STORE 433 ARG1 [f(ARG2)]
 STORE 433 ARG2 [f(RSP)]
f(ARG2) CALL func ARG2
f(ARG2) CAST f(ARG2)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
f(RSP) CAST f(RSP)
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f(RSP) CALL func (RSP + -24)
(RSP + -24) PTRSUB RSP -24
[f(RSP)] LOAD 433 f(RSP)
(FS_OFFSET + 40) INT_ADD 0 40
[f(ARG2)] LOAD 433 f(ARG2)
[f(ARG1)] LOAD 433 f(ARG1)
f(ARG1) CAST f(ARG1)
40 CAST 40
[40] LOAD 433 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALL func ARG1 f() f()
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
0 INT_NOTEQUAL ARG1 ARG2
f() CALL func ARG1
 CALL func ARG1 ARG2 ARG2
f() CALL func ARG1
 CALL func ARG1 ((f() - f()) + f()) ((f() - f()) + f())
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1 f() f()
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
 CALL func ARG1 (f() + f()) (f() + f())
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG2
 CALL func ARG2 (f() + f()) (f() + f())
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG2
(ARG2 + 16) INT_ADD ARG2 16
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG2
 CALL func ARG2 f() f()
f() CALL func ARG2
f() CALL func ARG2
 CALL func ARG2 ((f() - f()) + f()) ((f() - f()) + f())
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG2 f() f()
(ARG2 + 8) INT_ADD ARG2 8
f() CALL func ARG2
f() CALL func ARG2
 CBRANCH (ARG1 INT_NOTEQUAL ARG2)
 CBRANCH f()
 CBRANCH (f() INT_LESS f())
0 INT_LESS f() f()
 CBRANCH (f() INT_LESS f())
 CBRANCH (f() INT_NOTEQUAL f())
 CBRANCH (f() INT_LESS f())
0 INT_NOTEQUAL f() f()
0 INT_LESS f() f()
 CALL func (ARG1 + 8) (ARG2 + 8) (ARG2 + 8)
 CBRANCH (f() INT_LESS f())
0 INT_LESS f() f()
0 INT_LESS f() f()
 BRANCH VZERO
 CALL func (ARG1 + 16) (ARG2 + 16) (ARG2 + 16)
0 COPY 0
(f() + f()) INT_ADD f() f()
(f() - f()) INT_SUB f() f()
(f() + f()) INT_ADD f() f()
(f() + f()) INT_ADD f() f()
 CBRANCH (f() INT_LESS f())
 CALL func (f() + f()) f() f() 0
0 INT_LESS f() f()
 BRANCH VZERO
 CALL func (f() + f()) f() f()
((f() - f()) + f()) INT_ADD f() (f() - f())
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
 CALL func f() f()
((f() - f()) + f()) INT_ADD f() (f() - f())
 CALL func (f() + f()) f() f()
(f() + f()) INT_ADD f() f()
(f() - f()) INT_SUB f() f()
(f() + f()) INT_ADD f() f()
(f() + f()) INT_ADD f() f()
 CALL func (f() + f()) f() f() 0
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 1)
0 COPY 0
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
1 COPY 1
 BRANCH VZERO
 RETURN 0
 RETURN 0
0 INT_EQUAL f() 1
0 INT_EQUAL ARG1 ARG2
(ARG1 & -256) INT_AND ARG1 -256
(ARG1 & -256) INT_OR (ARG1 & -256) 0
 RETURN 0 (ARG1 & -256)
0 INT_ZEXT 0
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG2
f() CALL func f() f()
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_EQUAL f())
 RETURN 0 1
0 INT_EQUAL f() f()
1 COPY 1
0 COPY 0
 RETURN 0 0
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 32) INT_ADD ARG1 32
 RETURN 0 ARG1
f() CALL func ARG1 47 [(ARG1 + 32)]
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 32) INT_ADD ARG1 32
f() CALL func ARG1 [(ARG1 + 32)] f() [(ARG1 + 32)]
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 32) INT_ADD ARG1 32
f() CALL func ARG1 [(ARG1 + 32)] [(ARG1 + 32)]
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 24) INT_ADD ARG1 24
f() CALL func ARG1
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1 [(ARG1 + 32)] 1 [(ARG1 + 32)]
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 32) INT_ADD ARG1 32
f() CALL func ARG1
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
f() CALL func ARG1 [(ARG1 + 32)] [(ARG1 + 32)]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(ARG1 + 32) CAST (ARG1 + 32)
 CBRANCH (f() INT_LESSEQUAL [(ARG1 + 32)])
0 INT_LESSEQUAL f() [(ARG1 + 32)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
 CBRANCH ~(f())
 CBRANCH ~(f())
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(ARG1 + 32) CAST (ARG1 + 32)
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
 BRANCH VZERO
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(ARG1 + 32) CAST (ARG1 + 32)
 CBRANCH ([(ARG1 + 32)] INT_EQUAL f())
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH ([(ARG1 + 32)] INT_EQUAL f())
 STORE 433 (ARG1 + 24) (f() / 4611686014132420609)
0 INT_EQUAL [(ARG1 + 32)] f()
~(f()) BOOL_NEGATE f()
 STORE 433 (ARG1 + 16) (f() / 2147483647)
0 INT_EQUAL [(ARG1 + 32)] f()
(ARG1 + 32) CAST (ARG1 + 32)
(ARG1 + 24) CAST (ARG1 + 24)
(f() / 2147483647) INT_RIGHT f() 64
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH (f() INT_EQUAL 0)
f() CALL func (ARG1 + 16) 0
 CBRANCH (f() INT_NOTEQUAL f())
0 INT_NOTEQUAL f() f()
0 COPY 0
f() CALL func (ARG1 + 16) 1
 CBRANCH ([(ARG1 + 32)] INT_EQUAL f())
0 INT_LESS f() 3
 BRANCH VZERO
f() CALL func f()
f() INT_SEXT f()
 CBRANCH (f() INT_LESS 3)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
 STORE 433 (ARG1 + 24) A_Stack[-0x30]:8
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
 STORE 433 (ARG1 + 16) A_Stack[-0x38]:8
0 INT_NOTEQUAL f() 0
(ARG1 + 32) CAST (ARG1 + 32)
 CBRANCH (f() INT_NOTEQUAL 0)
(ARG1 + 24) CAST (ARG1 + 24)
f() CALL func (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
f() INT_SEXT f()
f() CALL func f()
f() CALL func (ARG1 + 16) 2
0 INT_EQUAL f() 0
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(ARG1 + 32) CAST (ARG1 + 32)
f() INT_SEXT f()
f() CALL func f()
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
([(ARG1 + 32)] + 1) INT_ADD [(ARG1 + 32)] 1
 STORE 433 (ARG1 + 32) ([(ARG1 + 32)] + 1)
(ARG1 + 32) CAST (ARG1 + 32)
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(ARG1 + 32) CAST (ARG1 + 32)
 BRANCH VZERO
f() CALL func f()
f() INT_SEXT f()
f() CALL func (ARG1 + 16) 0
0 INT_EQUAL f() 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(ARG1 + 32) CAST (ARG1 + 32)
[(f() + 40)] LOAD 433 (f() + 40)
(ARG1 + 32) CAST (ARG1 + 32)
f() CALL func (ARG1 + 16)
(ARG1 + 32) CAST (ARG1 + 32)
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(f() + 40) CAST (f() + 40)
 STORE 433 (ARG1 + 32) ([(ARG1 + 32)] + f())
([(ARG1 + 32)] + f()) INT_ADD f() [(ARG1 + 32)]
 RETURN 1
 CALL libcall___assert_fail_thunk Position < Path.size() && "Tried to increment past end!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Path.cpp 248 0
0 INT_EQUAL [(ARG1 + 32)] f()
0 COPY 0
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
Position < Path.size() && "Tried to increment past end!" COPY Position < Path.size() && "Tried to increment past end!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Path.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Path.cpp
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
~(f()) BOOL_NEGATE f()
(f() / 2147483647) INT_RIGHT f() 64
 STORE 433 (ARG1 + 24) (f() / 4611686014132420609)
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(ARG1 + 32) CAST (ARG1 + 32)
 STORE 433 (ARG1 + 16) (f() / 2147483647)
(ARG1 + 24) CAST (ARG1 + 24)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(ARG1 + 32) CAST (ARG1 + 32)
(f() / 2147483647) SUBPIECE f() 0
(ARG1 + 16) CAST (ARG1 + 16)
([(ARG1 + 32)] + -1) INT_ADD [(ARG1 + 32)] -1
 STORE 433 (ARG1 + 32) ([(ARG1 + 32)] + -1)
 STORE 433 (ARG1 + 24) f()
 STORE 433 (ARG1 + 16) f()
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(ARG1 + 32) CAST (ARG1 + 32)
4585993 PTRSUB 0 4585993
 CALL func (RSP + -56) 4585993
(RSP + -56) PTRSUB RSP -56
(ARG1 + 32) CAST (ARG1 + 32)
 BRANCH VZERO
(ARG1 + 24) CAST (ARG1 + 24)
(ARG1 + 16) CAST (ARG1 + 16)
1 COPY 1
 BRANCH VZERO
 CALL func (RSP + -168) ARG1 ARG2 ARG1
 CALL func (RSP + -72) ARG1 ARG2 ARG1
A_Stack[-0x98]:8 COPY A_Stack[-0x98]:8
A_Stack[-0x88]:8 COPY A_Stack[-0x88]:8
A_Stack[-0xa8]:8 COPY A_Stack[-0xa8]:8
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
(RSP + -168) PTRSUB RSP -168
0 INT_NOTEQUAL f() [(f() + 40)]
A_Stack[-0x90]:8 COPY A_Stack[-0x90]:8
(RSP + -168) PTRSUB RSP -168
A_Stack[-0xa0]:8 COPY A_Stack[-0xa0]:8
f() CALL func (RSP + -168) (RSP + -72) (RSP + -72)
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
(RSP + -120) PTRSUB RSP -120
0 COPY 0
f() CALL func f()
f() INT_SEXT f()
 CBRANCH (f() INT_EQUAL 0)
f() CALL func f() 0
0 INT_EQUAL f() 0
f() CALL func (RSP + -120)
 CBRANCH f()
f() CALL func (RSP + -120)
 BRANCH VZERO
 CBRANCH f()
 CBRANCH f()
[f()] LOAD 433 f()
(RSP + -120) PTRSUB RSP -120
f() CAST f()
(f() + 8) PTRADD f() 1 8
[(f() + 8)] LOAD 433 (f() + 8)
 CBRANCH f()
0 INT_EQUAL f() 0
(RSP + -120) PTRSUB RSP -120
(RSP + -72) PTRSUB RSP -72
f(RSP) CALL func (RSP + -120)
f() CALL func f(RSP) (RSP + -72) f(RSP)
 CBRANCH (f() INT_LESS 3)
0 COPY 0
f() INT_SEXT f()
f() CALL func f()
 CBRANCH (f() INT_EQUAL 0)
f() CALL func f() 0
(RSP + -168) PTRSUB RSP -168
0 INT_EQUAL f() 0
f() CALL func (RSP + -168)
f() CALL func (RSP + -168)
 BRANCH VZERO
[f()] LOAD 433 f()
(RSP + -168) PTRSUB RSP -168
(f() + 8) PTRADD f() 1 8
f() CAST f()
 CALL func (RSP + -184)
[(f() + 8)] LOAD 433 (f() + 8)
(RSP + -184) PTRSUB RSP -184
 RETURN 1
 RETURN 0 (f() # f())
(f() # f()) PIECE f() f()
 CALL libcall___stack_chk_fail_thunk
f() CALL func f() 0
0 INT_EQUAL f() 0
f() CALL func (RSP + -168)
(RSP + -168) PTRSUB RSP -168
f() INT_SEXT f()
f() CALL func f()
f() CALL func f()
0 INT_LESS f() 3
(RSP + -168) PTRSUB RSP -168
f() CALL func (RSP + -168)
 CBRANCH (f() INT_NOTEQUAL f())
 BRANCH VZERO
1 COPY 1
(RSP + -168) PTRSUB RSP -168
(RSP + -168) PTRSUB RSP -168
f() CALL func f() 1
f() CALL func (RSP + -168)
f() CALL func f() 0
0 INT_NOTEQUAL f() f()
f() CALL func (RSP + -168)
 BRANCH VZERO
1 COPY 1
f() CALL func ARG1 (RSP + -184) (RSP + -184)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
f() CALL func (RSP + -200)
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -184)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
[40] LOAD 433 40
(f() / 2147483647) SUBPIECE f() 0
(RSP + -184) PTRSUB RSP -184
40 CAST 40
 CALL func (RSP + -184)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) INT_RIGHT f() 64
(RSP + -184) PTRSUB RSP -184
(f() / 2147483647) SUBPIECE f() 0
0 INT_XOR f() 1
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
0 COPY 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -184) PTRSUB RSP -184
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 RETURN 0 0
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func ARG1 (RSP + -184) (RSP + -184)
(RSP + -232) PTRSUB RSP -232
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH ([(FS_OFFSET + 40)] INT_EQUAL [40])
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
40 INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -216)
0 INT_EQUAL [(FS_OFFSET + 40)] [40]
(f() / 2147483647) SUBPIECE f() 8
40 CAST 40
(f() / 2147483647) SUBPIECE f() 0
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -216) (RSP + -232) (RSP + -232)
(RSP + -216) PTRSUB RSP -216
0 INT_NOTEQUAL f() 0
(RSP + -184) PTRSUB RSP -184
0 COPY 0
 CALL func (RSP + -184)
(RSP + -184) PTRSUB RSP -184
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -184) PTRSUB RSP -184
(RSP + -216) PTRSUB RSP -216
 CALL func (RSP + -184)
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
 RETURN 0 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL libcall_memmove_thunk ARG3 ARG1 (ARG2 - ARG1)
ARG1 CAST ARG1
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG3 CAST ARG3
(ARG3 + (ARG2 - ARG1)) INT_ADD ARG3 (ARG2 - ARG1)
 CBRANCH ((ARG2 - ARG1) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (ARG2 - ARG1) 0
 RETURN 0 (ARG3 + (ARG2 - ARG1))
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 RETURN 0
 CALL func f() f() f()
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
 CALL func ARG1 f() f()
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1 f() f()
f() CALL func ARG1
0 INT_NOTEQUAL ARG1 ARG2
ARG1 COPY ARG1
 CALL func ARG1 (f() + f()) (f() + f())
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1 f() f()
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG2
 RETURN 0 ARG1
 CBRANCH (ARG1 INT_NOTEQUAL ARG2)
 CBRANCH (f() INT_LESS f())
0 COPY 0
 CALL func f() f()
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 BRANCH VZERO
(f() + f()) INT_ADD f() f()
 CALL func f() (f() + f()) f()
 CBRANCH (f() INT_EQUAL 0)
f() CALL func f() (f() + f()) f()
 BRANCH VZERO
(f() + f()) INT_ADD f() f()
0 INT_LESS f() f()
 CBRANCH (f() INT_LESS f())
(f() + f()) INT_ADD f() f()
0 INT_LESS f() f()
(f() + f()) INT_ADD f() f()
(f() + f()) INT_ADD f() f()
0 INT_EQUAL f() 0
 BRANCH VZERO
 CALL func (f() + f()) f() (f() + f()) 0
 CALL func f() f() f()
0 INT_NOTEQUAL ARG4 0
 CALL func ARG1 (RSP + -360) (RSP + -360)
f() CALL func (RSP + -392) ARG2 f()
f() CALL func ARG3 f() f()
f() CALL func ARG3
 CALL func ARG3
 CALL func ARG3 (RSP + -360) (RSP + -360)
 CALL func ARG3 (RSP + -392) (RSP + -392)
f() CALL func ARG3
f() CALL func ARG3
0 INT_NOTEQUAL ARG6 0
0 INT_NOTEQUAL ARG6 1
0 INT_EQUAL ARG6 2
 CALL func (RSP + -360)
 CBRANCH (ARG4 INT_NOTEQUAL 0)
(RSP + -392) PTRSUB RSP -392
f() CALL func (RSP + -360)
 CBRANCH (ARG6 INT_NOTEQUAL 1)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL f() [(f() + 40)]
(RSP + -360) PTRSUB RSP -360
(RSP + -360) PTRSUB RSP -360
 CBRANCH (f() INT_NOTEQUAL f())
0 INT_NOTEQUAL f() f()
(FS_OFFSET + 40) INT_ADD 0 40
[(f() + 40)] LOAD 433 (f() + 40)
0 COPY 0
0 COPY 0
(f() + 40) CAST (f() + 40)
(RSP + -360) PTRSUB RSP -360
(RSP + -360) PTRSUB RSP -360
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -360) PTRSUB RSP -360
 CALL func (RSP + -360)
(RSP + -360) PTRSUB RSP -360
(RSP + -392) PTRSUB RSP -392
f() CALL func (RSP + -392)
(RSP + -392) PTRSUB RSP -392
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 CALL func (RSP + -392) (RSP + -360) (RSP + -360)
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
(f() # f()) PIECE f() f()
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
0 COPY 0
(f() # f()) PIECE f() f()
 CBRANCH (ARG6 INT_NOTEQUAL 0)
(RSP + -392) PTRSUB RSP -392
 CALL func (RSP + -392) f() f()
(RSP + -424) PTRSUB RSP -424
Invalid Type COPY Invalid Type
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Path.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Path.cpp
f() CALL func (RSP + -392) 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(RSP + -392) PTRSUB RSP -392
0 COPY 0
 CALL func Invalid Type /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Path.cpp 225
f() CALL func (RSP + -424)
f() CALL func (RSP + -424)
 CALL func (RSP + -392) f() f()
0 COPY 0
(RSP + -424) PTRSUB RSP -424
(RSP + -392) PTRSUB RSP -392
(RSP + -392) PTRSUB RSP -392
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
f() CALL func 8 1
 CBRANCH (ARG6 INT_EQUAL 2)
 CALL func (RSP + -424) 4585813
(RSP + -424) PTRSUB RSP -424
 CALL func (RSP + -488) (RSP + -360) (RSP + -360)
 CALL func (RSP + -200) (RSP + -488) (RSP + -456) (RSP + -424) (RSP + -392)
(RSP + -392) PTRSUB RSP -392
 CALL func (RSP + -200)
(RSP + -200) PTRSUB RSP -200
(RSP + -360) PTRSUB RSP -360
4585813 PTRSUB 0 4585813
(RSP + -424) PTRSUB RSP -424
 CALL func (RSP + -200)
(RSP + -200) PTRSUB RSP -200
(RSP + -488) PTRSUB RSP -488
 CALL func (RSP + -392) 4585813
 CALL func (RSP + -360) (RSP + -200) (RSP + -200)
 CALL func (RSP + -456) 4585813
(RSP + -360) PTRSUB RSP -360
4585813 PTRSUB 0 4585813
(RSP + -392) PTRSUB RSP -392
(RSP + -200) PTRSUB RSP -200
(RSP + -488) PTRSUB RSP -488
4585813 PTRSUB 0 4585813
(RSP + -456) PTRSUB RSP -456
 CALL func 1 (RSP + -200)
(RSP + -200) PTRSUB RSP -200
(RSP + -456) PTRSUB RSP -456
(RSP + -200) PTRSUB RSP -200
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
(f() # f()) PIECE f() f()
(f() # f()) INT_AND (f() # f()) -1
 RETURN 0 (f() # f())
f() COPY f()
(RSP + -392) PTRSUB RSP -392
 CALL func (RSP + -392)
f() CALL func (RSP + -424) (RSP + -392) (RSP + -392)
(f() # f()) PIECE f() f()
(RSP + -392) PTRSUB RSP -392
 CALL func (RSP + -392) 17
0 INT_EQUAL f() 0
(RSP + -392) PTRSUB RSP -392
 BRANCH VZERO
(RSP + -424) PTRSUB RSP -424
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -424) PTRSUB RSP -424
(f() # f()) PIECE f() f()
 BRANCH VZERO
(RSP + -392) PTRSUB RSP -392
 CALL func (RSP + -392)
f() CALL func (RSP + -424)
f() COPY f()
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(RSP + -392) PTRSUB RSP -392
(f() # f()) PIECE f() f()
 CALL func (RSP + -392)
(RSP + -392) PTRSUB RSP -392
f() CALL func (RSP + -424) (RSP + -392) (RSP + -392)
 CALL func (RSP + -392) 17
0 INT_EQUAL f() 0
f() COPY f()
(RSP + -424) PTRSUB RSP -424
(RSP + -392) PTRSUB RSP -392
 BRANCH VZERO
 CBRANCH ([f()] INT_EQUAL 37)
(f() & 15) INT_ZEXT (f() & 15)
 STORE 433 f() [(0123456789abcdef + (f() & 15))]
f() CALL func
(f() & 15) INT_AND f() 15
[(0123456789abcdef + (f() & 15))] LOAD 433 (0123456789abcdef + (f() & 15))
f() CAST f()
(0123456789abcdef + (f() & 15)) PTRADD 0123456789abcdef (f() & 15) 1
0123456789abcdef COPY 0123456789abcdef
f() CAST f()
 BRANCH VZERO
0 INT_EQUAL [f()] 37
[f()] LOAD 433 f()
(f() + 1) INT_ADD f() 1
f() CALL func (RSP + -360) f() f()
(RSP + -360) PTRSUB RSP -360
 CALL func (RSP + -392) 2
(RSP + -392) PTRSUB RSP -392
(RSP + -392) PTRSUB RSP -392
0 INT_NOTEQUAL f() 0
 CALL func (RSP + -392) f() f()
(RSP + -392) PTRSUB RSP -392
f() CALL func (RSP + -392) 0
0 COPY 0
(RSP + -392) PTRSUB RSP -392
(RSP + -424) PTRSUB RSP -424
f() CALL func (RSP + -424) (RSP + -392) (RSP + -392)
(f() # f()) PIECE f() f()
0 COPY 0
 BRANCH VZERO
(ARG1 + 32) INT_ADD ARG1 32
(ARG2 + 32) INT_ADD ARG2 32
(ARG2 + 32) CAST (ARG2 + 32)
 RETURN 0 ([(ARG1 + 32)] - [(ARG2 + 32)])
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
([(ARG1 + 32)] - [(ARG2 + 32)]) COPY ([(ARG1 + 32)] - [(ARG2 + 32)])
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
(ARG1 + 32) CAST (ARG1 + 32)
([(ARG1 + 32)] - [(ARG2 + 32)]) INT_SUB [(ARG1 + 32)] [(ARG2 + 32)]
f() CALL func ARG1 0 f(ARG1)
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 32) PTRADD ARG1 4 8
f() CALL func ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 32) PTRADD ARG1 4 8
f() CALL func ARG1
 RETURN 0 ARG1
(ARG1 + 32) PTRADD ARG1 4 8
[ARG1] LOAD 433 ARG1
f() CALL func ARG1 f() f(ARG1) f()
(ARG1 + 32) PTRADD ARG1 4 8
f() CALL func ARG1 (f(ARG1) + -1) (f(ARG1) + -1)
f() CALL func ARG1 ([(ARG1 + 32)] + -1) ([(ARG1 + 32)] + -1)
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 24) PTRADD ARG1 3 8
~(f()) BOOL_NEGATE f()
(FS_OFFSET + 40) INT_ADD 0 40
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func [ARG1] [(ARG1 + 8)] [ARG1]
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
 CBRANCH ~(f())
 CBRANCH ([(ARG1 + 32)] INT_EQUAL f())
0 INT_EQUAL [(ARG1 + 32)] f()
 CBRANCH (f(ARG1) INT_EQUAL 0)
(f(ARG1) + -1) INT_ADD f(ARG1) -1
 CBRANCH ((f(ARG1) + -1) INT_EQUAL f())
0 INT_EQUAL (f(ARG1) + -1) f()
0 COPY 0
 CBRANCH (f() INT_LESSEQUAL (f() + 1))
([(ARG1 + 32)] + -1) INT_ADD [(ARG1 + 32)] -1
f() INT_SEXT f()
f() CALL func f()
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
0 COPY 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
 BRANCH VZERO
1 COPY 1
(f(ARG1) + -1) INT_ADD f(ARG1) -1
f() CALL func f()
f() INT_SEXT f()
0 INT_EQUAL f() 0
 CBRANCH ~(f())
 BRANCH VZERO
(f(ARG1) + -1) INT_ADD f(ARG1) -1
0 INT_EQUAL f(ARG1) 0
~(f()) BOOL_NEGATE f()
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 4611686014132420609) (f() / 2147483647)
 STORE 433 (ARG1 + 16) f()
 STORE 433 (ARG1 + 24) (f() / 4611686014132420609)
 STORE 433 (ARG1 + 16) (f() / 2147483647)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
4585993 PTRSUB 0 4585993
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -56) 4585993
(f() / 2147483647) INT_RIGHT f() 64
(RSP + -56) PTRSUB RSP -56
(f() / 2147483647) INT_RIGHT f() 64
 BRANCH VZERO
 STORE 433 (ARG1 + 32) f()
([(ARG1 + 32)] + -1) INT_ADD [(ARG1 + 32)] -1
 STORE 433 (ARG1 + 32) ([(ARG1 + 32)] + -1)
 STORE 433 (ARG1 + 24) f()
0 INT_LESSEQUAL f() (f() + 1)
(f() + 1) INT_ADD f() 1
 CALL func ARG1
 CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
 CALL func (ARG1 + 16)
 RETURN 0
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
 STORE 433 (ARG1 + 16) [(f(RSP) + 16)]
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(ARG1 + 32) PTRADD ARG1 4 8
f() CALL func (RSP + -88)
(f(RSP) + 32) PTRADD f(RSP) 4 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(ARG1 + 24) PTRADD ARG1 3 8
 STORE 433 (ARG1 + 8) [(f(RSP) + 8)]
[40] LOAD 433 40
(RSP + -88) PTRSUB RSP -88
(f(RSP) + 24) PTRADD f(RSP) 3 8
(FS_OFFSET + 40) INT_ADD 0 40
(ARG1 + 16) PTRADD ARG1 2 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 STORE 433 ARG1 [f(RSP)]
(f(RSP) + 16) PTRADD f(RSP) 2 8
ARG3 COPY ARG3
ARG1 COPY ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[f(RSP)] LOAD 433 f(RSP)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 STORE 433 (ARG1 + 32) [(f(RSP) + 32)]
ARG2 COPY ARG2
(f(RSP) + 8) PTRADD f(RSP) 1 8
(RSP + -56) PTRSUB RSP -56
[(f(RSP) + 32)] LOAD 433 (f(RSP) + 32)
f(RSP) CAST f(RSP)
f(RSP) CALL func (RSP + -56)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
 STORE 433 (ARG1 + 24) [(f(RSP) + 24)]
 CALL func (RSP + -56)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[(f(RSP) + 24)] LOAD 433 (f(RSP) + 24)
(RSP + -56) PTRSUB RSP -56
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
(RSP + -72) PTRSUB RSP -72
40 CAST 40
[40] LOAD 433 40
(ARG1 + 8) PTRADD ARG1 1 8
(f() / 2147483647) INT_RIGHT f() 64
ARG1 COPY ARG1
ARG1 COPY ARG1
(ARG1 + 32) PTRADD ARG1 4 8
(FS_OFFSET + 40) INT_ADD 0 40
 STORE 433 (ARG1 + 32) 0
 STORE 433 (ARG1 + 8) ARG3
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 ARG2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 STORE 433 (ARG1 + 24) (f() / 4611686014132420609)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 STORE 433 (ARG1 + 16) (f() / 2147483647)
40 INT_ADD 0 40
f() CALL func (RSP + -72) 0 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
f() CALL func ARG2
(ARG2 + 16) INT_ADD ARG2 16
(ARG2 + 32) INT_ADD ARG2 32
(ARG2 + 24) INT_ADD ARG2 24
 CBRANCH (f() INT_EQUAL f())
0 INT_EQUAL f() f()
 CBRANCH ([(ARG1 + 32)] INT_EQUAL [(ARG2 + 32)])
0 COPY 0
 RETURN 0 0
 RETURN 0 1
1 COPY 1
(ARG2 + 24) CAST (ARG2 + 24)
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
 CBRANCH (f() INT_NOTEQUAL 0)
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
0 INT_NOTEQUAL f() 0
(ARG1 + 24) CAST (ARG1 + 24)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
f() CALL func [(ARG1 + 16)] [(ARG1 + 24)] [(ARG2 + 16)] [(ARG2 + 24)]
(ARG2 + 16) CAST (ARG2 + 16)
0 INT_EQUAL [(ARG1 + 32)] [(ARG2 + 32)]
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(ARG1 + 32) CAST (ARG1 + 32)
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
(ARG2 + 32) CAST (ARG2 + 32)
ARG1 COPY ARG1
 CALL func (RSP + -168) ARG1 ARG2 ARG1
ARG2 COPY ARG2
A_Stack[-0x98]:8 COPY A_Stack[-0x98]:8
A_Stack[-0x88]:8 COPY A_Stack[-0x88]:8
A_Stack[-0xa8]:8 COPY A_Stack[-0xa8]:8
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
0 INT_EQUAL f() [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
A_Stack[-0x90]:8 COPY A_Stack[-0x90]:8
(RSP + -168) PTRSUB RSP -168
[(f() + 40)] LOAD 433 (f() + 40)
A_Stack[-0xa0]:8 COPY A_Stack[-0xa0]:8
 CALL func (RSP + -72) ARG1 ARG2 ARG1
f() CALL func (RSP + -168) (RSP + -72) (RSP + -72)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -168) PTRSUB RSP -168
(RSP + -72) PTRSUB RSP -72
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(RSP + -72) PTRSUB RSP -72
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
(RSP + -184) PTRSUB RSP -184
[f()] LOAD 433 f()
 CALL func (RSP + -184)
(RSP + -168) PTRSUB RSP -168
f() CAST f()
f() CALL func (RSP + -168)
f() CALL func f()
0 INT_NOTEQUAL f() 0
0 INT_LESS f() 3
f() CALL func (RSP + -168)
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -168) PTRSUB RSP -168
 CBRANCH (f() INT_LESS 3)
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL f())
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
f() CALL func f() 1
f() CALL func (RSP + -168)
(RSP + -168) PTRSUB RSP -168
(RSP + -168) PTRSUB RSP -168
f() CALL func f() 0
0 INT_NOTEQUAL f() f()
f() CALL func (RSP + -168)
 CBRANCH (f() INT_EQUAL 0)
(RSP + -120) PTRSUB RSP -120
f() CALL func f()
f() INT_SEXT f()
f() CALL func f() 0
0 INT_EQUAL f() 0
f() CALL func (RSP + -120)
 CBRANCH f()
f() CALL func (RSP + -120)
(f() + f()) INT_ADD f() f()
f() CALL func (RSP + -168)
(RSP + -168) PTRSUB RSP -168
 BRANCH VZERO
(RSP + -120) PTRSUB RSP -120
f() CAST f()
[f()] LOAD 433 f()
 BRANCH VZERO
f() CALL func (RSP + -216) 0 (f() + f())
(RSP + -216) PTRSUB RSP -216
f() CALL func f()
f() CALL func f()
f() CALL func (RSP + -168)
(RSP + -168) PTRSUB RSP -168
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
f(RSP) CALL func (RSP + -120)
0 INT_NOTEQUAL f() 0
f() CALL func f() 0
(RSP + -120) PTRSUB RSP -120
(RSP + -168) PTRSUB RSP -168
f() CALL func f(RSP) (RSP + -72) f(RSP)
f() CALL func f()
f() INT_SEXT f()
f() CALL func (RSP + -168)
(RSP + -72) PTRSUB RSP -72
0 INT_EQUAL f() 0
(RSP + -168) PTRSUB RSP -168
f() CALL func f()
f() INT_SEXT f()
f() CALL func f() 0
0 INT_EQUAL f() 0
f() CALL func (RSP + -168)
f() CALL func ARG1 ARG2 ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
(RSP + -40) PTRSUB RSP -40
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -56) f() -1 f()
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
f() CALL func (RSP + -40)
(RSP + -56) PTRSUB RSP -56
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
40 CAST 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(f() / 2147483647) SUBPIECE f() 0
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 (RSP + -136) (RSP + -104) (RSP + -72) (RSP + -40)
0 INT_NOTEQUAL 0 [40]
f() CALL func (RSP + 8) (RSP + 48)
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
(RSP + 8) PTRSUB RSP 8
 CBRANCH (f() INT_EQUAL 0)
(RSP + 48) PTRSUB RSP 48
0 INT_EQUAL f() 0
 CBRANCH (0 INT_NOTEQUAL [40])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
(RSP + 8) PTRSUB RSP 8
(RSP + 8) PTRSUB RSP 8
 CALL func (RSP + -104) 4585813
4585813 PTRSUB 0 4585813
(RSP + -104) PTRSUB RSP -104
(RSP + -136) PTRSUB RSP -136
 BRANCH VZERO
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + 8)
 CALL func (RSP + -136) f() f()
 CALL func (RSP + -72) 4585813
(RSP + -72) PTRSUB RSP -72
4585813 PTRSUB 0 4585813
(RSP + -40) PTRSUB RSP -40
(RSP + -72) PTRSUB RSP -72
(RSP + -136) PTRSUB RSP -136
4585813 PTRSUB 0 4585813
f() CALL func (RSP + 8)
 CALL func (RSP + -40) 4585813
(RSP + -40) PTRSUB RSP -40
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
ARG1 COPY ARG1
f() CALL func ARG1 ARG2 ARG1
ARG2 COPY ARG2
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f() INT_EQUAL -1)
0 INT_EQUAL f() -1
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 BRANCH VZERO
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -72) PTRSUB RSP -72
f() CALL func (RSP + -72) 0 f()
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
f() CALL func ARG1
 CALL func ARG1 f() f()
f() CALL func ARG1
f() CALL func A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL -1)
0 INT_NOTEQUAL f() -1
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) f() f() f()
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALL func ARG1 f() f()
f() CALL func ARG1
 CALL func ARG1 (RSP + -129) (RSP + -129)
f() CALL func ARG1
 CALL func ARG1 f() f() f()
f() CALL func ARG2 (RSP + -88) (RSP + -88)
(f() / 2147483647) SUBPIECE f() 8
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
(RSP + -88) PTRSUB RSP -88
(f() / 2147483647) SUBPIECE f() 0
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func (RSP + -120) 46 -1
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -88) PTRSUB RSP -88
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -88)
 CALL func (RSP + -88)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH f()
(RSP + -88) PTRSUB RSP -88
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH f()
f() CALL func (RSP + -104)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -120) f() f() f()
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -104)
(RSP + -120) PTRSUB RSP -120
 CBRANCH (f() INT_EQUAL -1)
(RSP + -120) PTRSUB RSP -120
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL f() -1
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(f() / 2147483647) SUBPIECE f() 8
(RSP + -104) PTRSUB RSP -104
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
0 COPY 0
f() CALL func (RSP + -104) 0
0 INT_NOTEQUAL f() 46
 CBRANCH (f() INT_NOTEQUAL 46)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -104) PTRSUB RSP -104
0 COPY 0
f() CALL func A_Stack[-0x78]:8 A_Stack[-0x70]:8 A_Stack[-0x78]:8
0 INT_LESS f() f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_LESS f())
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
1 COPY 1
 RETURN 1
 RETURN 0
(f() / 2147483647) SUBPIECE f() 0
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
1 COPY 1
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -129) PTRSUB RSP -129
46 COPY 46
f() CALL func ARG1
f() CALL func ARG1
f() CAST f()
f() CAST f()
0 INT_LESS f() f()
 CBRANCH (f() INT_LESS f())
 RETURN 0
 CBRANCH ((f() + 1) INT_LESS f())
[(f() + 1)] LOAD 433 (f() + 1)
 STORE 433 f() 47
 CBRANCH ([(f() + 1)] INT_EQUAL 92)
0 INT_EQUAL [(f() + 1)] 92
0 INT_EQUAL f() 92
 BRANCH VZERO
f() LOAD 433 f()
(f() + 1) PTRADD f() 1 1
 CBRANCH (f() INT_EQUAL 92)
 BRANCH VZERO
(f() + 1) PTRADD f() 1 1
(f() + 1) PTRADD f() 1 1
0 INT_LESS (f() + 1) f()
 CALL func ARG1 ARG2 ARG2
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG2
 CALL func ARG2
 CALL func ARG2
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
 CBRANCH (f() INT_EQUAL f())
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
void llvm::sys::path::native(const llvm::Twine&, llvm::SmallVectorImpl<char>&) COPY void llvm::sys::path::native(const llvm::Twine&, llvm::SmallVectorImpl<char>&)
(!path.isSingleStringRef() || path.getSingleStringRef().data() != result.data()) && "path and result are not allowed to overlap!" COPY (!path.isSingleStringRef() || path.getSingleStringRef().data() != result.data()) && "path and result are not allowed to overlap!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Path.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Path.cpp
 CALL libcall___assert_fail_thunk (!path.isSingleStringRef() || path.getSingleStringRef().data() != result.data()) && "path and result are not allowed to overlap!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Path.cpp 525 void llvm::sys::path::native(const llvm::Twine&, llvm::SmallVectorImpl<char>&)
(f() + 40) CAST (f() + 40)
(f() / 2147483647) SUBPIECE f() 0
[(f() + 40)] LOAD 433 (f() + 40)
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() f()
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -56)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -56) PTRSUB RSP -56
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
 RETURN 0 (ARG1 + 16)
 CALL func (RSP + -56) ARG1 ARG2 ARG1
[40] LOAD 433 40
(RSP + -56) PTRSUB RSP -56
f() CAST f()
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[f()] LOAD 433 f()
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
f() CALL func (RSP + -56)
(FS_OFFSET + 40) INT_ADD 0 40
[f()] COPY [f()]
 RETURN 1
 RETURN 0 [f()]
 CALL libcall___stack_chk_fail_thunk
f() CALL func ARG1 ARG2 ARG1
[(f() + 40)] LOAD 433 (f() + 40)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -88) PTRSUB RSP -88
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (0 INT_EQUAL [(f() + 40)])
f() CALL func (RSP + -88) 46 -1
 CBRANCH (f() INT_EQUAL -1)
(f() / 2147483647) SUBPIECE f() 8
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
(f() + 40) CAST (f() + 40)
0 INT_EQUAL f() -1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 2
1 COPY 1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 2)
f() CALL func (RSP + -88)
(RSP + -88) PTRSUB RSP -88
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
~(f()) BOOL_NEGATE f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -88) PTRSUB RSP -88
 CBRANCH (f() INT_EQUAL 1)
f() CALL func (RSP + -88)
 CBRANCH ~(f())
0 INT_EQUAL f() 1
f() CALL func (f() / 2147483647) (f() / 2147483647) A_Stack[-0x48]:8 A_Stack[-0x40]:8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
4585993 PTRSUB 0 4585993
0 INT_EQUAL f() 0
 CALL func (RSP + -72) 4585993
(RSP + -72) PTRSUB RSP -72
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (f() / 2147483647) (f() / 2147483647) f() f()
0 INT_NOTEQUAL f() 0
4586130 PTRSUB 0 4586130
 CALL func (RSP + -56) 4586130
(RSP + -56) PTRSUB RSP -56
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -88) PTRSUB RSP -88
f() CALL func (RSP + -88) 0 f()
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func ARG1 ARG2 ARG1
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
f() CALL func (RSP + -104) 46 -1
(RSP + -104) PTRSUB RSP -104
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
 CBRANCH (f() INT_EQUAL -1)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL f() -1
(f() / 2147483647) SUBPIECE f() 8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f() INT_EQUAL 1)
(RSP + -104) PTRSUB RSP -104
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -104)
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() 1
 CBRANCH f()
(RSP + -56) PTRSUB RSP -56
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
 CALL func (RSP + -56)
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -104)
4585993 PTRSUB 0 4585993
f() CALL func (f() / 2147483647) (f() / 2147483647) A_Stack[-0x58]:8 A_Stack[-0x50]:8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -88) PTRSUB RSP -88
 CBRANCH (f() INT_EQUAL 2)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 2
(RSP + -104) PTRSUB RSP -104
0 INT_EQUAL f() 0
 CALL func (RSP + -88) 4585993
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
0 COPY 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -72) PTRSUB RSP -72
f() CALL func (f() / 2147483647) (f() / 2147483647) f() f()
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CALL func (RSP + -72) 4586130
4586130 PTRSUB 0 4586130
f() CALL func (RSP + -104) f() -1 f()
 BRANCH VZERO
 CALL func (RSP + -56)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -56) PTRSUB RSP -56
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -104) PTRSUB RSP -104
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
 RETURN 0 f()
 BRANCH VZERO
1 COPY 1
 CALL func (RSP + -40) 4586133
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
4586133 PTRSUB 0 4586133
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) COPY (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 RETURN 1
 RETURN 0 (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 CALL libcall___stack_chk_fail_thunk
f() CALL func ARG1 (RSP + -184) (RSP + -184)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
f() CALL func (RSP + -200)
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -184)
(f() / 2147483647) SUBPIECE f() 8
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
[40] LOAD 433 40
(f() / 2147483647) SUBPIECE f() 0
(RSP + -184) PTRSUB RSP -184
40 CAST 40
 CALL func (RSP + -184)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) INT_RIGHT f() 64
(RSP + -184) PTRSUB RSP -184
(f() / 2147483647) SUBPIECE f() 0
0 INT_XOR f() 1
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
0 COPY 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -184) PTRSUB RSP -184
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 RETURN 0 0
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func ARG1 (RSP + -184) (RSP + -184)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
f() CALL func (RSP + -200)
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -184)
(f() / 2147483647) SUBPIECE f() 8
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
[40] LOAD 433 40
(f() / 2147483647) SUBPIECE f() 0
(RSP + -184) PTRSUB RSP -184
40 CAST 40
 CALL func (RSP + -184)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) INT_RIGHT f() 64
(RSP + -184) PTRSUB RSP -184
(f() / 2147483647) SUBPIECE f() 0
0 INT_XOR f() 1
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
0 COPY 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -184) PTRSUB RSP -184
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 0 0
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
f() CALL func ARG1 (RSP + -184) (RSP + -184)
f() CALL func (RSP + -200)
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -184)
(f() / 2147483647) SUBPIECE f() 8
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
[40] LOAD 433 40
(f() / 2147483647) SUBPIECE f() 0
(RSP + -184) PTRSUB RSP -184
40 CAST 40
 CALL func (RSP + -184)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) INT_RIGHT f() 64
(RSP + -184) PTRSUB RSP -184
(f() / 2147483647) SUBPIECE f() 0
0 INT_XOR f() 1
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
0 COPY 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -184) PTRSUB RSP -184
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
 RETURN 0 0
f() CALL func ARG1 (RSP + -184) (RSP + -184)
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -184)
(f() / 2147483647) SUBPIECE f() 8
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
[40] LOAD 433 40
(f() / 2147483647) SUBPIECE f() 0
(RSP + -184) PTRSUB RSP -184
40 CAST 40
 CALL func (RSP + -184)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) INT_RIGHT f() 64
(RSP + -184) PTRSUB RSP -184
(f() / 2147483647) SUBPIECE f() 0
0 INT_XOR f() 1
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
0 COPY 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -184) PTRSUB RSP -184
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
f() CALL func (RSP + -200)
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
 RETURN 0 0
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
f() CALL func ARG1 (RSP + -184) (RSP + -184)
 CALL func (RSP + -184)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
[40] LOAD 433 40
(f() / 2147483647) SUBPIECE f() 0
(RSP + -184) PTRSUB RSP -184
40 CAST 40
 CALL func (RSP + -184)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) INT_RIGHT f() 64
(RSP + -184) PTRSUB RSP -184
(f() / 2147483647) SUBPIECE f() 0
0 INT_XOR f() 1
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
0 COPY 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -184) PTRSUB RSP -184
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
f() CALL func (RSP + -200)
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
 RETURN 0 0
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
f() CALL func ARG1 (RSP + -184) (RSP + -184)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
[40] LOAD 433 40
(f() / 2147483647) SUBPIECE f() 0
(RSP + -184) PTRSUB RSP -184
40 CAST 40
 CALL func (RSP + -184)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) INT_RIGHT f() 64
(RSP + -184) PTRSUB RSP -184
(f() / 2147483647) SUBPIECE f() 0
0 INT_XOR f() 1
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
0 COPY 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -184) PTRSUB RSP -184
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
f() CALL func (RSP + -200)
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -184)
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
 RETURN 0 0
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
f() CALL func ARG1
 RETURN 0 0
0 INT_XOR f() 1
0 COPY 0
(ARG1 + 24) PTRADD ARG1 3 8
ARG1 CAST ARG1
 STORE 433 ARG1 0
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
ARG1 CAST ARG1
(ARG1 + 40) PTRADD ARG1 5 8
 STORE 433 (ARG1 + 28) 0
(ARG1 + 28) CAST (ARG1 + 28)
 STORE 433 (ARG1 + 16) 0
(ARG1 + 40) CAST (ARG1 + 40)
 STORE 433 (ARG1 + 44) 65535
(ARG1 + 24) CAST (ARG1 + 24)
 STORE 433 (ARG1 + 32) 0
(ARG1 + 28) INT_ADD ARG1 28
 STORE 433 (ARG1 + 24) 0
 STORE 433 (ARG1 + 8) 0
 RETURN 0
(ARG1 + 44) INT_ADD ARG1 44
 STORE 433 (ARG1 + 40) 0
(ARG1 + 44) CAST (ARG1 + 44)
 STORE 433 (ARG1 + 32) ARG9
 STORE 433 (ARG1 + 44) ARG3
 STORE 433 ARG1 ARG4
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 40) PTRADD ARG1 5 8
(ARG1 + 24) PTRADD ARG1 3 8
ARG1 CAST ARG1
ARG1 CAST ARG1
 STORE 433 (ARG1 + 40) ARG2
 STORE 433 (ARG1 + 8) ARG5
 STORE 433 (ARG1 + 16) ARG6
 STORE 433 (ARG1 + 24) ARG7
 STORE 433 (ARG1 + 28) ARG8
(ARG1 + 40) CAST (ARG1 + 40)
(ARG1 + 24) CAST (ARG1 + 24)
 RETURN 0
(ARG1 + 28) INT_ADD ARG1 28
(ARG1 + 44) INT_ADD ARG1 44
(ARG1 + 44) CAST (ARG1 + 44)
(ARG1 + 28) CAST (ARG1 + 28)
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 40) PTRADD ARG1 5 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 0
ARG1 CAST ARG1
(ARG1 + 24) PTRADD ARG1 3 8
ARG1 CAST ARG1
 STORE 433 (ARG1 + 40) ARG2
 STORE 433 (ARG1 + 32) 0
(ARG1 + 28) INT_ADD ARG1 28
 STORE 433 (ARG1 + 24) 0
 RETURN 0
(ARG1 + 44) CAST (ARG1 + 44)
 STORE 433 (ARG1 + 8) 0
(ARG1 + 28) CAST (ARG1 + 28)
(ARG1 + 44) INT_ADD ARG1 44
(ARG1 + 40) CAST (ARG1 + 40)
 STORE 433 (ARG1 + 28) 0
 STORE 433 (ARG1 + 16) 0
(ARG1 + 24) CAST (ARG1 + 24)
 STORE 433 (ARG1 + 44) 65535
(ARG2 + 32) PTRADD ARG2 4 8
ARG2 CAST ARG2
(ARG2 + 24) PTRADD ARG2 3 8
(ARG2 + 24) PTRADD ARG2 3 8
(ARG2 + 24) PTRADD ARG2 3 8
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 24) PTRADD ARG2 3 8
(ARG2 + 48) PTRADD ARG2 6 8
(ARG2 + 24) PTRADD ARG2 3 8
(ARG2 + 24) PTRADD ARG2 3 8
(ARG2 + 88) PTRADD ARG2 11 8
(ARG2 + 24) PTRADD ARG2 3 8
(ARG3 + 40) PTRADD ARG3 5 8
(ARG3 + 24) PTRADD ARG3 3 8
(ARG3 + 8) PTRADD ARG3 1 8
(ARG3 + 8) PTRADD ARG3 1 8
(ARG3 + 32) PTRADD ARG3 4 8
(ARG3 + 32) PTRADD ARG3 4 8
(ARG3 + 16) PTRADD ARG3 2 8
(ARG3 + 40) PTRADD ARG3 5 8
 STORE 433 ARG3 A_Stack[-0x58]:8
(ARG3 + 24) PTRADD ARG3 3 8
 STORE 433 ARG3 A_Stack[-0x58]:8
(ARG3 + 24) PTRADD ARG3 3 8
(ARG3 + 8) PTRADD ARG3 1 8
(ARG3 + 32) PTRADD ARG3 4 8
(ARG3 + 16) PTRADD ARG3 2 8
(ARG3 + 16) PTRADD ARG3 2 8
 STORE 433 ARG3 A_Stack[-0x58]:8
(ARG3 + 40) PTRADD ARG3 5 8
0 INT_EQUAL ARG1 0
0 INT_EQUAL 0 [(f() + 40)]
 CBRANCH (ARG1 INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
 CBRANCH (([(ARG2 + 24)] & 61440) INT_EQUAL 16384)
3 COPY 3
 BRANCH VZERO
 CBRANCH (([(ARG2 + 24)] & 61440) INT_EQUAL 32768)
0 INT_EQUAL ([(ARG2 + 24)] & 61440) 32768
(ARG2 + 24) CAST (ARG2 + 24)
([(ARG2 + 24)] & 61440) INT_AND [(ARG2 + 24)] 61440
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
 CBRANCH (([(ARG2 + 24)] & 61440) INT_EQUAL 4096)
7 COPY 7
 BRANCH VZERO
 CBRANCH (([(ARG2 + 24)] & 61440) INT_EQUAL 49152)
(ARG2 + 24) CAST (ARG2 + 24)
0 INT_EQUAL ([(ARG2 + 24)] & 61440) 49152
([(ARG2 + 24)] & 61440) INT_AND [(ARG2 + 24)] 61440
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
(ARG2 + 28) CAST (ARG2 + 28)
 CALL func (RSP + -88)
f() CALL libcall_generic_category_thunk
(ARG2 + 32) CAST (ARG2 + 32)
[(ARG2 + 48)] LOAD 433 (ARG2 + 48)
(RSP + -88) PTRSUB RSP -88
 STORE 433 (ARG3 + 40) A_Stack[-0x30]:8
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(ARG2 + 24) CAST (ARG2 + 24)
[(ARG2 + 88)] LOAD 433 (ARG2 + 88)
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
[(ARG2 + 28)] LOAD 433 (ARG2 + 28)
(RSP + -88) PTRSUB RSP -88
9 COPY 9
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
 CALL func (RSP + -88) f() [(ARG2 + 24)] [ARG2] [(ARG2 + 8)] [(ARG2 + 88)] [(ARG2 + 28)] [(ARG2 + 32)] [(ARG2 + 48)]
(RSP + -88) PTRSUB RSP -88
 STORE 433 (ARG3 + 16) A_Stack[-0x48]:8
 CALL func (RSP + -88) 2
0 INT_EQUAL ([(ARG2 + 24)] & 61440) 16384
([(ARG2 + 24)] & 61440) INT_AND [(ARG2 + 24)] 61440
(ARG2 + 24) CAST (ARG2 + 24)
 STORE 433 (ARG3 + 8) A_Stack[-0x50]:8
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -104) [f()] f() [f()]
(ARG2 + 28) INT_ADD ARG2 28
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
 STORE 433 (ARG3 + 32) A_Stack[-0x38]:8
f() CALL func (RSP + -104) (RSP + -88) (RSP + -88)
(RSP + -104) PTRSUB RSP -104
(RSP + -88) PTRSUB RSP -88
 STORE 433 (ARG3 + 24) A_Stack[-0x40]:8
0 INT_EQUAL ([(ARG2 + 24)] & 61440) 24576
([(ARG2 + 24)] & 61440) INT_AND [(ARG2 + 24)] 61440
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
2 COPY 2
 CBRANCH (([(ARG2 + 24)] & 61440) INT_EQUAL 24576)
 BRANCH VZERO
(ARG2 + 24) CAST (ARG2 + 24)
8 COPY 8
(f() # f()) INT_AND (f() # f()) -1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (f() # f())
(f() # f()) PIECE f() f()
 RETURN 1
(ARG2 + 24) CAST (ARG2 + 24)
0 INT_EQUAL ([(ARG2 + 24)] & 61440) 8192
([(ARG2 + 24)] & 61440) INT_AND [(ARG2 + 24)] 61440
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
5 COPY 5
 CBRANCH (([(ARG2 + 24)] & 61440) INT_EQUAL 8192)
 BRANCH VZERO
 CALL func (RSP + -88) 1
 STORE 433 (ARG3 + 8) A_Stack[-0x50]:8
 STORE 433 (ARG3 + 24) A_Stack[-0x40]:8
(RSP + -88) PTRSUB RSP -88
 STORE 433 (ARG3 + 40) A_Stack[-0x30]:8
 STORE 433 (ARG3 + 16) A_Stack[-0x48]:8
(RSP + -88) PTRSUB RSP -88
 STORE 433 (ARG3 + 32) A_Stack[-0x38]:8
 STORE 433 (ARG3 + 8) A_Stack[-0x50]:8
 CALL func (RSP + -88) 0
 BRANCH VZERO
 STORE 433 (ARG3 + 24) A_Stack[-0x40]:8
A_Stack[-0x60]:8 COPY A_Stack[-0x60]:8
A_Stack[-0x68]:8 COPY A_Stack[-0x68]:8
 STORE 433 (ARG3 + 40) A_Stack[-0x30]:8
A_Stack[-0x60]:8 COPY A_Stack[-0x60]:8
A_Stack[-0x68]:8 COPY A_Stack[-0x68]:8
 STORE 433 (ARG3 + 16) A_Stack[-0x48]:8
 STORE 433 (ARG3 + 32) A_Stack[-0x38]:8
 BRANCH VZERO
(ARG2 + 24) CAST (ARG2 + 24)
0 INT_EQUAL ([(ARG2 + 24)] & 61440) 4096
([(ARG2 + 24)] & 61440) INT_AND [(ARG2 + 24)] 61440
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
6 COPY 6
f() CALL func ARG1 (RSP + -200) (RSP + -200)
f() CALL func f() (RSP + -344) ARG2 (RSP + -344)
40 CAST 40
(RSP + -344) PTRSUB RSP -344
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f() (RSP + -344) f()
(f() / 2147483647) SUBPIECE f() 0
(RSP + -200) PTRSUB RSP -200
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 8
(RSP + -344) PTRSUB RSP -344
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -200) PTRSUB RSP -200
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func (RSP + -360)
(RSP + -360) PTRSUB RSP -360
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -200)
 CALL func (RSP + -200)
(f() / 2147483647) SUBPIECE f() 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
(f() / 2147483647) SUBPIECE f() 8
f() INT_AND f() -1
 RETURN 1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 ARG2
 STORE 433 (ARG1 + 8) ARG3
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -40) [ARG1] [(ARG1 + 8)] [ARG1]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 0 (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) COPY (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 (f() / 2147483647)
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_EQUAL 0)
0 INT_NOTEQUAL 0 [(f() + 40)]
0 INT_EQUAL f() 0
(f() + 40) CAST (f() + 40)
(RSP + -88) PTRSUB RSP -88
(FS_OFFSET + 40) INT_ADD 0 40
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -88)
f() CALL func (RSP + -120)
0 COPY 0
(RSP + 8) PTRSUB RSP 8
f() CALL func (RSP + 8) (RSP + -88)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(RSP + -88) PTRSUB RSP -88
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -120) PTRSUB RSP -120
0 COPY 0
(RSP + -88) PTRSUB RSP -88
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
 STORE 433 (ARG1 + 8) (f() / 4611686014132420609)
(RSP + -104) PTRSUB RSP -104
 BRANCH VZERO
(A_Stack[-0x74]:4 # f()) PIECE A_Stack[-0x74]:4 f()
 CALL func (RSP + -104)
f() CALL func (RSP + -88)
A_Stack[-0x60]:8 COPY A_Stack[-0x60]:8
(f() / 2147483647) INT_RIGHT f() 64
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (f() # f())
(f() # f()) INT_AND (f() # f()) -1
 RETURN 1
(f() # f()) PIECE f() f()
f() CALL func ARG1 ARG2 ARG3 0 ARG4 1
 RETURN 0 f()
f() INT_AND f() -1
f() CALL func ARG1 (RSP + -36) ARG2 0 0 2
40 CAST 40
(RSP + -36) PTRSUB RSP -36
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
f() INT_AND f() -1
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
(ARG2 | ARG1) INT_OR ARG2 ARG1
 RETURN 0 (ARG2 | ARG1)
(ARG2 | ARG1) COPY (ARG2 | ARG1)
f() CALL func (RSP + -232) ARG2 ARG3 1 f() ARG4
f() CALL func ARG1 (RSP + -200) (RSP + -200)
(RSP + -248) PTRSUB RSP -248
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -200) PTRSUB RSP -200
 CBRANCH (f() INT_NOTEQUAL -1)
0 INT_NOTEQUAL f() -1
 CALL func (RSP + -200)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -200) PTRSUB RSP -200
f() CALL func (RSP + -248) 47 0
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 0 f()
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
f() INT_AND f() -1
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
0 COPY 0
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Path.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Path.cpp
f() CALL func 256 128
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -200) PTRSUB RSP -200
[40] LOAD 433 40
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -232) f() f()
(f() / 2147483647) SUBPIECE f() 0
(RSP + -232) PTRSUB RSP -232
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
 CALL libcall___assert_fail_thunk 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Path.cpp 699 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -248) PTRSUB RSP -248
(f() / 2147483647) SUBPIECE f() 8
40 CAST 40
 CALL func (RSP + -200)
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -248)
(RSP + -232) PTRSUB RSP -232
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 STORE 433 (ARG1 + 8) ARG4
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
ARG1 CAST ARG1
f() CALL func ARG1
 STORE 433 (ARG1 + 16) ARG3
 STORE 433 (ARG1 + 17) ARG5
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(ARG1 + 17) INT_ADD ARG1 17
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 17) CAST (ARG1 + 17)
isValid() && "Invalid twine!" COPY isValid() && "Invalid twine!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h
 RETURN 1
 RETURN 0
 CALL libcall___assert_fail_thunk isValid() && "Invalid twine!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h 181 llvm::Twine::Twine(llvm::Twine::Child, llvm::Twine::NodeKind, llvm::Twine::Child, llvm::Twine::NodeKind)
llvm::Twine::Twine(llvm::Twine::Child, llvm::Twine::NodeKind, llvm::Twine::Child, llvm::Twine::NodeKind) COPY llvm::Twine::Twine(llvm::Twine::Child, llvm::Twine::NodeKind, llvm::Twine::Child, llvm::Twine::NodeKind)
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 17) INT_ADD ARG1 17
f() CALL func ARG1
 STORE 433 (ARG1 + 16) ARG2
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 STORE 433 (ARG1 + 17) 1
(ARG1 + 17) CAST (ARG1 + 17)
 RETURN 1
llvm::Twine::Twine(llvm::Twine::NodeKind) COPY llvm::Twine::Twine(llvm::Twine::NodeKind)
isNullary() && "Invalid kind!" COPY isNullary() && "Invalid kind!"
 RETURN 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h
 CALL libcall___assert_fail_thunk isNullary() && "Invalid kind!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h 167 llvm::Twine::Twine(llvm::Twine::NodeKind)
 CALL func ARG1 f(ARG2) f() f(ARG3) f()
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 0
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 [ARG3]
(ARG1 + 16) PTRADD ARG1 2 8
ARG1 COPY ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 [ARG2]
(ARG2 + 8) PTRADD ARG2 1 8
ARG2 COPY ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 16) PTRADD ARG2 2 8
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG3
[ARG3] LOAD 433 ARG3
f() CALL func ARG3
ARG3 COPY ARG3
f() CALL func ARG3
(ARG3 + 8) PTRADD ARG3 1 8
[ARG3] LOAD 433 ARG3
f() CALL func ARG3
(ARG3 + 16) PTRADD ARG3 2 8
(f() + 40) CAST (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH f()
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL f() 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 STORE 433 (ARG1 + 16) [(ARG2 + 16)]
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 STORE 433 (ARG1 + 8) [(ARG2 + 8)]
2 COPY 2
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 BRANCH VZERO
2 COPY 2
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
0 INT_EQUAL f() 0
 BRANCH VZERO
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
[(ARG3 + 16)] LOAD 433 (ARG3 + 16)
 STORE 433 (ARG1 + 8) [(ARG3 + 8)]
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
0 INT_EQUAL f() 0
 BRANCH VZERO
 STORE 433 (ARG1 + 16) [(ARG3 + 16)]
[ARG3] CAST [ARG3]
[ARG2] CAST [ARG2]
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG3 ARG2
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
f() CALL func (RSP + -56) ARG4 ARG5 ARG6
(RSP + -152) PTRSUB RSP -152
f() CALL func (RSP + -200)
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -56) (RSP + -120) (RSP + -88) (RSP + -120)
40 CAST 40
 CALL func (RSP + -152) f(-%%%%%% , -%%%%%%.) f(-%%%%%% , -%%%%%%.)
(RSP + -152) PTRSUB RSP -152
(RSP + -120) PTRSUB RSP -120
(RSP + -88) PTRSUB RSP -88
(RSP + -200) PTRSUB RSP -200
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (RSP + -120) ARG1 (RSP + -152) ARG1
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -88) PTRSUB RSP -88
 CBRANCH (f() INT_EQUAL 0)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f() 0
(RSP + -200) PTRSUB RSP -200
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -88) (RSP + -200) (RSP + -200)
[40] LOAD 433 40
-%%%%%%. COPY -%%%%%%.
-%%%%%% COPY -%%%%%%
 BRANCH VZERO
 CALL libcall___stack_chk_fail_thunk
f() INT_AND f() -1
 RETURN 1
 RETURN 0 f()
f() CALL func ARG1 ARG2 ARG3 ARG4 ARG5 1
 RETURN 0 f()
f() INT_AND f() -1
f() CALL func ARG1 ARG2 ARG3 (RSP + -36) ARG4 2
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -36) PTRSUB RSP -36
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
f() INT_AND f() -1
 RETURN 1
 CALL func (RSP + -56) ARG1 (RSP + -88) ARG1
f() CALL func (RSP + -56) (RSP + -92) ARG2 1 0 0
[40] LOAD 433 40
(RSP + -88) PTRSUB RSP -88
(RSP + -88) PTRSUB RSP -88
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -92) PTRSUB RSP -92
 CALL func (RSP + -88) -%%%%%%
-%%%%%% COPY -%%%%%%
(FS_OFFSET + 40) INT_ADD 0 40
40 CAST 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
f() INT_AND f() -1
 CALL func ARG1
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 1 8
 CBRANCH ([ARG1] INT_EQUAL [ARG2])
0 INT_EQUAL [ARG1] [ARG2]
 RETURN 0 f()
 CBRANCH ([(ARG1 + 8)] INT_EQUAL [(ARG2 + 8)])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_EQUAL [(ARG1 + 8)] [(ARG2 + 8)]
0 COPY 0
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
1 COPY 1
 BRANCH VZERO
 CALL func ARG1 (f() * 2) (f() * 2)
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1
 CALL func ARG1 f() f()
 CALL func ARG1 f() (f() + f()) f()
 CALL func ARG1 4096
f() CALL func ARG1
0 INT_NOTEQUAL f() 0
(f() + 40) CAST (f() + 40)
(A_Stack[-0x130]:8 # A_Stack[-0x138]:8) PIECE A_Stack[-0x130]:8 A_Stack[-0x138]:8
[(f() + 40)] LOAD 433 (f() + 40)
4586402 COPY 4586402
 CALL func (RSP + -120)
(RSP + -120) PTRSUB RSP -120
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() [(f() + 40)]
(RSP + -168) PTRSUB RSP -168
f() CALL libcall_getenv_thunk 4586402
 CALL func (RSP + -168)
 CBRANCH f()
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(A_Stack[-0x120]:8 # A_Stack[-0x128]:8) PIECE A_Stack[-0x120]:8 A_Stack[-0x128]:8
 CBRANCH (f() INT_NOTEQUAL 0)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL libcall_strlen_thunk f()
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CAST f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -280)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -280) PTRSUB RSP -280
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH ([f()] INT_NOTEQUAL 12)
0 INT_NOTEQUAL [f()] 12
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() # f()) PIECE f() f()
(f() / 2147483647) SUBPIECE f() 0
(f() # f()) INT_AND (f() # f()) -1
 RETURN 1
 RETURN 0 (f() # f())
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() * 2) INT_MULT f() 2
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CAST f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
[f()] LOAD 433 f()
0 INT_NOTEQUAL f() 0
f() CALL libcall___errno_location_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
(RSP + -280) PTRSUB RSP -280
(f() / 2147483647) SUBPIECE f() 8
f() CALL libcall_generic_category_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
f() CALL libcall_getcwd_thunk f() f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -280) [f()] f() [f()]
 CBRANCH (f() INT_NOTEQUAL 1)
0 COPY 0
0 COPY 0
f() CALL func (RSP + -200) (RSP + -120) (RSP + -120)
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -200) 4585993
f() CALL func (RSP + -328)
(A_Stack[-0x120]:8 # A_Stack[-0x128]:8) PIECE A_Stack[-0x120]:8 A_Stack[-0x128]:8
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(A_Stack[-0x130]:8 # A_Stack[-0x138]:8) PIECE A_Stack[-0x130]:8 A_Stack[-0x138]:8
(RSP + -328) PTRSUB RSP -328
4585993 PTRSUB 0 4585993
(RSP + -200) PTRSUB RSP -200
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -264) f() f()
(RSP + -264) PTRSUB RSP -264
(A_Stack[-0x120]:8 # A_Stack[-0x128]:8) PIECE A_Stack[-0x120]:8 A_Stack[-0x128]:8
f() CALL func (RSP + -264)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(A_Stack[-0x130]:8 # A_Stack[-0x138]:8) PIECE A_Stack[-0x130]:8 A_Stack[-0x138]:8
(RSP + -264) PTRSUB RSP -264
 CALL func (RSP + -232) f() f()
f() CALL func (RSP + -344)
0 COPY 0
(RSP + -232) PTRSUB RSP -232
(RSP + -232) PTRSUB RSP -232
0 INT_NOTEQUAL f() 1
(RSP + -168) PTRSUB RSP -168
(A_Stack[-0x120]:8 # A_Stack[-0x128]:8) PIECE A_Stack[-0x120]:8 A_Stack[-0x128]:8
(A_Stack[-0x130]:8 # A_Stack[-0x138]:8) PIECE A_Stack[-0x130]:8 A_Stack[-0x138]:8
(RSP + -344) PTRSUB RSP -344
f() CALL func (RSP + -232) (RSP + -168) (RSP + -168)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -280)
(f() + f()) PTRADD f() f() 1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL libcall_strlen_thunk f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -280) PTRSUB RSP -280
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -168)
f() CALL func (RSP + -312) (RSP + -296) (RSP + -296)
(RSP + -312) PTRSUB RSP -312
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -296) PTRSUB RSP -296
(f() / 2147483647) SUBPIECE f() 0
(RSP + -168) PTRSUB RSP -168
(RSP + -120) PTRSUB RSP -120
0 INT_NOTEQUAL f() 0
f() CALL func (RSP + -120)
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 (RSP + -200) (RSP + -200)
f() CALL func ARG1
f() CALL func ARG1
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
f() CALL func (RSP + -392)
(RSP + -568) PTRSUB RSP -568
0 INT_EQUAL f() 0
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -392) PTRSUB RSP -392
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(RSP + -568) PTRSUB RSP -568
(RSP + -392) PTRSUB RSP -392
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -392) (RSP + -568) (RSP + -568)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -568) f() f()
[(f() + 40)] LOAD 433 (f() + 40)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(A_Stack[-0x1f0]:8 # A_Stack[-0x1f8]:8) PIECE A_Stack[-0x1f0]:8 A_Stack[-0x1f8]:8
(RSP + -392) PTRSUB RSP -392
(A_Stack[-0x200]:8 # A_Stack[-0x208]:8) PIECE A_Stack[-0x200]:8 A_Stack[-0x208]:8
(A_Stack[-0x210]:8 # A_Stack[-0x218]:8) PIECE A_Stack[-0x210]:8 A_Stack[-0x218]:8
(A_Stack[-0x1f0]:8 # A_Stack[-0x1f8]:8) PIECE A_Stack[-0x1f0]:8 A_Stack[-0x1f8]:8
(A_Stack[-0x220]:8 # A_Stack[-0x228]:8) PIECE A_Stack[-0x220]:8 A_Stack[-0x228]:8
(A_Stack[-0x200]:8 # A_Stack[-0x208]:8) PIECE A_Stack[-0x200]:8 A_Stack[-0x208]:8
 CALL func (RSP + -392)
(A_Stack[-0x210]:8 # A_Stack[-0x218]:8) PIECE A_Stack[-0x210]:8 A_Stack[-0x218]:8
A_Stack[-0x180]:8 COPY A_Stack[-0x180]:8
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
(A_Stack[-0x220]:8 # A_Stack[-0x228]:8) PIECE A_Stack[-0x220]:8 A_Stack[-0x228]:8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -360) PTRSUB RSP -360
 CALL func (RSP + -360)
f() CALL func (RSP + -360)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(f() / 2147483647) SUBPIECE f() 8
(A_Stack[-0x184]:4 # A_Stack[-0x188]:4) PIECE A_Stack[-0x184]:4 A_Stack[-0x188]:4
(f() / 2147483647) SUBPIECE f() 8
(RSP + -360) PTRSUB RSP -360
(RSP + -360) PTRSUB RSP -360
f() CALL func (RSP + -392)
 CALL func (RSP + -360)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -392) PTRSUB RSP -392
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
(f() # f()) PIECE f() f()
(f() # f()) INT_AND (f() # f()) -1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 RETURN 0 (f() # f())
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 4611686014132420609) (f() / 2147483647)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -360) PTRSUB RSP -360
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -424) (RSP + -520) (RSP + -520)
(f() / 2147483647) INT_RIGHT f() 64
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -360)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -392) PTRSUB RSP -392
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -456) (RSP + -536) (RSP + -536)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -360) PTRSUB RSP -360
f() CALL func A_Stack[-0x238]:8 A_Stack[-0x230]:8 A_Stack[-0x238]:8
(f() / 2147483647) INT_RIGHT f() 64
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -488) PTRSUB RSP -488
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -552) PTRSUB RSP -552
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -200)
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -392)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
0 COPY 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -488) PTRSUB RSP -488
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -456) PTRSUB RSP -456
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -424) PTRSUB RSP -424
 CALL func (RSP + -200)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -392) (RSP + -504) (RSP + -504)
(RSP + -392) PTRSUB RSP -392
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL func A_Stack[-0x238]:8 A_Stack[-0x230]:8 A_Stack[-0x238]:8
(RSP + -424) PTRSUB RSP -424
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -520) PTRSUB RSP -520
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -200) (RSP + -488) (RSP + -456) (RSP + -424) (RSP + -392)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -456) PTRSUB RSP -456
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -536) PTRSUB RSP -536
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(A_Stack[-0x184]:4 # f()) PIECE A_Stack[-0x184]:4 f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -488) (RSP + -552) (RSP + -552)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -360)
(A_Stack[-0x184]:4 # f()) PIECE A_Stack[-0x184]:4 f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -392) PTRSUB RSP -392
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -504) PTRSUB RSP -504
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 4611686014132420609) (f() / 2147483647)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func ARG1 ARG2 ARG2
0 COPY 0
 RETURN 0 0
0 INT_XOR f() 1
f() CALL func ARG1 (RSP + -200) (RSP + -200)
f() CALL func (RSP + -232) ARG2
f() CALL func (RSP + -232) ARG2
[(f() + 40)] LOAD 433 (f() + 40)
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -264) (RSP + -232) (RSP + -232)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -264) PTRSUB RSP -264
(RSP + -232) PTRSUB RSP -232
(f() + 40) CAST (f() + 40)
0 COPY 0
(RSP + -232) PTRSUB RSP -232
(A_Stack[-0xf0]:8 # A_Stack[-0xf8]:8) PIECE A_Stack[-0xf0]:8 A_Stack[-0xf8]:8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -200)
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -200)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -232) PTRSUB RSP -232
 CALL func (RSP + -232) 2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -200) PTRSUB RSP -200
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(RSP + -280) PTRSUB RSP -280
(RSP + -232) PTRSUB RSP -232
(f() / 2147483647) SUBPIECE f() 0
(f() + 40) INT_ADD f() 40
(f() / 2147483647) SUBPIECE f() 0
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -232) (RSP + -280) (RSP + -280)
 CBRANCH (f() INT_EQUAL 0)
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL f() 0
(f() / 2147483647) SUBPIECE f() 8
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(RSP + -248) PTRSUB RSP -248
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (f() / 2147483647) (f() / 2147483647) (f() / 2147483647)
 CBRANCH (f() INT_EQUAL 0)
(A_Stack[-0x104]:4 # f()) PIECE A_Stack[-0x104]:4 f()
(0 # (A_Stack[-0x104]:4 # f())) PIECE 0 (A_Stack[-0x104]:4 # f())
0 INT_EQUAL f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -248)
 CBRANCH (f() INT_EQUAL 0)
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -232) PTRSUB RSP -232
(f() / 2147483647) SUBPIECE f() 0
(RSP + -280) PTRSUB RSP -280
(f() / 2147483647) SUBPIECE f() 8
(RSP + -232) PTRSUB RSP -232
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -232) (RSP + -280) (RSP + -280)
(f() / 2147483647) SUBPIECE f() 8
(A_Stack[-0x104]:4 # f()) PIECE A_Stack[-0x104]:4 f()
(0 # (A_Stack[-0x104]:4 # f())) PIECE 0 (A_Stack[-0x104]:4 # f())
 RETURN 1
f() INT_AND f() -1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 RETURN 0 f()
(RSP + -232) PTRSUB RSP -232
(A_Stack[-0x104]:4 # f()) PIECE A_Stack[-0x104]:4 f()
(0 # (A_Stack[-0x104]:4 # f())) PIECE 0 (A_Stack[-0x104]:4 # f())
f() CALL func (RSP + -264)
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -232) PTRSUB RSP -232
 CALL func (RSP + -232) (RSP + -248) (RSP + -248)
(RSP + -264) PTRSUB RSP -264
(f() / 2147483647) SUBPIECE f() 8
(RSP + -248) PTRSUB RSP -248
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
f() CALL func (RSP + -232) 1
0 INT_EQUAL f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() LOAD 433 ARG2
 STORE 433 ARG2 f()
f() CALL func ARG1 (RSP + -200) (RSP + -200)
(f() / 2147483647) SUBPIECE f() 8
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -200)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -200) PTRSUB RSP -200
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -200) PTRSUB RSP -200
f() CALL func (RSP + -232)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(f() / 2147483647) SUBPIECE f() 0
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
(f() / 2147483647) SUBPIECE f() 8
f() CAST f()
 CALL func (RSP + -200)
0 INT_SLESS 4294967295 f()
(RSP + -200) PTRSUB RSP -200
 CBRANCH (4294967295 INT_SLESS f())
[(f() + 40)] LOAD 433 (f() + 40)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -232) PTRSUB RSP -232
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
f() CALL libcall_open_thunk f() 0
(RSP + -216) PTRSUB RSP -216
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -216)
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH ([f()] INT_EQUAL 4)
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL [f()] 4
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
 CALL libcall___stack_chk_fail_thunk
(f() # f()) INT_AND (f() # f()) -1
 RETURN 0 (f() # f())
(f() # f()) PIECE f() f()
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
f() CALL libcall_generic_category_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -216) [f()] f() [f()]
(RSP + -216) PTRSUB RSP -216
[f()] LOAD 433 f()
(f() / 2147483647) SUBPIECE f() 8
f() CALL libcall___errno_location_thunk
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL func ARG1 (RSP + -88) (RSP + -88)
f() CALL func ARG2 (RSP + -84) 0
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (0 INT_EQUAL [(f() + 40)])
0 COPY 0
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
f() CALL func (RSP + -56)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -88) PTRSUB RSP -88
(RSP + -56) PTRSUB RSP -56
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ((f() / 2147483647) INT_SLESS 1)
 CBRANCH (4294967295 INT_SLESS f())
0 INT_SLESS 4294967295 f()
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 BRANCH VZERO
0 COPY 0
(RSP + -84) PTRSUB RSP -84
(A_Stack[-0x34]:4 # f()) PIECE A_Stack[-0x34]:4 f()
f() CALL func
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 CALL libcall_operator.delete[]_thunk f()
(f() / 2147483647) SUBPIECE f() 0
0 INT_SLESS (f() / 2147483647) 1
f() CALL libcall_read_thunk f() f() 4096
 RETURN 0 (f() # f())
 CALL libcall___stack_chk_fail_thunk
(f() # f()) PIECE f() f()
 RETURN 1
(f() # f()) INT_AND (f() # f()) -1
 CBRANCH (f() INT_SLESS 0)
f() CALL libcall_generic_category_thunk
 CALL func (RSP + -56)
[f()] LOAD 433 f()
(f() # f()) PIECE f() f()
f() CALL libcall___errno_location_thunk
 BRANCH VZERO
 CALL func (RSP + -56) [f()] f() [f()]
(RSP + -56) PTRSUB RSP -56
(f() # f()) PIECE f() f()
(RSP + -56) PTRSUB RSP -56
 CBRANCH ((f() / 2147483647) INT_SLESS 0)
(f() - (f() / 2147483647)) INT_SUB f() (f() / 2147483647)
 BRANCH VZERO
4096 COPY 4096
0 COPY 0
0 INT_NOTEQUAL f() 0
 BRANCH VZERO
(A_Stack[-0x34]:4 # f()) PIECE A_Stack[-0x34]:4 f()
f() CALL libcall_operator.new[]_thunk 4096
 CALL libcall_close_thunk f()
 CALL libcall_close_thunk A_Stack[-0x58]:4
0 COPY 0
 CALL libcall_close_thunk f()
 CBRANCH (f() INT_SLESS 0)
0 INT_SLESS f() 0
f() CALL libcall_write_thunk f() f() f()
f() INT_SEXT f()
(f() / 2147483647) SUBPIECE f() 0
0 INT_SLESS (f() / 2147483647) 0
0 INT_SLESS f() 0
(ARG1 + 40) INT_ADD ARG1 40
 RETURN 0 [(ARG1 + 40)]
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
[(ARG1 + 40)] COPY [(ARG1 + 40)]
(ARG1 + 40) CAST (ARG1 + 40)
0 INT_ZEXT 0
(f() & 4294967040) INT_OR (f() & 4294967040) 0
f() CALL func (RSP + 8)
0 INT_NOTEQUAL f() 0
(RSP + 8) PTRSUB RSP 8
 RETURN 0 (f() & 4294967040)
(f() & 4294967040) INT_AND f() 4294967040
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 1)
f() CALL func (RSP + 8)
0 INT_NOTEQUAL f() 1
1 COPY 1
 RETURN 0 0
 RETURN 0 1
(RSP + 8) PTRSUB RSP 8
0 INT_ZEXT 0
(f() & 4294967040) INT_OR (f() & 4294967040) 0
f() CALL func (RSP + 8)
0 INT_EQUAL f() 3
(RSP + 8) PTRSUB RSP 8
 RETURN 0 (f() & 4294967040)
(f() & 4294967040) INT_AND f() 4294967040
f() CALL func ARG1 (RSP + -88) (RSP + -88)
 STORE 433 ARG2 f()
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
0 COPY 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -88) PTRSUB RSP -88
(RSP + -104) PTRSUB RSP -104
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
f() CALL func (RSP + -104)
(RSP + -88) PTRSUB RSP -88
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -88)
(f() # f()) PIECE f() f()
 CALL libcall___stack_chk_fail_thunk
(f() # f()) INT_AND (f() # f()) -1
 RETURN 0 (f() # f())
 RETURN 1
(RSP + -104) PTRSUB RSP -104
f() CALL func
(A_Stack[-0x64]:4 # f()) PIECE A_Stack[-0x64]:4 f()
 CALL func (RSP + -104)
 BRANCH VZERO
(A_Stack[-0x64]:4 # f()) PIECE A_Stack[-0x64]:4 f()
(f() & 4294967040) INT_OR (f() & 4294967040) 0
f() CALL func (RSP + 8)
(RSP + 8) PTRSUB RSP 8
 RETURN 0 (f() & 4294967040)
(f() & 4294967040) INT_AND f() 4294967040
0 INT_EQUAL f() 2
0 INT_ZEXT 0
f() CALL func ARG1 (RSP + -88) (RSP + -88)
 STORE 433 ARG2 f()
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
f() CALL func (RSP + -104)
(RSP + -88) PTRSUB RSP -88
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -88)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
0 COPY 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -88) PTRSUB RSP -88
(RSP + -104) PTRSUB RSP -104
(f() + 40) CAST (f() + 40)
 CALL libcall___stack_chk_fail_thunk
(f() # f()) INT_AND (f() # f()) -1
 RETURN 0 (f() # f())
 RETURN 1
(f() # f()) PIECE f() f()
f() CALL func
(A_Stack[-0x64]:4 # f()) PIECE A_Stack[-0x64]:4 f()
 CALL func (RSP + -104)
 BRANCH VZERO
(A_Stack[-0x64]:4 # f()) PIECE A_Stack[-0x64]:4 f()
(RSP + -104) PTRSUB RSP -104
f() CALL func
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 1)
1 COPY 1
 RETURN 0 1
0 COPY 0
 RETURN 0 0
 CBRANCH (f() INT_NOTEQUAL 1)
f() CALL func
0 INT_NOTEQUAL f() 1
f() CALL func
0 INT_NOTEQUAL f() 1
f() CALL func ARG1 (RSP + -88) (RSP + -88)
 STORE 433 ARG2 f()
0 COPY 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -88) PTRSUB RSP -88
(RSP + -104) PTRSUB RSP -104
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
f() CALL func (RSP + -104)
(RSP + -88) PTRSUB RSP -88
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -88)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() # f()) INT_AND (f() # f()) -1
 RETURN 0 (f() # f())
 RETURN 1
(f() # f()) PIECE f() f()
 CALL libcall___stack_chk_fail_thunk
 BRANCH VZERO
(A_Stack[-0x64]:4 # f()) PIECE A_Stack[-0x64]:4 f()
(RSP + -104) PTRSUB RSP -104
f() CALL func
(A_Stack[-0x64]:4 # f()) PIECE A_Stack[-0x64]:4 f()
 CALL func (RSP + -104)
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
f(RSP) CAST f(RSP)
 RETURN 0 [f(RSP)]
f(RSP) CALL func (RSP + -16)
(RSP + -16) PTRSUB RSP -16
[f(RSP)] LOAD 433 f(RSP)
[f(RSP)] COPY [f(RSP)]
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 RETURN 0
 CALL func f() f() f()
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
f(ARG2) CAST f(ARG2)
[f(ARG1)] LOAD 433 f(ARG1)
 RETURN 0 ([f(ARG1)] - [f(ARG2)])
f(ARG1) CAST f(ARG1)
([f(ARG1)] - [f(ARG2)]) COPY ([f(ARG1)] - [f(ARG2)])
[f(ARG2)] LOAD 433 f(ARG2)
([f(ARG1)] - [f(ARG2)]) INT_SUB [f(ARG1)] [f(ARG2)]
ARG1 COPY ARG1
ARG2 COPY ARG2
 RETURN 0
(RSP + -24) PTRSUB RSP -24
 CALL func (RSP + -24) (RSP + -16) (RSP + -16)
(RSP + -16) PTRSUB RSP -16
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -48) PTRSUB RSP -48
40 CAST 40
 CALL func (RSP + -48)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
40 INT_ADD 0 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1 (f() + f()) (f() + f())
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1 (f() + f()) (f() + f())
f() CALL func ARG2 ARG3 ARG3
 CALL func ARG2 ARG3 f() ARG3
 RETURN 0
(f() - f()) CAST (f() - f())
0 INT_LESS (f() - f()) f()
(f() + f()) INT_ADD f() f()
 CBRANCH ((f() - f()) INT_LESS f())
(f() - f()) INT_SUB f() f()
(f() + f()) INT_ADD f() f()
 CALL func ARG1 ARG2 ARG3 ARG2
 CALL func ARG1 128
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
(ARG1 + 32) PTRADD ARG1 32 1
(ARG1 + 40) PTRADD ARG1 40 1
(ARG1 + 48) PTRADD ARG1 48 1
 CALL libcall_operator=_thunk ARG1 (RSP + -216)
(ARG1 + 56) PTRADD ARG1 56 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 72) PTRADD ARG1 72 1
 CALL func (RSP + -184) ARG2 (RSP + -312) (RSP + -280) (RSP + -248)
(RSP + -280) PTRSUB RSP -280
(RSP + -216) PTRSUB RSP -216
(ARG1 + 72) CAST (ARG1 + 72)
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -312) 4585813
 STORE 433 (ARG1 + 56) A_Stack[0x20]:8
4585813 PTRSUB 0 4585813
(f() / 2147483647) SUBPIECE f() 8
(ARG1 + 64) CAST (ARG1 + 64)
f() CALL libcall_begin_thunk
 STORE 433 (ARG1 + 48) A_Stack[0x18]:8
(ARG1 + 56) CAST (ARG1 + 56)
(RSP + -248) PTRSUB RSP -248
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(ARG1 + 48) CAST (ARG1 + 48)
(RSP + -216) PTRSUB RSP -216
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -312) PTRSUB RSP -312
 STORE 433 (ARG1 + 72) A_Stack[0x30]:8
40 CAST 40
 CALL func (RSP + -184) f() f() f()
4585813 PTRSUB 0 4585813
 STORE 433 (ARG1 + 64) A_Stack[0x28]:8
(RSP + -248) PTRSUB RSP -248
 CALL func (RSP + -216) (RSP + -248) (RSP + -248)
 CALL func (RSP + -248) 4585813
(RSP + -312) PTRSUB RSP -312
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall_~basic_string_thunk (RSP + -216)
[40] LOAD 433 40
(RSP + -280) PTRSUB RSP -280
(RSP + -216) CAST (RSP + -216)
(RSP + -216) PTRSUB RSP -216
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -184)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -248) PTRSUB RSP -248
4585813 PTRSUB 0 4585813
 CALL func (RSP + -184)
(RSP + -184) PTRSUB RSP -184
 STORE 433 (ARG1 + 40) A_Stack[0x10]:8
 CALL func (RSP + -280) 4585813
(RSP + -184) PTRSUB RSP -184
(ARG1 + 40) CAST (ARG1 + 40)
(f() / 2147483647) SUBPIECE f() 0
f() CALL libcall_end_thunk
 STORE 433 (ARG1 + 32) A_Stack[0x8]:8
(ARG1 + 32) CAST (ARG1 + 32)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -184) PTRSUB RSP -184
f() CALL func (RSP + -184)
(f() / 2147483647) SUBPIECE f() 8
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -184) PTRSUB RSP -184
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 STORE 433 ARG1 ARG2
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
[ARG1] LOAD 433 ARG1
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func [ARG1]
[40] LOAD 433 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
[ARG1] LOAD 433 ARG1
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
40 INT_ADD 0 40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func [ARG1]
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
ARG2 COPY ARG2
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f() INT_LESS 4)
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func (RSP + -104)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
0 INT_LESS f() 4
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -104) PTRSUB RSP -104
 CBRANCH (f() INT_EQUAL 254)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
(RSP + -84) PTRSUB RSP -84
 CBRANCH (f() INT_EQUAL 0)
f() CALL func (RSP + -104) 1
0 INT_EQUAL f() 0
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -84) 0
 CBRANCH f()
 CBRANCH (f() INT_EQUAL 250)
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 3
0 COPY 0
 CBRANCH (f() INT_EQUAL 206)
0 INT_EQUAL f() 206
 CBRANCH (f() INT_EQUAL 222)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH (f() INT_LESS 145)
 CBRANCH (f() INT_EQUAL 196)
0 INT_LESS (f() + 131) 2
0 INT_EQUAL f() 196
(f() + 131) INT_SUB f() 131
 CBRANCH ((f() + 131) INT_LESS 2)
 CBRANCH (f() INT_NOTEQUAL 90)
f() CALL func (RSP + -104)
 CBRANCH f()
f() INT_ZEXT f()
0 INT_LESS f() f()
(RSP + -104) PTRSUB RSP -104
(f() + 60) INT_ADD f() 60
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104)
f() CALL func (f() + 60)
 CBRANCH (f() INT_LESS f())
0 COPY 0
f() CALL func (RSP + -104)
0 COPY 0
28 COPY 28
0 COPY 0
 CBRANCH (f() INT_LESS 28)
0 COPY 0
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104)
0 COPY 0
(RSP + -104) PTRSUB RSP -104
0 COPY 0
 CBRANCH (f() INT_LESS 9)
0 INT_LESS f() 9
 CBRANCH f()
32 COPY 32
255 COPY 255
0 COPY 0
0 INT_LESS f() 28
 CBRANCH f()
(RSP + -84) PTRSUB RSP -84
 CALL func (RSP + -84) 19
 BRANCH VZERO
 CBRANCH f()
 CALL func (RSP + -84) 1
 BRANCH VZERO
(RSP + -84) PTRSUB RSP -84
 CBRANCH (7 INT_LESS f())
f() CALL libcall_memcmp_thunk f() !<arch>  8
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(RSP + -104) PTRSUB RSP -104
!<arch>  COPY !<arch> 
f() CALL func (RSP + -104)
f() CAST f()
 CBRANCH (f() INT_EQUAL 254)
 BRANCHIND f()
(RSP + -104) PTRSUB RSP -104
0 COPY 0
f() CALL func (RSP + -104) 0
 CBRANCH (f() INT_EQUAL 254)
0 INT_EQUAL f() 254
 CBRANCH f()
 CBRANCH (f() INT_EQUAL 104)
f() CALL func (RSP + -104) 1
0 INT_EQUAL f() 2
 CBRANCH (f() INT_EQUAL 2)
(RSP + -104) PTRSUB RSP -104
 CBRANCH (f() INT_LESS 34)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 66)
0 INT_EQUAL f() 66
 CBRANCH (f() INT_EQUAL 134)
 BRANCH VZERO
(RSP + -84) PTRSUB RSP -84
 CALL func (RSP + -84) 20
 CBRANCH (f() INT_EQUAL 190)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 4)
(RSP + -84) PTRSUB RSP -84
 BRANCH VZERO
 BRANCH VZERO
(RSP + -84) PTRSUB RSP -84
 CALL func (RSP + -84) 7
 CALL func (RSP + -84) 3
 CBRANCH (f() INT_EQUAL 206)
0 INT_EQUAL f() 250
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 0
 CBRANCH (f() INT_EQUAL 207)
0 INT_EQUAL f() 207
(RSP + -104) PTRSUB RSP -104
 CBRANCH (f() INT_EQUAL 250)
f() CALL func (RSP + -104) 1
0 INT_LESS 15 f()
(RSP + -104) PTRSUB RSP -104
 CBRANCH f()
 CBRANCH (15 INT_LESS f())
f() CALL func (RSP + -104) 0
f() CALL func (RSP + -104)
0 INT_EQUAL f() 206
(RSP + -104) PTRSUB RSP -104
 CBRANCH (f() INT_LESS 223)
0 INT_LESS (f() + 206) 2
 CBRANCH (f() INT_EQUAL 240)
(f() + 206) INT_SUB f() 206
0 INT_EQUAL f() 240
 CBRANCH ((f() + 206) INT_LESS 2)
 CBRANCH (f() INT_SLESS 3)
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 3)
0 INT_EQUAL f() 3
 BRANCH VZERO
1 COPY 1
f() CALL func (RSP + -104) 3
 CBRANCH (f() INT_EQUAL 207)
(RSP + -104) PTRSUB RSP -104
0 INT_EQUAL f() 207
 CBRANCH f()
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) f() f()
0 INT_EQUAL f() 0
f() CALL func (RSP + -104) 5
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 2
 CBRANCH 0
0 CAST 0
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -84) 20
(RSP + -84) PTRSUB RSP -84
 BRANCH VZERO
 CBRANCH (13 INT_LESS f())
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104)
0 INT_LESS 13 f()
 CBRANCH (f() INT_EQUAL 100)
f() CALL func (RSP + -104) 1
0 INT_EQUAL f() 134
0 INT_LESS f() 101
(RSP + -104) PTRSUB RSP -104
 CBRANCH (f() INT_LESS 101)
 CBRANCH (f() INT_EQUAL 254)
0 INT_EQUAL f() 186
 CBRANCH (f() INT_EQUAL 186)
f() CALL func (RSP + -104) 2
(RSP + -104) PTRSUB RSP -104
 CBRANCH (f() INT_EQUAL 76)
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 1
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
(RSP + -84) PTRSUB RSP -84
 CALL func (RSP + -84) 0
 CBRANCH (f() INT_EQUAL 127)
0 INT_EQUAL f() 127
(RSP + -104) PTRSUB RSP -104
 BRANCH VZERO
f() CALL func (RSP + -104) 0
f() CALL func (RSP + -104) 14
f() INT_SEXT f()
(f() | ((f() * 256) / 2147483647)) INT_OR f() ((f() * 256) / 2147483647)
f() CALL func (RSP + -104) 15
(RSP + -104) PTRSUB RSP -104
((f() * 256) / 2147483647) SUBPIECE (f() * 256) 0
(f() * 256) INT_LEFT f() 8
 BRANCH VZERO
(RSP + -104) PTRSUB RSP -104
f() INT_SEXT f()
 CBRANCH f()
 CALL func (RSP + -84) 1
 BRANCH VZERO
(RSP + -84) PTRSUB RSP -84
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH (f() INT_EQUAL 2)
 CALL func (RSP + -84) 5
0 INT_SLESS f() 3
(RSP + -84) PTRSUB RSP -84
 BRANCH VZERO
 CBRANCH (f() INT_LESS 18)
0 INT_LESS f() 128
f() CALL func (RSP + -104)
0 INT_LESS f() 18
f() INT_ZEXT f()
 CBRANCH (f() INT_LESS 128)
(RSP + -104) PTRSUB RSP -104
0 COPY 0
(RSP + -104) PTRSUB RSP -104
 CBRANCH (f() INT_NOTEQUAL 69)
f() CALL func (RSP + -104) 1
0 INT_NOTEQUAL f() 69
 CBRANCH (f() INT_EQUAL 255)
f() CALL func (RSP + -104) 2
0 INT_EQUAL f() 255
(RSP + -104) PTRSUB RSP -104
0 COPY 0
(RSP + -104) PTRSUB RSP -104
0 INT_EQUAL f() 76
 CBRANCH (f() INT_EQUAL 67)
f() CALL func (RSP + -104) 1
0 INT_EQUAL f() 67
 CBRANCH (f() INT_EQUAL 192)
f() CALL func (RSP + -104) 2
 CBRANCH (f() INT_EQUAL 23)
0 COPY 0
0 INT_EQUAL f() 23
(RSP + -104) PTRSUB RSP -104
 CBRANCH f()
 CBRANCH (f() INT_LESS 8)
f() CALL func (RSP + -104)
0 INT_LESS f() 8
(RSP + -104) PTRSUB RSP -104
 CBRANCH (f() INT_EQUAL 0)
 CALL func (RSP + -84) 20
 BRANCH VZERO
(RSP + -84) PTRSUB RSP -84
 CBRANCH (f() INT_NOTEQUAL 70)
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 80)
 BRANCH VZERO
(RSP + -84) PTRSUB RSP -84
 CALL func (RSP + -84) 22
(RSP + -84) PTRSUB RSP -84
 CALL func (RSP + -84) 2
 BRANCH VZERO
(f() + 4) INT_ADD f() 4
f() INT_ZEXT f()
 CALL func (RSP + -84) 21
f() CALL func (RSP + -104)
(RSP + -84) PTRSUB RSP -84
 CBRANCH (f() INT_LESS 2)
 BRANCH VZERO
(RSP + -104) PTRSUB RSP -104
f() CALL func (f() + 4)
0 INT_LESS f() 2
 CBRANCH (f() INT_EQUAL 202)
 CBRANCH (f() INT_LESS 203)
f() CALL func (RSP + -104) 1
(RSP + -104) PTRSUB RSP -104
0 INT_EQUAL f() 254
0 INT_LESS f() 203
 CBRANCH (f() INT_NOTEQUAL 76)
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 2
0 INT_NOTEQUAL f() 76
 CBRANCH (f() INT_EQUAL 237)
f() CALL func (RSP + -104) 2
0 INT_EQUAL f() 237
(RSP + -104) PTRSUB RSP -104
 CBRANCH (f() INT_NOTEQUAL 77)
0 INT_LESS f() 78
(RSP + -104) PTRSUB RSP -104
 CBRANCH (f() INT_LESS 78)
f() CALL func (RSP + -104) 1
0 INT_NOTEQUAL f() 90
0 INT_EQUAL f() 80
 CBRANCH (f() INT_EQUAL 102)
0 INT_EQUAL f() 102
f() CALL func (RSP + -104) 3
 CBRANCH (f() INT_EQUAL 255)
0 INT_EQUAL f() 255
(RSP + -104) PTRSUB RSP -104
(RSP + -84) PTRSUB RSP -84
 CALL func (RSP + -84) 4
 BRANCH VZERO
0 INT_SLESS 42 f()
0 COPY 0
 CBRANCH (42 INT_SLESS f())
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 7
(RSP + -104) PTRSUB RSP -104
 CBRANCH (f() INT_EQUAL 11)
f() CALL func (RSP + -104) 3
0 INT_EQUAL f() 11
0 INT_EQUAL f() 237
(RSP + -104) PTRSUB RSP -104
 CBRANCH (f() INT_EQUAL 237)
f() CALL func (RSP + -104) 1
 BRANCH VZERO
(RSP + -84) PTRSUB RSP -84
f() CALL func (RSP + -104) 1
0 INT_EQUAL f() 0
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -84) 23
4584944 PTRSUB 0 4584944
 CALL func (RSP + -84) 21
f() CALL func (RSP + -104)
(RSP + -84) PTRSUB RSP -84
 BRANCH VZERO
(f() + 12) CAST (f() + 12)
(RSP + -104) PTRSUB RSP -104
f() CALL libcall_memcmp_thunk (f() + 12) 4584944 16
 CBRANCH (f() INT_EQUAL 0)
(f() + 12) INT_ADD f() 12
0 INT_EQUAL f() 0
f() CALL func (RSP + -104) 2
 CBRANCH (f() INT_EQUAL 192)
0 INT_EQUAL f() 192
(RSP + -104) PTRSUB RSP -104
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
(RSP + -84) PTRSUB RSP -84
 CALL func (RSP + -84) 20
 CALL func (RSP + -84) 21
 BRANCH VZERO
(RSP + -84) PTRSUB RSP -84
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 144)
0 INT_LESS f() 145
0 INT_NOTEQUAL f() 70
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 3
f() CALL func (RSP + -104) 3
0 INT_EQUAL f() 254
(RSP + -104) PTRSUB RSP -104
0 INT_EQUAL f() 104
0 INT_EQUAL f() 254
 CALL func (RSP + -84) 3
0 INT_EQUAL f() 2
 BRANCH VZERO
f() CALL func (RSP + -104) f() f()
(RSP + -104) PTRSUB RSP -104
(RSP + -84) PTRSUB RSP -84
 BRANCH VZERO
(RSP + -84) PTRSUB RSP -84
0 INT_EQUAL f() 4
 CALL func (RSP + -84) 6
 CBRANCH (f() INT_EQUAL 33)
f() CALL func (RSP + -104)
(RSP + -104) PTRSUB RSP -104
0 INT_LESS 7 f()
0 INT_LESS f() 34
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
1 COPY 1
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 2
0 INT_EQUAL f() 250
f() INT_ZEXT f()
(f() + f()) CAST (f() + f())
(RSP + -104) PTRSUB RSP -104
4584932 PTRSUB 0 4584932
f() CALL libcall_memcmp_thunk (f() + f()) 4584932 4
0 INT_NOTEQUAL f() 0
f() CALL func (RSP + -104)
(f() + f()) INT_ADD f() f()
f() CALL func (RSP + -104) 12
((f() * 256) / 2147483647) SUBPIECE (f() * 256) 0
(f() | ((f() * 256) / 2147483647)) INT_OR f() ((f() * 256) / 2147483647)
(f() * 256) INT_LEFT f() 8
f() INT_SEXT f()
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 13
f() INT_SEXT f()
(RSP + -104) PTRSUB RSP -104
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 3
0 INT_EQUAL f() 222
f() CALL func (RSP + -104)
f() CALL libcall_memcmp_thunk f() (RSP + -41) 9
0 INT_NOTEQUAL f() 0
f() CAST f()
(RSP + -104) PTRSUB RSP -104
(RSP + -41) PTRSUB RSP -41
 CBRANCH (f() INT_EQUAL 222)
0 INT_EQUAL f() 144
0 INT_EQUAL f() 222
(RSP + -104) PTRSUB RSP -104
0 INT_LESS f() 223
f() CALL func (RSP + -104) 1
0 INT_EQUAL f() 192
0 INT_EQUAL f() 100
0 INT_EQUAL f() 33
(RSP + -84) PTRSUB RSP -84
 CALL func (RSP + -84) 20
 BRANCH VZERO
f() CALL func (RSP + -104) 3
0 INT_EQUAL f() 190
(RSP + -104) PTRSUB RSP -104
(RSP + -84) PTRSUB RSP -84
 BRANCH VZERO
(RSP + -84) PTRSUB RSP -84
(RSP + -84) PTRSUB RSP -84
(RSP + -84) PTRSUB RSP -84
(RSP + -84) PTRSUB RSP -84
16 COPY 16
17 COPY 17
16 COPY 16
17 COPY 17
0 INT_EQUAL f() 202
0 INT_NOTEQUAL f() 77
 CALL func (RSP + -84) 14
 BRANCH VZERO
 CALL func (RSP + -84) 13
(RSP + -84) PTRSUB RSP -84
 BRANCH VZERO
 CALL func (RSP + -84) 17
 BRANCH VZERO
 CALL func (RSP + -84) 16
 BRANCH VZERO
 CALL func (RSP + -84) 15
 BRANCH VZERO
 CALL func (RSP + -84) 9
(RSP + -84) PTRSUB RSP -84
 BRANCH VZERO
 CALL func (RSP + -84) 8
(RSP + -84) PTRSUB RSP -84
 CALL func (RSP + -84) 12
(RSP + -84) PTRSUB RSP -84
 BRANCH VZERO
 CALL func (RSP + -84) 11
(RSP + -84) PTRSUB RSP -84
 BRANCH VZERO
 CALL func (RSP + -84) 10
(RSP + -84) PTRSUB RSP -84
 BRANCH VZERO
 BRANCH VZERO
 CALL func (RSP + -84) 18
 BRANCH VZERO
f() CALL func ARG1 (RSP + -96) (RSP + -96)
 STORE 433 ARG2 f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 COPY 0
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -96) PTRSUB RSP -96
f() CALL func
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CBRANCH f()
f() CALL libcall___errno_location_thunk
 CALL func (RSP + -88) [f()] f() [f()]
(A_Stack[-0x54]:4 # f()) PIECE A_Stack[-0x54]:4 f()
 CALL func (RSP + -88) (RSP + -72) (f() / 2147483647) (RSP + -72)
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -88)
f() CALL func (A_Stack[-0x54]:4 # f()) 0 (A_Stack[-0x54]:4 # f())
f() CALL libcall_generic_category_thunk
(RSP + -72) PTRSUB RSP -72
 BRANCH VZERO
(A_Stack[-0x54]:4 # f()) PIECE A_Stack[-0x54]:4 f()
(RSP + -88) PTRSUB RSP -88
(A_Stack[-0x54]:4 # f()) PIECE A_Stack[-0x54]:4 f()
(f() / 2147483647) INT_SEXT (f() / 2147483647)
(RSP + -88) PTRSUB RSP -88
[f()] LOAD 433 f()
 CBRANCH (f() INT_EQUAL 0)
0 INT_SLESS 4294967295 (f() / 2147483647)
 BRANCH VZERO
1 COPY 1
 CBRANCH (4294967295 INT_SLESS (f() / 2147483647))
f() CALL libcall_close_thunk A_Stack[-0x60]:4
0 INT_EQUAL f() 0
(RSP + -72) PTRSUB RSP -72
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
f() CALL libcall_read_thunk A_Stack[-0x60]:4 (RSP + -72) 32
(A_Stack[-0x54]:4 # f()) PIECE A_Stack[-0x54]:4 f()
 RETURN 1
(f() # f()) INT_AND (f() # f()) -1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (f() # f())
(f() # f()) PIECE f() f()
0 COPY 0
ARG1 CAST ARG1
f() CALL func ARG1
 STORE 433 ARG1 ARG2
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 17) INT_ADD ARG1 17
(ARG1 + 17) CAST (ARG1 + 17)
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
 STORE 433 (ARG1 + 16) 4
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG1 + 17) 1
 RETURN 0
 CALL libcall___assert_fail_thunk isValid() && "Invalid twine!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h 283 llvm::Twine::Twine(const string&)
llvm::Twine::Twine(const string&) COPY llvm::Twine::Twine(const string&)
isValid() && "Invalid twine!" COPY isValid() && "Invalid twine!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h
 RETURN 1
 CALL func (RSP + -56) ARG1 ARG1
f() CALL func (RSP + -56) ARG2 ARG2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
 RETURN 1
f() INT_AND f() -1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
f() CALL libcall_realpath_thunk (RSP + -4120) ARG1
 CALL libcall_snprintf_thunk (RSP + -4120) 4096 %s/%s ARG2 ARG3
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -4120) PTRSUB RSP -4120
 CBRANCH (f() INT_EQUAL 0)
%s/%s COPY %s/%s
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() 0
(RSP + -4120) PTRSUB RSP -4120
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
(RSP + -4120) PTRSUB RSP -4120
 BRANCH VZERO
f() CALL func (RSP + -4120) (RSP + -4264) (RSP + -4264)
(RSP + -4264) PTRSUB RSP -4264
0 INT_EQUAL f() 0
1 COPY 1
f() CALL func ARG1 (RSP + -4120) ARG2 (RSP + -4120)
f() CALL func ARG1 4586378 ARG2
f() CALL func ARG1 f() ARG2 f()
[ARG2] LOAD 433 ARG2
f() CALL libcall_strchr_thunk ARG2 47
(f() + 40) CAST (f() + 40)
0 INT_EQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
 CBRANCH ([ARG2] INT_EQUAL 47)
0 INT_EQUAL [ARG2] 47
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 CALL libcall_free_thunk f()
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
(RSP + -4120) PTRSUB RSP -4120
 CBRANCH (f() INT_EQUAL 0)
4586380 COPY 4586380
f() CALL libcall_getcwd_thunk (RSP + -4120) 4096
f() CALL libcall_getenv_thunk 4586380
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
0 COPY 0
 RETURN 0 f(ARG1)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
f() COPY f()
0 INT_EQUAL f() 0
f() CALL libcall_strdup_thunk f()
0 COPY 0
 CALL libcall_free_thunk f()
f() CALL libcall_strsep_thunk (RSP + -4144) 4586385
(RSP + -4144) PTRSUB RSP -4144
 BRANCH VZERO
4586385 COPY 4586385
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
4586378 PTRSUB 0 4586378
0 INT_EQUAL f() 0
 BRANCH VZERO
0 INT_NOTEQUAL f() 0
(RSP + -4120) PTRSUB RSP -4120
0 COPY 0
0 COPY 0
 BRANCH VZERO
 CALL libcall_basic_string_thunk ARG1 (RSP + -4120)
 CALL libcall_basic_string_thunk ARG1 (RSP + -4120) f()
ARG1 COPY ARG1
 CALL libcall_basic_string_thunk ARG1 4585813
f(RSP) CALL func (RSP + -4120) ARG2 ARG2
f() CALL func (RSP + -4184)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -4200) PTRSUB RSP -4200
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -4184) PTRSUB RSP -4184
/proc/self/exe COPY /proc/self/exe
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CALL func (RSP + -4184) (RSP + -4200) (RSP + -4200)
(f() + 40) INT_ADD f() 40
 CALL func (RSP + -4200) /proc/self/exe
0 INT_NOTEQUAL 0 [(f() + 40)]
(RSP + -4200) PTRSUB RSP -4200
(RSP + -4184) PTRSUB RSP -4184
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (f(RSP) INT_NOTEQUAL 0)
 CALL libcall_allocator_thunk
(RSP + -4120) PTRSUB RSP -4120
 CALL libcall_~allocator_thunk (RSP + -4184)
(RSP + -4184) PTRSUB RSP -4184
 BRANCH VZERO
(RSP + -4184) PTRSUB RSP -4184
 CALL libcall_~allocator_thunk (RSP + -4184)
4585813 CAST 4585813
 CALL libcall_allocator_thunk
4585813 PTRSUB 0 4585813
0 INT_SLESS -1 f()
(RSP + -4120) PTRSUB RSP -4120
(RSP + -4152) PTRSUB RSP -4152
f() CAST f()
(RSP + -4200) PTRSUB RSP -4200
f() CAST f()
(RSP + -4120) CAST (RSP + -4120)
 CALL func (RSP + -4152) (RSP + -4200) (RSP + -4200)
f() CAST f()
(RSP + -4152) PTRSUB RSP -4152
0 INT_NOTEQUAL f(RSP) 0
f() CALL libcall_readlink_thunk f() (RSP + -4120) 4096
 CALL libcall_~basic_string_thunk (RSP + -4152)
(RSP + -4120) PTRSUB RSP -4120
f() CALL libcall_c_str_thunk
 CBRANCH (-1 INT_SLESS f())
 CALL libcall_allocator_thunk
(RSP + -4120) PTRSUB RSP -4120
(RSP + -4120) CAST (RSP + -4120)
(RSP + -4184) PTRSUB RSP -4184
 BRANCH VZERO
 CALL libcall_~allocator_thunk (RSP + -4184)
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 (ARG1 + 8) 0
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
 CALL func ARG1
 STORE 433 ARG1 (ARG2 + -946684800)
(ARG1 + 8) PTRADD ARG1 1 8
(ARG2 + -946684800) INT_ADD ARG2 -946684800
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) 0
(ARG1 + 16) INT_ADD ARG1 16
[40] LOAD 433 40
(RSP + -40) PTRSUB RSP -40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
(RSP + -40) PTRSUB RSP -40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(ARG1 + 16) CAST (ARG1 + 16)
40 CAST 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CALL func (RSP + -40) [(ARG1 + 16)] [(ARG1 + 16)]
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -40)
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) COPY (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 RETURN 1
 RETURN 0 (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 CALL libcall___stack_chk_fail_thunk
f() CALL func ARG1 (RSP + -200) (RSP + -200)
f() CALL func ARG2 (RSP + -360) (RSP + -360)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -408) PTRSUB RSP -408
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -360)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -360)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() / 2147483647) SUBPIECE f() 0
f() CAST f()
(RSP + -200) PTRSUB RSP -200
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(RSP + -360) PTRSUB RSP -360
f() CALL func (RSP + -408)
(RSP + -392) PTRSUB RSP -392
 CALL func (RSP + -200)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -360) PTRSUB RSP -360
f() CAST f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -200) PTRSUB RSP -200
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
f() CALL libcall_symlink_thunk f() f()
(f() + 40) CAST (f() + 40)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -360) PTRSUB RSP -360
f() CALL func (RSP + -392)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_EQUAL 4294967295)
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -200)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() 4294967295
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 0 (f() # f())
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() # f()) INT_AND (f() # f()) -1
 CALL libcall___stack_chk_fail_thunk
(f() # f()) PIECE f() f()
(RSP + -376) PTRSUB RSP -376
f() CALL libcall_generic_category_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -376)
 CALL func (RSP + -376) [f()] f() [f()]
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -376) PTRSUB RSP -376
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___lxstat_thunk 1 ARG1 ARG2
 RETURN 0
f() CALL func ARG1 (RSP + -200) (RSP + -200)
0 INT_NOTEQUAL ARG2 1
0 INT_EQUAL ARG2 1
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() / 2147483647) SUBPIECE f() 8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func (RSP + -376)
(f() / 2147483647) SUBPIECE f() 0
(f() + 40) CAST (f() + 40)
(f() / 2147483647) SUBPIECE f() 8
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -200)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -344) PTRSUB RSP -344
0 INT_EQUAL f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -200)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -376) PTRSUB RSP -376
f() CALL func f() (RSP + -344) f()
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 8
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CBRANCH ((A_Stack[-0x140]:4 & 61440) INT_EQUAL 32768)
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH ((A_Stack[-0x140]:4 & 61440) INT_EQUAL 16384)
f() CALL func (RSP + -376)
0 INT_EQUAL (A_Stack[-0x140]:4 & 61440) 16384
(A_Stack[-0x140]:4 & 61440) INT_AND A_Stack[-0x140]:4 61440
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() 4294967295
f() CAST f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL libcall_remove_thunk f()
 CBRANCH (f() INT_EQUAL 4294967295)
(RSP + -376) PTRSUB RSP -376
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH ([f()] INT_EQUAL 2)
0 INT_EQUAL (A_Stack[-0x140]:4 & 61440) 32768
(A_Stack[-0x140]:4 & 61440) INT_AND A_Stack[-0x140]:4 61440
0 INT_EQUAL [f()] 2
(f() / 2147483647) SUBPIECE f() 0
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
 CBRANCH ([f()] INT_NOTEQUAL 2)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(A_Stack[-0x160]:8 # A_Stack[-0x168]:8) PIECE A_Stack[-0x160]:8 A_Stack[-0x168]:8
 CALL func (RSP + -360) [f()] f() [f()]
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(RSP + -360) PTRSUB RSP -360
f() CALL libcall_generic_category_thunk
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (ARG2 INT_NOTEQUAL 1)
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(A_Stack[-0x160]:8 # A_Stack[-0x168]:8) PIECE A_Stack[-0x160]:8 A_Stack[-0x168]:8
f() CALL libcall_generic_category_thunk
 CBRANCH (ARG2 INT_EQUAL 1)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -360) PTRSUB RSP -360
 CALL func (RSP + -360) [f()] f() [f()]
[f()] LOAD 433 f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL libcall___errno_location_thunk
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL (A_Stack[-0x140]:4 & 61440) 40960
(A_Stack[-0x140]:4 & 61440) INT_AND A_Stack[-0x140]:4 61440
 CBRANCH ((A_Stack[-0x140]:4 & 61440) INT_EQUAL 40960)
(f() # f()) PIECE f() f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -360) PTRSUB RSP -360
 CALL func (RSP + -360)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
 RETURN 0 f()
(f() / 2147483647) SUBPIECE f() 0
f() INT_AND f() -1
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
f() CALL func 1
(f() / 2147483647) SUBPIECE f() 8
(A_Stack[-0x160]:8 # A_Stack[-0x168]:8) PIECE A_Stack[-0x160]:8 A_Stack[-0x168]:8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -360) PTRSUB RSP -360
 CALL func (RSP + -360)
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
0 INT_NOTEQUAL [f()] 2
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func ARG1 (RSP + -360) (RSP + -360)
f() CALL func ARG2 (RSP + -200) (RSP + -200)
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -360)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -360)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(RSP + -360) PTRSUB RSP -360
f() CALL func (RSP + -392)
(RSP + -408) PTRSUB RSP -408
 CALL func (RSP + -200)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -360) PTRSUB RSP -360
f() CAST f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -200) PTRSUB RSP -200
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -392) PTRSUB RSP -392
f() CALL libcall_rename_thunk f() f()
(f() + 40) CAST (f() + 40)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -360) PTRSUB RSP -360
f() CALL func (RSP + -408)
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
f() CAST f()
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_EQUAL 4294967295)
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -200)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() 4294967295
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -376)
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -376) [f()] f() [f()]
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -376) PTRSUB RSP -376
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -376) PTRSUB RSP -376
f() CALL libcall_generic_category_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() # f()) INT_AND (f() # f()) -1
 CALL libcall___stack_chk_fail_thunk
(f() # f()) PIECE f() f()
 RETURN 0 (f() # f())
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
f() CALL libcall_ftruncate_thunk ARG1 ARG2
 CBRANCH (f() INT_EQUAL 4294967295)
0 INT_EQUAL f() 4294967295
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
f() CALL libcall_generic_category_thunk
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) [f()] f() [f()]
 RETURN 1
(f() # f()) PIECE f() f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (f() # f())
(f() # f()) INT_AND (f() # f()) -1
f() CALL func
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
 CBRANCH (A_Stack[0x8]:8 INT_EQUAL A_Stack[0x38]:8)
 CBRANCH (A_Stack[0x10]:8 INT_EQUAL A_Stack[0x40]:8)
0 COPY 0
0 INT_EQUAL A_Stack[0x10]:8 A_Stack[0x40]:8
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 1)
 CALL libcall___assert_fail_thunk 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc 328 0
0 INT_EQUAL A_Stack[0x8]:8 A_Stack[0x38]:8
 RETURN 0 f()
0 COPY 0
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc
 RETURN 1
f() CALL func
0 INT_EQUAL f() 1
f() CALL func ARG1 (RSP + -136) (RSP + -136)
f() CALL func ARG2 (RSP + -88) (RSP + -88)
 STORE 433 ARG3 f()
f() CALL func (RSP + -152)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -136)
(RSP + -136) PTRSUB RSP -136
(RSP + -136) PTRSUB RSP -136
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -88)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
0 COPY 0
(RSP + -88) PTRSUB RSP -88
 RETURN 0 (f() # f())
 RETURN 1
(f() # f()) PIECE f() f()
 CALL libcall___stack_chk_fail_thunk
(f() # f()) INT_AND (f() # f()) -1
 BRANCH VZERO
(RSP + -88) PTRSUB RSP -88
(A_Stack[-0x94]:4 # f()) PIECE A_Stack[-0x94]:4 f()
(RSP + -152) PTRSUB RSP -152
0 COPY 0
f() CALL func (RSP + -152)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
f() CALL func
(A_Stack[-0x94]:4 # f()) PIECE A_Stack[-0x94]:4 f()
 BRANCH VZERO
 CALL func (RSP + -152)
(RSP + -152) PTRSUB RSP -152
(A_Stack[-0x94]:4 # f()) PIECE A_Stack[-0x94]:4 f()
f() CALL func ARG1 (RSP + -184) (RSP + -184)
f() CALL func f() (RSP + -184) ARG2 (RSP + -184)
[40] LOAD 433 40
40 INT_ADD 0 40
(RSP + -184) PTRSUB RSP -184
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -184) PTRSUB RSP -184
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
f() INT_AND f() -1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
[ARG1] LOAD 433 ARG1
 RETURN 0 ([ARG1] + 946684800)
([ARG1] + 946684800) COPY ([ARG1] + 946684800)
([ARG1] + 946684800) INT_ADD [ARG1] 946684800
f() CALL libcall_futimens_thunk ARG1 (RSP + -72)
(f() + 40) CAST (f() + 40)
0 INT_EQUAL f() 0
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -72) PTRSUB RSP -72
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
0 COPY 0
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
f() COPY f()
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
(f() # f()) PIECE f() f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (f() # f())
(f() # f()) INT_AND (f() # f()) -1
(RSP + -88) PTRSUB RSP -88
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
 BRANCH VZERO
 CALL func (RSP + -88) [f()] f() [f()]
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -88)
f() CALL libcall_generic_category_thunk
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL libcall_mmap_thunk 0 [ARG1] f() f() ARG2 ARG3
0 INT_EQUAL ARG4 1
0 INT_EQUAL ARG4 0
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG4 INT_EQUAL 0)
3 COPY 3
 BRANCH VZERO
1 COPY 1
0 INT_NOTEQUAL 0 [(f() + 40)]
 CALL libcall___assert_fail_thunk Size != 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc 417 0
f() CAST f()
 CBRANCH (ARG4 INT_EQUAL 1)
0 COPY 0
[(f() + 40)] LOAD 433 (f() + 40)
Size != 0 COPY Size != 0
(f() + 40) CAST (f() + 40)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CBRANCH ([(ARG1 + 8)] INT_EQUAL -1)
 STORE 433 (ARG1 + 8) f()
0 INT_EQUAL [(ARG1 + 8)] -1
 RETURN 1
(f() + 40) INT_ADD f() 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (f() # f())
 RETURN 1
(f() # f()) INT_AND (f() # f()) -1
(f() # f()) PIECE f() f()
f() CALL libcall_generic_category_thunk
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
 BRANCH VZERO
 CALL func (RSP + -56) [f()] f() [f()]
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
1 COPY 1
2 COPY 2
-1 COPY -1
 RETURN 0 -1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1 ARG2 ARG5
 STORE 433 ARG1 ARG4
0 INT_LESS f() ARG4
f() CALL func ARG6
 STORE 433 ARG6 f()
(ARG6 + 8) PTRADD ARG6 2 4
 STORE 433 ARG6 f()
(ARG6 + 8) PTRADD ARG6 2 4
 STORE 433 (ARG1 + 8) 0
f() CALL func
 RETURN 0
 CBRANCH (f() INT_LESS ARG4)
 CBRANCH (f() INT_NOTEQUAL 0)
 STORE 433 (ARG1 + 8) 0
f() CALL func 22
0 INT_NOTEQUAL f() 0
 STORE 433 (ARG6 + 8) 0
 BRANCH VZERO
 STORE 433 (ARG6 + 8) 0
(ARG6 + 8) CAST (ARG6 + 8)
(ARG6 + 8) CAST (ARG6 + 8)
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(ARG1 + 8)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] CAST [(ARG1 + 8)]
 CALL libcall_munmap_thunk [(ARG1 + 8)] [ARG1]
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
0 INT_EQUAL [(ARG1 + 8)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
 RETURN 1
0 COPY 0
Mapping && "Mapping failed but used anyway!" COPY Mapping && "Mapping failed but used anyway!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc
 CALL libcall___assert_fail_thunk Mapping && "Mapping failed but used anyway!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc 447 0
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 8)] 0
 RETURN 1
0 COPY 0
Mapping && "Mapping failed but used anyway!" COPY Mapping && "Mapping failed but used anyway!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc
 CALL libcall___assert_fail_thunk Mapping && "Mapping failed but used anyway!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc 452 0
 RETURN 0 [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 8)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 COPY 0
Mapping && "Mapping failed but used anyway!" COPY Mapping && "Mapping failed but used anyway!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc
 CALL libcall___assert_fail_thunk Mapping && "Mapping failed but used anyway!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc 457 0
 RETURN 0 [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
 RETURN 1
f() COPY f()
f() COPY f()
 RETURN 0 f()
 CBRANCH (VZERO INT_EQUAL 0)
0 INT_EQUAL VZERO 0
f() COPY f()
6882328 PTRSUB 0 6882328
f() CALL libcall___cxa_guard_acquire_thunk 6882328
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_getpagesize_thunk
6882328 PTRSUB 0 6882328
 CALL libcall___cxa_guard_release_thunk 6882328
 CALL func
 RETURN 0
(ARG1 + 32) INT_ADD ARG1 32
 CALL libcall_basic_string_thunk
 CALL func (ARG1 + 32)
 RETURN 0
 CALL libcall_~basic_string_thunk ARG1
 RETURN 0
ARG1 COPY ARG1
(ARG1 + 32) PTRADD ARG1 32 1
(ARG1 + 40) PTRADD ARG1 40 1
 CALL libcall_operator=_thunk ARG1 ARG2
(ARG1 + 48) PTRADD ARG1 48 1
(ARG1 + 56) PTRADD ARG1 56 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 72) PTRADD ARG1 72 1
(ARG2 + 72) PTRADD ARG2 72 1
(ARG2 + 32) PTRADD ARG2 32 1
(ARG2 + 40) PTRADD ARG2 40 1
(ARG2 + 48) PTRADD ARG2 48 1
(ARG2 + 56) PTRADD ARG2 56 1
(ARG2 + 64) PTRADD ARG2 64 1
(ARG2 + 32) CAST (ARG2 + 32)
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
 STORE 433 (ARG1 + 64) [(ARG2 + 64)]
[(ARG2 + 64)] LOAD 433 (ARG2 + 64)
(ARG1 + 72) CAST (ARG1 + 72)
(ARG2 + 72) CAST (ARG2 + 72)
 STORE 433 (ARG1 + 56) [(ARG2 + 56)]
(ARG1 + 64) CAST (ARG1 + 64)
(ARG2 + 64) CAST (ARG2 + 64)
[(ARG2 + 56)] LOAD 433 (ARG2 + 56)
 RETURN 0 ARG1
(ARG1 + 56) CAST (ARG1 + 56)
 STORE 433 (ARG1 + 48) [(ARG2 + 48)]
(ARG2 + 56) CAST (ARG2 + 56)
[(ARG2 + 48)] LOAD 433 (ARG2 + 48)
(ARG1 + 48) CAST (ARG1 + 48)
(ARG2 + 48) CAST (ARG2 + 48)
 STORE 433 (ARG1 + 40) [(ARG2 + 40)]
(ARG1 + 40) CAST (ARG1 + 40)
[(ARG2 + 40)] LOAD 433 (ARG2 + 40)
 STORE 433 (ARG1 + 72) [(ARG2 + 72)]
(ARG2 + 40) CAST (ARG2 + 40)
 STORE 433 (ARG1 + 32) [(ARG2 + 32)]
[(ARG2 + 72)] LOAD 433 (ARG2 + 72)
(ARG1 + 32) CAST (ARG1 + 32)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -136)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -120) PTRSUB RSP -120
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(ARG1 + 8) CAST (ARG1 + 8)
 CALL func (RSP + -120)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 0)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL [(ARG1 + 8)] 0
0 INT_NOTEQUAL 0 [(f() + 40)]
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -120)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -120) PTRSUB RSP -120
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (ARG1 + 8) 0
 CALL func (ARG1 + 16) (RSP + -120) (ARG1 + 16)
(f() # f()) PIECE f() f()
(RSP + -120) PTRSUB RSP -120
(ARG1 + 8) CAST (ARG1 + 8)
(f() + 40) CAST (f() + 40)
(f() # f()) INT_AND (f() # f()) -1
 RETURN 1
 RETURN 0 (f() # f())
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 8) CAST (ARG1 + 8)
 CALL libcall_closedir_thunk [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() CALL func ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_readdir_thunk [(ARG1 + 8)]
 STORE 433 f() 0
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL f() 0
f() CALL libcall___errno_location_thunk
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (f() INT_EQUAL 2)
(RSP + -136) PTRSUB RSP -136
f() CALL func (RSP + -136) 0
 CBRANCH (f() INT_EQUAL 46)
0 COPY 0
0 INT_EQUAL f() 46
 CBRANCH (f() INT_EQUAL 46)
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 46)
f() CALL func (RSP + -136)
0 INT_EQUAL f() 2
(RSP + -136) PTRSUB RSP -136
 CBRANCH f()
 CALL func (ARG1 + 16) (RSP + -120) (ARG1 + 16)
 CALL func (RSP + -88)
(RSP + -88) PTRSUB RSP -88
 BRANCH VZERO
 BRANCH VZERO
(RSP + -88) PTRSUB RSP -88
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -88)
(RSP + -136) PTRSUB RSP -136
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -120) (RSP + -136) (RSP + -136)
(f() # f()) PIECE f() f()
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
0 INT_EQUAL f() 0
 CBRANCH ([f()] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [f()] 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 1)
(RSP + -136) PTRSUB RSP -136
f() CALL func (RSP + -136) 0
0 INT_NOTEQUAL f() 46
(RSP + -136) PTRSUB RSP -136
f() CALL func (RSP + -136) 1
0 INT_EQUAL f() 46
 CALL libcall___stack_chk_fail_thunk
f() INT_AND f() -1
 RETURN 0 f()
 RETURN 1
(RSP + -88) PTRSUB RSP -88
f() CALL libcall_generic_category_thunk
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
 BRANCH VZERO
 CALL func (RSP + -88) [f()] f() [f()]
(A_Stack[-0x50]:8 # A_Stack[-0x58]:8) PIECE A_Stack[-0x50]:8 A_Stack[-0x58]:8
(f() + 19) PTRSUB f() 19
(RSP + -136) PTRSUB RSP -136
(RSP + -136) PTRSUB RSP -136
f() CALL libcall_strlen_thunk (f() + 19)
(f() + 19) PTRSUB f() 19
f() CALL func (RSP + -136)
0 INT_EQUAL f() 1
 CALL func (RSP + -136) (f() + 19) f() (f() + 19)
(ARG1 + 72) INT_ADD ARG1 72
 CALL func ARG1 ARG2 ARG2
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 56) INT_ADD ARG1 56
(ARG1 + 64) INT_ADD ARG1 64
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(ARG1 + 72) CAST (ARG1 + 72)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 STORE 433 (ARG1 + 56) A_Stack[0x20]:8
40 INT_ADD 0 40
(ARG1 + 64) CAST (ARG1 + 64)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 STORE 433 (ARG1 + 48) A_Stack[0x18]:8
(ARG1 + 56) CAST (ARG1 + 56)
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(ARG1 + 48) CAST (ARG1 + 48)
 STORE 433 (ARG1 + 40) A_Stack[0x10]:8
(ARG1 + 40) CAST (ARG1 + 40)
 STORE 433 (ARG1 + 72) A_Stack[0x30]:8
(FS_OFFSET + 40) INT_ADD 0 40
 STORE 433 (ARG1 + 32) A_Stack[0x8]:8
(ARG1 + 32) CAST (ARG1 + 32)
 STORE 433 (ARG1 + 64) A_Stack[0x28]:8
40 CAST 40
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
 CALL func (RSP + -200) ARG2 ARG3 ARG2
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 0
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func (RSP + -200)
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -200)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -200) PTRSUB RSP -200
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_EQUAL 0)
f() CAST f()
f() CALL libcall_opendir_thunk f()
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
0 INT_EQUAL f() 0
f() CALL func (RSP + -200)
(RSP + -392) PTRSUB RSP -392
 CALL func (RSP + -392) 4585813
(RSP + -280) PTRSUB RSP -280
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
4585813 PTRSUB 0 4585813
(RSP + -392) PTRSUB RSP -392
 CALL func (RSP + -328)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -280) PTRSUB RSP -280
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -280)
(f() / 2147483647) SUBPIECE f() 0
[f()] LOAD 433 f()
 STORE 433 (ARG1 + 8) f()
(RSP + -280) PTRSUB RSP -280
f() CALL libcall___errno_location_thunk
(RSP + -328) PTRSUB RSP -328
(RSP + -360) PTRSUB RSP -360
 CALL func (RSP + -280) (RSP + -360) (RSP + -360)
 CALL func (RSP + -424) 4585993
f() CALL libcall_generic_category_thunk
4585993 PTRSUB 0 4585993
(A_Stack[-0x140]:8 # A_Stack[-0x148]:8) PIECE A_Stack[-0x140]:8 A_Stack[-0x148]:8
(RSP + -328) PTRSUB RSP -328
(RSP + -424) PTRSUB RSP -424
(RSP + -360) PTRSUB RSP -360
(A_Stack[-0x180]:8 # A_Stack[-0x188]:8) PIECE A_Stack[-0x180]:8 A_Stack[-0x188]:8
 CALL func (RSP + -328) [f()] f() [f()]
(RSP + -328) PTRSUB RSP -328
 CALL func (RSP + -328) 4585813
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -360) (RSP + -392) (RSP + -392)
(RSP + -424) PTRSUB RSP -424
(RSP + -392) PTRSUB RSP -392
(RSP + -360) PTRSUB RSP -360
4585813 PTRSUB 0 4585813
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -360) 4585813
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(RSP + -360) PTRSUB RSP -360
 CALL func (RSP + -200) (RSP + -424) (RSP + -392) (RSP + -360) (RSP + -328)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -328) PTRSUB RSP -328
(ARG1 + 8) CAST (ARG1 + 8)
 CALL func (ARG1 + 16) (RSP + -280) (ARG1 + 16)
4585813 PTRSUB 0 4585813
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
 RETURN 0 f()
f() INT_AND f() -1
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
(ARG2 - ARG1) INT_SUB ARG2 ARG1
 RETURN 0 (ARG2 - ARG1)
(ARG2 - ARG1) COPY (ARG2 - ARG1)
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
(RSP + -48) PTRSUB RSP -48
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -48)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1 (f() + f()) (f() + f())
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1 (f() + f()) (f() + f())
f() CALL func ARG2 ARG3 ARG3
 CALL func ARG2 ARG3 f() 0
 CBRANCH ((f() - f()) INT_LESS f())
(f() - f()) INT_SUB f() f()
 RETURN 0
(f() - f()) CAST (f() - f())
0 INT_LESS (f() - f()) f()
(f() + f()) INT_ADD f() f()
(f() + f()) INT_ADD f() f()
 CALL func ARG1
 CALL func ARG1 f() (f() + f()) f()
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
0 COPY 0
4586743 COPY 4586743
 RETURN 0 0
f() CALL libcall_getenv_thunk 4586743
(f() + f()) PTRADD f() f() 1
f() CALL libcall_strlen_thunk f()
 BRANCH VZERO
 RETURN 0
VZERO COPY VZERO
 CALL func 1 65535
 RETURN 0
(ARG1 + 32) INT_ADD ARG1 32
ARG1 COPY ARG1
(ARG1 + 32) CAST (ARG1 + 32)
 CBRANCH ([(ARG1 + 32)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 32)] 0
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
 CALL libcall___assert_fail_thunk hasVal /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Optional.h 120 0
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Optional.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Optional.h
hasVal COPY hasVal
 RETURN 0 ARG1
 RETURN 1
(ARG1 + 32) INT_ADD ARG1 32
 CALL func ARG1
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(ARG1 + 32) CAST (ARG1 + 32)
 CBRANCH ([(ARG1 + 32)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 32)] 0
 RETURN 1
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Optional.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Optional.h
 RETURN 0
hasVal COPY hasVal
 CALL libcall___assert_fail_thunk hasVal /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Optional.h 129 0
f() CALL func ARG1
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 32) CAST (ARG1 + 32)
 CBRANCH ([(ARG1 + 32)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(ARG1 + 32)] 0
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
 RETURN 0
(ARG1 + 32) CAST (ARG1 + 32)
f() CAST f()
 CALL libcall_~basic_string_thunk f()
 STORE 433 (ARG1 + 32) 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1 8
 RETURN 0
(ARG1 + 32) INT_ADD ARG1 32
 RETURN 0
 STORE 433 (ARG1 + 32) 0
(ARG1 + 32) CAST (ARG1 + 32)
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 32) INT_ADD ARG1 32
f(ARG1) CALL func 32 ARG1
 CALL func ARG2
f(ARG1) CAST f(ARG1)
(ARG1 + 32) CAST (ARG1 + 32)
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
 RETURN 0
0 INT_NOTEQUAL f(ARG1) 0
 STORE 433 (ARG1 + 32) 1
 CALL libcall_basic_string_thunk f(ARG1)
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CALL func (RSP + -88) (RSP + -136) (RSP + -136)
f() CALL libcall_getenv_thunk f()
f(ARG1) COPY f(ARG1)
0 INT_NOTEQUAL 0 [(f() + 40)]
f() CAST f()
 CBRANCH (f() INT_EQUAL 0)
(f() + 40) INT_ADD f() 40
 CALL libcall_~basic_string_thunk (RSP + -88)
0 INT_EQUAL f() 0
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -136) PTRSUB RSP -136
f() CALL libcall_c_str_thunk
f() CAST f()
(RSP + -88) PTRSUB RSP -88
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -88) PTRSUB RSP -88
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
f() COPY f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(ARG1)
f() COPY f()
 CALL libcall_~basic_string_thunk (RSP + -56)
 CALL libcall_basic_string_thunk (RSP + -56) f()
 CALL func ARG1 (RSP + -56) (RSP + -56)
(RSP + -56) PTRSUB RSP -56
 CALL libcall_allocator_thunk
(RSP + -56) CAST (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(RSP + -97) PTRSUB RSP -97
 BRANCH VZERO
 CALL func ARG1 VZERO VZERO
 CALL libcall_~allocator_thunk (RSP + -97)
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 32) CAST (ARG1 + 32)
 RETURN 0
 STORE 433 (ARG1 + 32) 0
(ARG1 + 32) INT_ADD ARG1 32
 CALL func ARG1
 CBRANCH ([(ARG1 + 32)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 32)] 0
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(ARG1 + 32) CAST (ARG1 + 32)
 CALL libcall___assert_fail_thunk hasVal /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Optional.h 122 0
 RETURN 1
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Optional.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Optional.h
hasVal COPY hasVal
 RETURN 0
(ARG1 + 32) INT_ADD ARG1 32
 RETURN 0 [(ARG1 + 32)]
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
[(ARG1 + 32)] COPY [(ARG1 + 32)]
(ARG1 + 32) CAST (ARG1 + 32)
ARG1 COPY ARG1
(ARG1 + 32) INT_ADD ARG1 32
f(ARG1) CALL func 32 ARG1
(ARG1 + 32) INT_ADD ARG1 32
f() CALL func ARG1
 CALL func ARG2
f(ARG2) CALL func ARG2
(ARG1 + 32) CAST (ARG1 + 32)
 CBRANCH ([(ARG1 + 32)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 32)] 0
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
 RETURN 0 ARG1
f(ARG2) CAST f(ARG2)
f(ARG1) CAST f(ARG1)
 BRANCH VZERO
(ARG1 + 32) CAST (ARG1 + 32)
 CALL libcall_operator=_thunk f() f(ARG2)
f() CAST f()
0 INT_NOTEQUAL f(ARG1) 0
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
 STORE 433 (ARG1 + 32) 1
 CALL libcall_basic_string_thunk f(ARG1)
 CALL func ARG1
 CALL func ARG1 (RSP + -440) (RSP + -440)
ARG1 COPY ARG1
 CALL func (RSP + -472) ARG2 ARG2
 CALL func (RSP + -472) ARG3 ARG3
 CALL func (RSP + -568) ARG3 ARG3
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -472) PTRSUB RSP -472
(RSP + -472) PTRSUB RSP -472
f() CALL func (RSP + -472)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(RSP + -568) PTRSUB RSP -568
(f() + 16) PTRADD f() 2 8
f() CALL func (RSP + -472)
(f() / 2147483647) SUBPIECE f() 8
[(f() + 8)] LOAD 433 (f() + 8)
(RSP + -536) PTRSUB RSP -536
 CALL func (RSP + -472) 4589890
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 0
(f() + 8) PTRADD f() 1 8
(RSP + -504) PTRSUB RSP -504
 CBRANCH (f() INT_NOTEQUAL f())
(f() / 2147483647) SUBPIECE f() 0
0 INT_NOTEQUAL f() f()
(RSP + -472) PTRSUB RSP -472
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -200) [f()] [(f() + 8)] [f()]
(f() / 2147483647) SUBPIECE f() 0
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -504) 4589890
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -200) (RSP + -568) (RSP + -536) (RSP + -504) (RSP + -472)
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_NOTEQUAL 0)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -200) PTRSUB RSP -200
4589890 PTRSUB 0 4589890
(RSP + -472) PTRSUB RSP -472
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -568) PTRSUB RSP -568
 CALL func (RSP + -200)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
[f()] LOAD 433 f()
(RSP + -200) PTRSUB RSP -200
4589890 PTRSUB 0 4589890
(RSP + -472) PTRSUB RSP -472
(RSP + -536) PTRSUB RSP -536
 CALL func (RSP + -472) (RSP + -200) (RSP + -200)
 CALL func (RSP + -536) 4589890
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -472) PTRSUB RSP -472
(RSP + -504) PTRSUB RSP -504
(f() / 2147483647) SUBPIECE f() 0
4589890 PTRSUB 0 4589890
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL libcall_~basic_string_thunk (RSP + -440)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -472) PTRSUB RSP -472
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -200)
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 0
(RSP + -440) PTRSUB RSP -440
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
f() COPY f()
(RSP + -440) PTRSUB RSP -440
 CALL func (RSP + -440) (RSP + -472) (RSP + -472)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -440) PTRSUB RSP -440
 CBRANCH (f() INT_EQUAL 1)
(RSP + -408) PTRSUB RSP -408
f() CALL func (RSP + -408)
(RSP + -360) PTRSUB RSP -360
 BRANCH VZERO
(RSP + -472) PTRSUB RSP -472
0 COPY 0
 CALL func (RSP + -360)
(RSP + -34) PTRSUB RSP -34
(A_Stack[-0x1d0]:8 # A_Stack[-0x1d8]:8) PIECE A_Stack[-0x1d0]:8 A_Stack[-0x1d8]:8
58 COPY 58
f() CALL func (RSP + -360)
 CALL func (RSP + -472) (RSP + -34) (RSP + -34)
f() CAST f()
(f() / 2147483647) SUBPIECE f() 0
 CALL func A_Stack[-0x1f8]:8 A_Stack[-0x1f0]:8 (RSP + -360) A_Stack[-0x1d8]:8 A_Stack[-0x1d0]:8
(RSP + -360) PTRSUB RSP -360
 CALL func (RSP + -504) f() f()
(RSP + -360) PTRSUB RSP -360
(RSP + -504) PTRSUB RSP -504
f() CAST f()
 CALL func (RSP + -360)
(RSP + -360) PTRSUB RSP -360
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -360)
(f() + 40) CAST (f() + 40)
(RSP + -408) PTRSUB RSP -408
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -408) A_Stack[-0x1d8]:8 A_Stack[-0x1d0]:8 A_Stack[-0x1d8]:8
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
0 COPY 0
0 INT_EQUAL f() 1
(A_Stack[-0x1d0]:8 # A_Stack[-0x1d8]:8) PIECE A_Stack[-0x1d0]:8 A_Stack[-0x1d8]:8
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Process.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Process.cpp
0 COPY 0
[(f() + 40)] LOAD 433 (f() + 40)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -408) PTRSUB RSP -408
(RSP + -408) PTRSUB RSP -408
 RETURN 1
 CALL libcall___assert_fail_thunk 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Process.cpp 32 0
 CALL func (RSP + -408)
f() CALL func (RSP + -408)
(RSP + -472) PTRSUB RSP -472
f() CALL func f()
0 INT_EQUAL f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 24) PTRADD ARG1 3 8
 STORE 433 ARG1 [f(ARG2)]
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
[(f(ARG2) + 8)] LOAD 433 (f(ARG2) + 8)
 STORE 433 (ARG1 + 16) [f(ARG3)]
 RETURN 0
[f(ARG3)] LOAD 433 f(ARG3)
 STORE 433 (ARG1 + 8) [(f(ARG2) + 8)]
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
[(f(ARG3) + 8)] LOAD 433 (f(ARG3) + 8)
(f(ARG3) + 8) PTRADD f(ARG3) 1 8
f(ARG2) CAST f(ARG2)
f(ARG3) CAST f(ARG3)
 STORE 433 (ARG1 + 24) [(f(ARG3) + 8)]
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
ARG1 COPY ARG1
 CALL func ARG1 f(ARG2) f(ARG3) f(ARG2)
 RETURN 0 ARG1
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -200) (RSP + -184) (RSP + -200)
[40] LOAD 433 40
 CALL func (RSP + -200) A_Stack[-0xa8]:8 (A_Stack[-0xa0]:4 * 1000) A_Stack[-0xa8]:8
(RSP + -168) CAST (RSP + -168)
 CALL func (RSP + -184) A_Stack[-0x98]:8 (A_Stack[-0x90]:4 * 1000) A_Stack[-0x98]:8
 CALL libcall_getrusage_thunk 0 (RSP + -168)
(RSP + -168) PTRSUB RSP -168
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -200) PTRSUB RSP -200
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -200) PTRSUB RSP -200
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(A_Stack[-0x90]:4 * 1000) INT_MULT A_Stack[-0x90]:4 1000
(A_Stack[-0xa0]:4 * 1000) INT_MULT A_Stack[-0xa0]:4 1000
(RSP + -184) PTRSUB RSP -184
(RSP + -184) PTRSUB RSP -184
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
(A_Stack[-0x50]:8 / 2147483647) INT_RIGHT A_Stack[-0x50]:8 32
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
A_Stack[-0x50]:8 COPY A_Stack[-0x50]:8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(A_Stack[-0x50]:8 / 4611686014132420609) SUBPIECE (A_Stack[-0x50]:8 / 2147483647) 0
A_Stack[-0x68]:8 COPY A_Stack[-0x68]:8
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
A_Stack[-0x58]:8 COPY A_Stack[-0x58]:8
(FS_OFFSET + 40) INT_ADD 0 40
A_Stack[-0x48]:8 COPY A_Stack[-0x48]:8
40 CAST 40
(RSP + -104) PTRSUB RSP -104
 CALL libcall_mallinfo_thunk (RSP + -104)
(A_Stack[-0x50]:8 / 4611686014132420609) INT_SEXT (A_Stack[-0x50]:8 / 4611686014132420609)
[40] LOAD 433 40
A_Stack[-0x50]:8 CAST A_Stack[-0x50]:8
A_Stack[-0x60]:8 COPY A_Stack[-0x60]:8
 RETURN 1
 RETURN 0 (A_Stack[-0x50]:8 / 4611686014132420609)
 CALL libcall___stack_chk_fail_thunk
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func ARG1 ARG3 ARG3
(ARG1 + 8) INT_ADD ARG1 8
 CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
 RETURN 0 ARG1
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0
 CALL func (ARG1 + 8)
ARG1 COPY ARG1
 RETURN 0 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
 CALL func ARG1
ARG1 COPY ARG1
f() CALL func ARG1
(ARG2 + 16) INT_ADD ARG2 16
f(ARG2) CALL func ARG2
[(f(ARG2) + 8)] LOAD 433 (f(ARG2) + 8)
 STORE 433 f() [f(ARG2)]
f() CAST f()
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG2) CALL func (ARG2 + 16)
 RETURN 0 ARG1
 STORE 433 (f() + 8) [(f(ARG2) + 8)]
(f() + 8) CAST (f() + 8)
[(f(ARG2) + 8)] LOAD 433 (f(ARG2) + 8)
(f(ARG2) + 8) CAST (f(ARG2) + 8)
(f() + 8) PTRADD f() 1 8
(f() + 8) CAST (f() + 8)
 STORE 433 f() [f(ARG2)]
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
(f(ARG2) + 8) CAST (f(ARG2) + 8)
(f() + 8) PTRADD f() 1 8
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
f(ARG2) CAST f(ARG2)
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG2) CAST f(ARG2)
 STORE 433 (f() + 8) [(f(ARG2) + 8)]
f() CAST f()
 STORE 433 ARG1 (f() / 2147483647)
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func (RSP + -72) ARG2 ARG3 ARG2
(RSP + -56) PTRSUB RSP -56
(f() / 2147483647) SUBPIECE f() 0
40 CAST 40
(ARG1 + 8) CAST (ARG1 + 8)
 CALL func (RSP + -72) (RSP + -56) (RSP + -56)
 CALL func (RSP + -56)
f() CALL func
(f() / 2147483647) SUBPIECE f() 8
(RSP + -72) PTRSUB RSP -72
 STORE 433 (ARG1 + 8) (f() / 4611686014132420609)
(f() / 2147483647) SUBPIECE f() 0
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -56) PTRSUB RSP -56
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) INT_RIGHT f() 64
(f() / 2147483647) SUBPIECE f() 0
40 INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(f() / 2147483647) SUBPIECE f() 0
(RSP + -72) PTRSUB RSP -72
[40] LOAD 433 40
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL libcall_setrlimit_thunk 4 (RSP + -40)
0 COPY 0
[40] LOAD 433 40
40 CAST 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -40) PTRSUB RSP -40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 COPY 0
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 0 [(ARG1 + 16)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
f() CALL func ARG1
f() CALL func ARG1
(f() - f()) INT_SUB f() f()
 RETURN 0 ((f() - f()) / 8)
((f() - f()) / 8) INT_SRIGHT (f() - f()) 3
 CALL func ARG1 (ARG1 + 24) ARG2 ARG3
(ARG1 + 24) INT_ADD ARG1 24
 RETURN 0
 CALL func ARG1 (ARG2 * 8) 8 (ARG2 * 8)
(ARG2 * 8) INT_MULT ARG2 8
 RETURN 0
(ARG2 - ARG1) INT_SUB ARG2 ARG1
 RETURN 0 ((ARG2 - ARG1) / 8)
((ARG2 - ARG1) / 8) INT_SRIGHT (ARG2 - ARG1) 3
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
 CALL func (RSP + -48)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(RSP + -48) PTRSUB RSP -48
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 8) INT_ADD ARG1 8
 STORE 433 (ARG1 + 8) ARG2
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
ARG1 CAST ARG1
0 INT_NOTEQUAL ARG1 ARG2
 CALL libcall_memcpy_thunk ARG3 ARG1 (((ARG2 - ARG1) / 8) * 8)
ARG2 CAST ARG2
 CBRANCH (ARG1 INT_NOTEQUAL ARG2)
 RETURN 0
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
(ARG2 - ARG1) INT_SUB ARG2 ARG1
((ARG2 - ARG1) / 8) INT_SRIGHT (ARG2 - ARG1) 3
(ARG2 - ARG1) CAST (ARG2 - ARG1)
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1 (f() + f()) (f() + f())
 CALL func ARG1 ((f() * 8) + f()) ((f() * 8) + f())
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG2 ARG3 ARG3
 CALL func ARG2 ARG3 f() 0
 CBRANCH (((f() - f()) / 8) INT_LESS f())
 RETURN 0
(f() - f()) INT_SUB f() f()
(f() * 8) INT_MULT f() 8
((f() - f()) / 8) INT_SRIGHT (f() - f()) 3
((f() - f()) / 8) CAST ((f() - f()) / 8)
((f() * 8) + f()) INT_ADD f() (f() * 8)
0 INT_LESS ((f() - f()) / 8) f()
(f() + f()) INT_ADD f() f()
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 RETURN 0 (([(ARG1 + 8)] * 8) + [ARG1])
([(ARG1 + 8)] * 8) INT_MULT [(ARG1 + 8)] 8
(([(ARG1 + 8)] * 8) + [ARG1]) INT_ADD ([(ARG1 + 8)] * 8) [ARG1]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG1 COPY ARG1
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CALL func ARG1 f() f() f()
f() CALL func (RSP + -88)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
(RSP + -88) PTRSUB RSP -88
[40] LOAD 433 40
 CALL func (RSP + -56)
(FS_OFFSET + 40) INT_ADD 0 40
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
f() CALL func (RSP + -88)
(RSP + -88) PTRSUB RSP -88
 RETURN 1
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) INT_AND (A_Stack[-0x30]:8 # A_Stack[-0x38]:8) -1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 ARG2
 RETURN 0
 STORE 433 (ARG1 + 8) 0
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
 STORE 433 (ARG1 + 8) 1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 1)
0 INT_NOTEQUAL [(ARG1 + 8)] 1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0
 CBRANCH (4294967295 INT_SLESS [[ARG1]])
0 INT_SLESS 4294967295 [[ARG1]]
[[ARG1]] LOAD 433 [ARG1]
[[ARG1]] LOAD 433 [ARG1]
 CALL libcall_close_thunk [[ARG1]]
1 COPY 1
(RSP + -212) COPY (RSP + -212)
(RSP + -248) PTRSUB RSP -248
0 INT_EQUAL f(RSP) f(RSP)
(RSP + -280) PTRSUB RSP -280
(RSP + -200) PTRSUB RSP -200
(FS_OFFSET + 40) INT_ADD 0 40
0 COPY 0
(RSP + -212) PTRSUB RSP -212
 CALL func (RSP + -248) (RSP + -280) (RSP + -280)
2 COPY 2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
4294967295 COPY 4294967295
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f(RSP) INT_EQUAL f(RSP))
 CBRANCH (f() INT_SLESS 0)
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() [(f() + 40)]
 BRANCH VZERO
(f() + 40) CAST (f() + 40)
 CALL func (RSP + -232) [f()] f() [f()]
f() CALL libcall___errno_location_thunk
 CALL func (RSP + -248)
(RSP + -248) PTRSUB RSP -248
[f()] LOAD 433 f()
[(f() + 40)] LOAD 433 (f() + 40)
 BRANCH VZERO
f() CALL libcall_generic_category_thunk
(f(RSP) + 4) PTRADD f(RSP) 1 4
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(RSP + -232) PTRSUB RSP -232
 CBRANCH (f() INT_EQUAL f(RSP))
 CALL func
f() CALL libcall_dup2_thunk f() f(RSP)
0 INT_SLESS f() 0
 BRANCH VZERO
 CBRANCH (f() INT_SLESS 0)
0 INT_EQUAL f() f(RSP)
0 INT_NOTEQUAL [f()] 4
 CBRANCH ([f()] INT_NOTEQUAL 4)
f() CALL libcall___errno_location_thunk
[f()] LOAD 433 f()
 CBRANCH (f() INT_SLESS 0)
f() CALL libcall___errno_location_thunk
[f()] LOAD 433 f()
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
 CBRANCH ([f()] INT_EQUAL 0)
 CBRANCH ([f()] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [f()] 0
0 INT_EQUAL [f()] 0
 CBRANCH ([f()] INT_EQUAL 9)
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
 CBRANCH ([f()] INT_NOTEQUAL 4)
0 INT_NOTEQUAL [f()] 4
f() CALL libcall_open_thunk /dev/null 2
 CALL func (RSP + -232) [f()] f() [f()]
f() CALL libcall___errno_location_thunk
[f()] LOAD 433 f()
/dev/null COPY /dev/null
 BRANCH VZERO
(RSP + -232) PTRSUB RSP -232
f() CALL libcall_generic_category_thunk
0 INT_SLESS f() 0
(f() # f()) INT_AND (f() # f()) -1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (f() # f())
(f() # f()) PIECE f() f()
 RETURN 1
 RETURN 1
0 COPY 0
 CALL libcall___assert_fail_thunk errno && "expected errno to be set if fstat failed!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Process.inc 218 0
0 INT_EQUAL [f()] 9
errno && "expected errno to be set if fstat failed!" COPY errno && "expected errno to be set if fstat failed!"
[f()] LOAD 433 f()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Process.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Process.inc
f() CALL libcall___errno_location_thunk
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
 CBRANCH ([f()] INT_NOTEQUAL 9)
0 INT_NOTEQUAL [f()] 9
(RSP + -232) PTRSUB RSP -232
[f()] LOAD 433 f()
 CALL func (RSP + -232) [f()] f() [f()]
f() CALL libcall___errno_location_thunk
f() CALL func
 BRANCH VZERO
f() CALL libcall_generic_category_thunk
0 INT_SLESS f() 0
errno == EBADF && "expected errno to have EBADF at this point!" COPY errno == EBADF && "expected errno to have EBADF at this point!"
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Process.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Process.inc
 CALL libcall___assert_fail_thunk errno == EBADF && "expected errno to have EBADF at this point!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Process.inc 229 0
0 INT_SLESS f() 0
0 COPY 0
 CBRANCH (f() INT_SLESS 0)
(RSP + -232) PTRSUB RSP -232
 CALL func (RSP + -232)
[f(RSP)] LOAD 433 f(RSP)
 STORE 433 f() 0
f() CALL libcall___errno_location_thunk
 CALL func 0
 RETURN 0
 CALL func 1
 RETURN 0
 CALL func 2
 RETURN 0
f() CALL libcall_ioctl_thunk ARG1 21523 (RSP + -24)
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL libcall_getenv_thunk COLUMNS
 CBRANCH (f() INT_EQUAL 0)
(f() + 40) CAST (f() + 40)
0 INT_EQUAL f() 0
[(f() + 40)] LOAD 433 (f() + 40)
f() COPY f()
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
COLUMNS COPY COLUMNS
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(RSP + -24) PTRSUB RSP -24
0 INT_SLESS f() 1
0 COPY 0
f() CALL libcall_atoi_thunk f()
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_SLESS 1)
f() CAST f()
f() INT_ZEXT f()
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
0 INT_EQUAL f() 1
 RETURN 0 f()
 CBRANCH (f() INT_EQUAL 1)
f() CALL func
0 COPY 0
f() CALL func 1
 BRANCH VZERO
f() CALL func
0 INT_EQUAL f() 1
 RETURN 0 f()
 CBRANCH (f() INT_EQUAL 1)
f() CALL func 2
 BRANCH VZERO
0 COPY 0
 CALL func 1
 RETURN 0
 CALL func 2
 RETURN 0
 RETURN 0
 RETURN 0
VZERO COPY VZERO
 CALL func 1 65535
 RETURN 0
f() CALL func (RSP + -24) ARG1 ARG2 ARG3 ARG4 ARG5 ARG6 ARG7
 STORE 433 ARG8 0
 STORE 433 ARG8 1
0 INT_NOTEQUAL ARG8 0
0 INT_NOTEQUAL ARG8 0
40 CAST 40
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -24) PTRSUB RSP -24
 CBRANCH (ARG8 INT_NOTEQUAL 0)
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 CBRANCH (ARG8 INT_NOTEQUAL 0)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
 RETURN 1
(RSP + -56) PTRSUB RSP -56
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
40 INT_ADD 0 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -56)
 RETURN 1
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) INT_AND (A_Stack[-0x30]:8 # A_Stack[-0x38]:8) -1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL func (RSP + -120) ARG1 ARG2 (RSP + -136) 4
 CALL func (RSP + -120) ARG3 ARG4 ARG3
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL 0 [(f() + 40)]
f() CALL func (RSP + -136)
(RSP + -136) PTRSUB RSP -136
(A_Stack[-0x80]:8 # A_Stack[-0x88]:8) PIECE A_Stack[-0x80]:8 A_Stack[-0x88]:8
 CALL func (RSP + -136)
 CALL func (RSP + -120)
(FS_OFFSET + 40) INT_ADD 0 40
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -136) PTRSUB RSP -136
 CBRANCH (f() INT_EQUAL 0)
(RSP + -136) PTRSUB RSP -136
(RSP + -120) PTRSUB RSP -120
 CBRANCH (0 INT_EQUAL [(f() + 40)])
0 INT_EQUAL f() 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -120) PTRSUB RSP -120
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
(A_Stack[-0x80]:8 # A_Stack[-0x88]:8) PIECE A_Stack[-0x80]:8 A_Stack[-0x88]:8
f() CALL func (RSP + -120)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(RSP + -120) PTRSUB RSP -120
(RSP + -120) PTRSUB RSP -120
f() CALL func 5
 BRANCH VZERO
 CALL libcall___stack_chk_fail_thunk
f() INT_AND f() -1
 RETURN 0 f()
 RETURN 1
ARG1 COPY ARG1
ARG2 COPY ARG2
0 INT_NOTEQUAL f() -1
 CBRANCH (VZERO INT_EQUAL 0)
 CBRANCH (f() INT_NOTEQUAL -1)
0 INT_EQUAL VZERO 0
 CBRANCH (f() INT_NOTEQUAL f())
0 INT_LESS f() ((f() + f()) + 1)
1 COPY 1
[f()] LOAD 433 f()
((f() + f()) + 1) INT_ADD (f() + f()) 1
 RETURN 0 1
 CBRANCH (f() INT_LESS ((f() + f()) + 1))
 RETURN 0 0
f() COPY f()
(f() + f()) INT_ADD f() f()
f() CALL libcall_strlen_thunk [f()]
f() COPY f()
f() COPY f()
0 COPY 0
f() COPY f()
f() CAST f()
0 COPY 0
f() CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL f() f()
f() CALL func (RSP + -56)
f() CAST f()
(f() / 2) INT_SDIV f() 2
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_NOTEQUAL 0)
 CALL libcall___cxa_guard_release_thunk 6882400
6882400 PTRSUB 0 6882400
f() CALL libcall_sysconf_thunk 0
(f() + 8) PTRADD f() 1 8
 BRANCH VZERO
6882400 PTRSUB 0 6882400
0 INT_NOTEQUAL f() 0
f() CALL libcall___cxa_guard_acquire_thunk 6882400
VZERO COPY VZERO
 RETURN 0
 CALL func 1 65535
 RETURN 0
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALLIND [ARG1] [(ARG1 + 8)] ARG2 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 COPY 0
 RETURN 0 0
ARG1 COPY ARG1
ARG2 COPY ARG2
0 INT_EQUAL ARG3 0
ARG3 INT_ZEXT ARG3
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
0 INT_EQUAL f() 0
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL libcall_pthread_attr_init_thunk (RSP + -72)
 CBRANCH (f() INT_EQUAL 0)
(RSP + -72) PTRSUB RSP -72
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
 CALL libcall_pthread_join_thunk f() 0
 CBRANCH (ARG3 INT_EQUAL 0)
f() CALL libcall_pthread_create_thunk (RSP + -96) (RSP + -72) 4289503 (RSP + -88)
(RSP + -72) PTRSUB RSP -72
0 INT_EQUAL f() 0
(RSP + -88) PTRSUB RSP -88
(RSP + -96) PTRSUB RSP -96
f() CALL libcall_pthread_attr_setstacksize_thunk (RSP + -72) ARG3
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
4289503 PTRSUB 0 4289503
(RSP + -72) PTRSUB RSP -72
 CALL libcall_pthread_attr_destroy_thunk (RSP + -72)
(RSP + -72) PTRSUB RSP -72
 BRANCH VZERO
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
f() CALL func ARG2
f() CALL func ARG2
 CALL libcall_basic_string_thunk ARG1 (RSP + -56)
ARG1 COPY ARG1
(RSP + -168) PTRSUB RSP -168
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_localtime_r_thunk (RSP + -168) (RSP + -152)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -152) PTRSUB RSP -152
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL f() 0
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
(RSP + -56) CAST (RSP + -56)
%Y-%m-%d %H:%M:%S COPY %Y-%m-%d %H:%M:%S
 CALL libcall_allocator_thunk
%s.%.9u COPY %s.%.9u
 CALL libcall_~allocator_thunk (RSP + -169)
(RSP + -169) PTRSUB RSP -169
f() INT_ZEXT f()
(RSP + -88) PTRSUB RSP -88
 RETURN 1
 CALL libcall_snprintf_thunk (RSP + -56) 30 %s.%.9u (RSP + -88) f()
 CALL libcall___assert_fail_thunk 4593948 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/TimeValue.inc 28 0
(RSP + -56) PTRSUB RSP -56
0 COPY 0
40 INT_ADD 0 40
4593948 COPY 4593948
(RSP + -88) PTRSUB RSP -88
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/TimeValue.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/TimeValue.inc
(RSP + -56) PTRSUB RSP -56
 CALL libcall_strftime_thunk (RSP + -88) 20 %Y-%m-%d %H:%M:%S f()
[40] LOAD 433 40
40 CAST 40
 RETURN 0 0
0 COPY 0
 RETURN 0
ARG1 COPY ARG1
ARG2 COPY ARG2
0 INT_NOTEQUAL VZERO 0
 CBRANCH (VZERO INT_NOTEQUAL 0)
(RSP + -24) PTRSUB RSP -24
f() CALL func 6882432
 CALL func (RSP + -24) f() f()
6882432 PTRSUB 0 6882432
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
!ErrorHandler && "Error handler already registered!\n" COPY !ErrorHandler && "Error handler already registered!\n"
(RSP + -24) PTRSUB RSP -24
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ErrorHandling.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ErrorHandling.cpp
VZERO COPY VZERO
 CALL func (RSP + -24)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
VZERO COPY VZERO
40 INT_ADD 0 40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 CALL libcall___assert_fail_thunk !ErrorHandler && "Error handler already registered!\n" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ErrorHandling.cpp 50 0
[40] LOAD 433 40
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
ARG2 COPY ARG2
 RETURN 1
ARG2 COPY ARG2
ARG1 COPY ARG1
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -24) f() f()
0 COPY 0
(RSP + -24) PTRSUB RSP -24
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
6882432 PTRSUB 0 6882432
40 CAST 40
0 COPY 0
 CALL func (RSP + -24)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func 6882432
(RSP + -24) PTRSUB RSP -24
 RETURN 0
0 COPY 0
 CALL libcall___stack_chk_fail_thunk
0 COPY 0
0 COPY 0
 RETURN 1
0 COPY 0
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG2 INT_ZEXT ARG2
ARG2 INT_ZEXT ARG2
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
4291047 COPY 4291047
40 CAST 40
 RETURN 0
 CALL func (RSP + -128) 0
(RSP + -56) PTRSUB RSP -56
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -128) PTRSUB RSP -128
 CALL func (RSP + -128) (RSP + -144) (RSP + -144)
(RSP + -8) CAST (RSP + -8)
[40] LOAD 433 40
 CALL func
(RSP + -8) COPY (RSP + -8)
4291061 PTRSUB 0 4291061
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -128) PTRSUB RSP -128
(RSP + -8) PTRSUB RSP -8
(RSP + -144) PTRSUB RSP -144
ARG1 COPY ARG1
ARG2 COPY ARG2
 CALL func (RSP + -56) ARG3
 CALL func (RSP + -56) (RSP + -72) (RSP + -72)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 RETURN 0
(RSP + -72) PTRSUB RSP -72
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALLIND ARG1 f()
 RETURN 0
f() CALL libcall_c_str_thunk
 CALL func 4291772 ARG1
 RETURN 0
4291772 PTRSUB 0 4291772
 RETURN 0
 CALL func
ARG1 COPY ARG1
 RETURN 0
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
0 INT_NOTEQUAL VZERO ARG1
 CALLIND [(ARG1 + 8)] f(ARG1) ARG2 f(ARG1)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 8)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
VZERO COPY VZERO
 RETURN 1
void llvm::ManagedStaticBase::destroy() const COPY void llvm::ManagedStaticBase::destroy() const
DeleterFn && "ManagedStatic not initialized correctly!" COPY DeleterFn && "ManagedStatic not initialized correctly!"
 CBRANCH (VZERO INT_NOTEQUAL ARG1)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp
 CALL libcall___assert_fail_thunk DeleterFn && "ManagedStatic not initialized correctly!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp 69 void llvm::ManagedStaticBase::destroy() const
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] CAST [(ARG1 + 16)]
 STORE 433 (ARG1 + 8) 0
 RETURN 1
[(ARG1 + 8)] CAST [(ARG1 + 8)]
 STORE 433 (ARG1 + 16) 0
VZERO COPY VZERO
 RETURN 0
 CALL libcall___assert_fail_thunk StaticList == this && "Not destroyed in reverse order of construction?" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp 71 void llvm::ManagedStaticBase::destroy() const
void llvm::ManagedStaticBase::destroy() const COPY void llvm::ManagedStaticBase::destroy() const
StaticList == this && "Not destroyed in reverse order of construction?" COPY StaticList == this && "Not destroyed in reverse order of construction?"
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL 0 [40]
0 INT_NOTEQUAL f() 0
(RSP + -24) PTRSUB RSP -24
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 (f() + 40)
f() CALL func
(RSP + -24) PTRSUB RSP -24
 CALL func (RSP + -24) f() f()
 CBRANCH (0 INT_NOTEQUAL [40])
 CALL func (RSP + -24)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
 BRANCH VZERO
 CALL func f()
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
f() COPY f()
f() COPY f()
 RETURN 1
ARG1 INT_ZEXT ARG1
ARG1 CAST ARG1
ARG1 CAST ARG1
ARG1 INT_ZEXT ARG1
 RETURN 0 f(ARG1)
 CBRANCH (ARG1 INT_SLESS 65)
0 INT_SLESS ARG1 65
(ARG1 + 32) INT_ADD ARG1 32
0 INT_SLESS 90 ARG1
 BRANCH VZERO
 CBRANCH (90 INT_SLESS ARG1)
(ARG1 + f()) INT_ADD f() ARG1
0 INT_LESSEQUAL ARG3 f()
0 COPY 0
 CBRANCH (ARG3 INT_LESSEQUAL f())
 CBRANCH (f(ARG1) INT_NOTEQUAL f(ARG1))
(f() + 1) INT_ADD f() 1
 CBRANCH (f(ARG1) INT_LESS f(ARG1))
 BRANCH VZERO
0 INT_LESS f(ARG1) f(ARG1)
0 COPY 0
1 COPY 1
 RETURN 0 4294967295
 RETURN 0 1
 RETURN 0 0
4294967295 COPY 4294967295
0 INT_NOTEQUAL f(ARG1) f(ARG1)
f(ARG1) CALL func
[(ARG1 + f())] LOAD 433 (ARG1 + f())
(ARG1 + f()) CAST (ARG1 + f())
f(ARG1) CALL func [(ARG1 + f())]
[(ARG1 + f())] INT_SEXT [(ARG1 + f())]
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 COPY ARG1
f() CALL func [ARG1] ARG2 [f(ARG1 , RSP)] ARG2
ARG3 COPY ARG3
[ARG1] LOAD 433 ARG1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 RETURN 0 f()
f(ARG1 , RSP) CALL func (ARG1 + 8) (RSP + -48) (RSP + -48)
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
(RSP + -48) PTRSUB RSP -48
f(ARG1 , RSP) CAST f(ARG1 , RSP)
 CBRANCH ([(ARG1 + 8)] INT_LESS ARG3)
4294967295 COPY 4294967295
 BRANCH VZERO
1 COPY 1
(ARG1 + 8) PTRADD ARG1 1 8
0 INT_EQUAL [(ARG1 + 8)] ARG3
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL ARG3)
0 INT_LESS [(ARG1 + 8)] ARG3
 BRANCH VZERO
(ARG1 + 8) PTRADD ARG1 1 8
0 COPY 0
[(ARG1 + 8)] CAST [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1 ARG2 ARG3 ARG2
0 INT_EQUAL [(ARG1 + 8)] ARG3
 CBRANCH ([(ARG1 + 8)] INT_EQUAL ARG3)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0 0
0 COPY 0
1 COPY 1
 RETURN 0 1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
f() CALL func (RSP + -104)
 CBRANCH (f() INT_LESS f())
(f() + 40) CAST (f() + 40)
(RSP + -88) PTRSUB RSP -88
f() CALL func (RSP + -88)
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
 CBRANCH (0 INT_EQUAL [(f() + 40)])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
(RSP + -104) PTRSUB RSP -104
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_LESS f() f()
(FS_OFFSET + 40) INT_ADD 0 40
[(f() + 40)] LOAD 433 (f() + 40)
-1 COPY -1
(f() - f()) INT_SUB f() f()
-1 COPY -1
 BRANCH VZERO
((f() - f()) + 1) INT_ADD (f() - f()) 1
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL f())
0 INT_NOTEQUAL f() f()
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
 RETURN 0 f()
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
f() COPY f()
f() COPY f()
-1 COPY -1
f() CALL func (RSP + -88) f() f() f()
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
-1 COPY -1
(RSP + -40) PTRSUB RSP -40
(RSP + -88) PTRSUB RSP -88
f() CALL func (RSP + -40) f(ARG3) f(ARG4) f(ARG3)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
ARG1 CAST ARG1
ARG1 CAST ARG1
ARG1 INT_ZEXT ARG1
ARG1 INT_ZEXT ARG1
0 INT_SLESS ARG1 97
 RETURN 0 f(ARG1)
 CBRANCH (ARG1 INT_SLESS 97)
 CBRANCH (122 INT_SLESS ARG1)
0 INT_SLESS 122 ARG1
(ARG1 + 32) INT_SUB ARG1 32
 BRANCH VZERO
0 INT_SLESS ARG1 48
0 INT_SLESS 57 ARG1
 RETURN 0 f()
 CBRANCH (ARG1 INT_SLESS 48)
 CBRANCH (57 INT_SLESS ARG1)
1 COPY 1
0 COPY 0
 BRANCH VZERO
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
f() CALL func [ARG1] ARG2 ARG3 ARG2
0 INT_LESSEQUAL ARG3 [(ARG1 + 8)]
[(ARG1 + 8)] CAST [(ARG1 + 8)]
 CBRANCH (ARG3 INT_LESSEQUAL [(ARG1 + 8)])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
1 COPY 1
 RETURN 0 1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 COPY 0
 RETURN 0 0
0 INT_LESSEQUAL ARG3 [(ARG1 + 8)]
(f() - ARG3) INT_SUB f() ARG3
f() CALL func (f() - ARG3) ARG2 ARG3
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
 CBRANCH (ARG3 INT_LESSEQUAL [(ARG1 + 8)])
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0 1
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 RETURN 0 0
0 COPY 0
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 COPY ARG1
(ARG2 + f()) INT_ADD f() ARG2
(ARG2 + f()) INT_ADD f() ARG2
(ARG2 + f()) INT_ADD f() ARG2
(ARG2 + f()) INT_ADD f() ARG2
(ARG2 + f()) INT_ADD ARG2 f()
ARG3 COPY ARG3
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
f(ARG1 , RSP) CALL func (ARG1 + 8) (RSP + -64) (RSP + -64)
0 COPY 0
 CBRANCH (f() INT_EQUAL f(ARG1 , RSP))
f(ARG1 , RSP) CAST f(ARG1 , RSP)
0 INT_EQUAL f() f(ARG1 , RSP)
(RSP + -64) PTRSUB RSP -64
 CBRANCH ((f(ARG1 , RSP) + 1) INT_EQUAL (f() + 1))
 CBRANCH (f() INT_LESS f(ARG3))
(f() - f()) INT_SUB f() f()
f() CALL func ([f(ARG1)] + f()) (ARG2 + f()) (f() - f())
 CBRANCH (f() INT_NOTEQUAL 0)
([f(ARG1)] + f()) INT_ADD [f(ARG1)] f()
[f(ARG1)] LOAD 433 f(ARG1)
0 INT_NOTEQUAL f() 0
0 INT_LESS (f() + 1) [(f(ARG1) + 8)]
[(f(ARG1) + 8)] CAST [(f(ARG1) + 8)]
[(f(ARG1) + 8)] LOAD 433 (f(ARG1) + 8)
 CBRANCH (f() INT_NOTEQUAL f())
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
 CBRANCH ((f() + 1) INT_LESS [(f(ARG1) + 8)])
0 INT_NOTEQUAL f() f()
0 INT_LESS f() f(ARG3)
 CBRANCH (f() INT_NOTEQUAL 0)
 RETURN 0 4294967295
 RETURN 0 1
 RETURN 0 4294967295
 RETURN 0 1
 RETURN 0 4294967295
4294967295 COPY 4294967295
 RETURN 0 1
1 COPY 1
4294967295 COPY 4294967295
1 COPY 1
 RETURN 0 f()
4294967295 COPY 4294967295
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH ([(f(ARG1) + 8)] INT_EQUAL f(ARG3))
[(f(ARG1) + 8)] LOAD 433 (f(ARG1) + 8)
0 COPY 0
 CBRANCH ([(f(ARG1) + 8)] INT_LESS f(ARG3))
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
0 INT_LESS [(f(ARG1) + 8)] f(ARG3)
[(f(ARG1) + 8)] CAST [(f(ARG1) + 8)]
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
f() CALL func [(ARG2 + f())]
[(ARG2 + f())] INT_SEXT [(ARG2 + f())]
0 INT_EQUAL f() 0
(ARG2 + f()) CAST (ARG2 + f())
[(ARG2 + f())] LOAD 433 (ARG2 + f())
f() CALL func [(ARG2 + f())]
[(ARG2 + f())] INT_SEXT [(ARG2 + f())]
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
[(ARG2 + f())] LOAD 433 (ARG2 + f())
0 COPY 0
(ARG2 + f()) CAST (ARG2 + f())
 CBRANCH ([([f(ARG1)] + f())] INT_LESS [(ARG2 + f())])
1 COPY 1
 BRANCH VZERO
([f(ARG1)] + f()) INT_ADD f() [f(ARG1)]
0 INT_EQUAL [(f(ARG1) + 8)] f(ARG3)
[([f(ARG1)] + f())] LOAD 433 ([f(ARG1)] + f())
 CBRANCH f()
([f(ARG1)] + f()) CAST ([f(ARG1)] + f())
f() COPY f()
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
[f(ARG1)] LOAD 433 f(ARG1)
[(f(ARG1) + 8)] LOAD 433 (f(ARG1) + 8)
0 INT_EQUAL f() 0
f() CALL func [([f(ARG1)] + f())]
[([f(ARG1)] + f())] INT_SEXT [([f(ARG1)] + f())]
 BRANCH VZERO
 BRANCH VZERO
(f() + 1) INT_SUB f() 1
(f() + 1) INT_ADD f() 1
 CBRANCH (f() INT_SLESS 0)
0 INT_SLESS f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
4294967295 COPY 4294967295
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
0 INT_NOTEQUAL f() 0
f() COPY f()
 CBRANCH ([([f(ARG1)] + f())] INT_NOTEQUAL [(ARG2 + f())])
0 INT_LESS [([f(ARG1)] + f())] [(ARG2 + f())]
([f(ARG1)] + f()) CAST ([f(ARG1)] + f())
[f(ARG1)] LOAD 433 f(ARG1)
([f(ARG1)] + f()) INT_ADD f() [f(ARG1)]
[(ARG2 + f())] LOAD 433 (ARG2 + f())
(ARG2 + f()) CAST (ARG2 + f())
[([f(ARG1)] + f())] LOAD 433 ([f(ARG1)] + f())
(f() + 1) INT_ADD f() 1
[f(ARG1)] LOAD 433 f(ARG1)
[([f(ARG1)] + (f() + 1))] INT_SEXT [([f(ARG1)] + (f() + 1))]
[([f(ARG1)] + (f() + 1))] LOAD 433 ([f(ARG1)] + (f() + 1))
f() CALL func [([f(ARG1)] + (f() + 1))]
[f(ARG1)] LOAD 433 f(ARG1)
([f(ARG1)] + (f() + 1)) INT_ADD (f() + 1) [f(ARG1)]
([f(ARG1)] + (f() + 1)) CAST ([f(ARG1)] + (f() + 1))
0 INT_EQUAL (f(ARG1 , RSP) + 1) (f() + 1)
(f(ARG1 , RSP) + 1) INT_ADD f(ARG1 , RSP) 1
0 INT_NOTEQUAL [([f(ARG1)] + f())] [(ARG2 + f())]
[([f(ARG1)] + f())] LOAD 433 ([f(ARG1)] + f())
[(ARG2 + f())] LOAD 433 (ARG2 + f())
(ARG2 + f()) CAST (ARG2 + f())
([f(ARG1)] + f()) INT_ADD f() [f(ARG1)]
([f(ARG1)] + f()) CAST ([f(ARG1)] + f())
0 INT_NOTEQUAL f() 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
 STORE 433 ARG1 [f(ARG2)]
 STORE 433 ARG2 [f(RSP)]
f(ARG2) CALL func ARG2
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
f(RSP) CAST f(RSP)
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f(RSP) CALL func (RSP + -24)
(RSP + -24) PTRSUB RSP -24
[f(RSP)] LOAD 433 f(RSP)
(FS_OFFSET + 40) INT_ADD 0 40
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG1) CAST f(ARG1)
40 CAST 40
[f(ARG1)] LOAD 433 f(ARG1)
[40] LOAD 433 40
f(ARG2) CAST f(ARG2)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALL libcall_operator.delete[]_thunk ARG2
0 INT_NOTEQUAL ARG2 0
 RETURN 0
 CBRANCH (ARG2 INT_NOTEQUAL 0)
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
f() CALL func ARG1
ARG2 COPY ARG2
 CBRANCH (ARG2 INT_NOTEQUAL 0)
ARG2 COPY ARG2
0 INT_NOTEQUAL ARG2 0
 RETURN 0
 CALL func f() (RSP + -40) f()
(RSP + -40) PTRSUB RSP -40
 CALL func f() ARG2
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
0 INT_NOTEQUAL [f()] 0
 CBRANCH ([f()] INT_NOTEQUAL 0)
 RETURN 0
[f()] LOAD 433 f()
 STORE 433 f() 0
f() CAST f()
 CALL func f() f()
f() LOAD 433 f()
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
0 INT_LESSEQUAL [(ARG1 + 8)] ARG2
(ARG2 + [ARG1]) INT_ADD ARG2 [ARG1]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_LESSEQUAL ARG2)
[(ARG1 + 8)] CAST [(ARG1 + 8)]
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/ArrayRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
0 COPY 0
 RETURN 0 (ARG2 + [ARG1])
Index < Length && "Invalid index!" COPY Index < Length && "Invalid index!"
 RETURN 1
 CALL libcall___assert_fail_thunk Index < Length && "Invalid index!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/ArrayRef.h 187 0
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
0 INT_EQUAL ARG5 0
(ARG6 + 1) INT_ADD ARG6 1
0 INT_LESS ARG6 f(RSP)
0 INT_NOTEQUAL ARG6 0
0 INT_LESS 64 (f() + 1)
(RSP + -344) PTRSUB RSP -344
f() CALL func (RSP + -392)
 CBRANCH (64 INT_LESS (f() + 1))
0 COPY 0
f(ARG6 , RSP) COPY f(ARG6 , RSP)
(f() + 1) INT_ADD f() 1
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(RSP + -408) PTRSUB RSP -408
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
64 COPY 64
1 COPY 1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL func (RSP + -408)
1 COPY 1
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_LESS f() f()
0 INT_LESSEQUAL f() f()
(RSP + -296) PTRSUB RSP -296
f() INT_ZEXT f()
(RSP + -392) PTRSUB RSP -392
 CBRANCH (f() INT_LESS f())
 CALL func (RSP + -344)
 CBRANCH (f() INT_LESSEQUAL f())
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (ARG6 INT_NOTEQUAL 0)
 CBRANCH (ARG6 INT_LESS f(RSP))
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
((f() / 2147483647) + 1) INT_SUB (f() / 2147483647) 1
(f() / 2147483647) SUBPIECE f() 0
[(f(RSP) + (f() * 4))] COPY [(f(RSP) + (f() * 4))]
0 INT_LESSEQUAL f() f()
(f(RSP) + (f() * 4)) PTRADD f(RSP) f() 4
 STORE 433 f(RSP) (f() / 2147483647)
[(f(RSP) + (f() * 4))] LOAD 433 (f(RSP) + (f() * 4))
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_LESSEQUAL f())
1 COPY 1
 CBRANCH ((f() + 1) INT_LESS 2287828610704211969)
((f() + 1) * 4) INT_MULT (f() + 1) 4
-1 COPY -1
 BRANCH VZERO
 CBRANCH ([f()] INT_EQUAL [f()])
 STORE 433 (f(RSP) + (f() * 4)) f(RSP)
(f() * 4) INT_MULT f() 4
(f(RSP) + ((f() + -1) * 4)) PTRADD f(RSP) (f() + -1) 4
((f() * 4) + -4) INT_ADD (f() * 4) -4
f(RSP) CAST f(RSP)
f(RSP) CALL func (f(RSP) + ((f() + -1) * 4)) (f(RSP) + (f() * 4)) (f(RSP) + (f() * 4)) ((f() * 4) + -4)
[f(RSP)] LOAD 433 f(RSP)
(f() + -1) INT_SUB f() -1
([f(RSP)] + 1) INT_ADD [f(RSP)] 1
(f(RSP) + (f() * 4)) PTRADD f(RSP) f() 4
 STORE 433 (f(RSP) + (f() * 4)) ([f(RSP)] + 1)
(f(RSP) + (f() * 4)) PTRADD f(RSP) f() 4
 BRANCH VZERO
(f(RSP) + (f() * 4)) PTRADD f(RSP) f() 4
 RETURN 0 f(ARG6 , RSP)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (ARG5 INT_EQUAL 0)
(f() + 1) INT_SUB f() 1
(f() + 1) INT_SUB f() 1
((f() * 4) + -4) INT_ADD (f() * 4) -4
(f() + 1) INT_SUB f() 1
f() CAST f()
(f(RSP) + (f() * 4)) PTRADD f(RSP) f() 4
(RSP + -408) PTRSUB RSP -408
 BRANCH VZERO
([f(RSP)] + 1) INT_ADD [f(RSP)] 1
 STORE 433 (f(RSP) + (f() * 4)) [f(RSP)]
(RSP + -408) PTRSUB RSP -408
0 INT_ZEXT 0
f() CAST f()
(f(RSP) + ((f() + 1) * 4)) PTRADD f(RSP) (f() + 1) 4
f(RSP) CALL func (RSP + -372) (RSP + -368) (RSP + -368)
(RSP + -372) PTRSUB RSP -372
[f(RSP)] LOAD 433 f(RSP)
(f() * 4) INT_MULT f() 4
0 INT_NOTEQUAL [f()] [f()]
(RSP + -368) PTRSUB RSP -368
[f()] LOAD 433 f()
0 INT_EQUAL [f()] [f()]
f() CALL func (RSP + -392) (f() + 1) (f() + 1)
f() CAST f()
[f()] LOAD 433 f()
[f(RSP)] LOAD 433 f(RSP)
f() CALL func (RSP + -392) (f() + 1) (f() + 1)
f(RSP) CALL func (f(RSP) + ((f() + 1) * 4)) (f(RSP) + (f() * 4)) (f(RSP) + (f() * 4)) ((f() * 4) + -4)
(RSP + -392) PTRSUB RSP -392
(RSP + -392) PTRSUB RSP -392
f() CAST f()
f(RSP) CAST f(RSP)
(f(RSP) + (f() * 4)) PTRADD f(RSP) f() 4
f(RSP) CAST f(RSP)
(f() + 1) INT_SUB f() 1
[f()] LOAD 433 f()
(f() + 1) INT_SUB f() 1
f() CALL func (RSP + -408) (f() + 1) (f() + 1)
f() CALL func (RSP + -408) (f() + 1) (f() + 1)
[f()] LOAD 433 f()
f(RSP) INT_ADD f(RSP) 0
f() INT_ZEXT f()
 STORE 433 (f(RSP) + (f() * 4)) f()
(f(RSP) + (f() * 4)) PTRADD f(RSP) f() 4
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(RSP + -344) PTRSUB RSP -344
f() CALL libcall_operator.new[]_thunk f()
(f() + 1) INT_ADD f() 1
f() CAST f()
 CALL func (RSP + -344) f() f()
0 INT_LESS (f() + 1) 2287828610704211969
(f() + 1) INT_ADD f() 1
(RSP + -376) PTRSUB RSP -376
(f(RSP) + (f() * 4)) PTRADD f(RSP) f() 4
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CAST f(RSP)
f(RSP) CALL func (RSP + -376) (f(RSP) + (f() * 4)) (f(RSP) + (f() * 4))
f() COPY f()
(f(RSP) + (f() * 4)) PTRADD f(RSP) f() 4
[(f(RSP) + (f() * 4))] LOAD 433 (f(RSP) + (f() * 4))
 BRANCH VZERO
 BRANCH VZERO
f(RSP) COPY f(RSP)
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 (ARG1 + 8) ARG3
 RETURN 0
 CALL func (RSP + -40) ARG1 ARG2 ARG1
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
[40] LOAD 433 40
(RSP + -40) PTRSUB RSP -40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) COPY (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
ARG5 COPY ARG5
ARG4 COPY ARG4
 CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647) (f() / 4611686014132420609) ARG4 ARG5
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
f() CALL func f() f()
f() CALL func f() f()
(RSP + -72) PTRSUB RSP -72
 RETURN 0
(f() / 2147483647) INT_RIGHT f() 64
f() CALL func (RSP + -72)
f() CALL func ARG1
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
f() CALL func ARG1
f() CALL func (RSP + -72)
(RSP + -72) PTRSUB RSP -72
(f() / 2147483647) INT_RIGHT f() 64
 CALL libcall_basic_string_thunk ARG1 f() 0
f() CALL libcall_operator[]_thunk ARG1
ARG1 COPY ARG1
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
(RSP + -49) PTRSUB RSP -49
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL f())
0 COPY 0
0 INT_NOTEQUAL f() f()
 CALL libcall_~allocator_thunk (RSP + -49)
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_NOTEQUAL 0 [40]
(f() + 40) INT_ADD f() 40
 CALL libcall_allocator_thunk
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
([ARG2] + f()) INT_ADD f() [ARG2]
f() CAST f()
[([ARG2] + f())] LOAD 433 ([ARG2] + f())
([ARG2] + f()) CAST ([ARG2] + f())
 STORE 433 f() f(ARG2)
f(ARG2) CALL func [([ARG2] + f())]
[([ARG2] + f())] INT_SEXT [([ARG2] + f())]
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
 CALL libcall_basic_string_thunk ARG1 f() 0
f() CALL libcall_operator[]_thunk ARG1
ARG1 COPY ARG1
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
 CALL libcall_allocator_thunk
(RSP + -49) PTRSUB RSP -49
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL f())
0 COPY 0
0 INT_NOTEQUAL f() f()
 CALL libcall_~allocator_thunk (RSP + -49)
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_NOTEQUAL 0 [40]
(f() + 40) INT_ADD f() 40
(f() + 1) INT_ADD f() 1
([ARG2] + f()) INT_ADD f() [ARG2]
f() CAST f()
[([ARG2] + f())] LOAD 433 ([ARG2] + f())
([ARG2] + f()) CAST ([ARG2] + f())
 STORE 433 f() f(ARG2)
[([ARG2] + f())] INT_SEXT [([ARG2] + f())]
f(ARG2) CALL func [([ARG2] + f())]
 BRANCH VZERO
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
(ARG1 + 8) CAST (ARG1 + 8)
[(f() + 40)] LOAD 433 (f() + 40)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_LESS f())
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
0 INT_LESS [(ARG1 + 8)] f()
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
(ARG1 + 8) INT_ADD ARG1 8
0 INT_EQUAL 0 [(f() + 40)]
(A_Stack[-0x120]:8 # A_Stack[-0x128]:8) PIECE A_Stack[-0x120]:8 A_Stack[-0x128]:8
(RSP + -376) PTRSUB RSP -376
(A_Stack[-0x120]:8 # A_Stack[-0x128]:8) PIECE A_Stack[-0x120]:8 A_Stack[-0x128]:8
f() CALL func (RSP + -376)
(FS_OFFSET + 40) INT_ADD 0 40
 RETURN 1
 RETURN 0 f(ARG4 , RSP)
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (255 INT_LESS f())
f(RSP) CALL func (RSP + -360) (RSP + -320) (RSP + -320)
[f(RSP)] LOAD 433 f(RSP)
(ARG1 + 8) INT_ADD ARG1 8
f(RSP) CAST f(RSP)
 CBRANCH (f() INT_EQUAL 0)
(([(ARG1 + 8)] - f()) + 1) INT_ADD ([(ARG1 + 8)] - f()) 1
0 INT_EQUAL f() 0
(RSP + -360) PTRSUB RSP -360
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (f(RSP) INT_NOTEQUAL f(ARG1))
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(A_Stack[-0x120]:8 # A_Stack[-0x128]:8) PIECE A_Stack[-0x120]:8 A_Stack[-0x128]:8
([(ARG1 + 8)] - f()) INT_SUB [(ARG1 + 8)] f()
0 INT_NOTEQUAL f(RSP) f(ARG1)
(RSP + -320) PTRSUB RSP -320
 CBRANCH (ARG4 INT_LESS [(ARG1 + 8)])
(([(f(ARG1) + 8)] / 2147483647) - (f(ARG4) / 2147483647)) INT_SUB ([(f(ARG1) + 8)] / 2147483647) (f(ARG4) / 2147483647)
(f() + 1) INT_SUB f() 1
(RSP + -280) PTRSUB RSP -280
f() INT_ZEXT f()
(f(ARG1) + 8) CAST (f(ARG1) + 8)
(f() / 2147483647) SUBPIECE f() 0
-1 COPY -1
[(f(ARG1) + 8)] LOAD 433 (f(ARG1) + 8)
 BRANCH VZERO
 CBRANCH (f() INT_LESSEQUAL f(ARG1 , ARG4 , RSP))
([(f(ARG1) + 8)] / 2147483647) SUBPIECE [(f(ARG1) + 8)] 0
0 INT_LESSEQUAL f() f(ARG1 , ARG4 , RSP)
(f() # f()) PIECE f() f()
-1 COPY -1
0 COPY 0
(f(ARG1) + 8) INT_ADD f(ARG1) 8
 CALL libcall_memset_thunk (RSP + -280) (f() / 2147483647) 256
 CBRANCH (f() INT_NOTEQUAL (f() + 1))
f(ARG1 , ARG4 , RSP) INT_ZEXT f(ARG1 , ARG4 , RSP)
(f(ARG4) / 2147483647) SUBPIECE f(ARG4) 0
0 INT_NOTEQUAL f() (f() + 1)
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -280) PTRSUB RSP -280
((RSP + -280) + f()) PTRADD (RSP + -280) f() 1
(f() / 2147483647) SUBPIECE f() 8
f() INT_SEXT f()
((f(ARG4 , RSP) + f()) + -1) INT_ADD (f(ARG4 , RSP) + f()) -1
f(ARG4 , RSP) COPY f(ARG4 , RSP)
[((RSP + -280) + f())] INT_ZEXT [((RSP + -280) + f())]
f() CAST f()
[((RSP + -280) + f())] LOAD 433 ((RSP + -280) + f())
f(ARG4 , RSP) INT_ZEXT f(ARG4 , RSP)
(f() / 2147483647) SUBPIECE f() 0
(f(ARG4 , RSP) + f()) INT_ADD f() f(ARG4 , RSP)
 BRANCH VZERO
f(ARG4 , RSP) INT_ZEXT f(ARG4 , RSP)
(f(ARG4 , RSP) + [((RSP + -280) + f())]) INT_ADD f(ARG4 , RSP) [((RSP + -280) + f())]
f() INT_ZEXT f()
(f(ARG1 , ARG4 , RSP) - [((RSP + -280) + f())]) INT_SUB f(ARG1 , ARG4 , RSP) [((RSP + -280) + f())]
f() CALL func f(ARG1) ((f(ARG4 , RSP) + f()) + -1) ((f(ARG4 , RSP) + f()) + -1)
 BRANCH VZERO
[((RSP + -280) + f())] INT_ZEXT [((RSP + -280) + f())]
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
f(RSP) COPY f(RSP)
(f() / 2147483647) SUBPIECE f() 0
f() COPY f()
f() CALL func f(ARG1) f(RSP) f() f(RSP)
f() CALL func (RSP + -296) f(ARG2) f(ARG3) f(ARG2)
(RSP + -296) PTRSUB RSP -296
-1 COPY -1
-1 COPY -1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(ARG1 + 8) INT_ADD ARG1 8
0 INT_LESS ARG4 [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_LESS [(ARG1 + 8)] 16
-1 COPY -1
-1 COPY -1
(A_Stack[-0x120]:8 # A_Stack[-0x128]:8) COPY (A_Stack[-0x120]:8 # A_Stack[-0x128]:8)
 CBRANCH ([(ARG1 + 8)] INT_LESS 16)
 BRANCH VZERO
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
-1 COPY -1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
0 INT_NOTEQUAL f() 0
f() CALL func f(ARG1) f(ARG4 , RSP) f() f(ARG4 , RSP)
f() CALL func (RSP + -296) f(ARG2) f(ARG3)
(RSP + -296) PTRSUB RSP -296
-1 COPY -1
f() CAST f()
((f() / 2147483647) - (f() / 2147483647)) INT_SUB (f() / 2147483647) (f() / 2147483647)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -376) PTRSUB RSP -376
(f() / 2147483647) SUBPIECE f() 0
f() INT_SEXT f()
f() INT_ZEXT f()
 BRANCH VZERO
(((f() / 2147483647) - (f() / 2147483647)) + -1) INT_SUB ((f() / 2147483647) - (f() / 2147483647)) -1
 STORE 433 ((RSP + -280) + f()) (((f() / 2147483647) - (f() / 2147483647)) + -1)
f() CALL func (RSP + -376) f() f()
(RSP + -280) PTRSUB RSP -280
((RSP + -280) + f()) PTRADD (RSP + -280) f() 1
(f() + 1) INT_ADD f() 1
0 INT_LESS 255 f()
(f(RSP) + 1) INT_ADD f(RSP) 1
 BRANCH VZERO
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
0 INT_EQUAL 0 [(f() + 40)]
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -104) PTRSUB RSP -104
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(ARG1 + 8)] INT_LESS f())
 CBRANCH (0 INT_EQUAL [(f() + 40)])
0 INT_LESS [(ARG1 + 8)] f()
f() CALL func (RSP + -104)
(ARG1 + 8) INT_ADD ARG1 8
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) INT_ADD 0 40
-1 COPY -1
-1 COPY -1
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (f(ARG1) INT_EQUAL f())
0 INT_EQUAL f(ARG1) f()
([(ARG1 + 8)] - f()) INT_SUB [(ARG1 + 8)] f()
0 COPY 0
 BRANCH VZERO
(([(ARG1 + 8)] - f()) + 1) INT_ADD ([(ARG1 + 8)] - f()) 1
f() COPY f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -40) f(ARG2) f(ARG3) f(ARG2)
(RSP + -40) PTRSUB RSP -40
-1 COPY -1
-1 COPY -1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
f() CALL func f(ARG1) (f(ARG1) + -1) f() (f(ARG1) + -1)
(f(ARG1) + -1) INT_ADD f(ARG1) -1
(f(ARG1) + -1) COPY (f(ARG1) + -1)
 RETURN 0 f(ARG1)
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
f(ARG1 , RSP) CALL func (RSP + -104) (f(ARG1) + 8) (f(ARG1) + 8)
 CBRANCH ((f(ARG1 , RSP) + -1) INT_EQUAL f())
(RSP + -120) PTRSUB RSP -120
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
(f() + 40) INT_ADD f() 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f() [(f() + 40)]
0 COPY 0
0 INT_EQUAL (f(ARG1 , RSP) + -1) f()
0 INT_NOTEQUAL f() f()
[(f() + 40)] LOAD 433 (f() + 40)
0 COPY 0
f(ARG1 , RSP) CAST f(ARG1 , RSP)
0 COPY 0
f() CALL func (RSP + -120)
-1 COPY -1
0 COPY 0
(f(ARG1 , RSP) + -1) INT_ADD f(ARG1 , RSP) -1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -104) PTRSUB RSP -104
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) CAST (f() + 40)
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL f())
 CBRANCH (f() INT_EQUAL [(f() + 40)])
 CBRANCH (f() INT_EQUAL 0)
[((f(ARG1 , RSP) + -1) + [f(ARG1)])] LOAD 433 ((f(ARG1 , RSP) + -1) + [f(ARG1)])
f() CALL func (RSP + -56) [((f(ARG1 , RSP) + -1) + [f(ARG1)])] [((f(ARG1 , RSP) + -1) + [f(ARG1)])]
0 INT_EQUAL f() 0
-1 COPY -1
(f(ARG1 , RSP) + -1) COPY (f(ARG1 , RSP) + -1)
-1 COPY -1
((f(ARG1 , RSP) + -1) + [f(ARG1)]) INT_ADD (f(ARG1 , RSP) + -1) [f(ARG1)]
(RSP + -56) PTRSUB RSP -56
((f(ARG1 , RSP) + -1) + [f(ARG1)]) CAST ((f(ARG1 , RSP) + -1) + [f(ARG1)])
[f(ARG1)] LOAD 433 f(ARG1)
f() CALL func (RSP + -120) f() f()
(RSP + -56) PTRSUB RSP -56
(f() + 1) INT_ADD f() 1
(RSP + -120) PTRSUB RSP -120
 BRANCH VZERO
 CALL func (RSP + -56) f() 1 f()
 RETURN 1
 RETURN 0 f(ARG1 , RSP)
 CALL libcall___stack_chk_fail_thunk
ARG2 COPY ARG2
ARG1 COPY ARG1
(ARG1 + 8) PTRADD ARG1 1 8
ARG3 COPY ARG3
f(ARG1 , RSP) CALL func (RSP + -48) (ARG1 + 8) (ARG1 + 8)
 CBRANCH ((f(ARG1 , RSP) + -1) INT_EQUAL -1)
0 INT_EQUAL (f(ARG1 , RSP) + -1) -1
(RSP + -48) PTRSUB RSP -48
(f(ARG1 , RSP) + -1) INT_ADD f(ARG1 , RSP) -1
f(ARG1 , RSP) CAST f(ARG1 , RSP)
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
[((f(ARG1 , RSP) + -1) + [ARG1])] LOAD 433 ((f(ARG1 , RSP) + -1) + [ARG1])
 RETURN 0 -1
 RETURN 0 (f(ARG1 , RSP) + -1)
(f(ARG1 , RSP) + -1) COPY (f(ARG1 , RSP) + -1)
[ARG1] LOAD 433 ARG1
 CBRANCH ([((f(ARG1 , RSP) + -1) + [ARG1])] INT_EQUAL ARG2)
((f(ARG1 , RSP) + -1) + [ARG1]) CAST ((f(ARG1 , RSP) + -1) + [ARG1])
0 INT_EQUAL [((f(ARG1 , RSP) + -1) + [ARG1])] ARG2
((f(ARG1 , RSP) + -1) + [ARG1]) INT_ADD (f(ARG1 , RSP) + -1) [ARG1]
-1 COPY -1
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
0 COPY 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL func (RSP + -120)
(f() + 40) CAST (f() + 40)
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
0 COPY 0
-1 COPY -1
(f(ARG1 , RSP) + -1) INT_ADD f(ARG1 , RSP) -1
(RSP + -120) PTRSUB RSP -120
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() [(f() + 40)]
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL f())
0 INT_NOTEQUAL f() f()
f(ARG1 , RSP) CALL func (RSP + -104) (f(ARG1) + 8) (f(ARG1) + 8)
 CBRANCH ((f(ARG1 , RSP) + -1) INT_EQUAL f())
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
0 COPY 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f(ARG1 , RSP) CAST f(ARG1 , RSP)
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL (f(ARG1 , RSP) + -1) f()
0 COPY 0
(RSP + -104) PTRSUB RSP -104
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) f() 1 f()
(RSP + -120) PTRSUB RSP -120
f() CALL func (RSP + -120) f() f()
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
((f(ARG1 , RSP) + -1) + [f(ARG1)]) INT_ADD (f(ARG1 , RSP) + -1) [f(ARG1)]
[f(ARG1)] LOAD 433 f(ARG1)
-1 COPY -1
(f(ARG1 , RSP) + -1) COPY (f(ARG1 , RSP) + -1)
-1 COPY -1
[((f(ARG1 , RSP) + -1) + [f(ARG1)])] LOAD 433 ((f(ARG1 , RSP) + -1) + [f(ARG1)])
f() CALL func (RSP + -56) [((f(ARG1 , RSP) + -1) + [f(ARG1)])] [((f(ARG1 , RSP) + -1) + [f(ARG1)])]
(RSP + -56) PTRSUB RSP -56
((f(ARG1 , RSP) + -1) + [f(ARG1)]) CAST ((f(ARG1 , RSP) + -1) + [f(ARG1)])
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(ARG1 , RSP)
 RETURN 1
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 [ARG2]
(ARG2 + 8) PTRADD ARG2 1 8
[ARG2] LOAD 433 ARG2
f(ARG3) CALL func ARG3
 STORE 433 (ARG1 + 24) [(f(ARG3) + 8)]
 STORE 433 (ARG1 + 16) [f(ARG3)]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(f(ARG3) + 8) PTRADD f(ARG3) 1 8
 RETURN 0
[f(ARG3)] LOAD 433 f(ARG3)
f(ARG3) CAST f(ARG3)
 STORE 433 (ARG1 + 8) [(ARG2 + 8)]
[(f(ARG3) + 8)] LOAD 433 (f(ARG3) + 8)
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
ARG1 COPY ARG1
 CALL func ARG1 f(ARG2) f(ARG3) f(ARG2)
 RETURN 0 ARG1
ARG1 COPY ARG1
f(RSP) CALL func ARG2 ARG3 ARG4 0
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
f(ARG1) COPY f(ARG1)
 CBRANCH (f(RSP) INT_EQUAL -1)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f(RSP) -1
(RSP + -40) PTRSUB RSP -40
 CALL func ARG1 ARG2 (RSP + -40) ARG2
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
(RSP + -40) PTRSUB RSP -40
f() CALL func ARG2 0 f(RSP)
f() CALL func (RSP + -104)
(f() / 2147483647) SUBPIECE f() 8
(f(RSP) + f()) INT_ADD f() f(RSP)
(RSP + -104) PTRSUB RSP -104
(f() / 2147483647) SUBPIECE f() 0
(RSP + -56) PTRSUB RSP -56
f() CALL func ARG2 (f(RSP) + f()) -1 (f(RSP) + f())
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func ARG1 (RSP + -56) (RSP + -40) (RSP + -56)
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(ARG1)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
0 INT_EQUAL ARG6 0
0 INT_NOTEQUAL ARG6 0
 CALL func ARG2 (RSP + -72) (RSP + -72)
 CALL func ARG2 (RSP + -56) (RSP + -56)
 CALL func (RSP + -56) (RSP + -72) ARG3 ARG4
0 INT_SLESSEQUAL ARG5 f()
0 INT_SLESS 4294967295 ARG5
 CBRANCH f()
f() CALL func (RSP + -72)
 CBRANCH ~(f())
(RSP + -72) PTRSUB RSP -72
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(RSP + -72) PTRSUB RSP -72
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
~(f()) BOOL_NEGATE f()
f() CALL func (RSP + -72)
(RSP + -72) PTRSUB RSP -72
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 CBRANCH (ARG6 INT_NOTEQUAL 0)
 CBRANCH (ARG5 INT_SLESSEQUAL f())
0 COPY 0
1 COPY 1
 BRANCH VZERO
f() CALL func (RSP + -72)
(RSP + -72) PTRSUB RSP -72
0 INT_NOTEQUAL f() 0
0 COPY 0
 CBRANCH (ARG6 INT_EQUAL 0)
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func (RSP + -56)
1 COPY 1
 BRANCH VZERO
0 COPY 0
(RSP + -72) PTRSUB RSP -72
 CBRANCH f()
f() COPY f()
(RSP + -56) PTRSUB RSP -56
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
f() COPY f()
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
(RSP + -56) PTRSUB RSP -56
 CBRANCH (4294967295 INT_SLESS ARG5)
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
 CBRANCH (0 INT_EQUAL [(f() + 40)])
f() CALL func (RSP + -104)
(ARG1 + 8) INT_ADD ARG1 8
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
(f() + 40) CAST (f() + 40)
(RSP + -104) PTRSUB RSP -104
(FS_OFFSET + 40) INT_ADD 0 40
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH ([(ARG1 + 8)] INT_LESS f())
0 COPY 0
0 INT_LESS [(ARG1 + 8)] f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
(f() / 2147483647) SUBPIECE f() 0
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() COPY f()
(ARG1 + 8) CAST (ARG1 + 8)
0 COPY 0
([(ARG1 + 8)] - f()) INT_SUB [(ARG1 + 8)] f()
(([(ARG1 + 8)] - f()) + 1) INT_ADD ([(ARG1 + 8)] - f()) 1
0 COPY 0
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL f(ARG1))
0 INT_NOTEQUAL f() f(ARG1)
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
(f() + 1) INT_ADD f() 1
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f(ARG1) f() f() f()
(RSP + -40) PTRSUB RSP -40
f() CALL func (RSP + -40) f(ARG2) f(ARG3) f(ARG2)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 INT_NOTEQUAL f() 0
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
f() CALL func [ARG1] ARG2 ARG3 ARG2
0 INT_LESSEQUAL ARG3 [(ARG1 + 8)]
[(ARG1 + 8)] CAST [(ARG1 + 8)]
 CBRANCH (ARG3 INT_LESSEQUAL [(ARG1 + 8)])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
1 COPY 1
 RETURN 0 1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 COPY 0
 RETURN 0 0
 STORE 433 ARG1 (f() / 2147483647)
f() CALL func ARG1 2 -1
f() CALL func ARG1 A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
f() CALL func ARG1 2 -1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 (f() / 2147483647)
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1 A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
f() CALL func ARG1 2 -1
f() CALL func ARG1 A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
 STORE 433 ARG1 (f() / 2147483647)
f() CALL func ARG1 A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CALL func (RSP + -40) 4598040
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
4598040 PTRSUB 0 4598040
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (f() INT_EQUAL 0)
(RSP + -40) PTRSUB RSP -40
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
 CALL func (RSP + -40) 4598046
2 COPY 2
 STORE 433 (ARG1 + 8) (f() / 4611686014132420609)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
4598046 PTRSUB 0 4598046
(f() / 2147483647) INT_RIGHT f() 64
4598049 PTRSUB 0 4598049
(f() / 2147483647) INT_RIGHT f() 64
 CALL func (RSP + -40) 4598049
8 COPY 8
 STORE 433 (ARG1 + 8) (f() / 4611686014132420609)
(RSP + -40) PTRSUB RSP -40
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() 0
 BRANCH VZERO
4598043 PTRSUB 0 4598043
 CALL func (RSP + -40) 4598043
16 COPY 16
(f() / 2147483647) INT_RIGHT f() 64
 STORE 433 (ARG1 + 8) (f() / 4611686014132420609)
(RSP + -40) PTRSUB RSP -40
10 COPY 10
 BRANCH VZERO
8 COPY 8
ARG1 COPY ARG1
0 INT_EQUAL ARG3 0
ARG3 COPY ARG3
ARG2 COPY ARG2
 STORE 433 ARG4 ((f(ARG3) * f()) + f())
f() LOAD 433 ARG4
f() LOAD 433 ARG4
f(ARG3) LOAD 433 ARG4
 STORE 433 ARG4 0
(f(ARG2) # f(ARG1)) PIECE f(ARG2) f(ARG1)
 CBRANCH (ARG3 INT_EQUAL 0)
(RSP + -40) PTRSUB RSP -40
f() CALL func (RSP + -40)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f(ARG3) INT_LESSEQUAL f())
f(ARG3) INT_ZEXT f(ARG3)
 RETURN 0 f()
 RETURN 0 1
 RETURN 0 1
 RETURN 0 1
(f(ARG3) / f(ARG3)) INT_DIV f(ARG3) f(ARG3)
 CBRANCH ((f(ARG3) / f(ARG3)) INT_LESS f())
f() INT_ZEXT f()
((f(ARG3) * f()) + f()) INT_ADD (f(ARG3) * f()) f()
1 COPY 1
1 COPY 1
(f(ARG3) * f()) INT_MULT f() f(ARG3)
1 COPY 1
0 INT_LESS (f(ARG3) / f(ARG3)) f()
f(ARG3) INT_ZEXT f(ARG3)
 CBRANCH (57 INT_SLESS f())
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH f()
f() INT_SEXT f()
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
f() CALL func (RSP + -40) 0
0 INT_LESSEQUAL f(ARG3) f()
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
f() CALL func (RSP + -40) 0
0 INT_SLESS f() 97
 CBRANCH f()
(f() + 48) INT_SUB f() 48
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
 BRANCH VZERO
 CBRANCH (f() INT_SLESS 97)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 BRANCH VZERO
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
1 COPY 1
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
(RSP + -40) PTRSUB RSP -40
f() CALL func (RSP + -40)
 CBRANCH (f() INT_EQUAL 1)
f(ARG1 , ARG2) COPY f(ARG1 , ARG2)
0 INT_EQUAL f() 1
 CBRANCH (f() INT_SLESS 48)
(RSP + -40) PTRSUB RSP -40
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
f() CALL func (RSP + -40) 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
0 INT_SLESS 57 f()
 CBRANCH (122 INT_SLESS f())
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH (90 INT_SLESS f())
1 COPY 1
 BRANCH VZERO
0 COPY 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
f() CALL func (RSP + -40) 1 -1
(RSP + -40) PTRSUB RSP -40
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
 BRANCH VZERO
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
(RSP + -40) PTRSUB RSP -40
 BRANCH VZERO
(f() + 87) INT_SUB f() 87
(RSP + -40) PTRSUB RSP -40
f() CALL func (RSP + -40) 0
f() INT_SEXT f()
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
0 INT_SLESS f() 65
~(f()) BOOL_NEGATE f()
 CBRANCH ~(f())
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
 CBRANCH (f() INT_SLESS 65)
f() CALL func (RSP + -40) 0
 BRANCH VZERO
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
(f() + 55) INT_SUB f() 55
(RSP + -40) PTRSUB RSP -40
f() INT_SEXT f()
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
f() CALL func (RSP + -40) 0
f() CALL func (RSP + -40) 0
0 INT_SLESS f() 48
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
(RSP + -40) PTRSUB RSP -40
0 COPY 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
(RSP + -40) PTRSUB RSP -40
f() CALL func (RSP + -40) 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
0 INT_SLESS 90 f()
f() CALL func (RSP + -40) 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
(RSP + -40) PTRSUB RSP -40
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
0 INT_SLESS 122 f()
f() CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 RETURN 0 [[ARG1]]
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 CALL libcall___assert_fail_thunk !empty() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 117 char llvm::StringRef::front() const
[[ARG1]] COPY [[ARG1]]
[ARG1] CAST [ARG1]
[[ARG1]] LOAD 433 [ARG1]
!empty() COPY !empty()
 RETURN 1
char llvm::StringRef::front() const COPY char llvm::StringRef::front() const
ARG1 COPY ARG1
ARG2 COPY ARG2
 STORE 433 ARG4 f()
 STORE 433 ARG4 (~(f()) + 1)
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) ARG3 (RSP + -24) (f() / 2147483647) (f() / 4611686014132420609)
f() CALL func f(ARG1) f(ARG2) ARG3 (RSP + -24)
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func (RSP + -40)
(f() + 40) CAST (f() + 40)
(RSP + -40) PTRSUB RSP -40
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH f()
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 CBRANCH (f() INT_EQUAL 45)
0 COPY 0
 BRANCH VZERO
1 COPY 1
f() CALL func (RSP + -40)
0 INT_EQUAL f() 45
(RSP + -40) PTRSUB RSP -40
 CBRANCH (-1 INT_SLESS f())
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH (-1 INT_SLESS f())
0 COPY 0
1 COPY 1
 BRANCH VZERO
0 INT_EQUAL f() 0
(RSP + -40) PTRSUB RSP -40
f() CALL func (RSP + -40) 1 -1
(RSP + -24) PTRSUB RSP -24
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH f()
 CBRANCH f()
0 INT_EQUAL f() 0
(f() / 2147483647) INT_RIGHT f() 64
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(RSP + -24) PTRSUB RSP -24
 CBRANCH (f() INT_EQUAL 0)
0 INT_SLESS -1 f()
 BRANCH VZERO
(~(f()) + 1) INT_2COMP f()
1 COPY 1
0 COPY 0
 BRANCH VZERO
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 RETURN 1
0 INT_SLESS -1 f()
ARG1 INT_ZEXT ARG1
(ARG1 + 63) INT_ADD ARG1 63
 RETURN 0 ((ARG1 + 63) / 64)
((ARG1 + 63) / 64) INT_RIGHT (ARG1 + 63) 6
[ARG1] LOAD 433 ARG1
 RETURN 0
 CALL func [ARG1]
ARG1 INT_ZEXT ARG1
ARG1 INT_ZEXT ARG1
0 INT_LESS ARG1 1143914305352105985
0 INT_EQUAL f() 0
 CBRANCH (ARG1 INT_LESS 1143914305352105985)
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_operator.new[]_thunk f(ARG1)
 BRANCH VZERO
-1 COPY -1
(ARG1 * 8) INT_LEFT ARG1 3
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
(ARG1 * 8) INT_MULT ARG1 8
0 COPY 0
result && "APInt memory allocation fails!" COPY result && "APInt memory allocation fails!"
 RETURN 1
 CALL libcall___assert_fail_thunk result && "APInt memory allocation fails!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 36 0
 RETURN 0 f()
 CALL libcall_memset_thunk f() 0 (ARG1 * 8)
f() COPY f()
 STORE 433 [(ARG1 + 8)] ARG3
0 INT_SLESS ARG3 0
0 INT_NOTEQUAL ARG4 0
f() CALL func ARG1
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
f() CALL func f()
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) f()
 CBRANCH (ARG4 INT_NOTEQUAL 0)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (ARG3 INT_SLESS 0)
1 COPY 1
 CBRANCH (f() INT_LESSEQUAL f())
0 INT_LESSEQUAL f() f()
f() INT_ZEXT f()
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
 STORE 433 ([(ARG1 + 8)] + (f() * 8)) -1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
(ARG1 + 8) CAST (ARG1 + 8)
(f() * 8) INT_MULT f() 8
[ARG1] LOAD 433 ARG1
0 INT_LESS [ARG1] 65
([ARG1] & 4294967040) INT_OR ([ARG1] & 4294967040) 0
([ARG1] & 4294967040) INT_AND [ARG1] 4294967040
([ARG1] & 4294967040) COPY ([ARG1] & 4294967040)
0 INT_ZEXT 0
 RETURN 0 ([ARG1] & 4294967040)
f() CALL func ARG1
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
[ARG1] LOAD 433 ARG1
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
([ARG1] & 63) INT_AND [ARG1] 63
 CBRANCH (([ARG1] & 63) INT_NOTEQUAL 0)
0 INT_NOTEQUAL ([ARG1] & 63) 0
 CBRANCH (f() INT_EQUAL 0)
((f() + 1) * 8) INT_MULT (f() + 1) 8
(f() + 1) INT_ZEXT (f() + 1)
(f() + 1) INT_ZEXT (f() + 1)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([([(ARG1 + 8)] + ((f() + 1) * 8))] & (-1 >> (63 & (64 - (([ARG1] & 63) / 2147483647))))) INT_AND [([(ARG1 + 8)] + ((f() + 1) * 8))] (-1 >> (63 & (64 - (([ARG1] & 63) / 2147483647))))
(ARG1 + 8) CAST (ARG1 + 8)
((f() + 1) * 8) INT_MULT (f() + 1) 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 ([(ARG1 + 8)] + ((f() + 1) * 8)) ([([(ARG1 + 8)] + ((f() + 1) * 8))] & (-1 >> (63 & (64 - (([ARG1] & 63) / 2147483647)))))
([(ARG1 + 8)] + ((f() + 1) * 8)) CAST ([(ARG1 + 8)] + ((f() + 1) * 8))
(ARG1 + 8) CAST (ARG1 + 8)
(f() + 1) INT_SUB f() 1
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + ((f() + 1) * 8)) INT_ADD ((f() + 1) * 8) [(ARG1 + 8)]
([(ARG1 + 8)] & (-1 >> (63 & (64 - (([ARG1] & 63) / 2147483647))))) INT_AND [(ARG1 + 8)] (-1 >> (63 & (64 - (([ARG1] & 63) / 2147483647))))
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] & (-1 >> (63 & (64 - (([ARG1] & 63) / 2147483647)))))
(f() + 1) INT_SUB f() 1
[([(ARG1 + 8)] + ((f() + 1) * 8))] LOAD 433 ([(ARG1 + 8)] + ((f() + 1) * 8))
([(ARG1 + 8)] + ((f() + 1) * 8)) CAST ([(ARG1 + 8)] + ((f() + 1) * 8))
([(ARG1 + 8)] + ((f() + 1) * 8)) INT_ADD [(ARG1 + 8)] ((f() + 1) * 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(64 - (([ARG1] & 63) / 2147483647)) INT_SUB 64 (([ARG1] & 63) / 2147483647)
(63 & (64 - (([ARG1] & 63) / 2147483647))) INT_AND (64 - (([ARG1] & 63) / 2147483647)) 63
0 INT_EQUAL f() 0
(([ARG1] & 63) / 2147483647) SUBPIECE ([ARG1] & 63) 0
(-1 >> (63 & (64 - (([ARG1] & 63) / 2147483647)))) INT_RIGHT -1 (63 & (64 - (([ARG1] & 63) / 2147483647)))
 CALL func ARG1 ARG2 ARG3 ARG4
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 2 4
ARG2 LOAD 433 ARG1
f() CALL func ARG1
 CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
 STORE 433 (ARG1 + 8) ARG3
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (ARG2 INT_EQUAL 0)
0 INT_EQUAL ARG2 0
 STORE 433 (ARG1 + 8) 0
 CALL libcall___assert_fail_thunk BitWidth && "bitwidth too small" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h 238 0
 RETURN 0
 RETURN 1
0 COPY 0
0 INT_EQUAL f() 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h
 CBRANCH (f() INT_EQUAL 0)
BitWidth && "bitwidth too small" COPY BitWidth && "bitwidth too small"
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
 STORE 433 (ARG1 + 8) ARG2
 STORE 433 [(ARG1 + 8)] ARG2
 RETURN 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(f() + 536870911) INT_ADD f() 536870911
(ARG1 + 8) CAST (ARG1 + 8)
((f() + 536870911) * 8) INT_MULT (f() + 536870911) 8
((f() + 536870911) * 8) INT_ZEXT ((f() + 536870911) * 8)
 CALL libcall_memset_thunk ([(ARG1 + 8)] + 8) 0 ((f() + 536870911) * 8)
 BRANCH VZERO
([(ARG1 + 8)] + 8) CAST ([(ARG1 + 8)] + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + 8) INT_ADD [(ARG1 + 8)] 8
(ARG1 + 8) CAST (ARG1 + 8)
((f() + 536870911) * 8) CAST ((f() + 536870911) * 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 RETURN 0 f(ARG1)
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() CALL func ARG1
 RETURN 0 0
0 INT_XOR f() 1
0 COPY 0
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(ARG1 + 8)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL libcall_operator.delete[]_thunk [(ARG1 + 8)]
 STORE 433 (ARG1 + 8) ARG2
 STORE 433 ARG1 ARG3
(ARG1 + 8) PTRADD ARG1 2 4
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
ARG1 INT_ZEXT ARG1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 INT_LESS ARG1 1143914305352105985
f() CALL libcall_operator.new[]_thunk f(ARG1)
 CBRANCH (ARG1 INT_LESS 1143914305352105985)
 RETURN 1
 RETURN 0 f()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
f() COPY f()
0 COPY 0
result && "APInt memory allocation fails!" COPY result && "APInt memory allocation fails!"
 CALL libcall___assert_fail_thunk result && "APInt memory allocation fails!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 45 0
 BRANCH VZERO
(ARG1 * 8) INT_LEFT ARG1 3
-1 COPY -1
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
 STORE 433 ARG2 0
 STORE 433 ARG1 [ARG2]
(ARG1 + 8) PTRADD ARG1 2 4
(ARG2 + 8) CAST (ARG2 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 STORE 433 (ARG1 + 8) [(ARG2 + 8)]
 RETURN 0
f() CALL func ARG3
 CALL func ARG1 ARG3 [(ARG2 + 8)] 0
0 INT_LESS ARG3 65
 CALL func (RSP + -56) f() ARG3
0 INT_LESSEQUAL ARG3 [ARG2]
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -56) (RSP + -56)
f(ARG2) CALL func ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG3 INT_LESSEQUAL [ARG2])
 CBRANCH (f() INT_EQUAL f())
[(f(ARG2) + (f() * 8))] LOAD 433 (f(ARG2) + (f() * 8))
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
0 INT_EQUAL f() f()
(f() * 8) INT_MULT f() 8
((f() * 8) + f()) INT_ADD f() (f() * 8)
f() INT_ZEXT f()
((f() * 8) + f()) CAST ((f() * 8) + f())
(f(ARG2) + (f() * 8)) CAST (f(ARG2) + (f() * 8))
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
 STORE 433 ((f() * 8) + f()) [(f(ARG2) + (f() * 8))]
(f(ARG2) + (f() * 8)) INT_ADD (f() * 8) f(ARG2)
 CBRANCH (ARG3 INT_LESS 65)
f() INT_ZEXT f()
(RSP + -56) PTRSUB RSP -56
((f() * 8) + f()) INT_ADD f() (f() * 8)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
f() CALL func (RSP + -56)
0 COPY 0
(ARG2 + 8) CAST (ARG2 + 8)
(RSP + -56) PTRSUB RSP -56
((f() - f()) * 8) INT_ZEXT ((f() - f()) * 8)
((f() - f()) * 8) INT_MULT (f() - f()) 8
(f() * 8) INT_MULT f() 8
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
((f() * 8) + f()) CAST ((f() * 8) + f())
(RSP + -56) PTRSUB RSP -56
(f() - f()) INT_SUB f() f()
f() CALL func f()
 CALL libcall_memset_thunk ((f() * 8) + f()) 0 ((f() - f()) * 8)
 BRANCH VZERO
 RETURN 1
[(f() + 40)] LOAD 433 (f() + 40)
 CALL libcall___assert_fail_thunk width > BitWidth && "Invalid APInt ZeroExtend request" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 997 llvm::APInt llvm::APInt::zext(unsigned int) const
(f() + 40) CAST (f() + 40)
llvm::APInt llvm::APInt::zext(unsigned int) const COPY llvm::APInt llvm::APInt::zext(unsigned int) const
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
width > BitWidth && "Invalid APInt ZeroExtend request" COPY width > BitWidth && "Invalid APInt ZeroExtend request"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
0 INT_NOTEQUAL 0 [(f() + 40)]
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
(ARG1 + 8) PTRADD ARG1 2 4
ARG1 COPY ARG1
0 INT_EQUAL ARG1 ARG2
ARG1 COPY ARG1
(ARG1 + 8) PTRADD ARG1 2 4
 STORE 433 ARG1 f(ARG2)
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
f(ARG2) LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
 STORE 433 ARG2 0
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 CBRANCH (ARG1 INT_EQUAL ARG2)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 0)
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0 ARG1
0 INT_NOTEQUAL [(ARG1 + 8)] 0
 RETURN 0 ARG1
(ARG1 + 8) CAST (ARG1 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (ARG1 + 8) [(ARG2 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL libcall_operator.delete[]_thunk [(ARG1 + 8)]
f() CALL func ARG1
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG2 + 8) INT_ADD ARG2 8
(ARG1 + 8) CAST (ARG1 + 8)
(f() * 8) INT_LEFT f() 3
f() CALL func f()
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CALL libcall_memcpy_thunk [(ARG1 + 8)] [(ARG2 + 8)] (f() * 8)
(f() * 8) INT_ZEXT (f() * 8)
(ARG2 + 8) CAST (ARG2 + 8)
(f() * 8) CAST (f() * 8)
 STORE 433 (ARG1 + 8) f()
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func ARG1 ARG2 ARG2
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) 0
(ARG2 + 8) CAST (ARG2 + 8)
 BRANCH VZERO
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 STORE 433 (ARG1 + 8) [(ARG2 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CALL func ARG1 [ARG2] 0 0
(ARG2 + 8) PTRADD ARG2 2 4
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
(ARG2 + 8) PTRADD ARG2 2 4
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
(ARG3 / 2147483647) SUBPIECE ARG3 0
0 INT_EQUAL [ARG2] ARG3
0 INT_EQUAL ARG3 0
0 INT_LESS ARG3 64
(ARG3 / 64) INT_RIGHT ARG3 6
(ARG3 & 63) INT_AND ARG3 63
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH ([ARG2] INT_EQUAL ARG3)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (f() INT_LESS f())
([(ARG2 + 8)] + (f() * 8)) INT_ADD [(ARG2 + 8)] (f() * 8)
(ARG2 + 8) CAST (ARG2 + 8)
f() INT_ZEXT f()
((f() * 8) + f()) CAST ((f() * 8) + f())
f() CAST f()
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
([([(ARG2 + 8)] + (f() * 8))] >> (63 & (64 - (ARG3 / 2147483647)))) INT_RIGHT [([(ARG2 + 8)] + (f() * 8))] (63 & (64 - (ARG3 / 2147483647)))
[([(ARG2 + 8)] + (f() * 8))] LOAD 433 ([(ARG2 + 8)] + (f() * 8))
(f(ARG2 , ARG3) | ([([(ARG2 + 8)] + (f() * 8))] << (63 & (ARG3 / 2147483647)))) INT_OR ([([(ARG2 + 8)] + (f() * 8))] << (63 & (ARG3 / 2147483647))) f(ARG2 , ARG3)
([(ARG2 + 8)] + (f() * 8)) CAST ([(ARG2 + 8)] + (f() * 8))
(63 & (64 - (ARG3 / 2147483647))) INT_AND (64 - (ARG3 / 2147483647)) 63
 STORE 433 ((f() * 8) + f()) (f(ARG2 , ARG3) | ([([(ARG2 + 8)] + (f() * 8))] << (63 & (ARG3 / 2147483647))))
(ARG2 + 8) CAST (ARG2 + 8)
(f() * 8) INT_MULT f() 8
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
([(ARG2 + 8)] + (f() * 8)) INT_ADD [(ARG2 + 8)] (f() * 8)
[([(ARG2 + 8)] + (f() * 8))] LOAD 433 ([(ARG2 + 8)] + (f() * 8))
((f() * 8) + f()) INT_ADD (f() * 8) f()
(64 - (ARG3 / 2147483647)) INT_SUB 64 (ARG3 / 2147483647)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
0 INT_LESS f() f()
(f() * 8) INT_MULT f() 8
([([(ARG2 + 8)] + (f() * 8))] << (63 & (ARG3 / 2147483647))) INT_LEFT [([(ARG2 + 8)] + (f() * 8))] (63 & (ARG3 / 2147483647))
([(ARG2 + 8)] + (f() * 8)) CAST ([(ARG2 + 8)] + (f() * 8))
f() INT_ZEXT f()
(63 & (ARG3 / 2147483647)) INT_AND (ARG3 / 2147483647) 63
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
 CBRANCH (ARG3 INT_LESS 64)
 CALL func (RSP + -40)
 CBRANCH ((ARG3 & 63) INT_EQUAL 0)
(RSP + -40) PTRSUB RSP -40
0 INT_EQUAL (ARG3 & 63) 0
 BRANCH VZERO
(RSP + -40) PTRSUB RSP -40
0 COPY 0
 CALL func (RSP + -40) f() [ARG2] f()
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
0 COPY 0
(RSP + -40) PTRSUB RSP -40
 CBRANCH (ARG3 INT_EQUAL 0)
 BRANCH VZERO
 CBRANCH (f(ARG3) INT_LESS f())
(f(ARG3) + 1) COPY (f(ARG3) + 1)
(f(ARG3) - (ARG3 / 64)) INT_SUB f(ARG3) (ARG3 / 64)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
((f(ARG3) - (ARG3 / 64)) * 8) INT_MULT (f(ARG3) - (ARG3 / 64)) 8
(f(ARG3) - (ARG3 / 64)) INT_ZEXT (f(ARG3) - (ARG3 / 64))
(ARG2 + 8) CAST (ARG2 + 8)
((f(ARG3) * 8) + f()) INT_ADD (f(ARG3) * 8) f()
 STORE 433 ((f(ARG3) * 8) + f()) [(((f(ARG3) - (ARG3 / 64)) * 8) + [(ARG2 + 8)])]
(((f(ARG3) - (ARG3 / 64)) * 8) + [(ARG2 + 8)]) INT_ADD ((f(ARG3) - (ARG3 / 64)) * 8) [(ARG2 + 8)]
(f(ARG3) * 8) INT_MULT f(ARG3) 8
 BRANCH VZERO
(f(ARG3) + 1) INT_ADD f(ARG3) 1
((f(ARG3) * 8) + f()) CAST ((f(ARG3) * 8) + f())
[(((f(ARG3) - (ARG3 / 64)) * 8) + [(ARG2 + 8)])] LOAD 433 (((f(ARG3) - (ARG3 / 64)) * 8) + [(ARG2 + 8)])
f(ARG3) INT_ZEXT f(ARG3)
0 INT_LESS f(ARG3) f()
f() CAST f()
(((f(ARG3) - (ARG3 / 64)) * 8) + [(ARG2 + 8)]) CAST (((f(ARG3) - (ARG3 / 64)) * 8) + [(ARG2 + 8)])
0 INT_LESS f() 1143914305352105985
 BRANCH VZERO
f() INT_ZEXT f()
f() CALL libcall_operator.new[]_thunk f()
 CBRANCH (f() INT_LESS 1143914305352105985)
([[(ARG2 + 8)]] << ((ARG3 & 63) / 2147483647)) INT_LEFT [[(ARG2 + 8)]] ((ARG3 & 63) / 2147483647)
 CBRANCH ((f() + -1) INT_LESSEQUAL (ARG3 / 64))
(RSP + -40) PTRSUB RSP -40
 BRANCH VZERO
0 COPY 0
 CALL func (RSP + -40) f() [ARG2] f()
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
 CBRANCH (f() INT_LESS (ARG3 / 64))
0 INT_LESS f() (ARG3 / 64)
0 INT_LESSEQUAL (f() + -1) (ARG3 / 64)
(ARG3 / 64) COPY (ARG3 / 64)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
((ARG3 & 63) / 2147483647) SUBPIECE (ARG3 & 63) 0
 CALL func (RSP + -40)
(f() + -1) INT_SUB f() -1
 CALL func (RSP + -40) f() [ARG2] f()
(RSP + -40) PTRSUB RSP -40
 CBRANCH (f() INT_LESS (ARG3 / 64))
(RSP + -40) PTRSUB RSP -40
0 INT_LESS f() (ARG3 / 64)
(ARG2 + 8) CAST (ARG2 + 8)
[[(ARG2 + 8)]] LOAD 433 [(ARG2 + 8)]
(ARG3 / 64) INT_ZEXT (ARG3 / 64)
0 COPY 0
(RSP + -40) PTRSUB RSP -40
 STORE 433 (((ARG3 / 64) * 8) + f()) ([[(ARG2 + 8)]] << ((ARG3 & 63) / 2147483647))
(((ARG3 / 64) * 8) + f()) INT_ADD ((ARG3 / 64) * 8) f()
(((ARG3 / 64) * 8) + f()) CAST (((ARG3 / 64) * 8) + f())
f() CAST f()
(RSP + -40) PTRSUB RSP -40
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CALL func (RSP + -40)
((ARG3 / 64) * 8) INT_MULT (ARG3 / 64) 8
 STORE 433 ((f() * 8) + f()) 0
(f() * 8) INT_MULT f() 8
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() CAST f()
((f() * 8) + f()) CAST ((f() * 8) + f())
((f() * 8) + f()) INT_ADD f() (f() * 8)
f() INT_ZEXT f()
 BRANCH VZERO
(f() * 8) INT_LEFT f() 3
-1 COPY -1
((f() + -1) - (ARG3 / 64)) INT_ZEXT ((f() + -1) - (ARG3 / 64))
((f() + -1) - (ARG3 / 64)) INT_SUB (f() + -1) (ARG3 / 64)
(((f() + -1) - (ARG3 / 64)) * 8) INT_MULT ((f() + -1) - (ARG3 / 64)) 8
f() INT_ZEXT f()
(f() + 1) INT_ADD f() 1
f(ARG2 , ARG3) INT_RIGHT [(((((f() + -1) - (ARG3 / 64)) + 1) * 8) + [(ARG2 + 8)])] (63 & (64 - ((ARG3 & 63) / 2147483647)))
[(((((f() + -1) - (ARG3 / 64)) + 1) * 8) + [(ARG2 + 8)])] LOAD 433 (((((f() + -1) - (ARG3 / 64)) + 1) * 8) + [(ARG2 + 8)])
(63 & (64 - ((ARG3 & 63) / 2147483647))) INT_AND (64 - ((ARG3 & 63) / 2147483647)) 63
 BRANCH VZERO
(64 - ((ARG3 & 63) / 2147483647)) INT_SUB 64 ((ARG3 & 63) / 2147483647)
 BRANCH VZERO
f(ARG2 , ARG3) INT_OR f(ARG2 , ARG3) ([((((f() + -1) - (ARG3 / 64)) * 8) + [(ARG2 + 8)])] << ((ARG3 & 63) / 2147483647))
([((((f() + -1) - (ARG3 / 64)) * 8) + [(ARG2 + 8)])] << ((ARG3 & 63) / 2147483647)) INT_LEFT [((((f() + -1) - (ARG3 / 64)) * 8) + [(ARG2 + 8)])] ((ARG3 & 63) / 2147483647)
((((f() + -1) - (ARG3 / 64)) * 8) + [(ARG2 + 8)]) INT_ADD (((f() + -1) - (ARG3 / 64)) * 8) [(ARG2 + 8)]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
[((((f() + -1) - (ARG3 / 64)) * 8) + [(ARG2 + 8)])] LOAD 433 ((((f() + -1) - (ARG3 / 64)) * 8) + [(ARG2 + 8)])
((((f() + -1) - (ARG3 / 64)) * 8) + [(ARG2 + 8)]) CAST ((((f() + -1) - (ARG3 / 64)) * 8) + [(ARG2 + 8)])
 STORE 433 (((f() + -1) * 8) + f()) f(ARG2 , ARG3)
(((f() + -1) * 8) + f()) CAST (((f() + -1) * 8) + f())
(((((f() + -1) - (ARG3 / 64)) + 1) * 8) + [(ARG2 + 8)]) INT_ADD ((((f() + -1) - (ARG3 / 64)) + 1) * 8) [(ARG2 + 8)]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
((((f() + -1) - (ARG3 / 64)) + 1) * 8) INT_MULT (((f() + -1) - (ARG3 / 64)) + 1) 8
(((f() + -1) * 8) + f()) INT_ADD ((f() + -1) * 8) f()
((f() + -1) * 8) INT_MULT (f() + -1) 8
f() CAST f()
(((((f() + -1) - (ARG3 / 64)) + 1) * 8) + [(ARG2 + 8)]) CAST (((((f() + -1) - (ARG3 / 64)) + 1) * 8) + [(ARG2 + 8)])
(ARG2 + 8) CAST (ARG2 + 8)
(f() + -1) INT_ZEXT (f() + -1)
((f() * 8) + f()) CAST ((f() * 8) + f())
((f() * 8) + f()) INT_ADD f() (f() * 8)
f() CAST f()
(f() * 8) INT_MULT f() 8
 STORE 433 ((f() * 8) + f()) 0
(ARG2 + 8) CAST (ARG2 + 8)
(((f() + -1) - (ARG3 / 64)) + 1) INT_SUB ((f() + -1) - (ARG3 / 64)) 1
((f() + -1) - (ARG3 / 64)) INT_SUB (f() + -1) (ARG3 / 64)
(((f() + -1) - (ARG3 / 64)) + 1) INT_ZEXT (((f() + -1) - (ARG3 / 64)) + 1)
 CALL func ARG1 [ARG2] ([(ARG2 + 8)] << (63 & (ARG3 / 2147483647))) 0
ARG1 COPY ARG1
 CALL func ARG1 [ARG2] 0 0
 CALL func ARG1 ARG2 ARG3 ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
0 INT_LESS [ARG2] ARG3
(ARG3 / 2147483647) SUBPIECE ARG3 0
0 INT_LESS ARG3 [ARG2]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([ARG2] INT_LESS ARG3)
 CBRANCH (ARG3 INT_LESS [ARG2])
([(ARG2 + 8)] << (63 & (ARG3 / 2147483647))) INT_LEFT [(ARG2 + 8)] (63 & (ARG3 / 2147483647))
(63 & (ARG3 / 2147483647)) INT_AND (ARG3 / 2147483647) 63
 BRANCH VZERO
(ARG2 + 8) CAST (ARG2 + 8)
 BRANCH VZERO
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CBRANCH (f() INT_EQUAL 0)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
 RETURN 1
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL f() 0
(f() + 40) CAST (f() + 40)
 CALL libcall___assert_fail_thunk shiftAmt <= BitWidth && "Invalid shift amount" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h 869 llvm::APInt llvm::APInt::shl(unsigned int) const
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
shiftAmt <= BitWidth && "Invalid shift amount" COPY shiftAmt <= BitWidth && "Invalid shift amount"
llvm::APInt llvm::APInt::shl(unsigned int) const COPY llvm::APInt llvm::APInt::shl(unsigned int) const
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CALL func (RSP + -40) ARG1 ARG2 ARG1
ARG1 COPY ARG1
(RSP + -40) PTRSUB RSP -40
40 CAST 40
[40] LOAD 433 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -40) PTRSUB RSP -40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -40)
(FS_OFFSET + 40) INT_ADD 0 40
40 INT_ADD 0 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
0 INT_LESS f() ARG4
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
(ARG3 + (f() * 8)) INT_ADD ARG3 (f() * 8)
(ARG3 + (f() * 8)) INT_ADD (f() * 8) ARG3
 RETURN 0 f()
f() COPY f()
0 COPY 0
 CBRANCH (f() INT_LESS ARG4)
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
f() INT_ZEXT f()
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
0 COPY 0
 CBRANCH ([(ARG1 + (f() * 8))] INT_EQUAL [f(ARG3)])
0 INT_EQUAL [(ARG1 + (f() * 8))] [f(ARG3)]
 CBRANCH ([(ARG1 + (f() * 8))] INT_LESS [f(ARG3)])
1 COPY 1
 BRANCH VZERO
0 INT_NOTEQUAL f() 0
(f() * 8) INT_MULT f() 8
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
f() INT_ZEXT f()
[f(ARG3)] LOAD 433 f(ARG3)
f(ARG3) CALL func (ARG2 + (f() * 8)) (ARG3 + (f() * 8)) (ARG3 + (f() * 8)) (f() * 8)
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
[(ARG3 + (f() * 8))] LOAD 433 (ARG3 + (f() * 8))
(ARG3 + (f() * 8)) CAST (ARG3 + (f() * 8))
f(ARG3) CAST f(ARG3)
f() INT_ZEXT f()
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
(([(ARG2 + (f() * 8))] + [(ARG3 + (f() * 8))]) + f()) INT_ADD f() ([(ARG2 + (f() * 8))] + [(ARG3 + (f() * 8))])
 STORE 433 (ARG1 + (f() * 8)) (([(ARG2 + (f() * 8))] + [(ARG3 + (f() * 8))]) + f())
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
0 INT_LESS [(ARG1 + (f() * 8))] [f(ARG3)]
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
([(ARG2 + (f() * 8))] + [(ARG3 + (f() * 8))]) INT_ADD [(ARG2 + (f() * 8))] [(ARG3 + (f() * 8))]
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(ARG1 + 8) PTRADD ARG1 2 4
 CALL func ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
 CBRANCH ([ARG1] INT_NOTEQUAL [ARG2])
0 INT_NOTEQUAL [ARG1] [ARG2]
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be the same" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 253 llvm::APInt& llvm::APInt::operator+=(const llvm::APInt&)
llvm::APInt& llvm::APInt::operator+=(const llvm::APInt&) COPY llvm::APInt& llvm::APInt::operator+=(const llvm::APInt&)
 RETURN 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
BitWidth == RHS.BitWidth && "Bit widths must be the same" COPY BitWidth == RHS.BitWidth && "Bit widths must be the same"
0 INT_EQUAL f() 0
 RETURN 1
 CBRANCH (f() INT_EQUAL 0)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + [(ARG2 + 8)])
 CALL func [(ARG1 + 8)] [(ARG1 + 8)] [(ARG2 + 8)] f()
([(ARG1 + 8)] + [(ARG2 + 8)]) INT_ADD [(ARG1 + 8)] [(ARG2 + 8)]
ARG1 COPY ARG1
f() CALL func ARG1
 CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
([(ARG1 + 8)] | ARG2) INT_OR [(ARG1 + 8)] ARG2
([[(ARG1 + 8)]] | ARG2) INT_OR [[(ARG1 + 8)]] ARG2
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 RETURN 0 ARG1
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[[(ARG1 + 8)]] LOAD 433 [(ARG1 + 8)]
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] | ARG2)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 [(ARG1 + 8)] ([[(ARG1 + 8)]] | ARG2)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 / 64) INT_RIGHT ARG1 6
(ARG1 / 64) COPY (ARG1 / 64)
 RETURN 0 (ARG1 / 64)
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 RETURN 0
 BRANCH VZERO
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() * 8) INT_ZEXT (f() * 8)
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) 0
 CALL libcall_memset_thunk [(ARG1 + 8)] 0 (f() * 8)
(ARG1 + 8) CAST (ARG1 + 8)
(f() * 8) INT_LEFT f() 3
(f() * 8) CAST (f() * 8)
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
[ARG1] LOAD 433 ARG1
([(ARG1 + 8)] + ((f() + -1) * 8)) INT_ADD [(ARG1 + 8)] ((f() + -1) * 8)
0 INT_EQUAL ([ARG1] & 63) 0
 CBRANCH (([ARG1] & 63) INT_EQUAL 0)
(f() + -1) INT_ZEXT (f() + -1)
(f(ARG1) & [([(ARG1 + 8)] + ((f() + -1) * 8))]) INT_AND [([(ARG1 + 8)] + ((f() + -1) * 8))] f(ARG1)
(ARG1 + 8) CAST (ARG1 + 8)
[([(ARG1 + 8)] + ((f() + -1) * 8))] LOAD 433 ([(ARG1 + 8)] + ((f() + -1) * 8))
([ARG1] & 63) INT_AND [ARG1] 63
([(ARG1 + 8)] + ((f() + -1) * 8)) CAST ([(ARG1 + 8)] + ((f() + -1) * 8))
(f() + -1) INT_SUB f() -1
 CBRANCH ((f(ARG1) & [([(ARG1 + 8)] + ((f() + -1) * 8))]) INT_EQUAL 0)
((f() + -1) * 8) INT_MULT (f() + -1) 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_EQUAL (f(ARG1) & [([(ARG1 + 8)] + ((f() + -1) * 8))]) 0
(1 << (([ARG1] & 63) / 2147483647)) INT_LEFT 1 (([ARG1] & 63) / 2147483647)
(([ARG1] & 63) / 2147483647) SUBPIECE ([ARG1] & 63) 0
-1 COPY -1
((1 << (([ARG1] & 63) / 2147483647)) + 1) INT_SUB (1 << (([ARG1] & 63) / 2147483647)) 1
64 COPY 64
 BRANCH VZERO
(f(ARG1) + f()) INT_ADD f(ARG1) f()
f() CALL func (f(ARG1) & [([(ARG1 + 8)] + ((f() + -1) * 8))]) 2
 RETURN 0 f(ARG1)
f() COPY f()
f(ARG1) COPY f(ARG1)
(f(ARG1) + f()) COPY (f(ARG1) + f())
(f() + 4294967295) INT_ADD f() 4294967295
 RETURN 0 (f(ARG1) + f())
((f(ARG1) + f()) + 64) INT_SUB (f(ARG1) + f()) 64
f(ARG1) COPY f(ARG1)
 BRANCH VZERO
0 INT_NOTEQUAL (f() + 4294967295) 0
 CBRANCH ((f() + 4294967295) INT_NOTEQUAL 0)
[([(ARG1 + 8)] + ((f() + 2) * 8))] LOAD 433 ([(ARG1 + 8)] + ((f() + 2) * 8))
(f() + 2) INT_ZEXT (f() + 2)
0 INT_NOTEQUAL [([(ARG1 + 8)] + ((f() + 2) * 8))] 0
 CBRANCH ([([(ARG1 + 8)] + ((f() + 2) * 8))] INT_NOTEQUAL 0)
(ARG1 + 8) CAST (ARG1 + 8)
((f() + 2) * 8) INT_MULT (f() + 2) 8
(f() + 2) INT_SUB f() 2
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + ((f() + 2) * 8)) INT_ADD [(ARG1 + 8)] ((f() + 2) * 8)
([(ARG1 + 8)] + ((f() + 2) * 8)) CAST ([(ARG1 + 8)] + ((f() + 2) * 8))
([(ARG1 + 8)] + ((f() + 2) * 8)) INT_ADD [(ARG1 + 8)] ((f() + 2) * 8)
(f() + 4294967295) COPY (f() + 4294967295)
[([(ARG1 + 8)] + ((f() + 2) * 8))] LOAD 433 ([(ARG1 + 8)] + ((f() + 2) * 8))
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
f() CALL func [([(ARG1 + 8)] + ((f() + 2) * 8))] 2
(f(ARG1) + 64) INT_ADD f(ARG1) 64
(f() + 2) INT_SUB f() 2
(f(ARG1) + f()) INT_ADD f(ARG1) f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + ((f() + 2) * 8)) CAST ([(ARG1 + 8)] + ((f() + 2) * 8))
(f() + 2) INT_ZEXT (f() + 2)
((f() + 2) * 8) INT_MULT (f() + 2) 8
(ARG1 + 8) PTRADD ARG1 2 4
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
f(ARG1) CALL func ARG1
 RETURN 0 f(ARG1)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 BRANCH VZERO
(64 - [ARG1]) INT_SUB 64 [ARG1]
(ARG1 + 8) CAST (ARG1 + 8)
(f() - (64 - [ARG1])) CAST (f() - (64 - [ARG1]))
f() CALL func [(ARG1 + 8)] 2
(f() - (64 - [ARG1])) INT_SUB f() (64 - [ARG1])
(f() - (64 - [ARG1])) INT_ZEXT (f() - (64 - [ARG1]))
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[ARG1] LOAD 433 ARG1
f(ARG1) CALL func ARG1
([ARG1] - f(ARG1)) INT_SUB [ARG1] f(ARG1)
([ARG1] - f(ARG1)) COPY ([ARG1] - f(ARG1))
 RETURN 0 ([ARG1] - f(ARG1))
(ARG4 / 2147483647) INT_RIGHT ARG4 32
(ARG4 / 2147483647) INT_RIGHT ARG4 32
(ARG4 & 4294967295) INT_AND ARG4 4294967295
0 INT_LESS f() ARG3
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD (f() * 8) ARG1
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
0 COPY 0
 CBRANCH (f() INT_LESS ARG3)
0 COPY 0
f(ARG1 , ARG2 , ARG4) COPY f(ARG1 , ARG2 , ARG4)
 RETURN 0 f(ARG1 , ARG2 , ARG4)
 CBRANCH f(ARG1 , ARG2 , ARG4)
 CBRANCH f(ARG1 , ARG2 , ARG4)
0 INT_EQUAL f(ARG1 , ARG2 , ARG4) 0
 CBRANCH (f(ARG1 , ARG2 , ARG4) INT_LESSEQUAL [(ARG1 + (f() * 8))])
 CBRANCH f(ARG1 , ARG2 , ARG4)
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 2)
0 INT_NOTEQUAL f() 2
((([(ARG2 + (f() * 8))] & 4294967295) * (ARG4 / 2147483647)) / 2147483647) INT_RIGHT (([(ARG2 + (f() * 8))] & 4294967295) * (ARG4 / 2147483647)) 32
 CBRANCH (f(ARG1 , ARG2 , ARG4) INT_LESSEQUAL [(ARG1 + (f() * 8))])
(ARG4 / 4611686014132420609) SUBPIECE (ARG4 / 2147483647) 0
f() INT_ZEXT f()
(([(ARG2 + (f() * 8))] & 4294967295) / 2147483647) SUBPIECE ([(ARG2 + (f() * 8))] & 4294967295) 0
(([(ARG2 + (f() * 8))] & 4294967295) * (ARG4 / 2147483647)) INT_MULT ([(ARG2 + (f() * 8))] & 4294967295) (ARG4 / 2147483647)
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f(ARG1 , ARG2 , ARG4) INT_LEFT f(ARG1 , ARG2 , ARG4) 32
(([(ARG1 + (f() * 8))] / 2147483647) + (([(ARG2 + (f() * 8))] / 2147483647) * (ARG4 & 4294967295))) INT_ADD ([(ARG1 + (f() * 8))] / 2147483647) (([(ARG2 + (f() * 8))] / 2147483647) * (ARG4 & 4294967295))
(f() * 8) INT_MULT f() 8
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
((ARG4 / 4611686014132420609) * (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647)) INT_MULT (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647) (ARG4 / 4611686014132420609)
(f(ARG1 , ARG2 , ARG4) + (([(ARG2 + (f() * 8))] & 4294967295) * (ARG4 & 4294967295))) INT_ADD f(ARG1 , ARG2 , ARG4) (([(ARG2 + (f() * 8))] & 4294967295) * (ARG4 & 4294967295))
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f(ARG1 , ARG2 , ARG4) INT_ADD f(ARG1 , ARG2 , ARG4) ((([(ARG2 + (f() * 8))] & 4294967295) * (ARG4 / 2147483647)) / 2147483647)
f(ARG1 , ARG2 , ARG4) INT_ADD f() (([(ARG1 + (f() * 8))] / 2147483647) + (([(ARG2 + (f() * 8))] / 2147483647) * (ARG4 & 4294967295)))
f() INT_ZEXT f()
 STORE 433 (ARG1 + (f() * 8)) (f(ARG1 , ARG2 , ARG4) + (([(ARG2 + (f() * 8))] & 4294967295) * (ARG4 & 4294967295)))
(([(ARG2 + (f() * 8))] / 2147483647) * (ARG4 & 4294967295)) INT_MULT ([(ARG2 + (f() * 8))] / 2147483647) (ARG4 & 4294967295)
([(ARG2 + (f() * 8))] & 4294967295) INT_AND [(ARG2 + (f() * 8))] 4294967295
(([(ARG2 + (f() * 8))] & 4294967295) * (ARG4 & 4294967295)) INT_MULT ([(ARG2 + (f() * 8))] & 4294967295) (ARG4 & 4294967295)
f() INT_ZEXT f()
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
((ARG4 / 4611686014132420609) * (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647)) CAST ((ARG4 / 4611686014132420609) * (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647))
(f() * 8) INT_MULT f() 8
((ARG4 / 4611686014132420609) * (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647)) INT_ZEXT ((ARG4 / 4611686014132420609) * (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647))
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
(([(ARG2 + (f() * 8))] / 2147483647) * (ARG4 / 2147483647)) INT_MULT ([(ARG2 + (f() * 8))] / 2147483647) (ARG4 / 2147483647)
f(ARG1 , ARG2 , ARG4) INT_ADD (([(ARG2 + (f() * 8))] / 2147483647) * (ARG4 / 2147483647)) f(ARG1 , ARG2 , ARG4)
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
f() INT_ZEXT f()
f() INT_ZEXT f()
 STORE 433 (ARG1 + (f() * 8)) f(ARG1 , ARG2 , ARG4)
f(ARG1 , ARG2 , ARG4) INT_RIGHT f(ARG1 , ARG2 , ARG4) 32
0 INT_NOTEQUAL f(ARG1 , ARG2 , ARG4) 0
f(ARG1 , ARG2 , ARG4) INT_ADD f(ARG1 , ARG2 , ARG4) ((ARG4 / 4611686014132420609) * (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647))
(f() * 8) INT_MULT f() 8
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
([(ARG2 + (f() * 8))] / 2147483647) INT_RIGHT [(ARG2 + (f() * 8))] 32
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
f() INT_ZEXT f()
f() INT_ZEXT f()
([(ARG1 + (f() * 8))] & 4294967295) INT_AND [(ARG1 + (f() * 8))] 4294967295
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
0 INT_LESSEQUAL f(ARG1 , ARG2 , ARG4) [(ARG1 + (f() * 8))]
f(ARG1 , ARG2 , ARG4) INT_ADD f(ARG1 , ARG2 , ARG4) f()
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
0 INT_EQUAL f(ARG1 , ARG2 , ARG4) 0
f(ARG1 , ARG2 , ARG4) INT_OR ([(ARG1 + (f() * 8))] & 4294967295) f(ARG1 , ARG2 , ARG4)
(f() * 8) INT_MULT f() 8
([(ARG1 + (f() * 8))] / 2147483647) INT_RIGHT [(ARG1 + (f() * 8))] 32
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
0 COPY 0
4294967296 COPY 4294967296
 BRANCH VZERO
2 COPY 2
0 COPY 0
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
0 COPY 0
4294967296 COPY 4294967296
1 COPY 1
f(ARG1 , ARG2 , ARG4) CALL func ARG1 ARG2 ARG3
ARG3 INT_ZEXT ARG3
0 INT_LESS f() ARG3
(ARG3 + f()) INT_ADD ARG3 f()
((ARG3 * 8) + ARG1) INT_ADD (ARG3 * 8) ARG1
(ARG1 + ((f() + f()) * 8)) INT_ADD ARG1 ((f() + f()) * 8)
(((ARG3 + f()) * 8) + ARG1) INT_ADD ((ARG3 + f()) * 8) ARG1
(ARG1 + ((f() + f()) * 8)) INT_ADD ARG1 ((f() + f()) * 8)
(ARG1 + ((f() + f()) * 8)) INT_ADD ARG1 ((f() + f()) * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
(ARG4 + (f() * 8)) INT_ADD ARG4 (f() * 8)
(ARG4 + (f() * 8)) INT_ADD ARG4 (f() * 8)
0 INT_LESS f() ARG5
(ARG3 * 8) INT_MULT ARG3 8
 CBRANCH (f() INT_LESS ARG5)
 RETURN 0
1 COPY 1
((ARG3 * 8) + ARG1) CAST ((ARG3 * 8) + ARG1)
 STORE 433 ((ARG3 * 8) + ARG1) f(ARG1 , ARG2 , ARG4)
 CBRANCH f(ARG2 , ARG4)
0 COPY 0
 BRANCH VZERO
4294967296 COPY 4294967296
 CBRANCH f(ARG2 , ARG4)
 BRANCH VZERO
0 COPY 0
 BRANCH VZERO
2 COPY 2
 CBRANCH f(ARG2 , ARG4)
0 INT_EQUAL f(ARG2 , ARG4) 0
1 COPY 1
 CBRANCH (f() INT_LESS ARG3)
f(ARG1 , ARG2 , ARG4) INT_ADD f(ARG2 , ARG4) [(ARG1 + ((f() + f()) * 8))]
f(ARG2 , ARG4) INT_ADD f(ARG2 , ARG4) 0
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(ARG1 + ((f() + f()) * 8)) CAST (ARG1 + ((f() + f()) * 8))
 STORE 433 (ARG1 + ((f() + f()) * 8)) f(ARG1 , ARG2 , ARG4)
0 INT_ZEXT 0
f(ARG2 , ARG4) INT_OR f(ARG2 , ARG4) f(ARG2 , ARG4)
f(ARG2 , ARG4) INT_RIGHT f(ARG2 , ARG4) 32
([(ARG2 + (f() * 8))] & 4294967295) INT_AND [(ARG2 + (f() * 8))] 4294967295
f() INT_ZEXT f()
f(ARG2 , ARG4) INT_RIGHT (f(ARG2 , ARG4) + (([(ARG4 + (f() * 8))] & 4294967295) * ([(ARG2 + (f() * 8))] & 4294967295))) 32
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
(([(ARG4 + (f() * 8))] / 2147483647) * ([(ARG2 + (f() * 8))] / 2147483647)) INT_MULT ([(ARG2 + (f() * 8))] / 2147483647) ([(ARG4 + (f() * 8))] / 2147483647)
([(ARG4 + (f() * 8))] / 4611686014132420609) SUBPIECE ([(ARG4 + (f() * 8))] / 2147483647) 0
f(ARG2 , ARG4) INT_ADD (([(ARG4 + (f() * 8))] / 2147483647) * ([(ARG2 + (f() * 8))] / 2147483647)) f(ARG2 , ARG4)
0 INT_LESSEQUAL f(ARG2 , ARG4) (f(ARG2 , ARG4) + (([(ARG4 + (f() * 8))] & 4294967295) * ([(ARG2 + (f() * 8))] & 4294967295)))
(ARG1 + ((f() + f()) * 8)) CAST (ARG1 + ((f() + f()) * 8))
(f() * 8) INT_MULT f() 8
(([(ARG2 + (f() * 8))] & 4294967295) / 2147483647) SUBPIECE ([(ARG2 + (f() * 8))] & 4294967295) 0
0 INT_NOTEQUAL f(ARG2 , ARG4) 0
(([(ARG4 + (f() * 8))] / 2147483647) * ([(ARG2 + (f() * 8))] & 4294967295)) INT_MULT ([(ARG2 + (f() * 8))] & 4294967295) ([(ARG4 + (f() * 8))] / 2147483647)
f(ARG2 , ARG4) INT_ADD f(ARG2 , ARG4) (([(ARG4 + (f() * 8))] / 4611686014132420609) * (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647))
(([(ARG4 + (f() * 8))] / 4611686014132420609) * (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647)) INT_MULT (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647) ([(ARG4 + (f() * 8))] / 4611686014132420609)
 CBRANCH f(ARG2 , ARG4)
f(ARG2 , ARG4) INT_ADD f(ARG2 , ARG4) ((([(ARG4 + (f() * 8))] & 4294967295) * ([(ARG2 + (f() * 8))] / 2147483647)) + f())
f(ARG2 , ARG4) INT_ADD f() f(ARG2 , ARG4)
(f() + f()) INT_ADD f() f()
0 INT_EQUAL f(ARG2 , ARG4) 0
([(ARG4 + (f() * 8))] / 2147483647) INT_RIGHT [(ARG4 + (f() * 8))] 32
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
f(ARG2 , ARG4) INT_AND (f(ARG2 , ARG4) + (([(ARG4 + (f() * 8))] & 4294967295) * ([(ARG2 + (f() * 8))] & 4294967295))) 4294967295
([(ARG2 + (f() * 8))] / 2147483647) INT_RIGHT [(ARG2 + (f() * 8))] 32
f(ARG2 , ARG4) INT_LEFT f(ARG2 , ARG4) 32
[(ARG1 + ((f() + f()) * 8))] LOAD 433 (ARG1 + ((f() + f()) * 8))
(([(ARG4 + (f() * 8))] / 4611686014132420609) * (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647)) CAST (([(ARG4 + (f() * 8))] / 4611686014132420609) * (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647))
(f() + f()) INT_ZEXT (f() + f())
(f() + f()) INT_ADD f() f()
(([(ARG4 + (f() * 8))] / 4611686014132420609) * (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647)) INT_ZEXT (([(ARG4 + (f() * 8))] / 4611686014132420609) * (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647))
(f() * 8) INT_MULT f() 8
((f() + f()) * 8) INT_MULT (f() + f()) 8
 CBRANCH f(ARG2 , ARG4)
((([(ARG4 + (f() * 8))] / 2147483647) * ([(ARG2 + (f() * 8))] & 4294967295)) / 2147483647) INT_RIGHT (([(ARG4 + (f() * 8))] / 2147483647) * ([(ARG2 + (f() * 8))] & 4294967295)) 32
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
[(ARG1 + ((f() + f()) * 8))] LOAD 433 (ARG1 + ((f() + f()) * 8))
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
((f() + f()) * 8) INT_MULT (f() + f()) 8
((([(ARG4 + (f() * 8))] & 4294967295) * ([(ARG2 + (f() * 8))] / 2147483647)) + f()) INT_ADD (([(ARG4 + (f() * 8))] & 4294967295) * ([(ARG2 + (f() * 8))] / 2147483647)) f()
(f(ARG2 , ARG4) + (([(ARG4 + (f() * 8))] & 4294967295) * ([(ARG2 + (f() * 8))] & 4294967295))) INT_ADD f(ARG2 , ARG4) (([(ARG4 + (f() * 8))] & 4294967295) * ([(ARG2 + (f() * 8))] & 4294967295))
0 INT_LESS [(ARG1 + ((f() + f()) * 8))] f(ARG2 , ARG4)
(ARG1 + ((f() + f()) * 8)) CAST (ARG1 + ((f() + f()) * 8))
(([(ARG4 + (f() * 8))] & 4294967295) * ([(ARG2 + (f() * 8))] / 2147483647)) INT_MULT ([(ARG2 + (f() * 8))] / 2147483647) ([(ARG4 + (f() * 8))] & 4294967295)
(f() + f()) INT_ZEXT (f() + f())
f() INT_ZEXT f()
(([(ARG4 + (f() * 8))] & 4294967295) * ([(ARG2 + (f() * 8))] & 4294967295)) INT_MULT ([(ARG2 + (f() * 8))] & 4294967295) ([(ARG4 + (f() * 8))] & 4294967295)
f(ARG2 , ARG4) INT_ADD f(ARG2 , ARG4) ((([(ARG4 + (f() * 8))] / 2147483647) * ([(ARG2 + (f() * 8))] & 4294967295)) / 2147483647)
((f() + f()) * 8) INT_MULT (f() + f()) 8
(f() + f()) INT_ADD f() f()
(f() + f()) INT_ZEXT (f() + f())
 CBRANCH (f() INT_EQUAL 1)
4294967296 COPY 4294967296
 BRANCH VZERO
0 COPY 0
[(ARG4 + (f() * 8))] LOAD 433 (ARG4 + (f() * 8))
0 COPY 0
(((ARG3 + f()) * 8) + ARG1) CAST (((ARG3 + f()) * 8) + ARG1)
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(ARG4 + (f() * 8)) CAST (ARG4 + (f() * 8))
f() INT_ZEXT f()
(ARG3 + f()) INT_ZEXT (ARG3 + f())
([(ARG4 + (f() * 8))] / 2147483647) INT_RIGHT [(ARG4 + (f() * 8))] 32
0 COPY 0
 STORE 433 (((ARG3 + f()) * 8) + ARG1) f(ARG2 , ARG4)
(ARG4 + (f() * 8)) CAST (ARG4 + (f() * 8))
([(ARG4 + (f() * 8))] & 4294967295) INT_AND [(ARG4 + (f() * 8))] 4294967295
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
((ARG3 + f()) * 8) INT_MULT (ARG3 + f()) 8
[(ARG4 + (f() * 8))] LOAD 433 (ARG4 + (f() * 8))
 CBRANCH (f() INT_NOTEQUAL 2)
0 INT_EQUAL f() 1
0 INT_NOTEQUAL f() 2
[ARG1] LOAD 433 ARG1
 CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
 CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
 CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
(ARG2 + 8) PTRADD ARG2 2 4
 CBRANCH ([ARG1] INT_EQUAL [ARG2])
0 INT_EQUAL [ARG1] [ARG2]
0 INT_EQUAL f() 0
 RETURN 1
 CBRANCH (f() INT_EQUAL 0)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
BitWidth == RHS.BitWidth && "Bit widths must be the same" COPY BitWidth == RHS.BitWidth && "Bit widths must be the same"
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be the same" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 357 llvm::APInt& llvm::APInt::operator*=(const llvm::APInt&)
llvm::APInt& llvm::APInt::operator*=(const llvm::APInt&) COPY llvm::APInt& llvm::APInt::operator*=(const llvm::APInt&)
 CBRANCH (f() INT_EQUAL 0)
f() CALL func (f() + 4294967295)
0 COPY 0
 BRANCH VZERO
(f() + 4294967295) INT_ADD f() 4294967295
(f() + 1) INT_ADD f() 1
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
(f() + 1) INT_ADD f() 1
f() CALL func (f() + 4294967295)
 BRANCH VZERO
0 COPY 0
(f() + 4294967295) INT_ADD f() 4294967295
0 INT_NOTEQUAL f() 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() CAST f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
0 INT_LESSEQUAL f() (f() + f())
 BRANCH VZERO
 CALL func f() [(ARG1 + 8)] f() [(ARG2 + 8)] f()
(ARG1 + 8) CAST (ARG1 + 8)
(f() * 8) INT_ZEXT (f() * 8)
 CBRANCH (f() INT_LESSEQUAL (f() + f()))
(f() * 8) INT_LEFT f() 3
f() CALL func (f() + f())
 CALL libcall_memcpy_thunk [(ARG1 + 8)] f() (f() * 8)
(ARG1 + 8) CAST (ARG1 + 8)
(f() + f()) INT_ADD f() f()
(ARG2 + 8) CAST (ARG2 + 8)
 CBRANCH (f() INT_NOTEQUAL 0)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
0 INT_NOTEQUAL f() 0
 BRANCH VZERO
 STORE 433 (ARG1 + 8) ([(ARG2 + 8)] * [(ARG1 + 8)])
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_EQUAL f() 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
([(ARG2 + 8)] * [(ARG1 + 8)]) INT_MULT [(ARG1 + 8)] [(ARG2 + 8)]
 CALL libcall_operator.delete[]_thunk f()
 BRANCH VZERO
 STORE 433 ARG1 1
 RETURN 0
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func (RSP + -56) ARG3 (f() * f()) ARG3
 CALL func ARG3 (RSP + -56) (RSP + -56)
 CALL func ARG3 (RSP + -56) (RSP + -56)
f() CALL func ARG3
 CALL func ARG3 (RSP + -88) (RSP + -88)
 CALL func ARG3 f() f()
 CALL func ARG3 0
f() CALL func ARG3
 CALL func ARG3 (RSP + -72) (RSP + -72)
 CALL func ARG3 f() f()
f() CALL func ARG3
0 INT_EQUAL ARG2 0
ARG2 COPY ARG2
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f(ARG2) INT_LESS 2)
0 INT_LESS f(ARG2) 2
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (ARG2 INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/StringRef.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/StringRef.cpp
Radix > 1 && Radix <= 36 COPY Radix > 1 && Radix <= 36
0 INT_LESS 36 f(ARG2)
 CALL libcall___assert_fail_thunk Radix > 1 && Radix <= 36 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/StringRef.cpp 413 bool llvm::StringRef::getAsInteger(unsigned int, llvm::APInt&) const
 CBRANCH (36 INT_LESS f(ARG2))
bool llvm::StringRef::getAsInteger(unsigned int, llvm::APInt&) const COPY bool llvm::StringRef::getAsInteger(unsigned int, llvm::APInt&) const
 CBRANCH (f() INT_EQUAL 0)
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
f() CALL func (RSP + -104)
0 INT_EQUAL f() 1
f() CALL func (RSP + -104)
 CBRANCH (f() INT_EQUAL 1)
1 COPY 1
 CBRANCH ~(f())
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(f(ARG1) # f(ARG1)) COPY (f(ARG1) # f(ARG1))
(RSP + -104) PTRSUB RSP -104
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
~(f()) BOOL_NEGATE f()
(RSP + -104) PTRSUB RSP -104
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
f(ARG1) COPY f(ARG1)
 CBRANCH (f() INT_NOTEQUAL 48)
0 COPY 0
 BRANCH VZERO
1 COPY 1
f() CALL func (RSP + -104)
0 INT_NOTEQUAL f() 48
(RSP + -104) PTRSUB RSP -104
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
f() CALL func (RSP + -104) 1 -1
 BRANCH VZERO
(RSP + -104) PTRSUB RSP -104
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
 CBRANCH ((f() * f()) INT_LESS f())
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
 CBRANCH (f() INT_LESS (f() * f()))
 BRANCH VZERO
0 INT_LESS f() (f() * f())
 CBRANCH (f(ARG2) INT_LESSEQUAL f())
f(ARG1) COPY f(ARG1)
 BRANCH VZERO
0 INT_EQUAL f() 1
(RSP + -104) PTRSUB RSP -104
1 COPY 1
 BRANCH VZERO
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
f() CALL func (RSP + -104)
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 1 -1
 CBRANCH ((1 << (31 & (f() / 2147483647))) INT_NOTEQUAL f(ARG2))
 CBRANCH (f() INT_EQUAL 1)
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL f() 0
(RSP + -104) PTRSUB RSP -104
(f(ARG1) # f(ARG1)) PIECE f(ARG1) f(ARG1)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
f() CALL func (RSP + -104)
f() COPY f()
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
 CBRANCH (57 INT_SLESS f())
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH ((1 << (31 & (f() / 2147483647))) INT_NOTEQUAL f(ARG2))
(RSP + -88) PTRSUB RSP -88
(RSP + -72) PTRSUB RSP -72
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(RSP + -56) PTRSUB RSP -56
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
 CALL func (RSP + -88) (RSP + -56) (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
 CALL func (RSP + -56) f() 0 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(RSP + -56) PTRSUB RSP -56
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
 CALL func (RSP + -56) f() f(ARG2) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -72) (RSP + -56) (RSP + -56)
 CALL func (RSP + -56)
 CBRANCH f()
f() INT_SEXT f()
(RSP + -104) PTRSUB RSP -104
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 0
0 INT_LESSEQUAL f(ARG2) f()
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
0 INT_SLESS f() 97
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
 CBRANCH f()
f() CALL func (RSP + -104) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
 CBRANCH (f() INT_SLESS 97)
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
(f() + 48) INT_SUB f() 48
 BRANCH VZERO
 CBRANCH (122 INT_SLESS f())
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH (90 INT_SLESS f())
0 COPY 0
 BRANCH VZERO
1 COPY 1
 RETURN 1
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
 CBRANCH (f() INT_SLESS 48)
0 INT_SLESS 57 f()
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
 CBRANCH ~(f())
(RSP + -104) PTRSUB RSP -104
1 COPY 1
 BRANCH VZERO
(f() + 55) INT_SUB f() 55
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
 BRANCH VZERO
f() INT_SEXT f()
f() CALL func (RSP + -104) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
 BRANCH VZERO
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
(f() + 87) INT_SUB f() 87
f() CALL func (RSP + -104) 0
(RSP + -104) PTRSUB RSP -104
f() INT_SEXT f()
(RSP + -104) PTRSUB RSP -104
~(f()) BOOL_NEGATE f()
0 INT_SLESS f() 65
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
 CBRANCH (f() INT_SLESS 65)
f() CALL func (RSP + -104) 0
(31 & (f() / 2147483647)) INT_AND (f() / 2147483647) 31
 CALL func (RSP + -88)
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
(1 << (31 & (f() / 2147483647))) INT_LEFT 1 (31 & (f() / 2147483647))
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
(31 & (f() / 2147483647)) INT_AND (f() / 2147483647) 31
(1 << (31 & (f() / 2147483647))) CAST (1 << (31 & (f() / 2147483647)))
(RSP + -104) PTRSUB RSP -104
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(RSP + -56) PTRSUB RSP -56
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
 CALL func (RSP + -56) 64 0 0
 CALL func (RSP + -72)
0 INT_NOTEQUAL (1 << (31 & (f() / 2147483647))) f(ARG2)
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(1 << (31 & (f() / 2147483647))) INT_LEFT 1 (31 & (f() / 2147483647))
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
0 COPY 0
 CALL func (RSP + -56)
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(RSP + -56) PTRSUB RSP -56
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(RSP + -88) PTRSUB RSP -88
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
f(ARG1) COPY f(ARG1)
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
f() CALL func (RSP + -104)
 CBRANCH ((1 << (31 & (f() / 2147483647))) INT_LESS f(ARG2))
0 INT_LESS (1 << (31 & (f() / 2147483647))) f(ARG2)
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
 CALL func (RSP + -88)
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
(RSP + -56) PTRSUB RSP -56
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(RSP + -88) PTRSUB RSP -88
0 COPY 0
 CALL func (RSP + -72)
0 INT_LESS (f() * f()) f()
(f() * f()) INT_MULT f() f()
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -56)
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
(RSP + -56) PTRSUB RSP -56
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() CALL func (RSP + -104) 0
(RSP + -104) PTRSUB RSP -104
0 INT_SLESS 90 f()
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
0 INT_SLESS 122 f()
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(RSP + -88) PTRSUB RSP -88
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -72) f() f()
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(RSP + -104) PTRSUB RSP -104
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 8
f() CALL func (RSP + -104) 0
0 INT_SLESS f() 48
0 COPY 0
f() CALL func (RSP + -104)
(RSP + -104) PTRSUB RSP -104
f() CALL func ARG1 ARG2 ARG2
ARG1 COPY ARG1
ARG2 COPY ARG2
0 INT_LESS f() 65
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
f() CALL func
 CBRANCH (f() INT_LESS 65)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CBRANCH ((f() & 63) INT_NOTEQUAL 0)
 CALL func (RSP + -72) (f(ARG2) + -64) (f(ARG2) + -64)
(f(ARG2) + -64) INT_ADD f(ARG2) -64
(RSP + -72) PTRSUB RSP -72
(f() & -64) INT_AND f() -64
 BRANCH VZERO
f() CALL func (RSP + -72) f() f()
0 INT_NOTEQUAL (f() & 63) 0
(RSP + -72) PTRSUB RSP -72
f() CALL func ARG1 f() f() f()
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -120) f() f()
 CALL func (RSP + -72) f() f()
 CALL func (RSP + -72) ARG1 f() ARG1
(ARG1 + (f() & -64)) INT_ADD ARG1 (f() & -64)
(RSP + -72) PTRSUB RSP -72
(f() & 63) INT_AND f() 63
(f(ARG1) + 64) INT_ADD f(ARG1) 64
f() COPY f()
(RSP + -72) PTRSUB RSP -72
 CBRANCH ((f(ARG1) + 64) INT_NOTEQUAL f(ARG1))
0 INT_NOTEQUAL (f(ARG1) + 64) f(ARG1)
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -72) (f(ARG1) + 64) (f(ARG1) + 64)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 CALL func ARG1 ARG2 ARG2
 RETURN 0
ARG1 COPY ARG1
ARG2 COPY ARG2
 CALL func f() f()
f() CALL func (RSP + -40)
 RETURN 0
f() CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 RETURN 0
VZERO COPY VZERO
 CALL func 1 65535
 RETURN 0
[ARG1] LOAD 433 ARG1
 CALL func ARG1 ARG2 [ARG1] f()
f() CALL func ARG1
 CALL func ARG1 ARG2 [(ARG1 + 8)] f()
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
 CALL func ARG2 (Twine 
 CALL func ARG2 4599992
 CALL func ARG2 4599994
4599992 PTRSUB 0 4599992
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
4599994 PTRSUB 0 4599994
(Twine  COPY (Twine 
 RETURN 0
f() CALL func ARG2 decI:"
f() CALL func ARG2 uhex:"
 CALL func ARG2 4599792
 CALL func ARG2 rope:
f() CALL func ARG2 char:"
 CALL func ARG3 ARG2 ARG2
f() CALL func ARG2 smallstring:"
f() CALL func ARG2 stringref:"
f() CALL func ARG2 std::string:"
f() CALL func ARG2 cstring:"
 CALL func ARG2 empty
f() CALL func ARG2 decULL:"
f() CALL func ARG2 decUI:"
f() CALL func ARG2 decLL:"
f() CALL func ARG2 decUL:"
f() CALL func ARG2 decL:"
ARG3 CAST ARG3
f() CALL func f() ARG3
f() CALL func f() ARG3
f() CALL func f() ARG3
f() CALL func f() ARG3
f() CALL func f() ARG3
(ARG3 / 2147483647) SUBPIECE ARG3 0
ARG3 CAST ARG3
[ARG3] LOAD 433 ARG3
[ARG3] LOAD 433 ARG3
[ARG3] LOAD 433 ARG3
[ARG3] LOAD 433 ARG3
 BRANCHIND ARG4
 RETURN 0
std::string:" COPY std::string:"
4599819 PTRSUB 0 4599819
f() CALL func f() (ARG3 / 2147483647)
(ARG3 / 2147483647) INT_SEXT (ARG3 / 2147483647)
4599819 PTRSUB 0 4599819
decLL:" COPY decLL:"
empty COPY empty
f() CALL func f() [ARG3]
 BRANCH VZERO
(ARG3 & 4294967295) INT_AND ARG3 4294967295
 BRANCH VZERO
smallstring:" COPY smallstring:"
 CALL func f() 4599819
4599819 PTRSUB 0 4599819
char:" COPY char:"
 BRANCH VZERO
cstring:" COPY cstring:"
 CALL func f() 4599819
4599819 PTRSUB 0 4599819
f() CALL func f() [ARG3]
 CALL func f() 4599819
4599819 PTRSUB 0 4599819
decL:" COPY decL:"
decI:" COPY decI:"
4599792 PTRSUB 0 4599792
4599819 PTRSUB 0 4599819
f() CALL func f() [ARG3]
f() CALL func f() (ARG3 & 4294967295)
 BRANCH VZERO
4599819 PTRSUB 0 4599819
 BRANCH VZERO
rope: COPY rope:
 CALL func f() 4599819
 CALL func f() 4599819
 BRANCH VZERO
4599819 PTRSUB 0 4599819
 CALL func f() 4599819
4599819 PTRSUB 0 4599819
decULL:" COPY decULL:"
decUI:" COPY decUI:"
uhex:" COPY uhex:"
 BRANCH VZERO
stringref:" COPY stringref:"
f() CALL func f() [ARG3]
 BRANCH VZERO
f() CALL func f() (ARG3 & 4294967295)
(ARG3 & 4294967295) INT_AND ARG3 4294967295
 BRANCH VZERO
4599819 PTRSUB 0 4599819
 CALL func f() 4599819
4599819 PTRSUB 0 4599819
 BRANCH VZERO
 CALL func f() 4599819
 CALL func f() 4599819
 BRANCH VZERO
decUL:" COPY decUL:"
 BRANCH VZERO
 CALL func f() 4599819
 BRANCH VZERO
 BRANCH VZERO
 CALL func f() 4599819
4599819 PTRSUB 0 4599819
 CALL func f() 4599819
 CALL func ARG1 f() f()
f() CALL func
 RETURN 0
 CALL func ARG1 f() f()
f() CALL func
 RETURN 0
0 INT_EQUAL ARG3 [ARG1]
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 ARG2
f(ARG1 , ARG2) LOAD 433 ARG1
 RETURN 0 f(ARG1 , ARG2 , ARG3)
 CALLOTHER 17
 BRANCH VZERO
 CBRANCH (ARG3 INT_EQUAL [ARG1])
f(ARG1 , ARG2 , ARG3) COPY f(ARG1 , ARG2 , ARG3)
 STORE 433 ARG1 ([ARG1] + 1)
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 RETURN 0 ([ARG1] + 1)
([ARG1] + 1) COPY ([ARG1] + 1)
([ARG1] + 1) INT_ADD [ARG1] 1
([ARG1] + 1) INT_ADD [ARG1] 1
 CALLOTHER 17
 STORE 433 ARG1 ([ARG1] + 4294967295)
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
([ARG1] + 4294967295) COPY ([ARG1] + 4294967295)
 RETURN 0 ([ARG1] + 4294967295)
([ARG1] + 4294967295) INT_ADD [ARG1] 4294967295
([ARG1] + 4294967295) INT_ADD [ARG1] 4294967295
 CALLOTHER 17
 STORE 433 ARG1 ([ARG1] + ARG2)
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
([ARG1] + ARG2) INT_ADD [ARG1] ARG2
([ARG1] + ARG2) INT_ADD [ARG1] ARG2
([ARG1] + ARG2) COPY ([ARG1] + ARG2)
 RETURN 0 ([ARG1] + ARG2)
 CALLOTHER 17
f(ARG1 , ARG2) CALL func ARG1 ([ARG1] * ARG2) [ARG1] ([ARG1] * ARG2)
[ARG1] LOAD 433 ARG1
([ARG1] * ARG2) INT_MULT [ARG1] ARG2
0 INT_NOTEQUAL f(ARG1 , ARG2) [ARG1]
 RETURN 0 ([ARG1] * ARG2)
 CBRANCH (f(ARG1 , ARG2) INT_NOTEQUAL [ARG1])
([ARG1] * ARG2) COPY ([ARG1] * ARG2)
f(ARG1 , ARG2) CALL func ARG1 ([ARG1] / ARG2) [ARG1] ([ARG1] / ARG2)
[ARG1] LOAD 433 ARG1
([ARG1] / ARG2) INT_DIV [ARG1] ARG2
 CBRANCH (f(ARG1 , ARG2) INT_NOTEQUAL [ARG1])
0 INT_NOTEQUAL f(ARG1 , ARG2) [ARG1]
 RETURN 0 ([ARG1] / ARG2)
([ARG1] / ARG2) COPY ([ARG1] / ARG2)
ARG1 COPY ARG1
 CALL func ARG1 [f()] [f()]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
f() CALL libcall___errno_location_thunk
[f()] LOAD 433 f()
[40] LOAD 433 40
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
[ARG1] LOAD 433 ARG1
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
 RETURN 0 (-256 & (0 # f()))
0 INT_EQUAL f() 0
bool llvm::sys::MutexImpl::tryacquire() COPY bool llvm::sys::MutexImpl::tryacquire()
(-256 & (0 # f())) INT_OR (-256 & (0 # f())) 0
(-256 & (0 # f())) INT_AND (0 # f()) -256
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp
mutex != nullptr COPY mutex != nullptr
 RETURN 1
f() CALL libcall_pthread_mutex_trylock_thunk [ARG1]
(0 # f()) PIECE 0 f()
0 INT_ZEXT 0
 CALL libcall___assert_fail_thunk mutex != nullptr /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp 107 bool llvm::sys::MutexImpl::tryacquire()
ARG1 COPY ARG1
f() CALL func 6882544
40 INT_ADD 0 40
 CALL func (RSP + -24)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -24) f() f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -24) PTRSUB RSP -24
[40] LOAD 433 40
(RSP + -24) PTRSUB RSP -24
6882544 PTRSUB 0 6882544
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func
 RETURN 1
ARG1 COPY ARG1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
[ARG1] LOAD 433 ARG1
[40] LOAD 433 40
(RSP + -24) PTRSUB RSP -24
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -32) PTRSUB RSP -32
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -24) (RSP + -32) (RSP + -32)
40 INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
[f(ARG2)] LOAD 433 f(ARG2)
([f(ARG2)] & -256) INT_AND [f(ARG2)] -256
[f(ARG1)] LOAD 433 f(ARG1)
f(ARG1) CAST f(ARG1)
f(ARG2) CAST f(ARG2)
([f(ARG2)] & -256) INT_OR ([f(ARG2)] & -256) 0
0 INT_ZEXT 0
0 INT_EQUAL [f(ARG1)] [f(ARG2)]
 RETURN 0 ([f(ARG2)] & -256)
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[40] LOAD 433 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -24) PTRSUB RSP -24
(RSP + -32) PTRSUB RSP -32
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(ARG1 + 8) CAST (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -24) (RSP + -32) (RSP + -32)
40 INT_ADD 0 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
f() CALL func ARG1
f() CALL func ARG1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -32) (RSP + -24) (RSP + -24)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -32) PTRSUB RSP -32
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(RSP + -24) PTRSUB RSP -24
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
f(ARG2) CALL func 32 ARG2
 CALL func ARG3
f(ARG2) CAST f(ARG2)
 RETURN 0
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG2) 0
 CALL libcall_basic_string_thunk f(ARG2)
 CALL func ARG1 ARG2 f(ARG3) ARG2
f(ARG3) CALL func ARG3
 RETURN 0
576460752303423487 COPY 576460752303423487
 RETURN 0 576460752303423487
f() CALL func ARG1
0 INT_LESS f() ARG2
(ARG2 * 32) INT_LEFT ARG2 5
 CALL libcall_operator.new_thunk (ARG2 * 32)
 RETURN 0
 CBRANCH (f() INT_LESS ARG2)
 CALL libcall___throw_bad_alloc_thunk
 CALL func ARG1 ARG2 0 ARG2
 RETURN 0
f() CALL func ARG1 ARG2 ARG2
0 INT_EQUAL ARG2 0
 CBRANCH (ARG2 INT_EQUAL 0)
 RETURN 0 f()
 BRANCH VZERO
0 COPY 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
f(ARG1) CALL func ARG1
 RETURN 0
 CALL func f(ARG1)
f() CALL func ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
 CALL libcall___throw_length_error_thunk ARG3
0 INT_EQUAL f() [(f() + 40)]
([f(RSP)] + f()) INT_ADD [f(RSP)] f()
(RSP + -72) PTRSUB RSP -72
(f() + 40) INT_ADD f() 40
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_LESS (f() - f()) ARG2
0 INT_LESS ([f(RSP)] + f()) f()
f() CALL func f(ARG1)
 CBRANCH (([f(RSP)] + f()) INT_LESS f())
[f(RSP)] LOAD 433 f(RSP)
(f() + 40) CAST (f() + 40)
(f() - f()) INT_SUB f() f()
f(RSP) CALL func (RSP + -48) (RSP + -72) (RSP + -72)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
f(RSP) CAST f(RSP)
(f() - f()) CAST (f() - f())
f() CALL func f(ARG1)
f() CALL func ARG1
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(RSP + -48) PTRSUB RSP -48
 CBRANCH ((f() - f()) INT_LESS ARG2)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func f(ARG1)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(RSP)
 RETURN 1
 CBRANCH (f() INT_LESS ([f(RSP)] + f()))
f() CALL func f(ARG1)
0 INT_LESS f() ([f(RSP)] + f())
f() CALL func f(ARG1)
f() COPY f()
([f(RSP)] + f()) COPY ([f(RSP)] + f())
 BRANCH VZERO
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
(RSP + -24) PTRSUB RSP -24
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
40 CAST 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
f() CALL func ARG1
f() CALL func ARG2
(f() & -256) INT_AND f() -256
0 INT_EQUAL f() f()
 RETURN 0 (f() & -256)
0 INT_ZEXT 0
(f() & -256) INT_OR (f() & -256) 0
f() CALL func ARG1 ARG2 ARG2
 RETURN 0 0
0 INT_XOR f() 1
0 COPY 0
f(ARG1) CALL func 32 ARG1
 CALL func ARG2
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG1) 0
 RETURN 0
f(ARG1) CAST f(ARG1)
 CALL libcall_basic_string_thunk f(ARG1)
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
[ARG1] LOAD 433 ARG1
ARG1 COPY ARG1
 STORE 433 ARG1 ([ARG1] + 32)
 RETURN 0 ARG1
([ARG1] + 32) INT_ADD [ARG1] 32
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
 RETURN 0 f(ARG3)
f(ARG3) COPY f(ARG3)
(RSP + -48) PTRSUB RSP -48
f() CALL func (RSP + -48) (RSP + -56) (RSP + -56)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(RSP + -56) PTRSUB RSP -56
 CALL func f(ARG3) f()
(RSP + -48) PTRSUB RSP -48
f() CALL func (RSP + -48)
f(ARG3) CALL func f(ARG3)
 CALL func (RSP + -48)
 BRANCH VZERO
(f(ARG3) + 32) INT_ADD f(ARG3) 32
(RSP + -48) PTRSUB RSP -48
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG4
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 ARG4
 RETURN 0
f() CALL func ARG1
f() CALL func ARG1 f(RSP) f(RSP)
f(RSP) CALL func ARG1 1 0
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 32) [ARG1]
[ARG1] LOAD 433 ARG1
f(ARG1) CALL func ARG1
 CALL func ARG1 ((f() * 32) + f()) f(ARG2) ((f() * 32) + f())
f(ARG1) CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 f()
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
f(ARG2) CALL func ARG2
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (ARG1 + 16) ((f(RSP) * 32) + f())
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
((f(RSP) * 32) + f()) INT_ADD (f(RSP) * 32) f()
 STORE 433 (ARG1 + 8) (f() + 32)
f() CALL func [ARG1] [(ARG1 + 8)] f() f(ARG1)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() * 32) INT_MULT f() 32
0 COPY 0
 RETURN 0
(([(ARG1 + 16)] - [ARG1]) / 32) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 5
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(f(RSP) * 32) INT_MULT f(RSP) 32
((f() * 32) + f()) INT_ADD (f() * 32) f()
(f() + 32) INT_ADD f() 32
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1 f(ARG2) f(ARG2)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1 [(ARG1 + 8)] f(ARG2) [(ARG1 + 8)]
f(ARG2) CALL func ARG2
f(ARG2) CALL func ARG2
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL [(ARG1 + 16)])
0 INT_EQUAL [(ARG1 + 8)] [(ARG1 + 16)]
 RETURN 0
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 32)
([(ARG1 + 8)] + 32) INT_ADD [(ARG1 + 8)] 32
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 CALL func ARG1 f(ARG2) f(ARG2)
f(ARG2) CALL func ARG2
 RETURN 0
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
[ARG1] LOAD 433 ARG1
(ARG2 * -32) INT_MULT ARG2 -32
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
([ARG1] + (ARG2 * -32)) INT_ADD [ARG1] (ARG2 * -32)
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
40 INT_ADD 0 40
 CALL func (RSP + -24) (RSP + -32) (RSP + -32)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 40
(RSP + -24) PTRSUB RSP -24
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -32) PTRSUB RSP -32
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 8) INT_ADD ARG1 8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -24) (ARG1 + 8) (ARG1 + 8)
40 INT_ADD 0 40
(RSP + -24) PTRSUB RSP -24
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
f() CALL func ARG1
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (RSP + -24)
(RSP + -24) PTRSUB RSP -24
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
40 CAST 40
f() CALL func (RSP + -32) 1
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -32) PTRSUB RSP -32
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
ARG2 COPY ARG2
 CBRANCH (f() INT_EQUAL 0)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() [(f() + 40)]
 CALL func (RSP + -72) (RSP + -120) (RSP + -120)
(RSP + -72) PTRSUB RSP -72
[(f() + 40)] LOAD 433 (f() + 40)
f() CALL func f()
f() CALL func 6882544
6882576 PTRSUB 0 6882576
 CALL libcall_~basic_string_thunk (RSP + -72)
 CBRANCH (f() INT_EQUAL f())
(RSP + -120) PTRSUB RSP -120
(f() + 40) CAST (f() + 40)
(RSP + -72) PTRSUB RSP -72
0 COPY 0
 CALL func
(RSP + -96) PTRSUB RSP -96
 CALL func (RSP + -96)
 CALL func f() (RSP + -72) (RSP + -72)
0 INT_EQUAL f() f()
f() CALL func 6882576
(FS_OFFSET + 40) INT_ADD 0 40
6882544 PTRSUB 0 6882544
(RSP + -72) PTRSUB RSP -72
(RSP + -96) PTRSUB RSP -96
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 CALL func (RSP + -96) f() f()
f() CALL func f() 0
0 COPY 0
f() CALL func f() 0
 BRANCH VZERO
 CALL func f()
0 COPY 0
 BRANCH VZERO
 CALL libcall_c_str_thunk
f() CALL func f()
0 INT_NOTEQUAL f() f()
 CBRANCH (f() INT_NOTEQUAL f())
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 0
 RETURN 1
 CALL libcall_c_str_thunk
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
 CALL func f() f() f()
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 [f(ARG2)]
f(ARG2) CALL func ARG2
[f(ARG2)] LOAD 433 f(ARG2)
 RETURN 0
f(ARG2) CAST f(ARG2)
 CALL func (RSP + -24) ARG1 ARG1
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(RSP + -24) PTRSUB RSP -24
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
 RETURN 0
 STORE 433 ARG1 ARG2
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 f() f()
f() CALL func ARG2
 RETURN 0 ARG1
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 CALL func /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ManagedStatic.h 77 ARG1
 CALL func ARG1 4320716 4320670 4320716
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
f() CALL func
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ManagedStatic.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ManagedStatic.h
 CALL func
4320716 PTRSUB 0 4320716
4320716 PTRSUB 0 4320716
4320670 PTRSUB 0 4320670
ARG1 COPY ARG1
 CALL func ARG1 f() f()
f() CALL func ARG2
 RETURN 0 ARG1
ARG1 COPY ARG1
 STORE 433 ARG1 ([ARG1] + 32)
[ARG1] LOAD 433 ARG1
 RETURN 0 ARG1
([ARG1] + 32) INT_ADD [ARG1] 32
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
([f(ARG2)] & -256) INT_AND [f(ARG2)] -256
[f(ARG1)] LOAD 433 f(ARG1)
0 INT_ZEXT 0
([f(ARG2)] & -256) INT_OR ([f(ARG2)] & -256) 0
f(ARG1) CAST f(ARG1)
f(ARG2) CAST f(ARG2)
[f(ARG2)] LOAD 433 f(ARG2)
0 INT_EQUAL [f(ARG1)] [f(ARG2)]
 RETURN 0 ([f(ARG2)] & -256)
f() CALL func ARG1
f() CALL func ARG2
(RSP + -32) PTRSUB RSP -32
 CALL func (RSP + -32) (RSP + -24) (RSP + -24)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -24) PTRSUB RSP -24
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
f() CALL func ARG1 ARG2 ARG2
0 INT_XOR f() 1
0 COPY 0
 RETURN 0 0
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG1 COPY ARG1
ARG3 COPY ARG3
 RETURN 0 f(ARG3)
((ARG2 - ARG1) / 32) INT_SRIGHT (ARG2 - ARG1) 5
f(ARG3) COPY f(ARG3)
0 INT_SLESS 0 f(ARG1 , ARG2)
 CBRANCH (0 INT_SLESS f(ARG1 , ARG2))
 CALL libcall_operator=_thunk f(ARG3) f(ARG1)
(f(ARG3) + 32) PTRADD f(ARG3) 32 1
(f(ARG1) + 32) INT_ADD f(ARG1) 32
(f(ARG1 , ARG2) + -1) INT_ADD f(ARG1 , ARG2) -1
f(ARG1) CALL func f(ARG1)
f(ARG1) CAST f(ARG1)
 BRANCH VZERO
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
ARG1 COPY ARG1
f(RSP) CAST f(RSP)
 RETURN 0 [f(RSP)]
[f(RSP)] LOAD 433 f(RSP)
[f(RSP)] COPY [f(RSP)]
(RSP + -16) PTRSUB RSP -16
f(RSP) CALL func (RSP + -16)
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
(RSP + -40) PTRSUB RSP -40
(RSP + -48) PTRSUB RSP -48
[40] LOAD 433 40
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -40) (RSP + -48) (RSP + -48)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
A_Stack[-0x28]:8 COPY A_Stack[-0x28]:8
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func f() f() f()
 RETURN 1
 RETURN 0 A_Stack[-0x28]:8
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
(ARG2 * 32) INT_MULT ARG2 32
[ARG1] LOAD 433 ARG1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(RSP + -24) PTRSUB RSP -24
(RSP + -32) PTRSUB RSP -32
(FS_OFFSET + 40) INT_ADD 0 40
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
([ARG1] + (ARG2 * 32)) INT_ADD [ARG1] (ARG2 * 32)
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
 CALL func (RSP + -24) (RSP + -32) (RSP + -32)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
[f(ARG1)] LOAD 433 f(ARG1)
f(ARG1) CAST f(ARG1)
f(ARG2) CAST f(ARG2)
0 INT_ZEXT 0
([f(ARG2)] & -256) INT_OR ([f(ARG2)] & -256) 0
0 INT_NOTEQUAL [f(ARG1)] [f(ARG2)]
 RETURN 0 ([f(ARG2)] & -256)
[f(ARG2)] LOAD 433 f(ARG2)
([f(ARG2)] & -256) INT_AND [f(ARG2)] -256
 CALL libcall_~basic_string_thunk ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
f() CALL func ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
(f(ARG1) + 8) CAST (f(ARG1) + 8)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f(ARG2) COPY f(ARG2)
[(f(ARG1) + 8)] LOAD 433 (f(ARG1) + 8)
 CALL func f(ARG1) [(f(ARG1) + 8)] [(f(ARG1) + 8)]
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func (RSP + -72) 1
(RSP + -48) PTRSUB RSP -48
(f() + 40) CAST (f() + 40)
(f(ARG1) + 8) INT_ADD f(ARG1) 8
(RSP + -40) PTRSUB RSP -40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(f(ARG1) + 8) INT_ADD f(ARG1) 8
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
[(f(ARG1) + 8)] LOAD 433 (f(ARG1) + 8)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
f() CALL func (RSP + -48) (RSP + -40) (RSP + -40)
(RSP + -72) PTRSUB RSP -72
(f(ARG1) + 8) CAST (f(ARG1) + 8)
([(f(ARG1) + 8)] + -32) INT_ADD [(f(ARG1) + 8)] -32
 STORE 433 (f(ARG1) + 8) ([(f(ARG1) + 8)] + -32)
(f(ARG1) + 8) CAST (f(ARG1) + 8)
[(f() + 40)] LOAD 433 (f() + 40)
(f(ARG1) + 8) INT_ADD f(ARG1) 8
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(ARG2)
f() CALL func ARG1
 CALL func f() f() ARG2 f()
(RSP + -72) PTRSUB RSP -72
f() CALL func (RSP + -72) 1
[ARG1] LOAD 433 ARG1
[40] LOAD 433 40
(RSP + -24) PTRSUB RSP -24
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -32) PTRSUB RSP -32
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -24) (RSP + -32) (RSP + -32)
40 INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
f(ARG1) CAST f(ARG1)
[f(ARG2)] LOAD 433 f(ARG2)
([f(ARG1)] - [f(ARG2)]) INT_SUB [f(ARG1)] [f(ARG2)]
 RETURN 0 (([f(ARG1)] - [f(ARG2)]) / 32)
f(ARG2) CAST f(ARG2)
(([f(ARG1)] - [f(ARG2)]) / 32) INT_SRIGHT ([f(ARG1)] - [f(ARG2)]) 5
[f(ARG1)] LOAD 433 f(ARG1)
ARG1 COPY ARG1
f() CALL func ARG1
ARG2 COPY ARG2
f() CALL func (RSP + -48) f()
 CALL func ARG1 f() f()
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
40 CAST 40
(RSP + -48) PTRSUB RSP -48
f() CALL func (RSP + -72) (RSP + -40) (RSP + -40)
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -72) PTRSUB RSP -72
(RSP + -40) PTRSUB RSP -40
[40] LOAD 433 40
f() CALL func ARG1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
 CALL func ARG1
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(RSP + -24) PTRSUB RSP -24
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
[ARG1] LOAD 433 ARG1
ARG1 COPY ARG1
 STORE 433 ARG1 ([ARG1] + -32)
 RETURN 0 ARG1
([ARG1] + -32) INT_ADD [ARG1] -32
[ARG1] LOAD 433 ARG1
[40] LOAD 433 40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
f(RSP) CALL func (RSP + -24)
(RSP + -24) PTRSUB RSP -24
 CALL func f(RSP)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
[ARG1] LOAD 433 ARG1
f() CALL func ARG2
[40] LOAD 433 40
([ARG1] + 8) PTRADD [ARG1] 1 8
[ARG1] CAST [ARG1]
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func A_Stack[-0x38]:8 A_Stack[-0x30]:8 [[ARG1]] [([ARG1] + 8)]
[([ARG1] + 8)] LOAD 433 ([ARG1] + 8)
[[ARG1]] LOAD 433 [ARG1]
 CALL func (RSP + -56) f() f()
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
[f(ARG1)] LOAD 433 f(ARG1)
(([f(ARG1)] - [f(ARG2)]) / 32) INT_SRIGHT ([f(ARG1)] - [f(ARG2)]) 5
f(ARG2) CAST f(ARG2)
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG1) CAST f(ARG1)
 RETURN 0 (([f(ARG1)] - [f(ARG2)]) / 32)
([f(ARG1)] - [f(ARG2)]) INT_SUB [f(ARG1)] [f(ARG2)]
f() CALL func ARG1
f() CALL func ARG2
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (RSP + -32) (RSP + -24) (RSP + -24)
(RSP + -32) PTRSUB RSP -32
(RSP + -24) PTRSUB RSP -24
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
f() CALL func ARG3 ARG2 ARG2
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
(f() / 4) INT_SRIGHT f() 2
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f(ARG1) COPY f(ARG1)
0 INT_EQUAL f() [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_SLESS 0 f()
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (0 INT_SLESS f())
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
 CALL func (RSP + -32) f(ARG2) f(ARG2)
(RSP + -72) PTRSUB RSP -72
(RSP + -32) PTRSUB RSP -32
(RSP + -32) PTRSUB RSP -32
f() CALL func (RSP + -72) (RSP + -32) (RSP + -32)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 CALL func f(ARG1) f(ARG2) f(ARG2)
 CALL func f(ARG2)
 CBRANCH (f() INT_NOTEQUAL 0)
 CALL func f(ARG1) f(ARG2) f(ARG2)
 BRANCH VZERO
 CALL func (RSP + -32) f(ARG2) f(ARG2)
(RSP + -72) PTRSUB RSP -72
f() CALL func (RSP + -72) (RSP + -32) (RSP + -32)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(RSP + -32) PTRSUB RSP -32
(RSP + -32) PTRSUB RSP -32
 CALL func f(ARG2)
(RSP + -72) PTRSUB RSP -72
 CALL func f(ARG2)
 BRANCH VZERO
 CALL func (RSP + -32) f(ARG2) f(ARG2)
(RSP + -32) PTRSUB RSP -32
(RSP + -32) PTRSUB RSP -32
 CALL func f(ARG1) f(ARG2) f(ARG2)
f() CALL func (RSP + -72) (RSP + -32) (RSP + -32)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 RETURN 1
 RETURN 0 f(ARG1)
 CALL libcall___stack_chk_fail_thunk
 CALL func f(ARG2)
 BRANCH VZERO
 CALL func f(ARG1) f(ARG2) f(ARG2)
 CALL func f(ARG1) f(ARG3) f(ARG3)
 CBRANCH (f() INT_EQUAL 3)
(RSP + -72) PTRSUB RSP -72
 CBRANCH (f() INT_EQUAL 1)
(RSP + -32) PTRSUB RSP -32
(RSP + -32) PTRSUB RSP -32
 CALL func (RSP + -32) f(ARG2) f(ARG2)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_EQUAL f() 1
f() CALL func (RSP + -72) (RSP + -32) (RSP + -32)
 CBRANCH (f() INT_EQUAL 2)
0 INT_NOTEQUAL f() 0
(RSP + -72) PTRSUB RSP -72
(RSP + -32) PTRSUB RSP -32
(RSP + -32) PTRSUB RSP -32
 CALL func (RSP + -32) f(ARG2) f(ARG2)
f() CALL func (RSP + -72) (RSP + -32) (RSP + -32)
0 INT_EQUAL f() 3
 CBRANCH (f() INT_NOTEQUAL 0)
 CALL func f(ARG2)
 BRANCH VZERO
 CALL func f(ARG1) f(ARG2) f(ARG2)
 BRANCH VZERO
(f() + -1) INT_ADD f() -1
 CALL func f(ARG2)
 CALL func (RSP + -32) f(ARG2) f(ARG2)
(RSP + -32) PTRSUB RSP -32
(RSP + -32) PTRSUB RSP -32
f() CALL func (RSP + -72) (RSP + -32) (RSP + -32)
0 INT_NOTEQUAL f() 0
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
 CALL func f(ARG1) f(ARG2) f(ARG2)
 CALL func f(ARG1) f(ARG2) f(ARG2)
 CALL func f(ARG2)
 BRANCH VZERO
0 INT_NOTEQUAL f() 0
(RSP + -72) PTRSUB RSP -72
f() CALL func (RSP + -72) (RSP + -32) (RSP + -32)
(RSP + -32) PTRSUB RSP -32
(RSP + -32) PTRSUB RSP -32
f() CALL func f(ARG3) f(ARG2) f(ARG2)
 CALL func (RSP + -32) f(ARG2) f(ARG2)
0 INT_EQUAL f() 2
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -48) (RSP + -40) ARG4
 CALL func ARG2
 CALL func (RSP + -48) ARG2 ARG2
 CALL func (RSP + -40) ARG3 ARG3
(FS_OFFSET + 40) INT_ADD 0 40
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -40) PTRSUB RSP -40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(RSP + -48) PTRSUB RSP -48
(RSP + -48) PTRSUB RSP -48
40 CAST 40
(RSP + -40) PTRSUB RSP -40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 0 ARG1
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 CALL func (RSP + -40) ARG3 ARG3
f() CALL func ARG4
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -48) (RSP + -40) f()
 CALL func (RSP + -48) ARG2 ARG2
[40] LOAD 433 40
(RSP + -48) PTRSUB RSP -48
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
40 INT_ADD 0 40
(RSP + -40) PTRSUB RSP -40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -48) PTRSUB RSP -48
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
6882544 PTRSUB 0 6882544
f() CALL func 6882544
(RSP + -64) PTRSUB RSP -64
f() CALL func (RSP + -56) (RSP + -24) (RSP + -24)
6882576 PTRSUB 0 6882576
(RSP + -32) PTRSUB RSP -32
 CALL func (RSP + -32) f() f()
(RSP + -24) PTRSUB RSP -24
 CALL func (RSP + -64)
(RSP + -24) PTRSUB RSP -24
f() CALL func 6882576
f() CALL func 6882576
6882576 PTRSUB 0 6882576
6882576 PTRSUB 0 6882576
 CALL func (RSP + -64) f() f()
 CALL func (RSP + -56) (RSP + -32) (RSP + -24) (RSP + -88)
6882576 PTRSUB 0 6882576
(f() + 40) CAST (f() + 40)
(RSP + -64) PTRSUB RSP -64
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(RSP + -48) PTRSUB RSP -48
f() CALL func 6882576
 CALL func (RSP + -24) f() f()
 CBRANCH (f() INT_NOTEQUAL [40])
6882576 PTRSUB 0 6882576
(RSP + -24) PTRSUB RSP -24
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [40]
(RSP + -56) PTRSUB RSP -56
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
[40] LOAD 433 (f() + 40)
f() CALL func f()
f() CALL func f()
f() CALL func 6882576
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -24) f() f()
 CBRANCH (f() INT_EQUAL 0)
(RSP + -56) PTRSUB RSP -56
0 INT_EQUAL f() 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func 6882576
(RSP + -32) PTRSUB RSP -32
f() CALL func (RSP + -48) (RSP + -24) (RSP + -24)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 BRANCH VZERO
(RSP + -48) PTRSUB RSP -48
 CALL func (RSP + -48)
 CALL func (RSP + -48)
(RSP + -48) PTRSUB RSP -48
 CALL libcall_c_str_thunk
(RSP + -24) PTRSUB RSP -24
(RSP + -32) PTRSUB RSP -32
 CALL func (RSP + -24) (RSP + -32) (RSP + -32)
f() CALL func 6882576
6882576 PTRSUB 0 6882576
f() CALL func (RSP + -56)
(RSP + -40) PTRSUB RSP -40
f() CALL func (RSP + -40) 1
(RSP + -56) PTRSUB RSP -56
f() CALL func f() A_Stack[-0x18]:8 f()
(ARG1 + 24) PTRADD ARG1 3 8
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
(ARG3 + 16) PTRADD ARG3 2 8
(ARG3 + 8) PTRADD ARG3 1 8
ARG3 CAST ARG3
(ARG3 + 16) PTRADD ARG3 2 8
(ARG3 + 24) PTRADD ARG3 3 8
(ARG3 + 32) PTRADD ARG3 4 8
ARG3 CAST ARG3
[ARG3] LOAD 433 ARG3
0 COPY 0
[(ARG3 + 12)] LOAD 433 (ARG3 + 12)
[(ARG1 + 24)] INT_ZEXT [(ARG1 + 24)]
 RETURN 0 0
(ARG3 + 12) CAST (ARG3 + 12)
 STORE 433 (ARG3 + 12) 0
[(ARG1 + 24)] CAST [(ARG1 + 24)]
(ARG3 + 12) CAST (ARG3 + 12)
0 INT_SLESS f() [(ARG1 + 24)]
 CBRANCH (f() INT_SLESS [(ARG1 + 24)])
0 INT_EQUAL [(ARG3 + 12)] 0
 CBRANCH ([(ARG3 + 12)] INT_EQUAL 0)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(ARG3 + 12) INT_ADD ARG3 12
(ARG1 + 24) CAST (ARG1 + 24)
0 COPY 0
(ARG3 + 12) INT_ADD ARG3 12
 CBRANCH (([(([(ARG1 + 16)] + (f() * 56)) + 16)] + [ARG1]) INT_SLESSEQUAL [([ARG3] + (f() * 8))])
 CBRANCH f(ARG1 , ARG3)
0 INT_SLESS [([ARG3] + (f() * 8))] (([(([(ARG1 + 16)] + (f() * 56)) + 16)] + [ARG1]) + [(([(ARG1 + 16)] + (f() * 56)) + 40)])
 CBRANCH ([([(ARG1 + 16)] + (f() * 56))] INT_EQUAL 1)
(([(ARG1 + 16)] + (f() * 56)) + 16) CAST (([(ARG1 + 16)] + (f() * 56)) + 16)
0 COPY 0
[(([(ARG1 + 16)] + (f() * 56)) + 16)] LOAD 433 (([(ARG1 + 16)] + (f() * 56)) + 16)
[(([(ARG1 + 16)] + (f() * 56)) + 40)] LOAD 433 (([(ARG1 + 16)] + (f() * 56)) + 40)
(([(([(ARG1 + 16)] + (f() * 56)) + 16)] + [ARG1]) + [(([(ARG1 + 16)] + (f() * 56)) + 40)]) INT_ADD ([(([(ARG1 + 16)] + (f() * 56)) + 16)] + [ARG1]) [(([(ARG1 + 16)] + (f() * 56)) + 40)]
(([(ARG1 + 16)] + (f() * 56)) + 16) PTRADD ([(ARG1 + 16)] + (f() * 56)) 4 4
(([(ARG1 + 16)] + (f() * 56)) + 40) CAST (([(ARG1 + 16)] + (f() * 56)) + 40)
([(([(ARG1 + 16)] + (f() * 56)) + 16)] + [ARG1]) INT_ADD [(([(ARG1 + 16)] + (f() * 56)) + 16)] [ARG1]
0 INT_SLESS f() [(ARG3 + 8)]
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
(ARG3 + 8) CAST (ARG3 + 8)
 CBRANCH (f() INT_SLESS [(ARG3 + 8)])
(([(ARG1 + 16)] + (f() * 56)) + 40) PTRADD ([(ARG1 + 16)] + (f() * 56)) 10 4
 BRANCH VZERO
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG3 + 32)] LOAD 433 (ARG3 + 32)
[(ARG3 + 24)] LOAD 433 (ARG3 + 24)
f() INT_SEXT f()
([(ARG3 + 16)] + (f() * 8)) CAST ([(ARG3 + 16)] + (f() * 8))
(f() * 8) INT_MULT f() 8
 STORE 433 ([(ARG3 + 16)] + (f() * 8)) f(ARG1 , ARG3)
([(ARG3 + 16)] + (f() * 8)) INT_ADD (f() * 8) [(ARG3 + 16)]
([(ARG3 + 24)] + (f() * 8)) CAST ([(ARG3 + 24)] + (f() * 8))
(f() * 8) INT_MULT f() 8
 BRANCH VZERO
([([ARG3] + (f() * 8))] - [ARG1]) INT_SUB [([ARG3] + (f() * 8))] [ARG1]
([(ARG3 + 24)] + (f() * 8)) INT_ADD (f() * 8) [(ARG3 + 24)]
 STORE 433 ([(ARG3 + 24)] + (f() * 8)) ([([ARG3] + (f() * 8))] - [ARG1])
[(ARG3 + 16)] LOAD 433 (ARG3 + 16)
f() INT_SEXT f()
 CBRANCH ([([(ARG3 + 16)] + (f() * 8))] INT_EQUAL 0)
f() INT_SEXT f()
([ARG3] + (f() * 8)) INT_ADD [ARG3] (f() * 8)
0 INT_SLESSEQUAL ([(([(ARG1 + 16)] + (f() * 56)) + 16)] + [ARG1]) [([ARG3] + (f() * 8))]
[([ARG3] + (f() * 8))] LOAD 433 ([ARG3] + (f() * 8))
([ARG3] + (f() * 8)) CAST ([ARG3] + (f() * 8))
(f() * 8) INT_MULT f() 8
(f() * 8) INT_MULT f() 8
([(ARG3 + 16)] + (f() * 8)) INT_ADD [(ARG3 + 16)] (f() * 8)
[([(ARG3 + 16)] + (f() * 8))] LOAD 433 ([(ARG3 + 16)] + (f() * 8))
[(ARG3 + 16)] LOAD 433 (ARG3 + 16)
f() INT_SEXT f()
0 INT_EQUAL [([(ARG3 + 16)] + (f() * 8))] 0
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
([(ARG3 + 16)] + (f() * 8)) CAST ([(ARG3 + 16)] + (f() * 8))
0 INT_EQUAL [([(ARG1 + 16)] + (f() * 56))] 1
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[([(ARG1 + 16)] + (f() * 56))] LOAD 433 ([(ARG1 + 16)] + (f() * 56))
(f() + 1) INT_ADD f() 1
(f() * 56) INT_MULT f() 56
f() INT_SEXT f()
([(ARG1 + 16)] + (f() * 56)) CAST ([(ARG1 + 16)] + (f() * 56))
([(ARG1 + 16)] + (f() * 56)) INT_ADD (f() * 56) [(ARG1 + 16)]
 BRANCH VZERO
ARG1 COPY ARG1
ARG3 COPY ARG3
ARG2 INT_ZEXT ARG2
ARG4 COPY ARG4
ARG5 COPY ARG5
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
 CALL libcall_dl_iterate_phdr_thunk 4312099 (RSP + -56)
1 COPY 1
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
4312099 PTRSUB 0 4312099
[40] LOAD 433 40
(ARG2 | 4294967296) INT_OR ARG2 4294967296
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
40 CAST 40
 RETURN 1
 RETURN 0 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALL func ARG1
 RETURN 0
 STORE 433 (ARG1 + 152) ARG3
 CALL func ARG2 ARG1 ARG1
(ARG1 + 152) INT_ADD ARG1 152
 CALL func ARG1
 RETURN 0
(ARG1 + 152) CAST (ARG1 + 152)
 RETURN 0
 CALL func ARG1
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 16)] - [(ARG1 + 8)]) INT_SUB [(ARG1 + 16)] [(ARG1 + 8)]
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0 ([(ARG1 + 16)] - [(ARG1 + 8)])
([(ARG1 + 16)] - [(ARG1 + 8)]) COPY ([(ARG1 + 16)] - [(ARG1 + 8)])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -40) PTRSUB RSP -40
40 INT_ADD 0 40
(ARG1 + 8) CAST (ARG1 + 8)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -40) [(ARG1 + 8)] f() [(ARG1 + 8)]
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) COPY (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 RETURN 1
 RETURN 0 (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 CALL libcall___stack_chk_fail_thunk
f() CALL func ARG1
f() CALL func ARG1
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -56) f() f() f()
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(RSP + -56) PTRSUB RSP -56
40 CAST 40
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 RETURN 1
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1
 RETURN 0
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func ARG1 ARG3 ARG3
(ARG1 + 8) INT_ADD ARG1 8
 CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
(ARG1 + 16) PTRADD ARG1 2 8
 CALL func (ARG1 + 16) ARG3 ARG4 (ARG1 + 16)
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG3 ARG4
 RETURN 0 ARG1
 CALLIND [([ARG2] + 8)] ARG2 ARG2 ARG2
0 INT_NOTEQUAL ARG2 0
[ARG2] LOAD 433 ARG2
 CBRANCH (ARG2 INT_NOTEQUAL 0)
 RETURN 0
([ARG2] + 8) INT_ADD [ARG2] 8
([ARG2] + 8) CAST ([ARG2] + 8)
[([ARG2] + 8)] LOAD 433 ([ARG2] + 8)
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG1
 RETURN 0
[f()] LOAD 433 f()
 STORE 433 f() 0
f() CAST f()
0 INT_NOTEQUAL [f()] 0
 CBRANCH ([f()] INT_NOTEQUAL 0)
 CALL func f() f()
f() LOAD 433 f()
ARG1 COPY ARG1
(ARG1 + 16) INT_ADD ARG1 16
 CBRANCH (([(ARG1 + 16)] & 1) INT_NOTEQUAL 0)
0 INT_NOTEQUAL ([(ARG1 + 16)] & 1) 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 16)] & 1) INT_AND [(ARG1 + 16)] 1
(ARG1 + 16) CAST (ARG1 + 16)
 CALL libcall___assert_fail_thunk !HasError && "Cannot get value when an error exists!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ErrorOr.h 254 0
!HasError && "Cannot get value when an error exists!" COPY !HasError && "Cannot get value when an error exists!"
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ErrorOr.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ErrorOr.h
 RETURN 0 ARG1
 RETURN 1
(ARG1 + 16) INT_ADD ARG1 16
f(ARG1) CALL func ARG1
 CBRANCH (([(ARG1 + 16)] & 1) INT_NOTEQUAL 1)
0 INT_NOTEQUAL ([(ARG1 + 16)] & 1) 1
 RETURN 0
([(ARG1 + 16)] & 1) INT_AND [(ARG1 + 16)] 1
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 CALL func f(ARG1)
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_XOR ([(ARG1 + 16)] & 1) 1
([(ARG1 + 16)] & 1) INT_AND [(ARG1 + 16)] 1
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 RETURN 0 0
0 COPY 0
[ARG1] LOAD 433 ARG1
(ARG2 * 8) INT_MULT ARG2 8
 RETURN 0 ([ARG1] + (ARG2 * 8))
([ARG1] + (ARG2 * 8)) INT_ADD [ARG1] (ARG2 * 8)
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
ARG2 COPY ARG2
[ARG3] LOAD 433 ARG3
ARG1 COPY ARG1
f(ARG1) COPY f(ARG1)
 RETURN 0 f(ARG1)
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG2) 0
 STORE 433 f(ARG1) [ARG3]
 BRANCH VZERO
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
(f(ARG2) + -1) INT_ADD f(ARG2) -1
f() CALL func ARG1
 CALL func f() ARG2 ARG3 f()
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG4
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
f() CALL func [ARG1] ARG2 ARG3 f(ARG1)
f(ARG1) CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0
 STORE 433 (ARG1 + 8) f()
 RETURN 0 2305843009213693951
2305843009213693951 COPY 2305843009213693951
f() CALL func ARG1
0 INT_LESS f() ARG2
(ARG2 * 8) INT_LEFT ARG2 3
 CBRANCH (f() INT_LESS ARG2)
 CALL libcall_operator.new_thunk (ARG2 * 8)
 RETURN 0
 CALL libcall___throw_bad_alloc_thunk
 CALL func ARG1 ARG2 0 ARG2
 RETURN 0
f() CALL func ARG1 ARG2 ARG2
0 INT_EQUAL ARG2 0
 RETURN 0 f()
 CBRANCH (ARG2 INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
f() LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 f()
f() CALL func ARG1 ARG2 ARG2
(ARG1 + 16) PTRADD ARG1 2 8
f() LOAD 433 ARG1
(ARG2 * 8) INT_MULT ARG2 8
 RETURN 0
((ARG2 * 8) + f()) INT_ADD (ARG2 * 8) f()
 STORE 433 (ARG1 + 16) ((ARG2 * 8) + f())
 STORE 433 (ARG1 + 8) f()
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 0
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 (ARG1 + 16) 0
 STORE 433 (ARG1 + 8) 0
 RETURN 0
 CALL func ARG1 ARG3 ARG3
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 CALL func ARG1 ARG2 ARG4 ARG2
 RETURN 0
 CALL func ARG1
 RETURN 0
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1 ARG3 ARG3
 CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
(ARG1 + 16) PTRADD ARG1 2 8
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
 CALL func (ARG1 + 16) ARG3 ARG4 (ARG1 + 16)
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG3 ARG4
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL libcall_operator.delete_thunk ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
0 INT_NOTEQUAL ARG2 0
 RETURN 0
 CBRANCH (ARG2 INT_NOTEQUAL 0)
[ARG1] LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
 CALL func ARG1
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 8) [ARG1]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
(([(ARG1 + 16)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 3
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
f(ARG1) CALL func ARG1
 CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
ARG2 COPY ARG2
[ARG3] LOAD 433 ARG3
ARG1 COPY ARG1
 RETURN 0 f(ARG1)
f(ARG1) COPY f(ARG1)
0 INT_NOTEQUAL f(ARG2) 0
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
(f(ARG2) + -1) INT_ADD f(ARG2) -1
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
 BRANCH VZERO
 STORE 433 f(ARG1) [ARG3]
f() CALL func ARG1
 CALL func f() ARG2 ARG3 f()
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG4
 RETURN 0
f() CALL func [ARG1] ARG2 ARG3 f(ARG1)
f(ARG1) CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 (ARG1 + 8) f()
 RETURN 0
 RETURN 0 2305843009213693951
2305843009213693951 COPY 2305843009213693951
f() CALL func ARG1
0 INT_LESS f() ARG2
(ARG2 * 8) INT_LEFT ARG2 3
 CBRANCH (f() INT_LESS ARG2)
 CALL libcall_operator.new_thunk (ARG2 * 8)
 RETURN 0
 CALL libcall___throw_bad_alloc_thunk
 CALL func ARG1 ARG2 0 ARG2
 RETURN 0
f() CALL func ARG1 ARG2 ARG2
0 INT_EQUAL ARG2 0
 CBRANCH (ARG2 INT_EQUAL 0)
 RETURN 0 f()
 BRANCH VZERO
0 COPY 0
f() LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 f()
f() CALL func ARG1 ARG2 ARG2
(ARG1 + 16) PTRADD ARG1 2 8
f() LOAD 433 ARG1
(ARG2 * 8) INT_MULT ARG2 8
 RETURN 0
((ARG2 * 8) + f()) INT_ADD (ARG2 * 8) f()
 STORE 433 (ARG1 + 16) ((ARG2 * 8) + f())
 STORE 433 (ARG1 + 8) f()
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 0
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 (ARG1 + 16) 0
 STORE 433 (ARG1 + 8) 0
 RETURN 0
 CALL func ARG1 ARG3 ARG3
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG4 ARG2
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
ARG2 COPY ARG2
 RETURN 0 ARG2
[ARG1] LOAD 433 ARG1
 CALL func ARG1 [ARG1] [ARG1]
 RETURN 0
 CALL func (RSP + -56) ARG1 ARG1
(ARG1 + 152) INT_ADD ARG1 152
 CALL func ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
[(ARG1 + 152)] LOAD 433 (ARG1 + 152)
(ARG1 + 152) CAST (ARG1 + 152)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH ([(ARG1 + 152)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(ARG1 + 152)] 0
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -56) 1
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CAST f()
 RETURN 0 [f()]
[f()] LOAD 433 f()
[f()] COPY [f()]
 CALL func ARG1
 RETURN 0
ARG2 COPY ARG2
 RETURN 0 ARG2
 CALL func ARG1 [ARG1] [ARG1]
[ARG1] LOAD 433 ARG1
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
(ARG1 + 16) PTRADD ARG1 2 8
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
 CALL func (ARG1 + 16) ARG3 (ARG1 + 16)
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 CALL func ARG1
 CALL func ARG1 (RSP + -17) (RSP + -17)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
0 COPY 0
40 INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -17) PTRSUB RSP -17
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
[ARG1] LOAD 433 ARG1
(ARG2 * 8) INT_MULT ARG2 8
 RETURN 0 ([ARG1] + (ARG2 * 8))
([ARG1] + (ARG2 * 8)) INT_ADD [ARG1] (ARG2 * 8)
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
0 INT_NOTEQUAL ARG4 0
 STORE 433 (ARG1 + 8) ARG2
[ARG3] LOAD 433 ARG3
 STORE 433 (ARG1 + 16) ARG3
 CBRANCH (ARG4 INT_NOTEQUAL 0)
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
0 INT_NOTEQUAL [ARG3] 0
 CBRANCH ([ARG3] INT_NOTEQUAL 0)
 RETURN 1
 CALL libcall___assert_fail_thunk (!RequiresNullTerminator || BufEnd[0] == 0) && "Buffer is not null terminated!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/MemoryBuffer.cpp 48 void llvm::MemoryBuffer::init(const char*, const char*, bool)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/MemoryBuffer.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/MemoryBuffer.cpp
(!RequiresNullTerminator || BufEnd[0] == 0) && "Buffer is not null terminated!" COPY (!RequiresNullTerminator || BufEnd[0] == 0) && "Buffer is not null terminated!"
void llvm::MemoryBuffer::init(const char*, const char*, bool) COPY void llvm::MemoryBuffer::init(const char*, const char*, bool)
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
(ARG1 & (~(f()) + 1)) INT_AND (~(f()) + 1) ARG1
(~(f()) + 1) INT_2COMP f()
f() CALL func
 RETURN 0 (ARG1 & (~(f()) + 1))
(~(f()) + 1) INT_SEXT (~(f()) + 1)
(ARG1 + (ARG2 - f())) INT_ADD ARG1 (ARG2 - f())
f() CALL func ARG2
(ARG2 - f()) INT_SUB ARG2 f()
 RETURN 0 (ARG1 + (ARG2 - f()))
f() CALL func ARG3
(ARG3 - f()) INT_SUB ARG3 f()
(ARG1 + 24) INT_ADD ARG1 24
f() CALL func (ARG1 + 24)
((ARG3 - f()) + f()) INT_ADD (ARG3 - f()) f()
 RETURN 0 ((ARG3 - f()) + f())
 CALL func ARG1 f() (ARG4 + f()) ARG2
 CALL func ARG1
(ARG1 + 24) PTRADD ARG1 3 8
f() CALL func ARG1 ARG4 ARG5 ARG4
 STORE 433 ARG1 Symbol
f() CALL func ARG4 ARG5 ARG5
(ARG4 + f()) INT_ADD f() ARG4
f() CALL func ARG5
f() CALL func ARG6
 CALL func (ARG1 + 24) ARG3 0 f() f() ARG6
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 STORE 433 ARG1 0
 RETURN 0
 CALL func ARG1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
 CALL func ARG1
 STORE 433 f() ARG2
 RETURN 0
f() CAST f()
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
(RSP + -56) PTRSUB RSP -56
 STORE 433 (f(ARG1) + f()) 0
 RETURN 0
(RSP + -56) PTRSUB RSP -56
f(ARG1) CAST f(ARG1)
(f(ARG1) + f()) CAST (f(ARG1) + f())
f() CALL func (RSP + -56)
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
(f(ARG1) + f()) INT_ADD f(ARG1) f()
f() CALL func (RSP + -56)
f() CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
f() CAST f()
 CALL libcall_memcpy_thunk ARG1 f() f()
f() CALL func (RSP + -56)
ARG4 COPY ARG4
ARG1 COPY ARG1
 CALL func ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
f() CALL func (RSP + -56)
ARG4 COPY ARG4
 CALL func ARG1 f() f() ARG4
f() CALL func (RSP + -56)
 RETURN 0
(RSP + -56) PTRSUB RSP -56
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
(RSP + -56) PTRSUB RSP -56
 STORE 433 ARG1 Symbol
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
(ARG2 + ARG1) INT_ADD ARG2 ARG1
(((ARG2 + ARG1) + -1) / ARG2) INT_DIV ((ARG2 + ARG1) + -1) ARG2
(ARG2 * (((ARG2 + ARG1) + -1) / ARG2)) INT_MULT (((ARG2 + ARG1) + -1) / ARG2) ARG2
((ARG2 + ARG1) + -1) INT_SUB (ARG2 + ARG1) -1
 RETURN 0 (ARG2 * (((ARG2 + ARG1) + -1) / ARG2))
 CALL func ARG1 0
 CALL func ARG1 f() f()
ARG1 COPY ARG1
(ARG2 + (f() + f())) INT_ADD ARG2 (f() + f())
(ARG2 + f()) INT_ADD ARG2 f()
 CALL func (RSP + -328) (f() + f()) ARG2 (f() + f())
f() CALL func ARG3 (RSP + -312) (RSP + -312)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -312) PTRSUB RSP -312
[(f() + 40)] LOAD 433 (f() + 40)
f() CALL libcall_operator.new_thunk ((ARG2 + f()) + 1) 6889552
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -344) PTRSUB RSP -344
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -344)
 CALL func (RSP + -312)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_EQUAL 0)
 CALL func (RSP + -312)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -312) PTRSUB RSP -312
0 INT_EQUAL f() 0
f() CALL func (f() + 25) 16
(f() / 2147483647) SUBPIECE f() 0
6889552 CAST 6889552
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (0 INT_EQUAL [(f() + 40)])
((ARG2 + f()) + 1) INT_ADD (ARG2 + f()) 1
(f() + 40) INT_ADD f() 40
(RSP + -312) PTRSUB RSP -312
6889552 PTRSUB 0 6889552
(f() + 25) INT_ADD f() 25
0 INT_EQUAL 0 [(f() + 40)]
 RETURN 0 ARG1
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() + 24) INT_ADD f() 24
(f() / 2147483647) SUBPIECE f() 0
f() CAST f()
f() CALL func 24 f()
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 STORE 433 (ARG2 + (f() + f())) 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (f() + 24) (f() / 2147483647) (f() / 2147483647) (f() + 24)
(RSP + -328) PTRSUB RSP -328
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(ARG2 + (f() + f())) CAST (ARG2 + (f() + f()))
(f() / 2147483647) SUBPIECE f() 8
f() CAST f()
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
(f() / 2147483647) SUBPIECE f() 0
(f() + f()) INT_ADD f() f()
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
 CALL func f() A_Stack[-0x148]:8 A_Stack[-0x140]:8 1
(ARG1 + f()) INT_ADD f() ARG1
(ARG1 + f()) INT_ADD ARG1 f()
[ARG2] LOAD 433 ARG2
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CAST f()
(RSP + -328) PTRSUB RSP -328
40 CAST 40
(f() / 2147483647) SUBPIECE f() 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() COPY f()
 CALL func (RSP + -312)
(f() / 2147483647) SUBPIECE f() 8
f() CALL func [ARG2] (RSP + -312) (RSP + -312)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -312) PTRSUB RSP -312
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 8
(RSP + -312) PTRSUB RSP -312
 CALL func (ARG1 + f()) (f() / 2147483647) (f() / 2147483647) (ARG1 + f())
f() CALL func (RSP + -328)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(f() / 2147483647) SUBPIECE f() 0
40 INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(f() / 2147483647) SUBPIECE f() 8
f() CALL libcall_operator.new_thunk ((ARG1 + f()) + 1)
(RSP + -312) PTRSUB RSP -312
((ARG1 + f()) + 1) INT_ADD (ARG1 + f()) 1
[40] LOAD 433 40
 CALL func (RSP + -312)
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 RETURN 0 f()
 RETURN 1
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG1
 STORE 433 f() 0
 RETURN 0 f()
f() COPY f()
f() CAST f()
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 [f(ARG2)]
f(ARG2) CALL func ARG2
[f(ARG2)] LOAD 433 f(ARG2)
 RETURN 0
f(ARG2) CAST f(ARG2)
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG2
 RETURN 0
 CALL func ARG1 f(ARG2) f(ARG2)
f(ARG2) CALL func ARG2
 RETURN 0
 CALL func ARG1 f(ARG3) f(ARG3)
 CALL func ARG1 f(ARG2) f(ARG2)
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
 RETURN 0
 CALL func ARG1 f(ARG2) f(ARG3) f(ARG2)
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
 RETURN 0
 CALL func ARG1 (RSP + -40) f() (RSP + -40)
f() CALL func ARG2
f() CALL func ARG2
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(FS_OFFSET + 40) INT_ADD 0 40
40 CAST 40
[40] LOAD 433 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL func f()
(RSP + -40) PTRSUB RSP -40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
f(ARG1) CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG2
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG1 + 16) ([(ARG1 + 16)] & 254)
([(ARG1 + 16)] & 254) INT_AND [(ARG1 + 16)] 254
 RETURN 0
f(ARG1) CALL func 8 f(ARG1)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_NOTEQUAL f(ARG1) 0
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
 CALL func f(ARG1) f()
f() CALL func ARG1
(f() & -256) INT_OR (f() & -256) 0
0 INT_ZEXT 0
 RETURN 0 (f() & -256)
(f() & -256) INT_AND f() -256
0 INT_NOTEQUAL f() 0
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
 CBRANCH (([(ARG1 + 16)] & 1) INT_EQUAL 0)
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 16)] & 1) INT_AND [(ARG1 + 16)] 1
0 INT_EQUAL ([(ARG1 + 16)] & 1) 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ErrorOr.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ErrorOr.h
HasError && "Cannot get error when a value exists!" COPY HasError && "Cannot get error when a value exists!"
0 COPY 0
 RETURN 0 ARG1
 RETURN 1
 CALL libcall___assert_fail_thunk HasError && "Cannot get error when a value exists!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ErrorOr.h 264 0
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
f(ARG1) CALL func ARG1
(ARG2 & 4294967295) INT_AND ARG2 4294967295
 STORE 433 (f(ARG1) + 8) ARG3
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 16)] | 1) INT_OR [(ARG1 + 16)] 1
f(ARG1) CALL func 16 f(ARG1)
(ARG1 + 16) CAST (ARG1 + 16)
f(ARG1) CAST f(ARG1)
 RETURN 0
 STORE 433 (ARG1 + 16) ([(ARG1 + 16)] | 1)
0 INT_NOTEQUAL f(ARG1) 0
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
 STORE 433 f(ARG1) (ARG2 & 4294967295)
 STORE 433 ARG1 ARG2
 RETURN 0
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 32) CAST (ARG1 + 32)
 RETURN 0 [(ARG1 + 32)]
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
[(ARG1 + 32)] COPY [(ARG1 + 32)]
0 INT_EQUAL ARG5 1
ARG2 COPY ARG2
0 INT_EQUAL ARG2 -1
0 INT_LESS ARG3 ARG6
0 INT_LESS ARG3 16384
(ARG3 + ARG4) INT_ADD ARG3 ARG4
ARG6 INT_ZEXT ARG6
(ARG6 + 1) INT_SUB ARG6 1
0 INT_EQUAL ARG7 0
f() CALL func ARG1 (RSP + -72) (RSP + -72)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG7 INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (ARG3 INT_LESS 16384)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 COPY 0
 CBRANCH (ARG3 INT_LESS ARG6)
(f() + 40) INT_ADD f() 40
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
 BRANCH VZERO
0 INT_NOTEQUAL 0 [(f() + 40)]
0 COPY 0
 BRANCH VZERO
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 CBRANCH (ARG5 INT_EQUAL 1)
 CBRANCH (ARG2 INT_EQUAL -1)
1 COPY 1
 BRANCH VZERO
 CBRANCH ((f(ARG2) & (ARG6 + 1)) INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (f(ARG2) INT_LESS (ARG3 + ARG4))
0 COPY 0
 BRANCH VZERO
f() CALL func (RSP + -72)
(RSP + -72) PTRSUB RSP -72
0 INT_LESS f(ARG2) (ARG3 + ARG4)
 CBRANCH ((ARG3 + ARG4) INT_EQUAL f(ARG2))
 BRANCH VZERO
(ARG6 + 1) CAST (ARG6 + 1)
0 COPY 0
0 INT_EQUAL (f(ARG2) & (ARG6 + 1)) 0
(f(ARG2) & (ARG6 + 1)) INT_AND (ARG6 + 1) f(ARG2)
(ARG6 + 1) INT_SEXT (ARG6 + 1)
(RSP + -88) PTRSUB RSP -88
(RSP + -72) PTRSUB RSP -72
End <= FileSize COPY End <= FileSize
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/MemoryBuffer.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/MemoryBuffer.cpp
 RETURN 1
 CALL libcall___assert_fail_thunk End <= FileSize /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/MemoryBuffer.cpp 309 0
0 INT_NOTEQUAL f() 0
f() CALL func (RSP + -88)
 CALL func (RSP + -72)
(RSP + -72) PTRSUB RSP -72
0 INT_EQUAL (ARG3 + ARG4) f(ARG2)
0 COPY 0
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL func (RSP + -40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(RSP + -40) PTRSUB RSP -40
0 INT_NOTEQUAL 0 [(f() + 40)]
0 INT_EQUAL f() 1
 CALL func (RSP + -40)
 CBRANCH (f() INT_EQUAL 1)
(f() + 40) INT_ADD f() 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f(ARG1) COPY f(ARG1)
(RSP + -40) PTRSUB RSP -40
(RSP + -72) PTRSUB RSP -72
(RSP + -40) PTRSUB RSP -40
f() CALL func (RSP + -72)
 CALL func (RSP + -40) f() ARG4 f()
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(ARG1)
 RETURN 1
f() CALL func (RSP + -40)
 CALL libcall_memcpy_thunk f() f() f()
(RSP + -72) PTRSUB RSP -72
 CALL func ARG1 (RSP + -40) (RSP + -40)
 BRANCH VZERO
f() CALL func (RSP + -72)
(RSP + -40) PTRSUB RSP -40
 CALL func ARG1 0
f() CAST f()
(RSP + -72) PTRSUB RSP -72
(RSP + -40) PTRSUB RSP -40
f() CALL func f()
f() CAST f()
f() CALL func (RSP + -72)
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG1
(RSP + -56) PTRSUB RSP -56
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CALL func (RSP + -56) f() f() f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL func ARG1
 RETURN 0
 CALL func ARG1 16384
 RETURN 0
 CALL func ARG1
 RETURN 0
f() CALL libcall_read_thunk ARG2 f() 16384
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -16456) (RSP + -16456)
 CALL func ARG1 f() f() f()
 CALL func (RSP + -16456) (f() / 2147483647) (f() / 4611686014132420609) ARG3 (f() / 2147483647) (f() / 4611686014132420609)
(RSP + -16440) PTRSUB RSP -16440
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(RSP + -16440) PTRSUB RSP -16440
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() -1
f() CALL func
(f() + 40) CAST (f() + 40)
 CALL func (RSP + -16440)
(f() + 16384) INT_ADD f() 16384
0 INT_EQUAL f() [(f() + 40)]
 CALL func (RSP + -16440)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -16440) PTRSUB RSP -16440
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
f() CALL func (RSP + -16440)
 CALL func (RSP + -16440) (f() + 16384) (f() + 16384)
f() CAST f()
(RSP + -16440) PTRSUB RSP -16440
 CBRANCH (f() INT_EQUAL -1)
 RETURN 0 ARG1
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 CBRANCH ([f()] INT_NOTEQUAL 4)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CALL func (RSP + -16456) [f()] f() [f()]
 BRANCH VZERO
f() CALL libcall_generic_category_thunk
(RSP + -16456) PTRSUB RSP -16456
f() CALL libcall___errno_location_thunk
[f()] LOAD 433 f()
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -16440)
(RSP + -16456) PTRSUB RSP -16456
(RSP + -16456) PTRSUB RSP -16456
(f() / 2147483647) INT_RIGHT f() 64
(RSP + -16456) PTRSUB RSP -16456
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(RSP + -16440) PTRSUB RSP -16440
 CALL func (RSP + -16456)
f() CALL func (RSP + -16440)
(RSP + -16440) PTRSUB RSP -16440
(f() + f()) INT_ADD f() f()
0 INT_NOTEQUAL [f()] 4
 CALL func (RSP + -16440) (f() + f()) (f() + f())
f() CALL libcall___errno_location_thunk
(RSP + -16440) PTRSUB RSP -16440
[f()] LOAD 433 f()
 BRANCH VZERO
 CALL func (RSP + -104) f(ARG4 , ARG5) ARG3 f(ARG4 , ARG5)
 CALL func ARG1 ARG2 ARG3 ARG2
 CALL func (RSP + -104) ARG3 ARG3
0 INT_EQUAL ARG4 -1
ARG4 COPY ARG4
 CALL func f() ARG7 ARG2 f(ARG4 , ARG5) ARG6 (RSP + -88)
f() CALL func ARG2 f(ARG4) f(ARG4 , ARG5) ARG6 ARG7 f() ARG8
f() CALL libcall_pread_thunk ARG2 f() f(ARG4 , ARG5) (ARG6 + (f(ARG4 , ARG5) - f(ARG4 , ARG5)))
f() CALL func ARG2 (RSP + -88) (RSP + -88)
0 INT_EQUAL ARG5 -1
ARG5 COPY ARG5
(ARG6 + (f(ARG4 , ARG5) - f(ARG4 , ARG5))) INT_ADD ARG6 (f(ARG4 , ARG5) - f(ARG4 , ARG5))
 CALL func ARG1 (RSP + -104) (RSP + -104)
 CALL func ARG1 f() f() f()
ARG1 COPY ARG1
 CALL func ARG1 f() 0 f()
 CALL func ARG1 (RSP + -88) (RSP + -88)
 CALL func ARG1 (4294967295 & (f() / 2147483647)) (f() / 4611686014132420609) (f() / 2147483647)
 CBRANCH (VZERO INT_EQUAL 0)
(f() + 40) CAST (f() + 40)
0 INT_EQUAL VZERO 0
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG5 INT_EQUAL -1)
0 INT_EQUAL f() [(f() + 40)]
f() CALL libcall___cxa_guard_acquire_thunk
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL -1)
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH ([f()] INT_EQUAL 4)
0 INT_EQUAL f() 0
f() CALL libcall___errno_location_thunk
[f()] LOAD 433 f()
0 INT_EQUAL [f()] 4
 CBRANCH (f(ARG4 , ARG5) INT_EQUAL 0)
f(RSP) CALL func (RSP + -104)
0 INT_NOTEQUAL f() -1
(RSP + -88) PTRSUB RSP -88
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -88) f(RSP) f(RSP)
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -88)
(f(ARG4 , ARG5) - f(ARG4 , ARG5)) INT_SUB f(ARG4 , ARG5) f(ARG4 , ARG5)
(RSP + -88) PTRSUB RSP -88
f() CALL libcall_generic_category_thunk
(RSP + -88) PTRSUB RSP -88
f() CALL libcall___errno_location_thunk
[f()] LOAD 433 f()
0 INT_EQUAL f(ARG4 , ARG5) 0
 CALL func (RSP + -88) [f()] f() [f()]
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 1)
 CBRANCH (f() INT_EQUAL 1)
(RSP + -104) PTRSUB RSP -104
(RSP + -104) PTRSUB RSP -104
0 INT_EQUAL f() 1
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104)
 CALL func (RSP + -104)
f() CALL func 12
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
f() CALL func
(f() / 2147483647) INT_RIGHT f() 64
(RSP + -104) PTRSUB RSP -104
(f() / 2147483647) SUBPIECE f() 0
(4294967295 & (f() / 2147483647)) INT_AND (f() / 2147483647) 4294967295
 BRANCH VZERO
f() CAST f()
f(ARG4 , ARG5) COPY f(ARG4 , ARG5)
 CALL func (RSP + -104)
f() CAST f()
(f() + f()) CAST (f() + f())
 BRANCH VZERO
 CALL libcall_memset_thunk f() 0 f(ARG4 , ARG5)
(f(ARG4 , ARG5) - f()) INT_SUB f(ARG4 , ARG5) f()
(f() + f()) INT_ADD f() f()
 BRANCH VZERO
 CALL libcall___cxa_guard_release_thunk
f() CALL func
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func (RSP + -88)
 CBRANCH (f() INT_NOTEQUAL 2)
(RSP + -88) PTRSUB RSP -88
 BRANCH VZERO
0 INT_NOTEQUAL f() 2
f() COPY f()
f() COPY f()
f() COPY f()
 RETURN 0 ARG1
f() COPY f()
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
f(ARG4) COPY f(ARG4)
0 INT_NOTEQUAL f() 5
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
f() CALL func
 CBRANCH (f() INT_NOTEQUAL 5)
(RSP + -136) PTRSUB RSP -136
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -136) f()
(RSP + -136) PTRSUB RSP -136
(RSP + -104) PTRSUB RSP -104
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -136)
 CALL func (RSP + -88)
(RSP + -88) PTRSUB RSP -88
f() CALL func 40 (RSP + -104)
(RSP + -88) PTRSUB RSP -88
f() CALL func (RSP + -88)
 CBRANCH (ARG4 INT_EQUAL -1)
f() CALL func (RSP + -104)
0 COPY 0
 CALL func (RSP + -88)
(RSP + -88) PTRSUB RSP -88
(RSP + -104) PTRSUB RSP -104
(RSP + -88) PTRSUB RSP -88
0 INT_NOTEQUAL f() 0
 BRANCH VZERO
 CALL func (RSP + -104) f(RSP) f(RSP)
 CALL func (RSP + -104)
 BRANCH VZERO
(RSP + -104) PTRSUB RSP -104
f(RSP) CALL func (RSP + -136)
(RSP + -104) PTRSUB RSP -104
(RSP + -136) PTRSUB RSP -136
(RSP + -104) PTRSUB RSP -104
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
([(ARG1 + 16)] & 1) INT_AND [(ARG1 + 16)] 1
0 INT_EQUAL ([(ARG1 + 16)] & 1) 0
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (([(ARG1 + 16)] & 1) INT_EQUAL 0)
(f() + 40) CAST (f() + 40)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() # f()) PIECE f() f()
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) INT_ADD 0 40
(f() # f()) INT_AND (f() # f()) -1
 RETURN 1
 RETURN 0 (f() # f())
 CALL libcall___stack_chk_fail_thunk
[(f() + 8)] LOAD 433 (f() + 8)
f() CAST f()
 CALL func (RSP + -56)
 BRANCH VZERO
(f() + 8) PTRADD f() 1 8
[f()] LOAD 433 f()
(RSP + -56) PTRSUB RSP -56
(ARG1 + 16) INT_ADD ARG1 16
f(ARG1) CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
f(ARG1) CALL func ARG1
f() CALL func ARG2
f(ARG2) CALL func ARG2
(ARG2 + 16) INT_ADD ARG2 16
([(ARG2 + 16)] & 1) INT_AND [(ARG2 + 16)] 1
(ARG2 + 16) CAST (ARG2 + 16)
0 INT_EQUAL ([(ARG2 + 16)] & 1) 1
 RETURN 0
 CBRANCH (([(ARG2 + 16)] & 1) INT_EQUAL 1)
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
(f(ARG1) + 8) PTRADD f(ARG1) 2 4
 STORE 433 (f(ARG1) + 8) 0
 STORE 433 f(ARG1) f()
(f(ARG1) + 8) CAST (f(ARG1) + 8)
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
 BRANCH VZERO
 CALL func f(ARG1) f(ARG2)
([(ARG1 + 16)] | 1) INT_OR [(ARG1 + 16)] 1
([(ARG1 + 16)] & 254) INT_AND [(ARG1 + 16)] 254
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
f(ARG2) CALL func f(ARG2)
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG1 + 16) ([(ARG1 + 16)] | 1)
0 INT_NOTEQUAL f(ARG1) 0
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_NOTEQUAL f(ARG1) 0
f(ARG1) CALL func 8 f(ARG1)
f(ARG1) CALL func 16 f(ARG1)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
f(ARG1) CAST f(ARG1)
 STORE 433 (ARG1 + 16) ([(ARG1 + 16)] & 254)
 CALL func ARG1 f(ARG2) f(ARG2)
f(ARG2) CALL func ARG2
 RETURN 0
 CALL func (RSP + -40) A_Stack[-0x3c]:4 ARG2 ARG3 ARG4 ARG5 ARG6 ARG7
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CALL func ARG1 f() 0 f()
ARG1 COPY ARG1
f() CALL func ARG2 (RSP + -60) (RSP + -60)
(f() + 40) INT_ADD f() 40
(RSP + -60) PTRSUB RSP -60
0 INT_EQUAL f() 0
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_EQUAL 0)
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func
(f() + 40) CAST (f() + 40)
0 COPY 0
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
 CALL libcall_close_thunk A_Stack[-0x3c]:4
 BRANCH VZERO
(RSP + -40) PTRSUB RSP -40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 CALL func ARG1 ARG2 ARG3 ARG3 0 ARG4 ARG5
ARG1 COPY ARG1
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL libcall_operator.delete_thunk ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
0 INT_NOTEQUAL ARG2 0
 RETURN 0
 CBRANCH (ARG2 INT_NOTEQUAL 0)
 CALL func ARG1
 RETURN 0
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
 CALL func ARG1
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 8) [ARG1]
[ARG1] LOAD 433 ARG1
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
(([(ARG1 + 16)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 3
 RETURN 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) CALL func ARG1
 CALL func ARG1
 RETURN 0
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func ARG1 32
 RETURN 0
0 INT_SLESS f() ARG2
ARG2 INT_SEXT ARG2
0 INT_SLESS f() ARG2
f() CALL func ARG1 ARG2 f() f() f()
ARG2 INT_SEXT ARG2
(ARG1 + (f() * 8)) INT_ADD (f() * 8) ARG1
(ARG1 + (f() * 8)) INT_ADD (f() * 8) ARG1
 CALL func ARG3 (RSP + -1304) (RSP + -1304)
 CALL func ARG3 (RSP + -1304) (RSP + -1304)
 CALL func ARG3 (RSP + -1304) (RSP + -1304)
 CALL func ARG3 (RSP + -1304) (RSP + -1304)
 CALL func ARG3 4601985
 CALL func ARG3 (RSP + -1304) (RSP + -1304)
f() COPY f()
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -1112) A_Stack[-0x538]:8 A_Stack[-0x530]:8 A_Stack[-0x518]:8 A_Stack[-0x510]:8
 CALL func (RSP + -1336) llvm-symbolizer
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -1112)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1112) PTRSUB RSP -1112
(A_Stack[-0x580]:8 # A_Stack[-0x588]:8) PIECE A_Stack[-0x580]:8 A_Stack[-0x588]:8
(f() / 2147483647) SUBPIECE f() 0
(A_Stack[-0x5a0]:8 # A_Stack[-0x5a8]:8) PIECE A_Stack[-0x5a0]:8 A_Stack[-0x5a8]:8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(A_Stack[-0x5b0]:8 # A_Stack[-0x5b8]:8) PIECE A_Stack[-0x5b0]:8 A_Stack[-0x5b8]:8
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(RSP + -1336) PTRSUB RSP -1336
llvm-symbolizer COPY llvm-symbolizer
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1112) PTRSUB RSP -1112
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CALL func (RSP + -1304)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1304) PTRSUB RSP -1304
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -1112)
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1112) PTRSUB RSP -1112
 CBRANCH ([f()] INT_EQUAL 0)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() INT_SEXT f()
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1304) PTRSUB RSP -1304
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL f() f()
(f() & -4294967296) INT_AND f() -4294967296
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() | (f() & -4294967296)) INT_OR (f() & -4294967296) f()
(f() / 2147483647) SUBPIECE f() 8
f() INT_ZEXT f()
(f() + 1) INT_ADD f() 1
#%d %p  COPY #%d %p 
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -568)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1384) PTRSUB RSP -1384
(f() + 1) COPY (f() + 1)
(f() / 2147483647) SUBPIECE f() 0
(f() + 1) INT_ADD f() 1
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1304) PTRSUB RSP -1304
(RSP + -568) PTRSUB RSP -568
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_SLESS ARG2)
 CALL func (RSP + -1304) #%d %p  (RSP + -1384) (ARG1 + (f() * 8))
(f() / 2147483647) SUBPIECE f() 8
f() CAST f()
(f() / 2147483647) SUBPIECE f() 8
(f() * 8) INT_MULT f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_EQUAL f())
 CBRANCH (f() INT_SLESS ARG2)
(f() + 1) INT_ADD f() 1
 CBRANCH ([f()] INT_NOTEQUAL 0)
f() INT_SEXT f()
0 INT_NOTEQUAL [f()] 0
[f()] LOAD 433 f()
f() CAST f()
f() CALL func (RSP + -1368) f() f()
(RSP + -1368) PTRSUB RSP -1368
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL -1)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 1)
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -1368) f() f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1384) PTRSUB RSP -1384
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1336) PTRSUB RSP -1336
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() INT_SEXT f()
(RSP + -1144) PTRSUB RSP -1144
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1304) PTRSUB RSP -1304
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CAST f()
(RSP + -1368) PTRSUB RSP -1368
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -1144) (RSP + -1384) (RSP + -1384)
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
 CALL libcall_~basic_string_thunk (RSP + -1144)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1304) PTRSUB RSP -1304
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() INT_SEXT f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1488) PTRSUB RSP -1488
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1304) PTRSUB RSP -1304
 CALL func (RSP + -1304) (%s+%p) f() (RSP + -1488)
(f() / 2147483647) SUBPIECE f() 0
f() CALL libcall_c_str_thunk
(%s+%p) COPY (%s+%p)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1488) PTRSUB RSP -1488
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -1304) 4602052 (RSP + -1488)
4602052 PTRSUB 0 4602052
(RSP + -1144) PTRSUB RSP -1144
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1304) PTRSUB RSP -1304
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
[f()] LOAD 433 f()
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -1336) f() f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH f()
(RSP + -1304) PTRSUB RSP -1304
0 COPY 0
 CALL func (RSP + -1336)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1336) PTRSUB RSP -1336
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1336) PTRSUB RSP -1336
f() CALL func (RSP + -1336)
0 COPY 0
(RSP + -1384) PTRSUB RSP -1384
 CALL func (RSP + -1384)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() # f()) PIECE f() f()
(f() # f()) PIECE f() f()
(f() # f()) PIECE f() f()
(RSP + -1336) PTRSUB RSP -1336
(RSP + -1336) PTRSUB RSP -1336
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1368) PTRSUB RSP -1368
(RSP + -1368) PTRSUB RSP -1368
f() CALL func (RSP + -1368)
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -1368) ARG2 (RSP + -1304) (RSP + -1336)
 CALL func (RSP + -1336)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -1336) ARG2 (RSP + -1304) (RSP + -1384)
(RSP + -1384) PTRSUB RSP -1384
(RSP + -1368) PTRSUB RSP -1368
 BRANCH VZERO
(RSP + -1336) PTRSUB RSP -1336
0 COPY 0
f() CALL libcall_c_str_thunk
 CALL func (RSP + -1336)
(RSP + -1336) PTRSUB RSP -1336
(RSP + -1304) PTRSUB RSP -1304
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
(RSP + -1384) PTRSUB RSP -1384
 CALL func (RSP + -1368)
 CALL func (RSP + -1384)
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() INT_ZEXT f()
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1384) PTRSUB RSP -1384
(f() / 2147483647) SUBPIECE f() 0
#%d %p  COPY #%d %p 
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1304) PTRSUB RSP -1304
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -1304) #%d %p  (RSP + -1384) (ARG1 + (f() * 8))
(f() + 1) COPY (f() + 1)
(f() / 2147483647) SUBPIECE f() 8
4602045 PTRSUB 0 4602045
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() INT_SEXT f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CAST f()
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1304) PTRSUB RSP -1304
(f() / 2147483647) SUBPIECE f() 8
(f() & -4294967296) INT_AND f() -4294967296
(f() / 2147483647) SUBPIECE f() 0
(f() | (f() & -4294967296)) INT_OR (f() & -4294967296) f()
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL f() f()
(f() / 2147483647) SUBPIECE f() 8
(f() + 1) INT_ADD f() 1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -1304) 4602045
(f() / 2147483647) SUBPIECE f() 0
(f() * 8) INT_MULT f() 8
f() CALL func (RSP + -568)
(RSP + -1304) PTRSUB RSP -1304
(RSP + -568) PTRSUB RSP -568
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -1400) f() f() f()
(RSP + -1400) PTRSUB RSP -1400
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_EQUAL f())
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_EQUAL 0)
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -1208) (RSP + -1304) -1 1 0
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1304) PTRSUB RSP -1304
(f() # f()) PIECE f() f()
 CBRANCH (f() INT_EQUAL 1)
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -952)
0 INT_EQUAL f() 1
(RSP + -1208) PTRSUB RSP -1208
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1208) PTRSUB RSP -1208
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -1208)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1304) PTRSUB RSP -1304
(RSP + -1208) PTRSUB RSP -1208
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -1208)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -1304) f() f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -952) PTRSUB RSP -952
(f() / 2147483647) SUBPIECE f() 8
[f()] LOAD 433 f()
(f() / 2147483647) SUBPIECE f() 8
1 COPY 1
f() CALL func (RSP + -1368) f() f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL [f()] 0
f() INT_SEXT f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CAST f()
(RSP + -1368) PTRSUB RSP -1368
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1304) PTRSUB RSP -1304
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1400) PTRSUB RSP -1400
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL libcall_c_str_thunk
(RSP + -1144) PTRSUB RSP -1144
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1384) PTRSUB RSP -1384
4602048 PTRSUB 0 4602048
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -1304) 4602048 (RSP + -1384)
(RSP + -1304) PTRSUB RSP -1304
 CALL func (RSP + -1144) (RSP + -1400) (RSP + -1400)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1144) PTRSUB RSP -1144
 CALL libcall_~basic_string_thunk (RSP + -1144)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1176) PTRSUB RSP -1176
f() CALL func (RSP + -1112)
f() CALL libcall_empty_thunk
 CALL libcall_~basic_string_thunk (RSP + -1176)
 BRANCH VZERO
(RSP + -1112) PTRSUB RSP -1112
(f() / 2147483647) SUBPIECE f() 8
0 COPY 0
(f() # f()) PIECE f() f()
(f() # f()) PIECE f() f()
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1176) PTRSUB RSP -1176
(f() # f()) PIECE f() f()
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -1176) 0 0
(f() # f()) PIECE f() f()
(RSP + -1304) PTRSUB RSP -1304
f() CALL func (RSP + -952)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -952) PTRSUB RSP -952
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1384) PTRSUB RSP -1384
 CALL func (RSP + -888) (RSP + -1304) 1 (RSP + -1304)
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -1304) f() f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1464) PTRSUB RSP -1464
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -1304) f() f()
(RSP + -952) PTRSUB RSP -952
(RSP + -1432) PTRSUB RSP -1432
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) INT_RIGHT f() 64
f() CALL func (RSP + -1304) f() f() (RSP + -1508) (RSP + -1016)
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -952)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1304) PTRSUB RSP -1304
 CALL func (RSP + -1304) f() f()
(f() / 2147483647) SUBPIECE f() 0
(RSP + -728) PTRSUB RSP -728
(RSP + -1508) PTRSUB RSP -1508
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
(RSP + -1304) PTRSUB RSP -1304
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -888)
(RSP + -1064) PTRSUB RSP -1064
 CALL func (RSP + -1384) 4601947
(RSP + -1016) PTRSUB RSP -1016
--demangle COPY --demangle
symbolizer-output COPY symbolizer-output
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1240) PTRSUB RSP -1240
f() CALL func (RSP + -1016)
f() CALL func (RSP + -1016)
4314003 COPY 4314003
 CALL func (RSP + -1016)
(RSP + -1304) PTRSUB RSP -1304
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
4601947 PTRSUB 0 4601947
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1016) PTRSUB RSP -1016
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -1304) symbolizer-input
(RSP + -1304) PTRSUB RSP -1304
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -1304)
 CALL func (RSP + -952)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1384) PTRSUB RSP -1384
 CALL func (RSP + -1016)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -888) PTRSUB RSP -888
llvm-symbolizer COPY llvm-symbolizer
(f() / 2147483647) SUBPIECE f() 8
0 COPY 0
(RSP + -952) PTRSUB RSP -952
 CALL func (RSP + -1304) f() 1 0
4601947 PTRSUB 0 4601947
0 INT_EQUAL f() 0
(RSP + -1304) PTRSUB RSP -1304
(RSP + -1016) PTRSUB RSP -1016
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1304) PTRSUB RSP -1304
 CALL func (RSP + -728)
(RSP + -1304) PTRSUB RSP -1304
--inlining COPY --inlining
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -952)
(RSP + -1304) PTRSUB RSP -1304
(RSP + -952) PTRSUB RSP -952
(f() / 2147483647) SUBPIECE f() 8
--functions=linkage COPY --functions=linkage
 CALL func (RSP + -1304) f() f() (RSP + -952)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1432) PTRSUB RSP -1432
(RSP + -728) PTRSUB RSP -728
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -1384) 4601947 (f() / 4611686014132420609) (f() / 2147483647)
 CALL func (RSP + -1432)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1304) PTRSUB RSP -1304
(RSP + -1448) PTRSUB RSP -1448
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1464) CAST (RSP + -1464)
(RSP + -1016) PTRSUB RSP -1016
(f() / 2147483647) SUBPIECE f() 0
(RSP + -952) PTRSUB RSP -952
(RSP + -1304) PTRSUB RSP -1304
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
0 COPY 0
 CALL func (RSP + -1304) symbolizer-output
(f() / 2147483647) SUBPIECE f() 8
(RSP + -888) PTRSUB RSP -888
(RSP + -1016) PTRSUB RSP -1016
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f() f() (RSP + -1064) 0 (RSP + -1240) 0 0 0 0 4314003
(f() / 2147483647) SUBPIECE f() 8
symbolizer-input COPY symbolizer-input
 CALL func (RSP + -728) (RSP + -1304) 1 (RSP + -1304)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
4601985 PTRSUB 0 4601985
(f() / 2147483647) SUBPIECE f() 8
(RSP + -568) PTRSUB RSP -568
 CALL func (RSP + -1416) (RSP + -568) f() f() 4294967295 1
(RSP + -1208) PTRSUB RSP -1208
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -568) PTRSUB RSP -568
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
 CALL func (RSP + -568)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -568)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CAST f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -1304) 4601985
(RSP + -1304) PTRSUB RSP -1304
(f() / 2147483647) SUBPIECE f() 8
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -568)
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -568) PTRSUB RSP -568
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f()
(RSP + -1416) PTRSUB RSP -1416
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -568) PTRSUB RSP -568
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -1208)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -1304) [f()] [f()]
(RSP + -1336) PTRSUB RSP -1336
f() CAST f()
4601983 PTRSUB 0 4601983
f() CAST f()
4601985 PTRSUB 0 4601985
(RSP + -1304) PTRSUB RSP -1304
 CALL func f() 4601985
f() INT_SEXT f()
f() CALL func f() 4601983
f() CALL func (RSP + -1336) f() f()
[f()] LOAD 433 f()
f() INT_SEXT f()
f() CALL func f() [f()]
(RSP + -1368) PTRSUB RSP -1368
f() CALL func (RSP + -1368) f() f()
[f()] LOAD 433 f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
[f()] LOAD 433 f()
 BRANCH VZERO
0 INT_EQUAL f() 1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
[(f() + 8)] LOAD 433 (f() + 8)
(RSP + -1304) PTRSUB RSP -1304
 CALL func (RSP + -1304) 4602045
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
4602045 PTRSUB 0 4602045
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() + 16) COPY (f() + 16)
f() CALL func (RSP + -1384) f() f() f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() + 8) PTRADD f() 1 8
(f() / 2147483647) SUBPIECE f() 0
4601985 PTRSUB 0 4601985
(RSP + -1384) PTRSUB RSP -1384
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() + 16) PTRADD f() 2 8
0 COPY 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL libcall_find_thunk (RSP + -1176) llvm-symbolizer
(RSP + -1176) CAST (RSP + -1176)
llvm-symbolizer CAST llvm-symbolizer
llvm-symbolizer COPY llvm-symbolizer
0 INT_NOTEQUAL f() -1
(RSP + -1176) PTRSUB RSP -1176
(f() + 16) PTRADD f() 2 8
(f() / 2147483647) SUBPIECE f() 0
[f()] LOAD 433 f()
(f() + 16) COPY (f() + 16)
0 INT_NOTEQUAL f() 0
(f() / 2147483647) SUBPIECE f() 8
[(f() + 8)] LOAD 433 (f() + 8)
(f() / 2147483647) SUBPIECE f() 8
(f() + 8) PTRADD f() 1 8
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
(RSP + -1400) PTRSUB RSP -1400
f() CALL func (RSP + -1400)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
 RETURN 0 f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1 ARG3 ARG3
 CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
(ARG1 + 16) PTRADD ARG1 2 8
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
 CALL func (ARG1 + 16) ARG3 ARG4 (ARG1 + 16)
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG3 ARG4
 RETURN 0 ARG1
 RETURN 0 256
256 COPY 256
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1 ARG3 ARG3
 CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
(ARG1 + 16) PTRADD ARG1 2 8
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
 CALL func (ARG1 + 16) ARG3 ARG4 (ARG1 + 16)
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG3 ARG4
 RETURN 0 ARG1
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
(ARG1 + 16) PTRADD ARG1 2 8
 CALL func (ARG1 + 16) ARG3 (ARG1 + 16)
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
(ARG1 + 16) PTRADD ARG1 2 8
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
 CALL func (ARG1 + 16) ARG3 (ARG1 + 16)
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
 RETURN 0 ARG1
f() CALL func 6885216 f() ARG1
 CALL func ARG1 (RSP + -56) (RSP + -56)
 CALL func ARG1 (RSP + -56) (RSP + -56)
 CALL func ARG1 f() f()
 CALL func ARG1 (RSP + -56) (RSP + -56)
 CALL func ARG1 f() f()
 CALL func ARG1 10
 CALL func ARG1 (RSP + -56) (RSP + -56)
 CALL func ARG1 32
 CALL func ARG1 (RSP + -56) (RSP + -56)
f() CALL func 6885216
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
6885216 PTRSUB 0 6885216
(f() + 40) CAST (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL libcall_backtrace_thunk 6885216 f()
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_EQUAL f() 0
6885216 PTRSUB 0 6885216
0 INT_NOTEQUAL 0 [(f() + 40)]
6885216 PTRSUB 0 6885216
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_SLESS f())
0 INT_SLESS f() f()
0 INT_SLESS f() f()
 CBRANCH (f() INT_SLESS f())
0 COPY 0
0 COPY 0
0 COPY 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
(RSP + -136) PTRSUB RSP -136
(RSP + -56) PTRSUB RSP -56
(Symbol + (f() * 8)) CAST (Symbol + (f() * 8))
(RSP + -120) PTRSUB RSP -120
(RSP + -56) PTRSUB RSP -56
%#0*lx COPY %#0*lx
 CALL libcall_dladdr_thunk [(Symbol + (f() * 8))] (RSP + -88) (RSP + -88)
 CALL func (RSP + -56) %#0*lx (RSP + -136) (RSP + -120)
(RSP + -88) PTRSUB RSP -88
(Symbol + (f() * 8)) CAST (Symbol + (f() * 8))
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
Symbol PTRSUB 0 Symbol
0 INT_NOTEQUAL f() 0
(f() * 8) INT_MULT f() 8
(f() * 8) INT_MULT f() 8
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
[(Symbol + (f() * 8))] LOAD 433 (Symbol + (f() * 8))
(RSP + -56) PTRSUB RSP -56
[(Symbol + (f() * 8))] LOAD 433 (Symbol + (f() * 8))
(Symbol + (f() * 8)) PTRADD Symbol (f() * 8) 1
(RSP + -56) PTRSUB RSP -56
(Symbol + (f() * 8)) PTRADD Symbol (f() * 8) 1
 CALL func (RSP + -56) 4602063 (RSP + -140)
f() INT_SEXT f()
Symbol PTRSUB 0 Symbol
f() INT_SEXT f()
f() CALL libcall_strrchr_thunk f() 47
4602063 PTRSUB 0 4602063
18 COPY 18
(RSP + -140) PTRSUB RSP -140
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_strlen_thunk f()
(f() / 2147483647) SUBPIECE f() 0
((f() / 2147483647) + 4294967295) INT_ADD (f() / 2147483647) 4294967295
 BRANCH VZERO
f() CALL libcall_strlen_thunk f()
(f() / 2147483647) SUBPIECE f() 0
(RSP + -144) PTRSUB RSP -144
(f() + 1) PTRADD f() 1 1
 BRANCH VZERO
(RSP + -144) PTRSUB RSP -144
%-*s COPY %-*s
(RSP + -120) PTRSUB RSP -120
%-*s COPY %-*s
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) %-*s (RSP + -144) (RSP + -88)
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -56) %-*s (RSP + -144) (RSP + -120)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) + %u (RSP + -120)
((f(Symbol) & -4294967296) | (([(Symbol + (f() * 8))] / 2147483647) - (f() / 2147483647))) INT_OR (f(Symbol) & -4294967296) (([(Symbol + (f() * 8))] / 2147483647) - (f() / 2147483647))
[(Symbol + (f() * 8))] LOAD 433 (Symbol + (f() * 8))
(f() / 2147483647) SUBPIECE f() 0
(Symbol + (f() * 8)) PTRADD Symbol (f() * 8) 1
([(Symbol + (f() * 8))] / 2147483647) SUBPIECE [(Symbol + (f() * 8))] 0
Symbol PTRSUB 0 Symbol
f() INT_SEXT f()
(RSP + -56) PTRSUB RSP -56
f() CALL libcall___cxa_demangle_thunk f() 0 0 (RSP + -136)
f() CAST f()
((f(Symbol) & -4294967296) | (([(Symbol + (f() * 8))] / 2147483647) - (f() / 2147483647))) CAST ((f(Symbol) & -4294967296) | (([(Symbol + (f() * 8))] / 2147483647) - (f() / 2147483647)))
f(Symbol) CAST f(Symbol)
(RSP + -120) PTRSUB RSP -120
(([(Symbol + (f() * 8))] / 2147483647) - (f() / 2147483647)) CAST (([(Symbol + (f() * 8))] / 2147483647) - (f() / 2147483647))
(([(Symbol + (f() * 8))] / 2147483647) - (f() / 2147483647)) INT_SUB ([(Symbol + (f() * 8))] / 2147483647) (f() / 2147483647)
(RSP + -56) PTRSUB RSP -56
 CALL libcall_free_thunk f()
(RSP + -136) PTRSUB RSP -136
+ %u COPY + %u
(f(Symbol) & -4294967296) INT_AND f(Symbol) -4294967296
(Symbol + (f() * 8)) CAST (Symbol + (f() * 8))
(([(Symbol + (f() * 8))] / 2147483647) - (f() / 2147483647)) INT_ZEXT (([(Symbol + (f() * 8))] / 2147483647) - (f() / 2147483647))
0 INT_EQUAL f() 0
(f() * 8) INT_MULT f() 8
f() INT_SEXT f()
f() CALL libcall_strrchr_thunk f() 47
0 INT_EQUAL f() 0
(f() * 8) INT_MULT f() 8
0 INT_SLESS f() f()
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(RSP + -56) PTRSUB RSP -56
[(Symbol + (f() * 8))] LOAD 433 (Symbol + (f() * 8))
(Symbol + (f() * 8)) PTRADD Symbol (f() * 8) 1
 CBRANCH (f() INT_SLESS f())
Symbol PTRSUB 0 Symbol
(Symbol + (f() * 8)) CAST (Symbol + (f() * 8))
 CALL libcall_dladdr_thunk [(Symbol + (f() * 8))] (RSP + -56) (RSP + -56)
f() COPY f()
f() CALL func
 CALL func f()
 RETURN 0
 RETURN 0
 RETURN 0
 CALL func 4316423 0
4316423 PTRSUB 0 4316423
VZERO COPY VZERO
 RETURN 0
 RETURN 0
 CALL func 1 65535
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG3 INT_ZEXT ARG3
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
 CALL libcall_snprintf_thunk ARG2 ARG3 [(ARG1 + 8)] [f()]
(ARG1 + 8) CAST (ARG1 + 8)
[f()] INT_ZEXT [f()]
[f()] LOAD 433 f()
f() CALL func (ARG1 + 16)
 RETURN 0
f() CAST f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG5
40 INT_ADD 0 40
40 CAST 40
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 8) INT_ADD ARG1 8
 CALL func (ARG1 + 8)
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG3 INT_ZEXT ARG3
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CALL libcall_snprintf_thunk ARG2 ARG3 [(ARG1 + 8)] [f()] [f()]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[f()] INT_ZEXT [f()]
f() CALL func (ARG1 + 16)
f() CAST f()
(ARG1 + 8) CAST (ARG1 + 8)
[f()] LOAD 433 f()
[f()] LOAD 433 f()
f() CALL func (ARG1 + 16)
f() CAST f()
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG5
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
40 CAST 40
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0
 CALL func (ARG1 + 8)
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG3 INT_ZEXT ARG3
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
 CALL libcall_snprintf_thunk ARG2 ARG3 [(ARG1 + 8)] [f()] [f()]
(ARG1 + 8) CAST (ARG1 + 8)
f() CAST f()
[f()] LOAD 433 f()
f() CALL func (ARG1 + 16)
[f()] LOAD 433 f()
f() CALL func (ARG1 + 16)
f() CAST f()
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[f()] INT_ZEXT [f()]
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG5
40 INT_ADD 0 40
40 CAST 40
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG3 INT_ZEXT ARG3
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CALL libcall_snprintf_thunk ARG2 ARG3 [(ARG1 + 8)] [f()]
f() CAST f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[f()] INT_ZEXT [f()]
[f()] LOAD 433 f()
f() CALL func (ARG1 + 16)
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG5
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
40 CAST 40
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 8) INT_ADD ARG1 8
 CALL func (ARG1 + 8)
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
 CALL libcall_snprintf_thunk ARG2 ARG3 [(ARG1 + 8)] [f()] [f()]
ARG3 INT_ZEXT ARG3
 RETURN 0
f() CAST f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() CALL func (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
[f()] LOAD 433 f()
[f()] LOAD 433 f()
f() CALL func (ARG1 + 16)
f() CAST f()
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG5
40 INT_ADD 0 40
40 CAST 40
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG3 INT_ZEXT ARG3
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CALL libcall_snprintf_thunk ARG2 ARG3 [(ARG1 + 8)] [f()]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[f()] LOAD 433 f()
f() CALL func (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
f() CAST f()
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG5
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
40 CAST 40
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 CALL func (ARG1 + 8)
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG3 INT_ZEXT ARG3
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CALL libcall_snprintf_thunk ARG2 ARG3 [(ARG1 + 8)] [f()] [f()]
f() CAST f()
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[f()] INT_ZEXT [f()]
(ARG1 + 8) CAST (ARG1 + 8)
f() CAST f()
[f()] LOAD 433 f()
f() CALL func (ARG1 + 16)
[f()] LOAD 433 f()
f() CALL func (ARG1 + 16)
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG5
40 INT_ADD 0 40
40 CAST 40
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
ARG2 COPY ARG2
ARG2 INT_ZEXT ARG2
0 INT_EQUAL ARG2 36
ARG2 INT_ZEXT ARG2
0 INT_EQUAL ARG2 16
ARG1 INT_SEXT ARG1
ARG1 INT_SEXT ARG1
ARG1 INT_SEXT ARG1
ARG1 INT_SEXT ARG1
 CBRANCH (ARG2 INT_EQUAL 16)
 CBRANCH (f(ARG2) INT_LESSEQUAL (ARG1 + -48))
4294967295 COPY 4294967295
 CBRANCH ((ARG1 + -48) INT_LESS 10)
 CBRANCH ((ARG1 + 65) INT_LESSEQUAL (ARG2 + 11))
 RETURN 0 (ARG1 + 87)
0 INT_LESSEQUAL (ARG1 + 65) (ARG2 + 11)
 RETURN 0 (ARG1 + 55)
(ARG1 + 65) INT_SUB ARG1 65
 RETURN 0 (ARG1 + -48)
(ARG2 + 11) INT_SUB ARG2 11
(ARG1 + 87) COPY (ARG1 + 87)
(ARG1 + 55) COPY (ARG1 + 55)
(ARG1 + -48) COPY (ARG1 + -48)
 RETURN 0 f(ARG1)
(ARG1 + 55) INT_SUB ARG1 55
 CBRANCH ((ARG1 + 97) INT_LESSEQUAL (ARG2 + 11))
0 INT_LESSEQUAL (ARG1 + 97) (ARG2 + 11)
(ARG1 + 97) INT_SUB ARG1 97
(ARG2 + 11) INT_SUB ARG2 11
0 INT_LESSEQUAL f(ARG2) (ARG1 + -48)
f(ARG2) INT_ZEXT f(ARG2)
10 COPY 10
(ARG1 + 87) INT_SUB ARG1 87
(ARG1 + -48) INT_SUB ARG1 -48
 CBRANCH (ARG2 INT_EQUAL 36)
0 INT_LESS (ARG1 + -48) 10
(ARG1 + -48) INT_SUB ARG1 -48
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
0 INT_LESSEQUAL [(ARG1 + 8)] ARG2
(ARG2 * 8) INT_MULT ARG2 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_LESSEQUAL ARG2)
[(ARG1 + 8)] CAST [(ARG1 + 8)]
 RETURN 1
 CALL libcall___assert_fail_thunk Index < Length && "Invalid index!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/ArrayRef.h 187 0
Index < Length && "Invalid index!" COPY Index < Length && "Invalid index!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/ArrayRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
0 COPY 0
 RETURN 0 ([ARG1] + (ARG2 * 8))
([ARG1] + (ARG2 * 8)) INT_ADD [ARG1] (ARG2 * 8)
ARG1 COPY ARG1
[ARG1] LOAD 433 ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
0 INT_EQUAL [ARG1] 0
 CBRANCH ([ARG1] INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
f() CAST f()
f() CALL func ARG1
([f(RSP)] * 8) INT_ZEXT ([f(RSP)] * 8)
(RSP + -40) PTRSUB RSP -40
[f()] LOAD 433 f()
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func (RSP + -88) 0
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -44) (RSP + -40) (RSP + -40)
(ARG1 + 8) PTRADD ARG1 2 4
f() CAST f()
 CALL libcall_memcpy_thunk [(ARG1 + 8)] f() ([f(RSP)] * 8)
(RSP + -88) PTRSUB RSP -88
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) f()
([f(RSP)] * 8) INT_LEFT [f(RSP)] 3
(RSP + -88) PTRSUB RSP -88
(RSP + -88) PTRSUB RSP -88
f(RSP) CAST f(RSP)
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func (RSP + -88)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() CALL func f()
f() CALL func ARG1
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) [f()]
f() CALL func (RSP + -88)
(ARG1 + 8) CAST (ARG1 + 8)
(RSP + -44) PTRSUB RSP -44
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 RETURN 1
 CALL libcall___assert_fail_thunk bigVal.data() && "Null pointer detected!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 92 void llvm::APInt::initFromArray(llvm::ArrayRef<long unsigned int>)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
f() CALL func ARG1
void llvm::APInt::initFromArray(llvm::ArrayRef<long unsigned int>) COPY void llvm::APInt::initFromArray(llvm::ArrayRef<long unsigned int>)
(f() + 40) CAST (f() + 40)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CALL func f(ARG1)
bigVal.data() && "Null pointer detected!" COPY bigVal.data() && "Null pointer detected!"
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 CALL libcall___assert_fail_thunk BitWidth && "Bitwidth too small" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 91 void llvm::APInt::initFromArray(llvm::ArrayRef<long unsigned int>)
void llvm::APInt::initFromArray(llvm::ArrayRef<long unsigned int>) COPY void llvm::APInt::initFromArray(llvm::ArrayRef<long unsigned int>)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
BitWidth && "Bitwidth too small" COPY BitWidth && "Bitwidth too small"
(RSP + -88) PTRSUB RSP -88
0 INT_EQUAL f() 0
f() CALL func (RSP + -88)
 CALL func ARG1 ARG3 ARG4 ARG3
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 2 4
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) 0
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 ARG2
 STORE 433 (ARG1 + 8) ARG3
 RETURN 0
 CALL func (RSP + -40) ARG1 ARG2 ARG1
(RSP + -40) PTRSUB RSP -40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
 RETURN 0 (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) COPY (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 STORE 433 ARG1 ARG2
 CALL func ARG1 (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG4 ARG3 ARG3
 RETURN 0
 STORE 433 (ARG1 + 8) 0
(f() / 2147483647) INT_RIGHT f() 64
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(ARG1 + 8) CAST (ARG1 + 8)
(f() / 2147483647) SUBPIECE f() 0
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
 CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 RETURN 0
 STORE 433 (ARG1 + 8) ~([(ARG1 + 8)])
0 INT_LESSEQUAL f() f()
 BRANCH VZERO
 CBRANCH (f() INT_LESSEQUAL f())
0 COPY 0
~([(ARG1 + 8)]) INT_NEGATE [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
(f() * 8) INT_MULT f() 8
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
([(ARG1 + 8)] + (f() * 8)) INT_ADD (f() * 8) [(ARG1 + 8)]
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
~([([(ARG1 + 8)] + (f() * 8))]) INT_NEGATE [([(ARG1 + 8)] + (f() * 8))]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() INT_ZEXT f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
 STORE 433 ([(ARG1 + 8)] + (f() * 8)) ~([([(ARG1 + 8)] + (f() * 8))])
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD (f() * 8) ARG1
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
0 INT_LESSEQUAL ARG2 f()
ARG3 COPY ARG3
(f(ARG3) & -256) INT_OR (f(ARG3) & -256) 0
0 COPY 0
f() INT_ZEXT f()
 RETURN 0 (f(ARG3) & -256)
(f(ARG3) & -256) INT_AND f(ARG3) -256
0 INT_NOTEQUAL f(ARG3) 0
f() COPY f()
f(ARG3) COPY f(ARG3)
0 INT_ZEXT 0
 CBRANCH (ARG2 INT_LESSEQUAL f())
 CBRANCH (f(ARG3) INT_LESSEQUAL [(ARG1 + (f() * 8))])
f(ARG3) COPY f(ARG3)
 BRANCH VZERO
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
1 COPY 1
0 COPY 0
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
0 INT_LESSEQUAL f(ARG3) [(ARG1 + (f() * 8))]
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f() INT_ZEXT f()
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
([(ARG1 + (f() * 8))] - f(ARG3)) INT_SUB [(ARG1 + (f() * 8))] f(ARG3)
 STORE 433 (ARG1 + (f() * 8)) ([(ARG1 + (f() * 8))] - f(ARG3))
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CALL func [(ARG1 + 8)] f() 1 f()
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
([(ARG1 + 8)] + -1) INT_ADD [(ARG1 + 8)] -1
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + -1)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG2 COPY ARG2
ARG5 COPY ARG5
ARG1 COPY ARG1
f() CALL func (RSP + -152)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -152) PTRSUB RSP -152
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f(ARG5) INT_EQUAL 16)
0 INT_EQUAL f(ARG5) 8
 CBRANCH (f(ARG5) INT_EQUAL 8)
4 COPY 4
 CBRANCH (ARG5 INT_NOTEQUAL 8)
[f()] LOAD 433 f()
0 INT_NOTEQUAL ARG5 16
f() CAST f()
(RSP + -152) PTRSUB RSP -152
 CBRANCH ([f()] INT_EQUAL 45)
f() CALL func (RSP + -152)
0 INT_EQUAL [f()] 45
[f()] LOAD 433 f()
(RSP + -152) PTRSUB RSP -152
 CBRANCH (ARG5 INT_NOTEQUAL 16)
f() CALL func (RSP + -152)
0 INT_EQUAL [f()] 45
 CBRANCH (ARG2 INT_LESS ((f() * 4) + -4))
 CBRANCH (ARG2 INT_LESS (((f() * 64) + -64) / 22))
((f() * 64) + -64) INT_SUB (f() * 64) -64
0 INT_EQUAL ARG5 16
(((f() * 64) + -64) / 22) INT_DIV ((f() * 64) + -64) 22
ARG2 INT_ZEXT ARG2
0 INT_LESS ARG2 (((f() * 64) + -64) / 22)
 CBRANCH (ARG5 INT_EQUAL 16)
(f() * 64) INT_MULT f() 64
 CBRANCH (1 INT_LESS f())
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (ARG5 INT_NOTEQUAL 36)
 CALL libcall___assert_fail_thunk (radix == 10 || radix == 8 || radix == 16 || radix == 2 || radix == 36) && "Radix should be 2, 8, 10, 16, or 36!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2088 0
(radix == 10 || radix == 8 || radix == 16 || radix == 2 || radix == 36) && "Radix should be 2, 8, 10, 16, or 36!" COPY (radix == 10 || radix == 8 || radix == 16 || radix == 2 || radix == 36) && "Radix should be 2, 8, 10, 16, or 36!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
0 COPY 0
 RETURN 1
 CBRANCH (f() INT_NOTEQUAL 1)
f() CALL func ARG1
 STORE 433 (ARG1 + 8) f()
(ARG1 + 8) CAST (ARG1 + 8)
f() CALL func f()
(ARG1 + 8) INT_ADD ARG1 8
 CBRANCH (ARG2 INT_LESS ((f() * 3) + -3))
 CBRANCH (ARG5 INT_EQUAL 8)
(f() * 4) INT_MULT f() 4
0 INT_EQUAL ARG5 8
0 INT_LESS ARG2 ((f() * 4) + -4)
((f() * 4) + -4) INT_SUB (f() * 4) -4
ARG2 INT_ZEXT ARG2
 CBRANCH (ARG2 INT_LESS f())
0 INT_LESS ARG2 ((f() * 3) + -3)
 CBRANCH (ARG5 INT_EQUAL 2)
((f() * 3) + -3) INT_SUB (f() * 3) -3
0 INT_EQUAL ARG5 2
ARG2 INT_ZEXT ARG2
(f() * 3) INT_MULT f() 3
 CBRANCH ([f()] INT_EQUAL 43)
(f() + -1) INT_SUB f() -1
0 INT_EQUAL (f() + -1) 0
ARG2 INT_ZEXT ARG2
(f() + 1) PTRADD f() 1 1
0 INT_LESS ARG2 f()
 CBRANCH ((f() + -1) INT_EQUAL 0)
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
0 COPY 0
 CALL libcall___assert_fail_thunk slen && "String is only a sign, needs a value." /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2096 0
slen && "String is only a sign, needs a value." COPY slen && "String is only a sign, needs a value."
!str.empty() && "Invalid string length" COPY !str.empty() && "Invalid string length"
 CBRANCH (ARG5 INT_NOTEQUAL 10)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
0 COPY 0
0 INT_NOTEQUAL ARG5 10
 RETURN 1
 CALL libcall___assert_fail_thunk !str.empty() && "Invalid string length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2085 0
 CBRANCH (f() INT_NOTEQUAL f())
f(ARG5) INT_ZEXT f(ARG5)
f() CALL func [f()] f(ARG5) f(ARG5)
0 INT_NOTEQUAL f() 0
 CALL func (RSP + -56)
[f()] INT_SEXT [f()]
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -72) PTRSUB RSP -72
0 INT_LESSEQUAL f(ARG5) f()
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 CALL func (RSP + -72)
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (f(ARG5) INT_LESSEQUAL f())
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL f() [(f() + 40)]
[f()] LOAD 433 f()
0 INT_NOTEQUAL ARG5 8
 CBRANCH (ARG5 INT_NOTEQUAL 2)
0 INT_NOTEQUAL ARG5 36
 CBRANCH (f() INT_EQUAL 0)
f() CAST f()
f() INT_ZEXT f()
f() INT_ZEXT f()
 BRANCH VZERO
 STORE 433 f() f()
 CBRANCH (f(ARG5) INT_EQUAL 2)
 BRANCH VZERO
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CALL func f(ARG1)
 CALL func f(ARG1)
 CBRANCH (ARG5 INT_EQUAL 10)
f() CALL func ARG1
 CALL func (RSP + -72) f() 0 0
f() CAST f()
0 INT_NOTEQUAL f() 1
f() CALL func f(ARG1)
0 INT_EQUAL f(ARG5) 16
(RSP + -56) PTRSUB RSP -56
f() CALL func f(ARG1)
 CALL func (RSP + -56) f() f(ARG5) 0
0 COPY 0
0 INT_NOTEQUAL f() f()
 RETURN 1
f() CALL func (RSP + -152)
(RSP + -152) PTRSUB RSP -152
(RSP + -72) PTRSUB RSP -72
(((slen-1)*64)/22 <= numbits || radix != 10) && "Insufficient bit width" COPY (((slen-1)*64)/22 <= numbits || radix != 10) && "Insufficient bit width"
 CALL libcall___assert_fail_thunk (((slen-1)*64)/22 <= numbits || radix != 10) && "Insufficient bit width" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2102 0
f(ARG5) COPY f(ARG5)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
[f()] LOAD 433 f()
0 INT_EQUAL [f()] 43
3 COPY 3
 BRANCH VZERO
0 INT_EQUAL f(ARG5) 2
0 INT_NOTEQUAL ARG5 2
 RETURN 1
((slen-1)*4 <= numbits || radix != 16) && "Insufficient bit width" COPY ((slen-1)*4 <= numbits || radix != 16) && "Insufficient bit width"
 CALL libcall___assert_fail_thunk ((slen-1)*4 <= numbits || radix != 16) && "Insufficient bit width" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2100 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
0 COPY 0
(RSP + -56) PTRSUB RSP -56
 CALL func f(ARG1) (RSP + -56) (RSP + -56)
 CALL func f(ARG1) f() f()
 BRANCH VZERO
0 INT_EQUAL ARG5 10
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
0 COPY 0
 RETURN 1
(slen <= numbits || radix != 2) && "Insufficient bit width" COPY (slen <= numbits || radix != 2) && "Insufficient bit width"
 CALL libcall___assert_fail_thunk (slen <= numbits || radix != 2) && "Insufficient bit width" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2098 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
0 COPY 0
 CALL libcall___assert_fail_thunk ((slen-1)*3 <= numbits || radix != 8) && "Insufficient bit width" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2099 0
((slen-1)*3 <= numbits || radix != 8) && "Insufficient bit width" COPY ((slen-1)*3 <= numbits || radix != 8) && "Insufficient bit width"
 RETURN 1
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 CALL func
digit < radix && "Invalid character in digit string" COPY digit < radix && "Invalid character in digit string"
f() CALL func (RSP + -72)
 BRANCH VZERO
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 RETURN 1
0 INT_EQUAL f() 0
 CALL libcall___assert_fail_thunk digit < radix && "Invalid character in digit string" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2119 0
0 INT_LESS 1 f()
(RSP + -72) PTRSUB RSP -72
0 COPY 0
(f() + 1) PTRADD f() 1 1
ARG2 LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 2 4
 STORE 433 ARG1 ARG2
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5
 STORE 433 (ARG1 + 8) 0
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_EQUAL ARG2 0
 CBRANCH (ARG2 INT_EQUAL 0)
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 CALL libcall___assert_fail_thunk BitWidth && "Bitwidth too small" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 119 0
0 COPY 0
BitWidth && "Bitwidth too small" COPY BitWidth && "Bitwidth too small"
 RETURN 0
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
f(ARG1) CALL func ARG1
f(ARG1 , ARG2) LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
0 INT_NOTEQUAL ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
 STORE 433 ARG1 [ARG2]
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
 CBRANCH (ARG1 INT_NOTEQUAL ARG2)
 CBRANCH (f() INT_NOTEQUAL 0)
f(ARG1) CAST f(ARG1)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0 f(ARG1)
(ARG1 + 8) CAST (ARG1 + 8)
llvm::APInt& llvm::APInt::AssignSlowCase(const llvm::APInt&) COPY llvm::APInt& llvm::APInt::AssignSlowCase(const llvm::APInt&)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 STORE 433 (ARG1 + 8) 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
!RHS.isSingleWord() COPY !RHS.isSingleWord()
 RETURN 1
 CALL libcall___assert_fail_thunk !RHS.isSingleWord() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 137 llvm::APInt& llvm::APInt::AssignSlowCase(const llvm::APInt&)
 STORE 433 (ARG1 + 8) f()
(f() * 8) INT_ZEXT (f() * 8)
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
f() CALL func f()
(ARG1 + 8) CAST (ARG1 + 8)
(f() * 8) INT_LEFT f() 3
(ARG2 + 8) CAST (ARG2 + 8)
 CALL libcall_memcpy_thunk [(ARG1 + 8)] [(ARG2 + 8)] (f() * 8)
(f() * 8) CAST (f() * 8)
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 0)
 CALL libcall_operator.delete[]_thunk [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_EQUAL f(ARG1 , ARG2) f()
 CBRANCH (f(ARG1 , ARG2) INT_EQUAL f())
 CBRANCH (f() INT_EQUAL 0)
 STORE 433 (ARG1 + 8) f()
(f() * 8) CAST (f() * 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_NOTEQUAL [(ARG1 + 8)] 0
f() CALL func f()
(f() * 8) INT_LEFT f() 3
 CALL libcall_memcpy_thunk [(ARG1 + 8)] [(ARG2 + 8)] (f() * 8)
(ARG2 + 8) CAST (ARG2 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_NOTEQUAL [(ARG1 + 8)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 0)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() * 8) INT_ZEXT (f() * 8)
 BRANCH VZERO
 STORE 433 (ARG1 + 8) [(ARG2 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CBRANCH (f() INT_NOTEQUAL 0)
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 1
 CALL libcall___assert_fail_thunk !isSingleWord() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 130 llvm::APInt& llvm::APInt::AssignSlowCase(const llvm::APInt&)
llvm::APInt& llvm::APInt::AssignSlowCase(const llvm::APInt&) COPY llvm::APInt& llvm::APInt::AssignSlowCase(const llvm::APInt&)
(ARG2 + 8) CAST (ARG2 + 8)
(f() * 8) INT_ZEXT (f() * 8)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
!isSingleWord() COPY !isSingleWord()
 BRANCH VZERO
(f() * 8) INT_LEFT f() 3
(f() * 8) CAST (f() * 8)
 CALL libcall_memcpy_thunk [(ARG1 + 8)] [(ARG2 + 8)] (f() * 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_EQUAL f())
0 INT_EQUAL f() f()
 CALL libcall_memcpy_thunk [(ARG1 + 8)] [(ARG2 + 8)] (f() * 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(f() * 8) CAST (f() * 8)
(f() * 8) INT_ZEXT (f() * 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_EQUAL f() 0
(ARG2 + 8) CAST (ARG2 + 8)
 BRANCH VZERO
(f() * 8) INT_LEFT f() 3
 CALL libcall_operator.delete[]_thunk [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
 CALL func ARG1 (ARG1 + 24) ARG2 ARG3
(ARG1 + 24) INT_ADD ARG1 24
 RETURN 0
 CALL func ARG1 (ARG2 * 4) 4 (ARG2 * 4)
(ARG2 * 4) INT_MULT ARG2 4
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 STORE 433 (ARG1 + 8) ARG2
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1 (f() + 4) (f() + 4)
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1 0
[ARG2] LOAD 433 ARG2
(f() + 4) INT_ADD f() 4
 STORE 433 f() [ARG2]
 RETURN 0
f() CAST f()
 CBRANCH ([(ARG1 + 16)] INT_LESSEQUAL [(ARG1 + 8)])
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_LESSEQUAL [(ARG1 + 16)] [(ARG1 + 8)]
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -20) (RSP + -20)
ARG2 COPY ARG2
(RSP + -20) PTRSUB RSP -20
 RETURN 0
 CALL func ARG1 (ARG2 & 4294967295) (ARG2 & 4294967295)
 CALL func ARG1 (RSP + -20) (RSP + -20)
0 INT_NOTEQUAL (ARG2 & 4294967295) ARG2
(ARG2 & 4294967295) INT_AND ARG2 4294967295
(ARG2 & 4294967295) INT_AND ARG2 4294967295
(ARG2 / 2147483647) INT_RIGHT ARG2 32
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH ((ARG2 & 4294967295) INT_NOTEQUAL ARG2)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(ARG2 / 4611686014132420609) SUBPIECE (ARG2 / 2147483647) 0
(RSP + -20) PTRSUB RSP -20
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
 CALL func ARG2 [([(ARG1 + 8)] + (f() * 8))] [([(ARG1 + 8)] + (f() * 8))]
 CALL func ARG2 [(ARG1 + 8)] [(ARG1 + 8)]
 CALL func ARG2 [ARG1] [ARG1]
 RETURN 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_LESS f())
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
0 INT_LESS f() f()
(f() * 8) INT_MULT f() 8
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
f() INT_ZEXT f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
0 COPY 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
0 INT_LESSEQUAL ARG3 f()
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
ARG4 COPY ARG4
0 INT_ZEXT 0
f() INT_ZEXT f()
 CBRANCH (ARG3 INT_LESSEQUAL f())
(f(ARG1) & -256) INT_OR (f(ARG1) & -256) 0
0 INT_NOTEQUAL f(ARG4) 0
0 COPY 0
(f(ARG1) & -256) INT_AND f(ARG1) -256
 RETURN 0 (f(ARG1) & -256)
 CBRANCH (f(ARG4) INT_LESSEQUAL [(ARG1 + (f() * 8))])
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
1 COPY 1
0 COPY 0
 BRANCH VZERO
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
(f() * 8) INT_MULT f() 8
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
(f(ARG4) + [(ARG2 + (f() * 8))]) INT_ADD f(ARG4) [(ARG2 + (f() * 8))]
 STORE 433 (ARG1 + (f() * 8)) (f(ARG4) + [(ARG2 + (f() * 8))])
0 INT_LESSEQUAL f(ARG4) [(ARG1 + (f() * 8))]
f() INT_ZEXT f()
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f() INT_ZEXT f()
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 1)
([(ARG1 + 8)] + 1) INT_ADD [(ARG1 + 8)] 1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func [(ARG1 + 8)] [(ARG1 + 8)] f() 1
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
(ARG3 + (f() * 8)) INT_ADD ARG3 (f() * 8)
(ARG3 + (f() * 8)) INT_ADD ARG3 (f() * 8)
0 INT_LESS f() ARG4
0 COPY 0
 CBRANCH (f() INT_LESS ARG4)
f() COPY f()
0 COPY 0
 RETURN 0 f()
 CBRANCH (f() INT_EQUAL 0)
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
([(ARG2 + (f() * 8))] + 1) INT_SUB [(ARG2 + (f() * 8))] 1
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
f() INT_ZEXT f()
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
(f() * 8) INT_MULT f() 8
 BRANCH VZERO
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_EQUAL [(ARG2 + (f() * 8))] 0
(f() * 8) INT_MULT f() 8
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
f() INT_ZEXT f()
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
0 COPY 0
 CBRANCH ([(ARG2 + (f() * 8))] INT_EQUAL 0)
f() INT_ZEXT f()
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
(f(ARG2) - [(ARG3 + (f() * 8))]) INT_SUB f(ARG2) [(ARG3 + (f() * 8))]
[(ARG3 + (f() * 8))] LOAD 433 (ARG3 + (f() * 8))
0 INT_EQUAL f() 0
0 INT_LESS f(ARG2) [(ARG3 + (f() * 8))]
(ARG3 + (f() * 8)) CAST (ARG3 + (f() * 8))
(f() * 8) INT_MULT f() 8
(f() * 8) INT_MULT f() 8
[(ARG3 + (f() * 8))] LOAD 433 (ARG3 + (f() * 8))
(ARG3 + (f() * 8)) CAST (ARG3 + (f() * 8))
 STORE 433 (ARG1 + (f() * 8)) (f(ARG2) - [(ARG3 + (f() * 8))])
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() INT_ZEXT f()
 CBRANCH (f(ARG2) INT_LESS [(ARG3 + (f() * 8))])
1 COPY 1
 BRANCH VZERO
0 INT_NOTEQUAL f() 0
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
 CALL func ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
(ARG2 + 8) PTRADD ARG2 2 4
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
0 INT_NOTEQUAL [ARG1] [ARG2]
 CBRANCH ([ARG1] INT_NOTEQUAL [ARG2])
 CBRANCH (f() INT_EQUAL 0)
([(ARG1 + 8)] - [(ARG2 + 8)]) INT_SUB [(ARG1 + 8)] [(ARG2 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 CALL func [(ARG1 + 8)] [(ARG1 + 8)] [(ARG2 + 8)] f()
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] - [(ARG2 + 8)])
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 RETURN 1
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be the same" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 280 llvm::APInt& llvm::APInt::operator-=(const llvm::APInt&)
0 INT_EQUAL f() 0
 RETURN 0
BitWidth == RHS.BitWidth && "Bit widths must be the same" COPY BitWidth == RHS.BitWidth && "Bit widths must be the same"
llvm::APInt& llvm::APInt::operator-=(const llvm::APInt&) COPY llvm::APInt& llvm::APInt::operator-=(const llvm::APInt&)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
ARG1 COPY ARG1
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
(ARG2 + 8) PTRADD ARG2 2 4
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
 CBRANCH ([ARG1] INT_EQUAL [ARG2])
0 INT_EQUAL [ARG1] [ARG2]
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be the same" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 399 llvm::APInt& llvm::APInt::operator&=(const llvm::APInt&)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
BitWidth == RHS.BitWidth && "Bit widths must be the same" COPY BitWidth == RHS.BitWidth && "Bit widths must be the same"
 RETURN 0 ARG1
llvm::APInt& llvm::APInt::operator&=(const llvm::APInt&) COPY llvm::APInt& llvm::APInt::operator&=(const llvm::APInt&)
0 INT_EQUAL f() 0
 RETURN 1
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_LESS f())
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
(f() * 8) INT_MULT f() 8
([(ARG1 + 8)] + (f() * 8)) INT_ADD (f() * 8) [(ARG1 + 8)]
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([([(ARG2 + 8)] + (f() * 8))] & [([(ARG1 + 8)] + (f() * 8))]) INT_AND [([(ARG2 + 8)] + (f() * 8))] [([(ARG1 + 8)] + (f() * 8))]
(ARG1 + 8) CAST (ARG1 + 8)
(f() * 8) INT_MULT f() 8
0 INT_LESS f() f()
([(ARG2 + 8)] + (f() * 8)) CAST ([(ARG2 + 8)] + (f() * 8))
 STORE 433 ([(ARG1 + 8)] + (f() * 8)) ([([(ARG2 + 8)] + (f() * 8))] & [([(ARG1 + 8)] + (f() * 8))])
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
(ARG2 + 8) CAST (ARG2 + 8)
f() INT_ZEXT f()
([(ARG2 + 8)] + (f() * 8)) INT_ADD [(ARG2 + 8)] (f() * 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
[([(ARG2 + 8)] + (f() * 8))] LOAD 433 ([(ARG2 + 8)] + (f() * 8))
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
f() INT_ZEXT f()
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
([(ARG2 + 8)] & [(ARG1 + 8)]) INT_AND [(ARG1 + 8)] [(ARG2 + 8)]
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 STORE 433 (ARG1 + 8) ([(ARG2 + 8)] & [(ARG1 + 8)])
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
0 COPY 0
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
ARG1 COPY ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG2 + 8) PTRADD ARG2 2 4
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
 CBRANCH ([ARG1] INT_EQUAL [ARG2])
0 INT_EQUAL [ARG1] [ARG2]
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
0 INT_LESS f() f()
0 COPY 0
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
([(ARG2 + 8)] | [(ARG1 + 8)]) INT_OR [(ARG1 + 8)] [(ARG2 + 8)]
 STORE 433 (ARG1 + 8) ([(ARG2 + 8)] | [(ARG1 + 8)])
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (f() INT_LESS f())
0 INT_EQUAL f() 0
 RETURN 1
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be the same" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 411 llvm::APInt& llvm::APInt::operator|=(const llvm::APInt&)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
BitWidth == RHS.BitWidth && "Bit widths must be the same" COPY BitWidth == RHS.BitWidth && "Bit widths must be the same"
 RETURN 0 ARG1
llvm::APInt& llvm::APInt::operator|=(const llvm::APInt&) COPY llvm::APInt& llvm::APInt::operator|=(const llvm::APInt&)
([(ARG2 + 8)] + (f() * 8)) CAST ([(ARG2 + 8)] + (f() * 8))
 STORE 433 ([(ARG1 + 8)] + (f() * 8)) ([([(ARG2 + 8)] + (f() * 8))] | [([(ARG1 + 8)] + (f() * 8))])
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
(ARG2 + 8) CAST (ARG2 + 8)
f() INT_ZEXT f()
([(ARG2 + 8)] + (f() * 8)) INT_ADD [(ARG2 + 8)] (f() * 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
[([(ARG2 + 8)] + (f() * 8))] LOAD 433 ([(ARG2 + 8)] + (f() * 8))
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
f() INT_ZEXT f()
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
(f() * 8) INT_MULT f() 8
([(ARG1 + 8)] + (f() * 8)) INT_ADD (f() * 8) [(ARG1 + 8)]
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
([([(ARG2 + 8)] + (f() * 8))] | [([(ARG1 + 8)] + (f() * 8))]) INT_OR [([(ARG2 + 8)] + (f() * 8))] [([(ARG1 + 8)] + (f() * 8))]
(f() * 8) INT_MULT f() 8
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
f(ARG1) CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
[ARG1] LOAD 433 ARG1
 CALL func ARG1
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
 CBRANCH ([ARG1] INT_NOTEQUAL [ARG2])
0 INT_NOTEQUAL [ARG1] [ARG2]
 CBRANCH (f() INT_EQUAL 0)
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (f() INT_LESS f())
f(ARG1) CAST f(ARG1)
0 INT_XOR [(ARG1 + 8)] [(ARG2 + 8)]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
0 COPY 0
 STORE 433 (ARG1 + 8) 0
0 INT_LESS f() f()
 BRANCH VZERO
(ARG2 + 8) CAST (ARG2 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() * 8) INT_MULT f() 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
0 INT_XOR [([(ARG2 + 8)] + (f() * 8))] [([(ARG1 + 8)] + (f() * 8))]
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
f() INT_ZEXT f()
 STORE 433 ([(ARG1 + 8)] + (f() * 8)) 0
(f() * 8) INT_MULT f() 8
(ARG1 + 8) CAST (ARG1 + 8)
f() INT_ZEXT f()
([(ARG2 + 8)] + (f() * 8)) CAST ([(ARG2 + 8)] + (f() * 8))
([(ARG2 + 8)] + (f() * 8)) INT_ADD [(ARG2 + 8)] (f() * 8)
[([(ARG2 + 8)] + (f() * 8))] LOAD 433 ([(ARG2 + 8)] + (f() * 8))
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) INT_ADD (f() * 8) [(ARG1 + 8)]
 RETURN 0 f(ARG1)
0 INT_EQUAL f() 0
BitWidth == RHS.BitWidth && "Bit widths must be the same" COPY BitWidth == RHS.BitWidth && "Bit widths must be the same"
 RETURN 1
llvm::APInt& llvm::APInt::operator^=(const llvm::APInt&) COPY llvm::APInt& llvm::APInt::operator^=(const llvm::APInt&)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be the same" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 423 llvm::APInt& llvm::APInt::operator^=(const llvm::APInt&)
(ARG3 + 8) INT_ADD ARG3 8
 CALL func ARG1 f() f() f()
ARG1 COPY ARG1
f() CALL func ARG2
f() CALL func ARG2
(ARG2 + 8) INT_ADD ARG2 8
f() CALL func f()
 RETURN 0 ARG1
 CBRANCH (f() INT_LESS f())
0 INT_LESS f() f()
0 COPY 0
([(ARG3 + 8)] + (f() * 8)) INT_ADD [(ARG3 + 8)] (f() * 8)
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
([(ARG3 + 8)] + (f() * 8)) CAST ([(ARG3 + 8)] + (f() * 8))
[([(ARG3 + 8)] + (f() * 8))] LOAD 433 ([(ARG3 + 8)] + (f() * 8))
f() INT_ZEXT f()
([(ARG2 + 8)] + (f() * 8)) INT_ADD [(ARG2 + 8)] (f() * 8)
[([(ARG2 + 8)] + (f() * 8))] LOAD 433 ([(ARG2 + 8)] + (f() * 8))
(ARG3 + 8) CAST (ARG3 + 8)
((f() * 8) + f()) INT_ADD (f() * 8) f()
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
([(ARG2 + 8)] + (f() * 8)) CAST ([(ARG2 + 8)] + (f() * 8))
(f() * 8) INT_MULT f() 8
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
f() INT_ZEXT f()
(ARG2 + 8) CAST (ARG2 + 8)
([([(ARG3 + 8)] + (f() * 8))] & [([(ARG2 + 8)] + (f() * 8))]) INT_AND [([(ARG3 + 8)] + (f() * 8))] [([(ARG2 + 8)] + (f() * 8))]
(f() * 8) INT_MULT f() 8
((f() * 8) + f()) CAST ((f() * 8) + f())
 STORE 433 ((f() * 8) + f()) ([([(ARG3 + 8)] + (f() * 8))] & [([(ARG2 + 8)] + (f() * 8))])
(ARG3 + 8) INT_ADD ARG3 8
 CALL func ARG1 f() f() f()
ARG1 COPY ARG1
f() CALL func ARG2
f() CALL func ARG2
(ARG2 + 8) INT_ADD ARG2 8
f() CALL func f()
 RETURN 0 ARG1
 CBRANCH (f() INT_LESS f())
0 INT_LESS f() f()
0 COPY 0
((f() * 8) + f()) CAST ((f() * 8) + f())
 STORE 433 ((f() * 8) + f()) ([([(ARG3 + 8)] + (f() * 8))] | [([(ARG2 + 8)] + (f() * 8))])
([(ARG3 + 8)] + (f() * 8)) INT_ADD [(ARG3 + 8)] (f() * 8)
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
([(ARG3 + 8)] + (f() * 8)) CAST ([(ARG3 + 8)] + (f() * 8))
[([(ARG3 + 8)] + (f() * 8))] LOAD 433 ([(ARG3 + 8)] + (f() * 8))
f() INT_ZEXT f()
([(ARG2 + 8)] + (f() * 8)) INT_ADD [(ARG2 + 8)] (f() * 8)
[([(ARG2 + 8)] + (f() * 8))] LOAD 433 ([(ARG2 + 8)] + (f() * 8))
(ARG3 + 8) CAST (ARG3 + 8)
((f() * 8) + f()) INT_ADD (f() * 8) f()
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
([(ARG2 + 8)] + (f() * 8)) CAST ([(ARG2 + 8)] + (f() * 8))
(f() * 8) INT_MULT f() 8
(f() * 8) INT_MULT f() 8
([([(ARG3 + 8)] + (f() * 8))] | [([(ARG2 + 8)] + (f() * 8))]) INT_OR [([(ARG3 + 8)] + (f() * 8))] [([(ARG2 + 8)] + (f() * 8))]
f() INT_ZEXT f()
(ARG2 + 8) CAST (ARG2 + 8)
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
ARG1 COPY ARG1
 CALL func ARG1 f() f() f()
 CALL func ARG1
(ARG2 + 8) INT_ADD ARG2 8
f() CALL func ARG2
f() CALL func ARG2
(ARG3 + 8) INT_ADD ARG3 8
[40] LOAD 433 40
 CBRANCH (f() INT_LESS f())
0 COPY 0
0 INT_LESS f() f()
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
f() CALL func f()
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
([(ARG3 + 8)] + (f() * 8)) INT_ADD [(ARG3 + 8)] (f() * 8)
f() INT_ZEXT f()
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
[([(ARG3 + 8)] + (f() * 8))] LOAD 433 ([(ARG3 + 8)] + (f() * 8))
((f() * 8) + f()) CAST ((f() * 8) + f())
([(ARG2 + 8)] + (f() * 8)) INT_ADD [(ARG2 + 8)] (f() * 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
((f() * 8) + f()) INT_ADD (f() * 8) f()
[([(ARG2 + 8)] + (f() * 8))] LOAD 433 ([(ARG2 + 8)] + (f() * 8))
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
([(ARG3 + 8)] + (f() * 8)) CAST ([(ARG3 + 8)] + (f() * 8))
(f() * 8) INT_MULT f() 8
0 INT_XOR [([(ARG3 + 8)] + (f() * 8))] [([(ARG2 + 8)] + (f() * 8))]
(ARG3 + 8) CAST (ARG3 + 8)
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
 STORE 433 ((f() * 8) + f()) 0
([(ARG2 + 8)] + (f() * 8)) CAST ([(ARG2 + 8)] + (f() * 8))
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 CALL func ARG1 [ARG2] ([(ARG3 + 8)] * [(ARG2 + 8)]) 0
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -40) (RSP + -40)
[ARG2] LOAD 433 ARG2
 CALL func (RSP + -40) ARG2 ARG2
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
(ARG3 + 8) PTRADD ARG3 2 4
[ARG3] LOAD 433 ARG3
 CALL func (RSP + -40) ARG3 ARG3
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [ARG2] [ARG3]
 CBRANCH ([ARG2] INT_NOTEQUAL [ARG3])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
[(f() + 40)] LOAD 433 (f() + 40)
 RETURN 1
 CBRANCH (f() INT_EQUAL 0)
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be the same" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 464 llvm::APInt llvm::APInt::operator*(const llvm::APInt&) const
0 INT_EQUAL f() 0
llvm::APInt llvm::APInt::operator*(const llvm::APInt&) const COPY llvm::APInt llvm::APInt::operator*(const llvm::APInt&) const
(f() + 40) INT_ADD f() 40
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
BitWidth == RHS.BitWidth && "Bit widths must be the same" COPY BitWidth == RHS.BitWidth && "Bit widths must be the same"
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
 BRANCH VZERO
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(RSP + -40) PTRSUB RSP -40
(ARG3 + 8) CAST (ARG3 + 8)
(RSP + -40) PTRSUB RSP -40
([(ARG3 + 8)] * [(ARG2 + 8)]) INT_MULT [(ARG2 + 8)] [(ARG3 + 8)]
(ARG2 + 8) CAST (ARG2 + 8)
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CALL func ARG1 [ARG2] ([(ARG2 + 8)] + [(ARG3 + 8)]) 0
ARG1 COPY ARG1
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
(ARG3 + 8) PTRADD ARG3 2 4
(ARG3 + 8) PTRADD ARG3 2 4
[ARG3] LOAD 433 ARG3
 CBRANCH ([ARG2] INT_NOTEQUAL [ARG3])
0 INT_NOTEQUAL [ARG2] [ARG3]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
 CALL func (RSP + -40)
(ARG2 + 8) CAST (ARG2 + 8)
 CALL func A_Stack[-0x20]:8 [(ARG2 + 8)] [(ARG3 + 8)] f()
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
 CALL func (RSP + -40) [ARG2] 0 0
(RSP + -40) PTRSUB RSP -40
 BRANCH VZERO
(RSP + -40) PTRSUB RSP -40
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(RSP + -40) PTRSUB RSP -40
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
([(ARG2 + 8)] + [(ARG3 + 8)]) INT_ADD [(ARG2 + 8)] [(ARG3 + 8)]
 CALL func (RSP + -40)
(ARG3 + 8) CAST (ARG3 + 8)
(ARG3 + 8) CAST (ARG3 + 8)
(RSP + -40) PTRSUB RSP -40
0 INT_NOTEQUAL 0 [(f() + 40)]
0 INT_EQUAL f() 0
 RETURN 1
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be the same" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 473 llvm::APInt llvm::APInt::operator+(const llvm::APInt&) const
BitWidth == RHS.BitWidth && "Bit widths must be the same" COPY BitWidth == RHS.BitWidth && "Bit widths must be the same"
llvm::APInt llvm::APInt::operator+(const llvm::APInt&) const COPY llvm::APInt llvm::APInt::operator+(const llvm::APInt&) const
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
ARG1 COPY ARG1
 CALL func ARG1 [ARG2] ([(ARG2 + 8)] - [(ARG3 + 8)]) 0
 CALL func ARG1 (RSP + -40) (RSP + -40)
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
[ARG3] LOAD 433 ARG3
(ARG3 + 8) PTRADD ARG3 2 4
(ARG3 + 8) PTRADD ARG3 2 4
0 INT_NOTEQUAL [ARG2] [ARG3]
 CBRANCH ([ARG2] INT_NOTEQUAL [ARG3])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 RETURN 1
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
(f() + 40) INT_ADD f() 40
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be the same" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 483 llvm::APInt llvm::APInt::operator-(const llvm::APInt&) const
0 INT_EQUAL f() 0
0 INT_NOTEQUAL 0 [(f() + 40)]
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
BitWidth == RHS.BitWidth && "Bit widths must be the same" COPY BitWidth == RHS.BitWidth && "Bit widths must be the same"
llvm::APInt llvm::APInt::operator-(const llvm::APInt&) const COPY llvm::APInt llvm::APInt::operator-(const llvm::APInt&) const
[(f() + 40)] LOAD 433 (f() + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
(RSP + -40) PTRSUB RSP -40
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
([(ARG2 + 8)] - [(ARG3 + 8)]) INT_SUB [(ARG2 + 8)] [(ARG3 + 8)]
(ARG3 + 8) CAST (ARG3 + 8)
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(ARG3 + 8) CAST (ARG3 + 8)
 CALL func (RSP + -40)
 CALL func A_Stack[-0x20]:8 [(ARG2 + 8)] [(ARG3 + 8)] f()
(ARG2 + 8) CAST (ARG2 + 8)
(RSP + -40) PTRSUB RSP -40
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
 CALL func (RSP + -40) [ARG2] 0 0
 BRANCH VZERO
(RSP + -40) PTRSUB RSP -40
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
(ARG2 + 8) INT_ADD ARG2 8
(ARG2 + 8) INT_ADD ARG2 8
f() CALL func ARG2
 CBRANCH (f() INT_EQUAL f())
0 INT_EQUAL f() f()
 RETURN 0 0
0 INT_LESS f() 65
0 COPY 0
0 COPY 0
 RETURN 0 f(ARG2)
 CBRANCH (f() INT_LESS 65)
 BRANCH VZERO
 CBRANCH ([([(ARG1 + 8)] + (f() * 8))] INT_NOTEQUAL [([(ARG2 + 8)] + (f() * 8))])
(f() + 4294967295) INT_ADD f() 4294967295
 BRANCH VZERO
 CBRANCH (4294967295 INT_SLESS f())
0 INT_SLESS 4294967295 f()
(f() * 8) INT_MULT f() 8
f() INT_SEXT f()
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
1 COPY 1
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
0 INT_NOTEQUAL [([(ARG1 + 8)] + (f() * 8))] [([(ARG2 + 8)] + (f() * 8))]
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
(f() * 8) INT_MULT f() 8
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
([(ARG2 + 8)] + (f() * 8)) INT_ADD [(ARG2 + 8)] (f() * 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() INT_SEXT f()
([(ARG2 + 8)] + (f() * 8)) CAST ([(ARG2 + 8)] + (f() * 8))
[([(ARG2 + 8)] + (f() * 8))] LOAD 433 ([(ARG2 + 8)] + (f() * 8))
(ARG1 + 8) CAST (ARG1 + 8)
[[(ARG1 + 8)]] LOAD 433 [(ARG1 + 8)]
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([[(ARG2 + 8)]] & -256) INT_OR ([[(ARG2 + 8)]] & -256) 0
[[(ARG2 + 8)]] LOAD 433 [(ARG2 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 BRANCH VZERO
([[(ARG2 + 8)]] & -256) INT_AND [[(ARG2 + 8)]] -256
f() CALL func (f() + 1)
(f() + 1) INT_SUB f() 1
0 INT_EQUAL [[(ARG1 + 8)]] [[(ARG2 + 8)]]
0 INT_ZEXT 0
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
0 INT_EQUAL [[(ARG1 + 8)]] ARG2
 RETURN 0 f(ARG1)
0 INT_LESS f() 65
 CBRANCH (f() INT_LESS 65)
([[(ARG1 + 8)]] & -256) INT_AND [[(ARG1 + 8)]] -256
[[(ARG1 + 8)]] LOAD 433 [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
([[(ARG1 + 8)]] & -256) INT_OR ([[(ARG1 + 8)]] & -256) 0
0 COPY 0
0 INT_ZEXT 0
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
(ARG2 + 8) PTRADD ARG2 2 4
(ARG2 + 8) PTRADD ARG2 2 4
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([ARG1] INT_NOTEQUAL [ARG2])
0 INT_NOTEQUAL [ARG1] [ARG2]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (4294967295 INT_SLESS f())
(f() * 8) INT_MULT f() 8
([(ARG2 + 8)] + (f() * 8)) CAST ([(ARG2 + 8)] + (f() * 8))
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
([(ARG2 + 8)] + (f() * 8)) INT_ADD [(ARG2 + 8)] (f() * 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() INT_SEXT f()
(ARG1 + 8) CAST (ARG1 + 8)
[([(ARG2 + 8)] + (f() * 8))] LOAD 433 ([(ARG2 + 8)] + (f() * 8))
(ARG2 + 8) CAST (ARG2 + 8)
0 INT_LESS [([(ARG2 + 8)] + (f() * 8))] [([(ARG1 + 8)] + (f() * 8))]
(f() * 8) INT_MULT f() 8
0 COPY 0
f() INT_SEXT f()
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
 CBRANCH ([([(ARG2 + 8)] + (f() * 8))] INT_LESS [([(ARG1 + 8)] + (f() * 8))])
 CBRANCH (f() INT_LESS 65)
(RSP + -32) PTRSUB RSP -32
[[(ARG1 + 8)]] LOAD 433 [(ARG1 + 8)]
([f(RSP)] + 4294967295) INT_ADD [f(RSP)] 4294967295
(RSP + -28) PTRSUB RSP -28
([[(ARG2 + 8)]] & -256) INT_AND [[(ARG2 + 8)]] -256
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
[[(ARG2 + 8)]] LOAD 433 [(ARG2 + 8)]
f(RSP) CAST f(RSP)
([[(ARG2 + 8)]] & -256) INT_OR ([[(ARG2 + 8)]] & -256) 0
0 INT_ZEXT 0
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
0 INT_SLESS 4294967295 f()
(ARG1 + 8) CAST (ARG1 + 8)
f() CALL func ([f(RSP)] + 4294967295)
[f(RSP)] LOAD 433 f(RSP)
 BRANCH VZERO
f(RSP) CALL func (RSP + -32) (RSP + -28) (RSP + -28)
f() COPY f()
0 INT_LESS [[(ARG1 + 8)]] [[(ARG2 + 8)]]
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
0 INT_LESS [(ARG1 + 8)] [(ARG2 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG2 + 8)] & -256) INT_OR ([(ARG2 + 8)] & -256) 0
([(ARG2 + 8)] & -256) INT_AND [(ARG2 + 8)] -256
0 INT_LESS f() f()
 CBRANCH (f() INT_LESS f())
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
0 INT_ZEXT 0
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(ARG2)
1 COPY 1
0 INT_LESS f() f()
 CBRANCH (f() INT_LESS f())
 BRANCH VZERO
 CBRANCH ([([(ARG1 + 8)] + (f() * 8))] INT_LESS [([(ARG2 + 8)] + (f() * 8))])
 BRANCH VZERO
 BRANCH VZERO
(f() + 4294967295) INT_ADD f() 4294967295
1 COPY 1
 CBRANCH (f() INT_LESS 65)
0 INT_LESS f() 65
[(f() + 40)] LOAD 433 (f() + 40)
 RETURN 1
0 INT_EQUAL f() 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
(f() + 40) INT_ADD f() 40
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be same for comparison" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 521 bool llvm::APInt::ult(const llvm::APInt&) const
bool llvm::APInt::ult(const llvm::APInt&) const COPY bool llvm::APInt::ult(const llvm::APInt&) const
BitWidth == RHS.BitWidth && "Bit widths must be same for comparison" COPY BitWidth == RHS.BitWidth && "Bit widths must be same for comparison"
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) CAST (f() + 40)
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
([(ARG2 + 8)] + (f() * 8)) CAST ([(ARG2 + 8)] + (f() * 8))
(f() * 8) INT_MULT f() 8
(ARG1 + 8) CAST (ARG1 + 8)
f() INT_SEXT f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG2 + 8)] + (f() * 8)) INT_ADD [(ARG2 + 8)] (f() * 8)
[([(ARG2 + 8)] + (f() * 8))] LOAD 433 ([(ARG2 + 8)] + (f() * 8))
(ARG2 + 8) CAST (ARG2 + 8)
 BRANCH VZERO
(f() * 8) INT_MULT f() 8
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
0 COPY 0
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
f() INT_SEXT f()
0 INT_LESS [([(ARG1 + 8)] + (f() * 8))] [([(ARG2 + 8)] + (f() * 8))]
 BRANCH VZERO
0 INT_LESS f() 65
0 COPY 0
(ARG1 & 63) INT_AND ARG1 63
(ARG1 & 63) COPY (ARG1 & 63)
 RETURN 0 (ARG1 & 63)
f() CALL func ARG1
 RETURN 0 (1 << (f() & 63))
(f() & 63) INT_AND f() 63
(1 << (f() & 63)) COPY (1 << (f() & 63))
(1 << (f() & 63)) INT_LEFT 1 (f() & 63)
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
f() CALL func ARG2
0 INT_LESSEQUAL f() ARG2
f() CALL func ARG2
 CBRANCH (f() INT_LESSEQUAL ARG2)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h
bool llvm::APInt::operator[](unsigned int) const COPY bool llvm::APInt::operator[](unsigned int) const
bitPosition < getBitWidth() && "Bit position out of bounds!" COPY bitPosition < getBitWidth() && "Bit position out of bounds!"
 RETURN 0 (-256 & (f(ARG1) & f()))
(-256 & (f(ARG1) & f())) INT_AND (f(ARG1) & f()) -256
(f(ARG1) & f()) INT_AND f(ARG1) f()
 RETURN 1
0 INT_NOTEQUAL (f(ARG1) & f()) 0
 CALL libcall___assert_fail_thunk bitPosition < getBitWidth() && "Bit position out of bounds!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h 962 bool llvm::APInt::operator[](unsigned int) const
 CBRANCH (f() INT_EQUAL 0)
0 INT_ZEXT 0
0 INT_EQUAL f() 0
(-256 & (f(ARG1) & f())) INT_OR (-256 & (f(ARG1) & f())) 0
 BRANCH VZERO
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() INT_ZEXT f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() * 8) INT_MULT f() 8
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) INT_ADD (f() * 8) [(ARG1 + 8)]
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
(ARG1 + 8) CAST (ARG1 + 8)
[ARG1] LOAD 433 ARG1
 CALL func ARG1 ([ARG1] + 4294967295) ([ARG1] + 4294967295)
([ARG1] + 4294967295) INT_ADD [ARG1] 4294967295
 RETURN 0
(ARG1 + 8) PTRADD ARG1 2 4
[ARG1] LOAD 433 ARG1
f(ARG2) CALL func ARG1 ARG2 ARG2
f() CALL func ARG1
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
0 INT_NOTEQUAL [ARG1] [ARG2]
 CBRANCH ([ARG1] INT_NOTEQUAL [ARG2])
0 INT_EQUAL f() 0
 RETURN 1
 RETURN 0 f(ARG2)
 CBRANCH (f() INT_EQUAL 0)
BitWidth == RHS.BitWidth && "Comparison requires equal bit widths" COPY BitWidth == RHS.BitWidth && "Comparison requires equal bit widths"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Comparison requires equal bit widths" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h 977 bool llvm::APInt::operator==(const llvm::APInt&) const
bool llvm::APInt::operator==(const llvm::APInt&) const COPY bool llvm::APInt::operator==(const llvm::APInt&) const
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
0 INT_EQUAL [(ARG1 + 8)] [(ARG2 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG2 + 8)] & -256) INT_OR ([(ARG2 + 8)] & -256) 0
([(ARG2 + 8)] & -256) INT_AND [(ARG2 + 8)] -256
 BRANCH VZERO
(ARG2 + 8) CAST (ARG2 + 8)
0 INT_ZEXT 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
f(ARG2) CALL func ARG1 ARG2 ARG2
f() CALL func ARG1 ARG2 ARG2
0 INT_NOTEQUAL f(ARG2) 1
 CBRANCH (f(ARG2) INT_NOTEQUAL 1)
 CBRANCH (f() INT_NOTEQUAL 1)
 RETURN 0 0
0 COPY 0
1 COPY 1
 RETURN 0 1
0 INT_NOTEQUAL f() 1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 2 4
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 CALL func (RSP + -72) ARG1 ARG1
f() CALL func ARG1
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
 CALL func (RSP + -56) ARG2 ARG2
 CBRANCH ([ARG1] INT_NOTEQUAL [ARG2])
0 INT_NOTEQUAL [ARG1] [ARG2]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
f() CALL func (RSP + -72) (RSP + -56) (RSP + -56)
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
f(RSP) CALL func (RSP + -72) (RSP + -56) (RSP + -56)
0 COPY 0
(RSP + -72) PTRSUB RSP -72
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
 CALL func (RSP + -72)
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -72)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
BitWidth == RHS.BitWidth && "Bit widths must be same for comparison" COPY BitWidth == RHS.BitWidth && "Bit widths must be same for comparison"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
(f() + 40) CAST (f() + 40)
f(RSP) COPY f(RSP)
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 RETURN 1
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be same for comparison" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 553 bool llvm::APInt::slt(const llvm::APInt&) const
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
bool llvm::APInt::slt(const llvm::APInt&) const COPY bool llvm::APInt::slt(const llvm::APInt&) const
0 INT_NOTEQUAL 0 [(f() + 40)]
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(RSP)
 CALL func (RSP + -72)
([ARG1] / 2147483647) SUBPIECE [ARG1] 0
0 INT_NOTEQUAL f() 0
(RSP + -56) PTRSUB RSP -56
(([(ARG1 + 8)] << (63 & (64 - ([ARG1] / 2147483647)))) >> (63 & (64 - ([ARG1] / 2147483647)))) INT_SRIGHT ([(ARG1 + 8)] << (63 & (64 - ([ARG1] / 2147483647)))) (63 & (64 - ([ARG1] / 2147483647)))
(63 & (64 - ([ARG1] / 2147483647))) INT_AND (64 - ([ARG1] / 2147483647)) 63
0 INT_EQUAL f() 0
(([(ARG2 + 8)] << (63 & (64 - ([ARG1] / 2147483647)))) >> (63 & (64 - ([ARG1] / 2147483647)))) INT_SRIGHT ([(ARG2 + 8)] << (63 & (64 - ([ARG1] / 2147483647)))) (63 & (64 - ([ARG1] / 2147483647)))
f() CALL func (RSP + -56)
([ARG1] / 2147483647) SUBPIECE [ARG1] 0
(63 & (64 - ([ARG1] / 2147483647))) INT_AND (64 - ([ARG1] / 2147483647)) 63
([(ARG1 + 8)] << (63 & (64 - ([ARG1] / 2147483647)))) INT_LEFT [(ARG1 + 8)] (63 & (64 - ([ARG1] / 2147483647)))
 CALL func (RSP + -56)
(RSP + -72) PTRSUB RSP -72
0 INT_SLESS (([(ARG1 + 8)] << (63 & (64 - ([ARG1] / 2147483647)))) >> (63 & (64 - ([ARG1] / 2147483647)))) (([(ARG2 + 8)] << (63 & (64 - ([ARG1] / 2147483647)))) >> (63 & (64 - ([ARG1] / 2147483647))))
([ARG1] / 2147483647) SUBPIECE [ARG1] 0
(63 & (64 - ([ARG1] / 2147483647))) INT_AND (64 - ([ARG1] / 2147483647)) 63
 BRANCH VZERO
([(ARG2 + 8)] << (63 & (64 - ([ARG1] / 2147483647)))) INT_LEFT [(ARG2 + 8)] (63 & (64 - ([ARG1] / 2147483647)))
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(63 & (64 - ([ARG1] / 2147483647))) INT_AND (64 - ([ARG1] / 2147483647)) 63
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(64 - ([ARG1] / 2147483647)) INT_SUB 64 ([ARG1] / 2147483647)
(64 - ([ARG1] / 2147483647)) INT_SUB 64 ([ARG1] / 2147483647)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(64 - ([ARG1] / 2147483647)) INT_SUB 64 ([ARG1] / 2147483647)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_OR VZERO 0
VZERO INT_AND VZERO 4294967040
(ARG2 + 8) CAST (ARG2 + 8)
(RSP + -72) PTRSUB RSP -72
0 INT_NOTEQUAL f() 0
([ARG1] / 2147483647) SUBPIECE [ARG1] 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_ZEXT 0
(64 - ([ARG1] / 2147483647)) INT_SUB 64 ([ARG1] / 2147483647)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
 CALL func (RSP + -56)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG2
0 INT_EQUAL f() 0
 RETURN 0
 CBRANCH (f() INT_EQUAL 0)
(f() | [([(ARG1 + 8)] + (f() * 8))]) INT_OR [([(ARG1 + 8)] + (f() * 8))] f()
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
(ARG1 + 8) CAST (ARG1 + 8)
f() INT_ZEXT f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 ([(ARG1 + 8)] + (f() * 8)) (f() | [([(ARG1 + 8)] + (f() * 8))])
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
(f() | [(ARG1 + 8)]) INT_OR f() [(ARG1 + 8)]
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) (f() | [(ARG1 + 8)])
(f() * 8) INT_MULT f() 8
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG2
 RETURN 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
 BRANCH VZERO
(~(f()) & [(ARG1 + 8)]) INT_AND ~(f()) [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
~(f()) INT_NEGATE f()
(f() * 8) INT_MULT f() 8
 STORE 433 (ARG1 + 8) (~(f()) & [(ARG1 + 8)])
(f() * 8) INT_MULT f() 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() INT_ZEXT f()
(~(f()) & [([(ARG1 + 8)] + (f() * 8))]) INT_AND [([(ARG1 + 8)] + (f() * 8))] ~(f())
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
(ARG1 + 8) CAST (ARG1 + 8)
~(f()) INT_NEGATE f()
f() INT_ZEXT f()
 STORE 433 ([(ARG1 + 8)] + (f() * 8)) (~(f()) & [([(ARG1 + 8)] + (f() * 8))])
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func ARG1 ARG2 ARG2
0 INT_LESSEQUAL [ARG1] ARG2
f() CALL func ARG1 ARG2 ARG2
 CALL func ARG1 ARG2 ARG2
[ARG1] LOAD 433 ARG1
 CBRANCH ([ARG1] INT_LESSEQUAL ARG2)
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
bitPosition < BitWidth && "Out of the bit-width range!" COPY bitPosition < BitWidth && "Out of the bit-width range!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 RETURN 1
void llvm::APInt::flipBit(unsigned int) COPY void llvm::APInt::flipBit(unsigned int)
0 INT_EQUAL f() 0
 RETURN 0
 CALL libcall___assert_fail_thunk bitPosition < BitWidth && "Out of the bit-width range!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 610 void llvm::APInt::flipBit(unsigned int)
[ARG1] LOAD 433 ARG1
f(ARG1) CALL func ARG1
 RETURN 0 (([ARG1] - f(ARG1)) + 4294967295)
(([ARG1] - f(ARG1)) + 4294967295) COPY (([ARG1] - f(ARG1)) + 4294967295)
([ARG1] - f(ARG1)) INT_SUB [ARG1] f(ARG1)
(([ARG1] - f(ARG1)) + 4294967295) INT_ADD ([ARG1] - f(ARG1)) 4294967295
ARG1 COPY ARG1
0 INT_NOTEQUAL ARG3 2
0 INT_EQUAL ARG3 10
0 INT_NOTEQUAL ARG3 16
 CALL func (RSP + -72) f() A_Stack[-0x38]:8 A_Stack[-0x30]:8 ARG3
0 INT_EQUAL ARG3 2
0 INT_NOTEQUAL ARG3 8
0 INT_EQUAL ARG3 8
0 INT_EQUAL ARG3 16
0 INT_NOTEQUAL ARG3 10
0 INT_NOTEQUAL ARG3 36
ARG2 COPY ARG2
f() CALL func (RSP + -120)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -120) PTRSUB RSP -120
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 1)
(f() * 16) INT_LEFT f() 4
7 COPY 7
((f() * 16) / 3) INT_DIV (f() * 16) 3
(f() * 16) CAST (f() * 16)
((f() * 16) / 6442450941) SUBPIECE ((f() * 16) / 3) 0
 BRANCH VZERO
 CBRANCH (ARG3 INT_NOTEQUAL 8)
[f()] LOAD 433 f()
0 INT_ZEXT 0
[f()] LOAD 433 f()
(RSP + -120) PTRSUB RSP -120
 CBRANCH ([f()] INT_EQUAL 45)
f() CALL func (RSP + -120)
 CBRANCH (ARG3 INT_NOTEQUAL 16)
0 INT_EQUAL [f()] 45
0 INT_EQUAL [f()] 45
f() CAST f()
f() CALL func (RSP + -120)
(RSP + -120) PTRSUB RSP -120
 CBRANCH (ARG3 INT_EQUAL 16)
f() CALL func (RSP + -72)
((f() / 2147483647) * 4) INT_ADD ((f() / 2147483647) * 4) 0
 CBRANCH (f() INT_NOTEQUAL 4294967295)
0 COPY 0
 CALL func (RSP + -56) f() f() f()
((f() / 2147483647) * 4) INT_MULT (f() / 2147483647) 4
0 INT_NOTEQUAL f() 4294967295
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
 CBRANCH (ARG3 INT_EQUAL 10)
(RSP + -72) PTRSUB RSP -72
(f() + 1) INT_ADD f() 1
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -72)
 CBRANCH (ARG3 INT_NOTEQUAL 36)
 RETURN 1
 CALL libcall___assert_fail_thunk (radix == 10 || radix == 8 || radix == 16 || radix == 2 || radix == 36) && "Radix should be 2, 8, 10, 16, or 36!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 619 0
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
(radix == 10 || radix == 8 || radix == 16 || radix == 2 || radix == 36) && "Radix should be 2, 8, 10, 16, or 36!" COPY (radix == 10 || radix == 8 || radix == 16 || radix == 2 || radix == 36) && "Radix should be 2, 8, 10, 16, or 36!"
 CBRANCH ([f()] INT_EQUAL 43)
 CBRANCH ((f() + -1) INT_EQUAL 0)
0 INT_EQUAL (f() + -1) 0
(f() + -1) INT_ADD f() -1
0 INT_EQUAL [f()] 43
[f()] LOAD 433 f()
(f() + 1) PTRADD f() 1 1
 CBRANCH (ARG3 INT_NOTEQUAL 2)
[(f() + 40)] LOAD 433 (f() + 40)
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
 CBRANCH (ARG3 INT_EQUAL 2)
0 INT_EQUAL 0 [(f() + 40)]
f() COPY f()
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 RETURN 1
slen && "String is only a sign, needs a value." COPY slen && "String is only a sign, needs a value."
 CALL libcall___assert_fail_thunk slen && "String is only a sign, needs a value." /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 629 0
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 CALL libcall___assert_fail_thunk !str.empty() && "Invalid string length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 616 0
0 COPY 0
!str.empty() && "Invalid string length" COPY !str.empty() && "Invalid string length"
 CBRANCH (ARG3 INT_NOTEQUAL 10)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 RETURN 1
 CBRANCH (ARG3 INT_EQUAL 8)
 BRANCH VZERO
((f() / 2147483647) * 3) INT_MULT (f() / 2147483647) 3
((f() / 2147483647) * 3) INT_ADD ((f() / 2147483647) * 3) 0
(f() * 64) CAST (f() * 64)
((f() * 64) / 18) INT_DIV (f() * 64) 18
(f() * 64) INT_LEFT f() 6
 BRANCH VZERO
4 COPY 4
 BRANCH VZERO
((f() * 64) / 38654705646) SUBPIECE ((f() * 64) / 18) 0
f() COPY f()
f() INT_ADD f() 0
(f() / 2147483647) INT_ADD (f() / 2147483647) 0
 BRANCH VZERO
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 (f(ARG1 , ARG4) + (8 - ARG4))
f(ARG1 , ARG4) LOAD 433 ARG1
f(ARG1 , ARG4) LOAD 433 ARG1
0 INT_LESSEQUAL ((8 - ARG4) + [ARG1]) ARG2
(ARG3 + ARG4) INT_ADD ARG3 ARG4
(8 - ARG4) INT_SUB 8 ARG4
((8 - ARG4) + [ARG1]) INT_ADD (8 - ARG4) [ARG1]
0 COPY 0
 CBRANCH (((8 - ARG4) + [ARG1]) INT_LESSEQUAL ARG2)
 RETURN 0 0
[ARG1] CAST [ARG1]
(f(ARG1 , ARG4) + (8 - ARG4)) CAST (f(ARG1 , ARG4) + (8 - ARG4))
 CALL libcall_memcpy_thunk f(ARG1 , ARG4) (ARG3 + ARG4) (8 - ARG4)
f(ARG1 , ARG4) CAST f(ARG1 , ARG4)
(f(ARG1 , ARG4) + (8 - ARG4)) INT_ADD f(ARG1 , ARG4) (8 - ARG4)
(ARG3 + ARG4) CAST (ARG3 + ARG4)
ARG3 COPY ARG3
ARG4 COPY ARG4
f() CALL func (RSP + -64) ARG4 (RSP + -80) 0
ARG5 COPY ARG5
ARG1 COPY ARG1
ARG2 COPY ARG2
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -64) PTRSUB RSP -64
(RSP + -80) PTRSUB RSP -80
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL [ARG2] 0
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
ARG1 COPY ARG1
f(ARG1 , ARG3) COPY f(ARG1 , ARG3)
0 INT_NOTEQUAL 0 [(f() + 40)]
(RSP + -64) PTRSUB RSP -64
(f() + 40) INT_ADD f() 40
f() CALL func (RSP + -64) f(ARG4) (RSP + -80) f(ARG3 , ARG4)
[ARG2] LOAD 433 ARG2
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(RSP + -80) PTRSUB RSP -80
(f() + 40) CAST (f() + 40)
(RSP + -80) PTRSUB RSP -80
 CALL libcall_memcpy_thunk ARG3 (RSP + -80) (ARG4 - ARG3)
[(f() + 40)] LOAD 433 (f() + 40)
ARG3 CAST ARG3
 CBRANCH ([ARG2] INT_EQUAL 0)
f(ARG1) COPY f(ARG1)
(ARG4 - ARG3) INT_SUB ARG4 ARG3
 RETURN 1
 CALL libcall_abort_thunk
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 f(ARG1 , ARG3)
(ARG1 + 88) CAST (ARG1 + 88)
ARG1 CAST ARG1
(ARG1 + 120) INT_ADD ARG1 120
 STORE 433 (ARG1 + 112) A_Stack[-0x68]:8
(ARG1 + 104) INT_ADD ARG1 104
(ARG1 + 120) CAST (ARG1 + 120)
 STORE 433 (ARG1 + 72) A_Stack[-0x90]:8
(RSP + -152) PTRSUB RSP -152
(ARG1 + 80) CAST (ARG1 + 80)
ARG1 CAST ARG1
(ARG1 + 64) INT_ADD ARG1 64
ARG1 CAST ARG1
(f(ARG2) + 64) INT_ADD f(ARG2) 64
 STORE 433 (ARG1 + 104) A_Stack[-0x70]:8
(ARG1 + 96) INT_ADD ARG1 96
(ARG1 + 72) CAST (ARG1 + 72)
[(ARG1 + 120)] LOAD 433 (ARG1 + 120)
 STORE 433 ARG2 (f(ARG2) + 64)
ARG1 CAST ARG1
ARG1 CAST ARG1
 STORE 433 (ARG1 + 64) A_Stack[-0x98]:8
(ARG1 + 112) CAST (ARG1 + 112)
ARG1 CAST ARG1
 STORE 433 (ARG1 + 96) A_Stack[-0x78]:8
(ARG1 + 64) CAST (ARG1 + 64)
(ARG1 + 88) INT_ADD ARG1 88
ARG1 CAST ARG1
 CALL func (RSP + -152) ARG1 [(ARG1 + 120)] ARG1
f(ARG2) LOAD 433 ARG2
(ARG1 + 104) CAST (ARG1 + 104)
(ARG1 + 80) INT_ADD ARG1 80
 BRANCH VZERO
 STORE 433 (ARG1 + 88) A_Stack[-0x80]:8
ARG1 CAST ARG1
 CALL func (ARG1 + 64) ARG1 (ARG1 + 64)
(ARG1 + 112) INT_ADD ARG1 112
(ARG1 + 96) CAST (ARG1 + 96)
ARG1 CAST ARG1
 STORE 433 ARG2 64
(ARG1 + 64) INT_ADD ARG1 64
 STORE 433 (ARG1 + 80) A_Stack[-0x88]:8
(ARG1 + 72) INT_ADD ARG1 72
f(ARG1 , ARG3) CALL func ARG1 (RSP + -24) ARG3 ARG4 f()
 CALL func ARG1 ARG2 f(ARG1 , ARG3) ARG4
f() CALL func ARG5
ARG1 COPY ARG1
ARG2 COPY ARG2
 RETURN 0
(RSP + -24) PTRSUB RSP -24
 CALL func (RSP + -152) 0 (RSP + -152) (RSP + -88) ARG1
40 INT_ADD 0 40
(RSP + -152) PTRSUB RSP -152
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -152)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -152) PTRSUB RSP -152
(RSP + -152) PTRSUB RSP -152
[40] LOAD 433 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -88) PTRSUB RSP -88
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
ARG1 COPY ARG1
f() CALL func ARG1 ARG2 ARG2
ARG2 COPY ARG2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_LESS 65)
f() CALL func
(f() + 40) CAST (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
0 INT_LESS f() 65
 CBRANCH ((f(ARG1) + 64) INT_NOTEQUAL f(ARG1))
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -72) (f(ARG1) + 64) (f(ARG1) + 64)
0 INT_NOTEQUAL (f(ARG1) + 64) f(ARG1)
 BRANCH VZERO
(f(ARG1) + 64) INT_ADD f(ARG1) 64
 CALL func (RSP + -72) f() f()
 CALL func (RSP + -120) f() f()
 CALL func (RSP + -72) ARG1 f() ARG1
(f() & 63) INT_AND f() 63
(RSP + -72) PTRSUB RSP -72
(ARG1 + (f() & -64)) INT_ADD ARG1 (f() & -64)
f() COPY f()
(RSP + -72) PTRSUB RSP -72
 CBRANCH ((f() & 63) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (f() & 63) 0
(RSP + -72) PTRSUB RSP -72
f() CALL func (RSP + -72) f() f()
 BRANCH VZERO
(f() & -64) INT_AND f() -64
(RSP + -120) PTRSUB RSP -120
f() CALL func ARG1 f() f() f()
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
(f(ARG2) + -64) INT_ADD f(ARG2) -64
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -72) (f(ARG2) + -64) (f(ARG2) + -64)
 CALL func ARG1 ARG2 ARG2
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 RETURN 0
 CALL func [(ARG1 + 8)] ([(ARG1 + 8)] + (f() * 8)) ([(ARG1 + 8)] + (f() * 8))
 CALL func (ARG1 + 8)
 BRANCH VZERO
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() * 8) INT_MULT f() 8
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
f() INT_ZEXT f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
ARG1 COPY ARG1
 CALL func ARG1 f() ([(ARG3 + 8)] | [(ARG2 + 8)]) 0
 CALL func ARG1 ARG2 ARG3 ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
f() CALL func ARG2
[ARG3] LOAD 433 ARG3
(ARG3 + 8) PTRADD ARG3 2 4
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([ARG2] INT_NOTEQUAL [ARG3])
0 INT_NOTEQUAL [ARG2] [ARG3]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h
llvm::APInt llvm::APInt::operator|(const llvm::APInt&) const COPY llvm::APInt llvm::APInt::operator|(const llvm::APInt&) const
[(f() + 40)] LOAD 433 (f() + 40)
BitWidth == RHS.BitWidth && "Bit widths must be the same" COPY BitWidth == RHS.BitWidth && "Bit widths must be the same"
 RETURN 1
 CBRANCH (f() INT_EQUAL 0)
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be the same" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h 790 llvm::APInt llvm::APInt::operator|(const llvm::APInt&) const
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
0 INT_EQUAL f() 0
(f() + 40) CAST (f() + 40)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
(ARG3 + 8) CAST (ARG3 + 8)
 BRANCH VZERO
([(ARG3 + 8)] | [(ARG2 + 8)]) INT_OR [(ARG2 + 8)] [(ARG3 + 8)]
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
(ARG2 + (f(ARG3) * 8)) INT_ADD ARG2 (f(ARG3) * 8)
(ARG3 + 4294967295) INT_ADD ARG3 4294967295
(64 - ARG4) INT_SUB 64 ARG4
(ARG4 & 63) INT_AND ARG4 63
((f(ARG3) * 8) + ARG1) INT_ADD (f(ARG3) * 8) ARG1
 RETURN 0
0 COPY 0
0 INT_SLESS 4294967295 f(ARG3)
 CBRANCH (4294967295 INT_SLESS f(ARG3))
(f(ARG3) * 8) INT_MULT f(ARG3) 8
f(ARG3) INT_SEXT f(ARG3)
(f(ARG2 , ARG3 , ARG4) | ([(ARG2 + (f(ARG3) * 8))] >> (ARG4 & 63))) INT_OR ([(ARG2 + (f(ARG3) * 8))] >> (ARG4 & 63)) f(ARG2 , ARG3 , ARG4)
 BRANCH VZERO
(f(ARG3) + 4294967295) INT_ADD f(ARG3) 4294967295
([(ARG2 + (f(ARG3) * 8))] << (63 & (64 - ARG4))) INT_LEFT [(ARG2 + (f(ARG3) * 8))] (63 & (64 - ARG4))
f(ARG3) INT_SEXT f(ARG3)
([(ARG2 + (f(ARG3) * 8))] >> (ARG4 & 63)) INT_RIGHT [(ARG2 + (f(ARG3) * 8))] (ARG4 & 63)
(63 & (64 - ARG4)) INT_AND (64 - ARG4) 63
[(ARG2 + (f(ARG3) * 8))] LOAD 433 (ARG2 + (f(ARG3) * 8))
 STORE 433 ((f(ARG3) * 8) + ARG1) (f(ARG2 , ARG3 , ARG4) | ([(ARG2 + (f(ARG3) * 8))] >> (ARG4 & 63)))
(f(ARG3) * 8) INT_MULT f(ARG3) 8
(ARG2 + (f(ARG3) * 8)) CAST (ARG2 + (f(ARG3) * 8))
((f(ARG3) * 8) + ARG1) CAST ((f(ARG3) * 8) + ARG1)
(ARG3 / 2147483647) SUBPIECE ARG3 0
0 INT_LESS ARG3 [ARG2]
(ARG3 / 64) INT_RIGHT ARG3 6
 CALL func f() [(ARG2 + 8)] f() ARG3
0 INT_EQUAL ARG3 0
(ARG3 & 63) INT_AND ARG3 63
0 INT_LESS ARG3 64
0 INT_LESS ARG3 [ARG2]
 CALL func ARG1 [ARG2] ([(ARG2 + 8)] >> (63 & (ARG3 / 2147483647))) 0
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CALL func ARG1 [ARG2] 0 0
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CALL func ARG1 [ARG2] 0 0
 CALL func ARG1 (RSP + -40) (RSP + -40)
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CBRANCH (f() INT_EQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
0 INT_EQUAL f() 0
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (ARG3 INT_LESS 64)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CALL func (RSP + -40)
 CBRANCH ((ARG3 & 63) INT_EQUAL 0)
0 INT_EQUAL (ARG3 & 63) 0
(RSP + -40) PTRSUB RSP -40
(ARG2 + 8) CAST (ARG2 + 8)
 BRANCH VZERO
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) f() [ARG2] f()
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CBRANCH (ARG3 INT_LESS [ARG2])
 CBRANCH (ARG3 INT_LESS [ARG2])
 CBRANCH (f() INT_LESSEQUAL f(ARG3))
(f(ARG3) * 8) INT_MULT f(ARG3) 8
 BRANCH VZERO
(f(ARG3) + 1) INT_ADD f(ARG3) 1
 STORE 433 ((f(ARG3) * 8) + f()) 0
((f(ARG3) * 8) + f()) CAST ((f(ARG3) * 8) + f())
f(ARG3) INT_ZEXT f(ARG3)
f() CAST f()
0 INT_LESSEQUAL f() f(ARG3)
((f(ARG3) * 8) + f()) INT_ADD f() (f(ARG3) * 8)
 CBRANCH (ARG3 INT_EQUAL 0)
f() INT_ZEXT f()
 BRANCH VZERO
0 INT_LESS f() 1143914305352105985
f() CALL libcall_operator.new[]_thunk f()
 CBRANCH (f() INT_LESS 1143914305352105985)
([(ARG2 + 8)] >> (63 & (ARG3 / 2147483647))) INT_RIGHT [(ARG2 + 8)] (63 & (ARG3 / 2147483647))
(63 & (ARG3 / 2147483647)) INT_AND (ARG3 / 2147483647) 63
 BRANCH VZERO
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 BRANCH VZERO
(((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1)) * 8) INT_MULT ((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1)) 8
(RSP + -40) PTRSUB RSP -40
0 COPY 0
(RSP + -40) PTRSUB RSP -40
(ARG2 + 8) CAST (ARG2 + 8)
(RSP + -40) PTRSUB RSP -40
((((f() - (ARG3 / 64)) + 1) * 8) + f()) CAST ((((f() - (ARG3 / 64)) + 1) * 8) + f())
f() CAST f()
 CBRANCH (f() INT_LESS ((f() - (ARG3 / 64)) + 1))
((f() - (ARG3 / 64)) + 1) INT_ZEXT ((f() - (ARG3 / 64)) + 1)
0 INT_LESS f() ((f() - (ARG3 / 64)) + 1)
(RSP + -40) PTRSUB RSP -40
((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1)) INT_ADD (ARG3 / 64) ((f() - (ARG3 / 64)) + 1)
([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1)) * 8)) INT_ADD [(ARG2 + 8)] (((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1)) * 8)
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) f() [ARG2] f()
(RSP + -40) PTRSUB RSP -40
[([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1)) * 8))] LOAD 433 ([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1)) * 8))
((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1)) INT_ZEXT ((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1))
0 INT_LESSEQUAL f() f(ARG3)
(RSP + -40) PTRSUB RSP -40
 BRANCH VZERO
([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1)) * 8)) CAST ([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1)) * 8))
 CALL func (RSP + -40)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(f() - (ARG3 / 64)) INT_SUB f() (ARG3 / 64)
((((f() - (ARG3 / 64)) + 1) * 8) + f()) INT_ADD (((f() - (ARG3 / 64)) + 1) * 8) f()
(f() - (ARG3 / 64)) INT_SUB f() (ARG3 / 64)
(((f() - (ARG3 / 64)) + 1) * 8) INT_MULT ((f() - (ARG3 / 64)) + 1) 8
(RSP + -40) PTRSUB RSP -40
 CBRANCH (f() INT_LESSEQUAL f(ARG3))
 CALL func (RSP + -40)
(f() - (ARG3 / 64)) INT_SUB f() (ARG3 / 64)
((ARG3 & 63) / 2147483647) SUBPIECE (ARG3 & 63) 0
 CALL func (RSP + -40)
 CBRANCH ((f() - (ARG3 / 64)) INT_LESSEQUAL f())
 STORE 433 ((((f() - (ARG3 / 64)) + 1) * 8) + f()) ([([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1)) * 8))] >> ((ARG3 & 63) / 2147483647))
 CALL func (RSP + -40)
0 INT_LESSEQUAL (f() - (ARG3 / 64)) f()
0 COPY 0
((f() - (ARG3 / 64)) + 1) INT_SUB (f() - (ARG3 / 64)) 1
 CALL func (RSP + -40) f() [ARG2] f()
([([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1)) * 8))] >> ((ARG3 & 63) / 2147483647)) INT_RIGHT [([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1)) * 8))] ((ARG3 & 63) / 2147483647)
 BRANCH VZERO
f() CAST f()
((f(ARG3) * 8) + f()) INT_ADD f() (f(ARG3) * 8)
((f(ARG3) * 8) + f()) CAST ((f(ARG3) * 8) + f())
(f(ARG3) * 8) INT_MULT f(ARG3) 8
(f(ARG3) + 1) INT_ADD f(ARG3) 1
 BRANCH VZERO
f(ARG3) INT_ZEXT f(ARG3)
 STORE 433 ((f(ARG3) * 8) + f()) 0
f() CAST f()
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 STORE 433 ((f() * 8) + f()) [([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))]
([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8)) INT_ADD [(ARG2 + 8)] (((ARG3 / 64) + f()) * 8)
((f() * 8) + f()) CAST ((f() * 8) + f())
([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8)) CAST ([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))
((f() * 8) + f()) INT_ADD (f() * 8) f()
(f() * 8) INT_MULT f() 8
((ARG3 / 64) + f()) INT_ZEXT ((ARG3 / 64) + f())
[([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))] LOAD 433 ([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))
f() INT_ZEXT f()
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(ARG2 + 8) CAST (ARG2 + 8)
(((ARG3 / 64) + f()) * 8) INT_MULT ((ARG3 / 64) + f()) 8
((ARG3 / 64) + f()) INT_ADD (ARG3 / 64) f()
 BRANCH VZERO
(f() * 8) INT_LEFT f() 3
-1 COPY -1
(((ARG3 / 64) + f()) + 1) INT_ADD ((ARG3 / 64) + f()) 1
((ARG3 / 64) + f()) INT_ADD (ARG3 / 64) f()
(f() + 1) INT_ADD f() 1
([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8)) INT_ADD [(ARG2 + 8)] ((((ARG3 / 64) + f()) + 1) * 8)
((((ARG3 / 64) + f()) + 1) * 8) INT_MULT (((ARG3 / 64) + f()) + 1) 8
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
[([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8))] LOAD 433 ([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8))
([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8)) CAST ([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8))
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
((f() * 8) + f()) INT_ADD (f() * 8) f()
(f() * 8) INT_MULT f() 8
f() CAST f()
f() INT_ZEXT f()
((ARG3 / 64) + f()) INT_ZEXT ((ARG3 / 64) + f())
((ARG3 / 64) + f()) INT_ADD (ARG3 / 64) f()
(((ARG3 / 64) + f()) + 1) INT_ZEXT (((ARG3 / 64) + f()) + 1)
(ARG2 + 8) CAST (ARG2 + 8)
([([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))] >> ((ARG3 & 63) / 2147483647)) INT_RIGHT [([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))] ((ARG3 & 63) / 2147483647)
[([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))] LOAD 433 ([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))
([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8)) INT_ADD [(ARG2 + 8)] (((ARG3 / 64) + f()) * 8)
(((ARG3 / 64) + f()) * 8) INT_MULT ((ARG3 / 64) + f()) 8
 STORE 433 ((f() * 8) + f()) f(ARG2 , ARG3)
((f() * 8) + f()) CAST ((f() * 8) + f())
f(ARG2 , ARG3) INT_OR ([([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8))] << (63 & (64 - ((ARG3 & 63) / 2147483647)))) ([([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))] >> ((ARG3 & 63) / 2147483647))
([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8)) CAST ([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))
 BRANCH VZERO
([([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8))] << (63 & (64 - ((ARG3 & 63) / 2147483647)))) INT_LEFT [([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8))] (63 & (64 - ((ARG3 & 63) / 2147483647)))
(64 - ((ARG3 & 63) / 2147483647)) INT_SUB 64 ((ARG3 & 63) / 2147483647)
(63 & (64 - ((ARG3 & 63) / 2147483647))) INT_AND (64 - ((ARG3 & 63) / 2147483647)) 63
(ARG3 % [ARG2]) INT_REM ARG3 [ARG2]
 CALL func ARG1 (RSP + -56) (RSP + -40) (RSP + -56)
 CALL func ARG1 ARG2 ARG2
ARG1 COPY ARG1
 CALL func (RSP + -56) ARG2 (ARG3 % [ARG2]) ARG2
 CALL func (RSP + -40) ARG2 ([ARG2] - (ARG3 % [ARG2])) ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
0 INT_NOTEQUAL 0 [(f() + 40)]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
 CBRANCH ((ARG3 % [ARG2]) INT_EQUAL 0)
0 INT_EQUAL (ARG3 % [ARG2]) 0
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
([ARG2] - (ARG3 % [ARG2])) INT_SUB [ARG2] (ARG3 % [ARG2])
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
ARG2 INT_ZEXT ARG2
 CALL func (RSP + -56) ARG1 ARG2 ARG1
f(RSP) CALL func ARG1 (RSP + -56) (RSP + -56)
f() CALL func ARG1
0 INT_NOTEQUAL (((f() & 4294967295) % ARG2) / 2147483647) 0
 CBRANCH ((((f() & 4294967295) % ARG2) / 2147483647) INT_NOTEQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() & 4294967295) INT_AND f() 4294967295
((f() & 4294967295) % ARG2) INT_REM (f() & 4294967295) ARG2
(((f() & 4294967295) % ARG2) / 2147483647) SUBPIECE ((f() & 4294967295) % ARG2) 0
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(RSP)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -56) PTRSUB RSP -56
40 CAST 40
bool llvm::APInt::isSplat(unsigned int) const COPY bool llvm::APInt::isSplat(unsigned int) const
[40] LOAD 433 40
getBitWidth() % SplatSizeInBits == 0 && "SplatSizeInBits must divide width!" COPY getBitWidth() % SplatSizeInBits == 0 && "SplatSizeInBits must divide width!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
(RSP + -56) PTRSUB RSP -56
 RETURN 1
 CALL libcall___assert_fail_thunk getBitWidth() % SplatSizeInBits == 0 && "SplatSizeInBits must divide width!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 677 bool llvm::APInt::isSplat(unsigned int) const
f(RSP) COPY f(RSP)
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func ARG1 ARG2 ([ARG2] - ARG3) ARG2
ARG1 COPY ARG1
[ARG2] LOAD 433 ARG2
([ARG2] - ARG3) INT_SUB [ARG2] ARG3
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
40 INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[40] LOAD 433 40
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func ARG1 (RSP + -56) ([ARG2] - ARG3) (RSP + -56)
ARG1 COPY ARG1
 CALL func (RSP + -56) ARG2 ([ARG2] - ARG3) ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
([ARG2] - ARG3) INT_SUB [ARG2] ARG3
([ARG2] - ARG3) INT_SUB [ARG2] ARG3
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(RSP + -56) PTRSUB RSP -56
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) INT_ADD 0 40
40 INT_ADD 0 40
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func ~(ARG1) ARG2 ~(ARG1)
~(ARG1) INT_NEGATE ARG1
 RETURN 0
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 RETURN 0 f()
 CBRANCH (f() INT_EQUAL f(ARG1))
 CBRANCH (4294967295 INT_SLESS f())
(f() + 4294967294) INT_ADD f() 4294967294
0 INT_SLESS 4294967295 f()
 CBRANCH ([([(ARG1 + 8)] + (f() * 8))] INT_NOTEQUAL -1)
(f() * 8) INT_MULT f() 8
(f() + f()) INT_ADD f() f()
 BRANCH VZERO
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
(ARG1 + 8) CAST (ARG1 + 8)
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
(f() + 64) INT_ADD f() 64
 BRANCH VZERO
(f() + 4294967295) INT_ADD f() 4294967295
f() INT_SEXT f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
f() CALL func [([(ARG1 + 8)] + (f() * 8))] 2
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() * 8) INT_MULT f() 8
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
f() INT_SEXT f()
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
0 INT_NOTEQUAL [([(ARG1 + 8)] + (f() * 8))] -1
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
[([(ARG1 + 8)] + ((f() + 4294967295) * 8))] LOAD 433 ([(ARG1 + 8)] + ((f() + 4294967295) * 8))
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() + 4294967295) INT_ADD f() 4294967295
 BRANCH VZERO
0 INT_EQUAL f() f(ARG1)
(64 - [ARG1]) INT_SUB 64 [ARG1]
((f() + 4294967295) * 8) INT_MULT (f() + 4294967295) 8
([([(ARG1 + 8)] + ((f() + 4294967295) * 8))] << (63 & (f(ARG1) / 2147483647))) INT_LEFT [([(ARG1 + 8)] + ((f() + 4294967295) * 8))] (63 & (f(ARG1) / 2147483647))
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (([ARG1] & 63) INT_EQUAL 0)
(63 & (f(ARG1) / 2147483647)) INT_AND (f(ARG1) / 2147483647) 63
f() CALL func ([(ARG1 + 8)] << (63 & ((64 - [ARG1]) / 2147483647))) 2 ([(ARG1 + 8)] << (63 & ((64 - [ARG1]) / 2147483647))) (64 - [ARG1])
0 INT_EQUAL ([ARG1] & 63) 0
([(ARG1 + 8)] + ((f() + 4294967295) * 8)) CAST ([(ARG1 + 8)] + ((f() + 4294967295) * 8))
([ARG1] & 63) INT_AND [ARG1] 63
(f() + 4294967295) INT_SEXT (f() + 4294967295)
((64 - [ARG1]) / 2147483647) SUBPIECE (64 - [ARG1]) 0
(ARG1 + 8) CAST (ARG1 + 8)
f() CALL func ([([(ARG1 + 8)] + ((f() + 4294967295) * 8))] << (63 & (f(ARG1) / 2147483647))) 2 ([([(ARG1 + 8)] + ((f() + 4294967295) * 8))] << (63 & (f(ARG1) / 2147483647))) f(ARG1)
f() INT_ZEXT f()
([(ARG1 + 8)] + ((f() + 4294967295) * 8)) INT_ADD [(ARG1 + 8)] ((f() + 4294967295) * 8)
([(ARG1 + 8)] << (63 & ((64 - [ARG1]) / 2147483647))) INT_LEFT [(ARG1 + 8)] (63 & ((64 - [ARG1]) / 2147483647))
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(63 & ((64 - [ARG1]) / 2147483647)) INT_AND ((64 - [ARG1]) / 2147483647) 63
 BRANCH VZERO
64 COPY 64
(64 - ([ARG1] & 63)) INT_SUB 64 ([ARG1] & 63)
0 COPY 0
0 INT_EQUAL ARG2 0
0 INT_NOTEQUAL ARG1 0
 CBRANCH (ARG2 INT_EQUAL 0)
 RETURN 0 f()
0 INT_EQUAL (f(ARG1) & 1) 0
(f(ARG1) & 1) INT_AND f(ARG1) 1
(f() + 1) INT_ADD f() 1
 CBRANCH ((f(ARG1) & 1) INT_EQUAL 0)
0 COPY 0
 BRANCH 4294967290
 CBRANCH (ARG1 INT_NOTEQUAL 0)
f() INT_SEXT f()
(f(ARG1) / 2) INT_RIGHT f(ARG1) 1
(-9223372036854775808 | (f(ARG1) / 2)) INT_OR (f(ARG1) / 2) -9223372036854775808
 BRANCH VZERO
64 COPY 64
 CALL func ARG1 ARG2 ARG2
 RETURN 0
f(ARG1 , RSP) CALL func (RSP + -40) ARG1 ARG1
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
f(ARG1 , RSP) CALL func (RSP + -40) ARG1
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
f(ARG1 , RSP) COPY f(ARG1 , RSP)
0 INT_EQUAL f() 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(ARG1 , RSP)
 CBRANCH (f() INT_LESS f())
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
 CBRANCH ([([(ARG1 + 8)] + (f() * 8))] INT_EQUAL 0)
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
0 COPY 0
0 INT_EQUAL [([(ARG1 + 8)] + (f() * 8))] 0
(f() * 8) INT_MULT f() 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
f() INT_ZEXT f()
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
1 COPY 1
 CBRANCH ~(f())
0 INT_LESS f() f()
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(f() + 64) INT_ADD f() 64
~(f()) BOOL_NEGATE f()
 CBRANCH (f() INT_LESS f())
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
(f() * 8) INT_MULT f() 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
f() INT_ZEXT f()
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
f() CALL func [([(ARG1 + 8)] + (f() * 8))] 2
(f() + f()) INT_ADD f() f()
f(ARG1 , RSP) CAST f(ARG1 , RSP)
0 COPY 0
(RSP + -40) PTRSUB RSP -40
0 COPY 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
(RSP + -40) PTRSUB RSP -40
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
0 INT_LESS f() f()
f() CALL func [(ARG1 + 8)] 2
(ARG1 + 8) CAST (ARG1 + 8)
f(ARG1 , RSP) CAST f(ARG1 , RSP)
 CALL func ~(ARG1) ARG2 ~(ARG1)
~(ARG1) INT_NEGATE ARG1
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
f(ARG1 , RSP) CALL func (RSP + -24) ARG1 ARG1
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
f() CALL func ARG1
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
 CBRANCH ~(f())
(RSP + -24) PTRSUB RSP -24
0 INT_LESS f() f()
(FS_OFFSET + 40) INT_ADD 0 40
~(f()) BOOL_NEGATE f()
0 COPY 0
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_LESS f() f()
 CBRANCH (f() INT_LESS f())
[f(ARG1 , RSP)] COPY [f(ARG1 , RSP)]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f(ARG1 , RSP) CAST f(ARG1 , RSP)
0 COPY 0
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
 CBRANCH (f() INT_LESS f())
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(f() + 64) INT_ADD f() 64
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
(ARG1 + 8) CAST (ARG1 + 8)
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
f() CALL func [([(ARG1 + 8)] + (f() * 8))] 2
(f() + f()) INT_ADD f() f()
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
 CBRANCH ([([(ARG1 + 8)] + (f() * 8))] INT_EQUAL -1)
 BRANCH VZERO
0 COPY 0
1 COPY 1
0 INT_EQUAL [([(ARG1 + 8)] + (f() * 8))] -1
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
 RETURN 1
 RETURN 0 [f(ARG1 , RSP)]
 CALL libcall___stack_chk_fail_thunk
 CALL libcall___popcountdi2_thunk ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 f()
0 COPY 0
f() COPY f()
0 INT_LESSEQUAL f() f()
0 COPY 0
 CBRANCH (f() INT_LESSEQUAL f())
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
f() CALL func [([(ARG1 + 8)] + (f() * 8))]
(ARG1 + 8) CAST (ARG1 + 8)
(f() * 8) INT_MULT f() 8
(f() + f()) INT_ADD f() f()
f() INT_ZEXT f()
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
(ARG1 * 256) INT_LEFT ARG1 8
ARG1 INT_ZEXT ARG1
(ARG1 / 256) INT_RIGHT ARG1 8
((ARG1 / 549755813632) | (ARG1 * 256)) INT_OR (ARG1 * 256) (ARG1 / 549755813632)
((ARG1 / 549755813632) | (ARG1 * 256)) COPY ((ARG1 / 549755813632) | (ARG1 * 256))
 RETURN 0 ((ARG1 / 549755813632) | (ARG1 * 256))
(ARG1 / 549755813632) SUBPIECE (ARG1 / 256) 0
 CALL func ARG1
 RETURN 0
(ARG1 & 71776119061217280) INT_AND ARG1 71776119061217280
(ARG1 & 280375465082880) INT_AND ARG1 280375465082880
(ARG1 / 2147483647) INT_RIGHT ARG1 56
(ARG1 & 16711680) INT_AND ARG1 16711680
(ARG1 & 65280) INT_AND ARG1 65280
(ARG1 & 4278190080) INT_AND ARG1 4278190080
(ARG1 * 2147483647) INT_LEFT ARG1 56
(ARG1 & 1095216660480) INT_AND ARG1 1095216660480
((ARG1 / 2147483647) | ((ARG1 & 71776119061217280) / 2147483647)) INT_OR (ARG1 / 2147483647) ((ARG1 & 71776119061217280) / 2147483647)
f(ARG1) INT_OR f(ARG1) (ARG1 * 2147483647)
((ARG1 & 65280) * 2147483647) INT_LEFT (ARG1 & 65280) 40
f(ARG1) INT_OR f(ARG1) ((ARG1 & 65280) * 2147483647)
 RETURN 0 f(ARG1)
((ARG1 & 4278190080) * 256) INT_LEFT (ARG1 & 4278190080) 8
f(ARG1) INT_OR f(ARG1) ((ARG1 & 4278190080) * 256)
((ARG1 & 16711680) * 16777216) INT_LEFT (ARG1 & 16711680) 24
f(ARG1) INT_OR f(ARG1) ((ARG1 & 16711680) * 16777216)
f(ARG1) INT_OR f(ARG1) ((ARG1 & 1095216660480) / 256)
((ARG1 & 1095216660480) / 256) INT_RIGHT (ARG1 & 1095216660480) 8
((ARG1 & 71776119061217280) / 2147483647) INT_RIGHT (ARG1 & 71776119061217280) 40
((ARG1 & 280375465082880) / 16777216) INT_RIGHT (ARG1 & 280375465082880) 24
f(ARG1) INT_OR ((ARG1 / 2147483647) | ((ARG1 & 71776119061217280) / 2147483647)) ((ARG1 & 280375465082880) / 16777216)
 CALL func ARG1
 RETURN 0
(ARG1 & 16711680) INT_AND ARG1 16711680
(ARG1 / 16777216) INT_RIGHT ARG1 24
(ARG1 * 16777216) INT_LEFT ARG1 24
(ARG1 & 65280) INT_AND ARG1 65280
 RETURN 0 ((ARG1 * 16777216) | (((ARG1 / 16777216) | ((ARG1 & 16711680) / 256)) | ((ARG1 & 65280) * 256)))
((ARG1 * 16777216) | (((ARG1 / 16777216) | ((ARG1 & 16711680) / 256)) | ((ARG1 & 65280) * 256))) INT_OR (((ARG1 / 16777216) | ((ARG1 & 16711680) / 256)) | ((ARG1 & 65280) * 256)) (ARG1 * 16777216)
((ARG1 & 16711680) / 256) INT_RIGHT (ARG1 & 16711680) 8
((ARG1 * 16777216) | (((ARG1 / 16777216) | ((ARG1 & 16711680) / 256)) | ((ARG1 & 65280) * 256))) COPY ((ARG1 * 16777216) | (((ARG1 / 16777216) | ((ARG1 & 16711680) / 256)) | ((ARG1 & 65280) * 256)))
((ARG1 / 16777216) | ((ARG1 & 16711680) / 256)) INT_OR (ARG1 / 16777216) ((ARG1 & 16711680) / 256)
((ARG1 & 65280) * 256) INT_LEFT (ARG1 & 65280) 8
(((ARG1 / 16777216) | ((ARG1 & 16711680) / 256)) | ((ARG1 & 65280) * 256)) INT_OR ((ARG1 / 16777216) | ((ARG1 & 16711680) / 256)) ((ARG1 & 65280) * 256)
 CALL func ARG1
 RETURN 0
 CALL func ARG1 [ARG2] (f() # f()) 0
ARG1 COPY ARG1
 CALL func ARG1 [ARG2] f() 0
 CALL func ARG1 [ARG2] f() 0
 CALL func ARG1 [ARG2] f() 0
 CALL func ARG1 (RSP + -56) (RSP + -56)
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([ARG2] INT_LESS 16)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_LESS [ARG2] 16
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 CBRANCH (f() INT_NOTEQUAL [ARG2])
(f() - [ARG2]) INT_SUB f() [ARG2]
 CALL func f() f() f() (f() - [ARG2])
 CBRANCH (([ARG2] & 15) INT_NOTEQUAL 0)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
[(f() + 40)] LOAD 433 (f() + 40)
llvm::APInt llvm::APInt::byteSwap() const COPY llvm::APInt llvm::APInt::byteSwap() const
BitWidth >= 16 && BitWidth % 16 == 0 && "Cannot byteswap!" COPY BitWidth >= 16 && BitWidth % 16 == 0 && "Cannot byteswap!"
 CALL libcall___assert_fail_thunk BitWidth >= 16 && BitWidth % 16 == 0 && "Cannot byteswap!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 791 llvm::APInt llvm::APInt::byteSwap() const
0 INT_EQUAL [ARG2] 16
 CBRANCH ([ARG2] INT_EQUAL 16)
 CBRANCH ([ARG2] INT_EQUAL 64)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) (f() * 64) 0 0
 BRANCH VZERO
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
0 COPY 0
(ARG2 + 8) CAST (ARG2 + 8)
 CBRANCH (f() INT_NOTEQUAL f())
0 INT_NOTEQUAL f() f()
0 INT_NOTEQUAL f() [ARG2]
(RSP + -56) PTRSUB RSP -56
(f() * 64) INT_LEFT f() 6
f() CALL func [(ARG2 + 8)]
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
0 INT_NOTEQUAL ([ARG2] & 15) 0
([ARG2] & 15) INT_AND [ARG2] 15
 CBRANCH ([ARG2] INT_EQUAL 48)
f() CALL func ([(ARG2 + 8)] & 65535)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
([(ARG2 + 8)] & 65535) INT_AND [(ARG2 + 8)] 65535
([(ARG2 + 8)] / 140737488289792) SUBPIECE ([(ARG2 + 8)] / 65536) 0
(f() # f()) INT_ZEXT (f() # f())
0 INT_EQUAL [ARG2] 64
 BRANCH VZERO
f() CALL func ([(ARG2 + 8)] / 140737488289792)
[(ARG2 + 8)] CAST [(ARG2 + 8)]
(f() # f()) PIECE f() f()
(ARG2 + 8) CAST (ARG2 + 8)
([(ARG2 + 8)] / 65536) INT_RIGHT [(ARG2 + 8)] 16
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
 CBRANCH ([ARG2] INT_EQUAL 32)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
f() CALL func ([(ARG2 + 8)] & 4294967295)
 BRANCH VZERO
0 INT_EQUAL [ARG2] 48
([(ARG2 + 8)] & 4294967295) INT_AND [(ARG2 + 8)] 4294967295
[([(ARG2 + 8)] + (((f() - f()) + -1) * 8))] LOAD 433 ([(ARG2 + 8)] + (((f() - f()) + -1) * 8))
((f() * 8) + f()) INT_ADD f() (f() * 8)
(f() - f()) INT_SUB f() f()
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
((f() - f()) + -1) INT_ZEXT ((f() - f()) + -1)
(ARG2 + 8) CAST (ARG2 + 8)
 STORE 433 ((f() * 8) + f()) f()
f() CALL func [([(ARG2 + 8)] + (((f() - f()) + -1) * 8))]
((f() * 8) + f()) CAST ((f() * 8) + f())
(((f() - f()) + -1) * 8) INT_MULT ((f() - f()) + -1) 8
((f() - f()) + -1) INT_SUB (f() - f()) -1
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
([(ARG2 + 8)] + (((f() - f()) + -1) * 8)) CAST ([(ARG2 + 8)] + (((f() - f()) + -1) * 8))
([(ARG2 + 8)] + (((f() - f()) + -1) * 8)) INT_ADD (((f() - f()) + -1) * 8) [(ARG2 + 8)]
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
 BRANCH VZERO
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
([(ARG2 + 8)] & 65535) INT_AND [(ARG2 + 8)] 65535
f() CALL func ([(ARG2 + 8)] & 65535)
0 INT_EQUAL [ARG2] 32
(ARG2 + 8) CAST (ARG2 + 8)
f() CALL func ARG1
 CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
 STORE 433 ARG1 [ARG2]
 CALL func ARG1 ARG2 ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH f()
 RETURN 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
0 INT_NOTEQUAL f() 0
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 STORE 433 (ARG1 + 8) [(ARG2 + 8)]
(ARG2 + 8) CAST (ARG2 + 8)
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 COPY 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL f())
([(ARG1 + 8)] & -256) INT_OR ([(ARG1 + 8)] & -256) 0
 BRANCH VZERO
([(ARG1 + 8)] & -256) INT_AND [(ARG1 + 8)] -256
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_EQUAL [(ARG1 + 8)] 0
 RETURN 0 f(ARG1)
 RETURN 0 0
0 INT_ZEXT 0
0 INT_NOTEQUAL f() f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
f() INT_ZEXT f()
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
0 INT_NOTEQUAL [([(ARG1 + 8)] + (f() * 8))] 0
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH ([([(ARG1 + 8)] + (f() * 8))] INT_NOTEQUAL 0)
1 COPY 1
(f() * 8) INT_MULT f() 8
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() CALL libcall_compare_thunk ARG1
(f() & -256) INT_AND f() -256
(f() / 2147483647) SUBPIECE f() 0
0 INT_ZEXT 0
0 INT_EQUAL (f() / 2147483647) 0
 RETURN 0 (f() & -256)
(f() & -256) INT_OR (f() & -256) 0
f() CALL func f() ARG1 ARG1
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
f() CALL func 6887312
(FS_OFFSET + 40) INT_ADD 0 40
6887312 PTRSUB 0 6887312
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
f() CALL func f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
f() CALL func (RSP + -48)
(RSP + -48) PTRSUB RSP -48
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 RETURN 1
(RSP + -40) PTRSUB RSP -40
f() CALL func (RSP + -48) (RSP + -40) (RSP + -40)
f() CALL func f()
0 INT_EQUAL f() 0
 BRANCH VZERO
f() CALL func 6887312
(RSP + -48) PTRSUB RSP -48
6887312 PTRSUB 0 6887312
f() CALL func f()
1 COPY 1
 CALL func (RSP + -48)
 BRANCH VZERO
(RSP + -48) PTRSUB RSP -48
 BRANCH VZERO
1 COPY 1
(ARG1 >> f()) INT_RIGHT ARG1 f()
0 INT_NOTEQUAL ARG1 0
0 INT_NOTEQUAL ARG1 0
0 INT_EQUAL ARG2 0
 RETURN 0 f()
 CBRANCH (ARG2 INT_EQUAL 0)
 CBRANCH (ARG1 INT_NOTEQUAL 0)
 CBRANCH (ARG1 INT_NOTEQUAL 0)
31 COPY 31
(f() + 1) INT_SUB f() 1
0 CAST 0
 BRANCH VZERO
32 COPY 32
0 INT_EQUAL (ARG1 >> f()) 0
 BRANCH 4294967291
0 INT_XOR f() 31
 CBRANCH ((ARG1 >> f()) INT_EQUAL 0)
0 INT_SEXT 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
((f(ARG6) * 4) + ARG4) INT_ADD (f(ARG6) * 4) ARG4
(ARG4 + (f(ARG6) * 4)) INT_ADD ARG4 (f(ARG6) * 4)
((f(ARG6) * 4) + ARG4) INT_ADD (f(ARG6) * 4) ARG4
0 INT_NOTEQUAL ARG4 0
(ARG6 + ARG5) INT_ADD ARG6 ARG5
(ARG6 + ARG5) INT_ADD ARG6 ARG5
ARG5 COPY ARG5
(ARG6 + ARG5) INT_ADD ARG6 ARG5
(ARG6 + ARG5) INT_ADD ARG6 ARG5
ARG5 COPY ARG5
(ARG6 + ARG5) INT_ADD ARG6 ARG5
f() CALL func f() ARG5 f()
(ARG6 + ARG5) INT_ADD ARG6 ARG5
(ARG6 + f(ARG5)) INT_ADD ARG6 f(ARG5)
(ARG6 + f(ARG5)) INT_ADD ARG6 f(ARG5)
(ARG6 + f(ARG5)) INT_ADD ARG6 f(ARG5)
(ARG6 + f(ARG5)) INT_ADD ARG6 f(ARG5)
0 INT_LESS 1 ARG6
(ARG6 + f(ARG5)) INT_ADD ARG6 f(ARG5)
(ARG6 + -1) INT_SUB ARG6 -1
(ARG6 + -1) INT_SUB ARG6 -1
(ARG6 + -1) INT_SUB ARG6 -1
0 INT_LESS f() ARG6
ARG6 COPY ARG6
(ARG6 + f(ARG5)) INT_ADD ARG6 f(ARG5)
(ARG6 + f(ARG5)) INT_ADD ARG6 f(ARG5)
(ARG6 + f(ARG5)) INT_ADD ARG6 f(ARG5)
f() CALL func f() ARG6 f()
(ARG6 + 2) INT_SUB ARG6 2
(ARG6 + -1) INT_SUB ARG6 -1
(ARG6 + -1) INT_SUB ARG6 -1
(ARG6 + f(ARG5)) INT_ADD ARG6 f(ARG5)
ARG6 COPY ARG6
0 INT_LESS f() ARG6
0 INT_LESS f() ARG6
(ARG6 + 1) INT_SUB ARG6 1
(ARG6 + 2) INT_SUB ARG6 2
(ARG1 + ((f(ARG5) + f()) * 4)) INT_ADD ARG1 ((f(ARG5) + f()) * 4)
(ARG1 + (f() * 4)) INT_ADD ARG1 (f() * 4)
(ARG1 + ((f(ARG5) + f()) * 4)) INT_ADD ARG1 ((f(ARG5) + f()) * 4)
(ARG1 + (f() * 4)) INT_ADD (f() * 4) ARG1
(ARG1 + (f(ARG5 , ARG6) * 4)) INT_ADD ARG1 (f(ARG5 , ARG6) * 4)
(ARG1 + (f(ARG6) * 4)) INT_ADD ARG1 (f(ARG6) * 4)
(((ARG6 + ARG5) * 4) + ARG1) INT_ADD ((ARG6 + ARG5) * 4) ARG1
(ARG1 + ((f(ARG5) + f()) * 4)) INT_ADD ARG1 ((f(ARG5) + f()) * 4)
(ARG1 + (((ARG6 + f(ARG5)) + -1) * 4)) INT_ADD ARG1 (((ARG6 + f(ARG5)) + -1) * 4)
(ARG1 + ((ARG6 + f(ARG5)) * 4)) INT_ADD ARG1 ((ARG6 + f(ARG5)) * 4)
(ARG1 + ((ARG6 + f(ARG5)) * 4)) INT_ADD ARG1 ((ARG6 + f(ARG5)) * 4)
(ARG1 + ((ARG6 + f(ARG5)) * 4)) INT_ADD ARG1 ((ARG6 + f(ARG5)) * 4)
(ARG1 + (f() * 4)) INT_ADD ARG1 (f() * 4)
(ARG1 + ((ARG6 + f(ARG5)) * 4)) INT_ADD ARG1 ((ARG6 + f(ARG5)) * 4)
0 INT_NOTEQUAL ARG1 ARG2
(ARG1 + (f(ARG6) * 4)) INT_ADD ARG1 (f(ARG6) * 4)
(ARG1 + (((ARG6 + f(ARG5)) + 2) * 4)) INT_ADD ARG1 (((ARG6 + f(ARG5)) + 2) * 4)
(ARG1 + ((f(ARG5) + f()) * 4)) INT_ADD ARG1 ((f(ARG5) + f()) * 4)
(ARG1 + (f(ARG6) * 4)) INT_ADD ARG1 (f(ARG6) * 4)
0 INT_EQUAL ARG1 0
(ARG1 + ((f(ARG5) + f()) * 4)) INT_ADD ARG1 ((f(ARG5) + f()) * 4)
(ARG1 + ((f(ARG5) + f()) * 4)) INT_ADD ARG1 ((f(ARG5) + f()) * 4)
(ARG1 + ((f(ARG5) + f()) * 4)) INT_ADD ARG1 ((f(ARG5) + f()) * 4)
(ARG1 + ((ARG6 + f(ARG5)) * 4)) INT_ADD ARG1 ((ARG6 + f(ARG5)) * 4)
(ARG1 + ((ARG6 + f(ARG5)) * 4)) INT_ADD ARG1 ((ARG6 + f(ARG5)) * 4)
(ARG1 + ((f(ARG5) + f()) * 4)) INT_ADD ARG1 ((f(ARG5) + f()) * 4)
0 INT_NOTEQUAL ARG1 ARG3
(ARG1 + (((ARG6 + f(ARG5)) + 2) * 4)) INT_ADD ARG1 (((ARG6 + f(ARG5)) + 2) * 4)
(ARG2 + (f() * 4)) INT_ADD ARG2 (f() * 4)
(ARG2 + (f() * 4)) INT_ADD ARG2 (f() * 4)
(ARG2 + ((ARG6 + 2) * 4)) INT_ADD ARG2 ((ARG6 + 2) * 4)
(ARG2 + ((ARG6 + -1) * 4)) INT_ADD ARG2 ((ARG6 + -1) * 4)
(ARG2 + ((ARG6 + -1) * 4)) INT_ADD ARG2 ((ARG6 + -1) * 4)
(ARG2 + (f() * 4)) INT_ADD (f() * 4) ARG2
(ARG2 + (f() * 4)) INT_ADD (f() * 4) ARG2
(ARG2 + ((ARG6 + -1) * 4)) INT_ADD ARG2 ((ARG6 + -1) * 4)
(ARG2 + ((ARG6 + -1) * 4)) INT_ADD ARG2 ((ARG6 + -1) * 4)
0 INT_EQUAL ARG2 0
(ARG2 + (f() * 4)) INT_ADD ARG2 (f() * 4)
(ARG2 + ((f(ARG6) * 4) + -4)) INT_ADD ARG2 ((f(ARG6) * 4) + -4)
(ARG2 + (f() * 4)) INT_ADD ARG2 (f() * 4)
(ARG2 + ((ARG6 + 2) * 4)) INT_ADD ARG2 ((ARG6 + 2) * 4)
0 INT_NOTEQUAL ARG2 ARG3
(ARG3 + (f(ARG5) * 4)) INT_ADD ARG3 (f(ARG5) * 4)
(ARG3 + (f(ARG5) * 4)) INT_ADD ARG3 (f(ARG5) * 4)
(ARG3 + (f(ARG5) * 4)) INT_ADD ARG3 (f(ARG5) * 4)
0 INT_EQUAL ARG3 0
 CBRANCH (ARG1 INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
f() CALL func apint
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
apint COPY apint
 CBRANCH f(ARG1 , ARG2 , ARG5 , ARG6)
f(ARG1 , ARG2 , ARG5 , ARG6) INT_LEFT f(ARG1 , ARG2 , ARG5 , ARG6) 32
(ARG2 + ((ARG6 + 2) * 4)) CAST (ARG2 + ((ARG6 + 2) * 4))
f(ARG1 , ARG2 , ARG5 , ARG6) INT_SUB f(ARG1 , ARG2 , ARG5 , ARG6) f(ARG1 , ARG2 , ARG5 , ARG6)
0 INT_LESSEQUAL f(ARG1 , ARG2 , ARG5 , ARG6) f(ARG1 , ARG2 , ARG5 , ARG6)
0 INT_NOTEQUAL f(ARG1 , ARG2 , ARG5 , ARG6) 0
((ARG6 + 2) * 4) INT_MULT (ARG6 + 2) 4
((ARG6 + f(ARG5)) + 2) INT_SUB (ARG6 + f(ARG5)) 2
[(ARG2 + ((ARG6 + 2) * 4))] LOAD 433 (ARG2 + ((ARG6 + 2) * 4))
 CBRANCH (0 BOOL_AND 0)
[(ARG2 + ((ARG6 + 2) * 4))] INT_ZEXT [(ARG2 + ((ARG6 + 2) * 4))]
f(ARG1 , ARG2 , ARG5 , ARG6) INT_ADD f(ARG1 , ARG2 , ARG5 , ARG6) [(ARG2 + ((ARG6 + -1) * 4))]
((ARG6 + f(ARG5)) + 2) INT_ZEXT ((ARG6 + f(ARG5)) + 2)
(ARG1 + (((ARG6 + f(ARG5)) + 2) * 4)) CAST (ARG1 + (((ARG6 + f(ARG5)) + 2) * 4))
f(ARG1 , ARG2 , ARG5 , ARG6) INT_ADD [(ARG1 + (((ARG6 + f(ARG5)) + 2) * 4))] f(ARG1 , ARG2 , ARG5 , ARG6)
f(ARG1 , ARG2 , ARG5 , ARG6) COPY f(ARG1 , ARG2 , ARG5 , ARG6)
f(ARG1 , ARG2 , ARG5 , ARG6) INT_MULT [(ARG2 + ((ARG6 + 2) * 4))] f(ARG1 , ARG2 , ARG5 , ARG6)
[(ARG2 + ((ARG6 + -1) * 4))] INT_ZEXT [(ARG2 + ((ARG6 + -1) * 4))]
(ARG2 + ((ARG6 + -1) * 4)) CAST (ARG2 + ((ARG6 + -1) * 4))
(ARG6 + 2) INT_ZEXT (ARG6 + 2)
0 BOOL_AND 0 0
(((ARG6 + f(ARG5)) + 2) * 4) INT_MULT ((ARG6 + f(ARG5)) + 2) 4
f(ARG1 , ARG2 , ARG5 , ARG6) INT_SUB f(ARG1 , ARG2 , ARG5 , ARG6) -1
[(ARG1 + (((ARG6 + f(ARG5)) + 2) * 4))] LOAD 433 (ARG1 + (((ARG6 + f(ARG5)) + 2) * 4))
[(ARG2 + ((ARG6 + -1) * 4))] LOAD 433 (ARG2 + ((ARG6 + -1) * 4))
0 INT_LESS f(ARG1 , ARG2 , ARG5 , ARG6) 4294967296
((ARG6 + -1) * 4) INT_MULT (ARG6 + -1) 4
(ARG6 + -1) INT_ZEXT (ARG6 + -1)
 CBRANCH f(ARG1 , ARG2 , ARG5 , ARG6)
[(ARG1 + (((ARG6 + f(ARG5)) + 2) * 4))] INT_ZEXT [(ARG1 + (((ARG6 + f(ARG5)) + 2) * 4))]
 CBRANCH (4294967295 INT_SLESS f(ARG5 , ARG6))
 BRANCH VZERO
(f(ARG5 , ARG6) + 4294967295) INT_ADD f(ARG5 , ARG6) 4294967295
0 INT_SLESS 4294967295 f(ARG5 , ARG6)
 CALL func f()
f() CALL func f()
f() CALL func
 CBRANCH (4294967295 INT_SLESS f(ARG5 , ARG6))
(ARG1 + (f(ARG5 , ARG6) * 4)) CAST (ARG1 + (f(ARG5 , ARG6) * 4))
0 INT_SLESS 4294967295 f(ARG5 , ARG6)
f(ARG5 , ARG6) INT_SEXT f(ARG5 , ARG6)
 CALL func f() [(ARG1 + (f(ARG5 , ARG6) * 4))]
f() CALL func
 BRANCH VZERO
(f(ARG5 , ARG6) + 4294967295) INT_ADD f(ARG5 , ARG6) 4294967295
4606180 PTRSUB 0 4606180
(f(ARG5 , ARG6) * 4) INT_MULT f(ARG5 , ARG6) 4
f() CALL func f() 4606180
[(ARG1 + (f(ARG5 , ARG6) * 4))] LOAD 433 (ARG1 + (f(ARG5 , ARG6) * 4))
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
f() CALL func apint
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
apint COPY apint
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
apint COPY apint
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
f() CALL func apint
 CBRANCH f()
 CALL func f()
f() CALL func
 CBRANCH (1 INT_LESS ARG6)
0 INT_NOTEQUAL f() 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_EQUAL f(ARG1 , ARG2 , ARG5 , ARG6) 4294967296
(ARG6 + f(ARG5)) INT_ZEXT (ARG6 + f(ARG5))
0 INT_EQUAL f() 0
f(ARG1 , ARG2 , ARG5 , ARG6) INT_REM ([(ARG1 + ((ARG6 + f(ARG5)) * 4))] # [(ARG1 + (((ARG6 + f(ARG5)) + -1) * 4))]) [(ARG2 + ((ARG6 + -1) * 4))]
(((ARG6 + ARG5) * 4) + ARG1) CAST (((ARG6 + ARG5) * 4) + ARG1)
0 INT_EQUAL f() 0
 CBRANCH f()
 RETURN 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
VZERO COPY VZERO
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(ARG6 + -1) INT_ZEXT (ARG6 + -1)
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 RETURN 1
 CBRANCH (f() INT_EQUAL 0)
 CALL libcall___assert_fail_thunk n>1 && "n must be > 1" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1515 void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int)
 CBRANCH f()
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(ARG2 + ((ARG6 + -1) * 4)) CAST (ARG2 + ((ARG6 + -1) * 4))
((ARG6 + f(ARG5)) * 4) INT_MULT (ARG6 + f(ARG5)) 4
(ARG6 + -1) INT_ZEXT (ARG6 + -1)
 CBRANCH f()
(ARG6 + f(ARG5)) INT_ZEXT (ARG6 + f(ARG5))
 CBRANCH f()
 CBRANCH f()
[(ARG2 + ((ARG6 + -1) * 4))] LOAD 433 (ARG2 + ((ARG6 + -1) * 4))
(ARG1 + ((ARG6 + f(ARG5)) * 4)) CAST (ARG1 + ((ARG6 + f(ARG5)) * 4))
[(ARG2 + ((ARG6 + -1) * 4))] LOAD 433 (ARG2 + ((ARG6 + -1) * 4))
 CBRANCH (f() INT_LESS ARG6)
((ARG6 + -1) * 4) INT_MULT (ARG6 + -1) 4
((ARG6 + -1) * 4) INT_MULT (ARG6 + -1) 4
 CBRANCH f()
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(f(ARG1 , ARG2 , ARG5 , ARG6) / 2147483647) SUBPIECE f(ARG1 , ARG2 , ARG5 , ARG6) 0
([(ARG1 + ((ARG6 + f(ARG5)) * 4))] # [(ARG1 + (((ARG6 + f(ARG5)) + -1) * 4))]) PIECE [(ARG1 + ((ARG6 + f(ARG5)) * 4))] [(ARG1 + (((ARG6 + f(ARG5)) + -1) * 4))]
0 COPY 0
(f(ARG1 , ARG2 , ARG5 , ARG6) / 2147483647) SUBPIECE f(ARG1 , ARG2 , ARG5 , ARG6) 0
(ARG3 + (f(ARG5) * 4)) CAST (ARG3 + (f(ARG5) * 4))
((ARG6 + f(ARG5)) * 4) INT_MULT (ARG6 + f(ARG5)) 4
[(ARG1 + ((ARG6 + f(ARG5)) * 4))] LOAD 433 (ARG1 + ((ARG6 + f(ARG5)) * 4))
0 INT_EQUAL f() 0
[(ARG1 + ((ARG6 + f(ARG5)) * 4))] INT_ZEXT [(ARG1 + ((ARG6 + f(ARG5)) * 4))]
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 CBRANCH f()
 CBRANCH f()
 CBRANCH f()
(ARG6 + f(ARG5)) INT_ZEXT (ARG6 + f(ARG5))
(ARG6 + ARG5) INT_ZEXT (ARG6 + ARG5)
f() CALL func [(ARG2 + ((ARG6 + -1) * 4))]
 CBRANCH f()
 CBRANCH f()
0 INT_SLESS [(ARG1 + ((ARG6 + f(ARG5)) * 4))] f(ARG1 , ARG2 , ARG5 , ARG6)
 CBRANCH f()
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH f()
 STORE 433 (ARG3 + (f(ARG5) * 4)) (f(ARG1 , ARG2 , ARG5 , ARG6) / 2147483647)
(ARG1 + (((ARG6 + f(ARG5)) + -1) * 4)) CAST (ARG1 + (((ARG6 + f(ARG5)) + -1) * 4))
 CBRANCH (ARG4 INT_NOTEQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
[(ARG2 + ((ARG6 + -1) * 4))] INT_ZEXT [(ARG2 + ((ARG6 + -1) * 4))]
 STORE 433 (((ARG6 + ARG5) * 4) + ARG1) f(ARG1)
void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int) COPY void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int)
(f(ARG5) * 4) INT_MULT f(ARG5) 4
[(ARG1 + ((ARG6 + f(ARG5)) * 4))] CAST [(ARG1 + ((ARG6 + f(ARG5)) * 4))]
([(ARG1 + ((ARG6 + f(ARG5)) * 4))] - (f(ARG1 , ARG2 , ARG5 , ARG6) / 2147483647)) INT_SUB [(ARG1 + ((ARG6 + f(ARG5)) * 4))] (f(ARG1 , ARG2 , ARG5 , ARG6) / 2147483647)
 STORE 433 (ARG1 + ((ARG6 + f(ARG5)) * 4)) ([(ARG1 + ((ARG6 + f(ARG5)) * 4))] - (f(ARG1 , ARG2 , ARG5 , ARG6) / 2147483647))
[(ARG2 + ((ARG6 + -1) * 4))] INT_ZEXT [(ARG2 + ((ARG6 + -1) * 4))]
(ARG1 + ((ARG6 + f(ARG5)) * 4)) CAST (ARG1 + ((ARG6 + f(ARG5)) * 4))
[(ARG1 + ((ARG6 + f(ARG5)) * 4))] LOAD 433 (ARG1 + ((ARG6 + f(ARG5)) * 4))
((ARG6 + f(ARG5)) * 4) INT_MULT (ARG6 + f(ARG5)) 4
(ARG1 + ((ARG6 + f(ARG5)) * 4)) CAST (ARG1 + ((ARG6 + f(ARG5)) * 4))
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH ([(ARG1 + ((ARG6 + f(ARG5)) * 4))] INT_SLESS f(ARG1 , ARG2 , ARG5 , ARG6))
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() COPY f()
 CBRANCH (4294967295 INT_SLESS (f(ARG5) + 4294967295))
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
f(ARG1 , ARG2 , ARG5 , ARG6) INT_DIV ([(ARG1 + ((ARG6 + f(ARG5)) * 4))] # [(ARG1 + (((ARG6 + f(ARG5)) + -1) * 4))]) [(ARG2 + ((ARG6 + -1) * 4))]
0 INT_SLESS 4294967295 (f(ARG5) + 4294967295)
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
((ARG6 + f(ARG5)) + -1) INT_ZEXT ((ARG6 + f(ARG5)) + -1)
0 INT_EQUAL f() 0
0 INT_EQUAL VZERO 0
n>1 && "n must be > 1" COPY n>1 && "n must be > 1"
((ARG6 + f(ARG5)) + -1) INT_SUB (ARG6 + f(ARG5)) -1
 CBRANCH f()
 CBRANCH (VZERO INT_EQUAL 0)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 CBRANCH f()
(ARG2 + ((ARG6 + -1) * 4)) CAST (ARG2 + ((ARG6 + -1) * 4))
 CBRANCH f()
 CBRANCH f()
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(f() / 2147483647) SUBPIECE f() 0
((ARG6 + ARG5) * 4) INT_MULT (ARG6 + ARG5) 4
 CBRANCH f()
f(ARG5) INT_SEXT f(ARG5)
(((ARG6 + f(ARG5)) + -1) * 4) INT_MULT ((ARG6 + f(ARG5)) + -1) 4
[(ARG1 + (((ARG6 + f(ARG5)) + -1) * 4))] LOAD 433 (ARG1 + (((ARG6 + f(ARG5)) + -1) * 4))
 CBRANCH f()
(ARG2 + ((ARG6 + -1) * 4)) CAST (ARG2 + ((ARG6 + -1) * 4))
 CBRANCH f()
[(ARG2 + ((ARG6 + -1) * 4))] LOAD 433 (ARG2 + ((ARG6 + -1) * 4))
 CBRANCH f()
 CBRANCH f()
(ARG1 + ((ARG6 + f(ARG5)) * 4)) CAST (ARG1 + ((ARG6 + f(ARG5)) * 4))
(ARG6 + -1) INT_ZEXT (ARG6 + -1)
((ARG6 + -1) * 4) INT_MULT (ARG6 + -1) 4
(f(ARG5) + 4294967295) INT_ADD f(ARG5) 4294967295
(ARG6 + f(ARG5)) INT_ZEXT (ARG6 + f(ARG5))
 CBRANCH f()
((ARG6 + f(ARG5)) * 4) INT_MULT (ARG6 + f(ARG5)) 4
[(ARG1 + ((ARG6 + f(ARG5)) * 4))] LOAD 433 (ARG1 + ((ARG6 + f(ARG5)) * 4))
 CBRANCH f()
f() CALL func
 CALL func f()
f() CALL func apint
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
apint COPY apint
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH (ARG3 INT_EQUAL 0)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 RETURN 1
 CBRANCH (ARG1 INT_NOTEQUAL ARG2)
q && "Must provide quotient" COPY q && "Must provide quotient"
void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int) COPY void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int)
VZERO COPY VZERO
 CALL libcall___assert_fail_thunk q && "Must provide quotient" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1513 void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int)
1 COPY 1
 BRANCH VZERO
0 COPY 0
f() CALL func apint
 CBRANCH (f() INT_EQUAL 0)
apint COPY apint
0 INT_EQUAL f() 0
 BRANCH VZERO
1 COPY 1
0 INT_EQUAL f() 0
0 COPY 0
apint COPY apint
f() CALL func apint
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
apint COPY apint
0 COPY 0
f() CALL func apint
 CBRANCH (f() INT_EQUAL 0)
, rp ==  COPY , rp == 
f() CALL func f() KnuthDiv: qp == 
f() CALL func f() , rp == 
KnuthDiv: qp ==  COPY KnuthDiv: qp == 
f() CALL func f() f(ARG1 , ARG2 , ARG5 , ARG6) f()
f() CALL func
 CALL func f()
f() CALL func f() f(ARG1 , ARG2 , ARG5 , ARG6) f()
0 INT_EQUAL f() 0
f() CALL func apint
 CBRANCH (f() INT_EQUAL 0)
apint COPY apint
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_LESS ARG6)
(ARG2 + (f() * 4)) CAST (ARG2 + (f() * 4))
[(ARG2 + (f() * 4))] LOAD 433 (ARG2 + (f() * 4))
 CBRANCH ([(ARG1 + ((f(ARG5) + f()) * 4))] INT_LESS [f(ARG1 , ARG2 , ARG5)])
((f(ARG5) + f()) * 4) INT_MULT (f(ARG5) + f()) 4
(f() * 4) INT_MULT f() 4
0 INT_LESS [(ARG1 + ((f(ARG5) + f()) * 4))] [f(ARG1 , ARG2 , ARG5)]
(f() * 4) INT_MULT f() 4
f() INT_ZEXT f()
(f(ARG5) + f()) INT_ADD f() f(ARG5)
(f(ARG5) + f()) INT_ADD f() f(ARG5)
(ARG1 + ((f(ARG5) + f()) * 4)) CAST (ARG1 + ((f(ARG5) + f()) * 4))
(f(ARG5) + f()) INT_ZEXT (f(ARG5) + f())
(ARG1 + ((f(ARG5) + f()) * 4)) CAST (ARG1 + ((f(ARG5) + f()) * 4))
([(ARG1 + ((f(ARG5) + f()) * 4))] + ([(ARG2 + (f() * 4))] + f())) INT_ADD [(ARG1 + ((f(ARG5) + f()) * 4))] ([(ARG2 + (f() * 4))] + f())
f(ARG1 , ARG2 , ARG5) CAST f(ARG1 , ARG2 , ARG5)
((f(ARG5) + f()) * 4) INT_MULT (f(ARG5) + f()) 4
 STORE 433 (ARG1 + ((f(ARG5) + f()) * 4)) ([(ARG1 + ((f(ARG5) + f()) * 4))] + ([(ARG2 + (f() * 4))] + f()))
[(ARG1 + ((f(ARG5) + f()) * 4))] LOAD 433 (ARG1 + ((f(ARG5) + f()) * 4))
([(ARG2 + (f() * 4))] + f()) INT_ADD f() [(ARG2 + (f() * 4))]
(f(ARG5) + f()) INT_ADD f() f(ARG5)
(f(ARG5) + f()) INT_ZEXT (f(ARG5) + f())
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() INT_ZEXT f()
((f(ARG5) + f()) * 4) INT_MULT (f(ARG5) + f()) 4
[(ARG1 + ((f(ARG5) + f()) * 4))] LOAD 433 (ARG1 + ((f(ARG5) + f()) * 4))
(ARG1 + ((f(ARG5) + f()) * 4)) CAST (ARG1 + ((f(ARG5) + f()) * 4))
(f(ARG5) + f()) INT_ZEXT (f(ARG5) + f())
((f(ARG5) + f()) * 4) INT_MULT (f(ARG5) + f()) 4
(f(ARG5) + f()) INT_ZEXT (f(ARG5) + f())
f(ARG1 , ARG2 , ARG5) CALL func (ARG1 + ((f(ARG5) + f()) * 4)) (ARG2 + (f() * 4)) (ARG2 + (f() * 4))
f() INT_ZEXT f()
(f(ARG5) + f()) INT_ADD f() f(ARG5)
[f(ARG1 , ARG2 , ARG5)] LOAD 433 f(ARG1 , ARG2 , ARG5)
0 COPY 0
apint COPY apint
f() CALL func apint
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 COPY 0
f() CALL func apint
apint COPY apint
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
apint COPY apint
f() CALL func apint
 CBRANCH f()
f() CALL func
 CALL func f()
f() CALL func f()
 CBRANCH (f() INT_EQUAL 0)
apint COPY apint
0 COPY 0
0 INT_EQUAL f() 0
f() CALL func apint
 CBRANCH (f() INT_EQUAL 0)
f() CALL func
 CALL func f()
(ARG1 + ((f(ARG5) + f()) * 4)) CAST (ARG1 + ((f(ARG5) + f()) * 4))
 STORE 433 (ARG1 + ((f(ARG5) + f()) * 4)) f(ARG1 , ARG2 , ARG5 , ARG6)
((f(ARG5) + f()) * 4) INT_MULT (f(ARG5) + f()) 4
f(ARG1 , ARG2 , ARG5 , ARG6) INT_SUB ([(ARG1 + ((f(ARG5) + f()) * 4))] - f(ARG1 , ARG2 , ARG5 , ARG6)) (4294967295 & (f(ARG1 , ARG2 , ARG5 , ARG6) * [(ARG2 + (f() * 4))]))
((f(ARG5) + f()) * 4) INT_MULT (f(ARG5) + f()) 4
[(ARG2 + (f() * 4))] INT_ZEXT [(ARG2 + (f() * 4))]
f(ARG1 , ARG2 , ARG5 , ARG6) INT_SUB ((f(ARG1 , ARG2 , ARG5 , ARG6) * [(ARG2 + (f() * 4))]) / 2147483647) f(ARG1 , ARG2 , ARG5 , ARG6)
f(ARG1 , ARG2 , ARG5 , ARG6) SUBPIECE f(ARG1 , ARG2 , ARG5 , ARG6) 0
[(ARG1 + ((f(ARG5) + f()) * 4))] INT_ZEXT [(ARG1 + ((f(ARG5) + f()) * 4))]
((f(ARG1 , ARG2 , ARG5 , ARG6) * [(ARG2 + (f() * 4))]) / 2147483647) INT_RIGHT (f(ARG1 , ARG2 , ARG5 , ARG6) * [(ARG2 + (f() * 4))]) 32
(ARG2 + (f() * 4)) CAST (ARG2 + (f() * 4))
([(ARG1 + ((f(ARG5) + f()) * 4))] - f(ARG1 , ARG2 , ARG5 , ARG6)) INT_SUB [(ARG1 + ((f(ARG5) + f()) * 4))] f(ARG1 , ARG2 , ARG5 , ARG6)
(f() * 4) INT_MULT f() 4
(f(ARG5) + f()) INT_ADD f() f(ARG5)
[(ARG2 + (f() * 4))] LOAD 433 (ARG2 + (f() * 4))
f() INT_ZEXT f()
(f(ARG5) + f()) INT_ADD f() f(ARG5)
f(ARG1 , ARG2 , ARG5 , ARG6) INT_SRIGHT f(ARG1 , ARG2 , ARG5 , ARG6) 32
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(f(ARG5) + f()) INT_ZEXT (f(ARG5) + f())
 CBRANCH f()
(f(ARG1 , ARG2 , ARG5 , ARG6) * [(ARG2 + (f() * 4))]) INT_MULT [(ARG2 + (f() * 4))] f(ARG1 , ARG2 , ARG5 , ARG6)
(f(ARG5) + f()) INT_ZEXT (f(ARG5) + f())
(ARG1 + ((f(ARG5) + f()) * 4)) CAST (ARG1 + ((f(ARG5) + f()) * 4))
(4294967295 & (f(ARG1 , ARG2 , ARG5 , ARG6) * [(ARG2 + (f() * 4))])) INT_AND (f(ARG1 , ARG2 , ARG5 , ARG6) * [(ARG2 + (f() * 4))]) 4294967295
[(ARG1 + ((f(ARG5) + f()) * 4))] LOAD 433 (ARG1 + ((f(ARG5) + f()) * 4))
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CALL func f() 10
f() CALL func
apint COPY apint
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
f() CALL func apint
0 COPY 0
 CBRANCH f(ARG1 , ARG2 , ARG5 , ARG6)
0 INT_LESSEQUAL f(ARG1 , ARG2 , ARG5 , ARG6) f(ARG1 , ARG2 , ARG5 , ARG6)
0 INT_NOTEQUAL f(ARG1 , ARG2 , ARG5 , ARG6) 0
((ARG6 + f(ARG5)) + 2) INT_SUB (ARG6 + f(ARG5)) 2
((ARG6 + 2) * 4) INT_MULT (ARG6 + 2) 4
(((ARG6 + f(ARG5)) + 2) * 4) INT_MULT ((ARG6 + f(ARG5)) + 2) 4
f(ARG1 , ARG2 , ARG5 , ARG6) INT_SUB f(ARG1 , ARG2 , ARG5 , ARG6) -2
[(ARG1 + (((ARG6 + f(ARG5)) + 2) * 4))] LOAD 433 (ARG1 + (((ARG6 + f(ARG5)) + 2) * 4))
[(ARG1 + (((ARG6 + f(ARG5)) + 2) * 4))] INT_ZEXT [(ARG1 + (((ARG6 + f(ARG5)) + 2) * 4))]
(ARG1 + (((ARG6 + f(ARG5)) + 2) * 4)) CAST (ARG1 + (((ARG6 + f(ARG5)) + 2) * 4))
(ARG6 + 2) INT_ZEXT (ARG6 + 2)
f(ARG1 , ARG2 , ARG5 , ARG6) INT_ADD [(ARG1 + (((ARG6 + f(ARG5)) + 2) * 4))] f(ARG1 , ARG2 , ARG5 , ARG6)
f(ARG1 , ARG2 , ARG5 , ARG6) INT_MULT [(ARG2 + ((ARG6 + 2) * 4))] f(ARG1 , ARG2 , ARG5 , ARG6)
[(ARG2 + ((ARG6 + 2) * 4))] INT_ZEXT [(ARG2 + ((ARG6 + 2) * 4))]
0 BOOL_AND 0 0
f(ARG1 , ARG2 , ARG5 , ARG6) INT_SUB f(ARG1 , ARG2 , ARG5 , ARG6) f(ARG1 , ARG2 , ARG5 , ARG6)
f(ARG1 , ARG2 , ARG5 , ARG6) INT_LEFT f(ARG1 , ARG2 , ARG5 , ARG6) 32
((ARG6 + f(ARG5)) + 2) INT_ZEXT ((ARG6 + f(ARG5)) + 2)
[(ARG2 + ((ARG6 + 2) * 4))] LOAD 433 (ARG2 + ((ARG6 + 2) * 4))
 CBRANCH (0 BOOL_AND 0)
(ARG2 + ((ARG6 + 2) * 4)) CAST (ARG2 + ((ARG6 + 2) * 4))
 CBRANCH (ARG2 INT_NOTEQUAL ARG3)
 CALL libcall___assert_fail_thunk u != v && u != q && v != q && "Must use different memory" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1514 void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
u != v && u != q && v != q && "Must use different memory" COPY u != v && u != q && v != q && "Must use different memory"
void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int) COPY void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int)
 RETURN 1
VZERO COPY VZERO
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH (ARG2 INT_EQUAL 0)
 CALL libcall___assert_fail_thunk v && "Must provide divisor" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1512 void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int)
v && "Must provide divisor" COPY v && "Must provide divisor"
void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int) COPY void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 RETURN 1
VZERO COPY VZERO
 BRANCH VZERO
1 COPY 1
 CBRANCH (4294967295 INT_SLESS f(ARG6))
 BRANCH VZERO
(f(ARG6) + 4294967295) INT_ADD f(ARG6) 4294967295
(f(ARG6) * 4) INT_MULT f(ARG6) 4
f(ARG6) INT_SEXT f(ARG6)
0 INT_SLESS 4294967295 f(ARG6)
 CBRANCH (f() INT_EQUAL 0)
 STORE 433 ((f(ARG6) * 4) + ARG4) [(ARG1 + (f(ARG6) * 4))]
0 INT_EQUAL f() 0
f(ARG6) INT_SEXT f(ARG6)
(f(ARG6) * 4) INT_MULT f(ARG6) 4
((f(ARG6) * 4) + ARG4) CAST ((f(ARG6) * 4) + ARG4)
[(ARG1 + (f(ARG6) * 4))] LOAD 433 (ARG1 + (f(ARG6) * 4))
 CBRANCH f()
(ARG1 + (f(ARG6) * 4)) CAST (ARG1 + (f(ARG6) * 4))
0 INT_EQUAL f() 0
apint COPY apint
f() CALL func apint
 CALL func f() 4606182
f() CALL func
4606182 PTRSUB 0 4606182
 CALL func f()
f() CALL func f() KnuthDiv: dividend == 
KnuthDiv: dividend ==  COPY KnuthDiv: dividend == 
f() CALL func
f() CALL func f() ([(ARG1 + ((ARG6 + f(ARG5)) * 4))] # [(ARG1 + (((ARG6 + f(ARG5)) + -1) * 4))]) f()
[(ARG1 + ((f(ARG5) + f()) * 4))] LOAD 433 (ARG1 + ((f(ARG5) + f()) * 4))
(f(ARG5) + f()) INT_ZEXT (f(ARG5) + f())
(f(ARG5) + f()) INT_ADD f() f(ARG5)
((f(ARG5) + f()) * 4) INT_MULT (f(ARG5) + f()) 4
 CBRANCH ([(ARG1 + ((f(ARG5) + f()) * 4))] INT_EQUAL [f(ARG1 , ARG2 , ARG5)])
(ARG1 + ((f(ARG5) + f()) * 4)) CAST (ARG1 + ((f(ARG5) + f()) * 4))
0 COPY 0
0 INT_EQUAL [(ARG1 + ((f(ARG5) + f()) * 4))] [f(ARG1 , ARG2 , ARG5)]
 CBRANCH (f() INT_LESS ARG6)
([(ARG2 + (f() * 4))] >> (31 & (32 - (f() / 2147483647)))) COPY ([(ARG2 + (f() * 4))] >> (31 & (32 - (f() / 2147483647))))
(f() * 4) INT_MULT f() 4
([(ARG2 + (f() * 4))] >> (31 & (32 - (f() / 2147483647)))) INT_RIGHT [(ARG2 + (f() * 4))] (31 & (32 - (f() / 2147483647)))
[(ARG2 + (f() * 4))] LOAD 433 (ARG2 + (f() * 4))
(f(ARG2) | ([(ARG2 + (f() * 4))] << (31 & (f() / 2147483647)))) INT_OR ([(ARG2 + (f() * 4))] << (31 & (f() / 2147483647))) f(ARG2)
(f() * 4) INT_MULT f() 4
(31 & (32 - (f() / 2147483647))) INT_AND (32 - (f() / 2147483647)) 31
 STORE 433 (ARG2 + (f() * 4)) (f(ARG2) | ([(ARG2 + (f() * 4))] << (31 & (f() / 2147483647))))
f() INT_ZEXT f()
(ARG2 + (f() * 4)) CAST (ARG2 + (f() * 4))
f() INT_ZEXT f()
[(ARG2 + (f() * 4))] LOAD 433 (ARG2 + (f() * 4))
(ARG2 + (f() * 4)) CAST (ARG2 + (f() * 4))
 BRANCH VZERO
(f() * 4) INT_MULT f() 4
(32 - (f() / 2147483647)) INT_SUB 32 (f() / 2147483647)
f() INT_ZEXT f()
(f() + 1) INT_ADD f() 1
(ARG2 + (f() * 4)) CAST (ARG2 + (f() * 4))
([(ARG2 + (f() * 4))] << (31 & (f() / 2147483647))) INT_LEFT [(ARG2 + (f() * 4))] (31 & (f() / 2147483647))
(31 & (f() / 2147483647)) INT_AND (f() / 2147483647) 31
1 COPY 1
 BRANCH VZERO
f() CALL func
 CALL func f()
(f(ARG5) * 4) INT_MULT f(ARG5) 4
f(ARG5) INT_SEXT f(ARG5)
(ARG3 + (f(ARG5) * 4)) CAST (ARG3 + (f(ARG5) * 4))
[(ARG3 + (f(ARG5) * 4))] LOAD 433 (ARG3 + (f(ARG5) * 4))
f() CALL func f() [(ARG3 + (f(ARG5) * 4))]
f() CALL func f() KnuthDiv: digit result = 
KnuthDiv: digit result =  COPY KnuthDiv: digit result = 
f() CALL func
 CALL func f()
 CBRANCH (f() INT_EQUAL 0)
f() CALL func apint
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
0 INT_EQUAL f() 0
apint COPY apint
f() CALL func apint
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
apint COPY apint
0 INT_EQUAL f() 0
f() CALL func apint
 CBRANCH (f() INT_EQUAL 0)
apint COPY apint
0 COPY 0
0 INT_EQUAL f() 0
4606156 PTRSUB 0 4606156
f() CALL func
KnuthDiv: m= COPY KnuthDiv: m=
f() CALL func f() 4606156
 CALL func f() 10
f() CALL func f() KnuthDiv: m=
 CBRANCH (4294967295 INT_SLESS f(ARG5))
 BRANCH VZERO
(f(ARG5) + 4294967295) INT_ADD f(ARG5) 4294967295
0 INT_SLESS 4294967295 f(ARG5)
f() CALL func f()
 CALL func f()
f() CALL func
 CBRANCH (4294967295 INT_SLESS f(ARG5 , ARG6))
(f(ARG5 , ARG6) + 4294967295) INT_ADD f(ARG5 , ARG6) 4294967295
 BRANCH VZERO
f() CALL func f()
 CALL func f()
f() CALL func
0 INT_SLESS 4294967295 f(ARG5 , ARG6)
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH f()
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 COPY 0
f() CALL func apint
apint COPY apint
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH (ARG1 INT_NOTEQUAL ARG3)
 CBRANCH (4294967295 INT_SLESS f(ARG5 , ARG6))
f() CALL func f()
 CALL func f()
f() CALL func
 BRANCH VZERO
(f(ARG5 , ARG6) + 4294967295) INT_ADD f(ARG5 , ARG6) 4294967295
0 INT_SLESS 4294967295 f(ARG5 , ARG6)
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
1 COPY 1
VZERO COPY VZERO
 CALL libcall___assert_fail_thunk u && "Must provide dividend" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1511 void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
u && "Must provide dividend" COPY u && "Must provide dividend"
void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int) COPY void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int)
 RETURN 1
apint COPY apint
0 INT_EQUAL f() 0
f() CALL func apint
([(ARG1 + ((ARG6 + f(ARG5)) * 4))] + f()) INT_ADD f() [(ARG1 + ((ARG6 + f(ARG5)) * 4))]
(f(ARG5) * 4) INT_MULT f(ARG5) 4
(ARG1 + ((ARG6 + f(ARG5)) * 4)) CAST (ARG1 + ((ARG6 + f(ARG5)) * 4))
 STORE 433 (ARG1 + ((ARG6 + f(ARG5)) * 4)) ([(ARG1 + ((ARG6 + f(ARG5)) * 4))] + f())
f(ARG5) INT_SEXT f(ARG5)
(ARG6 + f(ARG5)) INT_ZEXT (ARG6 + f(ARG5))
(ARG6 + f(ARG5)) INT_ZEXT (ARG6 + f(ARG5))
0 COPY 0
(f(ARG3 , ARG5) + 4294967295) INT_ADD f(ARG3 , ARG5) 4294967295
0 COPY 0
(ARG1 + ((ARG6 + f(ARG5)) * 4)) CAST (ARG1 + ((ARG6 + f(ARG5)) * 4))
((ARG6 + f(ARG5)) * 4) INT_MULT (ARG6 + f(ARG5)) 4
[(ARG1 + ((ARG6 + f(ARG5)) * 4))] LOAD 433 (ARG1 + ((ARG6 + f(ARG5)) * 4))
 STORE 433 (ARG3 + (f(ARG5) * 4)) (f(ARG3 , ARG5) + 4294967295)
((ARG6 + f(ARG5)) * 4) INT_MULT (ARG6 + f(ARG5)) 4
f() INT_ZEXT f()
(ARG3 + (f(ARG5) * 4)) CAST (ARG3 + (f(ARG5) * 4))
f(ARG3 , ARG5) LOAD 433 (ARG3 + (f(ARG5) * 4))
0 INT_EQUAL f() 0
apint COPY apint
f() CALL func apint
0 INT_EQUAL f() 0
f() CALL func apint
apint COPY apint
 BRANCH VZERO
1 COPY 1
f() CALL func f() [(ARG1 + ((f(ARG5) + f()) * 4))]
(f(ARG5) + f()) INT_ZEXT (f(ARG5) + f())
 CALL func f()
f() CALL func
f() CALL func f() , borrow = 
(f(ARG5) + f()) INT_ADD f() f(ARG5)
f() CALL func f() KnuthDiv: u[j+i] = 
[(ARG1 + ((f(ARG5) + f()) * 4))] LOAD 433 (ARG1 + ((f(ARG5) + f()) * 4))
f() CALL func f() f(ARG1 , ARG2 , ARG5 , ARG6) f()
KnuthDiv: u[j+i] =  COPY KnuthDiv: u[j+i] = 
((f(ARG5) + f()) * 4) INT_MULT (f(ARG5) + f()) 4
(ARG1 + ((f(ARG5) + f()) * 4)) CAST (ARG1 + ((f(ARG5) + f()) * 4))
, borrow =  COPY , borrow = 
0 INT_SLESS 4294967295 f(ARG6)
 CBRANCH (4294967295 INT_SLESS f(ARG6))
0 INT_EQUAL f() 0
0 COPY 0
0 INT_EQUAL f() 0
f() CALL func apint
apint COPY apint
0 INT_EQUAL f() 0
f() CALL func apint
apint COPY apint
0 INT_EQUAL f() 0
f() CALL func apint
apint COPY apint
(ARG4 + (f(ARG6) * 4)) CAST (ARG4 + (f(ARG6) * 4))
f() CALL func f() 4606180
[(ARG4 + (f(ARG6) * 4))] LOAD 433 (ARG4 + (f(ARG6) * 4))
 CALL func f() [(ARG4 + (f(ARG6) * 4))]
f(ARG6) INT_SEXT f(ARG6)
f() CALL func
4606180 PTRSUB 0 4606180
(f(ARG6) * 4) INT_MULT f(ARG6) 4
apint COPY apint
0 INT_EQUAL f() 0
f() CALL func apint
0 INT_EQUAL f(ARG1 , ARG2 , ARG5 , ARG6) 4294967296
0 INT_EQUAL f() 0
f(ARG6) INT_SEXT f(ARG6)
(ARG1 + (f(ARG6) * 4)) CAST (ARG1 + (f(ARG6) * 4))
(f(ARG1 , ARG6) | ([(ARG1 + (f(ARG6) * 4))] >> (31 & (f() / 2147483647)))) INT_OR ([(ARG1 + (f(ARG6) * 4))] >> (31 & (f() / 2147483647))) f(ARG1 , ARG6)
(32 - (f() / 2147483647)) INT_SUB 32 (f() / 2147483647)
(f(ARG6) * 4) INT_MULT f(ARG6) 4
 BRANCH VZERO
(f(ARG6) + 4294967295) INT_ADD f(ARG6) 4294967295
 STORE 433 ((f(ARG6) * 4) + ARG4) (f(ARG1 , ARG6) | ([(ARG1 + (f(ARG6) * 4))] >> (31 & (f() / 2147483647))))
((f(ARG6) * 4) + ARG4) CAST ((f(ARG6) * 4) + ARG4)
(ARG1 + (f(ARG6) * 4)) CAST (ARG1 + (f(ARG6) * 4))
f(ARG6) INT_SEXT f(ARG6)
(f(ARG6) * 4) INT_MULT f(ARG6) 4
[(ARG1 + (f(ARG6) * 4))] LOAD 433 (ARG1 + (f(ARG6) * 4))
[(ARG1 + (f(ARG6) * 4))] LOAD 433 (ARG1 + (f(ARG6) * 4))
([(ARG1 + (f(ARG6) * 4))] << (31 & (32 - (f() / 2147483647)))) INT_LEFT [(ARG1 + (f(ARG6) * 4))] (31 & (32 - (f() / 2147483647)))
(f(ARG6) * 4) INT_MULT f(ARG6) 4
(31 & (32 - (f() / 2147483647))) INT_AND (32 - (f() / 2147483647)) 31
([(ARG1 + (f(ARG6) * 4))] >> (31 & (f() / 2147483647))) INT_RIGHT [(ARG1 + (f(ARG6) * 4))] (31 & (f() / 2147483647))
f(ARG6) INT_SEXT f(ARG6)
(31 & (f() / 2147483647)) INT_AND (f() / 2147483647) 31
f() CALL func apint
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
apint COPY apint
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CALL func f() 10
f() CALL func
 BRANCH VZERO
1 COPY 1
1 COPY 1
 BRANCH VZERO
 BRANCH VZERO
1 COPY 1
f() CALL func
 CALL func f()
1 COPY 1
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
0 COPY 0
f() CALL func apint
apint COPY apint
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
1 COPY 1
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
 CALL func f() 10
f() CALL func
f() CALL func apint
apint COPY apint
0 INT_EQUAL f() 0
 CALL func f()
f() CALL func
0 INT_EQUAL f() 0
f() CALL func apint
apint COPY apint
 CALL func f() KnuthDiv: original:
KnuthDiv: original: COPY KnuthDiv: original:
f() CALL func
KnuthDiv: quotient digit # COPY KnuthDiv: quotient digit #
 CALL func f()
f() CALL func f() KnuthDiv: quotient digit #
f() CALL func
f() CALL func f() f(ARG5) f()
 CALL func f()
f() CALL func
 CBRANCH (f() INT_LESS (ARG6 + ARG5))
(ARG1 + (f() * 4)) CAST (ARG1 + (f() * 4))
f() INT_ZEXT f()
(f(ARG1) | ([(ARG1 + (f() * 4))] << (31 & (f() / 2147483647)))) INT_OR ([(ARG1 + (f() * 4))] << (31 & (f() / 2147483647))) f(ARG1)
[(ARG1 + (f() * 4))] LOAD 433 (ARG1 + (f() * 4))
f() INT_ZEXT f()
([(ARG1 + (f() * 4))] >> (31 & (32 - (f() / 2147483647)))) INT_RIGHT [(ARG1 + (f() * 4))] (31 & (32 - (f() / 2147483647)))
(f() * 4) INT_MULT f() 4
(f() * 4) INT_MULT f() 4
(31 & (32 - (f() / 2147483647))) INT_AND (32 - (f() / 2147483647)) 31
(ARG1 + (f() * 4)) CAST (ARG1 + (f() * 4))
 STORE 433 (ARG1 + (f() * 4)) (f(ARG1) | ([(ARG1 + (f() * 4))] << (31 & (f() / 2147483647))))
f() INT_ZEXT f()
([(ARG1 + (f() * 4))] >> (31 & (32 - (f() / 2147483647)))) COPY ([(ARG1 + (f() * 4))] >> (31 & (32 - (f() / 2147483647))))
(f() * 4) INT_MULT f() 4
(32 - (f() / 2147483647)) INT_SUB 32 (f() / 2147483647)
[(ARG1 + (f() * 4))] LOAD 433 (ARG1 + (f() * 4))
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
0 INT_LESS f() (ARG6 + ARG5)
([(ARG1 + (f() * 4))] << (31 & (f() / 2147483647))) INT_LEFT [(ARG1 + (f() * 4))] (31 & (f() / 2147483647))
(31 & (f() / 2147483647)) INT_AND (f() / 2147483647) 31
(ARG1 + (f() * 4)) CAST (ARG1 + (f() * 4))
f() CALL func
 CALL func f()
1 COPY 1
 BRANCH VZERO
0 COPY 0
0 COPY 0
0 COPY 0
f(ARG6) CAST f(ARG6)
(f(ARG6) + 1) INT_SUB f(ARG6) 1
4606180 PTRSUB 0 4606180
f(ARG6) CAST f(ARG6)
(ARG2 + ((f(ARG6) * 4) + -4)) CAST (ARG2 + ((f(ARG6) * 4) + -4))
0 COPY 0
0 INT_SLESS 0 f(ARG6)
f(ARG6) CAST f(ARG6)
 CBRANCH (0 INT_SLESS f(ARG6))
 BRANCH VZERO
(f(ARG6) + 1) INT_SUB f(ARG6) 1
0 INT_SLESS 0 f(ARG6)
 CBRANCH (0 INT_SLESS f(ARG6))
(f(ARG6) * 4) INT_MULT f(ARG6) 4
f(ARG6) INT_SEXT f(ARG6)
f() CALL func
 CALL func f()
f() CALL func f()
 CALL func f() [(ARG2 + ((f(ARG6) * 4) + -4))]
f() CALL func f() 4606180
[(ARG2 + ((f(ARG6) * 4) + -4))] LOAD 433 (ARG2 + ((f(ARG6) * 4) + -4))
 CALL func f()
f() CALL func
 BRANCH VZERO
((f(ARG6) * 4) + -4) INT_ADD (f(ARG6) * 4) -4
f() CALL func
0 INT_LESS ARG2 ARG4
0 INT_LESS f() ARG2
0 INT_EQUAL ARG2 1
(ARG2 * 2) INT_MULT ARG2 2
0 INT_LESS f() ARG2
(ARG1 + 8) PTRADD ARG1 2 4
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG4 * 4) INT_MULT ARG4 4
(ARG4 * 2) INT_MULT ARG4 2
0 INT_LESS f() ARG4
(ARG4 * 4294967294) INT_MULT ARG4 4294967294
0 INT_EQUAL ARG4 1
(ARG4 * 6) INT_MULT ARG4 6
0 INT_LESS f() ARG4
[ARG3] LOAD 433 ARG3
[ARG3] LOAD 433 ARG3
f() CALL func ARG3
(ARG3 + 8) PTRADD ARG3 2 4
(ARG3 + 8) PTRADD ARG3 2 4
f() CALL func ARG5
f() CALL func ARG5
(ARG5 + 8) PTRADD ARG5 2 4
(ARG5 + 8) PTRADD ARG5 2 4
(ARG5 + 8) PTRADD ARG5 2 4
0 INT_NOTEQUAL ARG5 0
(ARG5 + 8) PTRADD ARG5 2 4
f() CALL func ARG5
 CALL func ARG5
f(ARG1 , ARG5) LOAD 433 ARG5
 STORE 433 ARG5 [ARG1]
(ARG5 + 8) PTRADD ARG5 2 4
f() CALL func ARG5
(ARG5 + 8) PTRADD ARG5 2 4
f() CALL func ARG5
(ARG5 + 8) PTRADD ARG5 2 4
 CALL func ARG6
0 INT_NOTEQUAL ARG6 0
(ARG6 + 8) PTRADD ARG6 2 4
(ARG6 + 8) PTRADD ARG6 2 4
(ARG6 + 8) PTRADD ARG6 2 4
0 INT_NOTEQUAL ARG6 0
(ARG6 + 8) PTRADD ARG6 2 4
0 INT_NOTEQUAL ARG6 0
f() CALL func ARG6
0 INT_NOTEQUAL ARG6 0
f() CALL func ARG6
f(ARG3 , ARG6) LOAD 433 ARG6
 STORE 433 ARG6 [ARG3]
f() CALL func ARG6
(ARG6 + 8) PTRADD ARG6 2 4
f() CALL func ARG6
0 INT_EQUAL ARG6 0
(ARG6 + 8) PTRADD ARG6 2 4
(ARG6 + 8) PTRADD ARG6 2 4
f() CALL func ARG6
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG2 INT_LESS ARG4)
 CBRANCH (f(ARG2 , ARG4 , RSP) INT_NOTEQUAL 0)
 CALL libcall_operator.delete[]_thunk f(ARG2 , ARG4 , RSP)
 CBRANCH (ARG2 INT_EQUAL 1)
 CBRANCH (ARG6 INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
[f(ARG2 , ARG4 , RSP)] LOAD 433 f(ARG2 , ARG4 , RSP)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (ARG6 INT_NOTEQUAL 0)
0 INT_LESS (ARG4 * 2) 2287828610704211969
 CBRANCH ((ARG4 * 2) INT_LESS 2287828610704211969)
(ARG4 * 2) INT_ZEXT (ARG4 * 2)
f() CALL libcall_operator.new[]_thunk f(ARG4)
f() CAST f()
 CBRANCH (f() INT_NOTEQUAL 1)
f() CALL func f()
(ARG6 + 8) CAST (ARG6 + 8)
 BRANCH VZERO
 STORE 433 (ARG6 + 8) f()
 CBRANCH ((f(ARG2 , ARG4 , RSP) # f(ARG2 , ARG4 , RSP)) INT_EQUAL 0)
(f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4)) CAST (f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4))
 STORE 433 (f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4)) 0
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
((f(ARG2 , ARG4) + 4294967295) * 4) INT_MULT (f(ARG2 , ARG4) + 4294967295) 4
(f(ARG2 , ARG4) + 4294967295) INT_SEXT (f(ARG2 , ARG4) + 4294967295)
 CBRANCH ((f(ARG2 , ARG4 , RSP) # f(ARG2 , ARG4 , RSP)) INT_LESS [f(ARG2 , ARG4 , RSP)])
0 COPY 0
[f(ARG2 , ARG4 , RSP)] INT_ZEXT [f(ARG2 , ARG4 , RSP)]
0 INT_LESS (f(ARG2 , ARG4 , RSP) # f(ARG2 , ARG4 , RSP)) [f(ARG2 , ARG4 , RSP)]
(f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4)) INT_ADD f(ARG2 , ARG4 , RSP) ((f(ARG2 , ARG4) + 4294967295) * 4)
 BRANCH VZERO
0 COPY 0
 CBRANCH (ARG5 INT_NOTEQUAL 0)
0 INT_EQUAL f(ARG1 , ARG5) [ARG1]
 CBRANCH (f(ARG1 , ARG5) INT_EQUAL [ARG1])
[f(ARG2 , ARG4 , RSP)] INT_ZEXT [f(ARG2 , ARG4 , RSP)]
(f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4)) INT_ADD f(ARG2 , ARG4 , RSP) ((f(ARG2 , ARG4) + 4294967295) * 4)
(f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4)) CAST (f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4))
 STORE 433 (f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4)) 0
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
 CBRANCH ([f(ARG2 , ARG4 , RSP)] INT_EQUAL (f(ARG2 , ARG4 , RSP) # f(ARG2 , ARG4 , RSP)))
((f(ARG2 , ARG4) + 4294967295) * 4) INT_MULT (f(ARG2 , ARG4) + 4294967295) 4
(f(ARG2 , ARG4) + 4294967295) INT_SEXT (f(ARG2 , ARG4) + 4294967295)
 BRANCH VZERO
f(ARG2 , ARG4 , RSP) COPY f(ARG2 , ARG4 , RSP)
0 INT_EQUAL [f(ARG2 , ARG4 , RSP)] (f(ARG2 , ARG4 , RSP) # f(ARG2 , ARG4 , RSP))
 CBRANCH (f() INT_EQUAL 0)
 STORE 433 (ARG6 + 8) [f(ARG2 , ARG4 , RSP)]
[(ARG6 + 8)] LOAD 433 (ARG6 + 8)
(ARG6 + 8) CAST (ARG6 + 8)
 BRANCH VZERO
(ARG6 + 8) CAST (ARG6 + 8)
 STORE 433 [(ARG6 + 8)] [f(ARG2 , ARG4 , RSP)]
 BRANCH VZERO
 CBRANCH (ARG6 INT_NOTEQUAL 0)
(RSP + -536) CAST (RSP + -536)
(((ARG4 * 6) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) + 1) INT_ADD ((ARG4 * 6) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) 1
((((ARG4 * 6) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) + 1) * 4) INT_MULT (((ARG4 * 6) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) + 1) 4
 BRANCH VZERO
(RSP + -536) PTRSUB RSP -536
((RSP + -536) + ((((ARG4 * 6) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) + 1) * 4)) INT_ADD (RSP + -536) ((((ARG4 * 6) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) + 1) * 4)
((ARG4 * 6) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) INT_ADD (ARG4 * 6) (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)
((RSP + -536) + ((((ARG4 * 6) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) + 1) * 4)) CAST ((RSP + -536) + ((((ARG4 * 6) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) + 1) * 4))
(((ARG2 * 2) + (ARG4 * 4294967294)) * 2) INT_MULT ((ARG2 * 2) + (ARG4 * 4294967294)) 2
(((ARG4 * 6) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) + 1) INT_ZEXT (((ARG4 * 6) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) + 1)
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
 CBRANCH ([(ARG6 + 8)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(ARG6 + 8)] 0
[(ARG6 + 8)] LOAD 433 (ARG6 + 8)
(ARG6 + 8) CAST (ARG6 + 8)
 STORE 433 (ARG6 + 8) 0
(ARG6 + 8) CAST (ARG6 + 8)
 CBRANCH (f() INT_LESS ARG4)
(f() * 8) INT_MULT (f() * 2) 4
[(ARG6 + 8)] LOAD 433 (ARG6 + 8)
([(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4))] # [(f(ARG2 , ARG4 , RSP) + (f() * 8))]) PIECE [(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4))] [(f(ARG2 , ARG4 , RSP) + (f() * 8))]
(f() * 2) INT_MULT f() 2
[(f(ARG2 , ARG4 , RSP) + (f() * 8))] LOAD 433 (f(ARG2 , ARG4 , RSP) + (f() * 8))
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4)) CAST (f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4))
((f() * 2) + 1) INT_ADD (f() * 2) 1
([(ARG6 + 8)] + (f() * 8)) CAST ([(ARG6 + 8)] + (f() * 8))
(f() * 8) INT_MULT f() 8
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
(ARG6 + 8) CAST (ARG6 + 8)
(f() * 2) INT_ZEXT (f() * 2)
(f() * 2) INT_MULT f() 2
(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4)) INT_ADD f(ARG2 , ARG4 , RSP) (((f() * 2) + 1) * 4)
(f(ARG2 , ARG4 , RSP) + (f() * 8)) CAST (f(ARG2 , ARG4 , RSP) + (f() * 8))
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
(((f() * 2) + 1) * 4) INT_MULT ((f() * 2) + 1) 4
((f() * 2) + 1) INT_ZEXT ((f() * 2) + 1)
 STORE 433 ([(ARG6 + 8)] + (f() * 8)) ([(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4))] # [(f(ARG2 , ARG4 , RSP) + (f() * 8))])
[(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4))] LOAD 433 (f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4))
([(ARG6 + 8)] + (f() * 8)) INT_ADD [(ARG6 + 8)] (f() * 8)
(f(ARG2 , ARG4 , RSP) + (f() * 8)) INT_ADD f(ARG2 , ARG4 , RSP) (f() * 8)
f() INT_ZEXT f()
 CBRANCH (f(ARG4) INT_NOTEQUAL 0)
f(ARG2 , ARG4 , RSP) LOAD 433 (f(ARG2 , ARG4 , RSP) + ((f(ARG4) + -1) * 4))
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
(f(ARG4) + -1) INT_ZEXT (f(ARG4) + -1)
(f(ARG2 , ARG4 , RSP) + ((f(ARG4) + -1) * 4)) CAST (f(ARG2 , ARG4 , RSP) + ((f(ARG4) + -1) * 4))
0 INT_EQUAL f(ARG2 , ARG4 , RSP) 0
(f(ARG2 , ARG4 , RSP) + ((f(ARG4) + -1) * 4)) INT_ADD f(ARG2 , ARG4 , RSP) ((f(ARG4) + -1) * 4)
((f(ARG4) + -1) * 4) INT_MULT (f(ARG4) + -1) 4
 CBRANCH (f(ARG2 , ARG4 , RSP) INT_EQUAL 0)
(f(ARG4) + -1) INT_SUB f(ARG4) -1
 CBRANCH (f(ARG4) INT_EQUAL 1)
 CALL func f(RSP) f(ARG2 , ARG4 , RSP) f(ARG2 , ARG4 , RSP) f(ARG2 , ARG4 , RSP) f(ARG2 , ARG4) f(ARG4)
 CBRANCH (4294967295 INT_SLESS (f(ARG2 , ARG4) + 4294967295))
0 INT_SLESS 4294967295 (f(ARG2 , ARG4) + 4294967295)
(f(ARG2 , ARG4) + 1) INT_ADD f(ARG2 , ARG4) 1
0 INT_NOTEQUAL f(ARG2 , ARG4 , RSP) 0
0 COPY 0
0 COPY 0
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
(f(ARG2 , ARG4) + 4294967295) INT_ADD f(ARG2 , ARG4) 4294967295
[f(ARG2 , ARG4 , RSP)] LOAD 433 f(ARG2 , ARG4 , RSP)
 CBRANCH (f(ARG2 , ARG4 , RSP) INT_NOTEQUAL 0)
 CBRANCH (f(ARG4) INT_EQUAL 0)
 CALL libcall___assert_fail_thunk n != 0 && "Divide by zero?" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1738 static void llvm::APInt::divide(llvm::APInt, unsigned int, const llvm::APInt&, unsigned int, llvm::APInt*, llvm::APInt*)
static void llvm::APInt::divide(llvm::APInt, unsigned int, const llvm::APInt&, unsigned int, llvm::APInt*, llvm::APInt*) COPY static void llvm::APInt::divide(llvm::APInt, unsigned int, const llvm::APInt&, unsigned int, llvm::APInt*, llvm::APInt*)
n != 0 && "Divide by zero?" COPY n != 0 && "Divide by zero?"
0 INT_EQUAL f(ARG4) 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 RETURN 1
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (ARG6 INT_EQUAL 0)
3 COPY 3
4 COPY 4
 BRANCH VZERO
f(ARG2 , ARG4 , RSP) LOAD 433 (f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4))
 STORE 433 (((f(ARG2 , ARG4) + 4294967295) * 4) + f(ARG2 , ARG4 , RSP)) (((f(ARG2 , ARG4 , RSP) # f(ARG2 , ARG4 , RSP)) / [f(ARG2 , ARG4 , RSP)]) / 2147483647)
((f(ARG2 , ARG4) + 4294967295) * 4) INT_MULT (f(ARG2 , ARG4) + 4294967295) 4
[f(ARG2 , ARG4 , RSP)] INT_ZEXT [f(ARG2 , ARG4 , RSP)]
 BRANCH VZERO
(f(ARG2 , ARG4) + 4294967295) INT_SEXT (f(ARG2 , ARG4) + 4294967295)
(f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4)) CAST (f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4))
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
(f(ARG2 , ARG4 , RSP) - (f(ARG2 , ARG4 , RSP) * [f(ARG2 , ARG4 , RSP)])) INT_SUB f(ARG2 , ARG4 , RSP) (f(ARG2 , ARG4 , RSP) * [f(ARG2 , ARG4 , RSP)])
0 COPY 0
(f(ARG2 , ARG4 , RSP) * [f(ARG2 , ARG4 , RSP)]) INT_MULT f(ARG2 , ARG4 , RSP) [f(ARG2 , ARG4 , RSP)]
(((f(ARG2 , ARG4) + 4294967295) * 4) + f(ARG2 , ARG4 , RSP)) INT_ADD ((f(ARG2 , ARG4) + 4294967295) * 4) f(ARG2 , ARG4 , RSP)
(f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4)) INT_ADD f(ARG2 , ARG4 , RSP) ((f(ARG2 , ARG4) + 4294967295) * 4)
 STORE 433 (f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4)) 1
((f(ARG2 , ARG4) + 4294967295) * 4) INT_MULT (f(ARG2 , ARG4) + 4294967295) 4
((f(ARG2 , ARG4) + 4294967295) * 4) INT_MULT (f(ARG2 , ARG4) + 4294967295) 4
((f(ARG2 , ARG4 , RSP) # f(ARG2 , ARG4 , RSP)) / [f(ARG2 , ARG4 , RSP)]) INT_DIV (f(ARG2 , ARG4 , RSP) # f(ARG2 , ARG4 , RSP)) [f(ARG2 , ARG4 , RSP)]
(((f(ARG2 , ARG4 , RSP) # f(ARG2 , ARG4 , RSP)) / [f(ARG2 , ARG4 , RSP)]) / 2147483647) SUBPIECE ((f(ARG2 , ARG4 , RSP) # f(ARG2 , ARG4 , RSP)) / [f(ARG2 , ARG4 , RSP)]) 0
(((f(ARG2 , ARG4) + 4294967295) * 4) + f(ARG2 , ARG4 , RSP)) CAST (((f(ARG2 , ARG4) + 4294967295) * 4) + f(ARG2 , ARG4 , RSP))
(f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4)) CAST (f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4))
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
(f(ARG2 , ARG4) + 4294967295) INT_SEXT (f(ARG2 , ARG4) + 4294967295)
(f(ARG2 , ARG4) + 4294967295) INT_SEXT (f(ARG2 , ARG4) + 4294967295)
(f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4)) INT_ADD f(ARG2 , ARG4 , RSP) ((f(ARG2 , ARG4) + 4294967295) * 4)
 CBRANCH (f(ARG2 , ARG4 , RSP) INT_NOTEQUAL 0)
 CALL libcall_operator.delete[]_thunk f(ARG2 , ARG4 , RSP)
-1 COPY -1
 BRANCH VZERO
(ARG4 * 8) INT_LEFT (ARG4 * 2) 2
 CBRANCH ((((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) INT_LESS 2287828610704211969)
 BRANCH VZERO
-1 COPY -1
((((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) * 4) INT_LEFT (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) 2
 CBRANCH (f(RSP) INT_NOTEQUAL 0)
 CALL libcall_operator.delete[]_thunk f(RSP)
 CBRANCH (f() INT_LESS ARG2)
[(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4))] LOAD 433 (f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4))
 STORE 433 ([(ARG5 + 8)] + (f() * 8)) ([(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4))] # [(f(ARG2 , ARG4 , RSP) + (f() * 8))])
([(ARG5 + 8)] + (f() * 8)) INT_ADD [(ARG5 + 8)] (f() * 8)
(((f() * 2) + 1) * 4) INT_MULT ((f() * 2) + 1) 4
((f() * 2) + 1) INT_ZEXT ((f() * 2) + 1)
(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4)) CAST (f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4))
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
(f(ARG2 , ARG4 , RSP) + (f() * 8)) INT_ADD f(ARG2 , ARG4 , RSP) (f() * 8)
f() INT_ZEXT f()
[(ARG5 + 8)] LOAD 433 (ARG5 + 8)
[(f(ARG2 , ARG4 , RSP) + (f() * 8))] LOAD 433 (f(ARG2 , ARG4 , RSP) + (f() * 8))
([(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4))] # [(f(ARG2 , ARG4 , RSP) + (f() * 8))]) PIECE [(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4))] [(f(ARG2 , ARG4 , RSP) + (f() * 8))]
([(ARG5 + 8)] + (f() * 8)) CAST ([(ARG5 + 8)] + (f() * 8))
(f() * 8) INT_MULT (f() * 2) 4
(f() * 8) INT_MULT f() 8
(ARG5 + 8) CAST (ARG5 + 8)
(f() * 2) INT_MULT f() 2
((f() * 2) + 1) INT_ADD (f() * 2) 1
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(f() * 2) INT_ZEXT (f() * 2)
(f(ARG2 , ARG4 , RSP) + (f() * 8)) CAST (f(ARG2 , ARG4 , RSP) + (f() * 8))
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
(f() * 2) INT_MULT f() 2
(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4)) INT_ADD f(ARG2 , ARG4 , RSP) (((f() * 2) + 1) * 4)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
 CBRANCH (ARG4 INT_EQUAL 1)
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() [(f() + 40)]
 CBRANCH (f(ARG3 , ARG6) INT_EQUAL [ARG3])
(f() + 40) CAST (f() + 40)
0 INT_EQUAL f(ARG3 , ARG6) [ARG3]
 CBRANCH (f(RSP) INT_NOTEQUAL (RSP + -536))
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_NOTEQUAL f(RSP) (RSP + -536)
(RSP + -536) PTRSUB RSP -536
 CBRANCH (f() INT_LESS ARG4)
(((f() * 2) + 1) * 4) INT_MULT ((f() * 2) + 1) 4
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(f() * 2) INT_ZEXT (f() * 2)
((f() * 2) + 1) INT_ZEXT ((f() * 2) + 1)
(f(ARG3) / 4611686014132420609) SUBPIECE (f(ARG3) / 2147483647) 0
(f(ARG2 , ARG4 , RSP) + (f() * 8)) INT_ADD f(ARG2 , ARG4 , RSP) (f() * 8)
 STORE 433 (f(ARG2 , ARG4 , RSP) + (f() * 8)) (f(ARG3) / 2147483647)
(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4)) INT_ADD f(ARG2 , ARG4 , RSP) (((f() * 2) + 1) * 4)
(f() * 2) INT_MULT f() 2
 STORE 433 (f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4)) (f(ARG3) / 4611686014132420609)
(f(ARG3) / 2147483647) SUBPIECE f(ARG3) 0
f(ARG3) CAST f(ARG3)
(f() * 8) INT_MULT (f() * 2) 4
(f(ARG2 , ARG4 , RSP) + (f() * 8)) CAST (f(ARG2 , ARG4 , RSP) + (f() * 8))
((f() * 2) + 1) INT_ADD (f() * 2) 1
(f(ARG3) / 2147483647) INT_RIGHT f(ARG3) 32
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
(f() * 2) INT_MULT f() 2
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4)) CAST (f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4))
 CBRANCH (f(ARG2 , ARG4 , RSP) INT_EQUAL 0)
(f(ARG2 , ARG4) + 4294967295) INT_ADD f(ARG2 , ARG4) 4294967295
 BRANCH VZERO
 CBRANCH (f(ARG2 , ARG4) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG2 , ARG4) 0
(f(ARG2 , ARG4) + 4294967295) INT_ADD f(ARG2 , ARG4) 4294967295
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CALL libcall_operator.delete[]_thunk [(ARG6 + 8)]
[(ARG6 + 8)] LOAD 433 (ARG6 + 8)
(ARG6 + 8) CAST (ARG6 + 8)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
0 INT_EQUAL f() 0
[f(ARG2 , ARG4 , RSP)] LOAD 433 f(ARG2 , ARG4 , RSP)
 CBRANCH (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) INT_LESS 2287828610704211969)
-1 COPY -1
 BRANCH VZERO
(((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) * 4) INT_LEFT ((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) 2
static void llvm::APInt::divide(llvm::APInt, unsigned int, const llvm::APInt&, unsigned int, llvm::APInt*, llvm::APInt*) COPY static void llvm::APInt::divide(llvm::APInt, unsigned int, const llvm::APInt&, unsigned int, llvm::APInt*, llvm::APInt*)
!Remainder->isSingleWord() && "Remainder APInt not large enough" COPY !Remainder->isSingleWord() && "Remainder APInt not large enough"
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
0 COPY 0
 CALL libcall___assert_fail_thunk !Remainder->isSingleWord() && "Remainder APInt not large enough" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1823 static void llvm::APInt::divide(llvm::APInt, unsigned int, const llvm::APInt&, unsigned int, llvm::APInt*, llvm::APInt*)
(f(RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4)) INT_ADD f(RSP) ((f(ARG2 , ARG4) + 4294967295) * 4)
(f(ARG2 , ARG4 , RSP) # f(ARG2 , ARG4 , RSP)) PIECE f(ARG2 , ARG4 , RSP) f(ARG2 , ARG4 , RSP)
((f(ARG2 , ARG4) + 4294967295) * 4) INT_MULT (f(ARG2 , ARG4) + 4294967295) 4
0 INT_EQUAL (f(ARG2 , ARG4 , RSP) # f(ARG2 , ARG4 , RSP)) 0
f(ARG2 , ARG4 , RSP) LOAD 433 (f(RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4))
(f(RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4)) CAST (f(RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4))
f(RSP) CAST f(RSP)
(f(ARG2 , ARG4) + 4294967295) INT_SEXT (f(ARG2 , ARG4) + 4294967295)
 CBRANCH (f() INT_LESS ARG2)
(f(RSP) + (f() * 8)) INT_ADD f(RSP) (f() * 8)
0 INT_EQUAL f() 1
(f(ARG1) / 2147483647) INT_RIGHT f(ARG1) 32
(f() * 2) INT_MULT f() 2
 BRANCH VZERO
f(ARG1) CAST f(ARG1)
(f(RSP) + (f() * 8)) CAST (f(RSP) + (f() * 8))
(f() * 8) INT_MULT (f() * 2) 4
(f() + 1) INT_ADD f() 1
f(RSP) CAST f(RSP)
(f(RSP) + (((f() * 2) + 1) * 4)) INT_ADD f(RSP) (((f() * 2) + 1) * 4)
(f(RSP) + (((f() * 2) + 1) * 4)) CAST (f(RSP) + (((f() * 2) + 1) * 4))
f(RSP) CAST f(RSP)
(((f() * 2) + 1) * 4) INT_MULT ((f() * 2) + 1) 4
 STORE 433 (f(RSP) + (((f() * 2) + 1) * 4)) (f(ARG1) / 4611686014132420609)
 STORE 433 (f(RSP) + (f() * 8)) (f(ARG1) / 2147483647)
(f(ARG1) / 4611686014132420609) SUBPIECE (f(ARG1) / 2147483647) 0
(f() * 2) INT_MULT f() 2
(f() * 2) INT_ZEXT (f() * 2)
((f() * 2) + 1) INT_ZEXT ((f() * 2) + 1)
((f() * 2) + 1) INT_ADD (f() * 2) 1
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
 CBRANCH (f() INT_EQUAL 1)
f() CALL func f()
 STORE 433 (ARG5 + 8) f()
 BRANCH VZERO
(ARG5 + 8) CAST (ARG5 + 8)
 CBRANCH ((ARG4 * 2) INT_LESS 2287828610704211969)
 BRANCH VZERO
-1 COPY -1
(ARG4 * 8) INT_LEFT (ARG4 * 2) 2
(((f() * (ARG4 * 2)) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) + 1) INT_ADD ((f() * (ARG4 * 2)) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) 1
(((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) * 4) INT_MULT ((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) 4
((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) INT_ADD (ARG4 * 2) ((ARG2 * 2) + (ARG4 * 4294967294))
 RETURN 1
 CALL libcall___assert_fail_thunk lhsWords >= rhsWords && "Fractional result" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1665 static void llvm::APInt::divide(llvm::APInt, unsigned int, const llvm::APInt&, unsigned int, llvm::APInt*, llvm::APInt*)
0 COPY 0
((f() * (ARG4 * 2)) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) INT_ADD (f() * (ARG4 * 2)) (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)
((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) INT_ZEXT ((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294)))
0 INT_NOTEQUAL f(ARG4) 0
 CALL libcall_memset_thunk f(ARG2 , ARG4 , RSP) 0 (ARG4 * 8)
(ARG4 * 2) INT_ZEXT (ARG4 * 2)
(ARG4 * 8) INT_MULT (ARG4 * 2) 4
0 INT_EQUAL f(ARG4) 0
(f(RSP) + (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) * 4)) CAST (f(RSP) + (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) * 4))
f(RSP) CAST f(RSP)
((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) INT_ADD (ARG4 * 2) ((ARG2 * 2) + (ARG4 * 4294967294))
 CBRANCH (ARG6 INT_NOTEQUAL 0)
0 INT_LESS (((f() * (ARG4 * 2)) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) + 1) 129
static void llvm::APInt::divide(llvm::APInt, unsigned int, const llvm::APInt&, unsigned int, llvm::APInt*, llvm::APInt*) COPY static void llvm::APInt::divide(llvm::APInt, unsigned int, const llvm::APInt&, unsigned int, llvm::APInt*, llvm::APInt*)
lhsWords >= rhsWords && "Fractional result" COPY lhsWords >= rhsWords && "Fractional result"
 CBRANCH ((((f() * (ARG4 * 2)) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) + 1) INT_LESS 129)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
0 COPY 0
(((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) INT_ADD ((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) 1
 CALL libcall_memset_thunk f(ARG2 , ARG4 , RSP) 0 (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) * 4)
(f(RSP) + (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) * 4)) INT_ADD f(RSP) (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) * 4)
 STORE 433 (f(RSP) + (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) * 4)) 0
(((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) * 4) INT_MULT ((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) 4
(f(ARG4) + f(ARG2 , ARG4)) INT_ADD f(ARG4) f(ARG2 , ARG4)
(ARG4 * 2) COPY (ARG4 * 2)
 CALL libcall_memset_thunk f(RSP) 0 ((((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) * 4)
0 COPY 0
((((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) * 4) INT_MULT (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) 4
((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) INT_ADD (ARG4 * 2) ((ARG2 * 2) + (ARG4 * 4294967294))
(f() * (ARG4 * 2)) INT_MULT f() (ARG4 * 2)
((ARG2 * 2) + (ARG4 * 4294967294)) INT_ADD (ARG2 * 2) (ARG4 * 4294967294)
((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) INT_ZEXT ((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294)))
(((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) INT_ZEXT (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1)
(((ARG2 * 2) + (ARG4 * 4294967294)) * 2) INT_MULT ((ARG2 * 2) + (ARG4 * 4294967294)) 2
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
 BRANCH VZERO
 STORE 433 f(ARG2 , ARG4 , RSP) f(ARG2 , ARG4 , RSP)
[(ARG5 + 8)] LOAD 433 (ARG5 + 8)
 BRANCH VZERO
 STORE 433 [(ARG5 + 8)] [f(ARG2 , ARG4 , RSP)]
 STORE 433 (ARG5 + 8) [f(ARG2 , ARG4 , RSP)]
 BRANCH VZERO
(ARG5 + 8) CAST (ARG5 + 8)
(ARG5 + 8) CAST (ARG5 + 8)
(ARG5 + 8) CAST (ARG5 + 8)
 CBRANCH ([(ARG5 + 8)] INT_NOTEQUAL 0)
(ARG5 + 8) CAST (ARG5 + 8)
0 INT_NOTEQUAL [(ARG5 + 8)] 0
 STORE 433 (ARG5 + 8) 0
 BRANCH VZERO
[(ARG5 + 8)] LOAD 433 (ARG5 + 8)
0 INT_NOTEQUAL f() 1
0 INT_EQUAL f() 0
(ARG5 + 8) CAST (ARG5 + 8)
 CALL libcall_operator.delete[]_thunk [(ARG5 + 8)]
[(ARG5 + 8)] LOAD 433 (ARG5 + 8)
((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) INT_ZEXT ((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294)))
(((ARG2 * 2) + (ARG4 * 4294967294)) + (ARG4 * 4)) INT_ADD ((ARG2 * 2) + (ARG4 * 4294967294)) (ARG4 * 4)
((RSP + -536) + (((((ARG2 * 2) + (ARG4 * 4294967294)) + (ARG4 * 4)) + 1) * 4)) CAST ((RSP + -536) + (((((ARG2 * 2) + (ARG4 * 4294967294)) + (ARG4 * 4)) + 1) * 4))
(RSP + -536) CAST (RSP + -536)
(((((ARG2 * 2) + (ARG4 * 4294967294)) + (ARG4 * 4)) + 1) * 4) INT_MULT ((((ARG2 * 2) + (ARG4 * 4294967294)) + (ARG4 * 4)) + 1) 4
(ARG4 * 2) INT_ZEXT (ARG4 * 2)
f() CAST f()
((((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) * 4) INT_MULT (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) 4
f() CAST f()
(((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) INT_ADD ((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) 1
((RSP + -536) + ((((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) * 4)) INT_ADD (RSP + -536) ((((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) * 4)
((((ARG2 * 2) + (ARG4 * 4294967294)) + (ARG4 * 4)) + 1) INT_ADD (((ARG2 * 2) + (ARG4 * 4294967294)) + (ARG4 * 4)) 1
(RSP + -536) PTRSUB RSP -536
0 INT_LESS (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) 2287828610704211969
f() CALL libcall_operator.new[]_thunk f(ARG2 , ARG4)
((RSP + -536) + (((((ARG2 * 2) + (ARG4 * 4294967294)) + (ARG4 * 4)) + 1) * 4)) INT_ADD (RSP + -536) (((((ARG2 * 2) + (ARG4 * 4294967294)) + (ARG4 * 4)) + 1) * 4)
0 INT_LESS ((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) 2287828610704211969
f() CALL libcall_operator.new[]_thunk f(ARG2 , ARG4)
(RSP + -536) PTRSUB RSP -536
0 INT_LESS (ARG4 * 2) 2287828610704211969
(((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) INT_ZEXT (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1)
f() CALL libcall_operator.new[]_thunk f(ARG4)
(RSP + -536) PTRSUB RSP -536
((RSP + -536) + ((((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) * 4)) CAST ((RSP + -536) + ((((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) * 4))
(RSP + -536) CAST (RSP + -536)
(((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) INT_ADD ((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) 1
((((ARG2 * 2) + (ARG4 * 4294967294)) + (ARG4 * 4)) + 1) INT_ZEXT ((((ARG2 * 2) + (ARG4 * 4294967294)) + (ARG4 * 4)) + 1)
(((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) INT_ZEXT (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1)
f() CAST f()
((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) INT_ADD (ARG4 * 2) ((ARG2 * 2) + (ARG4 * 4294967294))
((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) INT_ADD (ARG4 * 2) ((ARG2 * 2) + (ARG4 * 4294967294))
((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) INT_ADD (ARG4 * 2) ((ARG2 * 2) + (ARG4 * 4294967294))
static void llvm::APInt::divide(llvm::APInt, unsigned int, const llvm::APInt&, unsigned int, llvm::APInt*, llvm::APInt*) COPY static void llvm::APInt::divide(llvm::APInt, unsigned int, const llvm::APInt&, unsigned int, llvm::APInt*, llvm::APInt*)
0 COPY 0
!Quotient->isSingleWord() && "Quotient APInt not large enough" COPY !Quotient->isSingleWord() && "Quotient APInt not large enough"
 RETURN 1
 CALL libcall___assert_fail_thunk !Quotient->isSingleWord() && "Quotient APInt not large enough" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1792 static void llvm::APInt::divide(llvm::APInt, unsigned int, const llvm::APInt&, unsigned int, llvm::APInt*, llvm::APInt*)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 CBRANCH (f(ARG2 , ARG4 , RSP) INT_NOTEQUAL 0)
 CALL libcall_operator.delete[]_thunk f(ARG2 , ARG4 , RSP)
(f(ARG2 , ARG4) + 1) INT_SUB f(ARG2 , ARG4) 1
(f(RSP) + ((f(ARG2 , ARG4) + 1) * 4)) CAST (f(RSP) + ((f(ARG2 , ARG4) + 1) * 4))
f(RSP) CAST f(RSP)
f(ARG2 , ARG4 , RSP) LOAD 433 (f(RSP) + ((f(ARG2 , ARG4) + 1) * 4))
0 INT_EQUAL f(ARG2 , ARG4 , RSP) 0
(f(ARG2 , ARG4) + 1) INT_ZEXT (f(ARG2 , ARG4) + 1)
((f(ARG2 , ARG4) + 1) * 4) INT_MULT (f(ARG2 , ARG4) + 1) 4
(f(RSP) + ((f(ARG2 , ARG4) + 1) * 4)) INT_ADD f(RSP) ((f(ARG2 , ARG4) + 1) * 4)
0 INT_NOTEQUAL f(ARG2 , ARG4 , RSP) 0
0 INT_NOTEQUAL f(RSP) 0
0 INT_NOTEQUAL f(ARG2 , ARG4 , RSP) 0
0 INT_NOTEQUAL f(ARG2 , ARG4 , RSP) 0
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
(f() * 8) INT_MULT f() 8
(ARG3 + 8) CAST (ARG3 + 8)
([(ARG3 + 8)] + (f() * 8)) INT_ADD [(ARG3 + 8)] (f() * 8)
 BRANCH VZERO
[([(ARG3 + 8)] + (f() * 8))] LOAD 433 ([(ARG3 + 8)] + (f() * 8))
(ARG3 + 8) CAST (ARG3 + 8)
([(ARG3 + 8)] + (f() * 8)) CAST ([(ARG3 + 8)] + (f() * 8))
f() INT_ZEXT f()
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
 BRANCH VZERO
(f(ARG4) + -1) INT_SUB f(ARG4) -1
(f(ARG4) + -1) INT_SUB f(ARG4) -1
(f(ARG2 , ARG4) + 1) INT_ADD f(ARG2 , ARG4) 1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
(ARG1 + 8) CAST (ARG1 + 8)
f() INT_ZEXT f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() * 8) INT_MULT f() 8
 BRANCH VZERO
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
 CALL libcall_memset_thunk f(ARG2 , ARG4 , RSP) 0 (ARG4 * 8)
(ARG4 * 8) INT_MULT (ARG4 * 2) 4
(ARG4 * 2) INT_ZEXT (ARG4 * 2)
 CALL func ARG1 [ARG2] 0 0
 CALL func ARG1 [ARG2] ([(ARG2 + 8)] % [(ARG3 + 8)]) 0
 CALL func ARG1 [ARG2] 0 0
 CALL func ARG1 [ARG2] ([[(ARG2 + 8)]] % [[(ARG3 + 8)]]) 0
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -56) (RSP + -56)
 CALL func ARG1 ARG2 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
 CALL func (RSP + -40) ARG2 ARG2
f(ARG3) CALL func ARG2 ARG3 ARG3
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
f(ARG3) CALL func ARG2 ARG3 ARG3
f() CALL func ARG2
(ARG3 + 8) PTRADD ARG3 2 4
[ARG3] LOAD 433 ARG3
f() CALL func ARG3
(ARG3 + 8) PTRADD ARG3 2 4
(ARG3 + 8) PTRADD ARG3 2 4
 CALL func (RSP + -40) f() ARG3 f() 0 (RSP + -56)
0 INT_NOTEQUAL [ARG2] [ARG3]
 CBRANCH ([ARG2] INT_NOTEQUAL [ARG3])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_LESS f())
0 INT_NOTEQUAL f(ARG3) 0
 CBRANCH (f(ARG3) INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
f() CALL func (f() + 4294967295)
 BRANCH VZERO
0 COPY 0
(f() + 4294967295) INT_ADD f() 4294967295
(f() + 1) INT_ADD f() 1
 CBRANCH (f() INT_EQUAL 1)
[[(ARG3 + 8)]] LOAD 433 [(ARG3 + 8)]
(ARG2 + 8) CAST (ARG2 + 8)
(RSP + -40) PTRSUB RSP -40
 BRANCH VZERO
 CALL func (RSP + -56)
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
([[(ARG2 + 8)]] % [[(ARG3 + 8)]]) INT_REM [[(ARG2 + 8)]] [[(ARG3 + 8)]]
[[(ARG2 + 8)]] LOAD 433 [(ARG2 + 8)]
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) 1 0 0
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
(ARG3 + 8) CAST (ARG3 + 8)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 CBRANCH (f() INT_EQUAL 0)
 RETURN 1
(f() + 40) CAST (f() + 40)
 CALL libcall___assert_fail_thunk rhsWords && "Performing remainder operation by zero ???" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1901 llvm::APInt llvm::APInt::urem(const llvm::APInt&) const
llvm::APInt llvm::APInt::urem(const llvm::APInt&) const COPY llvm::APInt llvm::APInt::urem(const llvm::APInt&) const
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
(f() + 40) INT_ADD f() 40
rhsWords && "Performing remainder operation by zero ???" COPY rhsWords && "Performing remainder operation by zero ???"
0 INT_NOTEQUAL 0 [(f() + 40)]
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f(ARG3) INT_EQUAL 0)
0 INT_EQUAL f() 1
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
 CBRANCH ([(ARG3 + 8)] INT_EQUAL 0)
0 INT_EQUAL [(ARG3 + 8)] 0
(ARG3 + 8) CAST (ARG3 + 8)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
(ARG2 + 8) CAST (ARG2 + 8)
 RETURN 1
RHS.VAL != 0 && "Remainder by zero?" COPY RHS.VAL != 0 && "Remainder by zero?"
 CALL libcall___assert_fail_thunk RHS.VAL != 0 && "Remainder by zero?" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1890 llvm::APInt llvm::APInt::urem(const llvm::APInt&) const
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
 BRANCH VZERO
(ARG3 + 8) CAST (ARG3 + 8)
([(ARG2 + 8)] % [(ARG3 + 8)]) INT_REM [(ARG2 + 8)] [(ARG3 + 8)]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
llvm::APInt llvm::APInt::urem(const llvm::APInt&) const COPY llvm::APInt llvm::APInt::urem(const llvm::APInt&) const
 BRANCH VZERO
0 INT_LESS f() f()
 CBRANCH f()
0 COPY 0
BitWidth == RHS.BitWidth && "Bit widths must be the same" COPY BitWidth == RHS.BitWidth && "Bit widths must be the same"
 RETURN 1
llvm::APInt llvm::APInt::urem(const llvm::APInt&) const COPY llvm::APInt llvm::APInt::urem(const llvm::APInt&) const
0 INT_NOTEQUAL f() 0
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be the same" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1888 llvm::APInt llvm::APInt::urem(const llvm::APInt&) const
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
(f() + 4294967295) INT_ADD f() 4294967295
(f() + 1) INT_ADD f() 1
f() CALL func (f() + 4294967295)
 BRANCH VZERO
0 COPY 0
 BRANCH VZERO
0 INT_EQUAL f(ARG3) 0
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 CALL func (RSP + -40) ARG1 (RSP + -72) ARG1
 CALL func ARG1 (RSP + -56) (RSP + -56)
 CALL func ARG1 ARG2 ARG2
ARG1 COPY ARG1
 CALL func (RSP + -72) ARG3 ARG3
0 INT_EQUAL f(RSP) 1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f(RSP) INT_EQUAL 1)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -72) PTRSUB RSP -72
 CBRANCH (0 INT_NOTEQUAL [40])
(f() + 40) INT_ADD f() 40
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -72)
0 INT_NOTEQUAL 0 [40]
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -72) PTRSUB RSP -72
(f() + 40) CAST (f() + 40)
f(RSP) CALL func (RSP + -72)
[40] LOAD 433 (f() + 40)
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -56) (RSP + -72) (RSP + -72)
 CALL func (RSP + -56)
 CALL func (RSP + -72) (RSP + -40) (RSP + -40)
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -40) ARG2 (RSP + -40)
[ARG2] LOAD 433 ARG2
(RSP + -40) PTRSUB RSP -40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
 CALL func (RSP + -40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 40
 CALL func (RSP + -40) [ARG2] 0 0
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG2 ARG3 0 0
ARG2 COPY ARG2
 CALL func ARG2 (RSP + -72) (RSP + -72)
 CALL func ARG2 (RSP + -72) (RSP + -72)
 CALL func ARG2 ARG3 f(ARG1) 0
 CALL func ARG2 ARG3 0 0
 CALL func ARG2 (RSP + -56) (RSP + -56)
(ARG1 / 2147483647) INT_RIGHT ARG1 52
(ARG1 & 4503599627370495) INT_AND ARG1 4503599627370495
ARG1 CAST ARG1
ARG1 CAST ARG1
 CALL func (RSP + -56) ARG3 f(ARG1) 0
 CALL func (RSP + -72) ARG3 (4503599627370496 | (ARG1 & 4503599627370495)) 0
ARG3 INT_ZEXT ARG3
(f() + 40) INT_ADD f() 40
(2047 & (ARG1 / 4611686014132420609)) INT_ZEXT (2047 & (ARG1 / 4611686014132420609))
0 INT_EQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (((2047 & (ARG1 / 4611686014132420609)) + -1023) INT_SLESS 0)
(2047 & (ARG1 / 4611686014132420609)) INT_AND (ARG1 / 4611686014132420609) 2047
(ARG1 / 4611686014132420609) SUBPIECE (ARG1 / 2147483647) 0
(f() + 40) CAST (f() + 40)
0 INT_SLESS ((2047 & (ARG1 / 4611686014132420609)) + -1023) 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
((2047 & (ARG1 / 4611686014132420609)) + -1023) INT_SUB (2047 & (ARG1 / 4611686014132420609)) -1023
 CBRANCH (ARG1 INT_SLESS 0)
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
 BRANCH VZERO
0 INT_SLESS ((2047 & (ARG1 / 4611686014132420609)) + -1023) 52
 CBRANCH (((2047 & (ARG1 / 4611686014132420609)) + -1023) INT_SLESS 52)
(4503599627370496 | (ARG1 & 4503599627370495)) INT_OR (ARG1 & 4503599627370495) 4503599627370496
 BRANCH VZERO
((2047 & (ARG1 / 4611686014132420609)) + 1075) CAST ((2047 & (ARG1 / 4611686014132420609)) + 1075)
 CBRANCH (ARG1 INT_SLESS 0)
ARG3 CAST ARG3
0 INT_SLESS ARG1 0
 CBRANCH (((2047 & (ARG1 / 4611686014132420609)) + 1075) INT_SLESS ARG3)
(((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647) SUBPIECE ((2047 & (ARG1 / 4611686014132420609)) + -1023) 0
((2047 & (ARG1 / 4611686014132420609)) + 1075) INT_SUB (2047 & (ARG1 / 4611686014132420609)) 1075
0 INT_SLESS ((2047 & (ARG1 / 4611686014132420609)) + 1075) ARG3
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG2
(RSP + -72) PTRSUB RSP -72
(RSP + -56) PTRSUB RSP -56
(RSP + -72) PTRSUB RSP -72
(52 - (((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647)) INT_SUB 52 (((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647)
 CALL func (RSP + -72)
(RSP + -72) PTRSUB RSP -72
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) (RSP + -72) ((((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647) + 4294967244) (RSP + -72)
((((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647) + 4294967244) INT_ADD (((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647) 4294967244
(RSP + -56) PTRSUB RSP -56
(((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647) SUBPIECE ((2047 & (ARG1 / 4611686014132420609)) + -1023) 0
(RSP + -72) PTRSUB RSP -72
(RSP + -56) PTRSUB RSP -56
f(ARG1) INT_RIGHT (4503599627370496 | (ARG1 & 4503599627370495)) (63 & (52 - (((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647)))
(63 & (52 - (((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647))) INT_AND (52 - (((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647)) 63
(52 - (((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647)) INT_SUB 52 (((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -72) (RSP + -56) (RSP + -56)
f(ARG1) INT_RIGHT (4503599627370496 | (ARG1 & 4503599627370495)) (63 & (52 - (((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647)))
(63 & (52 - (((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647))) INT_AND (52 - (((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647)) 63
 BRANCH VZERO
 CALL func (RSP + -56)
0 INT_SLESS ARG1 0
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
 BRANCH VZERO
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG2
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 RETURN 0 f(ARG1)
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() * 8) INT_MULT f() 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) INT_ADD (f() * 8) [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
f() INT_ZEXT f()
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
9218868437227405312 COPY 9218868437227405312
 RETURN 0 9218868437227405312
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
 CALL func (RSP + -56) ARG1 ARG1
 CALL func ARG1 0
f() CALL func ARG1
 CALL func ARG1 0
f() CALL func ARG1 ([ARG1] + 4294967295) ([ARG1] + 4294967295)
 CALL func (RSP + -56) ARG1 ARG1
0 INT_EQUAL ARG2 0
0 INT_EQUAL ARG2 0
0 INT_EQUAL ARG2 1
0 INT_EQUAL f() 0
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH f()
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
(f() + 40) INT_ADD f() 40
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) CAST (f() + 40)
0 INT_EQUAL f() 0
 CBRANCH (ARG2 INT_EQUAL 0)
 BRANCH VZERO
 BRANCH VZERO
0 INT_LESS 64 f()
1 COPY 1
 CBRANCH (64 INT_LESS f())
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (f() INT_LESS 1024)
(f() + 1) INT_SUB f() 1
0 INT_NOTEQUAL f() 0
f() CALL func (f() + 1)
 CBRANCH (ARG2 INT_EQUAL 1)
 CBRANCH (f() INT_EQUAL 1)
 CALL func
 BRANCH VZERO
 BRANCH VZERO
 CALL func
hiWord > 0 && "huh?" COPY hiWord > 0 && "huh?"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 RETURN 1
double llvm::APInt::roundToDouble(bool) const COPY double llvm::APInt::roundToDouble(bool) const
 CALL libcall___assert_fail_thunk hiWord > 0 && "huh?" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 915 double llvm::APInt::roundToDouble(bool) const
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CBRANCH (ARG2 INT_EQUAL 0)
([ARG1] + 4294967295) INT_ADD [ARG1] 4294967295
0 COPY 0
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -56)
0 INT_LESS f() 1024
0 INT_EQUAL f() 0
0 INT_EQUAL f() 1
f() CALL func ARG3
0 INT_LESSEQUAL [ARG2] ARG3
0 INT_EQUAL ARG3 0
0 INT_LESS ARG3 65
 CALL func (RSP + -40) f() ARG3
(ARG3 / 64) INT_RIGHT ARG3 6
 CALL func ARG1 ARG3 [f(ARG2)] 0
(~(ARG3) + 1) INT_2COMP ARG3
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -40) (RSP + -40)
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f(ARG2) CALL func ARG2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([ARG2] INT_LESSEQUAL ARG3)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ((ARG3 / 64) INT_NOTEQUAL f())
([(ARG2 + 8)] + (f() * 8)) CAST ([(ARG2 + 8)] + (f() * 8))
0 INT_NOTEQUAL (ARG3 / 64) f()
(ARG2 + 8) CAST (ARG2 + 8)
(f() * 8) INT_MULT f() 8
([(ARG2 + 8)] + (f() * 8)) INT_ADD [(ARG2 + 8)] (f() * 8)
 STORE 433 (A_Stack[-0x20]:8 + (f() * 8)) [([(ARG2 + 8)] + (f() * 8))]
f() INT_ZEXT f()
(A_Stack[-0x20]:8 + (f() * 8)) CAST (A_Stack[-0x20]:8 + (f() * 8))
[([(ARG2 + 8)] + (f() * 8))] LOAD 433 ([(ARG2 + 8)] + (f() * 8))
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(A_Stack[-0x20]:8 + (f() * 8)) INT_ADD (f() * 8) A_Stack[-0x20]:8
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 CALL libcall___assert_fail_thunk width < BitWidth && "Invalid APInt Truncate request" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 933 llvm::APInt llvm::APInt::trunc(unsigned int) const
width < BitWidth && "Invalid APInt Truncate request" COPY width < BitWidth && "Invalid APInt Truncate request"
llvm::APInt llvm::APInt::trunc(unsigned int) const COPY llvm::APInt llvm::APInt::trunc(unsigned int) const
 CBRANCH (ARG3 INT_EQUAL 0)
 CBRANCH ((63 & (~(ARG3) + 1)) INT_NOTEQUAL 0)
 STORE 433 (A_Stack[-0x20]:8 + (f() * 8)) f(ARG2 , ARG3)
(f() * 8) INT_MULT f() 8
([([(ARG2 + 8)] + (f() * 8))] << ((63 & (~(ARG3) + 1)) / 2147483647)) INT_LEFT [([(ARG2 + 8)] + (f() * 8))] ((63 & (~(ARG3) + 1)) / 2147483647)
((63 & (~(ARG3) + 1)) / 2147483647) SUBPIECE (63 & (~(ARG3) + 1)) 0
([(ARG2 + 8)] + (f() * 8)) INT_ADD [(ARG2 + 8)] (f() * 8)
([(ARG2 + 8)] + (f() * 8)) CAST ([(ARG2 + 8)] + (f() * 8))
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
f(ARG2 , ARG3) INT_RIGHT ([([(ARG2 + 8)] + (f() * 8))] << ((63 & (~(ARG3) + 1)) / 2147483647)) ((63 & (~(ARG3) + 1)) / 2147483647)
(f() * 8) INT_MULT f() 8
[([(ARG2 + 8)] + (f() * 8))] LOAD 433 ([(ARG2 + 8)] + (f() * 8))
f() INT_ZEXT f()
(A_Stack[-0x20]:8 + (f() * 8)) INT_ADD (f() * 8) A_Stack[-0x20]:8
([([(ARG2 + 8)] + (f() * 8))] << ((63 & (~(ARG3) + 1)) / 2147483647)) CAST ([([(ARG2 + 8)] + (f() * 8))] << ((63 & (~(ARG3) + 1)) / 2147483647))
(ARG2 + 8) CAST (ARG2 + 8)
f() INT_ZEXT f()
(A_Stack[-0x20]:8 + (f() * 8)) CAST (A_Stack[-0x20]:8 + (f() * 8))
 CBRANCH (ARG3 INT_LESS 65)
0 INT_NOTEQUAL (63 & (~(ARG3) + 1)) 0
(63 & (~(ARG3) + 1)) INT_AND (~(ARG3) + 1) 63
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
0 COPY 0
(RSP + -40) PTRSUB RSP -40
f() CALL func f()
f(ARG2) CAST f(ARG2)
 BRANCH VZERO
[f(ARG2)] LOAD 433 f(ARG2)
(RSP + -40) PTRSUB RSP -40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CALL libcall___assert_fail_thunk width && "Can't truncate to 0 bits" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 934 llvm::APInt llvm::APInt::trunc(unsigned int) const
[(f() + 40)] LOAD 433 (f() + 40)
llvm::APInt llvm::APInt::trunc(unsigned int) const COPY llvm::APInt llvm::APInt::trunc(unsigned int) const
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
width && "Can't truncate to 0 bits" COPY width && "Can't truncate to 0 bits"
0 INT_LESS ARG3 65
(ARG3 / 64) INT_RIGHT ARG3 6
 CALL func (RSP + -40) f() ARG3
f() CALL func ARG3
(ARG3 / 2147483647) SUBPIECE ARG3 0
 CALL func ARG1 ARG3 f(ARG2 , ARG3) 0
0 INT_LESSEQUAL ARG3 [ARG2]
(~(ARG3) + 1) INT_2COMP ARG3
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -40) (RSP + -40)
f(ARG2) CALL func ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
f(ARG2) CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (ARG3 INT_LESSEQUAL [ARG2])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ((63 & (~(ARG3) + 1)) INT_NOTEQUAL 0)
((63 & (~(ARG3) + 1)) / 2147483647) SUBPIECE (63 & (~(ARG3) + 1)) 0
(f(ARG2) << ((63 & (~(ARG3) + 1)) / 2147483647)) CAST (f(ARG2) << ((63 & (~(ARG3) + 1)) / 2147483647))
(f(ARG2) << ((63 & (~(ARG3) + 1)) / 2147483647)) INT_LEFT f(ARG2) ((63 & (~(ARG3) + 1)) / 2147483647)
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
((f() * 8) + f()) CAST ((f() * 8) + f())
((f() * 8) + f()) INT_ADD (f() * 8) f()
 STORE 433 ((f() * 8) + f()) ((f(ARG2) << ((63 & (~(ARG3) + 1)) / 2147483647)) >> ((63 & (~(ARG3) + 1)) / 2147483647))
((f(ARG2) << ((63 & (~(ARG3) + 1)) / 2147483647)) >> ((63 & (~(ARG3) + 1)) / 2147483647)) INT_RIGHT (f(ARG2) << ((63 & (~(ARG3) + 1)) / 2147483647)) ((63 & (~(ARG3) + 1)) / 2147483647)
[(f() + 40)] LOAD 433 (f() + 40)
 CALL libcall___assert_fail_thunk width > BitWidth && "Invalid APInt SignExtend request" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 956 llvm::APInt llvm::APInt::sext(unsigned int) const
llvm::APInt llvm::APInt::sext(unsigned int) const COPY llvm::APInt llvm::APInt::sext(unsigned int) const
width > BitWidth && "Invalid APInt SignExtend request" COPY width > BitWidth && "Invalid APInt SignExtend request"
 CBRANCH (ARG3 INT_LESS 65)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
 RETURN 1
(f() + 40) CAST (f() + 40)
 CBRANCH ((63 & (~([ARG2]) + 1)) INT_EQUAL 0)
([(f(ARG2) + (f() * 8))] << ((63 & (~([ARG2]) + 1)) / 2147483647)) INT_LEFT [(f(ARG2) + (f() * 8))] ((63 & (~([ARG2]) + 1)) / 2147483647)
[(f(ARG2) + (f() * 8))] LOAD 433 (f(ARG2) + (f() * 8))
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
(f(ARG2) + (f() * 8)) CAST (f(ARG2) + (f() * 8))
(f(ARG2) + (f() * 8)) INT_ADD (f() * 8) f(ARG2)
f(ARG2) INT_SRIGHT ([(f(ARG2) + (f() * 8))] << ((63 & (~([ARG2]) + 1)) / 2147483647)) ((63 & (~([ARG2]) + 1)) / 2147483647)
(f(ARG2) / 2147483647) INT_SRIGHT f(ARG2) 63
 BRANCH VZERO
((63 & (~([ARG2]) + 1)) / 2147483647) SUBPIECE (63 & (~([ARG2]) + 1)) 0
 CBRANCH ((ARG3 / 64) INT_NOTEQUAL f())
(f(ARG2) / 2147483647) INT_SRIGHT f(ARG2) 63
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
0 INT_NOTEQUAL (ARG3 / 64) f()
(f() + 1) INT_ADD f() 1
((f() * 8) + f()) INT_ADD (f() * 8) f()
((f() * 8) + f()) CAST ((f() * 8) + f())
 BRANCH VZERO
 STORE 433 ((f() * 8) + f()) f(ARG2)
(63 & (~([ARG2]) + 1)) INT_AND (~([ARG2]) + 1) 63
0 INT_NOTEQUAL (63 & (~(ARG3) + 1)) 0
(64 - (ARG3 / 2147483647)) INT_SUB 64 (ARG3 / 2147483647)
0 COPY 0
(63 & (~(ARG3) + 1)) INT_AND (~(ARG3) + 1) 63
(~([ARG2]) + 1) INT_2COMP [ARG2]
(RSP + -40) PTRSUB RSP -40
((ARG3 / 2147483647) - ([ARG2] / 2147483647)) INT_SUB (ARG3 / 2147483647) ([ARG2] / 2147483647)
([ARG2] / 2147483647) SUBPIECE [ARG2] 0
([ARG2] / 64) INT_RIGHT [ARG2] 6
([(ARG2 + 8)] << (63 & (64 - ([ARG2] / 2147483647)))) INT_LEFT [(ARG2 + 8)] (63 & (64 - ([ARG2] / 2147483647)))
0 COPY 0
(63 & (64 - ([ARG2] / 2147483647))) INT_AND (64 - ([ARG2] / 2147483647)) 63
 CALL func (RSP + -40)
f(ARG2 , ARG3) CAST f(ARG2 , ARG3)
f(ARG2 , ARG3) INT_RIGHT f(ARG2 , ARG3) (63 & (64 - (ARG3 / 2147483647)))
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(63 & (64 - (ARG3 / 2147483647))) INT_AND (64 - (ARG3 / 2147483647)) 63
(ARG2 + 8) CAST (ARG2 + 8)
([ARG2] / 2147483647) SUBPIECE [ARG2] 0
0 INT_EQUAL (63 & (~([ARG2]) + 1)) 0
 BRANCH VZERO
f(ARG2 , ARG3) INT_SRIGHT ([(ARG2 + 8)] << (63 & (64 - ([ARG2] / 2147483647)))) (63 & ((ARG3 / 2147483647) - ([ARG2] / 2147483647)))
(64 - ([ARG2] / 2147483647)) INT_SUB 64 ([ARG2] / 2147483647)
(63 & ((ARG3 / 2147483647) - ([ARG2] / 2147483647))) INT_AND ((ARG3 / 2147483647) - ([ARG2] / 2147483647)) 63
0 INT_NOTEQUAL ([ARG2] / 64) f()
f() CALL func f()
(RSP + -40) PTRSUB RSP -40
 CBRANCH (([ARG2] / 64) INT_NOTEQUAL f())
(RSP + -40) PTRSUB RSP -40
[(f(ARG2) + (f() * 8))] LOAD 433 (f(ARG2) + (f() * 8))
f() INT_ZEXT f()
 STORE 433 ((f() * 8) + f()) [(f(ARG2) + (f() * 8))]
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
((f() * 8) + f()) INT_ADD (f() * 8) f()
(f(ARG2) + (f() * 8)) CAST (f(ARG2) + (f() * 8))
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
((f() * 8) + f()) CAST ((f() * 8) + f())
(f() * 8) INT_MULT f() 8
(f(ARG2) + (f() * 8)) INT_ADD (f() * 8) f(ARG2)
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG3 ARG2
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 ARG2 ARG3 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
0 INT_LESS ARG3 [ARG2]
0 INT_LESS [ARG2] ARG3
 CBRANCH ([ARG2] INT_LESS ARG3)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH (ARG3 INT_LESS [ARG2])
 BRANCH VZERO
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 BRANCH VZERO
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 ARG2 ARG3 ARG2
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
0 INT_LESS [ARG2] ARG3
0 INT_LESS ARG3 [ARG2]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH ([ARG2] INT_LESS ARG3)
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CBRANCH (ARG3 INT_LESS [ARG2])
 BRANCH VZERO
 BRANCH VZERO
 CALL func ARG1 ARG2 ARG3 ARG2
 CALL func ARG1 ARG2 ARG2
ARG1 COPY ARG1
[ARG2] LOAD 433 ARG2
0 INT_LESS [ARG2] ARG3
 CBRANCH ([ARG2] INT_LESS ARG3)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 BRANCH VZERO
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 ARG1
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
[ARG2] LOAD 433 ARG2
0 INT_LESS [ARG2] ARG3
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
 CBRANCH ([ARG2] INT_LESS ARG3)
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
(f() + 40) CAST (f() + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 BRANCH VZERO
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CALL func ARG1 [ARG2] 0 0
ARG1 COPY ARG1
 CALL func ARG1 [ARG2] -1 1
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 [ARG2] f(ARG2 , ARG3) 0
 CALL func ARG1 [ARG2] 0 0
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
(ARG3 / 2147483647) SUBPIECE ARG3 0
0 INT_EQUAL ARG3 0
(ARG3 & 63) INT_AND ARG3 63
0 INT_EQUAL [ARG2] ARG3
(ARG3 / 64) INT_RIGHT ARG3 6
0 INT_EQUAL [ARG2] ARG3
0 INT_LESS [ARG2] ARG3
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([ARG2] INT_LESS ARG3)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_LESS 64)
(-1 << (63 & (f() / 2147483647))) INT_LEFT -1 (63 & (f() / 2147483647))
((f() - (ARG3 / 64)) + -1) INT_ZEXT ((f() - (ARG3 / 64)) + -1)
 STORE 433 ((((f() - (ARG3 / 64)) + -1) * 8) + f()) ([((((f() - (ARG3 / 64)) + -1) * 8) + f())] | (-1 << (63 & (f() / 2147483647))))
(63 & (f() / 2147483647)) INT_AND (f() / 2147483647) 63
((((f() - (ARG3 / 64)) + -1) * 8) + f()) INT_ADD f() (((f() - (ARG3 / 64)) + -1) * 8)
((((f() - (ARG3 / 64)) + -1) * 8) + f()) INT_ADD (((f() - (ARG3 / 64)) + -1) * 8) f()
((((f() - (ARG3 / 64)) + -1) * 8) + f()) CAST ((((f() - (ARG3 / 64)) + -1) * 8) + f())
f() CAST f()
([((((f() - (ARG3 / 64)) + -1) * 8) + f())] | (-1 << (63 & (f() / 2147483647)))) INT_OR (-1 << (63 & (f() / 2147483647))) [((((f() - (ARG3 / 64)) + -1) * 8) + f())]
[((((f() - (ARG3 / 64)) + -1) * 8) + f())] LOAD 433 ((((f() - (ARG3 / 64)) + -1) * 8) + f())
(((f() - (ARG3 / 64)) + -1) * 8) INT_MULT ((f() - (ARG3 / 64)) + -1) 8
((f() - (ARG3 / 64)) + -1) INT_ZEXT ((f() - (ARG3 / 64)) + -1)
(((f() - (ARG3 / 64)) + -1) * 8) INT_MULT ((f() - (ARG3 / 64)) + -1) 8
 BRANCH VZERO
((((f() - (ARG3 / 64)) + -1) * 8) + f()) CAST ((((f() - (ARG3 / 64)) + -1) * 8) + f())
f() CAST f()
 CBRANCH (0 INT_EQUAL [(f() + 40)])
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (((f() - (ARG3 / 64)) + -1) INT_NOTEQUAL 0)
(-1 << (63 & (((f() / 2147483647) - ((ARG3 & 63) / 2147483647)) + 64))) INT_LEFT -1 (63 & (((f() / 2147483647) - ((ARG3 & 63) / 2147483647)) + 64))
 STORE 433 ((((f() - (ARG3 / 64)) + 2) * 8) + f()) f(ARG3)
(((f() / 2147483647) - ((ARG3 & 63) / 2147483647)) + 64) INT_ADD ((f() / 2147483647) - ((ARG3 & 63) / 2147483647)) 64
(63 & (((f() / 2147483647) - ((ARG3 & 63) / 2147483647)) + 64)) INT_AND (((f() / 2147483647) - ((ARG3 & 63) / 2147483647)) + 64) 63
((((f() - (ARG3 / 64)) + 2) * 8) + f()) INT_ADD (((f() - (ARG3 / 64)) + 2) * 8) f()
((f() - (ARG3 / 64)) + 2) INT_SUB (f() - (ARG3 / 64)) 2
(((f() - (ARG3 / 64)) + 2) * 8) INT_MULT ((f() - (ARG3 / 64)) + 2) 8
((((f() - (ARG3 / 64)) + 2) * 8) + f()) INT_ADD f() (((f() - (ARG3 / 64)) + 2) * 8)
((f() / 2147483647) - ((ARG3 & 63) / 2147483647)) INT_SUB (f() / 2147483647) ((ARG3 & 63) / 2147483647)
((((f() - (ARG3 / 64)) + 2) * 8) + f()) CAST ((((f() - (ARG3 / 64)) + 2) * 8) + f())
((f() - (ARG3 / 64)) + 2) INT_SUB (f() - (ARG3 / 64)) 2
f() CAST f()
[((((f() - (ARG3 / 64)) + 2) * 8) + f())] LOAD 433 ((((f() - (ARG3 / 64)) + 2) * 8) + f())
((((f() - (ARG3 / 64)) + 2) * 8) + f()) CAST ((((f() - (ARG3 / 64)) + 2) * 8) + f())
((f() - (ARG3 / 64)) + 2) INT_ZEXT ((f() - (ARG3 / 64)) + 2)
(((f() - (ARG3 / 64)) + 2) * 8) INT_MULT ((f() - (ARG3 / 64)) + 2) 8
f() CAST f()
f(ARG3) INT_OR (-1 << (63 & (((f() / 2147483647) - ((ARG3 & 63) / 2147483647)) + 64))) [((((f() - (ARG3 / 64)) + 2) * 8) + f())]
((f() - (ARG3 / 64)) + 2) INT_ZEXT ((f() - (ARG3 / 64)) + 2)
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
 BRANCH VZERO
 CBRANCH (f(ARG3) INT_LESS f())
f(ARG3) INT_ZEXT f(ARG3)
(f(ARG3) * 8) INT_MULT f(ARG3) 8
((f(ARG3) * 8) + f()) INT_ADD (f(ARG3) * 8) f()
((f(ARG3) * 8) + f()) CAST ((f(ARG3) * 8) + f())
f() CAST f()
 STORE 433 ((f(ARG3) * 8) + f()) f()
(f(ARG3) + 1) INT_ADD f(ARG3) 1
 BRANCH VZERO
0 INT_LESS f(ARG3) f()
 CBRANCH ([ARG2] INT_EQUAL ARG3)
(RSP + -40) PTRSUB RSP -40
0 INT_LESS f() 1143914305352105985
f() INT_ZEXT f()
0 INT_EQUAL f() 0
f() CALL libcall_operator.new[]_thunk f()
(f() - (ARG3 / 64)) INT_SUB f() (ARG3 / 64)
 CBRANCH (f() INT_LESS 1143914305352105985)
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
(RSP + -40) PTRSUB RSP -40
0 INT_EQUAL f() 0
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
0 INT_EQUAL f() 0
f() CALL func [ARG2]
 CBRANCH ((ARG3 & 63) INT_EQUAL 0)
0 INT_EQUAL (ARG3 & 63) 0
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
 CALL func (RSP + -40) f() [ARG2] f()
(f() / 2147483647) SUBPIECE f() 0
((f() - (ARG3 / 64)) + -1) INT_SUB (f() - (ARG3 / 64)) -1
 BRANCH VZERO
(f() * 8) INT_LEFT f() 3
-1 COPY -1
64 COPY 64
 BRANCH VZERO
-1 COPY -1
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (f() INT_LESS (ARG3 & 63))
0 INT_LESS f() (ARG3 & 63)
 CBRANCH ([ARG2] INT_EQUAL ARG3)
(ARG2 + 8) CAST (ARG2 + 8)
([(ARG2 + 8)] << (63 & (64 - ([ARG2] / 2147483647)))) INT_LEFT [(ARG2 + 8)] (63 & (64 - ([ARG2] / 2147483647)))
(63 & (64 - ([ARG2] / 2147483647))) INT_AND (64 - ([ARG2] / 2147483647)) 63
([ARG2] / 2147483647) SUBPIECE [ARG2] 0
(63 & (ARG3 / 2147483647)) INT_AND (ARG3 / 2147483647) 63
 BRANCH VZERO
 BRANCH VZERO
(([(ARG2 + 8)] << (63 & (64 - ([ARG2] / 2147483647)))) >> (63 & (64 - ([ARG2] / 2147483647)))) INT_SRIGHT ([(ARG2 + 8)] << (63 & (64 - ([ARG2] / 2147483647)))) (63 & (64 - ([ARG2] / 2147483647)))
(63 & (64 - ([ARG2] / 2147483647))) INT_AND (64 - ([ARG2] / 2147483647)) 63
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
f(ARG2 , ARG3) INT_SRIGHT (([(ARG2 + 8)] << (63 & (64 - ([ARG2] / 2147483647)))) >> (63 & (64 - ([ARG2] / 2147483647)))) (63 & (ARG3 / 2147483647))
(64 - ([ARG2] / 2147483647)) INT_SUB 64 ([ARG2] / 2147483647)
0 INT_NOTEQUAL ((f() - (ARG3 / 64)) + -1) 0
((f() / 2147483647) - ((ARG3 & 63) / 2147483647)) INT_SUB (f() / 2147483647) ((ARG3 & 63) / 2147483647)
 STORE 433 ((((f() - (ARG3 / 64)) + -1) * 8) + f()) f(ARG3)
((((f() - (ARG3 / 64)) + -1) * 8) + f()) INT_ADD (((f() - (ARG3 / 64)) + -1) * 8) f()
(((f() - (ARG3 / 64)) + -1) * 8) INT_MULT ((f() - (ARG3 / 64)) + -1) 8
((((f() - (ARG3 / 64)) + -1) * 8) + f()) CAST ((((f() - (ARG3 / 64)) + -1) * 8) + f())
((f() - (ARG3 / 64)) + -1) INT_ZEXT ((f() - (ARG3 / 64)) + -1)
f() CAST f()
((((f() - (ARG3 / 64)) + -1) * 8) + f()) CAST ((((f() - (ARG3 / 64)) + -1) * 8) + f())
f() CAST f()
((f() - (ARG3 / 64)) + -1) INT_ZEXT ((f() - (ARG3 / 64)) + -1)
((((f() - (ARG3 / 64)) + -1) * 8) + f()) INT_ADD f() (((f() - (ARG3 / 64)) + -1) * 8)
(-1 << (63 & ((f() / 2147483647) - ((ARG3 & 63) / 2147483647)))) INT_LEFT -1 (63 & ((f() / 2147483647) - ((ARG3 & 63) / 2147483647)))
(((f() - (ARG3 / 64)) + -1) * 8) INT_MULT ((f() - (ARG3 / 64)) + -1) 8
[((((f() - (ARG3 / 64)) + -1) * 8) + f())] LOAD 433 ((((f() - (ARG3 / 64)) + -1) * 8) + f())
(63 & ((f() / 2147483647) - ((ARG3 & 63) / 2147483647))) INT_AND ((f() / 2147483647) - ((ARG3 & 63) / 2147483647)) 63
 BRANCH VZERO
f(ARG3) INT_OR (-1 << (63 & ((f() / 2147483647) - ((ARG3 & 63) / 2147483647)))) [((((f() - (ARG3 / 64)) + -1) * 8) + f())]
((((f() - (ARG3 / 64)) + -1) * 8) + f()) CAST ((((f() - (ARG3 / 64)) + -1) * 8) + f())
((((f() - (ARG3 / 64)) + -1) * 8) + f()) INT_ADD f() (((f() - (ARG3 / 64)) + -1) * 8)
((f() - (ARG3 / 64)) + -1) INT_ZEXT ((f() - (ARG3 / 64)) + -1)
(((f() - (ARG3 / 64)) + -1) * 8) INT_MULT ((f() - (ARG3 / 64)) + -1) 8
f() CAST f()
 STORE 433 ((((f() - (ARG3 / 64)) + -1) * 8) + f()) -1
 CBRANCH (f() INT_EQUAL 0)
(f() + 40) INT_ADD f() 40
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
shiftAmt <= BitWidth && "Invalid shift amount" COPY shiftAmt <= BitWidth && "Invalid shift amount"
llvm::APInt llvm::APInt::ashr(unsigned int) const COPY llvm::APInt llvm::APInt::ashr(unsigned int) const
0 INT_EQUAL 0 [(f() + 40)]
 RETURN 1
[(f() + 40)] LOAD 433 (f() + 40)
 CALL libcall___assert_fail_thunk shiftAmt <= BitWidth && "Invalid shift amount" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1052 llvm::APInt llvm::APInt::ashr(unsigned int) const
 CBRANCH (ARG3 INT_EQUAL 0)
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_LESS f() 64
0 INT_EQUAL f() 0
 BRANCH VZERO
((f() - (ARG3 / 64)) + -1) INT_ZEXT ((f() - (ARG3 / 64)) + -1)
(((ARG3 / 64) + f()) * 8) INT_MULT ((ARG3 / 64) + f()) 8
((ARG3 / 64) + f()) INT_ZEXT ((ARG3 / 64) + f())
([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8)) CAST ([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))
([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8)) INT_ADD [(ARG2 + 8)] (((ARG3 / 64) + f()) * 8)
 STORE 433 ((((f() - (ARG3 / 64)) + -1) * 8) + f()) ([([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1)) * 8))] >> ((ARG3 & 63) / 2147483647))
([([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1)) * 8))] >> ((ARG3 & 63) / 2147483647)) INT_RIGHT [([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1)) * 8))] ((ARG3 & 63) / 2147483647)
((((f() - (ARG3 / 64)) + -1) * 8) + f()) CAST ((((f() - (ARG3 / 64)) + -1) * 8) + f())
(f() + 1) INT_ADD f() 1
0 COPY 0
 BRANCH VZERO
([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8)) INT_ADD [(ARG2 + 8)] (((ARG3 / 64) + f()) * 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
0 INT_NOTEQUAL f() 0
[([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))] LOAD 433 ([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))
([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8)) CAST ([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))
0 INT_NOTEQUAL f() 0
((ARG3 & 63) / 2147483647) SUBPIECE (ARG3 & 63) 0
([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1)) * 8)) INT_ADD [(ARG2 + 8)] (((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1)) * 8)
(((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1)) * 8) INT_MULT ((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1)) 8
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
((f() * 8) + f()) INT_ADD (f() * 8) f()
f() CAST f()
(f() * 8) INT_MULT f() 8
(((ARG3 / 64) + f()) * 8) INT_MULT ((ARG3 / 64) + f()) 8
((ARG3 / 64) + f()) INT_ZEXT ((ARG3 / 64) + f())
[([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1)) * 8))] LOAD 433 ([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1)) * 8))
([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1)) * 8)) CAST ([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1)) * 8))
f() INT_ZEXT f()
(ARG2 + 8) CAST (ARG2 + 8)
f() CAST f()
((ARG3 / 64) + f()) INT_ADD (ARG3 / 64) f()
0 COPY 0
(f() + 1) INT_ADD f() 1
((f() * 8) + f()) CAST ((f() * 8) + f())
((f() * 8) + f()) INT_ADD (f() * 8) f()
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 STORE 433 ((f() * 8) + f()) [([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))]
[([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))] LOAD 433 ([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))
(((ARG3 / 64) + f()) + 1) INT_ADD ((ARG3 / 64) + f()) 1
((ARG3 / 64) + f()) INT_ADD (ARG3 / 64) f()
(((ARG3 / 64) + f()) + 1) INT_ZEXT (((ARG3 / 64) + f()) + 1)
((f() * 8) + f()) CAST ((f() * 8) + f())
(ARG2 + 8) CAST (ARG2 + 8)
((((ARG3 / 64) + f()) + 1) * 8) INT_MULT (((ARG3 / 64) + f()) + 1) 8
([([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))] >> ((ARG3 & 63) / 2147483647)) INT_RIGHT [([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))] ((ARG3 & 63) / 2147483647)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
([([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8))] << (63 & (64 - ((ARG3 & 63) / 2147483647)))) INT_LEFT [([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8))] (63 & (64 - ((ARG3 & 63) / 2147483647)))
(63 & (64 - ((ARG3 & 63) / 2147483647))) INT_AND (64 - ((ARG3 & 63) / 2147483647)) 63
[([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8))] LOAD 433 ([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8))
(ARG2 + 8) CAST (ARG2 + 8)
(64 - ((ARG3 & 63) / 2147483647)) INT_SUB 64 ((ARG3 & 63) / 2147483647)
((((f() - (ARG3 / 64)) + -1) * 8) + f()) INT_ADD (((f() - (ARG3 / 64)) + -1) * 8) f()
f() CAST f()
f(ARG2 , ARG3) INT_OR ([([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8))] << (63 & (64 - ((ARG3 & 63) / 2147483647)))) ([([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))] >> ((ARG3 & 63) / 2147483647))
 STORE 433 ((f() * 8) + f()) f(ARG2 , ARG3)
([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8)) INT_ADD [(ARG2 + 8)] ((((ARG3 / 64) + f()) + 1) * 8)
([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8)) CAST ([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8))
f() INT_ZEXT f()
((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1)) INT_ZEXT ((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1))
((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1)) INT_ADD (ARG3 / 64) ((f() - (ARG3 / 64)) + -1)
0 INT_LESS f() ((f() - (ARG3 / 64)) + -1)
(f() * 8) INT_MULT f() 8
0 INT_LESSEQUAL f() ((f() - (ARG3 / 64)) + -1)
((ARG3 / 64) + f()) INT_ADD (ARG3 / 64) f()
 CBRANCH (f() INT_LESS ((f() - (ARG3 / 64)) + -1))
 CBRANCH (f() INT_LESSEQUAL ((f() - (ARG3 / 64)) + -1))
 BRANCH VZERO
(((f() - (ARG3 / 64)) + -1) * 8) INT_MULT ((f() - (ARG3 / 64)) + -1) 8
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 INT_LESS 64 f()
 BRANCH VZERO
 RETURN 0 f(ARG1)
 CBRANCH (64 INT_LESS f())
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 1
[[(ARG1 + 8)]] LOAD 433 [(ARG1 + 8)]
 CALL libcall___assert_fail_thunk 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h 1330 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 COPY 0
0 COPY 0
(ARG1 + 8) CAST (ARG1 + 8)
f(ARG1) CALL func ARG1
f(ARG1) CALL func ARG1
f() CALL func ARG1
0 INT_LESSEQUAL f(ARG1) ARG2
0 INT_LESS f() 65
 RETURN 0 f(ARG1 , ARG2)
 CBRANCH (f() INT_LESS 65)
 CBRANCH (f(ARG1) INT_LESSEQUAL ARG2)
 BRANCH VZERO
 CALL func ARG1 ARG2 f(ARG2 , ARG3) ARG2
ARG1 COPY ARG1
[ARG2] LOAD 433 ARG2
f(ARG2 , ARG3) CALL func ARG3 [ARG2] [ARG2]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[40] LOAD 433 40
40 CAST 40
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
 CALL func ARG1 ARG2 f(ARG2 , ARG3) ARG2
[ARG2] LOAD 433 ARG2
f(ARG2 , ARG3) CALL func ARG3 [ARG2] [ARG2]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
 CALL func ARG1 ARG2 f(ARG2 , ARG3) ARG2
[ARG2] LOAD 433 ARG2
f(ARG2 , ARG3) CALL func ARG3 [ARG2] [ARG2]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 ARG2 f(ARG2 , ARG3) ARG2
ARG1 COPY ARG1
[ARG2] LOAD 433 ARG2
f(ARG2 , ARG3) CALL func ARG3 [ARG2] [ARG2]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[40] LOAD 433 40
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
(ARG3 % [ARG2]) INT_REM ARG3 [ARG2]
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -56) (RSP + -40) (RSP + -56)
 CALL func ARG1 ARG2 ARG2
 CALL func (RSP + -40) ARG2 ([ARG2] - (ARG3 % [ARG2])) ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
 CALL func (RSP + -56) ARG2 (ARG3 % [ARG2]) ARG2
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_NOTEQUAL 0 [(f() + 40)]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
 CBRANCH ((ARG3 % [ARG2]) INT_EQUAL 0)
0 INT_EQUAL (ARG3 % [ARG2]) 0
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
([ARG2] - (ARG3 % [ARG2])) INT_SUB [ARG2] (ARG3 % [ARG2])
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -56)
 CALL func ARG1 ARG2 f(ARG2 , ARG3) ARG2
ARG1 COPY ARG1
[ARG2] LOAD 433 ARG2
f(ARG2 , ARG3) CALL func ARG3 [ARG2] [ARG2]
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[40] LOAD 433 40
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
f(ARG2) CALL func ARG1 ARG2 ARG2
f() CALL func ARG1 ARG2 ARG2
0 INT_EQUAL f(ARG2) 0
 CBRANCH (f(ARG2) INT_EQUAL 0)
 RETURN 0 0
1 COPY 1
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 RETURN 0 1
0 COPY 0
 CALL func ARG1 [ARG2] ([[(ARG2 + 8)]] / [[(ARG3 + 8)]]) 0
 CALL func ARG1 [ARG2] 1 0
 CALL func ARG1 [ARG2] 0 0
 CALL func ARG1 [ARG2] ([(ARG2 + 8)] / [(ARG3 + 8)]) 0
 CALL func ARG1 [ARG2] 0 0
 CALL func ARG1 (RSP + -56) (RSP + -56)
ARG1 COPY ARG1
[ARG2] LOAD 433 ARG2
f(ARG3) CALL func ARG2 ARG3 ARG3
f(ARG3) CALL func ARG2 ARG3 ARG3
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
f() CALL func ARG2
 CALL func (RSP + -40) ARG2 ARG2
[ARG2] LOAD 433 ARG2
(ARG3 + 8) PTRADD ARG3 2 4
 CALL func (RSP + -40) f() ARG3 f() (RSP + -56) 0
[ARG3] LOAD 433 ARG3
(ARG3 + 8) PTRADD ARG3 2 4
(ARG3 + 8) PTRADD ARG3 2 4
f() CALL func ARG3
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [ARG2] [ARG3]
 CBRANCH ([ARG2] INT_NOTEQUAL [ARG3])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 1)
[[(ARG3 + 8)]] LOAD 433 [(ARG3 + 8)]
(RSP + -56) PTRSUB RSP -56
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
([[(ARG2 + 8)]] / [[(ARG3 + 8)]]) INT_DIV [[(ARG2 + 8)]] [[(ARG3 + 8)]]
[[(ARG2 + 8)]] LOAD 433 [(ARG2 + 8)]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) 1 0 0
(RSP + -40) PTRSUB RSP -40
(ARG3 + 8) CAST (ARG3 + 8)
(RSP + -40) PTRSUB RSP -40
(ARG2 + 8) CAST (ARG2 + 8)
 CALL func (RSP + -40)
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
 CBRANCH (f() INT_EQUAL 0)
f() CALL func (f() + 4294967295)
 BRANCH VZERO
0 COPY 0
(f() + 4294967295) INT_ADD f() 4294967295
(f() + 1) INT_ADD f() 1
 CBRANCH (f() INT_LESS f())
1 COPY 1
0 INT_NOTEQUAL f(ARG3) 0
 CBRANCH (f(ARG3) INT_NOTEQUAL 0)
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH ([(ARG3 + 8)] INT_EQUAL 0)
0 INT_EQUAL f() 0
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
0 INT_EQUAL [(ARG3 + 8)] 0
0 INT_EQUAL f() 0
(ARG3 + 8) CAST (ARG3 + 8)
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
0 INT_LESS f() f()
 CBRANCH f()
0 INT_EQUAL f() 0
[(f() + 40)] LOAD 433 (f() + 40)
 RETURN 1
rhsWords && "Divided by zero???" COPY rhsWords && "Divided by zero???"
llvm::APInt llvm::APInt::udiv(const llvm::APInt&) const COPY llvm::APInt llvm::APInt::udiv(const llvm::APInt&) const
 CALL libcall___assert_fail_thunk rhsWords && "Divided by zero???" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1851 llvm::APInt llvm::APInt::udiv(const llvm::APInt&) const
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_EQUAL f() 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_EQUAL 0)
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
([(ARG2 + 8)] / [(ARG3 + 8)]) INT_DIV [(ARG2 + 8)] [(ARG3 + 8)]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 RETURN 1
 CALL libcall___assert_fail_thunk RHS.VAL != 0 && "Divide by zero?" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1844 llvm::APInt llvm::APInt::udiv(const llvm::APInt&) const
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
 BRANCH VZERO
(ARG3 + 8) CAST (ARG3 + 8)
RHS.VAL != 0 && "Divide by zero?" COPY RHS.VAL != 0 && "Divide by zero?"
llvm::APInt llvm::APInt::udiv(const llvm::APInt&) const COPY llvm::APInt llvm::APInt::udiv(const llvm::APInt&) const
(ARG2 + 8) CAST (ARG2 + 8)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
0 COPY 0
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
0 INT_EQUAL f(ARG3) 0
 CBRANCH (f(ARG3) INT_EQUAL 0)
 BRANCH VZERO
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be the same" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1840 llvm::APInt llvm::APInt::udiv(const llvm::APInt&) const
llvm::APInt llvm::APInt::udiv(const llvm::APInt&) const COPY llvm::APInt llvm::APInt::udiv(const llvm::APInt&) const
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
BitWidth == RHS.BitWidth && "Bit widths must be the same" COPY BitWidth == RHS.BitWidth && "Bit widths must be the same"
 RETURN 1
0 INT_NOTEQUAL f() 0
 BRANCH VZERO
0 INT_EQUAL f() 1
(f() + 4294967295) INT_ADD f() 4294967295
(f() + 1) INT_ADD f() 1
f() CALL func (f() + 4294967295)
 BRANCH VZERO
0 COPY 0
ARG1 COPY ARG1
 CALL func ARG1 ARG2 (RSP + -40) ARG2
[ARG2] LOAD 433 ARG2
 CALL func (RSP + -40) [ARG2] ARG3 0
(RSP + -40) PTRSUB RSP -40
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 40
(RSP + -40) PTRSUB RSP -40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
(RSP + -40) PTRSUB RSP -40
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 (RSP + -136) 1 (RSP + -136)
 CALL func ARG1 [ARG2] f() 0
 CALL func ARG1 (RSP + -136) (RSP + -136)
 CALL func ARG1 [ARG2] [(f(ARG2) + Symbol)] 0
 CALL func ARG1 (RSP + -136) (RSP + -136)
ARG1 COPY ARG1
f() CALL func ARG2 (RSP + -72) (RSP + -72)
 CALL func (RSP + -40) ARG2 (RSP + -88) ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
 CALL func (RSP + -72) ARG2 (RSP + -136) ARG2
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
f() CALL func ARG2 (RSP + -152) (RSP + -152)
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f(RSP) CALL func ARG2 (RSP + -88) (RSP + -88)
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
 CBRANCH (f() INT_LESS 6)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_LESS f() 6
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
(ARG2 + 8) CAST (ARG2 + 8)
[[(ARG2 + 8)]] LOAD 433 [(ARG2 + 8)]
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 BRANCH VZERO
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CBRANCH f()
 CALL func (RSP + -40) (RSP + -152) 2 (RSP + -152)
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -152) (RSP + -40) (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -152) PTRSUB RSP -152
(f() + 2) INT_ADD f() 2
 CBRANCH (f() INT_LESS [ARG2])
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
 BRANCH VZERO
0 INT_LESS f() [ARG2]
(RSP + -40) PTRSUB RSP -40
 CBRANCH (f() INT_NOTEQUAL 1)
(RSP + -40) PTRSUB RSP -40
(RSP + -120) PTRSUB RSP -120
(f() + 40) CAST (f() + 40)
f(RSP) CALL func (RSP + -40) (RSP + -56) (RSP + -56)
 CALL func (RSP + -152)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -104) PTRSUB RSP -104
(RSP + -104) PTRSUB RSP -104
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -88)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
 CALL func (RSP + -136)
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -56) (RSP + -40) (RSP + -104) (RSP + -40)
 RETURN 1
 CALL func (RSP + -72)
(RSP + -72) PTRSUB RSP -72
 CALL libcall___assert_fail_thunk this->ule(nextSquare) && "Error in APInt::sqrt computation" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1361 llvm::APInt llvm::APInt::sqrt() const
(RSP + -88) PTRSUB RSP -88
llvm::APInt llvm::APInt::sqrt() const COPY llvm::APInt llvm::APInt::sqrt() const
(RSP + -152) PTRSUB RSP -152
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
(RSP + -88) PTRSUB RSP -88
(RSP + -72) PTRSUB RSP -72
this->ule(nextSquare) && "Error in APInt::sqrt computation" COPY this->ule(nextSquare) && "Error in APInt::sqrt computation"
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -120)
(RSP + -40) PTRSUB RSP -40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(RSP + -136) PTRSUB RSP -136
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f(RSP) INT_EQUAL 0)
(RSP + -40) PTRSUB RSP -40
0 INT_EQUAL f(RSP) 0
 CALL func (RSP + -104)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
 CALL func (RSP + -40) (RSP + -72) (RSP + -88) (RSP + -72)
Symbol PTRSUB 0 Symbol
0 INT_EQUAL f() 0
0 INT_LESS 51 f()
(f(ARG2) + Symbol) PTRADD Symbol f(ARG2) 1
[(f(ARG2) + Symbol)] LOAD 433 (f(ARG2) + Symbol)
 BRANCH VZERO
 CBRANCH (51 INT_LESS f())
 CBRANCH (4890909195324358656 FLOAT_LESSEQUAL f())
 BRANCH VZERO
f() TRUNC f()
0 INT_XOR (f() + 4890909195324358656) -9223372036854775808
(f() + 4890909195324358656) FLOAT_SUB f() 4890909195324358656
(f() + 4890909195324358656) TRUNC (f() + 4890909195324358656)
 CBRANCH (f(RSP) INT_EQUAL 0)
(RSP + -136) PTRSUB RSP -136
0 INT_NOTEQUAL f() 1
(RSP + -72) PTRSUB RSP -72
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -40) (RSP + -56) (RSP + -104) (RSP + -56)
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL f() 0
(RSP + -120) PTRSUB RSP -120
(RSP + -136) PTRSUB RSP -136
(RSP + -40) PTRSUB RSP -40
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -40)
f() CALL func (RSP + -136) (RSP + -120) (RSP + -120)
(RSP + -136) PTRSUB RSP -136
(RSP + -72) PTRSUB RSP -72
(RSP + -56) PTRSUB RSP -56
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -120) (RSP + -40) (RSP + -40)
 BRANCH VZERO
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -56) (RSP + -72) (RSP + -136) (RSP + -72)
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -136) (RSP + -120) (RSP + -120)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -72)
(RSP + -136) PTRSUB RSP -136
(RSP + -40) PTRSUB RSP -40
(RSP + -120) PTRSUB RSP -120
(RSP + -72) PTRSUB RSP -72
(RSP + -152) PTRSUB RSP -152
 BRANCH VZERO
1 COPY 1
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH ([[(ARG2 + 8)]] INT_SLESS 0)
 BRANCH VZERO
(1 & ([[(ARG2 + 8)]] / 2147483647)) INT_ZEXT (1 & ([[(ARG2 + 8)]] / 2147483647))
([[(ARG2 + 8)]] / 2147483647) SUBPIECE [[(ARG2 + 8)]] 0
[[(ARG2 + 8)]] INT2FLOAT [[(ARG2 + 8)]]
(([[(ARG2 + 8)]] / 2) | (1 & ([[(ARG2 + 8)]] / 2147483647))) INT_OR ([[(ARG2 + 8)]] / 2) (1 & ([[(ARG2 + 8)]] / 2147483647))
(1 & ([[(ARG2 + 8)]] / 2147483647)) INT_AND ([[(ARG2 + 8)]] / 2147483647) 1
f(ARG2) FLOAT_ADD (([[(ARG2 + 8)]] / 2) | (1 & ([[(ARG2 + 8)]] / 2147483647))) (([[(ARG2 + 8)]] / 2) | (1 & ([[(ARG2 + 8)]] / 2147483647)))
(([[(ARG2 + 8)]] / 2) | (1 & ([[(ARG2 + 8)]] / 2147483647))) INT2FLOAT (([[(ARG2 + 8)]] / 2) | (1 & ([[(ARG2 + 8)]] / 2147483647)))
([[(ARG2 + 8)]] / 2) INT_RIGHT [[(ARG2 + 8)]] 1
 CBRANCH (f() INT_EQUAL 0)
[[(ARG2 + 8)]] LOAD 433 [(ARG2 + 8)]
[(ARG2 + 8)] CAST [(ARG2 + 8)]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
[[(ARG2 + 8)]] CAST [[(ARG2 + 8)]]
0 INT_SLESS [(ARG2 + 8)] 0
0 INT_SLESS [[(ARG2 + 8)]] 0
 CBRANCH ([(ARG2 + 8)] INT_SLESS 0)
(ARG2 + 8) CAST (ARG2 + 8)
([(ARG2 + 8)] / 2147483647) SUBPIECE [(ARG2 + 8)] 0
(([(ARG2 + 8)] / 2) | (1 & ([(ARG2 + 8)] / 2147483647))) INT_OR ([(ARG2 + 8)] / 2) (1 & ([(ARG2 + 8)] / 2147483647))
 BRANCH VZERO
 BRANCH VZERO
(1 & ([(ARG2 + 8)] / 2147483647)) INT_AND ([(ARG2 + 8)] / 2147483647) 1
[(ARG2 + 8)] INT2FLOAT [(ARG2 + 8)]
([(ARG2 + 8)] / 2) INT_RIGHT [(ARG2 + 8)] 1
(([(ARG2 + 8)] / 2) | (1 & ([(ARG2 + 8)] / 2147483647))) INT2FLOAT (([(ARG2 + 8)] / 2) | (1 & ([(ARG2 + 8)] / 2147483647)))
f(ARG2) FLOAT_ADD (([(ARG2 + 8)] / 2) | (1 & ([(ARG2 + 8)] / 2147483647))) (([(ARG2 + 8)] / 2) | (1 & ([(ARG2 + 8)] / 2147483647)))
(1 & ([(ARG2 + 8)] / 2147483647)) INT_ZEXT (1 & ([(ARG2 + 8)] / 2147483647))
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 BRANCH VZERO
(RSP + -136) PTRSUB RSP -136
(RSP + -136) PTRSUB RSP -136
f() CALL libcall_round_thunk f()
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -88) (RSP + -136) (RSP + -136) (RSP + -136)
(RSP + -136) PTRSUB RSP -136
f() CALL libcall_sqrt_thunk f(ARG2)
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -136) (RSP + -40) (RSP + -40)
 CALL func (RSP + -56)
4 COPY 4
0 INT_EQUAL f() 0
 BRANCH VZERO
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -72) (RSP + -56) (RSP + -40) (RSP + -56)
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -40) (RSP + -136) 1 (RSP + -136)
(RSP + -120) PTRSUB RSP -120
(RSP + -136) PTRSUB RSP -136
(RSP + -136) PTRSUB RSP -136
(RSP + -40) PTRSUB RSP -40
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40)
 BRANCH VZERO
 CALL func (RSP + -40)
 CALL func (RSP + -120) [ARG2] 0 0
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -56) (RSP + -136) 1 (RSP + -136)
(RSP + -104) PTRSUB RSP -104
(RSP + -56) PTRSUB RSP -56
0 INT_EQUAL f(RSP) 0
0 FLOAT_LESSEQUAL 4890909195324358656 f()
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -104) [ARG2] 2 0
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -152) [ARG2] 16 0
(RSP + -40) PTRSUB RSP -40
(RSP + -72) PTRSUB RSP -72
(RSP + -88) PTRSUB RSP -88
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -40) (RSP + -136) (f() / 2) (RSP + -136)
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -136) [ARG2] 1 0
(RSP + -40) PTRSUB RSP -40
(f() / 2) INT_RIGHT f() 1
(RSP + -56) PTRSUB RSP -56
0 COPY 0
f() CALL func ARG1
f(ARG2) CALL func ARG1 ARG2 ARG2
 CALL func ARG4 ARG1 ARG1
f() CALL func ARG1
f(ARG2) CALL func ARG1 ARG2 ARG2
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
 CALL func (RSP + -56) ARG1 ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG2 + 8) PTRADD ARG2 2 4
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
 CALL func (RSP + -56) f() ARG2 f() ARG3 ARG4
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
(ARG2 + 8) PTRADD ARG2 2 4
 CALL func ARG3 0
 CALL func ARG3 1
 CALL func ARG3 (RSP + -56) (RSP + -56)
 CALL func ARG3 (RSP + -56) (RSP + -56)
 CALL func ARG3 0
 CALL func ARG4 0
 CALL func ARG4 (RSP + -56) (RSP + -56)
 CALL func ARG4 0
 CALL func ARG4 (RSP + -56) (RSP + -56)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [ARG1] [ARG2]
 CBRANCH ([ARG1] INT_NOTEQUAL [ARG2])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH f()
 BRANCH VZERO
 CBRANCH (f(ARG2) INT_EQUAL 0)
0 INT_EQUAL f(ARG2) 0
 CBRANCH (f() INT_EQUAL 1)
 CBRANCH (f() INT_EQUAL 1)
(RSP + -56) PTRSUB RSP -56
0 INT_EQUAL f() 1
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_EQUAL 0)
(f() + 4294967295) INT_ADD f() 4294967295
(f() + 1) INT_ADD f() 1
0 COPY 0
f() CALL func (f() + 4294967295)
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
[[(ARG2 + 8)]] LOAD 433 [(ARG2 + 8)]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 BRANCH VZERO
(ARG2 + 8) CAST (ARG2 + 8)
 CBRANCH (f() INT_LESS f())
 BRANCH VZERO
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
1 COPY 1
0 INT_NOTEQUAL f(ARG2) 0
 CBRANCH (f() INT_EQUAL 0)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[[(ARG1 + 8)]] LOAD 433 [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
 CALL func (RSP + -56) f() (f(ARG1) % f(ARG2)) 0
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) f() (f(ARG1) / f(ARG2)) 0
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
 BRANCH VZERO
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(f(ARG1) % f(ARG2)) INT_REM f(ARG1) f(ARG2)
(f(ARG1) / f(ARG2)) INT_DIV f(ARG1) f(ARG2)
 CBRANCH (f() INT_NOTEQUAL 0)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
0 INT_EQUAL f() 0
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL [(ARG2 + 8)] 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH ([(ARG2 + 8)] INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() 0
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 1) INT_ADD f() 1
f() CALL func (f() + 4294967295)
 BRANCH VZERO
0 COPY 0
(f() + 4294967295) INT_ADD f() 4294967295
([(ARG1 + 8)] / [(ARG2 + 8)]) INT_DIV [(ARG1 + 8)] [(ARG2 + 8)]
static void llvm::APInt::udivrem(const llvm::APInt&, const llvm::APInt&, llvm::APInt&, llvm::APInt&) COPY static void llvm::APInt::udivrem(const llvm::APInt&, const llvm::APInt&, llvm::APInt&, llvm::APInt&)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 1
RHS.VAL != 0 && "Divide by zero?" COPY RHS.VAL != 0 && "Divide by zero?"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 CALL func (RSP + -56)
 CALL libcall___assert_fail_thunk RHS.VAL != 0 && "Divide by zero?" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1941 static void llvm::APInt::udivrem(const llvm::APInt&, const llvm::APInt&, llvm::APInt&, llvm::APInt&)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] % [(ARG2 + 8)]) INT_REM [(ARG1 + 8)] [(ARG2 + 8)]
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(ARG2 + 8) CAST (ARG2 + 8)
 CALL func (RSP + -56) [ARG1] ([(ARG1 + 8)] % [(ARG2 + 8)]) 0
(ARG1 + 8) CAST (ARG1 + 8)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
 BRANCH VZERO
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CALL func (RSP + -56) [ARG1] ([(ARG1 + 8)] / [(ARG2 + 8)]) 0
(ARG2 + 8) CAST (ARG2 + 8)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
0 INT_NOTEQUAL f() 0
 RETURN 1
 CALL libcall___assert_fail_thunk LHS.BitWidth == RHS.BitWidth && "Bit widths must be the same" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1937 static void llvm::APInt::udivrem(const llvm::APInt&, const llvm::APInt&, llvm::APInt&, llvm::APInt&)
static void llvm::APInt::udivrem(const llvm::APInt&, const llvm::APInt&, llvm::APInt&, llvm::APInt&) COPY static void llvm::APInt::udivrem(const llvm::APInt&, const llvm::APInt&, llvm::APInt&, llvm::APInt&)
LHS.BitWidth == RHS.BitWidth && "Bit widths must be the same" COPY LHS.BitWidth == RHS.BitWidth && "Bit widths must be the same"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 BRANCH VZERO
0 INT_LESS f() f()
 BRANCH VZERO
0 INT_EQUAL f() 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
0 COPY 0
f(ARG1) CALL func ARG1 ARG2 ARG2
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
0 INT_EQUAL [(ARG1 + 8)] ARG2
 RETURN 0 f(ARG1)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] & -256) INT_AND [(ARG1 + 8)] -256
0 INT_ZEXT 0
([(ARG1 + 8)] & -256) INT_OR ([(ARG1 + 8)] & -256) 0
f(ARG1) CALL func ARG1 ARG2 ARG2
0 INT_XOR f(ARG1) 1
0 COPY 0
 RETURN 0 0
 CALL func ARG1 ((f() * 16) + (RSP + -72)) ARG3 ((f() * 16) + (RSP + -72))
 CALL func ARG1 [ARG2] 0 0
 CALL func ARG1 ((f() * 16) + (RSP + -72)) ((f() * 16) + (RSP + -72))
ARG1 COPY ARG1
f(ARG3) CALL func ARG2 ARG3 ARG3
[ARG2] LOAD 433 ARG2
 CALL func (RSP + -88) ARG2 (RSP + -88)
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
 CALL func (RSP + -104) ARG3
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL f(ARG3) 1
 CBRANCH (f(ARG3) INT_NOTEQUAL 1)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -136) PTRSUB RSP -136
f() INT_ZEXT f()
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CALL func (RSP + -56) [ARG2] 1 0
0 INT_MULT 0 16
(RSP + -72) PTRSUB RSP -72
(RSP + -40) PTRSUB RSP -40
f() CALL func ((f() * 16) + (RSP + -104)) 1 (f() * 16)
0 INT_ZEXT 0
 CALL func (RSP + -136) [ARG2] 0 0
0 COPY 0
(RSP + -88) PTRSUB RSP -88
f() CALL func (RSP + -104) 0 0
0 INT_NOTEQUAL f(RSP) (RSP + -104)
 CBRANCH (f(RSP) INT_NOTEQUAL (RSP + -104))
(RSP + -104) PTRSUB RSP -104
(RSP + -72) PTRSUB RSP -72
(RSP + -104) PTRSUB RSP -104
llvm::APInt llvm::APInt::multiplicativeInverse(const llvm::APInt&) const COPY llvm::APInt llvm::APInt::multiplicativeInverse(const llvm::APInt&) const
ult(modulo) && "This APInt must be smaller than the modulo" COPY ult(modulo) && "This APInt must be smaller than the modulo"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
(f() + 40) CAST (f() + 40)
(RSP + -72) PTRSUB RSP -72
(RSP + -104) PTRSUB RSP -104
(RSP + -104) PTRADD (RSP + -104) 0 1
 CALL func (RSP + -136)
(RSP + -104) PTRSUB RSP -104
((f() * 16) + (RSP + -104)) PTRADD (RSP + -104) (f() * 16) 1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(RSP + -136) PTRSUB RSP -136
 CBRANCH (f() INT_NOTEQUAL [40])
 RETURN 1
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f(RSP) (RSP + -72)
0 INT_NOTEQUAL f() [40]
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f(RSP) INT_NOTEQUAL (RSP + -72))
 CALL libcall___assert_fail_thunk ult(modulo) && "This APInt must be smaller than the modulo" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1375 llvm::APInt llvm::APInt::multiplicativeInverse(const llvm::APInt&) const
0 INT_XOR f() 1
[40] LOAD 433 (f() + 40)
(f() * 16) INT_MULT f() 16
 CALL func (RSP + -72) [ARG2] 0 0
 RETURN 0 ARG1
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
f() INT_ZEXT f()
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRADD (RSP + -72) 0 1
(RSP + -120) PTRSUB RSP -120
0 INT_XOR f() 1
f() INT_ZEXT f()
(RSP + -104) PTRSUB RSP -104
(RSP + -104) PTRADD (RSP + -104) 0 1
(f() * 16) INT_MULT f() 16
 CALL func (RSP + -120)
(f() * 16) INT_MULT f() 16
0 INT_MULT 0 16
(RSP + -120) PTRSUB RSP -120
0 INT_ZEXT 0
(RSP + -72) PTRSUB RSP -72
((f() * 16) + (RSP + -72)) PTRADD (RSP + -72) (f() * 16) 1
 CALL func ((f() * 16) + (RSP + -72)) (RSP + -120) ((f() * 16) + (RSP + -72))
0 INT_MULT 0 16
(RSP + -104) PTRSUB RSP -104
((f() * 16) + (RSP + -104)) PTRADD (RSP + -104) (f() * 16) 1
(f() * 16) INT_MULT f() 16
0 INT_ZEXT 0
(RSP + -136) PTRSUB RSP -136
 CALL func ((f() * 16) + (RSP + -104)) (RSP + -104) (RSP + -136) ((f() * 16) + (RSP + -104))
0 INT_XOR f() 1
0 INT_XOR f() 1
(RSP + -104) PTRSUB RSP -104
((f() * 16) + (RSP + -104)) PTRADD (RSP + -104) (f() * 16) 1
 BRANCH VZERO
 CALL func (RSP + -120) (RSP + -72) (RSP + -136)
(RSP + -136) PTRSUB RSP -136
f() INT_ZEXT f()
(RSP + -120) PTRSUB RSP -120
f() INT_ZEXT f()
(RSP + -72) PTRSUB RSP -72
((f() * 16) + (RSP + -72)) PTRADD (RSP + -72) (f() * 16) 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(f() * 16) INT_MULT f() 16
f() CALL func ((f() * 16) + (RSP + -72))
 CALL func (f(RSP) + -16)
(f(RSP) + -16) PTRADD f(RSP) -16 1
 BRANCH VZERO
f() INT_ZEXT f()
f() INT_ZEXT f()
(f() * 16) INT_MULT f() 16
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
((f() * 16) + (RSP + -72)) PTRADD (RSP + -72) (f() * 16) 1
(f() * 16) INT_MULT f() 16
(RSP + -72) PTRSUB RSP -72
((f() * 16) + (RSP + -72)) PTRADD (RSP + -72) (f() * 16) 1
 BRANCH VZERO
 CALL func (f(RSP) + -16)
(f(RSP) + -16) PTRADD f(RSP) -16 1
 CALL func ARG1 ARG2 (RSP + -40) ARG2
ARG1 COPY ARG1
[ARG2] LOAD 433 ARG2
 CALL func (RSP + -40) [ARG2] ARG3 0
40 CAST 40
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -40) PTRSUB RSP -40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
 CALL func (RSP + -40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func ARG1
 RETURN 0
f() CALL func ARG2
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 ARG2 ARG2
ARG1 COPY ARG1
(f() + 40) CAST (f() + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 BRANCH VZERO
f(ARG2) CALL func ARG1 ARG2 ARG2
0 INT_XOR f(ARG2) 1
 RETURN 0 0
0 COPY 0
ARG1 COPY ARG1
 CALL func ARG1 (ARG2 + 4294967295) (ARG2 + 4294967295)
 CALL func ARG1 ARG2 0 0
(ARG2 + 4294967295) INT_ADD ARG2 4294967295
40 INT_ADD 0 40
[40] LOAD 433 40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG2
 CALL func (RSP + -56) ARG2 (f() + 4294967295) ARG2
f() CALL func ARG2
 CALL func (RSP + -40) ARG2 ARG2
f() CALL func ARG2
(ARG1 + 16) INT_ADD ARG1 16
 CALL func (RSP + -40) ARG1 ARG1
 CALL func ARG1 (RSP + -40) (RSP + -40)
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CALL func ARG1
 CBRANCH f()
 CALL func (RSP + -120)
(RSP + -136) PTRSUB RSP -136
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -72)
 CALL func (RSP + -56)
 CALL func (RSP + -136)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(RSP + -200) PTRSUB RSP -200
(RSP + -152) PTRSUB RSP -152
0 INT_EQUAL f() [(f() + 40)]
(RSP + -136) PTRSUB RSP -136
(f() + 40) INT_ADD f() 40
 CALL func (RSP + -40)
 CALL func (RSP + -40)
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -120) (RSP + -40) (RSP + -40)
 CALL func (RSP + -104)
(RSP + -40) PTRSUB RSP -40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -88) PTRSUB RSP -88
(RSP + -104) PTRSUB RSP -104
(RSP + -56) PTRSUB RSP -56
(f() + 1) INT_ADD f() 1
 CALL func (RSP + -56)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) (RSP + -120) 1 (RSP + -120)
(RSP + -120) PTRSUB RSP -120
(RSP + -40) PTRSUB RSP -40
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -184)
 CALL func (RSP + -40) (RSP + -136) 1 (RSP + -136)
 CALL func (RSP + -200)
 CALL func (RSP + -40) (RSP + -88) (RSP + -56) (RSP + -88)
 CALL func (RSP + -40) (RSP + -72) (RSP + -56) (RSP + -72)
(RSP + -88) PTRSUB RSP -88
(RSP + -216) PTRSUB RSP -216
(RSP + -200) PTRSUB RSP -200
(RSP + -40) PTRSUB RSP -40
[(f() + 40)] LOAD 433 (f() + 40)
 CALL func (RSP + -40)
 CALL func (RSP + -152)
(RSP + -168) PTRSUB RSP -168
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -200) (RSP + -40) (RSP + -40)
 CALL func (RSP + -136) (RSP + -40) (RSP + -40)
 CALL func (RSP + -120) (RSP + -40) (RSP + -40)
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -168)
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -216)
(RSP + -40) PTRSUB RSP -40
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -168) (RSP + -40) (RSP + -40)
(RSP + -136) PTRSUB RSP -136
(RSP + -40) PTRSUB RSP -40
(RSP + -216) PTRSUB RSP -216
(RSP + -120) PTRSUB RSP -120
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(RSP + -216) PTRSUB RSP -216
 CALL func (RSP + -152) (RSP + -40) (RSP + -40)
(RSP + -56) PTRSUB RSP -56
(RSP + -136) PTRSUB RSP -136
(ARG1 + 16) CAST (ARG1 + 16)
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -216) (RSP + -40) (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -216) PTRSUB RSP -216
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -40) (RSP + -152) 1 (RSP + -152)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
(RSP + -88) PTRSUB RSP -88
(f() + 4294967295) INT_ADD f() 4294967295
 CALL func (RSP + -40) (RSP + -168) 1 (RSP + -168)
(RSP + -136) PTRSUB RSP -136
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) (RSP + -136) 1 (RSP + -136)
(RSP + -152) PTRSUB RSP -152
(RSP + -88) PTRSUB RSP -88
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CALL func (RSP + -40)
 CALL func (RSP + -40) (RSP + -88) (RSP + -200) (RSP + -88)
(RSP + -216) PTRSUB RSP -216
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
f() CALL func (RSP + -120) (RSP + -216) (RSP + -216)
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -168) (RSP + -40) (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -88) f() f()
(RSP + -56) PTRSUB RSP -56
(RSP + -216) PTRSUB RSP -216
(RSP + -56) PTRSUB RSP -56
(RSP + -200) PTRSUB RSP -200
(RSP + -40) PTRSUB RSP -40
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -152) (RSP + -40) (RSP + -40)
(RSP + -184) PTRSUB RSP -184
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(RSP + -168) PTRSUB RSP -168
(RSP + -40) PTRSUB RSP -40
(RSP + -104) PTRSUB RSP -104
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -56)
 STORE 433 (ARG1 + 16) ((f() + 1) - f())
(RSP + -216) PTRSUB RSP -216
((f() + 1) - f()) INT_SUB (f() + 1) f()
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -40) (RSP + -88) (RSP + -56) (RSP + -88)
 CALL func (RSP + -40)
(RSP + -168) PTRSUB RSP -168
(RSP + -136) PTRSUB RSP -136
(RSP + -88) PTRSUB RSP -88
(RSP + -88) PTRSUB RSP -88
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40)
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -56) (RSP + -168) (RSP + -200) (RSP + -168)
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -120) PTRSUB RSP -120
(RSP + -104) PTRSUB RSP -104
(RSP + -40) PTRSUB RSP -40
(RSP + -168) PTRSUB RSP -168
(RSP + -40) PTRSUB RSP -40
(f() + 4294967295) INT_ADD f() 4294967295
 CALL func (RSP + -40) (RSP + -88) (RSP + -56) (RSP + -88)
f() CALL func (RSP + -152) (RSP + -200) (RSP + -200)
(RSP + -104) PTRSUB RSP -104
(RSP + -152) PTRSUB RSP -152
(RSP + -120) PTRSUB RSP -120
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(RSP + -56) PTRSUB RSP -56
(RSP + -200) PTRSUB RSP -200
(RSP + -168) PTRSUB RSP -168
f(RSP) CALL func (RSP + -168) (RSP + -184) (RSP + -184)
(RSP + -184) PTRSUB RSP -184
(RSP + -40) PTRSUB RSP -40
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -152)
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -56) (RSP + -104) (RSP + -216) (RSP + -104)
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -200)
 CALL func (RSP + -184)
 CALL func (RSP + -72) (RSP + -104) 1 (RSP + -104)
 CBRANCH (f(RSP) INT_EQUAL 0)
 CALL func (RSP + -56) (RSP + -136) (RSP + -216) (RSP + -136)
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -216)
0 INT_EQUAL f(RSP) 0
 CALL func (RSP + -168)
(RSP + -40) PTRSUB RSP -40
(RSP + -216) PTRSUB RSP -216
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -40) (RSP + -88) (RSP + -216) (RSP + -88)
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -104)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) (RSP + -216) (RSP + -120) (RSP + -216)
(f() + 40) CAST (f() + 40)
 CALL func (RSP + -88)
 CALL func (RSP + -104) (RSP + -40) (RSP + -40)
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -136)
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -136) (RSP + -40) (RSP + -40)
 CALL func (RSP + -40)
(RSP + -184) PTRSUB RSP -184
(RSP + -40) PTRSUB RSP -40
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -200) PTRSUB RSP -200
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -184) (RSP + -40) (RSP + -40)
 CALL func (RSP + -120)
 CALL func (RSP + -56)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -152) PTRSUB RSP -152
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 CALL func (RSP + -40) (RSP + -136) 1 (RSP + -136)
(RSP + -136) PTRSUB RSP -136
(RSP + -40) PTRSUB RSP -40
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -136) (RSP + -40) (RSP + -40)
(RSP + -216) PTRSUB RSP -216
(RSP + -40) PTRSUB RSP -40
(RSP + -120) PTRSUB RSP -120
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) (RSP + -120) (RSP + -216) (RSP + -120)
 CALL func (RSP + -40)
 CALL func (RSP + -120) (RSP + -40) (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
(RSP + -120) PTRSUB RSP -120
(RSP + -168) PTRSUB RSP -168
 BRANCH VZERO
f(RSP) CALL func (RSP + -168) (RSP + -184) (RSP + -184)
 CBRANCH (f(RSP) INT_EQUAL 0)
1 COPY 1
(RSP + -184) PTRSUB RSP -184
0 INT_EQUAL f(RSP) 0
(RSP + -152) PTRSUB RSP -152
 CBRANCH (f(RSP) INT_EQUAL 0)
0 COPY 0
0 INT_EQUAL f(RSP) 0
f(RSP) CALL func (RSP + -152) 0
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) (RSP + -152) (RSP + -200) (RSP + -152)
 CALL func (RSP + -152) (RSP + -40) (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -168) (RSP + -40) (RSP + -40)
(RSP + -200) PTRSUB RSP -200
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -40) (RSP + -168) 1 (RSP + -168)
(RSP + -40) PTRSUB RSP -40
(RSP + -168) PTRSUB RSP -168
(RSP + -40) PTRSUB RSP -40
(RSP + -168) PTRSUB RSP -168
 CALL func ARG1 ARG2 -1 1
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG2 + 4294967295) INT_ADD ARG2 4294967295
 CALL func ARG1 ARG2 ARG2
ARG1 COPY ARG1
 CALL func ARG1 (ARG2 + 4294967295) (ARG2 + 4294967295)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1
 RETURN 0
 CALL func ARG1 (RSP + -56) (RSP + -56)
 CALL func ARG1
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG2
 CALL func (RSP + -72) (RSP + -168) ARG2 (RSP + -168)
 CALL func (RSP + -72) (RSP + -88) ARG2 (RSP + -88)
f() CALL func ARG2
 CALL func (RSP + -56) ARG2 (RSP + -152) ARG2
f() CALL func ARG2
 CALL func (RSP + -88) (RSP + -136) ARG2 (RSP + -136)
f() CALL func ARG2
 CALL func (RSP + -72) ARG2 1 ARG2
f() CALL func ARG2
f() CALL func ARG2
 CALL func (RSP + -56) (RSP + -104) ARG2 (RSP + -104)
 CALL func (RSP + -56) (RSP + -72) ARG2 (RSP + -72)
 CALL func (RSP + -136) (RSP + -56) ARG3 (RSP + -56)
(RSP + -104) PTRSUB RSP -104
(RSP + -56) PTRSUB RSP -56
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -120) f() f()
 CALL func (RSP + -72)
 CALL func (RSP + -200)
(RSP + -152) PTRSUB RSP -152
(f() + 1) INT_ADD f() 1
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(RSP + -120) PTRSUB RSP -120
(f() + 40) INT_ADD f() 40
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
 CALL func (RSP + -88)
0 INT_EQUAL f() [(f() + 40)]
(RSP + -232) PTRSUB RSP -232
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -216)
(RSP + -136) PTRSUB RSP -136
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -56) (RSP + -232) (RSP + -184) (RSP + -232)
(RSP + -72) PTRSUB RSP -72
(RSP + -56) PTRSUB RSP -56
(RSP + -184) PTRSUB RSP -184
(f() + -1) INT_SUB f() -1
 STORE 433 (ARG1 + 20) ((f() + 1) - f())
(f() * 2) CAST (f() * 2)
(RSP + -152) PTRSUB RSP -152
(RSP + -56) PTRSUB RSP -56
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -184)
((f() + 1) - f()) INT_SUB (f() + 1) f()
(RSP + -168) PTRSUB RSP -168
(RSP + -200) PTRSUB RSP -200
(RSP + -152) PTRSUB RSP -152
(RSP + -56) PTRSUB RSP -56
(f() * 2) INT_MULT f() 2
 CALL func (RSP + -152) (RSP + -56) (RSP + -56)
 CALL func (RSP + -232) (RSP + -56) (RSP + -56)
(RSP + -168) PTRSUB RSP -168
(RSP + -216) PTRSUB RSP -216
 CALL func (RSP + -56) (RSP + -120) (RSP + -72) (RSP + -120)
 CALL func (RSP + -216)
(RSP + -72) PTRSUB RSP -72
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -72)
[(f() + 40)] LOAD 433 (f() + 40)
 CALL func (RSP + -72)
(ARG1 + 20) CAST (ARG1 + 20)
(RSP + -120) PTRSUB RSP -120
(RSP + -72) PTRSUB RSP -72
(RSP + -136) PTRSUB RSP -136
(RSP + -72) PTRSUB RSP -72
0 INT_LESS (f() + 1) (f() * 2)
 CALL func (RSP + -184) (RSP + -56) (RSP + -56)
 CALL func (RSP + -232)
 CBRANCH ((f() + 1) INT_LESS (f() * 2))
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -56)
 CALL func (RSP + -56)
 CALL func (RSP + -232)
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(RSP + -88) PTRSUB RSP -88
(RSP + -136) PTRSUB RSP -136
(RSP + -72) PTRSUB RSP -72
(RSP + -56) PTRSUB RSP -56
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -168)
(RSP + -56) PTRSUB RSP -56
(RSP + -72) PTRSUB RSP -72
 CBRANCH f()
 CALL func (RSP + -56)
 CALL func (RSP + -216) (RSP + -56) (RSP + -56)
f() CALL func (RSP + -72) (RSP + -56) (RSP + -56)
(f() + 40) CAST (f() + 40)
(RSP + -184) PTRSUB RSP -184
(RSP + -168) PTRSUB RSP -168
(RSP + -184) PTRSUB RSP -184
(RSP + -88) PTRSUB RSP -88
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(RSP + -184) PTRSUB RSP -184
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CALL func (RSP + -56) (RSP + -168) 1 (RSP + -168)
 CALL func (RSP + -56) (RSP + -104) (RSP + -72) (RSP + -104)
(RSP + -104) PTRSUB RSP -104
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -200)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -72) (RSP + -200) (RSP + -232) (RSP + -200)
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -56) (RSP + -136) (RSP + -72) (RSP + -136)
 CALL func (RSP + -56)
 CALL func (RSP + -56) f() f()
(RSP + -56) PTRSUB RSP -56
(RSP + -232) PTRSUB RSP -232
 CALL func (RSP + -72)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -184)
(RSP + -152) PTRSUB RSP -152
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -72)
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(RSP + -72) PTRSUB RSP -72
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -56) (RSP + -120) (RSP + -232) (RSP + -120)
 CALL func (RSP + -168) (RSP + -56) (RSP + -56)
f() CALL func (RSP + -184) (RSP + -56) (RSP + -56)
 CALL func (RSP + -152)
 CALL func (RSP + -120)
(RSP + -56) PTRSUB RSP -56
(RSP + -232) PTRSUB RSP -232
(RSP + -216) PTRSUB RSP -216
(RSP + -200) PTRSUB RSP -200
(RSP + -72) PTRSUB RSP -72
(RSP + -104) PTRSUB RSP -104
(RSP + -232) PTRSUB RSP -232
 CALL func (RSP + -104) f() f()
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -168)
(RSP + -200) PTRSUB RSP -200
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -104)
(RSP + -152) PTRSUB RSP -152
 STORE 433 (ARG1 + 16) 0
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -152)
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -200) (RSP + -56) (RSP + -56)
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -56)
 CALL func (RSP + -56)
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -56) (RSP + -72) (RSP + -152) (RSP + -72)
(RSP + -232) PTRSUB RSP -232
(ARG1 + 16) CAST (ARG1 + 16)
 CALL func (RSP + -72) (RSP + -152) 1 (RSP + -152)
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
(RSP + -136) PTRSUB RSP -136
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -136)
(RSP + -216) PTRSUB RSP -216
(RSP + -232) PTRSUB RSP -232
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f(RSP) INT_NOTEQUAL 0)
f(RSP) CALL func (RSP + -184) 0
0 COPY 0
(RSP + -184) PTRSUB RSP -184
 CBRANCH (f(RSP) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(RSP) 0
 CBRANCH (f(RSP) INT_NOTEQUAL 0)
 BRANCH VZERO
f(RSP) CALL func (RSP + -200) (RSP + -216) (RSP + -216)
0 INT_NOTEQUAL f(RSP) 0
(RSP + -216) PTRSUB RSP -216
(RSP + -200) PTRSUB RSP -200
1 COPY 1
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -56)
(RSP + -72) PTRSUB RSP -72
(RSP + -168) PTRSUB RSP -168
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -72)
(RSP + -56) PTRSUB RSP -56
(RSP + -72) PTRSUB RSP -72
(RSP + -168) PTRSUB RSP -168
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -168) (RSP + -56) (RSP + -56)
 CALL func (RSP + -152) (RSP + -56) (RSP + -56)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
(RSP + -168) PTRSUB RSP -168
(RSP + -120) PTRSUB RSP -120
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -88) (RSP + -152) (RSP + -152) (RSP + -152)
 CALL func (RSP + -56)
(RSP + -152) PTRSUB RSP -152
(RSP + -152) PTRSUB RSP -152
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(RSP + -88) PTRSUB RSP -88
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -72) (RSP + -168) (RSP + -168) (RSP + -168)
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -72)
(RSP + -72) PTRSUB RSP -72
(RSP + -88) PTRSUB RSP -88
f() CALL func (RSP + -168) (RSP + -120) (RSP + -120)
 CALL func (RSP + -152) (RSP + -56) (RSP + -56)
 CALL func (RSP + -72) (RSP + -88) 1 (RSP + -88)
(RSP + -72) PTRSUB RSP -72
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -88)
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
 CALL func (RSP + -56) (RSP + -72) 1 (RSP + -72)
(RSP + -72) PTRSUB RSP -72
(RSP + -88) PTRSUB RSP -88
(RSP + -56) PTRSUB RSP -56
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -72) (RSP + -152) (RSP + -152) (RSP + -152)
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -72)
(RSP + -168) PTRSUB RSP -168
(RSP + -56) PTRSUB RSP -56
(RSP + -152) PTRSUB RSP -152
(RSP + -56) PTRSUB RSP -56
(RSP + -168) PTRSUB RSP -168
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -56) PTRSUB RSP -56
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -168) (RSP + -56) (RSP + -56)
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -56) (RSP + -168) (RSP + -168) (RSP + -168)
(RSP + -168) PTRSUB RSP -168
(RSP + -72) PTRSUB RSP -72
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -168) (RSP + -104) (RSP + -104)
 CALL func (RSP + -56) (RSP + -72) 1 (RSP + -72)
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG1 + 16) 1
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG1 + 16) 1
(RSP + -184) PTRSUB RSP -184
(RSP + -200) PTRSUB RSP -200
(RSP + -56) PTRSUB RSP -56
(RSP + -72) PTRSUB RSP -72
(RSP + -56) PTRSUB RSP -56
(RSP + -72) PTRSUB RSP -72
(RSP + -200) PTRSUB RSP -200
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
 CALL func (RSP + -56) (RSP + -72) 1 (RSP + -72)
 CALL func (RSP + -56)
 CALL func (RSP + -72)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -56) (RSP + -200) (RSP + -200) (RSP + -200)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(RSP + -232) PTRSUB RSP -232
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -184) (RSP + -56) (RSP + -56)
(RSP + -72) PTRSUB RSP -72
(RSP + -200) PTRSUB RSP -200
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -184) (RSP + -56) (RSP + -56)
 CALL func (RSP + -72) (RSP + -184) (RSP + -184) (RSP + -184)
 CALL func (RSP + -56)
(RSP + -200) PTRSUB RSP -200
(RSP + -72) PTRSUB RSP -72
(RSP + -200) PTRSUB RSP -200
(RSP + -200) PTRSUB RSP -200
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -200) (RSP + -56) (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -72) (RSP + -200) (RSP + -200) (RSP + -200)
 CALL func (RSP + -200) (RSP + -56) (RSP + -56)
(RSP + -184) PTRSUB RSP -184
 BRANCH VZERO
(RSP + -184) PTRSUB RSP -184
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -56) (RSP + -72) (RSP + -232) (RSP + -72)
 CALL func (RSP + -72)
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -56) (RSP + -184) (RSP + -184) (RSP + -184)
 RETURN 0 ARG1
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
(RSP + -216) PTRSUB RSP -216
(RSP + -200) PTRSUB RSP -200
0 INT_NOTEQUAL f(RSP) 0
f(RSP) CALL func (RSP + -200) (RSP + -216) (RSP + -216)
 CALL func ARG1 ARG2 ARG3 ARG2
 CALL func (RSP + -56) ARG2 ARG2
 CALL func (RSP + -56) ARG2 ARG2
f() CALL func ARG2
 CALL func (RSP + -40) ARG2 (RSP + -56) ARG2
f() CALL func ARG3
 CALL func (RSP + -40) (RSP + -56) ARG3 (RSP + -56)
f() CALL func ARG3
 CALL func (RSP + -40) ARG3 ARG3
 CALL func (RSP + -56) ARG3 ARG3
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CALL func ARG1 (RSP + -56) (RSP + -40) (RSP + -56)
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL f() 0
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_EQUAL 0)
(f() + 40) CAST (f() + 40)
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (f() INT_EQUAL 0)
 CALL func (RSP + -56)
 BRANCH VZERO
(RSP + -40) PTRSUB RSP -40
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40)
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
 CALL func (RSP + -56)
(RSP + -40) PTRSUB RSP -40
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
 CALL func ARG1 ARG2 ARG3 ARG2
f() CALL func ARG2
 CALL func (RSP + -56) ARG2 ARG2
 CALL func ARG1 ARG2 (RSP + -40) ARG2
 CALL func (RSP + -72) ARG2 ARG2
 CALL func (RSP + -40) ARG3 ARG3
f() CALL func ARG3
 CALL func (RSP + -40) (RSP + -56) ARG3 (RSP + -56)
 CALL func (RSP + -56) ARG3 ARG3
f() CALL func ARG3
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CALL func ARG1 (RSP + -40) (RSP + -40)
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -56)
(RSP + -40) PTRSUB RSP -40
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
(RSP + -72) PTRSUB RSP -72
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(RSP + -72) PTRSUB RSP -72
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
(RSP + -40) PTRSUB RSP -40
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -72)
 CALL func (RSP + -40) (RSP + -72) (RSP + -56) (RSP + -72)
(RSP + -56) PTRSUB RSP -56
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(RSP + -40) PTRSUB RSP -40
 BRANCH VZERO
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
f() CALL func ARG1
 CALL func ARG1 (RSP + -40) ARG3 ARG4
 CALL func (RSP + -56) ARG1 ARG1
 CALL func (RSP + -40) ARG1 ARG1
 CALL func ARG1 ARG2 ARG3 ARG4
 CALL func (RSP + -40) ARG2 ARG2
f() CALL func ARG2
 CALL func (RSP + -40) ARG2 ARG2
 CALL func (RSP + -40) ARG2 ARG3 ARG4
f() CALL func ARG2
 CALL func ARG3 (RSP + -40) (RSP + -40)
 CALL func (RSP + -40) ARG3 ARG3
 CALL func ARG3 (RSP + -40) (RSP + -40)
 CALL func (RSP + -56) (RSP + -40) ARG3 ARG4
 CALL func (RSP + -40) ARG3 ARG3
 CALL func (RSP + -40) ARG4 ARG4
 CALL func ARG4 (RSP + -40) (RSP + -40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
(RSP + -40) PTRSUB RSP -40
0 INT_EQUAL f() 0
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 BRANCH VZERO
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 BRANCH VZERO
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40)
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
f() CALL func ARG1
0 COPY 0
0 INT_XOR f() 1
 RETURN 0 0
ARG1 COPY ARG1
f() CALL func ARG1
 CALL func ARG1 ARG2 ARG3 ARG2
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG3
 STORE 433 ARG4 f()
 CBRANCH (f() INT_EQUAL f())
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL f() f()
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
(f() + 40) CAST (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL f() f()
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL f())
 BRANCH VZERO
1 COPY 1
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
f(ARG3) CALL func ARG1 ARG3 ARG3
 STORE 433 ARG4 f(ARG3)
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 ARG2 ARG3 ARG2
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG3
 STORE 433 ARG4 f()
f() CALL func ARG1
ARG1 COPY ARG1
 CBRANCH (f() INT_NOTEQUAL f())
0 INT_NOTEQUAL f() f()
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 COPY 0
0 INT_NOTEQUAL f() f()
 CBRANCH (f() INT_NOTEQUAL f())
 BRANCH VZERO
1 COPY 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
f() CALL func ARG1 ARG2 ARG2
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
 STORE 433 ARG4 f()
40 INT_ADD 0 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 2 4
 RETURN 0 f(ARG1)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 INT_EQUAL [(ARG1 + 8)] (-1 >> (63 & (64 - ([ARG1] / 2147483647))))
(63 & (64 - ([ARG1] / 2147483647))) INT_AND (64 - ([ARG1] / 2147483647)) 63
0 INT_EQUAL f() [ARG1]
(-256 & (-1 >> (63 & (64 - ([ARG1] / 2147483647))))) INT_OR (-256 & (-1 >> (63 & (64 - ([ARG1] / 2147483647))))) 0
(64 - ([ARG1] / 2147483647)) INT_SUB 64 ([ARG1] / 2147483647)
([ARG1] / 2147483647) SUBPIECE [ARG1] 0
([ARG1] & 4294967040) INT_ZEXT ([ARG1] & 4294967040)
([ARG1] & 4294967040) INT_OR ([ARG1] & 4294967040) 0
([ARG1] & 4294967040) INT_AND [ARG1] 4294967040
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(-256 & (-1 >> (63 & (64 - ([ARG1] / 2147483647))))) INT_AND (-1 >> (63 & (64 - ([ARG1] / 2147483647)))) -256
0 INT_ZEXT 0
(-1 >> (63 & (64 - ([ARG1] / 2147483647)))) INT_RIGHT -1 (63 & (64 - ([ARG1] / 2147483647)))
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_ZEXT 0
0 INT_EQUAL ARG1 0
(ARG1 + 1) INT_SUB ARG1 1
(ARG1 & (ARG1 + 1)) INT_AND (ARG1 + 1) ARG1
 RETURN 0 f()
 CBRANCH (ARG1 INT_EQUAL 0)
0 INT_NOTEQUAL (ARG1 & (ARG1 + 1)) 0
0 COPY 0
 CBRANCH ((ARG1 & (ARG1 + 1)) INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
 RETURN 0 f()
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(f() & -256) INT_AND f() -256
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL (f() / 2147483647) 1
(ARG1 + 8) CAST (ARG1 + 8)
f() CALL func [(ARG1 + 8)]
(f() & -256) INT_OR (f() & -256) 0
0 INT_ZEXT 0
 BRANCH VZERO
f() CALL func ARG1
f() CALL func ARG1
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
1 COPY 1
 RETURN 0 0
 RETURN 0 1
0 COPY 0
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
f() CALL func ARG2
f(ARG3) CALL func ARG3
 STORE 433 ARG4 f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
0 COPY 0
0 INT_NOTEQUAL f(ARG3) 0
 CBRANCH (f(ARG3) INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
f(ARG2) CALL func ARG1 ARG2 ARG2
0 COPY 0
 RETURN 0 0
0 INT_XOR f(ARG2) 1
 CALL func (RSP + -72) ARG1 ARG3 ARG1
 CALL func ARG1 ARG2 ARG3 ARG2
 CALL func (RSP + -56) ARG1 ARG2 ARG1
ARG1 COPY ARG1
f() CALL func ARG2 0
f() CALL func (RSP + -72) ARG2 ARG2
f() CALL func ARG3 0
f() CALL func (RSP + -56) ARG3 ARG3
 STORE 433 ARG4 f()
 STORE 433 ARG4 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 INT_EQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
~(f()) BOOL_NEGATE f()
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
 CBRANCH ~(f())
(FS_OFFSET + 40) INT_ADD 0 40
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH f()
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
1 COPY 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL f() 0
(RSP + -56) PTRSUB RSP -56
0 INT_EQUAL f() 0
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -72)
 BRANCH VZERO
 BRANCH VZERO
0 COPY 0
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
ARG1 COPY ARG1
 CALL func (RSP + -72) ARG1 ARG3 ARG1
 CALL func ARG1 ARG2 ARG3 ARG2
 CALL func (RSP + -56) ARG1 ARG2 ARG1
f() CALL func ARG2 0
f() CALL func (RSP + -72) ARG2 ARG2
f() CALL func (RSP + -56) ARG3 ARG3
f() CALL func ARG3 0
 STORE 433 ARG4 f()
 STORE 433 ARG4 0
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
 CBRANCH ~(f())
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() [(f() + 40)]
0 INT_EQUAL f() 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
~(f()) BOOL_NEGATE f()
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
1 COPY 1
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL f() 0
1 COPY 1
 CALL func (RSP + -72)
0 COPY 0
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
0 INT_EQUAL f() 0
(RSP + -72) PTRSUB RSP -72
 CBRANCH f()
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
0 COPY 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
0 COPY 0
 BRANCH VZERO
1 COPY 1
 RETURN 0 ARG1
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG3 ARG2
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
f(ARG1) CALL func ARG1
f() CALL func ARG1
0 INT_LESS f(ARG1) ARG2
0 INT_LESS f() 65
 CBRANCH (f() INT_LESS 65)
 CBRANCH (f(ARG1) INT_LESS ARG2)
0 COPY 0
1 COPY 1
 RETURN 0 1
 RETURN 0 0
f() CALL func ARG1 ARG2 ARG2
0 COPY 0
0 INT_XOR f() 1
 RETURN 0 0
f() CALL func ARG3 f(ARG2) f(ARG2)
f() CALL func ARG3 f() f()
 CALL func ARG1 ARG2 ARG3 ARG2
f() CALL func ARG3 f() f()
 STORE 433 ARG4 f()
f() LOAD 433 ARG4
 STORE 433 ARG4 f()
 STORE 433 ARG4 f()
ARG1 COPY ARG1
 CALL func ARG1 [ARG2] 0 0
f() CALL func ARG2
f() CALL func ARG2
f(ARG2) CALL func ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
 CBRANCH (f() INT_EQUAL 0)
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 BRANCH VZERO
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
f() CALL func ARG1
0 INT_LESSEQUAL f(ARG1) ARG2
0 INT_LESS f() 65
 CBRANCH (f() INT_LESS 65)
 CBRANCH (f(ARG1) INT_LESSEQUAL ARG2)
1 COPY 1
0 COPY 0
 RETURN 0 0
 RETURN 0 1
ARG1 COPY ARG1
 CALL func ARG1 [ARG2] 0 0
 CALL func ARG1 ARG2 ARG3 ARG2
f() CALL func ARG2
f(ARG2) CALL func ARG2
[ARG2] LOAD 433 ARG2
f() CALL func ARG3 f(ARG2) f(ARG2)
f() CALL func ARG3 f() f()
f() LOAD 433 ARG4
 STORE 433 ARG4 f()
 STORE 433 ARG4 f()
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 BRANCH VZERO
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
f() CALL func ARG1
 RETURN 0 (f(ARG1) + 1)
(f(ARG1) + 1) COPY (f(ARG1) + 1)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(f(ARG1) + 1) INT_ADD f(ARG1) 1
 BRANCH VZERO
([ARG1] - f()) INT_SUB [ARG1] f()
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (64 INT_LESS f())
 RETURN 0 f(ARG1)
 BRANCH VZERO
([(ARG1 + 8)] << (63 & (64 - ([ARG1] / 2147483647)))) INT_LEFT [(ARG1 + 8)] (63 & (64 - ([ARG1] / 2147483647)))
(64 - ([ARG1] / 2147483647)) INT_SUB 64 ([ARG1] / 2147483647)
(ARG1 + 8) CAST (ARG1 + 8)
(63 & (64 - ([ARG1] / 2147483647))) INT_AND (64 - ([ARG1] / 2147483647)) 63
(64 - ([ARG1] / 2147483647)) INT_SUB 64 ([ARG1] / 2147483647)
(([(ARG1 + 8)] << (63 & (64 - ([ARG1] / 2147483647)))) >> (63 & (64 - ([ARG1] / 2147483647)))) INT_SRIGHT ([(ARG1 + 8)] << (63 & (64 - ([ARG1] / 2147483647)))) (63 & (64 - ([ARG1] / 2147483647)))
([ARG1] / 2147483647) SUBPIECE [ARG1] 0
0 INT_LESS 64 f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([ARG1] / 2147483647) SUBPIECE [ARG1] 0
(63 & (64 - ([ARG1] / 2147483647))) INT_AND (64 - ([ARG1] / 2147483647)) 63
0 COPY 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 1
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h
[[(ARG1 + 8)]] LOAD 433 [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
 CALL libcall___assert_fail_thunk 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h 1343 0
0 INT_NOTEQUAL ARG1 ARG2
ARG1 COPY ARG1
(ARG2 + 1) INT_SUB ARG2 1
 RETURN 0
 CBRANCH (ARG1 INT_NOTEQUAL ARG2)
0 INT_LESS f(ARG1) f(ARG2)
 CBRANCH (f(ARG1) INT_LESS f(ARG2))
 BRANCH VZERO
(f(ARG2) + 1) INT_SUB f(ARG2) 1
 CALL func f(ARG1) f(ARG2) f(ARG2)
(f(ARG1) + 1) INT_ADD f(ARG1) 1
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -48) PTRSUB RSP -48
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -48)
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
0 INT_NOTEQUAL ARG5 0
f() CALL func ARG1
 CALL func (RSP + -184) ARG1 ARG1
f() CALL func ARG1
f(ARG1) CALL func ARG1
f(ARG1) CALL func ARG1 0
f(ARG1) CALL func ARG1
f() CALL func ARG2
 CALL func ARG2 f(Symbol) f(Symbol)
 CALL func ARG2 f(Symbol) f(Symbol)
 CALL func ARG2 (RSP + -120) (RSP + -120)
f() CALL func ARG2
 CALL func ARG2 f(RSP) (RSP + -39) ARG2
 CALL func ARG2 (0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ + (([f(RSP)] / 2147483647) & (ARG3 + 1))) (0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ + (([f(RSP)] / 2147483647) & (ARG3 + 1)))
f() CALL func ARG2
 CALL func ARG2 f(Symbol) f(Symbol)
 CALL func ARG2 (RSP + -120) (RSP + -120)
 CALL func ARG2 (RSP + -120) (RSP + -120)
 CALL func ARG2 (f(RSP) + 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ) (f(RSP) + 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ)
0 INT_EQUAL ARG4 1
0 INT_EQUAL ARG4 0
0 INT_EQUAL ARG3 10
0 INT_NOTEQUAL ARG3 16
ARG3 INT_ZEXT ARG3
0 INT_EQUAL ARG3 8
0 INT_EQUAL ARG3 2
(ARG3 + 1) INT_SUB ARG3 1
0 INT_NOTEQUAL ARG3 2
0 INT_LESS ARG3 9
0 INT_EQUAL ARG3 8
0 INT_EQUAL ARG3 2
0 INT_NOTEQUAL ARG3 10
0 INT_EQUAL ARG3 10
0 INT_EQUAL ARG3 8
0 INT_NOTEQUAL ARG3 36
0 INT_LESSEQUAL ARG3 f(RSP)
 CALL func (RSP + -168) f() ARG3 0
ARG3 INT_ZEXT ARG3
0 INT_EQUAL ARG3 16
0 INT_NOTEQUAL ARG3 8
0 INT_EQUAL ARG3 16
0 INT_EQUAL ARG3 16
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG3 INT_NOTEQUAL 10)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (ARG3 INT_EQUAL 2)
f() INT_ZEXT f()
[(f() + 40)] LOAD 433 (f() + 40)
 CALL func (f() + f()) f() f()
(RSP + -184) PTRSUB RSP -184
f() CALL func (RSP + -184) 0
(RSP + -184) PTRSUB RSP -184
(f() + f()) INT_ADD f() f()
 CBRANCH (f(0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ , ARG1 , ARG3) INT_EQUAL [(f() + 40)])
 CBRANCH (ARG3 INT_EQUAL 8)
 CALL func (RSP + -184)
0 INT_EQUAL f(0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ , ARG1 , ARG3) [(f() + 40)]
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (ARG3 INT_EQUAL 16)
 CBRANCH (ARG3 INT_EQUAL 2)
 CALL func Invalid radix! /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2166
Symbol COPY Symbol
 BRANCH VZERO
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
Invalid radix! COPY Invalid radix!
 CBRANCH ([f(Symbol)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [f(Symbol)] 0
 BRANCH VZERO
(f(Symbol) + 1) PTRADD f(Symbol) 1 1
[f(Symbol)] LOAD 433 f(Symbol)
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -120) PTRSUB RSP -120
(RSP + -136) PTRSUB RSP -136
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -120)
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -168)
 CBRANCH (ARG3 INT_LESSEQUAL f(RSP))
f() CALL func (RSP + -184)
 BRANCH VZERO
 CALL func (RSP + -120) (RSP + -184) (RSP + -184)
f() CALL func (RSP + -168)
(RSP + -184) PTRSUB RSP -184
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -120) f() (RSP + -168) f() (RSP + -136) (RSP + -152)
(RSP + -184) PTRSUB RSP -184
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -152) 1 0 0
(RSP + -168) PTRSUB RSP -168
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -136) f() 0 0
(RSP + -168) PTRSUB RSP -168
(RSP + -152) PTRSUB RSP -152
(RSP + -152) PTRSUB RSP -152
f(RSP) CALL func (RSP + -152)
f() CALL func (RSP + -184)
(RSP + -152) PTRSUB RSP -152
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 BRANCH VZERO
 RETURN 1
 CALL func (RSP + -152)
 CALL libcall___assert_fail_thunk Digit < Radix && "divide failed" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2252 void llvm::APInt::toString(llvm::SmallVectorImpl<char>&, unsigned int, bool, bool) const
0 INT_NOTEQUAL f() 0
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ COPY 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ
(RSP + -152) PTRSUB RSP -152
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -184) (RSP + -136) (RSP + -136)
(RSP + -136) PTRSUB RSP -136
(f(RSP) + 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ) PTRADD 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ f(RSP) 1
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -136)
(RSP + -136) PTRSUB RSP -136
f() CALL func (RSP + -184) 0
f(RSP) INT_ZEXT f(RSP)
Digit < Radix && "divide failed" COPY Digit < Radix && "divide failed"
void llvm::APInt::toString(llvm::SmallVectorImpl<char>&, unsigned int, bool, bool) const COPY void llvm::APInt::toString(llvm::SmallVectorImpl<char>&, unsigned int, bool, bool) const
 CBRANCH (ARG3 INT_NOTEQUAL 36)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 RETURN 1
 CALL libcall___assert_fail_thunk (Radix == 10 || Radix == 8 || Radix == 16 || Radix == 2 || Radix == 36) && "Radix should be 2, 8, 10, 16, or 36!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2147 void llvm::APInt::toString(llvm::SmallVectorImpl<char>&, unsigned int, bool, bool) const
(Radix == 10 || Radix == 8 || Radix == 16 || Radix == 2 || Radix == 36) && "Radix should be 2, 8, 10, 16, or 36!" COPY (Radix == 10 || Radix == 8 || Radix == 16 || Radix == 2 || Radix == 36) && "Radix should be 2, 8, 10, 16, or 36!"
void llvm::APInt::toString(llvm::SmallVectorImpl<char>&, unsigned int, bool, bool) const COPY void llvm::APInt::toString(llvm::SmallVectorImpl<char>&, unsigned int, bool, bool) const
 CBRANCH (f(ARG1) INT_EQUAL 0)
Symbol COPY Symbol
0 INT_EQUAL f(ARG1) 0
 CBRANCH (ARG5 INT_NOTEQUAL 0)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (ARG3 INT_LESS 9)
 CBRANCH (ARG3 INT_EQUAL 10)
 CBRANCH (ARG3 INT_NOTEQUAL 8)
 CBRANCH (ARG3 INT_NOTEQUAL 16)
 CBRANCH (ARG3 INT_EQUAL 16)
 CBRANCH (ARG3 INT_EQUAL 10)
(RSP + -168) PTRSUB RSP -168
 CBRANCH (ARG3 INT_EQUAL 16)
 BRANCH VZERO
Symbol COPY Symbol
 CBRANCH ([f(Symbol)] INT_NOTEQUAL 0)
[f(Symbol)] LOAD 433 f(Symbol)
(f(Symbol) + 1) PTRADD f(Symbol) 1 1
0 INT_NOTEQUAL [f(Symbol)] 0
 BRANCH VZERO
 BRANCH VZERO
8 COPY 8
4 COPY 4
 CBRANCH (ARG4 INT_EQUAL 1)
 CBRANCH (f(ARG1) INT_SLESS 0)
0 INT_SLESS f(ARG1) 0
 BRANCH VZERO
f(ARG1) CAST f(ARG1)
 CBRANCH (ARG3 INT_EQUAL 8)
3 COPY 3
 BRANCH VZERO
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
(RSP + -184) PTRSUB RSP -184
(RSP + -39) PTRSUB RSP -39
[f(Symbol)] LOAD 433 f(Symbol)
 BRANCH VZERO
 CBRANCH (ARG4 INT_EQUAL 0)
 CBRANCH f()
(RSP + -39) PTRSUB RSP -39
 CBRANCH (f(ARG1 , ARG3) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG1 , ARG3) 0
0 INT_NOTEQUAL [f(Symbol)] 0
 CBRANCH ([f(Symbol)] INT_NOTEQUAL 0)
 CBRANCH (ARG3 INT_EQUAL 8)
Symbol COPY Symbol
 BRANCH VZERO
 CBRANCH (ARG3 INT_NOTEQUAL 2)
0 INT_EQUAL f() 0
(RSP + -184) PTRSUB RSP -184
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -184)
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -184)
45 COPY 45
[(0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ + (f(ARG1) % ARG3))] LOAD 433 (0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ + (f(ARG1 , ARG3) % ARG3))
 STORE 433 (f(RSP) + -1) [(0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ + (f(ARG1) % ARG3))]
(f(ARG1 , ARG3) / ARG3) INT_DIV f(ARG1 , ARG3) ARG3
(f(ARG1 , ARG3) % ARG3) INT_REM f(ARG1 , ARG3) ARG3
(f(RSP) + -1) PTRADD f(RSP) -1 1
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ COPY 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ
(0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ + (f(ARG1 , ARG3) % ARG3)) PTRADD 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ (f(ARG1 , ARG3) % ARG3) 1
 BRANCH VZERO
(~(f(ARG1)) + 1) INT_2COMP f(ARG1)
45 COPY 45
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -184) (RSP + -120) (RSP + -120)
f(RSP) CALL func (RSP + -184)
f(RSP) CAST f(RSP)
[f(RSP)] LOAD 433 f(RSP)
([f(RSP)] / 2147483647) SUBPIECE [f(RSP)] 0
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -120) (RSP + -184) f() (RSP + -184)
(([f(RSP)] / 2147483647) & (ARG3 + 1)) INT_ZEXT (([f(RSP)] / 2147483647) & (ARG3 + 1))
(RSP + -184) PTRSUB RSP -184
(0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ + (([f(RSP)] / 2147483647) & (ARG3 + 1))) PTRADD 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ (([f(RSP)] / 2147483647) & (ARG3 + 1)) 1
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ COPY 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ
(RSP + -120) PTRSUB RSP -120
(RSP + -120) PTRSUB RSP -120
(RSP + -184) PTRSUB RSP -184
 BRANCH VZERO
 CALL func (RSP + -120)
(RSP + -120) PTRSUB RSP -120
(([f(RSP)] / 2147483647) & (ARG3 + 1)) INT_AND ([f(RSP)] / 2147483647) (ARG3 + 1)
4 COPY 4
(f(Symbol) + 1) PTRADD f(Symbol) 1 1
 BRANCH VZERO
0 INT_EQUAL f() 0
 BRANCH VZERO
(RSP + -120) PTRSUB RSP -120
48 COPY 48
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG1
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -56) f() f() f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
 RETURN 1
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL func ARG1 40
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG2 (RSP + -88) ARG3 ARG4 0
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -104) (RSP + -104)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -88) PTRSUB RSP -88
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
40 CAST 40
(RSP + -104) PTRSUB RSP -104
(f() / 2147483647) SUBPIECE f() 8
(RSP + -88) PTRSUB RSP -88
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
f() CALL func (RSP + -88)
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -88)
 CALL func (RSP + -88)
(RSP + -88) PTRSUB RSP -88
(RSP + -88) PTRSUB RSP -88
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
 RETURN 0 ARG1
(f() / 2147483647) SUBPIECE f() 0
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 ARG2 ARG3 0 0
 RETURN 0
 CALL func ARG1 ARG2 ARG3 1 0
 RETURN 0
 CALL func ARG1 (RSP + -168) 10 (RSP + -168)
[ARG1] LOAD 433 ARG1
 CALL func ARG1 (RSP + -104) 10 (RSP + -104)
 CALL func (RSP + -104)
(RSP + -168) PTRSUB RSP -168
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func f() 4607428
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL func f() [ARG1]
(RSP + -168) PTRSUB RSP -168
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (RSP + -104)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
 CALL func f() 4607431
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
APInt( COPY APInt(
(RSP + -168) PTRSUB RSP -168
f() CALL func f() (RSP + -104) f()
f() CALL func f() APInt(
4607428 PTRSUB 0 4607428
(RSP + -104) PTRSUB RSP -104
[40] LOAD 433 40
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -168)
(RSP + -104) PTRSUB RSP -104
f() CALL func f() (RSP + -168) f()
 CALL func (RSP + -168)
f() CALL func
(RSP + -104) PTRSUB RSP -104
4607431 PTRSUB 0 4607431
f() CALL func f() 4607424
4607424 PTRSUB 0 4607424
(RSP + -168) PTRSUB RSP -168
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALL func ARG1 (RSP + -88) 10 ARG3 0
 CALL func ARG2 (RSP + -88) (RSP + -88)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -88) PTRSUB RSP -88
[40] LOAD 433 40
(RSP + -88) PTRSUB RSP -88
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (RSP + -88)
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -88)
40 CAST 40
(RSP + -88) PTRSUB RSP -88
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -88) PTRSUB RSP -88
40 INT_ADD 0 40
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
(ARG1 / 2147483647) SUBPIECE ARG1 0
0 INT_NOTEQUAL ARG1 0
0 INT_LESS ARG1 65
 CBRANCH (ARG1 INT_NOTEQUAL 0)
 CBRANCH (ARG1 INT_LESS 65)
(63 & (64 - (ARG1 / 2147483647))) INT_AND (64 - (ARG1 / 2147483647)) 63
(64 - (ARG1 / 2147483647)) INT_SUB 64 (ARG1 / 2147483647)
 CALL libcall___assert_fail_thunk bits != 0 && bits <= integerPartWidth /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2300 llvm::integerPart {anonymous}::lowBitMask(unsigned int)
 RETURN 0 (-1 >> (63 & (64 - (ARG1 / 2147483647))))
(-1 >> (63 & (64 - (ARG1 / 2147483647)))) COPY (-1 >> (63 & (64 - (ARG1 / 2147483647))))
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 RETURN 1
llvm::integerPart {anonymous}::lowBitMask(unsigned int) COPY llvm::integerPart {anonymous}::lowBitMask(unsigned int)
(-1 >> (63 & (64 - (ARG1 / 2147483647)))) INT_RIGHT -1 (63 & (64 - (ARG1 / 2147483647)))
bits != 0 && bits <= integerPartWidth COPY bits != 0 && bits <= integerPartWidth
(f() & ARG1) INT_AND f() ARG1
f() CALL func 32
 RETURN 0 (f() & ARG1)
(ARG1 / 2147483647) INT_RIGHT ARG1 32
 RETURN 0 (ARG1 / 2147483647)
f() CALL func ARG1 0
0 INT_EQUAL ARG1 0
0 INT_EQUAL ARG2 1
 RETURN 0 f()
 CBRANCH (ARG2 INT_EQUAL 1)
 CBRANCH (ARG1 INT_EQUAL 0)
f() CALL func
0 INT_XOR f() 63
 BRANCH VZERO
 CALL func ARG1 1
 RETURN 0
0 INT_EQUAL ARG2 1
 CALL func ARG1 0
0 INT_EQUAL ARG1 0
 CBRANCH (ARG2 INT_EQUAL 1)
 RETURN 0
 CBRANCH (ARG1 INT_EQUAL 0)
 BRANCH VZERO
 CALL func
 CALL func ARG1 1
 RETURN 0
 STORE 433 ARG1 ARG2
(ARG1 + (f() * 8)) PTRADD ARG1 f() 8
0 INT_LESS f() ARG3
0 INT_EQUAL ARG3 0
 CBRANCH (ARG3 INT_EQUAL 0)
 CBRANCH (f() INT_LESS ARG3)
f() INT_ZEXT f()
 STORE 433 (ARG1 + (f() * 8)) 0
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
 RETURN 1
1 COPY 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 CALL libcall___assert_fail_thunk parts > 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2343 static void llvm::APInt::tcSet(llvm::integerPart*, llvm::integerPart, unsigned int)
static void llvm::APInt::tcSet(llvm::integerPart*, llvm::integerPart, unsigned int) COPY static void llvm::APInt::tcSet(llvm::integerPart*, llvm::integerPart, unsigned int)
 RETURN 0
parts > 0 COPY parts > 0
(ARG1 + (f() * 8)) INT_ADD (f() * 8) ARG1
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
0 INT_LESS f() ARG3
 RETURN 0
 CBRANCH (f() INT_LESS ARG3)
0 COPY 0
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
 STORE 433 (ARG1 + (f() * 8)) [(ARG2 + (f() * 8))]
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
(f() * 8) INT_MULT f() 8
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
0 INT_LESSEQUAL ARG2 f()
0 COPY 0
 CBRANCH (ARG2 INT_LESSEQUAL f())
 CBRANCH ([(ARG1 + (f() * 8))] INT_NOTEQUAL 0)
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
 RETURN 0 1
0 COPY 0
 RETURN 0 0
1 COPY 1
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
0 INT_NOTEQUAL [(ARG1 + (f() * 8))] 0
(ARG1 + ((ARG2 / 64) * 8)) INT_ADD ARG1 ((ARG2 / 64) * 8)
(ARG2 / 64) INT_RIGHT ARG2 6
(ARG2 / 2147483647) SUBPIECE ARG2 0
 RETURN 0 0
([(ARG1 + ((ARG2 / 64) * 8))] >> (63 & (ARG2 / 2147483647))) INT_RIGHT [(ARG1 + ((ARG2 / 64) * 8))] (63 & (ARG2 / 2147483647))
0 COPY 0
(1 & ([(ARG1 + ((ARG2 / 64) * 8))] >> (63 & (ARG2 / 2147483647)))) INT_AND ([(ARG1 + ((ARG2 / 64) * 8))] >> (63 & (ARG2 / 2147483647))) 1
0 INT_NOTEQUAL (1 & ([(ARG1 + ((ARG2 / 64) * 8))] >> (63 & (ARG2 / 2147483647)))) 0
(63 & (ARG2 / 2147483647)) INT_AND (ARG2 / 2147483647) 63
((ARG2 / 64) * 8) INT_MULT (ARG2 / 64) 8
[(ARG1 + ((ARG2 / 64) * 8))] LOAD 433 (ARG1 + ((ARG2 / 64) * 8))
(ARG2 / 64) INT_ZEXT (ARG2 / 64)
(ARG1 + ((ARG2 / 64) * 8)) CAST (ARG1 + ((ARG2 / 64) * 8))
(ARG1 + ((ARG2 / 64) * 8)) INT_ADD ARG1 ((ARG2 / 64) * 8)
(ARG1 + ((ARG2 / 64) * 8)) INT_ADD ARG1 ((ARG2 / 64) * 8)
(ARG2 / 64) INT_RIGHT ARG2 6
(ARG2 / 2147483647) SUBPIECE ARG2 0
(ARG2 / 64) INT_ZEXT (ARG2 / 64)
 RETURN 0
(ARG2 / 64) INT_ZEXT (ARG2 / 64)
(ARG1 + ((ARG2 / 64) * 8)) CAST (ARG1 + ((ARG2 / 64) * 8))
(63 & (ARG2 / 2147483647)) INT_AND (ARG2 / 2147483647) 63
([(ARG1 + ((ARG2 / 64) * 8))] | (1 << (63 & (ARG2 / 2147483647)))) INT_OR [(ARG1 + ((ARG2 / 64) * 8))] (1 << (63 & (ARG2 / 2147483647)))
((ARG2 / 64) * 8) INT_MULT (ARG2 / 64) 8
((ARG2 / 64) * 8) INT_MULT (ARG2 / 64) 8
[(ARG1 + ((ARG2 / 64) * 8))] LOAD 433 (ARG1 + ((ARG2 / 64) * 8))
(ARG1 + ((ARG2 / 64) * 8)) CAST (ARG1 + ((ARG2 / 64) * 8))
 STORE 433 (ARG1 + ((ARG2 / 64) * 8)) ([(ARG1 + ((ARG2 / 64) * 8))] | (1 << (63 & (ARG2 / 2147483647))))
(1 << (63 & (ARG2 / 2147483647))) INT_LEFT 1 (63 & (ARG2 / 2147483647))
(ARG1 + ((ARG2 / 64) * 8)) INT_ADD ARG1 ((ARG2 / 64) * 8)
(ARG1 + ((ARG2 / 64) * 8)) INT_ADD ARG1 ((ARG2 / 64) * 8)
(ARG2 / 64) INT_RIGHT ARG2 6
(ARG2 / 2147483647) SUBPIECE ARG2 0
((ARG2 / 64) * 8) INT_MULT (ARG2 / 64) 8
[(ARG1 + ((ARG2 / 64) * 8))] LOAD 433 (ARG1 + ((ARG2 / 64) * 8))
~((1 << (63 & (ARG2 / 2147483647)))) INT_NEGATE (1 << (63 & (ARG2 / 2147483647)))
((ARG2 / 64) * 8) INT_MULT (ARG2 / 64) 8
(1 << (63 & (ARG2 / 2147483647))) INT_LEFT 1 (63 & (ARG2 / 2147483647))
(ARG1 + ((ARG2 / 64) * 8)) CAST (ARG1 + ((ARG2 / 64) * 8))
 STORE 433 (ARG1 + ((ARG2 / 64) * 8)) (~((1 << (63 & (ARG2 / 2147483647)))) & [(ARG1 + ((ARG2 / 64) * 8))])
(ARG2 / 64) INT_ZEXT (ARG2 / 64)
 RETURN 0
(63 & (ARG2 / 2147483647)) INT_AND (ARG2 / 2147483647) 63
(~((1 << (63 & (ARG2 / 2147483647)))) & [(ARG1 + ((ARG2 / 64) * 8))]) INT_AND [(ARG1 + ((ARG2 / 64) * 8))] ~((1 << (63 & (ARG2 / 2147483647))))
(ARG2 / 64) INT_ZEXT (ARG2 / 64)
(ARG1 + ((ARG2 / 64) * 8)) CAST (ARG1 + ((ARG2 / 64) * 8))
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
0 INT_LESSEQUAL ARG2 f()
 CBRANCH (ARG2 INT_LESSEQUAL f())
0 COPY 0
((f() * 64) + f()) COPY ((f() * 64) + f())
 RETURN 0 4294967295
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
 RETURN 0 ((f() * 64) + f())
(f() * 8) INT_MULT f() 8
 CBRANCH ([(ARG1 + (f() * 8))] INT_NOTEQUAL 0)
4294967295 COPY 4294967295
0 INT_NOTEQUAL [(ARG1 + (f() * 8))] 0
f() INT_ZEXT f()
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
f() CALL func [(ARG1 + (f() * 8))]
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
((f() * 64) + f()) INT_ADD f() (f() * 64)
(f() * 8) INT_MULT f() 8
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(f() * 64) INT_MULT f() 64
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
f() INT_ZEXT f()
(ARG1 + ((f(ARG2) + -1) * 8)) INT_ADD ARG1 ((f(ARG2) + -1) * 8)
(ARG1 + ((f(ARG2) + -1) * 8)) INT_ADD ARG1 ((f(ARG2) + -1) * 8)
ARG2 COPY ARG2
(ARG1 + ((f(ARG2) + -1) * 8)) CAST (ARG1 + ((f(ARG2) + -1) * 8))
((f(ARG2) + -1) * 8) INT_MULT (f(ARG2) + -1) 8
 CBRANCH ([(ARG1 + ((f(ARG2) + -1) * 8))] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(ARG1 + ((f(ARG2) + -1) * 8))] 0
[(ARG1 + ((f(ARG2) + -1) * 8))] LOAD 433 (ARG1 + ((f(ARG2) + -1) * 8))
(f(ARG2) + -1) INT_SUB f(ARG2) -1
(f(ARG2) + -1) INT_ZEXT (f(ARG2) + -1)
(f(ARG2) + -1) INT_ZEXT (f(ARG2) + -1)
f() CALL func [(ARG1 + ((f(ARG2) + -1) * 8))]
 RETURN 0 (((f(ARG2) + -1) * 64) + f())
(((f(ARG2) + -1) * 64) + f()) COPY (((f(ARG2) + -1) * 64) + f())
(((f(ARG2) + -1) * 64) + f()) INT_ADD f() ((f(ARG2) + -1) * 64)
4294967295 COPY 4294967295
((f(ARG2) + -1) * 8) INT_MULT (f(ARG2) + -1) 8
((f(ARG2) + -1) * 64) INT_MULT (f(ARG2) + -1) 64
[(ARG1 + ((f(ARG2) + -1) * 8))] LOAD 433 (ARG1 + ((f(ARG2) + -1) * 8))
0 INT_NOTEQUAL (f(ARG2) + -1) 0
 RETURN 0 4294967295
 CBRANCH ((f(ARG2) + -1) INT_NOTEQUAL 0)
(ARG1 + ((f(ARG2) + -1) * 8)) CAST (ARG1 + ((f(ARG2) + -1) * 8))
(ARG1 + (f() * 8)) INT_ADD (f() * 8) ARG1
(ARG1 + ((((ARG3 / 64) + f()) + 1) * 8)) INT_ADD ARG1 ((((ARG3 / 64) + f()) + 1) * 8)
(ARG1 + (((ARG3 / 64) + f()) * 8)) INT_ADD ARG1 (((ARG3 / 64) + f()) * 8)
0 INT_LESS ((ARG3 / 64) + f()) ARG2
0 INT_LESS f() ARG2
0 INT_LESS (((ARG3 / 64) + f()) + 1) ARG2
(ARG3 / 64) INT_RIGHT ARG3 6
(ARG3 & 63) INT_AND ARG3 63
0 INT_NOTEQUAL ARG3 0
 RETURN 0
 CBRANCH (ARG3 INT_NOTEQUAL 0)
 CBRANCH (((ARG3 / 64) + f()) INT_LESS ARG2)
0 INT_NOTEQUAL (ARG3 & 63) 0
[(ARG1 + (((ARG3 / 64) + f()) * 8))] LOAD 433 (ARG1 + (((ARG3 / 64) + f()) * 8))
 CBRANCH ((ARG3 & 63) INT_NOTEQUAL 0)
0 COPY 0
((ARG3 / 64) + f()) INT_ZEXT ((ARG3 / 64) + f())
 BRANCH VZERO
((ARG3 / 64) + f()) INT_ADD (ARG3 / 64) f()
(ARG1 + (((ARG3 / 64) + f()) * 8)) CAST (ARG1 + (((ARG3 / 64) + f()) * 8))
(((ARG3 / 64) + f()) * 8) INT_MULT ((ARG3 / 64) + f()) 8
 CBRANCH (f() INT_LESS ARG2)
 STORE 433 (ARG1 + (f() * 8)) f(ARG1 , ARG3)
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() INT_ZEXT f()
((ARG3 / 64) + f()) INT_ADD (ARG3 / 64) f()
(f() * 8) INT_MULT f() 8
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
((ARG3 / 64) + f()) INT_ADD (ARG3 / 64) f()
([(ARG1 + (((ARG3 / 64) + f()) * 8))] >> ((ARG3 & 63) / 2147483647)) INT_RIGHT [(ARG1 + (((ARG3 / 64) + f()) * 8))] ((ARG3 & 63) / 2147483647)
 CBRANCH ((((ARG3 / 64) + f()) + 1) INT_LESS ARG2)
(((ARG3 / 64) + f()) + 1) INT_ADD ((ARG3 / 64) + f()) 1
((ARG3 & 63) / 2147483647) SUBPIECE (ARG3 & 63) 0
[(ARG1 + ((((ARG3 / 64) + f()) + 1) * 8))] LOAD 433 (ARG1 + ((((ARG3 / 64) + f()) + 1) * 8))
((((ARG3 / 64) + f()) + 1) * 8) INT_MULT (((ARG3 / 64) + f()) + 1) 8
(ARG1 + ((((ARG3 / 64) + f()) + 1) * 8)) CAST (ARG1 + ((((ARG3 / 64) + f()) + 1) * 8))
(((ARG3 / 64) + f()) + 1) INT_ZEXT (((ARG3 / 64) + f()) + 1)
([(ARG1 + ((((ARG3 / 64) + f()) + 1) * 8))] << (63 & (64 - ((ARG3 & 63) / 2147483647)))) INT_LEFT [(ARG1 + ((((ARG3 / 64) + f()) + 1) * 8))] (63 & (64 - ((ARG3 & 63) / 2147483647)))
f(ARG1 , ARG3) INT_OR ([(ARG1 + (((ARG3 / 64) + f()) * 8))] >> ((ARG3 & 63) / 2147483647)) ([(ARG1 + ((((ARG3 / 64) + f()) + 1) * 8))] << (63 & (64 - ((ARG3 & 63) / 2147483647))))
(63 & (64 - ((ARG3 & 63) / 2147483647))) INT_AND (64 - ((ARG3 & 63) / 2147483647)) 63
((ARG3 / 64) + f()) INT_ADD (ARG3 / 64) f()
(64 - ((ARG3 & 63) / 2147483647)) INT_SUB 64 ((ARG3 & 63) / 2147483647)
(((ARG3 / 64) + f()) + 1) INT_ADD ((ARG3 / 64) + f()) 1
0 COPY 0
(((ARG5 / 64) * 8) + ARG3) INT_ADD ((ARG5 / 64) * 8) ARG3
(ARG3 + ((((ARG4 + 63) / 64) + (ARG5 / 64)) * 8)) INT_ADD ARG3 ((((ARG4 + 63) / 64) + (ARG5 / 64)) * 8)
(ARG5 / 64) INT_RIGHT ARG5 6
(ARG5 & 63) INT_AND ARG5 63
0 INT_LESS f(ARG4) ARG2
0 INT_LESS ARG2 ((ARG4 + 63) / 64)
0 INT_LESS ARG4 ((4294967232 & (ARG4 + 63)) - (ARG5 & 63))
(ARG4 + 63) INT_ADD ARG4 63
(ARG4 - ((4294967232 & (ARG4 + 63)) - (ARG5 & 63))) INT_SUB ARG4 ((4294967232 & (ARG4 + 63)) - (ARG5 & 63))
(ARG4 & 63) INT_AND ARG4 63
0 INT_LESS ((4294967232 & (ARG4 + 63)) - (ARG5 & 63)) ARG4
(ARG4 & 63) INT_AND ARG4 63
(ARG1 + (f(ARG4) * 8)) INT_ADD ARG1 (f(ARG4) * 8)
(((((ARG4 + 63) / 64) + 1) * 8) + ARG1) INT_ADD ((((ARG4 + 63) / 64) + 1) * 8) ARG1
 CALL func ARG1 ((ARG4 + 63) / 64) (ARG5 & 63) ((ARG4 + 63) / 64)
(ARG1 + ((((ARG4 + 63) / 64) + 1) * 8)) INT_ADD ARG1 ((((ARG4 + 63) / 64) + 1) * 8)
(ARG1 + ((((ARG4 + 63) / 64) + 1) * 8)) INT_ADD ARG1 ((((ARG4 + 63) / 64) + 1) * 8)
 CALL func ARG1 (((ARG5 / 64) * 8) + ARG3) ((ARG4 + 63) / 64) (((ARG5 / 64) * 8) + ARG3)
(ARG1 + ((((ARG4 + 63) / 64) + 1) * 8)) INT_ADD ARG1 ((((ARG4 + 63) / 64) + 1) * 8)
 CBRANCH (ARG2 INT_LESS ((ARG4 + 63) / 64))
((ARG4 + 63) / 64) INT_RIGHT (ARG4 + 63) 6
 CBRANCH (((4294967232 & (ARG4 + 63)) - (ARG5 & 63)) INT_LESS ARG4)
((((ARG4 + 63) / 64) + 1) * 8) INT_MULT (((ARG4 + 63) / 64) + 1) 8
f() CALL func (ARG4 - ((4294967232 & (ARG4 + 63)) - (ARG5 & 63)))
f(ARG3 , ARG4 , ARG5) INT_LEFT (f() & [(ARG3 + ((((ARG4 + 63) / 64) + (ARG5 / 64)) * 8))]) (63 & (((4294967232 & (ARG4 + 63)) - (ARG5 & 63)) / 2147483647))
(((4294967232 & (ARG4 + 63)) - (ARG5 & 63)) / 2147483647) SUBPIECE ((4294967232 & (ARG4 + 63)) - (ARG5 & 63)) 0
(((ARG4 + 63) / 64) + 1) INT_ZEXT (((ARG4 + 63) / 64) + 1)
[(ARG1 + ((((ARG4 + 63) / 64) + 1) * 8))] LOAD 433 (ARG1 + ((((ARG4 + 63) / 64) + 1) * 8))
[(ARG3 + ((((ARG4 + 63) / 64) + (ARG5 / 64)) * 8))] LOAD 433 (ARG3 + ((((ARG4 + 63) / 64) + (ARG5 / 64)) * 8))
(((ARG4 + 63) / 64) + (ARG5 / 64)) INT_ZEXT (((ARG4 + 63) / 64) + (ARG5 / 64))
((((ARG4 + 63) / 64) + (ARG5 / 64)) * 8) INT_MULT (((ARG4 + 63) / 64) + (ARG5 / 64)) 8
 CBRANCH (ARG4 INT_LESS ((4294967232 & (ARG4 + 63)) - (ARG5 & 63)))
((((ARG4 + 63) / 64) + 1) * 8) INT_MULT (((ARG4 + 63) / 64) + 1) 8
(ARG1 + ((((ARG4 + 63) / 64) + 1) * 8)) CAST (ARG1 + ((((ARG4 + 63) / 64) + 1) * 8))
f(ARG1 , ARG3 , ARG4 , ARG5) INT_OR f(ARG3 , ARG4 , ARG5) [(ARG1 + ((((ARG4 + 63) / 64) + 1) * 8))]
(63 & (((4294967232 & (ARG4 + 63)) - (ARG5 & 63)) / 2147483647)) INT_AND (((4294967232 & (ARG4 + 63)) - (ARG5 & 63)) / 2147483647) 63
((ARG4 + 63) / 64) COPY ((ARG4 + 63) / 64)
 BRANCH VZERO
(((ARG4 + 63) / 64) + 1) INT_SUB ((ARG4 + 63) / 64) 1
 STORE 433 (((((ARG4 + 63) / 64) + 1) * 8) + ARG1) f(ARG1 , ARG3 , ARG4 , ARG5)
(((((ARG4 + 63) / 64) + 1) * 8) + ARG1) CAST (((((ARG4 + 63) / 64) + 1) * 8) + ARG1)
(((ARG4 + 63) / 64) + 1) INT_SUB ((ARG4 + 63) / 64) 1
(((ARG4 + 63) / 64) + (ARG5 / 64)) INT_ADD ((ARG4 + 63) / 64) (ARG5 / 64)
(((ARG4 + 63) / 64) + 1) INT_ZEXT (((ARG4 + 63) / 64) + 1)
(f() & [(ARG3 + ((((ARG4 + 63) / 64) + (ARG5 / 64)) * 8))]) INT_AND [(ARG3 + ((((ARG4 + 63) / 64) + (ARG5 / 64)) * 8))] f()
(ARG3 + ((((ARG4 + 63) / 64) + (ARG5 / 64)) * 8)) CAST (ARG3 + ((((ARG4 + 63) / 64) + (ARG5 / 64)) * 8))
 CBRANCH (f(ARG4) INT_LESS ARG2)
(f(ARG4) + 1) INT_ADD f(ARG4) 1
f(ARG4) INT_ZEXT f(ARG4)
(f(ARG4) + 1) COPY (f(ARG4) + 1)
 STORE 433 (ARG1 + (f(ARG4) * 8)) 0
(f(ARG4) * 8) INT_MULT f(ARG4) 8
 BRANCH VZERO
(ARG1 + (f(ARG4) * 8)) CAST (ARG1 + (f(ARG4) * 8))
 CBRANCH ((ARG4 & 63) INT_NOTEQUAL 0)
(((ARG4 + 63) / 64) + 1) INT_ZEXT (((ARG4 + 63) / 64) + 1)
((((ARG4 + 63) / 64) + 1) * 8) INT_MULT (((ARG4 + 63) / 64) + 1) 8
[(ARG1 + ((((ARG4 + 63) / 64) + 1) * 8))] LOAD 433 (ARG1 + ((((ARG4 + 63) / 64) + 1) * 8))
(f() & [(ARG1 + ((((ARG4 + 63) / 64) + 1) * 8))]) INT_AND [(ARG1 + ((((ARG4 + 63) / 64) + 1) * 8))] f()
(ARG1 + ((((ARG4 + 63) / 64) + 1) * 8)) CAST (ARG1 + ((((ARG4 + 63) / 64) + 1) * 8))
 STORE 433 (ARG1 + ((((ARG4 + 63) / 64) + 1) * 8)) (f() & [(ARG1 + ((((ARG4 + 63) / 64) + 1) * 8))])
(ARG1 + ((((ARG4 + 63) / 64) + 1) * 8)) CAST (ARG1 + ((((ARG4 + 63) / 64) + 1) * 8))
(((ARG4 + 63) / 64) + 1) INT_ZEXT (((ARG4 + 63) / 64) + 1)
(((ARG4 + 63) / 64) + 1) INT_SUB ((ARG4 + 63) / 64) 1
f() CALL func (ARG4 & 63)
((((ARG4 + 63) / 64) + 1) * 8) INT_MULT (((ARG4 + 63) / 64) + 1) 8
(((ARG4 + 63) / 64) + 1) INT_SUB ((ARG4 + 63) / 64) 1
((4294967232 & (ARG4 + 63)) - (ARG5 & 63)) INT_SUB (4294967232 & (ARG4 + 63)) (ARG5 & 63)
 RETURN 0
((ARG5 / 64) * 8) INT_MULT (ARG5 / 64) 8
(ARG5 / 64) INT_ZEXT (ARG5 / 64)
(4294967232 & (ARG4 + 63)) INT_AND (ARG4 + 63) 4294967232
0 INT_NOTEQUAL (ARG4 & 63) 0
static void llvm::APInt::tcExtract(llvm::integerPart*, unsigned int, const integerPart*, unsigned int, unsigned int) COPY static void llvm::APInt::tcExtract(llvm::integerPart*, unsigned int, const integerPart*, unsigned int, unsigned int)
dstParts <= dstCount COPY dstParts <= dstCount
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 RETURN 1
 CALL libcall___assert_fail_thunk dstParts <= dstCount /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2445 static void llvm::APInt::tcExtract(llvm::integerPart*, unsigned int, const integerPart*, unsigned int, unsigned int)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
0 INT_LESS f() ARG4
ARG3 COPY ARG3
0 INT_LESS 1 ARG3
 CBRANCH (1 INT_LESS ARG3)
 CBRANCH (f() INT_LESS ARG4)
0 COPY 0
 RETURN 0 f(ARG3)
 RETURN 1
f(ARG3) COPY f(ARG3)
 CALL libcall___assert_fail_thunk c <= 1 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2478 static llvm::integerPart llvm::APInt::tcAdd(llvm::integerPart*, const integerPart*, llvm::integerPart, unsigned int)
c <= 1 COPY c <= 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
static llvm::integerPart llvm::APInt::tcAdd(llvm::integerPart*, const integerPart*, llvm::integerPart, unsigned int) COPY static llvm::integerPart llvm::APInt::tcAdd(llvm::integerPart*, const integerPart*, llvm::integerPart, unsigned int)
f() INT_ZEXT f()
0 INT_EQUAL f(ARG3) 0
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f() INT_ZEXT f()
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(f() * 8) INT_MULT f() 8
 CBRANCH (f(ARG3) INT_EQUAL 0)
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
(f() * 8) INT_MULT f() 8
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
f() INT_ZEXT f()
 BRANCH VZERO
(f() * 8) INT_MULT f() 8
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
0 INT_LESSEQUAL [(ARG1 + (f() * 8))] [(ARG1 + (f() * 8))]
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
(([(ARG2 + (f() * 8))] + [(ARG1 + (f() * 8))]) + 1) INT_ADD ([(ARG2 + (f() * 8))] + [(ARG1 + (f() * 8))]) 1
 STORE 433 (ARG1 + (f() * 8)) (([(ARG2 + (f() * 8))] + [(ARG1 + (f() * 8))]) + 1)
f() INT_ZEXT f()
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
([(ARG2 + (f() * 8))] + [(ARG1 + (f() * 8))]) INT_ADD [(ARG2 + (f() * 8))] [(ARG1 + (f() * 8))]
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
f() INT_ZEXT f()
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
([(ARG2 + (f() * 8))] + [(ARG1 + (f() * 8))]) INT_ADD [(ARG2 + (f() * 8))] [(ARG1 + (f() * 8))]
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
 STORE 433 (ARG1 + (f() * 8)) ([(ARG2 + (f() * 8))] + [(ARG1 + (f() * 8))])
0 INT_LESS [(ARG1 + (f() * 8))] [(ARG1 + (f() * 8))]
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
f() INT_ZEXT f()
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
0 INT_LESS 1 ARG3
ARG3 COPY ARG3
0 INT_LESS f() ARG4
 CBRANCH (1 INT_LESS ARG3)
c <= 1 COPY c <= 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 RETURN 0 f(ARG3)
static llvm::integerPart llvm::APInt::tcSubtract(llvm::integerPart*, const integerPart*, llvm::integerPart, unsigned int) COPY static llvm::integerPart llvm::APInt::tcSubtract(llvm::integerPart*, const integerPart*, llvm::integerPart, unsigned int)
 CBRANCH (f() INT_LESS ARG4)
f(ARG3) COPY f(ARG3)
0 COPY 0
 RETURN 1
 CALL libcall___assert_fail_thunk c <= 1 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2503 static llvm::integerPart llvm::APInt::tcSubtract(llvm::integerPart*, const integerPart*, llvm::integerPart, unsigned int)
f() INT_ZEXT f()
0 INT_EQUAL f(ARG3) 0
 BRANCH VZERO
f() INT_ZEXT f()
(f() + 1) INT_ADD f() 1
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
 CBRANCH (f(ARG3) INT_EQUAL 0)
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
(([(ARG1 + (f() * 8))] - [(ARG2 + (f() * 8))]) + -1) INT_ADD ([(ARG1 + (f() * 8))] - [(ARG2 + (f() * 8))]) -1
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
 STORE 433 (ARG1 + (f() * 8)) (([(ARG1 + (f() * 8))] - [(ARG2 + (f() * 8))]) + -1)
0 INT_LESSEQUAL [(ARG1 + (f() * 8))] [(ARG1 + (f() * 8))]
0 INT_LESS [(ARG1 + (f() * 8))] [(ARG1 + (f() * 8))]
([(ARG1 + (f() * 8))] - [(ARG2 + (f() * 8))]) INT_SUB [(ARG1 + (f() * 8))] [(ARG2 + (f() * 8))]
f() INT_ZEXT f()
f() INT_ZEXT f()
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
([(ARG1 + (f() * 8))] - [(ARG2 + (f() * 8))]) INT_SUB [(ARG1 + (f() * 8))] [(ARG2 + (f() * 8))]
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
 STORE 433 (ARG1 + (f() * 8)) ([(ARG1 + (f() * 8))] - [(ARG2 + (f() * 8))])
f() INT_ZEXT f()
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
(f() * 8) INT_MULT f() 8
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
(f() * 8) INT_MULT f() 8
 BRANCH VZERO
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
0 INT_EQUAL f() ARG2
0 INT_LESS f() ARG2
 RETURN 0 0
 CBRANCH (f() INT_LESS ARG2)
0 COPY 0
0 COPY 0
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
(f() * 8) INT_MULT f() 8
f(ARG1) LOAD 433 (ARG1 + (f() * 8))
(f(ARG1) + 1) INT_ADD f(ARG1) 1
0 INT_NOTEQUAL f(ARG1) 0
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
 STORE 433 (ARG1 + (f() * 8)) (f(ARG1) + 1)
f(ARG1) LOAD 433 (ARG1 + (f() * 8))
f() INT_ZEXT f()
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
0 INT_LESS f() ARG2
 CBRANCH (f() INT_LESS ARG2)
 RETURN 0
0 COPY 0
 STORE 433 (ARG1 + (f() * 8)) ~([(ARG1 + (f() * 8))])
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
~([(ARG1 + (f() * 8))]) INT_NEGATE [(ARG1 + (f() * 8))]
f() INT_ZEXT f()
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 ARG2 ARG2
 RETURN 0
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
0 INT_LESS ARG2 ARG1
0 INT_LESS ARG1 (ARG2 + (ARG5 * 8))
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD (f() * 8) ARG1
(ARG1 + (f() * 8)) INT_ADD (f() * 8) ARG1
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
(ARG2 + (ARG5 * 8)) INT_ADD ARG2 (ARG5 * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
f() CALL func ARG3
0 INT_NOTEQUAL ARG3 0
f() CALL func ARG3
0 INT_EQUAL ARG3 0
f() CALL func ARG3
f() CALL func ARG3
ARG4 COPY ARG4
ARG5 INT_ZEXT ARG5
ARG5 COPY ARG5
(ARG5 + 1) INT_ADD ARG5 1
0 INT_LESS f() ARG5
0 INT_LESS ARG6 ARG5
ARG6 COPY ARG6
0 INT_LESS f() ARG6
0 INT_NOTEQUAL (f() + 1) ARG6
0 INT_LESS (ARG5 + 1) ARG6
0 INT_EQUAL ARG7 0
 CBRANCH (ARG2 INT_LESS ARG1)
 CBRANCH ([(ARG2 + (f() * 8))] INT_EQUAL 0)
(f(ARG4) + (((f() * f()) + ((f() * f()) * 2147483647)) + ((f() * f()) * 2147483647))) INT_ADD (((f() * f()) + ((f() * f()) * 2147483647)) + ((f() * f()) * 2147483647)) f(ARG4)
f() CALL func [(ARG2 + (f() * 8))]
f() CALL func [(ARG2 + (f() * 8))]
f() CALL func (f() * f())
(f() * f()) INT_MULT f() f()
(f(ARG4) + (((f() * f()) + ((f() * f()) * 2147483647)) + ((f() * f()) * 2147483647))) INT_ADD f(ARG4) (((f() * f()) + ((f() * f()) * 2147483647)) + ((f() * f()) * 2147483647))
(f() * f()) INT_MULT f() f()
 BRANCH VZERO
(f() * f()) INT_MULT f() f()
f() CALL func [(ARG2 + (f() * 8))]
f() CALL func (f() * f())
 CBRANCH (((f() * f()) + ((f() * f()) * 2147483647)) INT_LESS (f() * f()))
(f() * f()) INT_MULT f() f()
((f() * f()) * 2147483647) INT_LEFT (f() * f()) 32
0 COPY 0
 CBRANCH f()
0 INT_LESS ((f() * f()) + ((f() * f()) * 2147483647)) (f() * f())
((f() * f()) + ((f() * f()) * 2147483647)) INT_ADD (f() * f()) ((f() * f()) * 2147483647)
f(ARG4) COPY f(ARG4)
((f() * f()) * 2147483647) INT_LEFT (f() * f()) 32
0 INT_LESS (((f() * f()) + ((f() * f()) * 2147483647)) + ((f() * f()) * 2147483647)) ((f() * f()) + ((f() * f()) * 2147483647))
((f() * f()) + ((f() * f()) * 2147483647)) INT_ADD ((f() * f()) * 2147483647) (f() * f())
(((f() * f()) + ((f() * f()) * 2147483647)) + ((f() * f()) * 2147483647)) INT_ADD ((f() * f()) + ((f() * f()) * 2147483647)) ((f() * f()) * 2147483647)
(((f() * f()) + ((f() * f()) * 2147483647)) + ((f() * f()) * 2147483647)) INT_ADD ((f() * f()) * 2147483647) ((f() * f()) + ((f() * f()) * 2147483647))
((f() * f()) + f()) INT_ADD (f() * f()) f()
(f() + f()) INT_ADD f() f()
 CBRANCH f(ARG4)
0 INT_LESS (f(ARG4) + (((f() * f()) + ((f() * f()) * 2147483647)) + ((f() * f()) * 2147483647))) (((f() * f()) + ((f() * f()) * 2147483647)) + ((f() * f()) * 2147483647))
f() CALL func [(ARG2 + (f() * 8))]
 CBRANCH ([(ARG2 + (f() * 8))] INT_NOTEQUAL 0)
 RETURN 0 f()
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
 CBRANCH (f() INT_LESS ARG5)
 RETURN 0 1
1 COPY 1
 CBRANCH (ARG1 INT_LESS (ARG2 + (ARG5 * 8)))
 RETURN 1
static int llvm::APInt::tcMultiplyPart(llvm::integerPart*, const integerPart*, llvm::integerPart, llvm::integerPart, unsigned int, unsigned int, bool) COPY static int llvm::APInt::tcMultiplyPart(llvm::integerPart*, const integerPart*, llvm::integerPart, llvm::integerPart, unsigned int, unsigned int, bool)
 CALL libcall___assert_fail_thunk dst <= src || dst >= src + srcParts /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2549 static int llvm::APInt::tcMultiplyPart(llvm::integerPart*, const integerPart*, llvm::integerPart, llvm::integerPart, unsigned int, unsigned int, bool)
 CBRANCH ((ARG5 + 1) INT_LESS ARG6)
dst <= src || dst >= src + srcParts COPY dst <= src || dst >= src + srcParts
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
(((f() * f()) + f()) + 1) INT_ADD ((f() * f()) + f()) 1
 CBRANCH ((f(ARG4) + [(ARG1 + (f() * 8))]) INT_LESS f(ARG4))
(f() + 1) INT_ADD f() 1
 CBRANCH (f(ARG4) INT_EQUAL 0)
1 COPY 1
 CBRANCH (ARG3 INT_NOTEQUAL 0)
 BRANCH VZERO
 CBRANCH (ARG3 INT_EQUAL 0)
0 INT_EQUAL [(ARG2 + (f() * 8))] 0
(f() + 1) INT_ADD f() 1
((f() + f()) + 1) INT_ADD (f() + f()) 1
0 COPY 0
0 COPY 0
0 INT_LESS f() f(ARG5 , ARG6)
static int llvm::APInt::tcMultiplyPart(llvm::integerPart*, const integerPart*, llvm::integerPart, llvm::integerPart, unsigned int, unsigned int, bool) COPY static int llvm::APInt::tcMultiplyPart(llvm::integerPart*, const integerPart*, llvm::integerPart, llvm::integerPart, unsigned int, unsigned int, bool)
dstParts <= srcParts + 1 COPY dstParts <= srcParts + 1
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 CBRANCH (ARG6 INT_LESS ARG5)
 CALL libcall___assert_fail_thunk dstParts <= srcParts + 1 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2550 static int llvm::APInt::tcMultiplyPart(llvm::integerPart*, const integerPart*, llvm::integerPart, llvm::integerPart, unsigned int, unsigned int, bool)
 CBRANCH (f() INT_LESS f(ARG5 , ARG6))
 CBRANCH (f() INT_LESS ARG6)
 CBRANCH ((f() + 1) INT_NOTEQUAL ARG6)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 STORE 433 (ARG1 + (f() * 8)) f(ARG4)
0 COPY 0
(f() * 8) INT_MULT f() 8
 RETURN 1
 CALL libcall___assert_fail_thunk i + 1 == dstParts /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2608 static int llvm::APInt::tcMultiplyPart(llvm::integerPart*, const integerPart*, llvm::integerPart, llvm::integerPart, unsigned int, unsigned int, bool)
 BRANCH VZERO
f() INT_ZEXT f()
i + 1 == dstParts COPY i + 1 == dstParts
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
static int llvm::APInt::tcMultiplyPart(llvm::integerPart*, const integerPart*, llvm::integerPart, llvm::integerPart, unsigned int, unsigned int, bool) COPY static int llvm::APInt::tcMultiplyPart(llvm::integerPart*, const integerPart*, llvm::integerPart, llvm::integerPart, unsigned int, unsigned int, bool)
0 INT_NOTEQUAL [(ARG2 + (f() * 8))] 0
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
(f() * 8) INT_MULT f() 8
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
f() INT_ZEXT f()
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
f() COPY f()
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(f() * 8) INT_MULT f() 8
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
f() INT_ZEXT f()
 CBRANCH (ARG7 INT_EQUAL 0)
0 INT_EQUAL f(ARG4) 0
(f() + 1) INT_ADD f() 1
f() INT_ZEXT f()
 STORE 433 (ARG1 + (f() * 8)) f(ARG4)
 BRANCH VZERO
(f(ARG4) + [(ARG1 + (f() * 8))]) INT_ADD f(ARG4) [(ARG1 + (f() * 8))]
0 INT_LESS (f(ARG4) + [(ARG1 + (f() * 8))]) f(ARG4)
(f() * 8) INT_MULT f() 8
(f() * 8) INT_MULT f() 8
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
 STORE 433 (ARG1 + (f() * 8)) (f(ARG4) + [(ARG1 + (f() * 8))])
(f(ARG4) + [(ARG1 + (f() * 8))]) INT_ADD f(ARG4) [(ARG1 + (f() * 8))]
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f() INT_ZEXT f()
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
 BRANCH VZERO
(ARG5 * 8) INT_MULT ARG5 8
(ARG1 + (f() * 8)) INT_ADD (f() * 8) ARG1
0 INT_NOTEQUAL ARG1 ARG2
 CALL func ARG1 0 ARG4
0 INT_NOTEQUAL ARG1 ARG3
f() CALL func (ARG1 + (f() * 8)) ARG2 [(ARG3 + (f() * 8))] 0 ARG4 (ARG4 - f()) 1 f()
(ARG3 + (f() * 8)) INT_ADD ARG3 (f() * 8)
(ARG4 - f()) INT_SUB ARG4 f()
0 INT_LESS f() ARG4
 CBRANCH (ARG1 INT_NOTEQUAL ARG2)
 CBRANCH (f() INT_LESS ARG4)
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
[(ARG3 + (f() * 8))] LOAD 433 (ARG3 + (f() * 8))
(ARG3 + (f() * 8)) CAST (ARG3 + (f() * 8))
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() INT_ZEXT f()
(f() | f()) INT_OR f() f()
(f() * 8) INT_MULT f() 8
 CALL libcall___assert_fail_thunk dst != lhs && dst != rhs /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2640 static int llvm::APInt::tcMultiply(llvm::integerPart*, const integerPart*, const integerPart*, unsigned int)
static int llvm::APInt::tcMultiply(llvm::integerPart*, const integerPart*, const integerPart*, unsigned int) COPY static int llvm::APInt::tcMultiply(llvm::integerPart*, const integerPart*, const integerPart*, unsigned int)
dst != lhs && dst != rhs COPY dst != lhs && dst != rhs
 CBRANCH (ARG1 INT_NOTEQUAL ARG3)
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
f() COPY f()
0 COPY 0
4382083 COPY 4382083
0 COPY 0
 RETURN 0 f()
(ARG1 + (f() * 8)) INT_ADD (f() * 8) ARG1
(ARG1 + (((ARG5 + ARG4) + 1) * 8)) INT_ADD ARG1 (((ARG5 + ARG4) + 1) * 8)
0 INT_EQUAL ARG1 ARG3
f() CALL func ARG1 ARG3 ARG2 ARG5 ARG4
 CALL func ARG1 0 ARG5
0 INT_EQUAL ARG1 ARG2
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
 CALL func (ARG1 + (f() * 8)) ARG3 [(ARG2 + (f() * 8))] 0 ARG5 (ARG5 + 1) 1 f()
0 INT_LESS f() ARG4
0 INT_LESS ARG5 ARG4
(ARG5 + ARG4) INT_ADD ARG5 ARG4
(ARG5 + 1) INT_ADD ARG5 1
 CBRANCH (ARG5 INT_LESS ARG4)
 CBRANCH (f() INT_LESS ARG4)
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
(f() * 8) INT_MULT f() 8
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() INT_ZEXT f()
 CBRANCH (ARG1 INT_EQUAL ARG3)
((ARG5 + ARG4) + 1) INT_SUB (ARG5 + ARG4) 1
4382336 COPY 4382336
(((ARG5 + ARG4) + 1) * 8) INT_MULT ((ARG5 + ARG4) + 1) 8
0 INT_ZEXT 0
(ARG5 + ARG4) INT_ZEXT (ARG5 + ARG4)
[(ARG1 + (((ARG5 + ARG4) + 1) * 8))] LOAD 433 (ARG1 + (((ARG5 + ARG4) + 1) * 8))
((ARG5 + ARG4) + 1) INT_ZEXT ((ARG5 + ARG4) + 1)
dst != lhs && dst != rhs COPY dst != lhs && dst != rhs
(ARG1 + (((ARG5 + ARG4) + 1) * 8)) CAST (ARG1 + (((ARG5 + ARG4) + 1) * 8))
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 RETURN 0 f(ARG4 , ARG5)
static unsigned int llvm::APInt::tcFullMultiply(llvm::integerPart*, const integerPart*, const integerPart*, unsigned int, unsigned int) COPY static unsigned int llvm::APInt::tcFullMultiply(llvm::integerPart*, const integerPart*, const integerPart*, unsigned int, unsigned int)
(ARG5 + ARG4) INT_SUB (ARG5 + ARG4) 0
0 INT_EQUAL [(ARG1 + (((ARG5 + ARG4) + 1) * 8))] 0
 RETURN 1
0 COPY 0
 CALL libcall___assert_fail_thunk dst != lhs && dst != rhs /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2667 static unsigned int llvm::APInt::tcFullMultiply(llvm::integerPart*, const integerPart*, const integerPart*, unsigned int, unsigned int)
 BRANCH VZERO
 CBRANCH (ARG1 INT_EQUAL ARG2)
(ARG1 + ((f(ARG3) + 1) * 8)) INT_ADD ARG1 ((f(ARG3) + 1) * 8)
(ARG1 + ((f(ARG3) + 1) * 8)) INT_ADD ARG1 ((f(ARG3) + 1) * 8)
(ARG2 + ((f(ARG3) + 1) * 8)) INT_ADD ARG2 ((f(ARG3) + 1) * 8)
(ARG2 + ((f(ARG3) + 1) * 8)) INT_ADD ARG2 ((f(ARG3) + 1) * 8)
ARG3 COPY ARG3
 CBRANCH (f(ARG3) INT_EQUAL 0)
0 INT_EQUAL f(ARG3) 0
(f(ARG3) + 1) INT_ZEXT (f(ARG3) + 1)
(ARG2 + ((f(ARG3) + 1) * 8)) CAST (ARG2 + ((f(ARG3) + 1) * 8))
((f(ARG3) + 1) * 8) INT_MULT (f(ARG3) + 1) 8
[(ARG2 + ((f(ARG3) + 1) * 8))] LOAD 433 (ARG2 + ((f(ARG3) + 1) * 8))
 RETURN 0 0
((f(ARG3) + 1) * 8) INT_MULT (f(ARG3) + 1) 8
 RETURN 0 f()
(ARG1 + ((f(ARG3) + 1) * 8)) CAST (ARG1 + ((f(ARG3) + 1) * 8))
 CBRANCH ([(ARG1 + ((f(ARG3) + 1) * 8))] INT_EQUAL [(ARG2 + ((f(ARG3) + 1) * 8))])
0 COPY 0
[(ARG1 + ((f(ARG3) + 1) * 8))] LOAD 433 (ARG1 + ((f(ARG3) + 1) * 8))
(f(ARG3) + 1) INT_SUB f(ARG3) 1
0 INT_EQUAL [(ARG1 + ((f(ARG3) + 1) * 8))] [(ARG2 + ((f(ARG3) + 1) * 8))]
(f(ARG3) + 1) INT_ZEXT (f(ARG3) + 1)
(ARG1 + ((f(ARG3) + 1) * 8)) CAST (ARG1 + ((f(ARG3) + 1) * 8))
(f(ARG3) + 1) INT_ZEXT (f(ARG3) + 1)
[(ARG2 + ((f(ARG3) + 1) * 8))] LOAD 433 (ARG2 + ((f(ARG3) + 1) * 8))
((f(ARG3) + 1) * 8) INT_MULT (f(ARG3) + 1) 8
(f(ARG3) + 1) INT_ZEXT (f(ARG3) + 1)
0 INT_LESS [(ARG2 + ((f(ARG3) + 1) * 8))] [(ARG1 + ((f(ARG3) + 1) * 8))]
((f(ARG3) + 1) * 8) INT_MULT (f(ARG3) + 1) 8
[(ARG1 + ((f(ARG3) + 1) * 8))] LOAD 433 (ARG1 + ((f(ARG3) + 1) * 8))
(ARG2 + ((f(ARG3) + 1) * 8)) CAST (ARG2 + ((f(ARG3) + 1) * 8))
 CBRANCH ([(ARG2 + ((f(ARG3) + 1) * 8))] INT_LESS [(ARG1 + ((f(ARG3) + 1) * 8))])
 BRANCH VZERO
 BRANCH VZERO
1 COPY 1
4294967295 COPY 4294967295
(ARG1 + ((((f(ARG2) + 1) - (ARG3 / 64)) + 1) * 8)) INT_ADD ARG1 ((((f(ARG2) + 1) - (ARG3 / 64)) + 1) * 8)
(((f(ARG2) + 1) * 8) + ARG1) INT_ADD ((f(ARG2) + 1) * 8) ARG1
(ARG1 + ((f(ARG2) + 1) * 8)) INT_ADD ARG1 ((f(ARG2) + 1) * 8)
(ARG1 + (((f(ARG2) + 1) - (ARG3 / 64)) * 8)) INT_ADD ARG1 (((f(ARG2) + 1) - (ARG3 / 64)) * 8)
ARG2 COPY ARG2
(ARG3 & 63) INT_AND ARG3 63
0 INT_NOTEQUAL ARG3 0
(ARG3 / 64) INT_RIGHT ARG3 6
 CBRANCH (ARG3 INT_NOTEQUAL 0)
 RETURN 0
 CBRANCH (((ARG3 / 64) + 1) INT_LESSEQUAL (f(ARG2) + 1))
f(ARG1 , ARG2 , ARG3) INT_OR ([(ARG1 + (((f(ARG2) + 1) - (ARG3 / 64)) * 8))] << ((ARG3 & 63) / 2147483647)) ([(ARG1 + ((((f(ARG2) + 1) - (ARG3 / 64)) + 1) * 8))] >> (63 & (64 - ((ARG3 & 63) / 2147483647))))
((f(ARG2) + 1) - (ARG3 / 64)) INT_SUB (f(ARG2) + 1) (ARG3 / 64)
(63 & (64 - ((ARG3 & 63) / 2147483647))) INT_AND (64 - ((ARG3 & 63) / 2147483647)) 63
(64 - ((ARG3 & 63) / 2147483647)) INT_SUB 64 ((ARG3 & 63) / 2147483647)
(((f(ARG2) + 1) - (ARG3 / 64)) + 1) INT_SUB ((f(ARG2) + 1) - (ARG3 / 64)) 1
[(ARG1 + ((((f(ARG2) + 1) - (ARG3 / 64)) + 1) * 8))] LOAD 433 (ARG1 + ((((f(ARG2) + 1) - (ARG3 / 64)) + 1) * 8))
((((f(ARG2) + 1) - (ARG3 / 64)) + 1) * 8) INT_MULT (((f(ARG2) + 1) - (ARG3 / 64)) + 1) 8
(ARG1 + ((((f(ARG2) + 1) - (ARG3 / 64)) + 1) * 8)) CAST (ARG1 + ((((f(ARG2) + 1) - (ARG3 / 64)) + 1) * 8))
(((f(ARG2) + 1) - (ARG3 / 64)) + 1) INT_ZEXT (((f(ARG2) + 1) - (ARG3 / 64)) + 1)
([(ARG1 + ((((f(ARG2) + 1) - (ARG3 / 64)) + 1) * 8))] >> (63 & (64 - ((ARG3 & 63) / 2147483647)))) INT_RIGHT [(ARG1 + ((((f(ARG2) + 1) - (ARG3 / 64)) + 1) * 8))] (63 & (64 - ((ARG3 & 63) / 2147483647)))
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG2) 0
(ARG1 + ((f(ARG2) + 1) * 8)) CAST (ARG1 + ((f(ARG2) + 1) * 8))
 STORE 433 (ARG1 + ((f(ARG2) + 1) * 8)) 0
((f(ARG2) + 1) * 8) INT_MULT (f(ARG2) + 1) 8
(f(ARG2) + 1) INT_SUB f(ARG2) 1
(f(ARG2) + 1) INT_ZEXT (f(ARG2) + 1)
 BRANCH VZERO
0 INT_LESS (ARG3 / 64) f(ARG2)
 CBRANCH ((ARG3 / 64) INT_LESS f(ARG2))
 CBRANCH ((ARG3 & 63) INT_NOTEQUAL 0)
0 INT_LESSEQUAL ((ARG3 / 64) + 1) (f(ARG2) + 1)
([(ARG1 + (((f(ARG2) + 1) - (ARG3 / 64)) * 8))] << ((ARG3 & 63) / 2147483647)) INT_LEFT [(ARG1 + (((f(ARG2) + 1) - (ARG3 / 64)) * 8))] ((ARG3 & 63) / 2147483647)
((ARG3 & 63) / 2147483647) SUBPIECE (ARG3 & 63) 0
((ARG3 / 64) + 1) INT_ADD (ARG3 / 64) 1
(f(ARG2) + 1) INT_SUB f(ARG2) 1
((f(ARG2) + 1) * 8) INT_MULT (f(ARG2) + 1) 8
(f(ARG2) + 1) INT_ZEXT (f(ARG2) + 1)
(((f(ARG2) + 1) * 8) + ARG1) CAST (((f(ARG2) + 1) * 8) + ARG1)
[(ARG1 + (((f(ARG2) + 1) - (ARG3 / 64)) * 8))] LOAD 433 (ARG1 + (((f(ARG2) + 1) - (ARG3 / 64)) * 8))
(((f(ARG2) + 1) - (ARG3 / 64)) * 8) INT_MULT ((f(ARG2) + 1) - (ARG3 / 64)) 8
((f(ARG2) + 1) - (ARG3 / 64)) INT_ZEXT ((f(ARG2) + 1) - (ARG3 / 64))
(ARG1 + (((f(ARG2) + 1) - (ARG3 / 64)) * 8)) CAST (ARG1 + (((f(ARG2) + 1) - (ARG3 / 64)) * 8))
((f(ARG2) + 1) - (ARG3 / 64)) INT_SUB (f(ARG2) + 1) (ARG3 / 64)
0 INT_NOTEQUAL (ARG3 & 63) 0
 BRANCH VZERO
 STORE 433 (((f(ARG2) + 1) * 8) + ARG1) f(ARG1 , ARG2 , ARG3)
0 INT_NOTEQUAL ARG1 ARG4
((f(ARG5) * 8) + ARG1) INT_ADD (f(ARG5) * 8) ARG1
 CALL func ARG3 ARG1 ARG5 ARG1
 CALL func ARG1 0 ARG5
0 INT_NOTEQUAL ARG1 ARG3
(ARG1 + (f(ARG5) * 8)) INT_ADD ARG1 (f(ARG5) * 8)
 CALL func ARG4 ARG2 ARG5 ARG2
f() CALL func ARG2 ARG5 ARG5
f() CALL func ARG3 ARG4 ARG5 ARG4
0 INT_NOTEQUAL ARG3 ARG4
 CALL func ARG3 ARG4 0 ARG5
 CALL func ARG4 ARG5 1 ARG5
 CALL func ARG4 ARG5 ((ARG5 * 64) - (f() + 1)) ARG5
(ARG5 * 64) INT_MULT ARG5 64
 CBRANCH (ARG1 INT_NOTEQUAL ARG3)
 CBRANCH (ARG1 INT_NOTEQUAL ARG4)
lhs != remainder && lhs != srhs && remainder != srhs COPY lhs != remainder && lhs != srhs && remainder != srhs
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 CALL libcall___assert_fail_thunk lhs != remainder && lhs != srhs && remainder != srhs /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2698 static int llvm::APInt::tcDivide(llvm::integerPart*, const integerPart*, llvm::integerPart*, llvm::integerPart*, unsigned int)
static int llvm::APInt::tcDivide(llvm::integerPart*, const integerPart*, llvm::integerPart*, llvm::integerPart*, unsigned int) COPY static int llvm::APInt::tcDivide(llvm::integerPart*, const integerPart*, llvm::integerPart*, llvm::integerPart*, unsigned int)
 CBRANCH (ARG3 INT_NOTEQUAL ARG4)
 RETURN 1
 CBRANCH ((f(ARG5) / 2) INT_EQUAL 0)
-9223372036854775808 COPY -9223372036854775808
(f(ARG5) + 1) INT_SUB f(ARG5) 1
 BRANCH VZERO
 CBRANCH ((f() + 1) INT_EQUAL 0)
(((ARG5 * 64) - (f() + 1)) / 2147483647) SUBPIECE ((ARG5 * 64) - (f() + 1)) 0
1 COPY 1
(((ARG5 * 64) - (f() + 1)) / 64) INT_RIGHT ((ARG5 * 64) - (f() + 1)) 6
((ARG5 * 64) - (f() + 1)) INT_SUB (ARG5 * 64) (f() + 1)
(63 & (((ARG5 * 64) - (f() + 1)) / 2147483647)) INT_AND (((ARG5 * 64) - (f() + 1)) / 2147483647) 63
0 COPY 0
0 INT_SLESS 4294967295 f()
 CBRANCH (4294967295 INT_SLESS f())
 CBRANCH (f(ARG5) INT_EQUAL 0)
 BRANCH VZERO
0 INT_EQUAL f(ARG5) 0
(1 << (63 & (((ARG5 * 64) - (f() + 1)) / 2147483647))) INT_LEFT 1 (63 & (((ARG5 * 64) - (f() + 1)) / 2147483647))
 RETURN 0 f()
0 INT_EQUAL (f() + 1) 0
(f() + 1) INT_ADD f() 1
(f(ARG5) + 1) INT_SUB f(ARG5) 1
0 INT_EQUAL (f(ARG5) / 2) 0
(f(ARG5) / 2) INT_RIGHT f(ARG5) 1
(f(ARG5) | [(ARG1 + (f(ARG5) * 8))]) INT_OR [(ARG1 + (f(ARG5) * 8))] f(ARG5)
f(ARG5) INT_ZEXT f(ARG5)
 STORE 433 ((f(ARG5) * 8) + ARG1) (f(ARG5) | [(ARG1 + (f(ARG5) * 8))])
[(ARG1 + (f(ARG5) * 8))] LOAD 433 (ARG1 + (f(ARG5) * 8))
f(ARG5) INT_ZEXT f(ARG5)
(f(ARG5) * 8) INT_MULT f(ARG5) 8
(ARG1 + (f(ARG5) * 8)) CAST (ARG1 + (f(ARG5) * 8))
(f(ARG5) * 8) INT_MULT f(ARG5) 8
((f(ARG5) * 8) + ARG1) CAST ((f(ARG5) * 8) + ARG1)
0 INT_LESS f() ARG3
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
0 COPY 0
 RETURN 0
 CBRANCH (f() INT_LESS ARG3)
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
 STORE 433 (ARG1 + (f() * 8)) ([(ARG2 + (f() * 8))] & [(ARG1 + (f() * 8))])
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
f() INT_ZEXT f()
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
([(ARG2 + (f() * 8))] & [(ARG1 + (f() * 8))]) INT_AND [(ARG2 + (f() * 8))] [(ARG1 + (f() * 8))]
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
0 INT_LESS f() ARG3
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
 RETURN 0
 CBRANCH (f() INT_LESS ARG3)
0 COPY 0
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
 STORE 433 (ARG1 + (f() * 8)) ([(ARG2 + (f() * 8))] | [(ARG1 + (f() * 8))])
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() INT_ZEXT f()
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f() INT_ZEXT f()
([(ARG2 + (f() * 8))] | [(ARG1 + (f() * 8))]) INT_OR [(ARG2 + (f() * 8))] [(ARG1 + (f() * 8))]
(f() * 8) INT_MULT f() 8
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
(f() * 8) INT_MULT f() 8
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
0 INT_LESS f() ARG3
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
 CBRANCH (f() INT_LESS ARG3)
0 COPY 0
 RETURN 0
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f() INT_ZEXT f()
0 INT_XOR [(ARG2 + (f() * 8))] [(ARG1 + (f() * 8))]
(f() * 8) INT_MULT f() 8
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
 STORE 433 (ARG1 + (f() * 8)) 0
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
f() INT_ZEXT f()
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(ARG1 + (f() * 8)) INT_ADD (f() * 8) ARG1
0 INT_LESSEQUAL ARG2 f()
0 COPY 0
 CBRANCH (ARG2 INT_LESSEQUAL f())
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f(ARG1) + -1) INT_ADD f(ARG1) -1
 RETURN 0 1
 RETURN 0 0
 STORE 433 (ARG1 + (f() * 8)) (f(ARG1) + -1)
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
1 COPY 1
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
f(ARG1) LOAD 433 (ARG1 + (f() * 8))
0 COPY 0
0 INT_NOTEQUAL f(ARG1) 0
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
0 INT_LESS f() ARG2
ARG3 COPY ARG3
(ARG1 + (f() * 8)) INT_ADD (f() * 8) ARG1
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
0 COPY 0
0 INT_LESS 64 f(ARG3)
 CBRANCH (f() INT_LESS ARG2)
 CBRANCH (64 INT_LESS f(ARG3))
0 COPY 0
f() COPY f()
0 INT_NOTEQUAL f(ARG3) 0
 RETURN 0
 CBRANCH (f(ARG3) INT_NOTEQUAL 0)
(f() + 1) INT_ADD f() 1
f() INT_ZEXT f()
 STORE 433 (ARG1 + (f() * 8)) 0
(f() * 8) INT_MULT f() 8
 BRANCH VZERO
(f() + 1) COPY (f() + 1)
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
 BRANCH VZERO
(f(ARG3) + 64) INT_SUB f(ARG3) 64
(f() * 8) INT_MULT f() 8
 STORE 433 (ARG1 + (f() * 8)) -1
(f() + 1) COPY (f() + 1)
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f() + 1) INT_ADD f() 1
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
(f() + 1) COPY (f() + 1)
(f() + 1) INT_ADD f() 1
f() INT_ZEXT f()
(-1 >> (63 & (64 - (f(ARG3) / 2147483647)))) INT_RIGHT -1 (63 & (64 - (f(ARG3) / 2147483647)))
(63 & (64 - (f(ARG3) / 2147483647))) INT_AND (64 - (f(ARG3) / 2147483647)) 63
(64 - (f(ARG3) / 2147483647)) INT_SUB 64 (f(ARG3) / 2147483647)
(f(ARG3) / 2147483647) SUBPIECE f(ARG3) 0
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
 STORE 433 (ARG1 + (f() * 8)) (-1 >> (63 & (64 - (f(ARG3) / 2147483647))))
VZERO COPY VZERO
 RETURN 0
 RETURN 0
 CALL func 1 65535
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
f(ARG1) CALL func ARG1
 CALL func ARG2 [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
 STORE 433 (ARG1 + 8) ARG2
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
[ARG1] LOAD 433 ARG1
 CALL func ARG1 [ARG1] [ARG1]
 RETURN 0
 CALL libcall_basic_string_thunk (RSP + -56) ARG1
(RSP + -56) CAST (RSP + -56)
40 INT_ADD 0 40
40 CAST 40
(RSP + -56) PTRSUB RSP -56
 CALL func f() (RSP + -56) f()
 CALL func f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
 CALL libcall_~basic_string_thunk (RSP + -56)
 CALL libcall_allocator_thunk
f() CALL func 6887312
6887312 PTRSUB 0 6887312
[40] LOAD 433 40
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(RSP + -57) PTRSUB RSP -57
f() CALL func 6887312
6887312 PTRSUB 0 6887312
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL libcall_~allocator_thunk (RSP + -57)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG2) CALL func 32 ARG2
 CALL func ARG3
0 INT_NOTEQUAL f(ARG2) 0
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
f(ARG2) CAST f(ARG2)
 RETURN 0
 CALL libcall_basic_string_thunk f(ARG2)
 CALL func ARG1 ARG2 f(ARG3) ARG2
f(ARG3) CALL func ARG3
 RETURN 0
f() CALL func ARG1 f(RSP) f(RSP)
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 32) [ARG1]
f() CALL func ARG1
f(RSP) CALL func ARG1 1 0
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) CALL func ARG1
 CALL func ARG1 ((f() * 32) + f()) f(ARG2) ((f() * 32) + f())
f(ARG1) CALL func ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 f()
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
f(ARG2) CALL func ARG2
(f() * 32) INT_MULT f() 32
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (ARG1 + 8) (f() + 32)
 RETURN 0
0 COPY 0
(([(ARG1 + 16)] - [ARG1]) / 32) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 5
(f(RSP) * 32) INT_MULT f(RSP) 32
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
((f() * 32) + f()) INT_ADD (f() * 32) f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
(f() + 32) INT_ADD f() 32
((f(RSP) * 32) + f()) INT_ADD (f(RSP) * 32) f()
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
 STORE 433 (ARG1 + 16) ((f(RSP) * 32) + f())
f() CALL func [ARG1] [(ARG1 + 8)] f() f(ARG1)
 CALL func ARG1 ARG2 ARG2
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1 [(ARG1 + 8)] ARG2 [(ARG1 + 8)]
 CBRANCH ([(ARG1 + 8)] INT_EQUAL [(ARG1 + 16)])
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_EQUAL [(ARG1 + 8)] [(ARG1 + 16)]
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 32)
([(ARG1 + 8)] + 32) INT_ADD [(ARG1 + 8)] 32
(ARG1 + 8) CAST (ARG1 + 8)
 CALL func f() ARG2 f()
f() CALL libcall_empty_thunk
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 RETURN 0
f() COPY f()
f() CALL func 6887312
1 COPY 1
 BRANCH VZERO
6887312 PTRSUB 0 6887312
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(RSP + -24) PTRSUB RSP -24
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
(ARG3 & 3) INT_AND ARG3 3
ARG1 CAST ARG1
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 48) PTRADD ARG1 6 8
ARG1 CAST ARG1
ARG1 CAST ARG1
 STORE 433 ARG1 Symbol
ARG1 CAST ARG1
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 CAST ARG1
ARG1 CAST ARG1
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
ARG1 CAST ARG1
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 40) PTRADD ARG1 5 8
(ARG1 + 56) PTRADD ARG1 7 8
ARG1 CAST ARG1
ARG1 CAST ARG1
ARG1 CAST ARG1
(ARG2 & 7) INT_AND ARG2 7
(ARG1 + 12) CAST (ARG1 + 12)
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 12) CAST (ARG1 + 12)
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
([(ARG1 + 12)] & 231) INT_AND [(ARG1 + 12)] 231
(([(ARG1 + 12)] & 248) | (ARG2 & 7)) INT_OR ([(ARG1 + 12)] & 248) (ARG2 & 7)
 STORE 433 (ARG1 + 20) 0
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
([(ARG1 + 12)] & 248) INT_AND [(ARG1 + 12)] 248
 STORE 433 (ARG1 + 12) (([(ARG1 + 12)] & 248) | (ARG2 & 7))
 RETURN 0
(ARG1 + 12) INT_ADD ARG1 12
Symbol CAST Symbol
(ARG1 + 13) CAST (ARG1 + 13)
 STORE 433 (ARG1 + 32) Symbol
(([(ARG1 + 12)] & 159) | (((ARG3 & 3) * 32) / 2147483647)) INT_OR ([(ARG1 + 12)] & 159) (((ARG3 & 3) * 32) / 2147483647)
(ARG1 + 12) CAST (ARG1 + 12)
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 12) INT_ADD ARG1 12
Symbol PTRSUB 0 Symbol
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
 STORE 433 (ARG1 + 12) (([(ARG1 + 12)] & 159) | (((ARG3 & 3) * 32) / 2147483647))
 STORE 433 (ARG1 + 12) ([(ARG1 + 12)] & 231)
(ARG1 + 12) CAST (ARG1 + 12)
 STORE 433 (ARG1 + 8) 0
 STORE 433 (ARG1 + 24) Symbol
(ARG1 + 56) CAST (ARG1 + 56)
([(ARG1 + 12)] & 159) INT_AND [(ARG1 + 12)] 159
(ARG1 + 12) CAST (ARG1 + 12)
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(ARG1 + 20) CAST (ARG1 + 20)
Symbol PTRSUB 0 Symbol
(ARG1 + 12) INT_ADD ARG1 12
([(ARG1 + 12)] & 65151) INT_AND [(ARG1 + 12)] 65151
[(ARG1 + 13)] LOAD 433 (ARG1 + 13)
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG1 + 40) Symbol
Symbol PTRSUB 0 Symbol
(ARG1 + 13) CAST (ARG1 + 13)
 STORE 433 (ARG1 + 12) ([(ARG1 + 12)] & 65151)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 13) INT_ADD ARG1 13
(ARG1 + 12) CAST (ARG1 + 12)
(((ARG3 & 3) * 32) / 2147483647) SUBPIECE ((ARG3 & 3) * 32) 0
Symbol PTRSUB 0 Symbol
((ARG3 & 3) * 32) INT_LEFT (ARG3 & 3) 5
 STORE 433 (ARG1 + 16) 0
(ARG1 + 12) CAST (ARG1 + 12)
 STORE 433 (ARG1 + 56) 0
(ARG1 + 12) INT_ADD ARG1 12
Symbol PTRSUB 0 Symbol
 STORE 433 (ARG1 + 13) ([(ARG1 + 13)] & 241)
([(ARG1 + 13)] & 241) INT_AND [(ARG1 + 13)] 241
(ARG1 + 12) CAST (ARG1 + 12)
 STORE 433 (ARG1 + 48) Symbol
(ARG1 + 13) INT_ADD ARG1 13
 STORE 433 ARG1 Symbol
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 CALL func ARG1
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 0
 RETURN 0
 CALL func (ARG1 + 8)
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
 RETURN 0 [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
[ARG1] LOAD 433 ARG1
(ARG1 + 24) PTRADD ARG1 3 8
[ARG1] CAST [ARG1]
[ARG1] CAST [ARG1]
0 INT_ZEXT 0
([ARG1] & -256) INT_OR ([ARG1] & -256) 0
 RETURN 0 ([ARG1] & -256)
0 INT_EQUAL [ARG1] (ARG1 + 24)
([ARG1] & -256) INT_AND [ARG1] -256
 RETURN 0
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 RETURN 0
 CALL func f() f()
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
f() CAST f()
 CALL libcall_free_thunk f()
 CALL func ARG1
 RETURN 0
 CALL libcall_free_thunk ARG2
 RETURN 0
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
f() CALL func ARG1
 CALL func ARG2 ARG1 (f() + 17) ARG1
(f() + 17) INT_ADD f() 17
 RETURN 0
 RETURN 0 -1
-1 COPY -1
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 12) CAST (ARG1 + 12)
([(ARG1 + 12)] & 4294967040) INT_OR ([(ARG1 + 12)] & 4294967040) 0
([(ARG1 + 12)] & 4294967040) INT_AND [(ARG1 + 12)] 4294967040
0 INT_ZEXT 0
 RETURN 0 ([(ARG1 + 12)] & 4294967040)
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
([(ARG1 + 12)] & 4294967040) COPY ([(ARG1 + 12)] & 4294967040)
0 INT_EQUAL [(ARG1 + 12)] 0
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 24) PTRADD ARG1 3 8
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL libcall_free_thunk [ARG1]
 RETURN 0
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
 CBRANCH (f() INT_EQUAL [([ARG1] + (f() * 8))])
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH ([([ARG1] + (f() * 8))] INT_EQUAL 0)
0 INT_EQUAL f() [([ARG1] + (f() * 8))]
f() CALL func
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 COPY 0
0 INT_NOTEQUAL f() [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (f() INT_NOTEQUAL [(ARG1 + 8)])
 CBRANCH f()
 CALL func [([ARG1] + (f() * 8))] (ARG1 + 24) (ARG1 + 24)
0 INT_EQUAL [([ARG1] + (f() * 8))] 0
[([ARG1] + (f() * 8))] LOAD 433 ([ARG1] + (f() * 8))
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
([ARG1] + (f() * 8)) CAST ([ARG1] + (f() * 8))
[ARG1] CAST [ARG1]
([ARG1] + (f() * 8)) INT_ADD [ARG1] (f() * 8)
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
0 INT_ZEXT 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([ARG1] & -256) INT_OR ([ARG1] & -256) 0
0 INT_EQUAL [(ARG1 + 8)] [ARG1]
 RETURN 0 ([ARG1] & -256)
([ARG1] & -256) INT_AND [ARG1] -256
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL libcall_free_thunk [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
(ARG1 + 176) PTRADD ARG1 176 1
(ARG1 + 120) PTRADD ARG1 120 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 40) PTRADD ARG1 40 1
 CALL libcall_~basic_string_thunk ARG1
(ARG1 + 216) PTRADD ARG1 216 1
 CALL func (ARG1 + 216)
 RETURN 0
 CALL func (ARG1 + 176)
 CALL func (ARG1 + 120)
 CALL func (ARG1 + 64)
 CALL func (ARG1 + 40)
 CALL libcall_operator.delete_thunk ARG1
0 INT_NOTEQUAL ARG1 0
 CALL func ARG1
 RETURN 0
 CBRANCH (ARG1 INT_NOTEQUAL 0)
 CALL func ARG1
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0
 STORE 433 (ARG1 + 16) 0
 STORE 433 (ARG1 + 8) 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 0
ARG1 CAST ARG1
 STORE 433 (ARG1 + 20) ARG2
 STORE 433 (ARG1 + 12) 0
(ARG1 + 20) CAST (ARG1 + 20)
 RETURN 0
(ARG1 + 12) CAST (ARG1 + 12)
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 16) 0
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG1 + 8) 0
(ARG1 + 12) INT_ADD ARG1 12
 CALL func ARG1 16 16
 RETURN 0
(ARG1 + 4294967295) INT_ADD ARG1 4294967295
(32 - f()) COPY (32 - f())
f() CALL func (ARG1 + 4294967295) 2
 RETURN 0 (32 - f())
(32 - f()) INT_SUB 32 f()
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 20) INT_ADD ARG1 20
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
 CALL libcall_free_thunk [(ARG1 + 8)]
 STORE 433 (ARG1 + 20) [(ARG1 + 24)]
0 INT_EQUAL [(ARG1 + 8)] 0
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
([(ARG1 + 16)] * 8) INT_LEFT [(ARG1 + 16)] 3
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 20) CAST (ARG1 + 20)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
 CALL libcall___assert_fail_thunk !isSmall() && "Can't shrink a small set!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp 24 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 1
0 INT_LESS [(ARG1 + 20)] 17
(ARG1 + 24) CAST (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
(ARG1 + 20) CAST (ARG1 + 20)
 CBRANCH ([(ARG1 + 20)] INT_LESS 17)
 STORE 433 (ARG1 + 24) 0
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG1 + 16) f()
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) f()
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
0 COPY 0
!isSmall() && "Can't shrink a small set!" COPY !isSmall() && "Can't shrink a small set!"
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
f() CALL libcall_malloc_thunk ([(ARG1 + 16)] * 8)
(ARG1 + 20) CAST (ARG1 + 20)
(1 << (31 & (f() + 1))) INT_LEFT 1 (31 & (f() + 1))
(f() + 1) INT_ADD f() 1
32 COPY 32
 BRANCH VZERO
(31 & (f() + 1)) INT_AND (f() + 1) 31
f() CALL func [(ARG1 + 20)]
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
 CALL libcall___assert_fail_thunk CurArray && "Failed to allocate memory?" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp 33 0
 CALL libcall_memset_thunk [(ARG1 + 8)] 4294967295 ([(ARG1 + 16)] * 8)
0 COPY 0
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
CurArray && "Failed to allocate memory?" COPY CurArray && "Failed to allocate memory?"
([(ARG1 + 16)] * 8) INT_MULT [(ARG1 + 16)] 8
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 1
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 24) INT_ADD ARG1 24
f() CALL func ARG1
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 16) INT_ADD ARG1 16
 CBRANCH (f() INT_EQUAL 1)
 RETURN 0
 CBRANCH f()
0 INT_EQUAL f() 1
 CBRANCH ([(ARG1 + 16)] INT_LESS 33)
 BRANCH VZERO
1 COPY 1
0 COPY 0
([(ARG1 + 20)] * 4) CAST ([(ARG1 + 20)] * 4)
(ARG1 + 20) CAST (ARG1 + 20)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_LESSEQUAL ([(ARG1 + 20)] * 4))
0 INT_LESSEQUAL [(ARG1 + 16)] ([(ARG1 + 20)] * 4)
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
(ARG1 + 16) CAST (ARG1 + 16)
([(ARG1 + 20)] * 4) INT_MULT [(ARG1 + 20)] 4
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_LESS [(ARG1 + 16)] 33
 STORE 433 (ARG1 + 24) 0
 CALL libcall_memset_thunk [(ARG1 + 8)] 4294967295 ([(ARG1 + 16)] * 8)
 BRANCH VZERO
([(ARG1 + 16)] * 8) INT_MULT [(ARG1 + 16)] 8
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
(ARG1 + 20) CAST (ARG1 + 20)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 STORE 433 (ARG1 + 20) 0
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 24) CAST (ARG1 + 24)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func ARG1
 STORE 433 ARG1 ARG2
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 (ARG1 + 8) ARG2
(ARG3 + 1) INT_SUB ARG3 1
 STORE 433 (ARG1 + 16) ARG3
0 INT_NOTEQUAL ARG3 0
(ARG3 & (ARG3 + 1)) INT_AND (ARG3 + 1) ARG3
 CBRANCH (ARG3 INT_NOTEQUAL 0)
(ARG1 + 16) CAST (ARG1 + 16)
SmallSize && (SmallSize & (SmallSize-1)) == 0 && "Initial size must be a power of two!" COPY SmallSize && (SmallSize & (SmallSize-1)) == 0 && "Initial size must be a power of two!"
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
0 INT_EQUAL (ARG3 & (ARG3 + 1)) 0
llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(const void**, unsigned int) COPY llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(const void**, unsigned int)
 CBRANCH ((ARG3 & (ARG3 + 1)) INT_EQUAL 0)
 CALL libcall___assert_fail_thunk SmallSize && (SmallSize & (SmallSize-1)) == 0 && "Initial size must be a power of two!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h 71 llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(const void**, unsigned int)
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 (ARG1 + 32) 16 (ARG1 + 32)
(ARG1 + 32) INT_ADD ARG1 32
 RETURN 0
(ARG1 + 24) INT_ADD ARG1 24
 CALL func ARG1 (ARG1 + 24) ARG2 (ARG1 + 24)
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 (ARG2 * 8) (ARG2 * 8)
ARG2 INT_ZEXT ARG2
 RETURN 0
(ARG2 * 8) INT_MULT ARG2 8
 CALL func ARG1 4
 RETURN 0
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 120) INT_ADD ARG1 120
(ARG1 + 176) INT_ADD ARG1 176
(ARG1 + 208) INT_ADD ARG1 208
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 216) INT_ADD ARG1 216
 STORE 433 (ARG1 + 32) 0
 CALL func (ARG1 + 216)
 STORE 433 (ARG1 + 208) 0
 CALL libcall_basic_string_thunk
 RETURN 0
(ARG1 + 208) CAST (ARG1 + 208)
 CALL func (ARG1 + 40)
 CALL func (ARG1 + 120)
 CALL func (ARG1 + 64)
 CALL func (ARG1 + 176)
(ARG1 + 32) CAST (ARG1 + 32)
f() CALL libcall_operator.new_thunk 376
f() COPY f()
 CALL func f()
 RETURN 0 f()
 CALL func ARG1 4455677 4455631
 CALL func /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ManagedStatic.h 77 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
f() CALL func
 RETURN 0 [ARG1]
 CBRANCH ([ARG1] INT_EQUAL 0)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ManagedStatic.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ManagedStatic.h
[ARG1] COPY [ARG1]
0 INT_EQUAL [ARG1] 0
 CALL func
4455677 PTRSUB 0 4455677
4455631 PTRSUB 0 4455631
ARG1 COPY ARG1
ARG3 COPY ARG3
ARG2 COPY ARG2
f(ARG3) COPY f(ARG3)
0 INT_NOTEQUAL f() f()
 RETURN 0 f(ARG3)
f() CALL func (RSP + -56)
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL f())
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
f() INT_ZEXT f()
((f(ARG3) * 33) + f()) INT_ADD f() (f(ARG3) * 33)
(f() + 1) INT_ADD f() 1
(f(ARG3) * 33) INT_MULT f(ARG3) 33
 BRANCH VZERO
f() CALL func (RSP + -56) f() f()
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 CAST ARG1
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG2 ARG3 0 ARG2
f() CALL func ARG2 ARG3 f() f()
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(ARG1 + 8) CAST (ARG1 + 8)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL [(ARG1 + 8)] 0
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_NOTEQUAL [([ARG1] + (f(ARG1) * 8))])
[(((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4))] LOAD 433 (((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4))
(f(ARG1) * 4) INT_MULT f(ARG1) 4
0 INT_EQUAL [(((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4))] f()
([ARG1] + (f(ARG1) * 8)) INT_ADD [ARG1] (f(ARG1) * 8)
f(ARG1) INT_ZEXT f(ARG1)
((f(ARG1) + f()) & ([(ARG1 + 8)] + 1)) INT_AND ([(ARG1 + 8)] + 1) (f(ARG1) + f())
(f(ARG1) * 8) INT_MULT f(ARG1) 8
(((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4)) CAST (((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4))
[([ARG1] + (f(ARG1) * 8))] LOAD 433 ([ARG1] + (f(ARG1) * 8))
0 INT_NOTEQUAL [([ARG1] + (f(ARG1) * 8))] 0
 CBRANCH ([(((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4))] INT_EQUAL f())
(f(ARG1) + f()) INT_ADD f(ARG1) f()
([(ARG1 + 8)] + 1) INT_SUB [(ARG1 + 8)] 1
(((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4)) INT_ADD ((([(ARG1 + 8)] + 1) * 8) + [ARG1]) (f(ARG1) * 4)
 CBRANCH ([([ARG1] + (f(ARG1) * 8))] INT_NOTEQUAL 0)
([ARG1] + (f(ARG1) * 8)) CAST ([ARG1] + (f(ARG1) * 8))
f(ARG1) INT_ZEXT f(ARG1)
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
((([(ARG1 + 8)] + 1) * 8) + [ARG1]) INT_ADD (([(ARG1 + 8)] + 1) * 8) [ARG1]
4294967295 COPY 4294967295
(f() & ([(ARG1 + 8)] + 1)) INT_AND ([(ARG1 + 8)] + 1) f()
1 COPY 1
(([(ARG1 + 8)] + 1) * 8) INT_MULT ([(ARG1 + 8)] + 1) 8
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] INT_ZEXT [(ARG1 + 8)]
([(ARG1 + 8)] + 1) INT_ADD [(ARG1 + 8)] 1
([(ARG1 + 8)] + 1) INT_SUB [(ARG1 + 8)] 1
 BRANCH VZERO
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(ARG1)
 RETURN 1
([([ARG1] + (f(ARG1) * 8))] + [(ARG1 + 20)]) INT_ADD [([ARG1] + (f(ARG1) * 8))] [(ARG1 + 20)]
 CALL func (RSP + -40) ([([ARG1] + (f(ARG1) * 8))] + [(ARG1 + 20)]) f() ([([ARG1] + (f(ARG1) * 8))] + [(ARG1 + 20)])
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
(ARG1 + 20) INT_ADD ARG1 20
(RSP + -40) PTRSUB RSP -40
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
[(ARG1 + 20)] INT_ZEXT [(ARG1 + 20)]
(ARG1 + 20) CAST (ARG1 + 20)
f() CALL func [([ARG1] + (f(ARG1) * 8))]
 BRANCH VZERO
f() CALL func
0 INT_NOTEQUAL f() [([ARG1] + (f(ARG1) * 8))]
4294967295 COPY 4294967295
f(ARG1) LOAD 433 ARG1
f(ARG1) LOAD 433 ARG1
f(ARG1) LOAD 433 ARG1
 STORE 433 ARG1 (f(ARG1) + 8)
~(f()) BOOL_NEGATE f()
 CBRANCH ~(f())
 RETURN 0
0 INT_EQUAL [[ARG1]] 0
[[ARG1]] LOAD 433 f(ARG1)
 CBRANCH ([[ARG1]] INT_EQUAL 0)
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
 BRANCH VZERO
 CBRANCH ([[ARG1]] INT_EQUAL f())
1 COPY 1
 BRANCH VZERO
0 COPY 0
0 INT_EQUAL [[ARG1]] f()
f() CALL func
[[ARG1]] LOAD 433 f(ARG1)
 STORE 433 ARG1 ARG2
0 INT_NOTEQUAL ARG3 1
 CALL func ARG1
 RETURN 0
 CBRANCH (ARG3 INT_NOTEQUAL 1)
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[40] LOAD 433 40
(RSP + -24) PTRSUB RSP -24
([ARG1] + ([(ARG1 + 8)] * 8)) INT_ADD [ARG1] ([(ARG1 + 8)] * 8)
([(ARG1 + 8)] * 8) INT_MULT [(ARG1 + 8)] 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
40 INT_ADD 0 40
 CALL func (RSP + -24) ([ARG1] + ([(ARG1 + 8)] * 8)) 1 ([ARG1] + ([(ARG1 + 8)] * 8))
[(ARG1 + 8)] INT_ZEXT [(ARG1 + 8)]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(ARG1 + 8) CAST (ARG1 + 8)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
f(ARG1) CALL func ARG1 ARG2 ARG3 ARG2
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
 CBRANCH (f(ARG1) INT_EQUAL 4294967295)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_EQUAL f(ARG1) 4294967295
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(RSP + -24) PTRSUB RSP -24
f(ARG1) INT_SEXT f(ARG1)
([ARG1] + (f(ARG1) * 8)) INT_ADD [ARG1] (f(ARG1) * 8)
 CALL func (RSP + -24) ([ARG1] + (f(ARG1) * 8)) 1 ([ARG1] + (f(ARG1) * 8))
(f(ARG1) * 8) INT_MULT f(ARG1) 8
 BRANCH VZERO
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
[ARG1] LOAD 433 ARG1
[ARG2] LOAD 433 ARG2
([ARG2] & -256) INT_AND [ARG2] -256
([ARG2] & -256) INT_OR ([ARG2] & -256) 0
0 INT_ZEXT 0
 RETURN 0 ([ARG2] & -256)
0 INT_EQUAL [ARG1] [ARG2]
f(ARG1) CALL func ARG1 ARG2 ARG3 ARG2
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
ARG1 CAST ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
0 INT_EQUAL f(ARG1) 4294967295
 CBRANCH (f(ARG1) INT_EQUAL 4294967295)
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 12) CAST (ARG1 + 12)
([ARG1] + (f(ARG1) * 8)) CAST ([ARG1] + (f(ARG1) * 8))
([(ARG1 + 16)] + 1) INT_ADD [(ARG1 + 16)] 1
([(ARG1 + 12)] + [(ARG1 + 16)]) INT_ADD [(ARG1 + 12)] [(ARG1 + 16)]
(f(ARG1) * 8) INT_MULT f(ARG1) 8
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([ARG1] + (f(ARG1) * 8)) INT_ADD [ARG1] (f(ARG1) * 8)
([(ARG1 + 12)] + 4294967295) INT_ADD [(ARG1 + 12)] 4294967295
(ARG1 + 12) INT_ADD ARG1 12
[([ARG1] + (f(ARG1) * 8))] LOAD 433 ([ARG1] + (f(ARG1) * 8))
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG1 + 12) ([(ARG1 + 12)] + 4294967295)
([ARG1] + (f(ARG1) * 8)) CAST ([ARG1] + (f(ARG1) * 8))
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(f(ARG1) * 8) INT_MULT f(ARG1) 8
0 INT_LESS [(ARG1 + 8)] ([(ARG1 + 12)] + [(ARG1 + 16)])
(ARG1 + 12) CAST (ARG1 + 12)
f(ARG1) INT_SEXT f(ARG1)
(ARG1 + 12) CAST (ARG1 + 12)
([(ARG1 + 12)] + [(ARG1 + 16)]) CAST ([(ARG1 + 12)] + [(ARG1 + 16)])
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
 CBRANCH ([(ARG1 + 8)] INT_LESS ([(ARG1 + 12)] + [(ARG1 + 16)]))
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 ([ARG1] + (f(ARG1) * 8)) f()
f() CALL func
 BRANCH VZERO
([ARG1] + (f(ARG1) * 8)) INT_ADD [ARG1] (f(ARG1) * 8)
 STORE 433 (ARG1 + 16) ([(ARG1 + 16)] + 1)
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0 f(ARG1)
f(ARG1) INT_SEXT f(ARG1)
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/StringMap.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/StringMap.cpp
NumItems + NumTombstones <= NumBuckets COPY NumItems + NumTombstones <= NumBuckets
llvm::StringMapEntryBase* llvm::StringMapImpl::RemoveKey(llvm::StringRef) COPY llvm::StringMapEntryBase* llvm::StringMapImpl::RemoveKey(llvm::StringRef)
 CALL libcall___assert_fail_thunk NumItems + NumTombstones <= NumBuckets /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/StringMap.cpp 175 llvm::StringMapEntryBase* llvm::StringMapImpl::RemoveKey(llvm::StringRef)
 RETURN 1
f(ARG1) CALL func ARG1 A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
(ARG1 + 20) INT_ADD ARG1 20
(ARG2 + [(ARG1 + 20)]) INT_ADD ARG2 [(ARG1 + 20)]
f() CALL func ARG2
0 INT_NOTEQUAL ARG2 f(ARG1)
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) (ARG2 + [(ARG1 + 20)]) f() (ARG2 + [(ARG1 + 20)])
(ARG1 + 20) CAST (ARG1 + 20)
[(ARG1 + 20)] INT_ZEXT [(ARG1 + 20)]
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
 CBRANCH (ARG2 INT_NOTEQUAL f(ARG1))
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALL libcall___assert_fail_thunk V == V2 && "Didn't find key?" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/StringMap.cpp 162 void llvm::StringMapImpl::RemoveKey(llvm::StringMapEntryBase*)
V == V2 && "Didn't find key?" COPY V == V2 && "Didn't find key?"
void llvm::StringMapImpl::RemoveKey(llvm::StringMapEntryBase*) COPY void llvm::StringMapImpl::RemoveKey(llvm::StringMapEntryBase*)
[40] LOAD 433 40
40 CAST 40
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/StringMap.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/StringMap.cpp
 RETURN 1
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func ARG1 ARG2 ARG2
 RETURN 0
[ARG1] LOAD 433 ARG1
[ARG1] CAST [ARG1]
 RETURN 0 [[ARG1]]
[[ARG1]] LOAD 433 [ARG1]
[[ARG1]] COPY [[ARG1]]
ARG1 COPY ARG1
ARG2 COPY ARG2
 CALL func ARG1 f() f()
 RETURN 0
 CALL func f() (ARG1 + 24) (ARG1 + 24)
(RSP + -40) PTRSUB RSP -40
(ARG1 + 24) INT_ADD ARG1 24
f() CALL func (RSP + -40)
 CALL func ARG1 f() f()
f() CALL func ARG1
f() CALL func ARG1 ARG2 ARG3 ARG2
0 INT_EQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
0 COPY 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func (RSP + -32) (RSP + -24) (RSP + -24)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -32) PTRSUB RSP -32
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -24) PTRSUB RSP -24
 RETURN 0 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 [f(ARG2)]
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
 RETURN 0
[f(ARG3)] LOAD 433 f(ARG3)
 STORE 433 (ARG1 + 8) [f(ARG3)]
f(ARG2) CAST f(ARG2)
f(ARG3) CAST f(ARG3)
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
40 CAST 40
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
(RSP + -56) PTRSUB RSP -56
40 INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -56) f(ARG1) f(ARG2) f(ARG1)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[40] LOAD 433 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1 [f(ARG2)] [f(ARG2)]
(ARG1 + 16) INT_ADD ARG1 16
(ARG2 + 8) INT_ADD ARG2 8
f(ARG2) CALL func ARG2
 STORE 433 (ARG1 + 16) [f(ARG2)]
f(ARG2) CALL func (ARG2 + 8)
 RETURN 0
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG2) CAST f(ARG2)
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG2) CAST f(ARG2)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL f() ARG2
0 INT_EQUAL f() ARG2
ARG2 COPY ARG2
ARG2 COPY ARG2
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 f()
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 CAST ARG1
ARG1 CAST ARG1
f(ARG1) LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 12) CAST (ARG1 + 12)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_LESS ([(ARG1 + 8)] * 3) ([(ARG1 + 12)] * 4)
([(ARG1 + 8)] * 3) INT_MULT [(ARG1 + 8)] 3
(ARG1 + 12) INT_ADD ARG1 12
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] INT_ZEXT [(ARG1 + 8)]
([(ARG1 + 8)] * 3) CAST ([(ARG1 + 8)] * 3)
([(ARG1 + 12)] * 4) CAST ([(ARG1 + 12)] * 4)
([(ARG1 + 12)] * 4) INT_MULT [(ARG1 + 12)] 4
(ARG1 + 8) CAST (ARG1 + 8)
(([(ARG1 + 8)] + 1) * 8) INT_MULT ([(ARG1 + 8)] + 1) 8
([(ARG1 + 8)] + 1) INT_ADD [(ARG1 + 8)] 1
 CBRANCH (([(ARG1 + 8)] * 3) INT_LESS ([(ARG1 + 12)] * 4))
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
 CBRANCH (f() INT_NOTEQUAL [(ARG1 + 8)])
f(ARG1) CAST f(ARG1)
(f(ARG1) + (f() * 8)) CAST (f(ARG1) + (f() * 8))
(f(ARG1) + (f() * 8)) INT_ADD f(ARG1) (f() * 8)
0 INT_EQUAL [([ARG1] + (f() * 8))] 0
[([ARG1] + (f() * 8))] LOAD 433 (f(ARG1) + (f() * 8))
 CBRANCH ([([ARG1] + (f() * 8))] INT_EQUAL 0)
f() INT_ZEXT f()
f(ARG1 , ARG2) COPY f(ARG1 , ARG2)
0 INT_NOTEQUAL f() [(ARG1 + 8)]
 CBRANCH f()
(f() * 8) INT_MULT f() 8
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL [([ARG1] + (f() * 8))])
 BRANCH VZERO
0 COPY 0
1 COPY 1
f() CALL func
0 INT_EQUAL f() [([ARG1] + (f() * 8))]
 CBRANCH (([(ARG1 + 8)] / 8) INT_LESS ([(ARG1 + 8)] - ([(ARG1 + 16)] + [(ARG1 + 12)])))
(f(ARG1) + 1) INT_ADD f(ARG1) 1
f(ARG1) INT_ZEXT f(ARG1)
(ARG1 + 16) CAST (ARG1 + 16)
((f(ARG1) + 1) * 8) INT_MULT (f(ARG1) + 1) 8
 BRANCH VZERO
0 COPY 0
 STORE 433 (ARG1 + 16) 0
((f(ARG1) * 8) + f()) INT_ADD f() (f(ARG1) * 8)
(ARG1 + 8) CAST (ARG1 + 8)
(f(ARG1) * 8) INT_MULT f(ARG1) 8
 STORE 433 ((f(ARG1) * 8) + f()) 2
f() CAST f()
(((f(ARG1) + 1) * 8) + f()) CAST (((f(ARG1) + 1) * 8) + f())
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0 ARG2
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) f(ARG1)
(f(ARG1) + 1) INT_ADD f(ARG1) 1
f(ARG1) INT_ZEXT f(ARG1)
(ARG1 + 8) CAST (ARG1 + 8)
(f(ARG1) + 1) INT_ZEXT (f(ARG1) + 1)
 RETURN 0 f(ARG1 , ARG2)
f() CAST f()
 CALL libcall_free_thunk f(ARG1)
((f(ARG1) * 8) + f()) CAST ((f(ARG1) * 8) + f())
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f(ARG1 , ARG2) COPY f(ARG1 , ARG2)
f() CALL libcall_calloc_thunk (f(ARG1) + 1) 12
(((f(ARG1) + 1) * 8) + f()) INT_ADD f() ((f(ARG1) + 1) * 8)
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 12) CAST (ARG1 + 12)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] - ([(ARG1 + 16)] + [(ARG1 + 12)])) CAST ([(ARG1 + 8)] - ([(ARG1 + 16)] + [(ARG1 + 12)]))
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] - ([(ARG1 + 16)] + [(ARG1 + 12)])) INT_SUB [(ARG1 + 8)] ([(ARG1 + 16)] + [(ARG1 + 12)])
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 16)] + [(ARG1 + 12)]) INT_ADD [(ARG1 + 16)] [(ARG1 + 12)]
([(ARG1 + 8)] / 8) INT_RIGHT [(ARG1 + 8)] 3
([(ARG1 + 8)] * 2) INT_MULT [(ARG1 + 8)] 2
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_LESS ([(ARG1 + 8)] / 8) ([(ARG1 + 8)] - ([(ARG1 + 16)] + [(ARG1 + 12)]))
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
 CBRANCH ([((([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1)) * 8) + f())] INT_EQUAL 0)
[((((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) + f())] LOAD 433 ((((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) + f())
(((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) INT_MULT ((f(ARG1) + f()) & (f(ARG1) + -1)) 8
 STORE 433 ((((f(ARG1) + f()) & (f(ARG1) + -1)) * 4) + (((f(ARG1) + 1) * 8) + f())) [([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))]
((((f(ARG1) + f()) & (f(ARG1) + -1)) * 4) + (((f(ARG1) + 1) * 8) + f())) INT_ADD (((f(ARG1) + f()) & (f(ARG1) + -1)) * 4) (((f(ARG1) + 1) * 8) + f())
 STORE 433 ((([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) * 8) + f()) [([ARG1] + (f() * 8))]
(((f(ARG1) + f()) & (f(ARG1) + -1)) * 4) INT_MULT ((f(ARG1) + f()) & (f(ARG1) + -1)) 4
(((f(ARG1) + 1) * 8) + f()) CAST (((f(ARG1) + 1) * 8) + f())
((((f(ARG1) + f()) & (f(ARG1) + -1)) * 4) + (((f(ARG1) + 1) * 8) + f())) CAST ((((f(ARG1) + f()) & (f(ARG1) + -1)) * 4) + (((f(ARG1) + 1) * 8) + f()))
(([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) * 8) INT_MULT ([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) 8
((([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) * 8) + f()) INT_ADD (([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) * 8) f()
f(ARG1) CAST f(ARG1)
((f(ARG1) + f()) & (f(ARG1) + -1)) INT_AND (f(ARG1) + -1) (f(ARG1) + f())
(((f(ARG1) + 1) * 8) + f()) CAST (((f(ARG1) + 1) * 8) + f())
(f() + 1) INT_ADD f() 1
 CBRANCH ([((((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) + f())] INT_NOTEQUAL 0)
f(ARG1 , ARG2) COPY f(ARG1 , ARG2)
0 INT_NOTEQUAL [((((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) + f())] 0
f(ARG1 , ARG2) COPY f(ARG1 , ARG2)
([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) INT_ZEXT ([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1))
(f(ARG1) + 1) INT_SUB f(ARG1) 1
 CBRANCH (f() INT_EQUAL ARG2)
((f(ARG1) + f()) & (f(ARG1) + -1)) INT_ZEXT ((f(ARG1) + f()) & (f(ARG1) + -1))
1 COPY 1
((((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) + f()) INT_ADD f() (((f(ARG1) + f()) & (f(ARG1) + -1)) * 8)
(((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) INT_MULT ((f(ARG1) + f()) & (f(ARG1) + -1)) 8
(f(ARG1) + f()) INT_ADD f(ARG1) f()
(([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) * 4) INT_MULT ([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) 4
f(ARG1) INT_ADD (([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) * 4) (((f(ARG1) + 1) * 8) + f())
(f(ARG1) + 1) INT_SUB f(ARG1) 1
([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) INT_ZEXT ([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1))
((f(ARG1) + f()) & (f(ARG1) + -1)) INT_ZEXT ((f(ARG1) + f()) & (f(ARG1) + -1))
f() CAST f()
((((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) + f()) CAST ((((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) + f())
([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) INT_AND (f(ARG1) + 1) [([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))]
1 COPY 1
(f() + 1) COPY (f() + 1)
 CBRANCH (f() INT_EQUAL ARG2)
([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) INT_AND (f(ARG1) + 1) [([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))]
f() CAST f()
((([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) * 8) + f()) CAST ((([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) * 8) + f())
(f(ARG1) + -1) INT_SUB f(ARG1) -1
f() CAST f()
((((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) + f()) CAST ((((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) + f())
 STORE 433 ((((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) + f()) [([ARG1] + (f() * 8))]
((((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) + f()) INT_ADD (((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) f()
 STORE 433 f(ARG1) [([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))]
((f(ARG1) + f()) & (f(ARG1) + -1)) INT_ZEXT ((f(ARG1) + f()) & (f(ARG1) + -1))
((f(ARG1) + f()) & (f(ARG1) + -1)) COPY ((f(ARG1) + f()) & (f(ARG1) + -1))
([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1)) COPY ([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1))
([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1)) INT_AND (f(ARG1) + -1) [([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))]
0 INT_EQUAL [((([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1)) * 8) + f())] 0
[((([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1)) * 8) + f())] LOAD 433 ((([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1)) * 8) + f())
[([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] LOAD 433 ([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))
([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8))) CAST ([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))
([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8))) INT_ADD [ARG1] ((f() * 4) + (([(ARG1 + 8)] + 1) * 8))
[ARG1] CAST [ARG1]
(f(ARG1) + -1) INT_SUB f(ARG1) -1
 BRANCH VZERO
f() CAST f()
 BRANCH VZERO
((([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1)) * 8) + f()) CAST ((([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1)) * 8) + f())
((([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1)) * 8) + f()) INT_ADD f() (([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1)) * 8)
(([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1)) * 8) INT_MULT ([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1)) 8
([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1)) INT_ZEXT ([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1))
(f() * 4) INT_MULT f() 4
f() INT_ZEXT f()
((f() * 4) + (([(ARG1 + 8)] + 1) * 8)) INT_ADD (f() * 4) (([(ARG1 + 8)] + 1) * 8)
ARG1 COPY ARG1
 RETURN 0 ARG1
 RETURN 0 8
8 COPY 8
(ARG1 + 16) INT_ADD ARG1 16
 RETURN 0 (ARG1 + 16)
 CALL libcall_malloc_thunk ARG2
 RETURN 0
 STORE 433 ARG1 ARG2
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1 ARG2 ARG2
f(ARG3) CALL func ARG3
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
[f(ARG3)] LOAD 433 f(ARG3)
 STORE 433 (ARG1 + 8) [f(ARG3)]
f(ARG3) CAST f(ARG3)
ARG1 COPY ARG1
ARG2 COPY ARG2
f() CALL func ARG3 (f() + 17) f() (f() + 17)
f(ARG4) CALL func ARG4
f() CALL func 16 f()
f() CALL func
f() CALL func f()
f() CALL func (RSP + -72)
(RSP + -72) PTRSUB RSP -72
0 INT_NOTEQUAL f() 0
(f() + 17) INT_ADD f() 17
f() CAST f()
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 STORE 433 (f() + f()) 0
 RETURN 0 f()
(f() + f()) CAST (f() + f())
(f() + f()) INT_ADD f() f()
f() CAST f()
f() COPY f()
f() INT_ZEXT f()
 CALL func f() f() f(ARG4) f()
f() CAST f()
 CALL libcall_memcpy_thunk f() f() f()
f() CALL func (RSP + -72)
(RSP + -72) PTRSUB RSP -72
f() INT_ZEXT f()
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 [f(ARG2)]
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
 STORE 433 (ARG1 + 8) [f(ARG3)]
[f(ARG3)] LOAD 433 f(ARG3)
f(ARG3) CAST f(ARG3)
f(ARG2) CAST f(ARG2)
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
(FS_OFFSET + 40) INT_ADD 0 40
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
 CALL func (RSP + -56) f(ARG1) f(ARG2) f(ARG1)
(RSP + -56) PTRSUB RSP -56
40 CAST 40
 RETURN 1
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL libcall___stack_chk_fail_thunk
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
ARG1 CAST ARG1
f() LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 f()
0 INT_EQUAL ARG2 0
(ARG2 + -1) INT_SUB ARG2 -1
(ARG2 & (ARG2 + -1)) INT_AND (ARG2 + -1) ARG2
0 INT_EQUAL (ARG2 & (ARG2 + -1)) 0
 CBRANCH ((ARG2 & (ARG2 + -1)) INT_EQUAL 0)
 CBRANCH (ARG2 INT_EQUAL 0)
16 COPY 16
 CALL libcall___assert_fail_thunk (InitSize & (InitSize-1)) == 0 && "Init Size must be a power of 2 or zero!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/StringMap.cpp 38 void llvm::StringMapImpl::init(unsigned int)
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 1
 RETURN 0
f() CAST f()
[(ARG1 + 8)] INT_ZEXT [(ARG1 + 8)]
(([(ARG1 + 8)] * 8) + f()) CAST (([(ARG1 + 8)] * 8) + f())
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + 1) INT_ADD [(ARG1 + 8)] 1
 STORE 433 (ARG1 + 12) 0
 STORE 433 (ARG1 + 8) f(ARG2)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (([(ARG1 + 8)] * 8) + f()) 2
(([(ARG1 + 8)] * 8) + f()) INT_ADD ([(ARG1 + 8)] * 8) f()
(ARG1 + 12) CAST (ARG1 + 12)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] * 8) INT_MULT [(ARG1 + 8)] 8
([(ARG1 + 8)] + 1) INT_ZEXT ([(ARG1 + 8)] + 1)
 STORE 433 (ARG1 + 16) 0
(ARG1 + 8) CAST (ARG1 + 8)
f() CALL libcall_calloc_thunk ([(ARG1 + 8)] + 1) 12
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/StringMap.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/StringMap.cpp
(InitSize & (InitSize-1)) == 0 && "Init Size must be a power of 2 or zero!" COPY (InitSize & (InitSize-1)) == 0 && "Init Size must be a power of 2 or zero!"
void llvm::StringMapImpl::init(unsigned int) COPY void llvm::StringMapImpl::init(unsigned int)
(ARG1 + 12) INT_ADD ARG1 12
 CALL func ARG1 16
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 CAST ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
f() CALL func ARG2 ARG3 0 ARG2
f() CALL func ARG2 ARG3 f() f()
(ARG1 + 8) CAST (ARG1 + 8)
([ARG1] + (f(ARG1) * 8)) INT_ADD [ARG1] (f(ARG1) * 8)
(([(ARG1 + 8)] + 1) * 8) INT_MULT ([(ARG1 + 8)] + 1) 8
(f() & (f(ARG1) + -1)) INT_AND (f(ARG1) + -1) f()
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_EQUAL [(f() + 40)])
[([ARG1] + (f(ARG1) * 8))] LOAD 433 ([ARG1] + (f(ARG1) * 8))
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
[(ARG1 + 8)] INT_ZEXT [(ARG1 + 8)]
0 INT_EQUAL f() [(f() + 40)]
([ARG1] + (f(ARG1) * 8)) CAST ([ARG1] + (f(ARG1) * 8))
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([([ARG1] + (f(ARG1) * 8))] INT_NOTEQUAL 0)
0 INT_EQUAL [(ARG1 + 8)] 0
(f() + 40) INT_ADD f() 40
(f(ARG1) + -1) INT_SUB f(ARG1) -1
4294967295 COPY 4294967295
([(ARG1 + 8)] + 1) INT_ADD [(ARG1 + 8)] 1
1 COPY 1
(f(ARG1) * 8) INT_MULT f(ARG1) 8
[(f() + 40)] LOAD 433 (f() + 40)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_NOTEQUAL [([ARG1] + (f(ARG1) * 8))] 0
f(ARG1) INT_ZEXT f(ARG1)
((([(ARG1 + 8)] + 1) * 8) + [ARG1]) INT_ADD (([(ARG1 + 8)] + 1) * 8) [ARG1]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() + 40) CAST (f() + 40)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_EQUAL f(ARG1) 4294967295
0 INT_EQUAL f() [([ARG1] + (f(ARG1) * 8))]
f() CALL func
 CBRANCH (f() INT_EQUAL [([ARG1] + (f(ARG1) * 8))])
 CBRANCH (f(ARG1) INT_EQUAL 4294967295)
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
0 INT_EQUAL [(((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4))] f()
 CBRANCH (f(ARG1) INT_EQUAL 4294967295)
(((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4)) INT_ADD ((([(ARG1 + 8)] + 1) * 8) + [ARG1]) (f(ARG1) * 4)
(f(ARG1) + -1) INT_SUB f(ARG1) -1
 CBRANCH ([(((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4))] INT_EQUAL f())
((f(ARG1) + f()) & (f(ARG1) + -1)) INT_AND (f(ARG1) + -1) (f(ARG1) + f())
(f(ARG1) * 4) INT_MULT f(ARG1) 4
f(ARG1) INT_ZEXT f(ARG1)
[(((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4))] LOAD 433 (((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4))
0 INT_EQUAL f(ARG1) 4294967295
(f(ARG1) + f()) INT_ADD f(ARG1) f()
(((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4)) CAST (((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4))
(f(ARG1) * 4) INT_MULT f(ARG1) 4
 BRANCH VZERO
((f(ARG1) * 4) + ((([(ARG1 + 8)] + 1) * 8) + [ARG1])) CAST ((f(ARG1) * 4) + ((([(ARG1 + 8)] + 1) * 8) + [ARG1]))
((f(ARG1) * 4) + ((([(ARG1 + 8)] + 1) * 8) + [ARG1])) CAST ((f(ARG1) * 4) + ((([(ARG1 + 8)] + 1) * 8) + [ARG1]))
f(ARG1) CAST f(ARG1)
f(ARG1) INT_SEXT f(ARG1)
((f(ARG1) * 4) + ((([(ARG1 + 8)] + 1) * 8) + [ARG1])) INT_ADD (f(ARG1) * 4) ((([(ARG1 + 8)] + 1) * 8) + [ARG1])
 BRANCH VZERO
 STORE 433 ((f(ARG1) * 4) + ((([(ARG1 + 8)] + 1) * 8) + [ARG1])) f()
f(ARG1) INT_ZEXT f(ARG1)
 STORE 433 ((f(ARG1) * 4) + ((([(ARG1 + 8)] + 1) * 8) + [ARG1])) f()
f(ARG1) COPY f(ARG1)
f(ARG1) COPY f(ARG1)
((f(ARG1) * 4) + ((([(ARG1 + 8)] + 1) * 8) + [ARG1])) INT_ADD (f(ARG1) * 4) ((([(ARG1 + 8)] + 1) * 8) + [ARG1])
(f(ARG1) * 4) INT_MULT f(ARG1) 4
 RETURN 0 f(ARG1)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
f(ARG1) COPY f(ARG1)
 BRANCH VZERO
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
f() CALL func [([ARG1] + (f(ARG1) * 8))]
(RSP + -40) PTRSUB RSP -40
([([ARG1] + (f(ARG1) * 8))] + [(ARG1 + 20)]) INT_ADD [([ARG1] + (f(ARG1) * 8))] [(ARG1 + 20)]
(ARG1 + 20) CAST (ARG1 + 20)
f(ARG1) COPY f(ARG1)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CALL func (RSP + -40) ([([ARG1] + (f(ARG1) * 8))] + [(ARG1 + 20)]) f() ([([ARG1] + (f(ARG1) * 8))] + [(ARG1 + 20)])
[(ARG1 + 20)] INT_ZEXT [(ARG1 + 20)]
(ARG1 + 20) INT_ADD ARG1 20
ARG1 CAST ARG1
f(ARG1) CALL func ARG1 f(ARG1) f(ARG1)
ARG1 CAST ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
f(ARG1) CALL func ARG1 A_Stack[0x8]:8 A_Stack[0x10]:8 A_Stack[0x8]:8
[ARG1] LOAD 433 ARG1
ARG1 CAST ARG1
[ARG1] LOAD 433 ARG1
([ARG1] + (f(ARG1) * 8)) CAST ([ARG1] + (f(ARG1) * 8))
 CBRANCH ([([ARG1] + (f(ARG1) * 8))] INT_NOTEQUAL 0)
f(ARG1) INT_ZEXT f(ARG1)
([ARG1] + (f(ARG1) * 8)) INT_ADD [ARG1] (f(ARG1) * 8)
 CBRANCH f()
0 INT_NOTEQUAL [([ARG1] + (f(ARG1) * 8))] 0
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f(ARG1) * 8) INT_MULT f(ARG1) 8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[([ARG1] + (f(ARG1) * 8))] LOAD 433 ([ARG1] + (f(ARG1) * 8))
 CBRANCH ([([ARG1] + (f(ARG1) * 8))] INT_NOTEQUAL f())
0 COPY 0
 BRANCH VZERO
1 COPY 1
f() CALL func
0 INT_NOTEQUAL [([ARG1] + (f(ARG1) * 8))] f()
[([ARG1] + (f(ARG1) * 8))] LOAD 433 ([ARG1] + (f(ARG1) * 8))
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
(RSP + -48) PTRSUB RSP -48
0 COPY 0
 CALL func (RSP + -48) (RSP + -53) (RSP + -53)
([(ARG1 + 12)] + [(ARG1 + 16)]) CAST ([(ARG1 + 12)] + [(ARG1 + 16)])
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 12) INT_ADD ARG1 12
(f(ARG1) * 8) INT_MULT f(ARG1) 8
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
f() CALL func A_Stack[0x8]:8 A_Stack[0x10]:8 (ARG1 + 24) f(RSP)
f() CALL func
0 INT_LESS [(ARG1 + 8)] ([(ARG1 + 12)] + [(ARG1 + 16)])
(f() + 40) CAST (f() + 40)
[f(ARG1)] LOAD 433 f(ARG1)
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ([(ARG1 + 8)] INT_LESS ([(ARG1 + 12)] + [(ARG1 + 16)]))
(ARG1 + 12) CAST (ARG1 + 12)
f(ARG1) INT_ZEXT f(ARG1)
 STORE 433 (ARG1 + 12) ([(ARG1 + 12)] + 1)
([(ARG1 + 12)] + 1) INT_ADD [(ARG1 + 12)] 1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 12) CAST (ARG1 + 12)
 CALL func (RSP + -48) ([ARG1] + (f(ARG1) * 8)) 0 ([ARG1] + (f(ARG1) * 8))
(ARG1 + 12) CAST (ARG1 + 12)
(RSP + -48) PTRSUB RSP -48
(RSP + 24) PTRSUB RSP 24
([(ARG1 + 12)] + [(ARG1 + 16)]) INT_ADD [(ARG1 + 12)] [(ARG1 + 16)]
 CBRANCH ([f(ARG1)] INT_EQUAL f())
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
(RSP + -53) PTRSUB RSP -53
([ARG1] + (f(ARG1) * 8)) INT_ADD [ARG1] (f(ARG1) * 8)
[(f() + 40)] LOAD 433 (f() + 40)
(ARG1 + 12) INT_ADD ARG1 12
f(RSP) CALL func (RSP + 24)
 STORE 433 f(ARG1) f()
0 INT_EQUAL [f(ARG1)] f()
(ARG1 + 16) CAST (ARG1 + 16)
([(ARG1 + 16)] + 4294967295) INT_ADD [(ARG1 + 16)] 4294967295
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 STORE 433 (ARG1 + 16) ([(ARG1 + 16)] + 4294967295)
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(f(ARG1) * 8) INT_MULT f(ARG1) 8
f(ARG1) INT_ZEXT f(ARG1)
 CALL func (RSP + -48) ([ARG1] + (f(ARG1) * 8)) 0 ([ARG1] + (f(ARG1) * 8))
([ARG1] + (f(ARG1) * 8)) INT_ADD [ARG1] (f(ARG1) * 8)
(RSP + -48) PTRSUB RSP -48
 CALL libcall___assert_fail_thunk NumItems + NumTombstones <= NumBuckets /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringMap.h 330 std::pair<llvm::StringMapIterator<ValueTy>, bool> llvm::StringMap<ValueTy, AllocatorTy>::insert(std::pair<llvm::StringRef, ValueTy>) [with ValueTy = llvm::cl::Option*; AllocatorTy = llvm::MallocAllocator]
std::pair<llvm::StringMapIterator<ValueTy>, bool> llvm::StringMap<ValueTy, AllocatorTy>::insert(std::pair<llvm::StringRef, ValueTy>) [with ValueTy = llvm::cl::Option*; AllocatorTy = llvm::MallocAllocator] COPY std::pair<llvm::StringMapIterator<ValueTy>, bool> llvm::StringMap<ValueTy, AllocatorTy>::insert(std::pair<llvm::StringRef, ValueTy>) [with ValueTy = llvm::cl::Option*; AllocatorTy = llvm::MallocAllocator]
NumItems + NumTombstones <= NumBuckets COPY NumItems + NumTombstones <= NumBuckets
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringMap.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringMap.h
 RETURN 1
1 COPY 1
 CALL func (RSP + -48) (RSP + -53) (RSP + -53)
(RSP + -53) PTRSUB RSP -53
(RSP + -48) PTRSUB RSP -48
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
(f() / 2147483647) SUBPIECE f() 8
0 INT_NOTEQUAL 0 1
 CBRANCH (0 INT_NOTEQUAL 1)
(f() / 2147483647) SUBPIECE f() 8
(f(ARG1) + 176) INT_ADD f(ARG1) 176
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 0
(RSP + -56) PTRSUB RSP -56
(f() / 2147483647) SUBPIECE f() 0
(RSP + -72) PTRSUB RSP -72
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(ARG1 + 176) INT_ADD ARG1 176
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
ARG1 COPY ARG1
f() CALL func (RSP + -96) (RSP + -88) (RSP + -88)
[(f() + 40)] LOAD 433 (f() + 40)
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -56) [(f(ARG2) + 24)] [(f(ARG2) + 24)]
(f() / 2147483647) SUBPIECE f() 8
(RSP + -96) PTRSUB RSP -96
 CALL func (ARG1 + 176)
(RSP + -88) PTRSUB RSP -88
(f(ARG2) + 24) INT_ADD f(ARG2) 24
(RSP + -56) PTRSUB RSP -56
(f() / 2147483647) SUBPIECE f() 0
 CALL func (f(ARG1) + 176) f() f() (f(ARG1) + 176)
(f(ARG2) + 24) CAST (f(ARG2) + 24)
(f() / 2147483647) SUBPIECE f() 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -56) (RSP + -72) (RSP + -72)
(f() + 40) CAST (f() + 40)
[(f(ARG2) + 24)] LOAD 433 (f(ARG2) + 24)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
 RETURN 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f() : CommandLine Error: Option '
(f() / 2147483647) SUBPIECE f() 0
f() CALL func
(f() / 2147483647) SUBPIECE f() 8
inconsistency in registered CommandLine options COPY inconsistency in registered CommandLine options
(f() / 2147483647) SUBPIECE f() 0
(ARG2 + 24) INT_ADD ARG2 24
(f() / 2147483647) SUBPIECE f() 8
(ARG2 + 24) CAST (ARG2 + 24)
(f() / 2147483647) SUBPIECE f() 0
 CALL func inconsistency in registered CommandLine options 1
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
: CommandLine Error: Option ' COPY : CommandLine Error: Option '
f() CALL func f() [(ARG2 + 24)]
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f() ARG1
(f() / 2147483647) SUBPIECE f() 0
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
(f() / 2147483647) SUBPIECE f() 8
' registered more than once!  COPY ' registered more than once! 
 CALL func f() ' registered more than once! 
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func f() ARG1 ARG2 f()
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 56) INT_ADD ARG1 56
 STORE 433 (ARG1 + 24) ARG2
(ARG1 + 56) CAST (ARG1 + 56)
0 INT_NOTEQUAL [(ARG1 + 56)] 0
 CBRANCH ([(ARG1 + 56)] INT_NOTEQUAL 0)
[(ARG1 + 56)] LOAD 433 (ARG1 + 56)
(ARG1 + 24) CAST (ARG1 + 24)
 RETURN 0
6887840 PTRSUB 0 6887840
f() CALL func 6887840
 CALL func ARG2 ARG1 ARG1
 RETURN 0
(ARG2 & 3) INT_AND ARG2 3
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 12) INT_ADD ARG1 12
(([(ARG1 + 12)] & 231) | ((ARG2 & 3) * 8)) INT_OR ([(ARG1 + 12)] & 231) ((ARG2 & 3) * 8)
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(ARG1 + 12) CAST (ARG1 + 12)
((ARG2 & 3) * 8) INT_MULT (ARG2 & 3) 8
(ARG1 + 12) CAST (ARG1 + 12)
([(ARG1 + 12)] & 231) INT_AND [(ARG1 + 12)] 231
 STORE 433 (ARG1 + 12) (([(ARG1 + 12)] & 231) | ((ARG2 & 3) * 8))
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func [ARG2] ARG1 ARG1
[ARG2] LOAD 433 ARG2
 RETURN 0
 RETURN 0
 CALL func ARG1 ARG2 ARG2
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
(RSP + -88) PTRSUB RSP -88
(RSP + -88) PTRSUB RSP -88
option:  COPY option: 
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f() 0
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
f() CALL func f() option: 
 CBRANCH (f() INT_EQUAL 0)
f() CALL func (RSP + -88)
0 INT_EQUAL f() 0
1 COPY 1
 CALL func f() 4621786
f() CALL func
4621786 PTRSUB 0 4621786
f() CALL func (RSP + -88)
f() CALL func f() f(ARG2) f()
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(ARG1 + 24) INT_ADD ARG1 24
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
A_Stack[-0x30]:8 COPY A_Stack[-0x30]:8
(RSP + -56) PTRSUB RSP -56
(ARG1 + 24) CAST (ARG1 + 24)
 CALL func (RSP + -56) [(ARG1 + 24)] [(ARG1 + 24)]
A_Stack[-0x38]:8 COPY A_Stack[-0x38]:8
(f(ARG1) + 32) INT_ADD f(ARG1) 32
f() CALL func
f() CALL func 6887840
(f(ARG1) + 32) CAST (f(ARG1) + 32)
f() CALL func f() f()
 BRANCH VZERO
6887840 PTRSUB 0 6887840
[(f(ARG1) + 32)] LOAD 433 (f(ARG1) + 32)
 CALL func f() f(ARG3) f(ARG4) f()
 CALL func f() [(f(ARG1) + 32)]
: for the - COPY : for the -
f() CALL func f() : for the -
f() CALL func
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 1
 STORE 433 ARG1 ARG3
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
f() CALL func ARG2 (RSP + -40) A_Stack[-0x38]:8 A_Stack[-0x30]:8
 CALL func (ARG1 + 8) ARG3 (ARG1 + 8)
(f() + 40) CAST (f() + 40)
0 INT_EQUAL [ARG1] 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CBRANCH ([ARG1] INT_EQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
(RSP + -40) PTRSUB RSP -40
cl::location(x) specified more than once! COPY cl::location(x) specified more than once!
 CALL func (RSP + -56)
(RSP + -40) PTRSUB RSP -40
0 COPY 0
 CALL func (RSP + -40) cl::location(x) specified more than once!
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
[ARG1] LOAD 433 ARG1
 CALL func (ARG2 + 64) ARG2 [ARG1] (ARG2 + 64)
(ARG2 + 64) INT_ADD ARG2 64
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG3 ARG3
 CALL func ARG2 ARG1 ARG1
 RETURN 0
(ARG1 + 40) INT_ADD ARG1 40
 STORE 433 (ARG1 + 40) ARG2
(ARG1 + 40) CAST (ARG1 + 40)
 RETURN 0
[ARG1] LOAD 433 ARG1
 CALL func ARG2 [ARG1] [ARG1]
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 CALL func ARG1 ARG3 ARG4 ARG3
 RETURN 0
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 12) INT_ADD ARG1 12
(ARG2 & 7) INT_AND ARG2 7
(([(ARG1 + 12)] & 248) | (ARG2 & 7)) INT_OR ([(ARG1 + 12)] & 248) (ARG2 & 7)
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(ARG1 + 12) CAST (ARG1 + 12)
([(ARG1 + 12)] & 248) INT_AND [(ARG1 + 12)] 248
 STORE 433 (ARG1 + 12) (([(ARG1 + 12)] & 248) | (ARG2 & 7))
(ARG1 + 12) CAST (ARG1 + 12)
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func [ARG2] ARG1 ARG1
 CALL func ARG1 ARG3 ARG4 ARG5
[ARG2] LOAD 433 ARG2
 RETURN 0
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 12) INT_ADD ARG1 12
(ARG2 & 3) INT_AND ARG2 3
(((ARG2 & 3) * 32) / 2147483647) SUBPIECE ((ARG2 & 3) * 32) 0
(ARG1 + 12) CAST (ARG1 + 12)
((ARG2 & 3) * 32) INT_LEFT (ARG2 & 3) 5
 STORE 433 (ARG1 + 12) (([(ARG1 + 12)] & 159) | (((ARG2 & 3) * 32) / 2147483647))
 RETURN 0
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(([(ARG1 + 12)] & 159) | (((ARG2 & 3) * 32) / 2147483647)) INT_OR ([(ARG1 + 12)] & 159) (((ARG2 & 3) * 32) / 2147483647)
(ARG1 + 12) CAST (ARG1 + 12)
([(ARG1 + 12)] & 159) INT_AND [(ARG1 + 12)] 159
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func [ARG2] ARG1 ARG1
 CALL func ARG1 ARG3 ARG4 ARG5 ARG6
[ARG2] LOAD 433 ARG2
 RETURN 0
(ARG1 + 32) INT_ADD ARG1 32
 STORE 433 (ARG1 + 32) ARG2
(ARG1 + 32) CAST (ARG1 + 32)
 RETURN 0
[ARG1] LOAD 433 ARG1
 CALL func ARG2 [ARG1] [ARG1]
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 CALL func ARG1 ARG3 ARG4 ARG5 ARG6 ARG7
 RETURN 0
 CALL func ARG1 ARG3 ARG4 ARG5 ARG6 ARG7 ARG8 4392011
 CALL func ARG2 ARG1 ARG1
4392011 COPY 4392011
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 STORE 433 (ARG1 + 8) ARG2
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 24) INT_ADD ARG1 24
 CALL func ARG1 (ARG1 + 24) ARG2 ARG3
 RETURN 0
 CALL func ARG1 (ARG2 * 8) 8 (ARG2 * 8)
(ARG2 * 8) INT_MULT ARG2 8
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
 CALL func ARG1 0
f() CALL func ARG1
 CALL func ARG1 (f() + 8) (f() + 8)
[ARG2] LOAD 433 ARG2
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(f() + 8) INT_ADD f() 8
0 INT_LESSEQUAL [(ARG1 + 16)] [(ARG1 + 8)]
 STORE 433 f() [ARG2]
 CBRANCH ([(ARG1 + 16)] INT_LESSEQUAL [(ARG1 + 8)])
 RETURN 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
f() CAST f()
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 12) INT_ADD ARG1 12
([(ARG1 + 12)] & 7) COPY ([(ARG1 + 12)] & 7)
([(ARG1 + 12)] & 7) INT_AND [(ARG1 + 12)] 7
 RETURN 0 ([(ARG1 + 12)] & 7)
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(ARG1 + 12) CAST (ARG1 + 12)
(ARG1 + 13) INT_ADD ARG1 13
(7 & ([(ARG1 + 13)] / 2)) COPY (7 & ([(ARG1 + 13)] / 2))
[(ARG1 + 13)] LOAD 433 (ARG1 + 13)
(7 & ([(ARG1 + 13)] / 2)) INT_AND ([(ARG1 + 13)] / 2) 7
 RETURN 0 (7 & ([(ARG1 + 13)] / 2))
(ARG1 + 13) CAST (ARG1 + 13)
([(ARG1 + 13)] / 2) INT_RIGHT [(ARG1 + 13)] 1
(ARG1 + 12) INT_ADD ARG1 12
(3 & ([(ARG1 + 12)] / 274877906816)) INT_AND ([(ARG1 + 12)] / 274877906816) 3
(3 & ([(ARG1 + 12)] / 274877906816)) COPY (3 & ([(ARG1 + 12)] / 274877906816))
([(ARG1 + 12)] / 128) INT_RIGHT [(ARG1 + 12)] 7
(ARG1 + 12) CAST (ARG1 + 12)
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
 RETURN 0 (3 & ([(ARG1 + 12)] / 274877906816))
([(ARG1 + 12)] / 274877906816) SUBPIECE ([(ARG1 + 12)] / 128) 0
ARG1 COPY ARG1
(ARG2 + 24) INT_ADD ARG2 24
(ARG2 + 24) INT_ADD ARG2 24
ARG2 COPY ARG2
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func f(ARG2)
(A_Stack[-0x40]:8 # A_Stack[-0x48]:8) PIECE A_Stack[-0x40]:8 A_Stack[-0x48]:8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL f() 0
0 INT_NOTEQUAL [[(ARG2 + 24)]] 0
 CBRANCH ([[(ARG2 + 24)]] INT_NOTEQUAL 0)
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
[[(ARG2 + 24)]] LOAD 433 [(ARG2 + 24)]
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
[(f() + 40)] LOAD 433 (f() + 40)
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_EQUAL 1)
(ARG2 + 24) CAST (ARG2 + 24)
0 COPY 0
0 INT_EQUAL f() 1
 CBRANCH ((f() & 4) INT_EQUAL 0)
 CALL func (f(ARG1) + 120) (RSP + -104) (f(ARG1) + 120)
(RSP + -104) PTRSUB RSP -104
(f() / 2147483647) SUBPIECE f() 0
(f(ARG1) + 120) INT_ADD f(ARG1) 120
f() CALL func f(ARG2)
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL f() 4
 CBRANCH (f() INT_EQUAL 4)
 RETURN 0
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
 CALL libcall___stack_chk_fail_thunk
inconsistency in registered CommandLine options COPY inconsistency in registered CommandLine options
(f() / 2147483647) SUBPIECE f() 0
 CALL func inconsistency in registered CommandLine options 1
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (0 INT_NOTEQUAL 1)
1 COPY 1
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func f() ' registered more than once! 
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f() : CommandLine Error: Option '
: CommandLine Error: Option ' COPY : CommandLine Error: Option '
f() CALL func
' registered more than once!  COPY ' registered more than once! 
(f() / 2147483647) SUBPIECE f() 0
(ARG2 + 24) INT_ADD ARG2 24
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f() [(ARG2 + 24)]
(ARG2 + 24) CAST (ARG2 + 24)
f() CALL func f() ARG1
(f() / 2147483647) SUBPIECE f() 8
(f() & 4) INT_AND f() 4
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
(RSP + -104) PTRSUB RSP -104
0 INT_EQUAL (f() & 4) 0
(f(ARG1) + 64) INT_ADD f(ARG1) 64
(f() / 2147483647) SUBPIECE f() 8
 CALL func (f(ARG1) + 64) (RSP + -104) (f(ARG1) + 64)
f() CALL func f(ARG2)
 CBRANCH ([(f(ARG1) + 208)] INT_NOTEQUAL 0)
(f() / 2147483647) SUBPIECE f() 8
 CALL func f(ARG2) (RSP + -56) (f() / 2147483647) (f() / 2147483647)
Cannot specify more than one option with cl::ConsumeAfter! COPY Cannot specify more than one option with cl::ConsumeAfter!
1 COPY 1
 CALL func (RSP + -72)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -56) Cannot specify more than one option with cl::ConsumeAfter!
(f() / 2147483647) SUBPIECE f() 8
(RSP + -72) PTRSUB RSP -72
(f() / 2147483647) SUBPIECE f() 0
(f(ARG1) + 208) INT_ADD f(ARG1) 208
[(f(ARG1) + 208)] LOAD 433 (f(ARG1) + 208)
(f(ARG1) + 208) CAST (f(ARG1) + 208)
(f(ARG1) + 208) CAST (f(ARG1) + 208)
(f(ARG1) + 208) INT_ADD f(ARG1) 208
 STORE 433 (f(ARG1) + 208) f(ARG2)
0 INT_NOTEQUAL [(f(ARG1) + 208)] 0
f() CALL func (ARG2 + 24) (RSP + -104) (ARG2 + 24)
ARG1 COPY ARG1
(RSP + -104) PTRSUB RSP -104
0 INT_NOTEQUAL 0 1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -56) PTRSUB RSP -56
(RSP + -72) PTRSUB RSP -72
(f() / 2147483647) SUBPIECE f() 0
 CALL func (ARG1 + 176)
(ARG1 + 176) INT_ADD ARG1 176
 CALL func (RSP + -56) (RSP + -72) (RSP + -72)
 CALL func f() ARG1 f()
(ARG1 + 56) INT_ADD ARG1 56
 RETURN 0
6887840 PTRSUB 0 6887840
(ARG1 + 56) CAST (ARG1 + 56)
 STORE 433 (ARG1 + 56) 1
f() CALL func 6887840
 RETURN 0
 CALL func ARG1
(ARG1 + 80) INT_ADD ARG1 80
 CALL func (ARG1 + 80)
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5 ARG6 ARG7 ARG8
(ARG1 + 64) PTRADD ARG1 8 8
(ARG1 + 80) PTRADD ARG1 10 8
 CALL func (ARG1 + 80) ARG1 (ARG1 + 80)
 CALL func ARG1 0 0
 STORE 433 ARG1 Symbol
 CALL func ARG1
Symbol CAST Symbol
 CALL func (ARG1 + 64)
 RETURN 0
Symbol PTRSUB 0 Symbol
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
Symbol CAST Symbol
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func ARG1
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 CALL func ARG1
 STORE 433 ARG1 Symbol
(ARG1 + 80) PTRADD ARG1 10 8
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func (ARG1 + 80)
 RETURN 0
 CALL func ARG1
 CALL libcall_operator.delete_thunk ARG1
 RETURN 0
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func ARG1
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 CALL func ARG1
(ARG1 + 88) PTRADD ARG1 11 8
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func (ARG1 + 88)
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
(RSP + -24) PTRSUB RSP -24
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
40 CAST 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
 RETURN 1
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func ARG1
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
(ARG1 + 88) PTRADD ARG1 11 8
 STORE 433 ARG1 Symbol
 CALL func ARG1
 CALL func (ARG1 + 88)
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func ARG1
ARG1 CAST ARG1
 STORE 433 ARG1 Symbol
 STORE 433 (ARG1 + 9) 0
(ARG1 + 9) CAST (ARG1 + 9)
(ARG1 + 9) INT_ADD ARG1 9
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 CALL func ARG1
 STORE 433 ARG1 Symbol
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
 CALL func ARG1
 STORE 433 ARG1 Symbol
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func (ARG1 + 8)
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
(ARG1 + 9) INT_ADD ARG1 9
(ARG1 + 8) INT_ADD ARG1 8
[ARG2] LOAD 433 ARG2
 STORE 433 (ARG1 + 9) 1
 STORE 433 (ARG1 + 8) [ARG2]
 RETURN 0
(ARG1 + 9) CAST (ARG1 + 9)
(ARG1 + 8) CAST (ARG1 + 8)
 CALL func ARG1 ARG2 ARG2
ARG1 COPY ARG1
 RETURN 0 ARG1
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 ARG3
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG2 (RSP + -40) A_Stack[-0x38]:8 A_Stack[-0x30]:8
 CALL func (ARG1 + 8) ARG3 (ARG1 + 8)
 CBRANCH ([ARG1] INT_EQUAL 0)
(f() + 40) CAST (f() + 40)
0 INT_EQUAL [ARG1] 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
cl::location(x) specified more than once! COPY cl::location(x) specified more than once!
 CALL func (RSP + -56)
(RSP + -40) PTRSUB RSP -40
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
0 COPY 0
 CALL func (RSP + -40) cl::location(x) specified more than once!
(RSP + -40) PTRSUB RSP -40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
[ARG1] LOAD 433 ARG1
 CALL func (ARG2 + 64) ARG2 [ARG1] (ARG2 + 64)
(ARG2 + 64) INT_ADD ARG2 64
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG1 ARG3 ARG3
 CALL func [ARG2] ARG1 ARG1
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func ARG1 ARG3 ARG4 ARG3
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 CALL func ARG1 ARG3 ARG4 ARG5
 RETURN 0
 RETURN 0
 CALL func ARG1
(ARG1 + 88) INT_ADD ARG1 88
 CALL func (ARG1 + 88)
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5
(ARG1 + 88) PTRADD ARG1 11 8
(ARG1 + 64) PTRADD ARG1 8 8
 CALL func (ARG1 + 88) ARG1 (ARG1 + 88)
 CALL func ARG1 0 0
 CALL func ARG1
Symbol CAST Symbol
 CALL func (ARG1 + 64)
 RETURN 0
Symbol PTRSUB 0 Symbol
 STORE 433 ARG1 ARG2
 RETURN 0
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func ARG1
(ARG1 + 88) INT_ADD ARG1 88
 CALL func (ARG1 + 88)
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 RETURN 0
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 8) INT_ADD ARG1 8
[ARG2] LOAD 433 ARG2
 STORE 433 (ARG1 + 8) [ARG2]
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 12) CAST (ARG1 + 12)
 STORE 433 (ARG1 + 12) 1
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
 RETURN 0 ARG1
 STORE 433 ARG1 [ARG2]
(ARG1 + 8) PTRADD ARG1 2 4
[ARG2] LOAD 433 ARG2
 CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
0 INT_NOTEQUAL ARG3 0
 CBRANCH (ARG3 INT_NOTEQUAL 0)
 RETURN 0
(ARG1 + 64) INT_ADD ARG1 64
 CALL func (ARG1 + 64) ARG2 1 (ARG1 + 64)
 RETURN 0
[ARG1] LOAD 433 ARG1
 CALL func ARG2 (RSP + -20) (RSP + -20)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -20) PTRSUB RSP -20
[40] LOAD 433 40
[ARG1] CAST [ARG1]
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[[ARG1]] LOAD 433 [ARG1]
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG1 ARG3 ARG3
 CALL func [ARG2] ARG1 ARG1
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG3 ARG4 ARG3
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG1 ARG3 ARG4 ARG5
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 CALL func ARG1
ARG1 CAST ARG1
 STORE 433 ARG1 Symbol
 STORE 433 (ARG1 + 12) 0
(ARG1 + 12) CAST (ARG1 + 12)
(ARG1 + 12) INT_ADD ARG1 12
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 CALL func ARG1
 STORE 433 ARG1 Symbol
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
 CALL func ARG1
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
(ARG1 + 8) PTRADD ARG1 2 4
 STORE 433 ARG1 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (ARG1 + 8) (RSP + -20) (ARG1 + 8)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
0 COPY 0
[40] LOAD 433 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -20) PTRSUB RSP -20
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5
(ARG1 + 88) PTRADD ARG1 11 8
(ARG1 + 64) PTRADD ARG1 8 8
 CALL func (ARG1 + 88) ARG1 (ARG1 + 88)
 CALL func ARG1 0 0
 CALL func ARG1
Symbol CAST Symbol
 CALL func (ARG1 + 64)
 RETURN 0
Symbol PTRSUB 0 Symbol
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
(RSP + -24) PTRSUB RSP -24
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
40 CAST 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
 RETURN 1
0 INT_EQUAL ARG2 65535
0 INT_EQUAL ARG1 1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (ARG1 INT_EQUAL 1)
 CBRANCH (ARG2 INT_EQUAL 65535)
 CALL func (RSP + -32) debug string
(RSP + -44) PTRSUB RSP -44
 CALL func 6887584 debug-only (RSP + -40) (RSP + -52) (RSP + -48) (RSP + -32) (RSP + -24) (RSP + -44)
1 COPY 1
Buffer the last N characters of debug output until program termination. [default 0 -- immediate print-out] COPY Buffer the last N characters of debug output until program termination. [default 0 -- immediate print-out]
4399478 PTRSUB 0 4399478
6887360 PTRSUB 0 6887360
(RSP + -40) PTRSUB RSP -40
(RSP + -52) PTRSUB RSP -52
(RSP + -48) PTRSUB RSP -48
6887456 PTRSUB 0 6887456
(RSP + -32) PTRSUB RSP -32
(RSP + -32) PTRSUB RSP -32
debug string COPY debug string
 CALL func (RSP + -32) Buffer the last N characters of debug output until program termination. [default 0 -- immediate print-out]
(RSP + -32) PTRSUB RSP -32
(RSP + -40) PTRSUB RSP -40
6887552 PTRSUB 0 6887552
4392950 PTRSUB 0 4392950
6887584 PTRSUB 0 6887584
6887360 PTRSUB 0 6887360
6878568 PTRSUB 0 6878568
6887456 PTRSUB 0 6887456
1 COPY 1
Enable a specific type of debug output COPY Enable a specific type of debug output
 CALL func 6887360 debug (RSP + -32) (RSP + -40) (RSP + -24)
Enable debug output COPY Enable debug output
4399358 PTRSUB 0 4399358
(RSP + -24) PTRSUB RSP -24
6878568 PTRSUB 0 6878568
6887296 PTRSUB 0 6887296
(RSP + -32) PTRSUB RSP -32
1 COPY 1
6887584 PTRSUB 0 6887584
debug COPY debug
 CALL func (RSP + -40) Enable a specific type of debug output
(RSP + -44) PTRSUB RSP -44
 CALL libcall___cxa_atexit_thunk 4392950 6887584 6878568
 CALL libcall___cxa_atexit_thunk 4399358 6887360 6878568
0 COPY 0
6878568 PTRSUB 0 6878568
 CALL func 6887456 debug-buffer-size (RSP + -32) (RSP + -40) (RSP + -24)
f() CALL func 6887296
debug-buffer-size COPY debug-buffer-size
(RSP + -24) PTRSUB RSP -24
f() CALL func 6887552
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(RSP + -24) PTRSUB RSP -24
 CALL func (RSP + -32) Enable debug output
1 COPY 1
(RSP + -32) PTRSUB RSP -32
debug-only COPY debug-only
f() CALL func (RSP + -44)
 CALL libcall___cxa_atexit_thunk 4399478 6887456 6878568
(RSP + -32) PTRSUB RSP -32
2 COPY 2
f() COPY f()
f() COPY f()
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
[ARG1] LOAD 433 ARG1
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
 RETURN 1
 CALL libcall___assert_fail_thunk Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 1100 0
 RETURN 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!" COPY Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!"
0 COPY 0
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
 RETURN 0 ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1
 CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
 CALL func [ARG1] ARG2 ARG2
0 INT_NOTEQUAL ARG3 0
 RETURN 0
 CBRANCH (ARG3 INT_NOTEQUAL 0)
(ARG1 + 16) INT_ADD ARG1 16
 STORE 433 (ARG1 + 16) ARG2
 RETURN 0
(ARG1 + 16) CAST (ARG1 + 16)
ARG2 COPY ARG2
 CALL libcall_operator=_thunk ARG7 (RSP + -56)
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG5 COPY ARG5
ARG6 COPY ARG6
ARG1 COPY ARG1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
(RSP + -104) PTRSUB RSP -104
(RSP + -56) PTRSUB RSP -56
[40] LOAD 433 40
 CALL func (RSP + -56) (RSP + -104) (RSP + -104)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -56) PTRSUB RSP -56
(RSP + -56) CAST (RSP + -56)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 COPY 0
 CALL libcall_~basic_string_thunk (RSP + -56)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -56) PTRSUB RSP -56
40 INT_ADD 0 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 0
f() CALL func (ARG1 + 80) ARG1 ARG3 ARG4 ARG5 ARG6 (RSP + -72) 4393601
 CALL func ARG1 ARG2 ARG2
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 80) INT_ADD ARG1 80
0 INT_EQUAL f() 0
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
 CALL libcall_basic_string_thunk
(FS_OFFSET + 40) INT_ADD 0 40
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
4393601 COPY 4393601
-1 COPY -1
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(RSP + -72) PTRSUB RSP -72
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
-1 BOOL_NEGATE 0
 CALL libcall_~basic_string_thunk (RSP + -72)
(RSP + -72) PTRSUB RSP -72
0 INT_EQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 -1
 CALL func (ARG1 + 64) (RSP + -72) 0 (ARG1 + 64)
(RSP + -72) PTRSUB RSP -72
2 COPY 2
 RETURN 0 2
(ARG1 + 80) INT_ADD ARG1 80
 RETURN 0
 CALL func (ARG1 + 80)
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
 RETURN 0 f(ARG1 , ARG2)
0 INT_NOTEQUAL [[(ARG1 + 40)]] 0
(ARG1 + 40) CAST (ARG1 + 40)
 CBRANCH ([[(ARG1 + 40)]] INT_NOTEQUAL 0)
[[(ARG1 + 40)]] LOAD 433 [(ARG1 + 40)]
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
[ARG1] LOAD 433 ARG1
VZERO CALLIND [[ARG1]] ARG1
f() CALL func ARG2 VZERO VZERO
(ARG2 + 24) INT_ADD ARG2 24
(ARG2 + 24) CAST (ARG2 + 24)
0 INT_NOTEQUAL VZERO 0
 RETURN 0 (f() + 6)
[[ARG1]] LOAD 433 [ARG1]
 CBRANCH (VZERO INT_NOTEQUAL 0)
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
f() CALL libcall_strlen_thunk [(ARG2 + 24)]
[ARG1] CAST [ARG1]
(f() + 6) INT_ADD f() 6
(f() + 3) INT_ADD f() 3
((f() + 3) + f()) INT_ADD f() (f() + 3)
f() CALL libcall_strlen_thunk f()
f() CAST f()
 CALL func (ARG1 + 80) ARG1 (ARG1 + 80)
(ARG1 + 80) INT_ADD ARG1 80
 RETURN 0
f() CALL func ARG2 (f() + 1) -1 (f() + 1)
f() CALL func ARG2 0 f()
 CALL func ARG1 ARG2 (RSP + -40) ARG2
f() CALL func ARG2 ARG3 0 ARG3
ARG3 INT_SEXT ARG3
 CALL func ARG1 (RSP + -56) (RSP + -40) (RSP + -56)
ARG1 COPY ARG1
(f() + 40) CAST (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL -1)
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_EQUAL f() -1
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -40) PTRSUB RSP -40
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(RSP + -40) PTRSUB RSP -40
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -40)
(f() + 1) INT_ADD f() 1
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -40) PTRSUB RSP -40
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
(RSP + -56) PTRSUB RSP -56
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(ARG3 - ARG4) INT_SUB ARG3 ARG4
f() CALL func f() ARG3
ARG1 COPY ARG1
ARG2 COPY ARG2
f() CALL func
f() CALL func (RSP + -88)
(RSP + -120) PTRSUB RSP -120
(RSP + -104) PTRSUB RSP -104
(f() + 40) CAST (f() + 40)
4621876 PTRSUB 0 4621876
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -88) PTRSUB RSP -88
f() CALL func f() 4621876
 CBRANCH (0 INT_NOTEQUAL [40])
4621786 PTRSUB 0 4621786
 CALL func f() 4621786
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f() 1
0 INT_NOTEQUAL 0 [40]
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_EQUAL 1)
 CALL func (RSP + -104) (RSP + -120) 10 (RSP + -120)
f() CALL func f() (ARG3 - ARG4)
[40] LOAD 433 (f() + 40)
f() CALL func f() A_Stack[-0x68]:8 A_Stack[-0x60]:8 f()
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CALL func (RSP + -72) (RSP + -88) 10 (RSP + -88)
4621786 PTRSUB 0 4621786
(RSP + -104) PTRSUB RSP -104
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -104) (RSP + -72) (RSP + -72)
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
 CALL func f() 4621786
f() CALL func
(RSP + -88) PTRSUB RSP -88
f() CALL func f() f() f() f()
[ARG1] LOAD 433 ARG1
f() CALL func ARG1 ARG2 ARG2
VZERO CALLIND [[ARG1]] ARG1
(ARG2 + 24) INT_ADD ARG2 24
(ARG2 + 32) INT_ADD ARG2 32
f() CALL func ARG2 VZERO VZERO
 CALL func f() f() ARG3 f()
[[ARG1]] LOAD 433 [ARG1]
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
 CALL func f() [(ARG2 + 24)]
(ARG2 + 24) CAST (ARG2 + 24)
 CBRANCH (VZERO INT_NOTEQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_NOTEQUAL VZERO 0
f() CALL func f() 4621880
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
[ARG1] CAST [ARG1]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
(ARG2 + 32) CAST (ARG2 + 32)
 CALL func (RSP + -56) [(ARG2 + 32)] [(ARG2 + 32)]
(RSP + -56) PTRSUB RSP -56
f() CALL func
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
4621880 PTRSUB 0 4621880
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALL func f() 62
f() CALL func f() 4621884
f() CALL func f() f()
4621884 PTRSUB 0 4621884
f() CALL func
(ARG1 + 80) INT_ADD ARG1 80
 CALL func (ARG1 + 80) ARG1 ARG2 (ARG1 + 80)
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 (ARG1 + 8)
 CALL func ARG1
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
(ARG2 + 24) INT_ADD ARG2 24
(ARG2 + 24) INT_ADD ARG2 24
(ARG3 - (f() / 2147483647)) INT_SUB ARG3 (f() / 2147483647)
(f() / 2147483647) SUBPIECE f() 0
 CALL func f() [(ARG2 + 24)]
f() CALL func
f() CALL func
(ARG2 + 24) CAST (ARG2 + 24)
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
f() CALL func f() 4621880
 CALL func f() (ARG3 - (f() / 2147483647))
f() CALL libcall_strlen_thunk [(ARG2 + 24)]
4621880 PTRSUB 0 4621880
 RETURN 0
(ARG2 + 24) CAST (ARG2 + 24)
 CALL func ARG1 ARG2 ARG3 ARG2
= *cannot print option value*  COPY = *cannot print option value* 
 RETURN 0
 CALL func f() = *cannot print option value* 
f() CALL func
 CALL func ARG3 ARG2 ARG6 ARG2
 RETURN 0
 CALL func (RSP + -17) ARG1 ARG2 ARG3 ARG4 ARG5
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -17) PTRSUB RSP -17
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 RETURN 0 0
0 COPY 0
0 INT_EQUAL ARG3 0
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 80) INT_ADD ARG1 80
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
 CALL func ARG1 (ARG1 + 80) f() f() ARG2
 CBRANCH f()
 CBRANCH (ARG3 INT_EQUAL 0)
 RETURN 0
f() CALL func (ARG1 + 64)
f() CALL func (ARG1 + 64)
f() CALL func (ARG1 + 64)
1 COPY 1
0 INT_EQUAL f() 0
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
f() CALL func f() f()
f() CALL func (ARG1 + 64)
0 COPY 0
 RETURN 0
(ARG1 + 80) INT_ADD ARG1 80
 CALL func (ARG1 + 80) ARG2 (ARG1 + 80)
 RETURN 0
 RETURN 0 0
0 COPY 0
 CALL func 1 65535
 RETURN 0
 CALL func ARG1
 CALL libcall_operator.delete_thunk ARG1
 RETURN 0
1 COPY 1
 RETURN 0 1
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 CALL libcall_operator.delete_thunk ARG1
 RETURN 0
 CALL func ARG1
 CALL libcall_operator.delete_thunk ARG1
 RETURN 0
[ARG1] LOAD 433 ARG1
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
 RETURN 0
Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!" COPY Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!"
0 COPY 0
 CALL libcall___assert_fail_thunk Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 1100 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
 RETURN 1
0 INT_NOTEQUAL ARG3 0
[ARG1] LOAD 433 ARG1
 CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG2] LOAD 433 ARG2
 CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
 RETURN 0
[ARG1] CAST [ARG1]
 CBRANCH (ARG3 INT_NOTEQUAL 0)
 STORE 433 [ARG1] [ARG2]
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
ARG1 CAST ARG1
 STORE 433 ARG1 ARG2
 STORE 433 (ARG1 + 8) ARG3
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(ARG1 + 17) INT_ADD ARG1 17
 STORE 433 (ARG1 + 16) 3
(ARG1 + 17) CAST (ARG1 + 17)
 STORE 433 (ARG1 + 17) 5
isValid() && "Invalid twine!" COPY isValid() && "Invalid twine!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h
llvm::Twine::Twine(const char*, const llvm::StringRef&) COPY llvm::Twine::Twine(const char*, const llvm::StringRef&)
 RETURN 0
 CALL libcall___assert_fail_thunk isValid() && "Invalid twine!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h 364 llvm::Twine::Twine(const char*, const llvm::StringRef&)
 RETURN 1
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG5 COPY ARG5
ARG6 COPY ARG6
 STORE 433 ARG7 1
 STORE 433 ARG7 0
4619597 PTRSUB 0 4619597
[(f() + 40)] LOAD 433 (f() + 40)
f() CALL func ARG5 ARG6 A_Stack[-0x138]:8 A_Stack[-0x130]:8
 CALL func (RSP + -312) 4619597
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -312) PTRSUB RSP -312
 CBRANCH f()
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
 CALL func (RSP + -216) FALSE
FALSE COPY FALSE
(RSP + -216) PTRSUB RSP -216
0 INT_NOTEQUAL f() 0
f() CALL func f(ARG5) f(ARG6) f() f()
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 CBRANCH f()
 CALL func (RSP + -88) (RSP + -152) (RSP + -120) (RSP + -152)
(RSP + -88) PTRSUB RSP -88
(RSP + -152) PTRSUB RSP -152
0 COPY 0
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -168)
 CALL func (RSP + -152) 4621980 (RSP + -360)
f() CALL func f(ARG2) (RSP + -88) f() f()
 CALL func (RSP + -120) ' is invalid value for boolean argument! Try 0 or 1
' is invalid value for boolean argument! Try 0 or 1 COPY ' is invalid value for boolean argument! Try 0 or 1
(RSP + -152) PTRSUB RSP -152
(RSP + -88) PTRSUB RSP -88
4621980 PTRSUB 0 4621980
(RSP + -120) PTRSUB RSP -120
(RSP + -360) PTRSUB RSP -360
 BRANCH VZERO
(RSP + -120) PTRSUB RSP -120
 CBRANCH (f() INT_NOTEQUAL 0)
4621892 PTRSUB 0 4621892
(RSP + -280) PTRSUB RSP -280
 CALL func (RSP + -280) 4621892
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func ARG5 ARG6 A_Stack[-0x118]:8 A_Stack[-0x110]:8
 CBRANCH (f() INT_NOTEQUAL 0)
4621922 PTRSUB 0 4621922
(RSP + -184) PTRSUB RSP -184
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func f(ARG5) f(ARG6) f() f()
 CALL func (RSP + -184) 4621922
(RSP + -296) PTRSUB RSP -296
4621887 PTRSUB 0 4621887
f() CALL func ARG5 ARG6 A_Stack[-0x128]:8 A_Stack[-0x120]:8
 CALL func (RSP + -296) 4621887
0 INT_NOTEQUAL f() 0
(RSP + -200) PTRSUB RSP -200
False COPY False
0 INT_NOTEQUAL f() 0
f() CALL func f(ARG5) f(ARG6) f() f()
 CALL func (RSP + -200) False
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(RSP + -248) PTRSUB RSP -248
f() CALL func ARG5 ARG6 A_Stack[-0xf8]:8 A_Stack[-0xf0]:8
 CALL func (RSP + -248) 4621902
4621902 PTRSUB 0 4621902
false COPY false
(RSP + -232) PTRSUB RSP -232
f() CALL func f(ARG5) f(ARG6) f() f()
 BRANCH VZERO
 CALL func (RSP + -232) false
0 INT_EQUAL f() 0
0 COPY 0
4621897 PTRSUB 0 4621897
(RSP + -264) PTRSUB RSP -264
0 INT_NOTEQUAL f() 0
f() CALL func ARG5 ARG6 A_Stack[-0x108]:8 A_Stack[-0x100]:8
 CALL func (RSP + -264) 4621897
f() CALL func (ARG1 + 88) ARG1 ARG3 ARG4 ARG5 ARG6 (RSP + -33)
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 88) INT_ADD ARG1 88
 CALL func ARG1 ARG2 ARG2
(f() + 40) CAST (f() + 40)
(RSP + -33) PTRSUB RSP -33
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
-1 COPY -1
-1 BOOL_NEGATE 0
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
 RETURN 0 -1
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
(RSP + -33) PTRSUB RSP -33
 CALL func (ARG1 + 64) (RSP + -33) 0 (ARG1 + 64)
(ARG1 + 88) INT_ADD ARG1 88
 RETURN 0
 CALL func (ARG1 + 88)
 CALL func (ARG1 + 88) ARG1 (ARG1 + 88)
(ARG1 + 88) INT_ADD ARG1 88
 RETURN 0
(ARG1 + 88) INT_ADD ARG1 88
 CALL func (ARG1 + 88) ARG1 ARG2 (ARG1 + 88)
 RETURN 0
(ARG1 + 9) INT_ADD ARG1 9
(ARG1 + 8) INT_ADD ARG1 8
[ARG2] LOAD 433 ARG2
0 INT_EQUAL [(ARG1 + 9)] 0
 CBRANCH ([(ARG1 + 9)] INT_EQUAL 0)
[(ARG1 + 9)] LOAD 433 (ARG1 + 9)
 RETURN 0 f()
(ARG1 + 9) CAST (ARG1 + 9)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_EQUAL [(ARG1 + 8)] [ARG2]
 CBRANCH ([(ARG1 + 8)] INT_EQUAL [ARG2])
0 COPY 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
1 COPY 1
 BRANCH VZERO
 CALL func ARG1
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 ARG2 ARG2
ARG1 CAST ARG1
 STORE 433 ARG1 Symbol
(ARG2 + 8) INT_ADD ARG2 8
(ARG2 + 9) INT_ADD ARG2 9
 STORE 433 (ARG1 + 8) [(ARG2 + 8)]
 STORE 433 (ARG1 + 9) [(ARG2 + 9)]
(ARG1 + 8) CAST (ARG1 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
 RETURN 0
(ARG1 + 9) CAST (ARG1 + 9)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG1 + 9) INT_ADD ARG1 9
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
[(ARG2 + 9)] LOAD 433 (ARG2 + 9)
(ARG2 + 9) CAST (ARG2 + 9)
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
(ARG1 + 9) INT_ADD ARG1 9
 RETURN 0 [(ARG1 + 9)]
[(ARG1 + 9)] LOAD 433 (ARG1 + 9)
[(ARG1 + 9)] COPY [(ARG1 + 9)]
(ARG1 + 9) CAST (ARG1 + 9)
 STORE 433 ARG1 Symbol
(ARG1 + 40) PTRADD ARG1 5 8
 CALL func ARG1 0
 STORE 433 (ARG1 + 40) ARG2
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 9) INT_ADD ARG1 9
0 INT_EQUAL [(ARG1 + 9)] 0
 CBRANCH ([(ARG1 + 9)] INT_EQUAL 0)
[(ARG1 + 9)] LOAD 433 (ARG1 + 9)
(ARG1 + 9) CAST (ARG1 + 9)
 CALL libcall___assert_fail_thunk Valid && "invalid option value" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 412 const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = bool]
 RETURN 0 (ARG1 + 8)
 RETURN 1
Valid && "invalid option value" COPY Valid && "invalid option value"
const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = bool] COPY const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = bool]
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
 CALL func ARG1 ARG2 ARG5 ARG2
f() CALL func ARG4
f() CALL func ARG4
 CALL func (RSP + -120) ARG3 ARG3
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(RSP + -72) PTRSUB RSP -72
 CALL libcall_~basic_string_thunk (RSP + -72)
f() CALL func
(FS_OFFSET + 40) INT_ADD 0 40
4622159 PTRSUB 0 4622159
0 INT_LESS f() 8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL func f() 4622144
(RSP + -120) PTRSUB RSP -120
 CALL func f() 4622159
4622144 PTRSUB 0 4622144
(RSP + -72) PTRSUB RSP -72
 CBRANCH (f() INT_LESS 8)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -120) (RSP + -72) (RSP + -72)
f() CALL func
 CALL func f() (default: 
f() CALL libcall_size_thunk
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
f() CALL func
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -120)
(default:  COPY (default: 
0 INT_NOTEQUAL f() [(f() + 40)]
f() CALL func f() f()
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -120) PTRSUB RSP -120
 CALL func f() (RSP + -72) f()
 CALL libcall_basic_string_thunk
(RSP + -72) PTRSUB RSP -72
f() CAST f()
 BRANCH VZERO
 CALL func f() [f()]
f() CALL func
 CALL func f() *no default*
*no default* COPY *no default*
f() CALL func
[f()] LOAD 433 f()
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
f() CALL libcall_size_thunk
 BRANCH VZERO
0 COPY 0
(8 - f()) INT_SUB 8 f()
 CALL func ARG3 ARG2 [ARG4] (RSP + -40) ARG6
[ARG4] LOAD 433 ARG4
 CALL func (RSP + -40) ARG5 ARG5
(RSP + -40) PTRSUB RSP -40
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -40) PTRSUB RSP -40
40 INT_ADD 0 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 CALL func (RSP + -17) ARG1 ARG2 ARG3 ARG4 ARG5
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
(RSP + -17) PTRSUB RSP -17
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 (ARG1 + 8)
0 INT_EQUAL ARG3 0
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 64) INT_ADD ARG1 64
 CALL func ARG1 (ARG1 + 88) f() f() ARG2
(ARG1 + 64) INT_ADD ARG1 64
 CBRANCH f()
 RETURN 0
 CBRANCH (ARG3 INT_EQUAL 0)
f() CALL func (ARG1 + 64)
f() CALL func (ARG1 + 64)
f() CALL func (ARG1 + 64)
 BRANCH VZERO
1 COPY 1
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CALL func f() f()
f() CALL func (ARG1 + 64)
0 COPY 0
(ARG1 + 88) INT_ADD ARG1 88
 CALL func (ARG1 + 88) ARG2 (ARG1 + 88)
 RETURN 0
f() CALL func ARG1 f() f()
f() CALL func ARG2
f() CALL func ARG2
 RETURN 0 f()
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
 BRANCH VZERO
0 COPY 0
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 8) INT_ADD ARG1 8
0 INT_EQUAL [(ARG1 + 12)] 0
 CBRANCH ([(ARG1 + 12)] INT_EQUAL 0)
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(ARG1 + 12) CAST (ARG1 + 12)
 RETURN 1
Valid && "invalid option value" COPY Valid && "invalid option value"
 RETURN 0 (ARG1 + 8)
const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = unsigned int] COPY const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = unsigned int]
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
 CALL libcall___assert_fail_thunk Valid && "invalid option value" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 412 const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = unsigned int]
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 8) INT_ADD ARG1 8
[ARG2] LOAD 433 ARG2
 RETURN 0 f()
0 INT_EQUAL [(ARG1 + 12)] 0
 CBRANCH ([(ARG1 + 12)] INT_EQUAL 0)
(ARG1 + 12) CAST (ARG1 + 12)
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
0 COPY 0
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_EQUAL [(ARG1 + 8)] [ARG2]
 CBRANCH ([(ARG1 + 8)] INT_EQUAL [ARG2])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
1 COPY 1
(ARG1 + 12) INT_ADD ARG1 12
 RETURN 0 [(ARG1 + 12)]
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
[(ARG1 + 12)] COPY [(ARG1 + 12)]
(ARG1 + 12) CAST (ARG1 + 12)
f() CALL func ARG1 f() f()
f() CALL func ARG2
f() CALL func ARG2
 RETURN 0 f()
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
 BRANCH VZERO
0 COPY 0
f() CALL func ARG1 ARG2 ARG2
ARG1 COPY ARG1
ARG2 COPY ARG2
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_LESS f() 65
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
f() CALL func
 CBRANCH (f() INT_LESS 65)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ((f() & 63) INT_NOTEQUAL 0)
(f(ARG2) + -64) INT_ADD f(ARG2) -64
 CALL func (RSP + -72) (f(ARG2) + -64) (f(ARG2) + -64)
(RSP + -72) PTRSUB RSP -72
(f() & 63) INT_AND f() 63
(RSP + -72) PTRSUB RSP -72
f() COPY f()
(f(ARG1) + 64) INT_ADD f(ARG1) 64
 CBRANCH ((f(ARG1) + 64) INT_NOTEQUAL f(ARG1))
(RSP + -72) PTRSUB RSP -72
(f() & -64) INT_AND f() -64
 BRANCH VZERO
0 INT_NOTEQUAL (f(ARG1) + 64) f(ARG1)
f() CALL func ARG1 f() f() f()
(RSP + -72) PTRSUB RSP -72
f() CALL func (RSP + -72) f() f()
0 INT_NOTEQUAL (f() & 63) 0
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -72) f() f()
 CALL func (RSP + -120) f() f()
(ARG1 + (f() & -64)) INT_ADD ARG1 (f() & -64)
 CALL func (RSP + -72) ARG1 f() ARG1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(RSP + -72) PTRSUB RSP -72
 BRANCH VZERO
 CALL func (RSP + -72) (f(ARG1) + 64) (f(ARG1) + 64)
 CALL func ARG1 ARG2 ARG2
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([ARG1] + ([(ARG1 + 8)] * 4)) INT_ADD [ARG1] ([(ARG1 + 8)] * 4)
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
(RSP + -24) PTRSUB RSP -24
f() CALL func [ARG1] ([ARG1] + ([(ARG1 + 8)] * 4)) ([ARG1] + ([(ARG1 + 8)] * 4))
 CALL func (RSP + -24)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
40 CAST 40
([(ARG1 + 8)] * 4) INT_MULT [(ARG1 + 8)] 4
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL libcall_memcmp_thunk [ARG1] ARG2 ([(ARG1 + 8)] * 4)
0 INT_EQUAL [(ARG1 + 8)] ARG3
 RETURN 0 f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL ARG3)
 BRANCH VZERO
(0 # f()) PIECE 0 f()
0 COPY 0
(-256 & (0 # f())) INT_AND (0 # f()) -256
(-256 & (0 # f())) INT_OR (-256 & (0 # f())) 0
([(ARG1 + 8)] * 4) INT_MULT [(ARG1 + 8)] 4
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_EQUAL f() 0
0 INT_ZEXT 0
[(ARG1 + 8)] CAST [(ARG1 + 8)]
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL libcall_memcmp_thunk [ARG1] ARG2 ([(ARG1 + 8)] * 4)
ARG3 CAST ARG3
0 INT_LESS [(ARG1 + 8)] ARG3
0 INT_EQUAL [(ARG1 + 8)] ARG3
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL ARG3)
 RETURN 0 f(ARG3)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_ZEXT 0
 BRANCH VZERO
(f() / 2147483647) INT_RIGHT f() 31
([(ARG1 + 8)] * 4) INT_MULT [(ARG1 + 8)] 4
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() / 2147483647) INT_ZEXT (f() / 2147483647)
[(ARG1 + 8)] CAST [(ARG1 + 8)]
(ARG3 & -256) INT_OR (ARG3 & -256) 0
(ARG3 & -256) INT_AND ARG3 -256
 CALL libcall_memcpy_thunk ARG3 ARG1 (((ARG2 - ARG1) / 4) * 4)
ARG1 CAST ARG1
0 INT_NOTEQUAL ARG1 ARG2
ARG2 CAST ARG2
 RETURN 0
 CBRANCH (ARG1 INT_NOTEQUAL ARG2)
(ARG2 - ARG1) INT_SUB ARG2 ARG1
(((ARG2 - ARG1) / 4) * 4) INT_MULT ((ARG2 - ARG1) / 4) 4
((ARG2 - ARG1) / 4) INT_SRIGHT (ARG2 - ARG1) 2
(ARG2 - ARG1) CAST (ARG2 - ARG1)
(ARG1 + 16) INT_ADD ARG1 16
 RETURN 0 [(ARG1 + 16)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 0
(ARG2 - ARG1) INT_SUB ARG2 ARG1
 RETURN 0 ((ARG2 - ARG1) / 4)
((ARG2 - ARG1) / 4) INT_SRIGHT (ARG2 - ARG1) 2
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
[40] LOAD 433 40
(RSP + -48) PTRSUB RSP -48
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
40 CAST 40
 CALL func (RSP + -48)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0 [(ARG1 + 8)]
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
f() CALL func ARG1
f() CALL func ARG1
 RETURN 0 ((f() - f()) / 4)
((f() - f()) / 4) INT_SRIGHT (f() - f()) 2
(f() - f()) INT_SUB f() f()
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1 (f() + f()) (f() + f())
 CALL func ARG1 ((f() * 4) + f()) ((f() * 4) + f())
f() CALL func ARG1
 CALL func ARG2 ARG3 f() 0
f() CALL func ARG2 ARG3 ARG3
 CBRANCH (((f() - f()) / 4) INT_LESS f())
 RETURN 0
(f() - f()) INT_SUB f() f()
(f() * 4) INT_MULT f() 4
((f() - f()) / 4) INT_SRIGHT (f() - f()) 2
((f() * 4) + f()) INT_ADD f() (f() * 4)
((f() - f()) / 4) CAST ((f() - f()) / 4)
0 INT_LESS ((f() - f()) / 4) f()
(f() + f()) INT_ADD f() f()
 CALL func ARG1 (RSP + -24) (RSP + -16) ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
 RETURN 0
(RSP + -24) PTRSUB RSP -24
(RSP + -16) PTRSUB RSP -16
ARG2 COPY ARG2
 CALL func ARG1 (RSP + -20) (RSP + -20)
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -20) PTRSUB RSP -20
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL libcall_memcpy_thunk ARG3 ARG1 (((ARG2 - ARG1) / 4) * 4)
ARG1 CAST ARG1
0 INT_NOTEQUAL ARG1 ARG2
ARG2 CAST ARG2
 RETURN 0
 CBRANCH (ARG1 INT_NOTEQUAL ARG2)
(ARG2 - ARG1) INT_SUB ARG2 ARG1
(((ARG2 - ARG1) / 4) * 4) INT_MULT ((ARG2 - ARG1) / 4) 4
((ARG2 - ARG1) / 4) INT_SRIGHT (ARG2 - ARG1) 2
(ARG2 - ARG1) CAST (ARG2 - ARG1)
 RETURN 0
(ARG2 - ARG1) INT_SUB ARG2 ARG1
 RETURN 0 ((ARG2 - ARG1) / 4)
((ARG2 - ARG1) / 4) INT_SRIGHT (ARG2 - ARG1) 2
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
 CALL func (RSP + -48)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -48) PTRSUB RSP -48
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1 (f() + f()) (f() + f())
 CALL func ARG1 ((f() * 4) + f()) ((f() * 4) + f())
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG2 ARG3 ARG3
 CALL func ARG2 ARG3 f() 0
(f() - f()) INT_SUB f() f()
((f() - f()) / 4) CAST ((f() - f()) / 4)
((f() - f()) / 4) INT_SRIGHT (f() - f()) 2
(f() * 4) INT_MULT f() 4
((f() * 4) + f()) INT_ADD f() (f() * 4)
0 INT_LESS ((f() - f()) / 4) f()
 CBRANCH (((f() - f()) / 4) INT_LESS f())
 RETURN 0
(f() + f()) INT_ADD f() f()
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
 CALL func ARG1 (RSP + -56) (RSP + -56)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -88) PTRSUB RSP -88
f() CALL func (RSP + -88)
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(RSP + -56) PTRSUB RSP -56
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CBRANCH ((f() - f()) INT_NOTEQUAL 1)
(f() * 256) INT_LEFT f() 8
(RSP + -88) PTRSUB RSP -88
f() CALL func (RSP + -88) (f() + -1) (f() + -1)
(RSP + -52) PTRSUB RSP -52
(f() | (f() * 256)) INT_OR f() (f() * 256)
(f() + 3) INT_SUB f() 3
(RSP + -88) PTRSUB RSP -88
 BRANCH VZERO
f() INT_ZEXT f()
 CALL func f(ARG1) (RSP + -52) (RSP + -52)
(f() + -2) INT_SUB f() -2
(RSP + -88) PTRSUB RSP -88
f() INT_ZEXT f()
f() INT_ZEXT f()
(f() + -1) INT_SUB f() -1
f() CALL func (RSP + -88) (f() + 3) (f() + 3)
f() CALL func (RSP + -88) (f() + -2) (f() + -2)
(f() | (f() * 256)) INT_OR f() (f() * 256)
(f() * 256) INT_LEFT f() 8
 CBRANCH ((f() - f()) INT_NOTEQUAL 3)
0 INT_NOTEQUAL (f() - f()) 1
 CBRANCH ((f() - f()) INT_EQUAL 2)
0 INT_NOTEQUAL (f() - f()) 3
(f() / 4) INT_RIGHT f() 2
0 INT_EQUAL (f() - f()) 2
0 COPY 0
f() CALL func (RSP + -88)
0 COPY 0
(RSP + -88) PTRSUB RSP -88
 CBRANCH ((f() & 3) INT_EQUAL 0)
0 INT_EQUAL (f() & 3) 0
0 COPY 0
(f() & 3) INT_AND f() 3
(f() - f()) INT_SUB f() f()
f() CALL func (RSP + -88) (f() + 2) (f() + 2)
(f() + 2) INT_SUB (f() + 4) 2
(RSP + -88) PTRSUB RSP -88
(((f() / 4) * 4) + f()) INT_ADD ((f() / 4) * 4) f()
((f() / 4) * 4) INT_MULT (f() / 4) 4
(f() / 4) INT_ZEXT (f() / 4)
(f() * 16777216) INT_LEFT f() 24
f() INT_ZEXT f()
(f() | ((f() * 256) | ((f() * 65536) | (f() * 16777216)))) INT_OR f() ((f() * 256) | ((f() * 65536) | (f() * 16777216)))
((f() * 256) | ((f() * 65536) | (f() * 16777216))) INT_OR ((f() * 65536) | (f() * 16777216)) (f() * 256)
f() INT_ZEXT f()
(f() + 4) INT_ADD f() 4
 CBRANCH ((f() + 4) INT_LESSEQUAL f())
0 INT_LESSEQUAL (f() + 4) f()
f() CALL func (RSP + -88) (f() + 1) (f() + 1)
(RSP + -88) PTRSUB RSP -88
(f() + 1) INT_SUB (f() + 4) 3
(RSP + -88) PTRSUB RSP -88
f() CALL func (RSP + -88) (f() + 3) (f() + 3)
(f() + 3) INT_ADD f() 3
(RSP + -88) PTRSUB RSP -88
 BRANCH VZERO
(f() * 65536) INT_LEFT f() 16
f() INT_ZEXT f()
 CALL func ARG1 f() (((f() / 4) * 4) + f()) f()
(f() + 4) COPY (f() + 4)
(RSP + -52) PTRSUB RSP -52
 CALL func f(ARG1) (RSP + -52) (RSP + -52)
(f() + 0) INT_SUB (f() + 4) 4
((f() / 4) + 1) INT_ADD (f() / 4) 1
(((f() / 4) + 1) * 4) INT_MULT ((f() / 4) + 1) 4
((f() * 65536) | (f() * 16777216)) INT_OR (f() * 16777216) (f() * 65536)
(f() * 256) INT_LEFT f() 8
f() INT_ZEXT f()
f() CALL func (RSP + -88) (f() + 0) (f() + 0)
 BRANCH VZERO
f() CALL func ARG2
f() CALL func ARG2
 CALL func ARG1 f() f() f()
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 ARG2
 STORE 433 (ARG1 + 8) ARG3
 RETURN 0
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG1
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -56) f() f() f()
(RSP + -56) PTRSUB RSP -56
[40] LOAD 433 40
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (RSP + -56)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
f() CALL func ARG1
f() CALL func ARG1
 CALL func (RSP + -56) ARG2 ARG3 ARG2
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
(RSP + -56) PTRSUB RSP -56
[40] LOAD 433 40
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -56) f() f() f()
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG2
f() CALL func ARG2
(RSP + -56) PTRSUB RSP -56
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CALL func (RSP + -56) f() f() f()
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
f() CALL func ARG1
f() CALL func ARG1
 CALL func (RSP + -56) ARG2 ARG3 ARG2
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -56) f() f() f()
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
[40] LOAD 433 40
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG2
f() CALL func ARG2
 CALL func (RSP + -56) f() f() f()
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(RSP + -56) PTRSUB RSP -56
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 8) INT_ADD ARG1 8
 STORE 433 (ARG1 + 8) ARG2
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
 CALL func ARG1 (ARG1 + 24) ARG2 ARG3
(ARG1 + 24) INT_ADD ARG1 24
 RETURN 0
 CALL func ARG1 (ARG2 * 16) 16 (ARG2 * 16)
(ARG2 * 16) INT_LEFT ARG2 4
 RETURN 0
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1 0
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1 (f() + 16) (f() + 16)
f() CALL func ARG1
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 1 8
 STORE 433 (f() + 8) [(ARG2 + 8)]
f() CAST f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_LESSEQUAL [(ARG1 + 16)] [(ARG1 + 8)]
 STORE 433 f() [ARG2]
 CBRANCH ([(ARG1 + 16)] INT_LESSEQUAL [(ARG1 + 8)])
(f() + 8) PTRADD f() 1 8
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(f() + 16) INT_ADD f() 16
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 RETURN 0
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
f() CALL func ARG1
f() CALL func ARG1
(f() - f()) INT_SUB f() f()
 RETURN 0 ((f() - f()) / 8)
((f() - f()) / 8) INT_SRIGHT (f() - f()) 3
 CALL func ARG1 (ARG1 + 24) ARG2 ARG3
(ARG1 + 24) INT_ADD ARG1 24
 RETURN 0
 CALL func ARG1 (ARG2 * 8) 8 (ARG2 * 8)
(ARG2 * 8) INT_MULT ARG2 8
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) INT_ADD ARG1 8
 STORE 433 (ARG1 + 8) ARG2
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
 CALL func ARG1 (f() + 8) (f() + 8)
f() CALL func ARG1
 CALL func ARG1 0
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
[ARG2] LOAD 433 ARG2
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_LESSEQUAL [(ARG1 + 16)] [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
(f() + 8) INT_ADD f() 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0
 CBRANCH ([(ARG1 + 16)] INT_LESSEQUAL [(ARG1 + 8)])
 STORE 433 f() [ARG2]
f() CAST f()
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 / 128) INT_RIGHT ARG1 7
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
30 COPY 30
(4096 << (63 & ([f(RSP)] / 2147483647))) COPY (4096 << (63 & ([f(RSP)] / 2147483647)))
(ARG1 / 128) INT_ZEXT (ARG1 / 128)
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(RSP + -32) PTRSUB RSP -32
(RSP + -24) PTRSUB RSP -24
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(4096 << (63 & ([f(RSP)] / 2147483647))) INT_LEFT 4096 (63 & ([f(RSP)] / 2147483647))
[40] LOAD 433 40
([f(RSP)] / 2147483647) SUBPIECE [f(RSP)] 0
(63 & ([f(RSP)] / 2147483647)) INT_AND ([f(RSP)] / 2147483647) 63
f(RSP) CAST f(RSP)
f(RSP) CALL func (RSP + -32) (RSP + -24) (RSP + -24)
[f(RSP)] LOAD 433 f(RSP)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 RETURN 0 (4096 << (63 & ([f(RSP)] / 2147483647)))
 CALL libcall___stack_chk_fail_thunk
 STORE 433 ARG1 f()
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 128) PTRADD ARG1 16 8
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
 CALL func (ARG1 + 16) (RSP + -32) (ARG1 + 16)
f() CALL func f()
 STORE 433 (ARG1 + 8) (f() + f())
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -32) PTRSUB RSP -32
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(f() + f()) INT_ADD f() f()
40 INT_ADD 0 40
f() CALL func (ARG1 + 128) f() 0 (ARG1 + 128)
f() CALL func (ARG1 + 16)
40 CAST 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 [f(ARG2)]
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
f(ARG2) CAST f(ARG2)
 STORE 433 (ARG1 + 8) [f(ARG3)]
[f(ARG3)] LOAD 433 f(ARG3)
 RETURN 0
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG3) CAST f(ARG3)
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
 CALL func (RSP + -56) f(ARG1) f(ARG2) f(ARG1)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(RSP + -56) PTRSUB RSP -56
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
(ARG2 + ARG1) INT_ADD ARG2 ARG1
0 INT_LESS ((ARG2 + ARG1) + 1) ARG1
(ARG2 + ARG1) INT_ADD ARG2 ARG1
0 INT_NOTEQUAL ARG2 0
(~(ARG2) + 1) INT_2COMP ARG2
f() CALL func ARG2
 CBRANCH (ARG2 INT_NOTEQUAL 0)
 CBRANCH (((ARG2 + ARG1) + 1) INT_LESS ARG1)
 RETURN 1
((~(ARG2) + 1) & ((ARG2 + ARG1) + 1)) INT_AND (~(ARG2) + 1) ((ARG2 + ARG1) + 1)
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/MathExtras.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/MathExtras.h
((ARG2 + ARG1) + 1) INT_SUB (ARG2 + ARG1) 1
0 COPY 0
 RETURN 0 ((~(ARG2) + 1) & ((ARG2 + ARG1) + 1))
 CALL libcall___assert_fail_thunk 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/MathExtras.h 569 0
 CBRANCH (f() INT_EQUAL 1)
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/MathExtras.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/MathExtras.h
 RETURN 1
0 COPY 0
 CALL libcall___assert_fail_thunk 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/MathExtras.h 567 0
((ARG2 + ARG1) + 1) INT_SUB (ARG2 + ARG1) 1
0 INT_EQUAL f() 1
f() CALL func ARG1 ARG2 ARG2
(f() - ARG1) INT_SUB f() ARG1
 RETURN 0 (f() - ARG1)
(f() - ARG1) COPY (f() - ARG1)
 STORE 433 ARG1 ((f(ARG1 , ARG2) + f()) + ARG2)
(ARG1 + 72) PTRADD ARG1 9 8
f(ARG1 , ARG2) LOAD 433 ARG1
f(ARG1 , ARG2) LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 120) PTRADD ARG1 15 8
 CALL func ARG1
f(ARG1 , ARG2) LOAD 433 ARG1
 STORE 433 ARG1 (ARG2 + f())
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1 , ARG2) LOAD 433 ARG1
(ARG1 + 120) PTRADD ARG1 15 8
(ARG1 + 128) PTRADD ARG1 16 8
(ARG2 + f()) INT_ADD f() ARG2
0 INT_LESS (ARG2 + f()) ARG2
(ARG2 + f()) INT_ADD f() ARG2
(ARG2 + f()) INT_ADD f() ARG2
(ARG3 + ARG2) INT_ADD ARG3 ARG2
(ARG2 + f()) INT_ADD f() ARG2
((f(ARG1 , ARG2) + f()) + ARG2) INT_ADD (f(ARG1 , ARG2) + f()) ARG2
(ARG2 + f()) INT_ADD ARG2 f()
([(ARG1 + 120)] + ARG2) INT_ADD [(ARG1 + 120)] ARG2
f() CALL func f(ARG1 , ARG2) ARG3 ARG3
0 INT_EQUAL ARG3 0
f() CALL func f(ARG1 , ARG2) ARG3 ARG3
f() CALL func f() ARG3 ARG3
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG3 INT_EQUAL 0)
 CBRANCH (((ARG3 + ARG2) + -1) INT_LESS 4097)
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (ARG1 + 128) ((ARG3 + ARG2) + -1) 0 (ARG1 + 128)
0 INT_LESS [(ARG1 + 8)] (ARG2 + f())
(RSP + -104) PTRSUB RSP -104
(((ARG3 + ARG2) + -1) + f()) INT_ADD ((ARG3 + ARG2) + -1) f()
 CBRANCH ([(ARG1 + 8)] INT_LESS (ARG2 + f()))
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
f() COPY f()
(f() / 2147483647) SUBPIECE f() 8
(RSP + -40) PTRSUB RSP -40
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() COPY f()
f() CALL func (RSP + -96) (RSP + -104) (RSP + -104)
[(ARG1 + 8)] CAST [(ARG1 + 8)]
(f() / 2147483647) SUBPIECE f() 0
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
 CALL func (ARG1 + 72) (RSP + -40) (ARG1 + 72)
0 INT_LESS (((ARG3 + ARG2) + -1) + f()) (ARG2 + f())
(RSP + -96) PTRSUB RSP -96
 CBRANCH ((((ARG3 + ARG2) + -1) + f()) INT_LESS (ARG2 + f()))
 CBRANCH (0 INT_EQUAL [(f() + 40)])
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
 RETURN 0 f(ARG1 , ARG2)
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
 STORE 433 (ARG1 + 120) ([(ARG1 + 120)] + ARG2)
Alignment > 0 && "0-byte alignnment is not allowed. Use 1 instead." COPY Alignment > 0 && "0-byte alignnment is not allowed. Use 1 instead."
[(ARG1 + 120)] LOAD 433 (ARG1 + 120)
 CBRANCH ((ARG2 + f()) INT_LESS ARG2)
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Allocator.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Allocator.h
 CALL libcall___assert_fail_thunk Alignment > 0 && "0-byte alignnment is not allowed. Use 1 instead." /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Allocator.h 209 0
0 INT_LESS ([(ARG1 + 8)] - f(ARG1 , ARG2)) (ARG2 + f())
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 1
([(ARG1 + 8)] - f(ARG1 , ARG2)) CAST ([(ARG1 + 8)] - f(ARG1 , ARG2))
 CALL libcall___assert_fail_thunk Adjustment + Size >= Size && "Adjustment + Size must not overflow" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Allocator.h 215 0
 CBRANCH (([(ARG1 + 8)] - f(ARG1 , ARG2)) INT_LESS (ARG2 + f()))
0 COPY 0
Adjustment + Size >= Size && "Adjustment + Size must not overflow" COPY Adjustment + Size >= Size && "Adjustment + Size must not overflow"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Allocator.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Allocator.h
([(ARG1 + 8)] - f(ARG1 , ARG2)) INT_SUB [(ARG1 + 8)] f(ARG1 , ARG2)
A_Stack[-0x40]:8 COPY A_Stack[-0x40]:8
(f(ARG1 , ARG2) + f()) COPY (f(ARG1 , ARG2) + f())
(f(ARG1 , ARG2) + f()) INT_ADD f() f(ARG1 , ARG2)
A_Stack[-0x48]:8 COPY A_Stack[-0x48]:8
 BRANCH VZERO
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Allocator.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Allocator.h
 CALL libcall___assert_fail_thunk 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Allocator.h 245 0
0 COPY 0
0 COPY 0
A_Stack[-0x30]:8 COPY A_Stack[-0x30]:8
A_Stack[-0x38]:8 COPY A_Stack[-0x38]:8
0 COPY 0
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Allocator.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Allocator.h
(f() / 2147483647) SUBPIECE f() 0
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
(f() / 2147483647) SUBPIECE f() 8
((ARG3 + ARG2) + -1) INT_SUB (ARG3 + ARG2) -1
 RETURN 1
 CALL libcall___assert_fail_thunk 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Allocator.h 235 0
0 INT_EQUAL 0 [(f() + 40)]
 RETURN 1
0 INT_LESS ((ARG3 + ARG2) + -1) 4097
[(f() + 40)] LOAD 433 (f() + 40)
f() COPY f()
A_Stack[-0x40]:8 COPY A_Stack[-0x40]:8
A_Stack[-0x48]:8 COPY A_Stack[-0x48]:8
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 (ARG2 * 4) 4 (ARG2 * 4)
(ARG2 * 4) INT_MULT ARG2 4
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
ARG1 CAST ARG1
 CALL libcall_memmove_thunk ARG3 ARG1 (((ARG2 - ARG1) / 4) * 4)
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG3 CAST ARG3
(((ARG2 - ARG1) / 4) * 4) INT_MULT ((ARG2 - ARG1) / 4) 4
 CBRANCH (((ARG2 - ARG1) / 4) INT_NOTEQUAL 0)
 RETURN 0 (ARG3 + (((ARG2 - ARG1) / 4) * 4))
(ARG3 + (((ARG2 - ARG1) / 4) * 4)) INT_ADD ARG3 (((ARG2 - ARG1) / 4) * 4)
0 INT_NOTEQUAL ((ARG2 - ARG1) / 4) 0
((ARG2 - ARG1) / 4) INT_SRIGHT (ARG2 - ARG1) 2
(ARG3 + (((ARG2 - ARG1) / 4) * 4)) CAST (ARG3 + (((ARG2 - ARG1) / 4) * 4))
(((ARG2 - ARG1) / 4) * 4) INT_MULT ((ARG2 - ARG1) / 4) 4
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 CALL func f() f() f()
 RETURN 0
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG2 f() f()
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -56) f() f() f()
(FS_OFFSET + 40) INT_ADD 0 40
40 CAST 40
[40] LOAD 433 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func f() f() f() f()
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -56) PTRSUB RSP -56
40 INT_ADD 0 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 RETURN 1
(ARG1 & 1) INT_AND ARG1 1
0 INT_NOTEQUAL (ARG1 & 1) 0
 CBRANCH ((ARG1 & 1) INT_NOTEQUAL 0)
 RETURN 0 f(ARG1)
0 COPY 0
 BRANCH VZERO
(ARG1 & 1) INT_AND ARG1 1
(ARG1 & -2) INT_AND ARG1 -2
 CBRANCH ((ARG1 & 1) INT_EQUAL 0)
0 INT_EQUAL (ARG1 & 1) 0
 CALL libcall___assert_fail_thunk (Ptr & 1) && "Not a bucket pointer" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/FoldingSet.cpp 203 void** GetBucketPtr(void*)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/FoldingSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/FoldingSet.cpp
 RETURN 0 (ARG1 & -2)
 RETURN 1
(Ptr & 1) && "Not a bucket pointer" COPY (Ptr & 1) && "Not a bucket pointer"
void** GetBucketPtr(void*) COPY void** GetBucketPtr(void*)
(ARG1 & (ARG3 + -1)) INT_AND (ARG3 + -1) ARG1
(ARG2 + ((ARG1 & (ARG3 + -1)) * 8)) INT_ADD ARG2 ((ARG1 & (ARG3 + -1)) * 8)
(ARG3 + -1) INT_SUB ARG3 -1
((ARG1 & (ARG3 + -1)) * 8) INT_MULT (ARG1 & (ARG3 + -1)) 8
 RETURN 0 (ARG2 + ((ARG1 & (ARG3 + -1)) * 8))
(ARG1 & (ARG3 + -1)) INT_ZEXT (ARG1 & (ARG3 + -1))
(ARG1 + 1) INT_ADD ARG1 1
ARG1 INT_ZEXT ARG1
(ARG1 + 1) INT_ZEXT (ARG1 + 1)
 RETURN 0 f()
((ARG1 * 8) + f()) INT_ADD f() (ARG1 * 8)
f() CAST f()
((ARG1 * 8) + f()) CAST ((ARG1 * 8) + f())
f() COPY f()
f() CALL libcall_calloc_thunk (ARG1 + 1) 8
(ARG1 * 8) INT_MULT ARG1 8
 STORE 433 ((ARG1 * 8) + f()) -1
 RETURN 0
(ARG2 / 2147483647) SUBPIECE ARG2 0
0 INT_LESS ARG2 32
0 INT_LESS 5 ARG2
ARG1 CAST ARG1
 STORE 433 ARG1 Symbol
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 CBRANCH (5 INT_LESS ARG2)
 CBRANCH (ARG2 INT_LESS 32)
(1 << (31 & (ARG2 / 2147483647))) INT_LEFT 1 (31 & (ARG2 / 2147483647))
(31 & (ARG2 / 2147483647)) INT_AND (ARG2 / 2147483647) 31
 STORE 433 (ARG1 + 16) (1 << (31 & (ARG2 / 2147483647)))
f() CAST f()
(ARG1 + 16) CAST (ARG1 + 16)
f() CALL func [(ARG1 + 16)]
(ARG1 + 20) CAST (ARG1 + 20)
 RETURN 1
 STORE 433 (ARG1 + 20) 0
(ARG1 + 16) CAST (ARG1 + 16)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/FoldingSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/FoldingSet.cpp
5 < Log2InitSize && Log2InitSize < 32 && "Initial hash table size out of range" COPY 5 < Log2InitSize && Log2InitSize < 32 && "Initial hash table size out of range"
llvm::FoldingSetImpl::FoldingSetImpl(unsigned int) COPY llvm::FoldingSetImpl::FoldingSetImpl(unsigned int)
 RETURN 0
 CALL libcall___assert_fail_thunk 5 < Log2InitSize && Log2InitSize < 32 && "Initial hash table size out of range" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/FoldingSet.cpp 230 llvm::FoldingSetImpl::FoldingSetImpl(unsigned int)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 STORE 433 (ARG1 + 8) f()
(ARG1 + 20) INT_ADD ARG1 20
 STORE 433 ARG1 Symbol
(ARG1 + 8) PTRADD ARG1 1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0
 CALL libcall_free_thunk [(ARG1 + 8)]
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 16) INT_ADD ARG1 16
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
 STORE 433 (ARG1 + 20) 0
(([(ARG1 + 16)] * 8) + [(ARG1 + 8)]) CAST (([(ARG1 + 16)] * 8) + [(ARG1 + 8)])
([(ARG1 + 16)] * 8) INT_MULT [(ARG1 + 16)] 8
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
(([(ARG1 + 16)] * 8) + [(ARG1 + 8)]) INT_ADD ([(ARG1 + 16)] * 8) [(ARG1 + 8)]
 RETURN 0
 CALL libcall_memset_thunk [(ARG1 + 8)] 0 ([(ARG1 + 16)] * 8)
(ARG1 + 20) CAST (ARG1 + 20)
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
([(ARG1 + 16)] * 8) INT_MULT [(ARG1 + 16)] 8
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (([(ARG1 + 16)] * 8) + [(ARG1 + 8)]) -1
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
[ARG1] LOAD 433 ARG1
(ARG1 + 24) PTRADD ARG1 3 8
 RETURN 0 ([ARG1] & -256)
0 INT_EQUAL [ARG1] (ARG1 + 24)
([ARG1] & -256) INT_OR ([ARG1] & -256) 0
([ARG1] & -256) INT_AND [ARG1] -256
[ARG1] CAST [ARG1]
[ARG1] CAST [ARG1]
0 INT_ZEXT 0
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
 RETURN 0
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
 CALL func f() f()
 RETURN 0
 CALL libcall_free_thunk f()
f() CAST f()
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 STORE 433 ARG1 ARG2
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
 CALL func f() f()
 STORE 433 (ARG1 + 8) [ARG1]
 RETURN 0
 CALL func ARG1
 RETURN 0
(ARG1 + 24) INT_ADD ARG1 24
 CALL func ARG1 (ARG1 + 24) ARG2 (ARG1 + 24)
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 (ARG2 * 4) (ARG2 * 4)
ARG2 INT_ZEXT ARG2
 RETURN 0
(ARG2 * 4) INT_MULT ARG2 4
 CALL func ARG1 32
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 CAST ARG1
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
VZERO CALLIND [([ARG1] + 24)] ARG1 ARG2 (RSP + -184) ARG1
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1
f() CALL func ARG2
 STORE 433 f(ARG3) ARG2
 CALL func ARG2 f(ARG2 , ARG3) f(ARG2 , ARG3)
ARG3 COPY ARG3
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
([(ARG1 + 16)] * 2) INT_MULT [(ARG1 + 16)] 2
[(f() + 40)] LOAD 433 (f() + 40)
void llvm::FoldingSetImpl::InsertNode(llvm::FoldingSetImpl::Node*, void*) COPY void llvm::FoldingSetImpl::InsertNode(llvm::FoldingSetImpl::Node*, void*)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(f() + 40) CAST (f() + 40)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/FoldingSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/FoldingSet.cpp
(ARG1 + 20) CAST (ARG1 + 20)
!N->getNextInBucket() COPY !N->getNextInBucket()
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
(ARG1 + 20) INT_ADD ARG1 20
f(ARG2 , ARG3) LOAD 433 f(ARG3)
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
0 INT_LESS ([(ARG1 + 16)] * 2) ([(ARG1 + 20)] + 1)
([(ARG1 + 16)] * 2) CAST ([(ARG1 + 16)] * 2)
 RETURN 1
(ARG1 + 20) INT_ADD ARG1 20
 CBRANCH (([(ARG1 + 16)] * 2) INT_LESS ([(ARG1 + 20)] + 1))
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH (f(ARG2 , ARG3) INT_EQUAL 0)
 CALL libcall___assert_fail_thunk !N->getNextInBucket() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/FoldingSet.cpp 311 void llvm::FoldingSetImpl::InsertNode(llvm::FoldingSetImpl::Node*, void*)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_EQUAL f(ARG2 , ARG3) 0
(ARG1 + 20) CAST (ARG1 + 20)
([(ARG1 + 20)] + 1) INT_ADD [(ARG1 + 20)] 1
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
 STORE 433 (ARG1 + 20) ([(ARG1 + 20)] + 1)
(ARG1 + 20) CAST (ARG1 + 20)
([(ARG1 + 20)] + 1) INT_ADD [(ARG1 + 20)] 1
(ARG1 + 20) INT_ADD ARG1 20
(f(ARG3) | 1) INT_OR f(ARG3) 1
f(ARG3) CAST f(ARG3)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
[([ARG1] + 24)] LOAD 433 ([ARG1] + 24)
(RSP + -184) PTRSUB RSP -184
(RSP + -184) PTRSUB RSP -184
f() CAST f()
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 CALL func (RSP + -184)
f() CALL func VZERO [(ARG1 + 8)] [(ARG1 + 16)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([ARG1] + 24) CAST ([ARG1] + 24)
([ARG1] + 24) INT_ADD [ARG1] 24
 CALL func (RSP + -184)
(RSP + -184) PTRSUB RSP -184
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
VZERO CALLIND [([ARG1] + 24)] ARG1 f(ARG1) (RSP + -184) ARG1
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
 CALL func ARG1 f(ARG1) f() f(ARG1)
 CALL func (RSP + -184)
0 COPY 0
f() CALL func [(ARG1 + 16)]
(FS_OFFSET + 40) INT_ADD 0 40
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 20) INT_ADD ARG1 20
 CALL libcall_free_thunk [(ARG1 + 8)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL [(ARG1 + 16)])
(ARG1 + 16) CAST (ARG1 + 16)
(f() + 40) CAST (f() + 40)
([(ARG1 + 16)] * 2) INT_MULT [(ARG1 + 16)] 2
 CBRANCH (0 INT_NOTEQUAL [40])
[(ARG1 + 8)] CAST [(ARG1 + 8)]
0 INT_NOTEQUAL f() [(ARG1 + 16)]
0 INT_NOTEQUAL 0 [40]
 STORE 433 (ARG1 + 16) ([(ARG1 + 16)] * 2)
(f() + 40) INT_ADD f() 40
 STORE 433 (ARG1 + 20) 0
(ARG1 + 16) CAST (ARG1 + 16)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 STORE 433 (ARG1 + 8) f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[40] LOAD 433 (f() + 40)
(RSP + -184) PTRSUB RSP -184
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 20) CAST (ARG1 + 20)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CALL func (RSP + -184)
(RSP + -184) PTRSUB RSP -184
 CBRANCH (f(ARG1) INT_EQUAL 0)
(RSP + -184) PTRSUB RSP -184
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f(ARG1) CALL func f(ARG1)
f() CALL func VZERO [(ARG1 + 8)] [(ARG1 + 16)]
([ARG1] + 24) CAST ([ARG1] + 24)
 BRANCH VZERO
[([ARG1] + 24)] LOAD 433 ([ARG1] + 24)
 CALL func f(ARG1) 0
(RSP + -184) PTRSUB RSP -184
0 INT_EQUAL f(ARG1) 0
f() CALL func f(ARG1)
 CALL func (RSP + -184)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
([ARG1] + 24) INT_ADD [ARG1] 24
[(ARG1 + 8)] CAST [(ARG1 + 8)]
f() INT_ZEXT f()
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
 BRANCH VZERO
0 INT_NOTEQUAL [([(ARG1 + 8)] + (f() * 8))] 0
(f() + 1) INT_ADD f() 1
(f() * 8) INT_MULT f() 8
 CBRANCH ([([(ARG1 + 8)] + (f() * 8))] INT_NOTEQUAL 0)
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
VZERO CALLIND [([ARG1] + 16)] ARG1 f() ARG2 f() (RSP + -184)
(ARG1 + 16) PTRADD ARG1 2 8
f() CALL func ARG2
 STORE 433 ARG3 0
 STORE 433 ARG3 f()
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CALL func (RSP + -184)
(RSP + -184) PTRSUB RSP -184
(ARG1 + 16) CAST (ARG1 + 16)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() COPY f()
 CALL func (RSP + -184)
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -184) PTRSUB RSP -184
f() CALL func f() [(ARG1 + 8)] [(ARG1 + 16)] [(ARG1 + 8)]
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() [(f() + 40)]
f() CAST f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() CALL func f()
(FS_OFFSET + 40) INT_ADD 0 40
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
[f()] LOAD 433 f()
 RETURN 0 f()
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (VZERO INT_NOTEQUAL 0)
f() CALL func f()
(RSP + -184) PTRSUB RSP -184
 BRANCH VZERO
 CALL func (RSP + -184)
[([ARG1] + 16)] LOAD 433 ([ARG1] + 16)
([ARG1] + 16) CAST ([ARG1] + 16)
(RSP + -184) PTRSUB RSP -184
0 INT_NOTEQUAL VZERO 0
0 COPY 0
([ARG1] + 16) INT_ADD [ARG1] 16
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 20) INT_ADD ARG1 20
f() CALL func ARG2
 CALL func ARG2 0
0 INT_EQUAL f() ARG2
0 INT_NOTEQUAL f() ARG2
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
f() LOAD 433 f()
f() CALL func f()
 CBRANCH (f() INT_NOTEQUAL ARG2)
 CBRANCH (f() INT_EQUAL ARG2)
f() CAST f()
f() CALL func f()
 RETURN 0 f()
1 COPY 1
0 INT_NOTEQUAL f() 0
 RETURN 0 1
 STORE 433 f() f()
1 COPY 1
f() CALL func f()
 CALL func f() f() f()
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
 STORE 433 (ARG1 + 20) ([(ARG1 + 20)] + 4294967295)
(ARG1 + 20) CAST (ARG1 + 20)
 BRANCH VZERO
([(ARG1 + 20)] + 4294967295) INT_ADD [(ARG1 + 20)] 4294967295
f() COPY f()
0 COPY 0
(ARG1 + 20) CAST (ARG1 + 20)
[ARG1] LOAD 433 ARG1
 CALLIND [([ARG1] + 8)] ARG1 ARG2 (RSP + -184) ARG1
 CALL func ARG1 ARG2 A_Stack[-0xc8]:8 ARG2
f() CALL func ARG1 (RSP + -184) (RSP + -200) (RSP + -184)
ARG2 COPY ARG2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
f() COPY f()
([ARG1] + 8) INT_ADD [ARG1] 8
[([ARG1] + 8)] LOAD 433 ([ARG1] + 8)
 CALL func (RSP + -184)
(FS_OFFSET + 40) INT_ADD 0 40
f(ARG2) COPY f(ARG2)
 CBRANCH (f() INT_EQUAL 0)
(RSP + -184) PTRSUB RSP -184
([ARG1] + 8) CAST ([ARG1] + 8)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f() 0
(RSP + -184) PTRSUB RSP -184
 CBRANCH (0 INT_EQUAL [(f() + 40)])
 CALL func (RSP + -184)
0 INT_EQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
(RSP + -184) PTRSUB RSP -184
(RSP + -184) PTRSUB RSP -184
(RSP + -200) PTRSUB RSP -200
[(f() + 40)] LOAD 433 (f() + 40)
 RETURN 0 f(ARG2)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
f() COPY f()
 STORE 433 ARG1 [f(ARG2)]
ARG2 COPY ARG2
~(f()) BOOL_NEGATE f()
[f(ARG2)] LOAD 433 f(ARG2)
0 INT_EQUAL [f(ARG2)] -1
 CBRANCH ~(f())
[f(ARG2)] LOAD 433 f(ARG2)
 RETURN 0
 CBRANCH ([f(ARG2)] INT_EQUAL -1)
 CBRANCH ([f(ARG2)] INT_NOTEQUAL 0)
 BRANCH VZERO
0 INT_NOTEQUAL f(ARG2) 0
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG2) CALL func [f(ARG2)]
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
 BRANCH VZERO
0 INT_NOTEQUAL [f(ARG2)] 0
[f(ARG2)] LOAD 433 f(ARG2)
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 f()
 STORE 433 ARG1 [(f() + 8)]
f() CALL func [ARG1]
 RETURN 0
 CBRANCH (f() INT_EQUAL 0)
f() CALL func f()
0 INT_EQUAL f() 0
 CBRANCH ([(f() + 8)] INT_EQUAL -1)
0 INT_NOTEQUAL [(f() + 8)] 0
 CBRANCH ([(f() + 8)] INT_NOTEQUAL 0)
0 COPY 0
[(f() + 8)] LOAD 433 (f() + 8)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH f()
0 INT_EQUAL [(f() + 8)] -1
(f() + 8) PTRADD f() 1 8
[(f() + 8)] LOAD 433 (f() + 8)
 BRANCH VZERO
[(f() + 8)] LOAD 433 (f() + 8)
f() CALL func f()
f() CAST f()
0 INT_NOTEQUAL f() 0
[(f() + 8)] LOAD 433 (f() + 8)
f() CALL func [(f() + 8)]
 STORE 433 ARG1 f(ARG2)
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
0 INT_NOTEQUAL [ARG2] 0
 RETURN 0
 CBRANCH ([ARG2] INT_NOTEQUAL 0)
f(ARG2) CAST f(ARG2)
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
 BRANCH VZERO
[ARG2] CAST [ARG2]
0 INT_NOTEQUAL f(ARG2) 0
f(ARG2) CALL func [ARG2]
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol PTRSUB 0 Symbol
 CALL func ARG1
 CALL libcall_operator.delete_thunk ARG1
 RETURN 0
(ARG1 + 24) INT_ADD ARG1 24
 RETURN 0 (ARG1 + 24)
 RETURN 0 0
0 COPY 0
ARG6 COPY ARG6
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG5 COPY ARG5
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -88) PTRSUB RSP -88
 CALL func ARG1 f() f()
ARG1 COPY ARG1
 CALL func (RSP + -56) (RSP + -136) (RSP + -136)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -88) PTRSUB RSP -88
(RSP + -56) PTRSUB RSP -56
f() CALL func 24 (RSP + -88)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
(RSP + -56) PTRSUB RSP -56
40 CAST 40
(RSP + -136) PTRSUB RSP -136
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func f() ARG2 ARG3 ARG6
 CALL func (RSP + -88) (RSP + -56) (RSP + -56)
[40] LOAD 433 40
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 0 [(ARG1 + 16)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
ARG1 COPY ARG1
 CALL func ARG1 (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647) (f() / 4611686014132420609) ARG2
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(RSP + 8) PTRSUB RSP 8
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + 8)
(f() / 2147483647) INT_RIGHT f() 64
40 CAST 40
[40] LOAD 433 40
(f() / 2147483647) SUBPIECE f() 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(RSP + 8) PTRSUB RSP 8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
f() CALL func (RSP + 8)
(f() / 2147483647) INT_RIGHT f() 64
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
(RSP + -40) PTRSUB RSP -40
(RSP + -48) PTRSUB RSP -48
(RSP + -48) PTRSUB RSP -48
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CALL func (RSP + -48) ARG2 (RSP + -40) ARG2
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -40) PTRSUB RSP -40
 CBRANCH (f() INT_EQUAL 1)
(RSP + -88) PTRSUB RSP -88
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL f() 1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -48) PTRSUB RSP -48
(f() + 40) CAST (f() + 40)
f(ARG1) COPY f(ARG1)
 CALL func (RSP + -40) (RSP + -88) (RSP + -88)
 CALL func (RSP + -48)
f() CALL func (RSP + -48)
f() CALL func f()
f() CAST f()
 CALL libcall_memset_thunk f() 0 ARG2
 CALL func ARG1 0
 CALL func ARG1 (RSP + -48) (RSP + -48)
 BRANCH VZERO
(RSP + -48) PTRSUB RSP -48
f() CALL func (RSP + -48)
(RSP + -48) PTRSUB RSP -48
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(ARG1)
 CALL func ARG1 0 (RSP + -56)
ARG1 COPY ARG1
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(f() / 2147483647) INT_RIGHT f() 64
40 INT_ADD 0 40
f() CALL func
(f() / 2147483647) SUBPIECE f() 0
<stdin> COPY <stdin>
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -56) PTRSUB RSP -56
40 CAST 40
 CALL func (RSP + -56) <stdin> (f() / 4611686014132420609) (f() / 2147483647)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
 CALL func ARG1
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG3 1 0
f() CALL func ARG2 (RSP + -296) (RSP + -296)
(f() + 40) INT_ADD f() 40
 CALL func (RSP + -312) 4617056
 CALL func (RSP + -296)
0 INT_NOTEQUAL 0 [(f() + 40)]
(RSP + -312) PTRSUB RSP -312
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) A_Stack[-0x138]:8 A_Stack[-0x130]:8
(RSP + -296) PTRSUB RSP -296
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
(RSP + -296) PTRSUB RSP -296
[(f() + 40)] LOAD 433 (f() + 40)
4617056 PTRSUB 0 4617056
 CALL func (RSP + -296)
 CBRANCH (f() INT_EQUAL 0)
(f() / 2147483647) INT_RIGHT f() 64
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(RSP + -296) PTRSUB RSP -296
0 INT_EQUAL f() 0
 BRANCH VZERO
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 CALL func ARG1 ARG2 -1 ARG3 ARG4 0 0
ARG1 COPY ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
40 CAST 40
[40] LOAD 433 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
(ARG1 + 40) INT_ADD ARG1 40
 RETURN 0 (ARG1 + 40)
 RETURN 0 1
1 COPY 1
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG3 ARG4 ARG4 0 ARG5 ARG6
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG3 -1 ARG4 ARG5 0 0
0 INT_EQUAL ARG4 -1
 CBRANCH (ARG4 INT_EQUAL -1)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
40 CAST 40
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/MemoryBuffer.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/MemoryBuffer.cpp
0 COPY 0
 CALL libcall___assert_fail_thunk 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/MemoryBuffer.cpp 417 0
[40] LOAD 433 40
 RETURN 1
0 COPY 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 STORE 433 ARG1 ARG2
 STORE 433 (ARG1 + 8) ARG3
 STORE 433 (ARG1 + 16) ARG4
 STORE 433 (ARG1 + 24) ARG5
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 (f() / 2147483647) (f() / 4611686014132420609) A_Stack[-0x28]:8 A_Stack[-0x20]:8
f() CALL func ARG2
VZERO CALLIND [([ARG2] + 16)] ARG2
[ARG2] LOAD 433 ARG2
([ARG2] + 16) CAST ([ARG2] + 16)
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 40
 CALL func (RSP + -40) VZERO VZERO
(RSP + -40) PTRSUB RSP -40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
([ARG2] + 16) INT_ADD [ARG2] 16
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) INT_RIGHT f() 64
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[([ARG2] + 16)] LOAD 433 ([ARG2] + 16)
40 INT_ADD 0 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 CALL func ARG1
 STORE 433 ARG1 Symbol
(ARG1 + 24) PTRADD ARG1 3 8
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func (ARG1 + 24)
 RETURN 0
 CALL func ARG1
 CALL libcall_operator.delete_thunk ARG1
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 CALL func ARG1
 CALL libcall_operator.delete_thunk ARG1
 RETURN 0
VZERO COPY VZERO
 RETURN 0
 RETURN 0
 CALL func 1 65535
Unknown buffer COPY Unknown buffer
 RETURN 0 Unknown buffer
 CALL func [(ARG1 + 40)] ARG2 ARG3 ARG2
 CALL libcall_memcpy_thunk [(ARG1 + 72)] ARG2 [f(RSP)]
ARG3 COPY ARG3
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 80) INT_ADD ARG1 80
(ARG1 + 72) INT_ADD ARG1 72
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 56) INT_ADD ARG1 56
(ARG1 + 56) INT_ADD ARG1 56
(ARG1 + 72) INT_ADD ARG1 72
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 56) INT_ADD ARG1 56
(ARG1 + 72) INT_ADD ARG1 72
(ARG1 + 72) INT_ADD ARG1 72
(ARG1 + 72) INT_ADD ARG1 72
(ARG1 + 72) INT_ADD ARG1 72
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
[(ARG1 + 56)] LOAD 433 (ARG1 + 56)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(ARG1 + 56) CAST (ARG1 + 56)
 CBRANCH ([(ARG1 + 56)] INT_EQUAL 0)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_EQUAL [(ARG1 + 56)] 0
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CBRANCH ([(ARG1 + 72)] INT_EQUAL ([(ARG1 + 56)] + [(ARG1 + 64)]))
(ARG1 + 64) CAST (ARG1 + 64)
 BRANCH VZERO
 STORE 433 (ARG1 + 80) 1
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
 STORE 433 (ARG1 + 72) [(ARG1 + 64)]
(ARG1 + 72) CAST (ARG1 + 72)
(ARG1 + 80) CAST (ARG1 + 80)
 CBRANCH (f(ARG3 , RSP) INT_NOTEQUAL 0)
(ARG1 + 72) CAST (ARG1 + 72)
(f(ARG3 , RSP) / 2147483647) SUBPIECE f(ARG3 , RSP) 0
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
(([(ARG1 + 56)] / 2147483647) - (([(ARG1 + 72)] / 2147483647) - ([(ARG1 + 64)] / 2147483647))) INT_SUB ([(ARG1 + 56)] / 2147483647) (([(ARG1 + 72)] / 2147483647) - ([(ARG1 + 64)] / 2147483647))
(f(ARG3 , RSP) - [f(RSP)]) INT_SUB f(ARG3 , RSP) [f(RSP)]
([(ARG1 + 56)] / 2147483647) SUBPIECE [(ARG1 + 56)] 0
(ARG1 + 72) CAST (ARG1 + 72)
[(ARG1 + 56)] LOAD 433 (ARG1 + 56)
(ARG1 + 72) CAST (ARG1 + 72)
 STORE 433 (ARG1 + 72) ([(ARG1 + 72)] + [f(RSP)])
f(RSP) CALL func (RSP + -28) (RSP + -24) (RSP + -24)
[f(RSP)] INT_ZEXT [f(RSP)]
[f(RSP)] LOAD 433 f(RSP)
(ARG1 + 72) CAST (ARG1 + 72)
(ARG1 + 56) CAST (ARG1 + 56)
([(ARG1 + 72)] + [f(RSP)]) INT_ADD [(ARG1 + 72)] [f(RSP)]
(ARG1 + 72) CAST (ARG1 + 72)
0 INT_NOTEQUAL f(ARG3 , RSP) 0
[f(RSP)] INT_ZEXT [f(RSP)]
[f(RSP)] INT_ZEXT [f(RSP)]
[(ARG1 + 56)] LOAD 433 (ARG1 + 56)
(RSP + -28) PTRSUB RSP -28
(RSP + -24) PTRSUB RSP -24
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(ARG1 + 56) CAST (ARG1 + 56)
([(ARG1 + 64)] / 2147483647) SUBPIECE [(ARG1 + 64)] 0
(ARG1 + 64) CAST (ARG1 + 64)
(ARG1 + 64) CAST (ARG1 + 64)
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
([(ARG1 + 72)] / 2147483647) SUBPIECE [(ARG1 + 72)] 0
0 INT_EQUAL [(ARG1 + 72)] ([(ARG1 + 56)] + [(ARG1 + 64)])
(([(ARG1 + 72)] / 2147483647) - ([(ARG1 + 64)] / 2147483647)) INT_SUB ([(ARG1 + 72)] / 2147483647) ([(ARG1 + 64)] / 2147483647)
([(ARG1 + 56)] + [(ARG1 + 64)]) INT_ADD [(ARG1 + 56)] [(ARG1 + 64)]
f(RSP) CAST f(RSP)
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(ARG1 + 40) CAST (ARG1 + 40)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
 BRANCH VZERO
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) CAST (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
(f() - f()) INT_SUB f() f()
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
f() CALL func [(ARG1 + 40)]
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
f() CALL func [(ARG1 + 40)]
(f() - f()) COPY (f() - f())
 RETURN 0 (f() - f())
 RETURN 0
 RETURN 0
 RETURN 0
 RETURN 0
 RETURN 0
 RETURN 0
 RETURN 0
 RETURN 0
 RETURN 0
 RETURN 0
 RETURN 0
 RETURN 0
 RETURN 0
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 [f(ARG2)]
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
 RETURN 0
[f(ARG3)] LOAD 433 f(ARG3)
 STORE 433 (ARG1 + 8) [f(ARG3)]
f(ARG2) CAST f(ARG2)
f(ARG3) CAST f(ARG3)
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
40 CAST 40
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
(RSP + -56) PTRSUB RSP -56
40 INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -56) f(ARG1) f(ARG2) f(ARG1)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[40] LOAD 433 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
(ARG1 + 24) INT_ADD ARG1 24
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
[[(ARG1 + 24)]] LOAD 433 [(ARG1 + 24)]
0 COPY 0
0 INT_NOTEQUAL [[(ARG1 + 24)]] 0
 RETURN 0 0
ARG3 COPY ARG3
ARG1 COPY ARG1
ARG2 COPY ARG2
f() CALL func ARG2
[(f() + 40)] LOAD 433 (f() + 40)
(A_Stack[-0x40]:8 # A_Stack[-0x48]:8) PIECE A_Stack[-0x40]:8 A_Stack[-0x48]:8
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
(RSP + -72) PTRSUB RSP -72
 CBRANCH (0 INT_NOTEQUAL 1)
0 INT_NOTEQUAL 0 1
ARG2 COPY ARG2
f() CALL func (RSP + -112) (RSP + -80) (RSP + -80)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func (ARG1 + 176)
ARG3 COPY ARG3
ARG1 COPY ARG1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) (RSP + -72) (RSP + -72)
(RSP + -112) PTRSUB RSP -112
(ARG1 + 176) INT_ADD ARG1 176
(RSP + -80) PTRSUB RSP -80
f() CALL func f() ARG1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
: CommandLine Error: Option ' COPY : CommandLine Error: Option '
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
' registered more than once!  COPY ' registered more than once! 
 CALL func f() ' registered more than once! 
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f() : CommandLine Error: Option '
 CALL func inconsistency in registered CommandLine options 1
(f() / 2147483647) SUBPIECE f() 0
f() CALL func
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
inconsistency in registered CommandLine options COPY inconsistency in registered CommandLine options
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f() ARG3
(f() / 2147483647) SUBPIECE f() 0
 CALL func ARG1 (ARG1 + 24) ARG2 (ARG1 + 24)
(ARG1 + 24) INT_ADD ARG1 24
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 (ARG2 * 8) (ARG2 * 8)
ARG2 INT_ZEXT ARG2
(ARG2 * 8) INT_MULT ARG2 8
 RETURN 0
 CALL func ARG1 16
 RETURN 0
f() CALL func ARG1
 CALL func ARG1 (f() + 8) (f() + 8)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
 CALL func ARG1 0
[ARG2] LOAD 433 ARG2
 STORE 433 f() [ARG2]
 RETURN 0
 CBRANCH ([(ARG1 + 16)] INT_LESSEQUAL [(ARG1 + 8)])
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
f() CAST f()
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(f() + 8) INT_ADD f() 8
0 INT_LESSEQUAL [(ARG1 + 16)] [(ARG1 + 8)]
 RETURN 0
(ARG1 + 24) PTRADD ARG1 3 8
[ARG1] LOAD 433 ARG1
[ARG1] CAST [ARG1]
[ARG1] CAST [ARG1]
([ARG1] & -256) INT_AND [ARG1] -256
([ARG1] & -256) INT_OR ([ARG1] & -256) 0
 RETURN 0 ([ARG1] & -256)
0 INT_EQUAL [ARG1] (ARG1 + 24)
0 INT_ZEXT 0
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 RETURN 0
 CALL func f() f()
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
f() CAST f()
 CALL libcall_free_thunk f()
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
 CALL func ARG1 (f() + -8) (f() + -8)
(f() + -8) INT_ADD f() -8
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL libcall_memmove_thunk ARG3 ARG1 (((ARG2 - ARG1) / 8) * 8)
ARG1 CAST ARG1
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG3 CAST ARG3
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) CAST (ARG3 + (((ARG2 - ARG1) / 8) * 8))
((ARG2 - ARG1) / 8) INT_SRIGHT (ARG2 - ARG1) 3
0 INT_NOTEQUAL ((ARG2 - ARG1) / 8) 0
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) INT_ADD ARG3 (((ARG2 - ARG1) / 8) * 8)
 RETURN 0 (ARG3 + (((ARG2 - ARG1) / 8) * 8))
 CBRANCH (((ARG2 - ARG1) / 8) INT_NOTEQUAL 0)
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 RETURN 0
 CALL func f() f() f()
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1
0 INT_LESS ARG2 f()
0 INT_LESSEQUAL f() ARG2
 CALL func (ARG2 + 8) f() ARG2 (ARG2 + 8)
(ARG2 + 8) INT_ADD ARG2 8
ARG2 COPY ARG2
 CBRANCH (ARG2 INT_LESS f())
 CBRANCH (f() INT_LESSEQUAL ARG2)
 RETURN 0 ARG2
llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::erase(llvm::SmallVectorImpl<T>::iterator) [with T = llvm::cl::Option*; llvm::SmallVectorImpl<T>::iterator = llvm::cl::Option**] COPY llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::erase(llvm::SmallVectorImpl<T>::iterator) [with T = llvm::cl::Option*; llvm::SmallVectorImpl<T>::iterator = llvm::cl::Option**]
 RETURN 1
 CALL libcall___assert_fail_thunk I < this->end() && "Erasing at past-the-end iterator." /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 457 llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::erase(llvm::SmallVectorImpl<T>::iterator) [with T = llvm::cl::Option*; llvm::SmallVectorImpl<T>::iterator = llvm::cl::Option**]
I < this->end() && "Erasing at past-the-end iterator." COPY I < this->end() && "Erasing at past-the-end iterator."
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::erase(llvm::SmallVectorImpl<T>::iterator) [with T = llvm::cl::Option*; llvm::SmallVectorImpl<T>::iterator = llvm::cl::Option**] COPY llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::erase(llvm::SmallVectorImpl<T>::iterator) [with T = llvm::cl::Option*; llvm::SmallVectorImpl<T>::iterator = llvm::cl::Option**]
 CALL libcall___assert_fail_thunk I >= this->begin() && "Iterator to erase is out of bounds." /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 456 llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::erase(llvm::SmallVectorImpl<T>::iterator) [with T = llvm::cl::Option*; llvm::SmallVectorImpl<T>::iterator = llvm::cl::Option**]
I >= this->begin() && "Iterator to erase is out of bounds." COPY I >= this->begin() && "Iterator to erase is out of bounds."
(ARG1 + 120) INT_ADD ARG1 120
(ARG1 + 120) INT_ADD ARG1 120
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 176) INT_ADD ARG1 176
(ARG1 + 208) INT_ADD ARG1 208
(ARG1 + 120) INT_ADD ARG1 120
(ARG1 + 208) INT_ADD ARG1 208
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
 CALLIND [([ARG2] + 48)] ARG2 (RSP + -168) ARG2 (RSP + -168)
0 INT_EQUAL [(ARG1 + 208)] ARG2
0 INT_EQUAL [f()] ARG2
0 INT_EQUAL [f()] ARG2
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
(ARG2 + 24) PTRADD ARG2 3 8
f() CALL func ARG2
(ARG2 + 24) PTRADD ARG2 3 8
 CALL func (RSP + -168)
0 INT_NOTEQUAL [[(ARG2 + 24)]] 0
 CBRANCH ([[(ARG2 + 24)]] INT_NOTEQUAL 0)
([ARG2] + 48) INT_ADD [ARG2] 48
(f() + 40) CAST (f() + 40)
[(ARG2 + 24)] CAST [(ARG2 + 24)]
f() CAST f()
(RSP + -168) PTRSUB RSP -168
[([ARG2] + 48)] LOAD 433 ([ARG2] + 48)
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func (RSP + -168)
[[(ARG2 + 24)]] LOAD 433 [(ARG2 + 24)]
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_EQUAL 1)
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL f())
(RSP + -168) PTRSUB RSP -168
(RSP + -168) PTRSUB RSP -168
0 INT_NOTEQUAL f() f()
([ARG2] + 48) CAST ([ARG2] + 48)
 CALL func (RSP + -168)
[(f() + 40)] LOAD 433 (f() + 40)
f() CAST f()
(RSP + -168) PTRSUB RSP -168
f() CALL func (RSP + -168)
0 INT_EQUAL f() 1
(f() + 8) PTRADD f() 1 8
 BRANCH VZERO
 CALL func (RSP + -184) [f()] [f()]
[f()] LOAD 433 f()
(RSP + -184) PTRSUB RSP -184
 CALL func (ARG1 + 176) f() f() (ARG1 + 176)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CBRANCH (f() INT_EQUAL f())
[f()] LOAD 433 f()
 CBRANCH ([f()] INT_EQUAL ARG2)
 CBRANCH (f() INT_EQUAL f())
[f()] LOAD 433 f()
 CBRANCH ([f()] INT_EQUAL ARG2)
f() CAST f()
0 INT_EQUAL f() f()
f() CAST f()
f() CALL func (ARG1 + 64)
0 INT_EQUAL (f() & 4) 0
 CBRANCH ((f() & 4) INT_EQUAL 0)
f() CALL func (ARG1 + 64)
(f() & 4) INT_AND f() 4
 CBRANCH ([(ARG1 + 208)] INT_EQUAL ARG2)
(ARG1 + 208) CAST (ARG1 + 208)
 STORE 433 (ARG1 + 208) 0
 CALL func (ARG1 + 64) f() (ARG1 + 64)
(f() + 8) PTRADD f() 1 8
 BRANCH VZERO
 BRANCH VZERO
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -168) (ARG2 + 24) (ARG2 + 24)
 BRANCH VZERO
f() CAST f()
(f() + 8) PTRADD f() 1 8
 BRANCH VZERO
 CALL func (ARG1 + 120) f() (ARG1 + 120)
0 INT_EQUAL f() f()
f() CALL func (ARG1 + 120)
[(ARG1 + 208)] LOAD 433 (ARG1 + 208)
(ARG1 + 208) CAST (ARG1 + 208)
f() CALL func (ARG1 + 120)
f() CAST f()
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 176) INT_ADD ARG1 176
(ARG1 + 208) INT_ADD ARG1 208
f() CALL func (ARG1 + 176)
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL [(ARG1 + 208)] 0
 CBRANCH ([(ARG1 + 208)] INT_EQUAL 0)
0 COPY 0
(ARG1 + 208) CAST (ARG1 + 208)
 RETURN 0 1
 RETURN 0 0
1 COPY 1
[(ARG1 + 208)] LOAD 433 (ARG1 + 208)
0 INT_EQUAL f() 1
f() CALL func (ARG1 + 64)
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
[ARG1] LOAD 433 ARG1
f() CALL func ARG2
f() CALL func [ARG1]
(f() & -256) INT_AND f() -256
0 INT_ZEXT 0
0 INT_EQUAL f() f()
 RETURN 0 (f() & -256)
(f() & -256) INT_OR (f() & -256) 0
 RETURN 0 -1
-1 COPY -1
 RETURN 0 -2
-2 COPY -2
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) LOAD 433 ARG1
f(ARG1) LOAD 433 ARG1
f(ARG1) LOAD 433 ARG1
 STORE 433 ARG1 (f(ARG1) + 8)
f(ARG1) LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_LESS [ARG1])
0 INT_LESS [(ARG1 + 8)] [ARG1]
 CBRANCH (f(ARG1) INT_EQUAL [(ARG1 + 8)])
[[ARG1]] LOAD 433 f(ARG1)
 CBRANCH ([[ARG1]] INT_NOTEQUAL f())
f() CALL func
0 COPY 0
0 INT_NOTEQUAL [[ARG1]] f()
 RETURN 1
~(f()) BOOL_NEGATE f()
0 INT_EQUAL f(ARG1) [(ARG1 + 8)]
 CALL libcall___assert_fail_thunk Bucket <= End /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h 169 void llvm::SmallPtrSetIteratorImpl::AdvanceIfNotValid()
void llvm::SmallPtrSetIteratorImpl::AdvanceIfNotValid() COPY void llvm::SmallPtrSetIteratorImpl::AdvanceIfNotValid()
Bucket <= End COPY Bucket <= End
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ~(f())
 BRANCH VZERO
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
 CBRANCH ([[ARG1]] INT_NOTEQUAL f())
 BRANCH VZERO
1 COPY 1
f() CALL func
0 INT_NOTEQUAL [[ARG1]] f()
[[ARG1]] LOAD 433 f(ARG1)
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1
 STORE 433 ARG1 ARG2
 STORE 433 (ARG1 + 8) ARG3
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 16)] * 8) INT_MULT [(ARG1 + 16)] 8
(ARG1 + 16) CAST (ARG1 + 16)
([(ARG1 + 8)] + ([(ARG1 + 16)] * 8)) INT_ADD [(ARG1 + 8)] ([(ARG1 + 16)] * 8)
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 16)] * 8) INT_MULT [(ARG1 + 16)] 8
 CALL func (RSP + -40) ([(ARG1 + 8)] + ([(ARG1 + 16)] * 8)) ([(ARG1 + 8)] + ([(ARG1 + 16)] * 8)) ([(ARG1 + 8)] + ([(ARG1 + 16)] * 8))
40 CAST 40
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
(ARG1 + 8) CAST (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
([(ARG1 + 8)] + ([(ARG1 + 16)] * 8)) INT_ADD [(ARG1 + 8)] ([(ARG1 + 16)] * 8)
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
 RETURN 0 (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) COPY (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
[ARG1] LOAD 433 ARG1
[ARG2] LOAD 433 ARG2
0 INT_ZEXT 0
([ARG2] & -256) INT_OR ([ARG2] & -256) 0
0 INT_NOTEQUAL [ARG1] [ARG2]
 RETURN 0 ([ARG2] & -256)
([ARG2] & -256) INT_AND [ARG2] -256
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 ([ARG1] + 8)
ARG1 COPY ARG1
 CALL func ARG1
 RETURN 0 ARG1
([ARG1] + 8) INT_ADD [ARG1] 8
ARG1 COPY ARG1
 RETURN 0 ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_LESSEQUAL [ARG1])
0 INT_LESSEQUAL [(ARG1 + 8)] [ARG1]
[ARG1] CAST [ARG1]
const PtrTy llvm::SmallPtrSetIterator<PtrTy>::operator*() const [with PtrTy = llvm::cl::OptionCategory*] COPY const PtrTy llvm::SmallPtrSetIterator<PtrTy>::operator*() const [with PtrTy = llvm::cl::OptionCategory*]
Bucket < End COPY Bucket < End
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
 CALL libcall___assert_fail_thunk Bucket < End /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h 195 const PtrTy llvm::SmallPtrSetIterator<PtrTy>::operator*() const [with PtrTy = llvm::cl::OptionCategory*]
[[ARG1]] LOAD 433 [ARG1]
 CALL func [[ARG1]]
 RETURN 0
 RETURN 1
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
f() CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
 CALL func ARG1 f() f()
 RETURN 0
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG5 COPY ARG5
(RSP + -40) PTRSUB RSP -40
f() CALL func (RSP + -40) (RSP + -56) (RSP + -56)
 RETURN 0 f()
(RSP + -56) PTRSUB RSP -56
0 COPY 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() COPY f()
 CALL func (RSP + -40)
f() CALL func (RSP + -64) f(ARG1) f(ARG2) f(ARG1)
(RSP + -40) PTRSUB RSP -40
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 BRANCH VZERO
(RSP + -64) PTRSUB RSP -64
(f() + 1) INT_ADD f() 1
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
(RSP + -24) PTRSUB RSP -24
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
 CALL func ARG1 ARG2 ARG3 ARG4 f()
f() CALL func ARG5
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
 STORE 433 ARG1 [f(ARG2)]
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG3) CAST f(ARG3)
[f(ARG3)] LOAD 433 f(ARG3)
 STORE 433 (ARG1 + 8) [f(ARG3)]
 RETURN 0
f(ARG2) CAST f(ARG2)
[f(ARG2)] LOAD 433 f(ARG2)
(ARG1 + 8) CAST (ARG1 + 8)
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
 CALL func (RSP + -56) f(ARG1) f(ARG2) f(ARG1)
[40] LOAD 433 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
(RSP + -56) PTRSUB RSP -56
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL libcall___stack_chk_fail_thunk
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 RETURN 1
(ARG1 / 16) INT_RIGHT ARG1 4
(ARG1 / 512) INT_RIGHT ARG1 9
0 INT_XOR (8388607 & (ARG1 / 1099511627264)) (268435455 & (ARG1 / 34359738352))
(ARG1 / 1099511627264) SUBPIECE (ARG1 / 512) 0
(8388607 & (ARG1 / 1099511627264)) INT_AND (ARG1 / 1099511627264) 8388607
 RETURN 0 0
(ARG1 / 34359738352) SUBPIECE (ARG1 / 16) 0
(268435455 & (ARG1 / 34359738352)) INT_AND (ARG1 / 34359738352) 268435455
0 COPY 0
0 INT_EQUAL [([(ARG1 + 8)] + (f(ARG1) * 8))] ARG2
f() CALL func ARG2
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
[([(ARG1 + 8)] + (f(ARG1) * 8))] LOAD 433 ([(ARG1 + 8)] + (f(ARG1) * 8))
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([([(ARG1 + 8)] + (f(ARG1) * 8))] INT_EQUAL f())
(f(ARG1) * 8) INT_MULT f(ARG1) 8
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + (f(ARG1) * 8)) CAST ([(ARG1 + 8)] + (f(ARG1) * 8))
1 COPY 1
0 INT_EQUAL [([(ARG1 + 8)] + (f(ARG1) * 8))] f()
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
f(ARG1) INT_ZEXT f(ARG1)
(ARG1 + 16) CAST (ARG1 + 16)
([(ARG1 + 16)] + -1) INT_SUB [(ARG1 + 16)] -1
1 COPY 1
0 COPY 0
(f() & ([(ARG1 + 16)] + -1)) INT_AND ([(ARG1 + 16)] + -1) f()
([(ARG1 + 8)] + (f(ARG1) * 8)) INT_ADD [(ARG1 + 8)] (f(ARG1) * 8)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
f() CALL func
 CBRANCH ([([(ARG1 + 8)] + (f(ARG1) * 8))] INT_EQUAL ARG2)
([(ARG1 + 8)] + (f(ARG1) * 8)) CAST ([(ARG1 + 8)] + (f(ARG1) * 8))
(f(ARG1) + f()) INT_ADD f(ARG1) f()
 CBRANCH ([([(ARG1 + 8)] + (f(ARG1) * 8))] INT_EQUAL f())
(f(ARG1) * 8) INT_MULT f(ARG1) 8
0 INT_EQUAL [([(ARG1 + 8)] + (f(ARG1) * 8))] f()
([(ARG1 + 8)] + (f(ARG1) * 8)) INT_ADD [(ARG1 + 8)] (f(ARG1) * 8)
f(ARG1) INT_ZEXT f(ARG1)
 RETURN 0 ([(ARG1 + 8)] + (f(ARG1) * 8))
f() CALL func
 CBRANCH f()
((f(ARG1) + f()) & ([(ARG1 + 16)] + -1)) INT_AND ([(ARG1 + 16)] + -1) (f(ARG1) + f())
 RETURN 0 f(ARG1)
 BRANCH VZERO
([(ARG1 + 8)] + (f(ARG1) * 8)) INT_ADD [(ARG1 + 8)] (f(ARG1) * 8)
([(ARG1 + 8)] + (f(ARG1) * 8)) COPY ([(ARG1 + 8)] + (f(ARG1) * 8))
([(ARG1 + 16)] + -1) INT_SUB [(ARG1 + 16)] -1
(f() + 1) COPY (f() + 1)
(f(ARG1) * 8) INT_MULT f(ARG1) 8
[([(ARG1 + 8)] + (f(ARG1) * 8))] LOAD 433 ([(ARG1 + 8)] + (f(ARG1) * 8))
(f() + 1) INT_ADD f() 1
f(ARG1) INT_ZEXT f(ARG1)
 CBRANCH (f(ARG1) INT_EQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
(f(ARG1) * 8) INT_MULT f(ARG1) 8
0 INT_EQUAL f(ARG1) 0
[([(ARG1 + 8)] + (f(ARG1) * 8))] LOAD 433 ([(ARG1 + 8)] + (f(ARG1) * 8))
 CBRANCH (f(ARG1) INT_EQUAL 0)
([(ARG1 + 8)] + (f(ARG1) * 8)) CAST ([(ARG1 + 8)] + (f(ARG1) * 8))
f(ARG1) INT_ZEXT f(ARG1)
([(ARG1 + 8)] + (f(ARG1) * 8)) INT_ADD [(ARG1 + 8)] (f(ARG1) * 8)
0 INT_EQUAL f(ARG1) 0
 BRANCH VZERO
([(ARG1 + 8)] + (f(ARG1) * 8)) INT_ADD [(ARG1 + 8)] (f(ARG1) * 8)
f(ARG1) INT_ZEXT f(ARG1)
(f(ARG1) * 8) INT_MULT f(ARG1) 8
f(ARG1) INT_ZEXT f(ARG1)
(f(ARG1) * 8) INT_MULT f(ARG1) 8
([(ARG1 + 8)] + (f(ARG1) * 8)) INT_ADD [(ARG1 + 8)] (f(ARG1) * 8)
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
f(ARG1) CALL func ARG1 [f(ARG1)] [f(ARG1)]
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
f(ARG1) CALL func ARG1 [f(ARG1)] [f(ARG1)]
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 20) INT_ADD ARG1 20
 STORE 433 (ARG1 + 16) ARG2
ARG2 INT_ZEXT ARG2
ARG2 INT_ZEXT ARG2
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() CALL libcall_malloc_thunk (ARG2 * 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_EQUAL [(ARG1 + 8)] 0
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
 STORE 433 (ARG1 + 8) f()
(ARG1 + 8) CAST (ARG1 + 8)
(ARG2 * 8) INT_LEFT ARG2 3
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH (f() INT_EQUAL 0)
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
 STORE 433 (ARG1 + 24) 0
[(ARG1 + 8)] COPY [(ARG1 + 8)]
([(ARG1 + 8)] + ([(ARG1 + 16)] * 8)) PTRADD [(ARG1 + 8)] [(ARG1 + 16)] 8
([(ARG1 + 8)] + ([(ARG1 + 20)] * 8)) PTRADD [(ARG1 + 8)] [(ARG1 + 20)] 8
(ARG1 + 20) CAST (ARG1 + 20)
(ARG1 + 24) CAST (ARG1 + 24)
 CBRANCH (f(ARG1) INT_NOTEQUAL ([(ARG1 + 8)] + ([(ARG1 + 20)] * 8)))
0 INT_NOTEQUAL f(ARG1) ([(ARG1 + 8)] + ([(ARG1 + 20)] * 8))
[(ARG1 + 20)] INT_ZEXT [(ARG1 + 20)]
 CALL libcall_free_thunk [(ARG1 + 8)]
 CBRANCH (f(ARG1) INT_NOTEQUAL ([(ARG1 + 8)] + ([(ARG1 + 16)] * 8)))
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
0 INT_NOTEQUAL f(ARG1) ([(ARG1 + 8)] + ([(ARG1 + 16)] * 8))
 BRANCH VZERO
[f(ARG1)] LOAD 433 f(ARG1)
f(ARG1) CAST f(ARG1)
 STORE 433 f(ARG1) [f(ARG1)]
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
 CALL libcall_memset_thunk [(ARG1 + 8)] 4294967295 (ARG2 * 8)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
 RETURN 1
CurArray && "Failed to allocate memory?" COPY CurArray && "Failed to allocate memory?"
 CALL libcall___assert_fail_thunk CurArray && "Failed to allocate memory?" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp 142 void llvm::SmallPtrSetImplBase::Grow(unsigned int)
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
(ARG2 * 8) INT_MULT ARG2 8
0 INT_EQUAL f() 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
void llvm::SmallPtrSetImplBase::Grow(unsigned int) COPY void llvm::SmallPtrSetImplBase::Grow(unsigned int)
 CBRANCH f()
 STORE 433 f(ARG1) [f(ARG1)]
f(ARG1) CAST f(ARG1)
 CBRANCH (f() INT_EQUAL [f(ARG1)])
0 COPY 0
 BRANCH VZERO
1 COPY 1
[f(ARG1)] LOAD 433 f(ARG1)
 BRANCH VZERO
0 INT_EQUAL f() [f(ARG1)]
f() CALL func
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
 CBRANCH (f() INT_EQUAL [f(ARG1)])
0 INT_EQUAL f() [f(ARG1)]
f() CALL func
 STORE 433 ARG1 [f(ARG2)]
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG2) CALL func ARG2
(ARG2 + 8) INT_ADD ARG2 8
f(ARG2) CAST f(ARG2)
f(ARG2) CAST f(ARG2)
 RETURN 0
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG2) CALL func (ARG2 + 8)
[f(ARG2)] LOAD 433 f(ARG2)
 STORE 433 (ARG1 + 8) [f(ARG2)]
(ARG1 + 8) CAST (ARG1 + 8)
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
 STORE 433 ARG1 [f(ARG2)]
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG2) CAST f(ARG2)
(ARG1 + 8) CAST (ARG1 + 8)
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG3) CAST f(ARG3)
 STORE 433 (ARG1 + 8) [f(ARG3)]
[f(ARG3)] LOAD 433 f(ARG3)
 RETURN 0
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -56) f(ARG1) f(ARG2) f(ARG1)
[40] LOAD 433 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
(RSP + -56) PTRSUB RSP -56
40 CAST 40
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 24) PTRADD ARG1 3 8
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
f() CALL func ARG1
(ARG1 + 16) PTRADD ARG1 2 8
ARG1 CAST ARG1
(ARG1 + 24) PTRADD ARG1 3 8
ARG1 CAST ARG1
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
 CALL func ARG1 f(ARG1) f(ARG1)
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
 CALL func ARG1 [(ARG1 + 16)] [(ARG1 + 16)]
[ARG1] LOAD 433 ARG1
f(ARG1) CALL func ARG1 ARG2 ARG2
ARG1 CAST ARG1
ARG1 CAST ARG1
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
ARG1 CAST ARG1
[ARG1] LOAD 433 ARG1
0 INT_EQUAL [f(ARG1)] ARG2
 STORE 433 ([ARG1] + ([(ARG1 + 20)] * 8)) ARG2
0 INT_EQUAL [f(ARG1)] ARG2
 STORE 433 f(ARG1) ARG2
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
([(ARG1 + 20)] * 4) CAST ([(ARG1 + 20)] * 4)
0 INT_LESS ([(ARG1 + 20)] * 4) ([(ARG1 + 16)] * 3)
([(ARG1 + 16)] * 3) CAST ([(ARG1 + 16)] * 3)
 CBRANCH ([f(ARG1)] INT_EQUAL ARG2)
([ARG1] + ([(ARG1 + 20)] * 8)) PTRADD [ARG1] [(ARG1 + 20)] 8
([(ARG1 + 16)] * 3) INT_MULT [(ARG1 + 16)] 3
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 20) CAST (ARG1 + 20)
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
[f(ARG1)] LOAD 433 f(ARG1)
([(ARG1 + 20)] * 4) INT_MULT [(ARG1 + 20)] 4
 CBRANCH (([(ARG1 + 20)] * 4) INT_LESS ([(ARG1 + 16)] * 3))
[(ARG1 + 20)] INT_ZEXT [(ARG1 + 20)]
f(ARG1) CAST f(ARG1)
(ARG1 + 20) CAST (ARG1 + 20)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
0 INT_NOTEQUAL f(ARG1) ([ARG1] + ([(ARG1 + 20)] * 8))
 CBRANCH (f(ARG1) INT_NOTEQUAL ([ARG1] + ([(ARG1 + 20)] * 8)))
(ARG1 + 20) INT_ADD ARG1 20
 CBRANCH (([(ARG1 + 16)] - ([(ARG1 + 24)] + [(ARG1 + 20)])) INT_LESS ([(ARG1 + 16)] / 8))
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH ([f(ARG1)] INT_EQUAL f())
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
 STORE 433 (ARG1 + 24) ([(ARG1 + 24)] + 4294967295)
([(ARG1 + 24)] + 4294967295) INT_ADD [(ARG1 + 24)] 4294967295
0 INT_LESS [(ARG1 + 16)] 64
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_LESS 64)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
 BRANCH VZERO
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 16)] - ([(ARG1 + 24)] + [(ARG1 + 20)])) CAST ([(ARG1 + 16)] - ([(ARG1 + 24)] + [(ARG1 + 20)]))
0 INT_LESS ([(ARG1 + 16)] - ([(ARG1 + 24)] + [(ARG1 + 20)])) ([(ARG1 + 16)] / 8)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 16)] - ([(ARG1 + 24)] + [(ARG1 + 20)])) INT_SUB [(ARG1 + 16)] ([(ARG1 + 24)] + [(ARG1 + 20)])
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
([(ARG1 + 24)] + [(ARG1 + 20)]) INT_ADD [(ARG1 + 24)] [(ARG1 + 20)]
(ARG1 + 24) CAST (ARG1 + 24)
([(ARG1 + 16)] / 8) INT_RIGHT [(ARG1 + 16)] 3
(ARG1 + 20) CAST (ARG1 + 20)
f() CALL func (RSP + -88) (RSP + -89) (RSP + -89)
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
 CALL func (RSP + -56) (RSP + -72) (RSP + -72)
0 INT_EQUAL [f(ARG1)] f()
(RSP + -56) PTRSUB RSP -56
([(ARG1 + 20)] + 1) INT_ADD [(ARG1 + 20)] 1
(RSP + -56) PTRSUB RSP -56
(RSP + -72) PTRSUB RSP -72
0 COPY 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -72) PTRSUB RSP -72
(f() / 2147483647) SUBPIECE f() 8
(ARG1 + 20) CAST (ARG1 + 20)
(ARG1 + 20) INT_ADD ARG1 20
 CALL func (RSP + -56) (RSP + -72) (RSP + -72)
f() CALL func
(f() / 2147483647) SUBPIECE f() 0
(ARG1 + 20) CAST (ARG1 + 20)
1 COPY 1
[f(ARG1)] LOAD 433 f(ARG1)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -88) PTRSUB RSP -88
(RSP + -88) PTRSUB RSP -88
(RSP + -89) PTRSUB RSP -89
 BRANCH VZERO
(RSP + -89) PTRSUB RSP -89
f() CALL func (RSP + -88) (RSP + -89) (RSP + -89)
 STORE 433 (ARG1 + 20) ([(ARG1 + 20)] + 1)
(ARG1 + 20) INT_ADD ARG1 20
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 BRANCH VZERO
([(ARG1 + 16)] * 2) INT_MULT [(ARG1 + 16)] 2
128 COPY 128
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ([f(ARG1)] INT_EQUAL ARG2)
(RSP + -88) PTRSUB RSP -88
(f() / 2147483647) SUBPIECE f() 0
(RSP + -56) PTRSUB RSP -56
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -56) (RSP + -72) (RSP + -72)
(RSP + -89) PTRSUB RSP -89
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -88) (RSP + -89) (RSP + -89)
 BRANCH VZERO
 BRANCH VZERO
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 RETURN 0 (f() # f())
(f() # f()) PIECE f() f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[f(ARG1)] LOAD 433 f(ARG1)
0 INT_LESS [(ARG1 + 20)] [(ARG1 + 16)]
(ARG1 + 20) CAST (ARG1 + 20)
(ARG1 + 20) INT_ADD ARG1 20
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
 CBRANCH ([(ARG1 + 20)] INT_LESS [(ARG1 + 16)])
(f() / 2147483647) SUBPIECE f() 8
(RSP + -56) PTRSUB RSP -56
(ARG1 + 20) CAST (ARG1 + 20)
f() CALL func (RSP + -88) (RSP + -89) (RSP + -89)
(f() / 2147483647) SUBPIECE f() 0
([(ARG1 + 20)] + 1) INT_ZEXT ([(ARG1 + 20)] + 1)
1 COPY 1
(RSP + -72) PTRSUB RSP -72
([(ARG1 + 20)] + 1) INT_SUB [(ARG1 + 20)] 1
 CALL func (RSP + -56) (RSP + -72) (RSP + -72)
([ARG1] + ([(ARG1 + 20)] * 8)) PTRADD [ARG1] [(ARG1 + 20)] 8
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 20) INT_ADD ARG1 20
([(ARG1 + 20)] + 1) INT_ADD [(ARG1 + 20)] 1
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
([ARG1] + (([(ARG1 + 20)] + 1) * 8)) PTRADD [ARG1] ([(ARG1 + 20)] + 1) 8
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 20) CAST (ARG1 + 20)
[(ARG1 + 20)] INT_ZEXT [(ARG1 + 20)]
 BRANCH VZERO
 STORE 433 (ARG1 + 20) ([(ARG1 + 20)] + 1)
(RSP + -89) PTRSUB RSP -89
(RSP + -88) PTRSUB RSP -88
(ARG1 + 20) CAST (ARG1 + 20)
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 [f(ARG2)]
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
[(f(ARG2) + 8)] LOAD 433 (f(ARG2) + 8)
[f(ARG2)] LOAD 433 f(ARG2)
 STORE 433 (ARG1 + 16) [f(ARG3)]
(ARG1 + 16) CAST (ARG1 + 16)
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
 STORE 433 (ARG1 + 8) [(f(ARG2) + 8)]
[f(ARG3)] LOAD 433 f(ARG3)
f(ARG2) CAST f(ARG2)
f(ARG3) CAST f(ARG3)
 RETURN 0
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
ARG1 COPY ARG1
 CALL func ARG1 f(ARG2) f(ARG3) f(ARG2)
 RETURN 0 ARG1
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -40) (RSP + -48) (RSP + -40)
(ARG2 + 16) INT_ADD ARG2 16
(ARG2 + 8) INT_ADD ARG2 8
f() CALL func ARG2 f(ARG3) f(ARG3)
f(ARG3) CALL func ARG3
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(ARG2 + 16) CAST (ARG2 + 16)
40 CAST 40
(f() / 2147483647) INT_RIGHT f() 64
(ARG2 + 8) CAST (ARG2 + 8)
([(ARG2 + 8)] + ([(ARG2 + 16)] * 8)) INT_ADD [(ARG2 + 8)] ([(ARG2 + 16)] * 8)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
(RSP + -40) PTRSUB RSP -40
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -48) PTRSUB RSP -48
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
([(ARG2 + 16)] * 8) INT_MULT [(ARG2 + 16)] 8
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 40
[(ARG2 + 16)] INT_ZEXT [(ARG2 + 16)]
 CALL func (RSP + -40) (f() / 2147483647) ([(ARG2 + 8)] + ([(ARG2 + 16)] * 8)) (f() / 2147483647)
(RSP + -40) PTRSUB RSP -40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
([(ARG1 + 16)] * 8) INT_MULT [(ARG1 + 16)] 8
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 16) CAST (ARG1 + 16)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -40) [(ARG1 + 8)] ([(ARG1 + 8)] + ([(ARG1 + 16)] * 8)) [(ARG1 + 8)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(RSP + -40) PTRSUB RSP -40
([(ARG1 + 8)] + ([(ARG1 + 16)] * 8)) INT_ADD [(ARG1 + 8)] ([(ARG1 + 16)] * 8)
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 40
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) COPY (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 RETURN 1
(ARG1 + 216) INT_ADD ARG1 216
(ARG1 + 216) INT_ADD ARG1 216
(ARG1 + 216) INT_ADD ARG1 216
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647) (f() / 4611686014132420609) ARG2
 CALL func (RSP + -72) (ARG1 + 216) ARG2 (ARG1 + 216)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
(f() / 2147483647) INT_RIGHT f() 64
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
f() CALL func (ARG1 + 216)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) INT_RIGHT f() 64
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func (ARG1 + 216)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
0 COPY 0
void {anonymous}::CommandLineParser::registerCategory(llvm::cl::OptionCategory*) COPY void {anonymous}::CommandLineParser::registerCategory(llvm::cl::OptionCategory*)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -72) PTRSUB RSP -72
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 RETURN 1
40 CAST 40
 CALL libcall___assert_fail_thunk 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 202 void {anonymous}::CommandLineParser::registerCategory(llvm::cl::OptionCategory*)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALL func f() ARG1 ARG2 f()
6887840 PTRSUB 0 6887840
f() CALL func 6887840
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG3) CALL func ARG3
f(ARG2) CALL func 8 ARG2
f(ARG3) CAST f(ARG3)
f(ARG2) CAST f(ARG2)
0 INT_NOTEQUAL f(ARG2) 0
 RETURN 0
[f(ARG3)] LOAD 433 f(ARG3)
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
 STORE 433 f(ARG2) [f(ARG3)]
 CALL func ARG1 ARG2 f(ARG3) ARG2
f(ARG3) CALL func ARG3
 RETURN 0
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -24) PTRSUB RSP -24
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
ARG1 COPY ARG1
 CALL func (RSP + -16)
(RSP + -16) PTRSUB RSP -16
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL libcall_memmove_thunk ARG3 ARG1 (((ARG2 - ARG1) / 8) * 8)
ARG1 CAST ARG1
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG3 CAST ARG3
0 INT_NOTEQUAL ((ARG2 - ARG1) / 8) 0
((ARG2 - ARG1) / 8) INT_SRIGHT (ARG2 - ARG1) 3
 RETURN 0 (ARG3 + (((ARG2 - ARG1) / 8) * 8))
 CBRANCH (((ARG2 - ARG1) / 8) INT_NOTEQUAL 0)
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) INT_ADD ARG3 (((ARG2 - ARG1) / 8) * 8)
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) CAST (ARG3 + (((ARG2 - ARG1) / 8) * 8))
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 CALL func f() f() f()
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG4
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 ARG4
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
 RETURN 0
 CALL func f(ARG1)
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
 RETURN 0 (([(ARG1 + 8)] - [ARG1]) / 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(([(ARG1 + 8)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 3
f() CALL func ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
 CALL libcall___throw_length_error_thunk ARG3
(FS_OFFSET + 40) INT_ADD 0 40
f(RSP) CAST f(RSP)
f() CALL func f(ARG1)
f() CALL func ARG1
(f() - f()) CAST (f() - f())
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(RSP + -48) PTRSUB RSP -48
 CBRANCH ((f() - f()) INT_LESS ARG2)
(RSP + -72) PTRSUB RSP -72
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() [(f() + 40)]
([f(RSP)] + f()) INT_ADD [f(RSP)] f()
f() CALL func f(ARG1)
0 INT_LESS ([f(RSP)] + f()) f()
0 INT_LESS (f() - f()) ARG2
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (([f(RSP)] + f()) INT_LESS f())
[f(RSP)] LOAD 433 f(RSP)
f() CALL func f(ARG1)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() - f()) INT_SUB f() f()
f(RSP) CALL func (RSP + -48) (RSP + -72) (RSP + -72)
(f() + 40) CAST (f() + 40)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(RSP)
 RETURN 1
f() CALL func f(ARG1)
0 INT_LESS f() ([f(RSP)] + f())
f() CALL func f(ARG1)
 CBRANCH (f() INT_LESS ([f(RSP)] + f()))
([f(RSP)] + f()) COPY ([f(RSP)] + f())
 BRANCH VZERO
f() COPY f()
f(ARG2) CALL func ARG2
f(ARG1) CALL func ARG1
f(ARG1) CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 ((f() * 8) + f()) f(ARG2) ((f() * 8) + f())
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 f()
[ARG1] LOAD 433 ARG1
f() CALL func ARG1 f(RSP) f(RSP)
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
f(RSP) CALL func ARG1 1 0
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 8) [ARG1]
0 COPY 0
 RETURN 0
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
f() CALL func [ARG1] [(ARG1 + 8)] f() f(ARG1)
 STORE 433 (ARG1 + 8) (f() + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (ARG1 + 16) ((f(RSP) * 8) + f())
((f(RSP) * 8) + f()) INT_ADD (f(RSP) * 8) f()
(f(RSP) * 8) INT_MULT f(RSP) 8
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(([(ARG1 + 16)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 3
(f() + 8) INT_ADD f() 8
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
(f() * 8) INT_MULT f() 8
((f() * 8) + f()) INT_ADD (f() * 8) f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func ARG1 ARG2 ARG2
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1 [(ARG1 + 8)] ARG2 [(ARG1 + 8)]
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0
 CBRANCH ([(ARG1 + 8)] INT_EQUAL [(ARG1 + 16)])
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_EQUAL [(ARG1 + 8)] [(ARG1 + 16)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + 8) INT_ADD [(ARG1 + 8)] 8
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 ARG1 ARG2
ARG1 COPY ARG1
ARG2 COPY ARG2
f() CALL func 6887840
(RSP + -24) PTRSUB RSP -24
(f() + 40) INT_ADD f() 40
 CALL func (f() + 40) (RSP + -24) (f() + 40)
 RETURN 0
6887840 PTRSUB 0 6887840
 CALL func f() ARG1 f()
6887840 PTRSUB 0 6887840
f() CALL func 6887840
 RETURN 0
 CALL func f() ARG1 f()
 RETURN 0
6887840 PTRSUB 0 6887840
f() CALL func 6887840
[ARG1] LOAD 433 ARG1
[ARG2] LOAD 433 ARG2
0 INT_ZEXT 0
([ARG2] & -256) INT_OR ([ARG2] & -256) 0
0 INT_NOTEQUAL [ARG1] [ARG2]
 RETURN 0 ([ARG2] & -256)
([ARG2] & -256) INT_AND [ARG2] -256
[ARG1] LOAD 433 ARG1
[[ARG1]] LOAD 433 [ARG1]
[[ARG1]] COPY [[ARG1]]
[ARG1] CAST [ARG1]
 RETURN 0 [[ARG1]]
(ARG1 + 176) INT_ADD ARG1 176
(ARG1 + 176) INT_ADD ARG1 176
(ARG1 + 176) INT_ADD ARG1 176
(ARG1 + 176) INT_ADD ARG1 176
(ARG2 + 8) PTRADD ARG2 1 8
 STORE 433 ARG2 (f() / 2147483647)
(ARG2 + 8) PTRADD ARG2 1 8
f() CALL func ARG2 0 f()
f() CALL func ARG2
f() CALL func ARG2 0 f()
f(ARG2) LOAD 433 ARG2
f() CALL func ARG2 61 0
f() CALL func ARG2 (f() + 1) -1 (f() + 1)
 STORE 433 ARG3 (f() / 2147483647)
(ARG3 + 8) PTRADD ARG3 1 8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(f() + 8) INT_ADD f() 8
0 COPY 0
(RSP + -56) PTRSUB RSP -56
(f() / 2147483647) SUBPIECE f() 0
(f() + 1) INT_ADD f() 1
 STORE 433 (ARG2 + 8) (f() / 4611686014132420609)
(f() / 2147483647) INT_RIGHT f() 64
[(f() + 8)] LOAD 433 (f() + 8)
(f() / 2147483647) INT_RIGHT f() 64
(f() + 8) CAST (f() + 8)
f() CALL func (RSP + -56)
 BRANCH VZERO
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
 STORE 433 (ARG3 + 8) (f() / 4611686014132420609)
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
(f() + 8) CAST (f() + 8)
 BRANCH VZERO
f() CALL func (RSP + -56)
(f() + 8) INT_ADD f() 8
[(f() + 8)] LOAD 433 (f() + 8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 RETURN 1
 BRANCH VZERO
0 INT_EQUAL f() -1
 CBRANCH (f() INT_EQUAL -1)
0 COPY 0
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
0 INT_EQUAL f() 0
f() CALL func (ARG1 + 176) (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
f() CALL func (RSP + -56) (RSP + -48) (RSP + -48)
f() CALL func (ARG1 + 176)
(f() / 2147483647) INT_RIGHT f() 64
0 INT_EQUAL f() 0
(RSP + -56) PTRSUB RSP -56
f() CALL func (ARG1 + 176) f(ARG2) [(ARG2 + 8)] (ARG1 + 176)
f() COPY f()
(RSP + -48) PTRSUB RSP -48
f() CALL func (ARG1 + 176)
f() CALL func (RSP + -56) (RSP + -48) (RSP + -48)
(RSP + -56) PTRSUB RSP -56
(RSP + -48) PTRSUB RSP -48
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -24) PTRSUB RSP -24
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
 CALL func (RSP + -24) [ARG1] 0 [ARG1]
40 INT_ADD 0 40
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL [(ARG1 + 8)] 0
(FS_OFFSET + 40) INT_ADD 0 40
(ARG1 + 8) CAST (ARG1 + 8)
[40] LOAD 433 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
 CALL func (RSP + -24) ([ARG1] + ([(ARG1 + 8)] * 8)) 1 ([ARG1] + ([(ARG1 + 8)] * 8))
40 INT_ADD 0 40
([(ARG1 + 8)] * 8) INT_MULT [(ARG1 + 8)] 8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
[40] LOAD 433 40
(RSP + -24) PTRSUB RSP -24
([ARG1] + ([(ARG1 + 8)] * 8)) INT_ADD [ARG1] ([(ARG1 + 8)] * 8)
[(ARG1 + 8)] INT_ZEXT [(ARG1 + 8)]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
f() CALL func ARG1
f() CALL func ARG1
(ARG2 * 8) INT_MULT ARG2 8
0 INT_LESSEQUAL f() ARG2
 CBRANCH (f() INT_LESSEQUAL ARG2)
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 139 0
((ARG2 * 8) + f()) INT_ADD (ARG2 * 8) f()
idx < size() COPY idx < size()
 RETURN 0 ((ARG2 * 8) + f())
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
 RETURN 1
0 COPY 0
ARG1 COPY ARG1
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 ([ARG1] + 8)
 CALL func ARG1
 RETURN 0 ARG1
([ARG1] + 8) INT_ADD [ARG1] 8
VZERO CALLIND [([ARG1] + 8)] ARG1 ARG2 ARG1
ARG1 CAST ARG1
ARG1 CAST ARG1
[ARG1] LOAD 433 ARG1
 RETURN 0 f(ARG1)
(ARG1 + 12) CAST (ARG1 + 12)
 CBRANCH (([(ARG1 + 12)] & 24) INT_EQUAL 0)
0 INT_EQUAL ([(ARG1 + 12)] & 24) 0
(ARG1 + 12) INT_ADD ARG1 12
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
([(ARG1 + 12)] & 24) INT_AND [(ARG1 + 12)] 24
([(ARG1 + 12)] / 8) INT_RIGHT [(ARG1 + 12)] 3
[([ARG1] + 8)] LOAD 433 ([ARG1] + 8)
 BRANCH VZERO
([ARG1] + 8) INT_ADD [ARG1] 8
(3 & ([(ARG1 + 12)] / 8)) INT_ZEXT (3 & ([(ARG1 + 12)] / 8))
(ARG1 + 12) CAST (ARG1 + 12)
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(3 & ([(ARG1 + 12)] / 8)) INT_AND ([(ARG1 + 12)] / 8) 3
(ARG1 + 12) INT_ADD ARG1 12
([ARG1] + 8) CAST ([ARG1] + 8)
ARG1 COPY ARG1
ARG2 COPY ARG2
f() CALL func ARG3
f() CALL func ARG3
 CALL libcall_operator=_thunk ARG4 (RSP + -200)
 CALL libcall_operator=_thunk ARG4 [f()]
(RSP + -520) PTRSUB RSP -520
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
f() CALL func (RSP + -520)
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_EQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_EQUAL 0)
f() COPY f()
0 INT_EQUAL f() 0
f() COPY f()
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_LESS f())
f() CALL func f(RSP)
0 INT_LESS f() f()
 CBRANCH f()
f() CALL func (RSP + -488) (RSP + -480) (RSP + -480)
(RSP + -480) PTRSUB RSP -480
0 COPY 0
(RSP + -232) PTRSUB RSP -232
(RSP + -232) PTRSUB RSP -232
0 COPY 0
f() COPY f()
(RSP + -216) PTRSUB RSP -216
 CALL func (RSP + -232) (RSP + -520) 61 (RSP + -520)
0 COPY 0
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -488) PTRSUB RSP -488
 BRANCH VZERO
0 COPY 0
(RSP + -520) PTRSUB RSP -520
 BRANCH VZERO
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
1 COPY 1
0 COPY 0
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 CBRANCH ([[([(f() + 8)] + 24)]] INT_NOTEQUAL 0)
([(f() + 8)] + 24) PTRADD [(f() + 8)] 3 8
 CALL func (RSP + -168) ([(f() + 8)] + 24) ([(f() + 8)] + 24)
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -296) f(RSP) f(RSP)
f() CALL func (RSP + -168) f() f()
[f()] LOAD 433 f()
f() CAST f()
(RSP + -360) PTRSUB RSP -360
(RSP + -200) PTRSUB RSP -200
4620331 PTRSUB 0 4620331
 CALL func (RSP + -264) (RSP + -328) (RSP + -296)
(RSP + -168) PTRSUB RSP -168
(RSP + -328) PTRSUB RSP -328
(RSP + -392) PTRSUB RSP -392
(RSP + -296) PTRSUB RSP -296
[f()] LOAD 433 f()
(RSP + -296) PTRSUB RSP -296
(RSP + -200) PTRSUB RSP -200
f() CALL func (RSP + -168) f() f()
(RSP + -264) PTRSUB RSP -264
f() CAST f()
 CALL func (RSP + -360) 4620331
 CALL func (RSP + -392) [f()] [f()]
(RSP + -168) PTRSUB RSP -168
(RSP + -392) PTRSUB RSP -392
 CALL func (RSP + -200) (RSP + -264) (RSP + -264)
(RSP + -264) PTRSUB RSP -264
(RSP + -360) PTRSUB RSP -360
 CALL libcall_~basic_string_thunk (RSP + -200)
(RSP + -200) CAST (RSP + -200)
 BRANCH VZERO
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -328) (RSP + -392) (RSP + -360) (RSP + -392)
(RSP + -328) PTRSUB RSP -328
 CBRANCH (f() INT_NOTEQUAL f())
f() COPY f()
0 INT_NOTEQUAL f() f()
(f() + 1) INT_ADD f() 1
f() CAST f()
f() CALL func (RSP + -264) f(RSP) f(RSP) 1 f()
(RSP + -168) PTRSUB RSP -168
f() CALL func (RSP + -168) f() f()
[f()] LOAD 433 f()
 CALL func (RSP + -408) [f()] [f()]
f() COPY f()
(RSP + -264) PTRSUB RSP -264
0 INT_EQUAL f() 0
 BRANCH VZERO
(RSP + -408) PTRSUB RSP -408
[[([(f() + 8)] + 24)]] LOAD 433 [([(f() + 8)] + 24)]
[([(f() + 8)] + 24)] CAST [([(f() + 8)] + 24)]
0 COPY 0
f() CALL func (RSP + -168)
[(f() + 8)] LOAD 433 (f() + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
(RSP + -520) COPY (RSP + -520)
f(RSP) COPY f(RSP)
[([(f() + 8)] + 24)] LOAD 433 ([(f() + 8)] + 24)
([(f() + 8)] + 24) PTRADD [(f() + 8)] 3 8
(RSP + -520) PTRSUB RSP -520
 CALLIND [([[(f() + 8)]] + 48)] [(f() + 8)] (RSP + -168) [(f() + 8)] (RSP + -168)
(RSP + -168) PTRSUB RSP -168
[([[(f() + 8)]] + 48)] LOAD 433 ([[(f() + 8)]] + 48)
(RSP + -168) PTRSUB RSP -168
0 INT_NOTEQUAL [[([(f() + 8)] + 24)]] 0
[[(f() + 8)]] LOAD 433 [(f() + 8)]
[f(RSP)] LOAD 433 f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CALL func (RSP + -168)
(RSP + -168) PTRSUB RSP -168
([[(f() + 8)]] + 48) INT_ADD [[(f() + 8)]] 48
([[(f() + 8)]] + 48) CAST ([[(f() + 8)]] + 48)
(f() + 8) CAST (f() + 8)
(f() + 8) INT_ADD f() 8
(RSP + -488) PTRSUB RSP -488
0 COPY 0
0 INT_NOTEQUAL f() 3
-1 BOOL_NEGATE 0
f() CALL func (RSP + -488)
 CBRANCH -1
(RSP + -488) PTRSUB RSP -488
 CALL func (RSP + -168)
(RSP + -168) PTRSUB RSP -168
f() CALL func f()
 BRANCH VZERO
 CALL func (RSP + -488)
ARG7 COPY ARG7
ARG1 COPY ARG1
f() CALL func ARG1
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG2 COPY ARG2
ARG5 COPY ARG5
ARG6 COPY ARG6
(ARG6 # ARG5) COPY (ARG6 # ARG5)
 CBRANCH ((f() & 1) INT_NOTEQUAL 0)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(ARG6 # ARG5) PIECE ARG6 ARG5
0 INT_EQUAL f() [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) INT_ADD f() 40
(A_Stack[-0x40]:8 # A_Stack[-0x48]:8) PIECE A_Stack[-0x40]:8 A_Stack[-0x48]:8
0 INT_NOTEQUAL (f() & 1) 0
(f() & 1) INT_AND f() 1
(f() + 40) CAST (f() + 40)
4423851 COPY 4423851
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (VZERO INT_NOTEQUAL 0)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -136) PTRSUB RSP -136
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_NOTEQUAL -1)
 CALL func (RSP + -136) (f() + 1) -1 (f() + 1)
f() COPY f()
(RSP + -72) PTRSUB RSP -72
(f(ARG5 , ARG6) / 2147483647) SUBPIECE f(ARG5 , ARG6) 0
0 INT_NOTEQUAL f() -1
(RSP + -72) PTRSUB RSP -72
f() CALL func (RSP + -72) 44 0
4424110 COPY 4424110
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
f(ARG5 , ARG6) COPY f(ARG5 , ARG6)
(f() + 1) INT_ADD f() 1
(f() / 2147483647) SUBPIECE f() 8
1 COPY 1
f(ARG7) COPY f(ARG7)
(f() + 1) INT_ADD f() 1
f() CALL func (RSP + -72) (f() + 1) -1 (f() + 1)
 BRANCH VZERO
(f(ARG5 , ARG6) / 2147483647) SUBPIECE f(ARG5 , ARG6) 8
(f(ARG5 , ARG6) / 2147483647) SUBPIECE f(ARG5 , ARG6) 0
(f(ARG5 , ARG6) / 2147483647) SUBPIECE f(ARG5 , ARG6) 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
(f(ARG5 , ARG6) / 2147483647) SUBPIECE f(ARG5 , ARG6) 8
(f(ARG5 , ARG6) / 2147483647) SUBPIECE f(ARG5 , ARG6) 8
 RETURN 0 f()
 CBRANCH (VZERO INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
(f(ARG5 , ARG6) / 2147483647) SUBPIECE f(ARG5 , ARG6) 0
(ARG6 # ARG5) PIECE ARG6 ARG5
f() CALL func (RSP + -72) 44 0
(RSP + -72) PTRSUB RSP -72
4423905 COPY 4423905
(f(ARG5 , ARG6) / 2147483647) SUBPIECE f(ARG5 , ARG6) 8
(f(ARG5 , ARG6) / 2147483647) SUBPIECE f(ARG5 , ARG6) 0
([f(ARG1)] + 56) CAST ([f(ARG1)] + 56)
([f(ARG1)] + 56) INT_ADD [f(ARG1)] 56
(RSP + -72) PTRSUB RSP -72
f() CALL func (RSP + -72) 0 f()
(f(ARG5 , ARG6) / 4611686014132420609) SUBPIECE (f(ARG5 , ARG6) / 2147483647) 0
(f(ARG5 , ARG6) / 2147483647) INT_RIGHT f(ARG5 , ARG6) 64
VZERO CALLIND [([f(ARG1)] + 56)] f(ARG1) f(ARG2) f(ARG3) f(ARG4) (f(ARG5 , ARG6) / 2147483647) (f(ARG5 , ARG6) / 4611686014132420609) f(ARG7) f()
[([f(ARG1)] + 56)] LOAD 433 ([f(ARG1)] + 56)
(f(ARG5 , ARG6) / 2147483647) SUBPIECE f(ARG5 , ARG6) 0
(f(ARG5 , ARG6) / 2147483647) SUBPIECE f(ARG5 , ARG6) 8
(f(ARG6) # f(ARG5)) PIECE f(ARG6) f(ARG5)
(f(ARG5 , ARG6) / 2147483647) SUBPIECE f(ARG5 , ARG6) 0
(f(ARG5 , ARG6) / 2147483647) SUBPIECE f(ARG5 , ARG6) 8
([f(ARG1)] + 56) CAST ([f(ARG1)] + 56)
([f(ARG1)] + 56) INT_ADD [f(ARG1)] 56
[f(ARG1)] LOAD 433 f(ARG1)
0 INT_EQUAL VZERO 0
[([f(ARG1)] + 56)] LOAD 433 ([f(ARG1)] + 56)
VZERO CALLIND [([f(ARG1)] + 56)] f(ARG1) f(ARG2) f(ARG3) f(ARG4) (f() / 2147483647) (f() / 4611686014132420609) f(ARG7) 4423960
4423960 COPY 4423960
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f(ARG5 , ARG6) / 2147483647) SUBPIECE f(ARG5 , ARG6) 8
[f(ARG1)] LOAD 433 f(ARG1)
(f(ARG5 , ARG6) / 2147483647) SUBPIECE f(ARG5 , ARG6) 0
ARG6 COPY ARG6
ARG5 COPY ARG5
(f() / 2147483647) INT_RIGHT f() 64
0 INT_NOTEQUAL VZERO 0
(ARG1 + 20) INT_ADD ARG1 20
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
 RETURN 0 [(ARG1 + 20)]
[(ARG1 + 20)] COPY [(ARG1 + 20)]
(ARG1 + 20) CAST (ARG1 + 20)
ARG1 COPY ARG1
f() CALL func ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG6 COPY ARG6
ARG5 COPY ARG5
0 INT_EQUAL ARG7 0
0 INT_EQUAL ARG7 0
f(ARG8) LOAD 433 ARG8
f(ARG8) LOAD 433 ARG8
f(ARG8) LOAD 433 ARG8
f(ARG8) LOAD 433 ARG8
 STORE 433 ARG8 (f(ARG8) + 1)
f(ARG8) LOAD 433 ARG8
 STORE 433 ARG8 (f(ARG8) + 1)
f(ARG8) LOAD 433 ARG8
f(ARG8) LOAD 433 ARG8
(FS_OFFSET + 40) INT_ADD 0 40
4424394 COPY 4424394
 CBRANCH (f(ARG1) INT_EQUAL 2)
0 INT_EQUAL f(ARG1) 2
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f(ARG1) CALL func ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_SLESSEQUAL f(ARG6) (f(ARG8) + 1)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
[(f() + 40)] LOAD 433 (f() + 40)
(f(ARG8) + 1) INT_ADD f(ARG8) 1
 CBRANCH (f(ARG6) INT_SLESSEQUAL (f(ARG8) + 1))
0 INT_EQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
0 COPY 0
 CBRANCH (f(ARG1) INT_EQUAL 3)
0 INT_NOTEQUAL f() 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func f(ARG1) f(ARG8) f(ARG2) f(ARG3) f(ARG4) f(ARG5) 0 4425058
0 INT_NOTEQUAL f() 0
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
(f() + 4294967295) INT_ADD f() 4294967295
1 COPY 1
1 COPY 1
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) multi-valued option specified with ValueDisallowed modifier!
(RSP + -264) PTRSUB RSP -264
(RSP + -88) PTRSUB RSP -88
0 INT_NOTEQUAL f() 0
 BRANCH VZERO
f() CALL func ARG1 (RSP + -56) A_Stack[-0x58]:8 A_Stack[-0x50]:8
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func (RSP + -264)
 CALL func (RSP + -88)
4424757 COPY 4424757
(RSP + -56) PTRSUB RSP -56
multi-valued option specified with ValueDisallowed modifier! COPY multi-valued option specified with ValueDisallowed modifier!
(RSP + -88) PTRSUB RSP -88
not enough values! COPY not enough values!
 BRANCH VZERO
f() CALL func f(ARG1) (RSP + -56) f() f()
 CBRANCH (ARG7 INT_EQUAL 0)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -88)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) not enough values!
 CBRANCH (ARG6 INT_SLESSEQUAL (f(ARG8) + 1))
(RSP + -88) PTRSUB RSP -88
f() CALL func ARG1 (RSP + -56) A_Stack[-0x58]:8 A_Stack[-0x50]:8
 CBRANCH (ARG7 INT_EQUAL 0)
 BRANCH VZERO
requires a value! COPY requires a value!
 CALL func (RSP + -88)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) requires a value!
 RETURN 1
argv && "null check" COPY argv && "null check"
 CALL libcall___assert_fail_thunk argv && "null check" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 371 bool ProvideOption(llvm::cl::Option*, llvm::StringRef, llvm::StringRef, int, const char* const*, int&)
A_Stack[-0x38]:8 COPY A_Stack[-0x38]:8
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
 BRANCH VZERO
(f(ARG8) + 1) INT_ADD f(ARG8) 1
 CALL func (RSP + -56)
4424640 COPY 4424640
bool ProvideOption(llvm::cl::Option*, llvm::StringRef, llvm::StringRef, int, const char* const*, int&) COPY bool ProvideOption(llvm::cl::Option*, llvm::StringRef, llvm::StringRef, int, const char* const*, int&)
A_Stack[-0x30]:8 COPY A_Stack[-0x30]:8
(RSP + -56) PTRSUB RSP -56
(RSP + -264) PTRSUB RSP -264
0 INT_EQUAL f(ARG1) 3
0 INT_EQUAL f() 0
4424431 COPY 4424431
 CBRANCH (f() INT_EQUAL 0)
f() CALL func (RSP + -264)
 RETURN 0 f()
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
4425387 COPY 4425387
f() COPY f()
 RETURN 1
f() COPY f()
 CALL libcall___assert_fail_thunk argv && "null check" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 405 bool ProvideOption(llvm::cl::Option*, llvm::StringRef, llvm::StringRef, int, const char* const*, int&)
bool ProvideOption(llvm::cl::Option*, llvm::StringRef, llvm::StringRef, int, const char* const*, int&) COPY bool ProvideOption(llvm::cl::Option*, llvm::StringRef, llvm::StringRef, int, const char* const*, int&)
 CALL func (RSP + -56)
(f(ARG8) + 1) INT_ADD f(ARG8) 1
f() CALL func f(ARG1) f(ARG8) f(ARG2) f(ARG3) f() f() f() 4425387
argv && "null check" COPY argv && "null check"
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
 CALL func (RSP + -184) (RSP + -264) (RSP + -264)
(RSP + -200) PTRSUB RSP -200
(RSP + -120) PTRSUB RSP -120
does not allow a value! ' COPY does not allow a value! '
(RSP + -152) PTRSUB RSP -152
(RSP + -88) PTRSUB RSP -88
(RSP + -56) PTRSUB RSP -56
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -56) (RSP + -120) (RSP + -88) (RSP + -120)
(RSP + -264) PTRSUB RSP -264
 CALL func (RSP + -152) does not allow a value! '
 BRANCH VZERO
 CALL func (RSP + -88) ' specified.
(RSP + -152) PTRSUB RSP -152
(RSP + -56) PTRSUB RSP -56
f() CALL func ARG1 (RSP + -56) A_Stack[-0xc8]:8 A_Stack[-0xc0]:8
(RSP + -184) PTRSUB RSP -184
(RSP + -120) PTRSUB RSP -120
(RSP + -88) PTRSUB RSP -88
' specified. COPY ' specified.
 CALL func (RSP + -200)
 CALL func (RSP + -120) (RSP + -152) (RSP + -184) (RSP + -152)
0 INT_SLESSEQUAL ARG6 (f(ARG8) + 1)
(f(ARG8) + 1) INT_ADD f(ARG8) 1
f() CALL func (RSP + -264)
4425058 COPY 4425058
(RSP + -264) PTRSUB RSP -264
f() CALL func f(ARG1) f(ARG8) f(ARG2) f(ARG3) f(ARG4) f(ARG5) 0 f()
0 INT_NOTEQUAL f() 0
 BRANCH VZERO
0 COPY 0
1 COPY 1
(f() + 4294967295) INT_ADD f() 4294967295
 BRANCH VZERO
 BRANCH VZERO
1 COPY 1
(ARG1 + 24) INT_ADD ARG1 24
 CALL func ARG1 A_Stack[-0x28]:8 A_Stack[-0x20]:8 ARG2 ARG3 0 0 (RSP + -44)
ARG4 COPY ARG4
 CALL func (RSP + -40) [(ARG1 + 24)] [(ARG1 + 24)]
[40] LOAD 433 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -44) PTRSUB RSP -44
(ARG1 + 24) CAST (ARG1 + 24)
(RSP + -40) PTRSUB RSP -40
(FS_OFFSET + 40) INT_ADD 0 40
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
f() CALL func ARG1
0 INT_ZEXT 0
0 INT_EQUAL (f() / 2147483647) 3
 RETURN 0 (f() & -256)
(f() & -256) INT_OR (f() & -256) 0
(f() & -256) INT_AND f() -256
(f() / 2147483647) SUBPIECE f() 0
f() CALL func ARG1
f() CALL func ARG1
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 RETURN 0 0
 RETURN 0 1
1 COPY 1
0 INT_NOTEQUAL f() 2
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 2)
f() CALL func ARG1
f(ARG1) CALL func ARG1 ARG2 ARG3 ARG2
[ARG1] LOAD 433 ARG1
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL f(ARG1) 4294967295
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CBRANCH (f(ARG1) INT_EQUAL 4294967295)
0 INT_NOTEQUAL 0 [(f() + 40)]
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
([ARG1] + (f(ARG1) * 8)) INT_ADD [ARG1] (f(ARG1) * 8)
 CALL func (RSP + -24) ([ARG1] + (f(ARG1) * 8)) 1 ([ARG1] + (f(ARG1) * 8))
(RSP + -24) PTRSUB RSP -24
 BRANCH VZERO
f(ARG1) INT_SEXT f(ARG1)
(f(ARG1) * 8) INT_MULT f(ARG1) 8
ARG1 COPY ARG1
f() CALL func ARG5 ARG1 ARG2 ARG1
ARG2 COPY ARG2
 STORE 433 ARG3 f()
VZERO CALLIND ARG4 [(f() + 8)]
f() CALL func ARG5
f() CALL func ARG5 (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
f() CALL func ARG5
0 INT_NOTEQUAL f() [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
(ARG2 # ARG1) PIECE ARG2 ARG1
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -56) (RSP + -40) (RSP + -40)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -48) PTRSUB RSP -48
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
f() CALL func (RSP + -56) (RSP + -48) (RSP + -48)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH f()
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
(RSP + -56) PTRSUB RSP -56
~(f()) BOOL_NEGATE f()
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
(f() + 40) CAST (f() + 40)
 CBRANCH ~(f())
(RSP + -40) PTRSUB RSP -40
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
0 INT_EQUAL f() 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
 CBRANCH (f() INT_EQUAL 0)
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
 BRANCH VZERO
f() CALL func (RSP + -72) 0 (f() + -1)
(f() / 2147483647) SUBPIECE f() 0
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) INT_RIGHT f() 64
(f() + -1) INT_ADD f() -1
(RSP + -72) PTRSUB RSP -72
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
f() CALL func (RSP + -72)
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -72) PTRSUB RSP -72
 CBRANCH (VZERO INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
(RSP + -72) PTRSUB RSP -72
[(f() + 8)] LOAD 433 (f() + 8)
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
f() CALL func (RSP + -72)
f() CALL func (RSP + -56)
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
(RSP + -56) PTRSUB RSP -56
(f() + 8) INT_ADD f() 8
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
0 COPY 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
(f() + 8) CAST (f() + 8)
 BRANCH VZERO
 CBRANCH (f() INT_LESS 2)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
 RETURN 1
0 INT_NOTEQUAL VZERO 0
[(f() + 8)] LOAD 433 (f() + 8)
(f() + 8) CAST (f() + 8)
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
f() CALL func (RSP + -56)
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
(RSP + -56) PTRSUB RSP -56
(f() + 8) INT_ADD f() 8
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
0 INT_LESS f() 2
(RSP + -72) PTRSUB RSP -72
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
f() CALL func (RSP + -72)
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
f() CALL func ARG1 ARG2 ARG3 ARG2
f() CALL func ARG1
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func (RSP + -32) (RSP + -24) (RSP + -24)
40 INT_ADD 0 40
(RSP + -24) PTRSUB RSP -24
0 COPY 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -32) PTRSUB RSP -32
0 INT_EQUAL f() 0
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 40
 RETURN 0 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
f(ARG1) LOAD 433 ARG1
f(ARG1) LOAD 433 ARG1
f() CALL func ARG1 0 0
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1 f() -1 f()
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) LOAD 433 ARG1
f() CALL func ARG1 0 -1 0
 STORE 433 ARG1 (f() / 2147483647)
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 (f() / 2147483647)
f() CALL func ARG1 0 f()
(ARG2 + 8) PTRADD ARG2 1 8
 STORE 433 ARG2 (f() / 2147483647)
f(ARG3) LOAD 433 ARG3
 STORE 433 ARG3 (f(ARG3) | f())
f() CALL func ARG4 f(ARG1) [(ARG1 + 8)] f(ARG1)
f() CALL func f(ARG1) [(ARG1 + 8)] (RSP + -88) 4425728 ARG4
f() CALL func f(ARG1) [(ARG1 + 8)] (RSP + -88) 4425696 ARG4
f() CALL func ARG4 f(ARG1) [(ARG1 + 8)] f(ARG1)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 1)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(A_Stack[-0x40]:8 # A_Stack[-0x48]:8) PIECE A_Stack[-0x40]:8 A_Stack[-0x48]:8
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 2)
(f() / 2147483647) SUBPIECE f() 0
llvm::cl::Option* HandlePrefixedOrGroupedOption(llvm::StringRef&, llvm::StringRef&, bool&, const llvm::StringMap<llvm::cl::Option*>&) COPY llvm::cl::Option* HandlePrefixedOrGroupedOption(llvm::StringRef&, llvm::StringRef&, bool&, const llvm::StringMap<llvm::cl::Option*>&)
0 INT_EQUAL f() 0
PGOpt->getValueExpectedFlag() != cl::ValueRequired && "Option can not be cl::Grouping AND cl::ValueRequired!" COPY PGOpt->getValueExpectedFlag() != cl::ValueRequired && "Option can not be cl::Grouping AND cl::ValueRequired!"
(RSP + -92) PTRSUB RSP -92
f() CALL func f() (f() / 2147483647) (f() / 2147483647) f() f() 0 0 (RSP + -92)
(f() / 2147483647) SUBPIECE f() 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
 CALL func (RSP + -56)
(f(ARG3) | f()) INT_OR f() f(ARG3)
(f() / 2147483647) SUBPIECE f() 0
4425696 PTRSUB 0 4425696
(f() / 2147483647) SUBPIECE f() 8
(RSP + -88) PTRSUB RSP -88
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
0 COPY 0
 RETURN 1
 CALL libcall___assert_fail_thunk PGOpt->getValueExpectedFlag() != cl::ValueRequired && "Option can not be cl::Grouping AND cl::ValueRequired!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 495 llvm::cl::Option* HandlePrefixedOrGroupedOption(llvm::StringRef&, llvm::StringRef&, bool&, const llvm::StringMap<llvm::cl::Option*>&)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -56) PTRSUB RSP -56
 CBRANCH f()
(f() / 2147483647) SUBPIECE f() 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() COPY f()
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 2)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() CALL func f()
 STORE 433 (ARG2 + 8) (f() / 4611686014132420609)
(f() / 2147483647) INT_RIGHT f() 64
(f() / 2147483647) INT_RIGHT f() 64
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
(A_Stack[-0x40]:8 # A_Stack[-0x48]:8) PIECE A_Stack[-0x40]:8 A_Stack[-0x48]:8
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
 CBRANCH (f() INT_NOTEQUAL 0)
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
 STORE 433 (ARG1 + 8) (f() / 4611686014132420609)
(f() / 2147483647) SUBPIECE f() 0
0 INT_NOTEQUAL f() 0
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 RETURN 0 f()
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 1
f() CALL func (RSP + -56)
 CALL libcall___assert_fail_thunk OptionsMap.count(Arg) && OptionsMap.find(Arg)->second == PGOpt /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 479 llvm::cl::Option* HandlePrefixedOrGroupedOption(llvm::StringRef&, llvm::StringRef&, bool&, const llvm::StringMap<llvm::cl::Option*>&)
[(f() + 8)] LOAD 433 (f() + 8)
 CBRANCH ([(f() + 8)] INT_EQUAL f())
(A_Stack[-0x40]:8 # A_Stack[-0x48]:8) PIECE A_Stack[-0x40]:8 A_Stack[-0x48]:8
OptionsMap.count(Arg) && OptionsMap.find(Arg)->second == PGOpt COPY OptionsMap.count(Arg) && OptionsMap.find(Arg)->second == PGOpt
0 INT_EQUAL [(f() + 8)] f()
llvm::cl::Option* HandlePrefixedOrGroupedOption(llvm::StringRef&, llvm::StringRef&, bool&, const llvm::StringMap<llvm::cl::Option*>&) COPY llvm::cl::Option* HandlePrefixedOrGroupedOption(llvm::StringRef&, llvm::StringRef&, bool&, const llvm::StringMap<llvm::cl::Option*>&)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
(RSP + -56) PTRSUB RSP -56
f() COPY f()
(f() + 8) CAST (f() + 8)
(f() + 8) INT_ADD f() 8
f() CALL func f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) INT_RIGHT f() 64
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL f() 2
llvm::cl::Option* HandlePrefixedOrGroupedOption(llvm::StringRef&, llvm::StringRef&, bool&, const llvm::StringMap<llvm::cl::Option*>&) COPY llvm::cl::Option* HandlePrefixedOrGroupedOption(llvm::StringRef&, llvm::StringRef&, bool&, const llvm::StringMap<llvm::cl::Option*>&)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
 RETURN 1
 STORE 433 (ARG1 + 8) (f() / 4611686014132420609)
isGrouping(PGOpt) && "Broken getOptionPred!" COPY isGrouping(PGOpt) && "Broken getOptionPred!"
 CALL libcall___assert_fail_thunk isGrouping(PGOpt) && "Broken getOptionPred!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 485 llvm::cl::Option* HandlePrefixedOrGroupedOption(llvm::StringRef&, llvm::StringRef&, bool&, const llvm::StringMap<llvm::cl::Option*>&)
0 INT_EQUAL f() 0
 BRANCH VZERO
0 COPY 0
(f() + 40) INT_ADD f() 40
4425728 PTRSUB 0 4425728
0 COPY 0
(f() + 40) CAST (f() + 40)
0 INT_EQUAL 0 [(f() + 40)]
(A_Stack[-0x40]:8 # A_Stack[-0x48]:8) PIECE A_Stack[-0x40]:8 A_Stack[-0x48]:8
[(f() + 40)] LOAD 433 (f() + 40)
0 COPY 0
(RSP + -88) PTRSUB RSP -88
 CBRANCH (f() INT_EQUAL 0)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (f() INT_EQUAL f())
 BRANCH VZERO
0 COPY 0
1 COPY 1
0 INT_EQUAL f() 2
 BRANCH VZERO
0 COPY 0
f() CALL func f()
0 COPY 0
0 INT_EQUAL f() f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func ARG1
f() CALL func ARG1
0 INT_NOTEQUAL f() 2
 CBRANCH (f() INT_NOTEQUAL 2)
 RETURN 0 1
1 COPY 1
0 COPY 0
 RETURN 0 0
0 INT_NOTEQUAL f() 3
 CBRANCH (f() INT_NOTEQUAL 3)
f() CALL func ARG1
f() CALL func ARG1
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 RETURN 0 0
0 INT_NOTEQUAL f() 3
 CBRANCH (f() INT_NOTEQUAL 3)
 RETURN 0 1
1 COPY 1
0 COPY 0
ARG1 INT_SEXT ARG1
(f() & -256) INT_OR (f() & -256) 0
4620718 COPY 4620718
0 INT_ZEXT 0
 RETURN 0 (f() & -256)
f() CALL libcall_strchr_thunk 4620718 ARG1
f() CAST f()
(f() & -256) INT_AND f() -256
0 INT_NOTEQUAL f() 0
0 INT_EQUAL ARG1 39
0 INT_EQUAL ARG1 34
 CBRANCH (ARG1 INT_EQUAL 34)
 RETURN 0 f()
 CBRANCH (ARG1 INT_EQUAL 39)
0 COPY 0
1 COPY 1
 BRANCH VZERO
ARG1 INT_SEXT ARG1
0 INT_NOTEQUAL f() 0
f() CALL libcall_strchr_thunk 4620725 ARG1
 RETURN 0 (f() & -256)
f() CAST f()
0 INT_ZEXT 0
(f() & -256) INT_OR (f() & -256) 0
4620725 COPY 4620725
(f() & -256) INT_AND f() -256
 CALLIND [[ARG1]] ARG1 ARG2 ARG3 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] CAST [ARG1]
 RETURN 0
[[ARG1]] LOAD 433 [ARG1]
 CALL func ARG1 A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
 CALL func (RSP + -40) ARG2 ARG2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
ARG1 COPY ARG1
ARG2 COPY ARG2
f() CALL func ARG3 f() f()
f() CALL func ARG3 f() f()
0 INT_NOTEQUAL ARG5 0
0 INT_EQUAL ARG5 0
 CALL func ARG4 (RSP + -192) (RSP + -192)
 CALL func ARG4 (RSP + -192) (RSP + -192)
 CALL func ARG4 (RSP + -192) (RSP + -192)
 CALL func ARG4 (RSP + -192) (RSP + -192)
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() [(f() + 40)]
(RSP + -168) PTRSUB RSP -168
(RSP + -168) PTRSUB RSP -168
f() CALL func (RSP + -216)
(FS_OFFSET + 40) INT_ADD 0 40
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -168) PTRSUB RSP -168
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 CALL func (RSP + -168)
 CBRANCH (ARG5 INT_NOTEQUAL 0)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL f())
0 INT_NOTEQUAL f() f()
 CALL func (RSP + -168)
(RSP + -216) PTRSUB RSP -216
0 COPY 0
f() CALL func (RSP + -168)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
 CBRANCH (f() INT_NOTEQUAL 1)
(RSP + -192) PTRSUB RSP -192
(RSP + -168) PTRSUB RSP -168
f() CALL func (RSP + -168)
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH f()
0 COPY 0
(RSP + -192) PTRSUB RSP -192
 CBRANCH f()
(f() + 1) INT_ADD f() 1
 CBRANCH f()
f() INT_ZEXT f()
(f() | (f() & -256)) INT_OR (f() & -256) f()
f() CALL func f()
f() INT_SEXT f()
(RSP + -216) PTRSUB RSP -216
(RSP + -216) PTRSUB RSP -216
(RSP + -168) PTRSUB RSP -168
 BRANCH VZERO
(RSP + -192) PTRSUB RSP -192
 CALL func (RSP + -168) (RSP + -192) (RSP + -192)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
f() CALL func (RSP + -216) f() f()
f() COPY f()
f() CALL func (RSP + -216) (f() + 1) (f() + 1)
(f() & -256) INT_AND f() -256
(f() + 1) INT_ADD f() 1
(f() + 1) INT_ADD f() 1
 CBRANCH (f() INT_EQUAL f())
(RSP + -216) PTRSUB RSP -216
0 INT_EQUAL f() 0
f() CALL func (RSP + -216) f() f()
 CBRANCH (f() INT_EQUAL 0)
(RSP + -216) PTRSUB RSP -216
(f() + 1) INT_ADD f() 1
0 INT_EQUAL f() f()
 CBRANCH (f() INT_EQUAL f())
~(f()) BOOL_NEGATE f()
0 INT_EQUAL f() f()
f() CALL func f()
f() CALL func (RSP + -216) f() (RSP + -216)
f() INT_SEXT f()
 CBRANCH ~(f())
 CBRANCH (f() INT_EQUAL f())
0 INT_EQUAL f() 0
f() CALL func (RSP + -216) f() f()
f() INT_SEXT f()
f() CALL func f()
(RSP + -216) PTRSUB RSP -216
(RSP + -168) PTRSUB RSP -168
(RSP + -192) PTRSUB RSP -192
f() CALL func (RSP + -168)
 CBRANCH (ARG5 INT_EQUAL 0)
0 COPY 0
(RSP + -216) PTRSUB RSP -216
0 INT_NOTEQUAL f() 10
 CBRANCH (f() INT_NOTEQUAL 10)
f() CALL func (RSP + -216) f() f()
0 INT_EQUAL f() 92
 CBRANCH (f() INT_EQUAL 92)
(f() & -256) INT_AND f() -256
(RSP + -216) PTRSUB RSP -216
(f() | (f() & -256)) INT_OR (f() & -256) f()
f() INT_ZEXT f()
 CALL func (RSP + -168) (RSP + -192) (RSP + -192)
(RSP + -216) PTRSUB RSP -216
(RSP + -168) PTRSUB RSP -168
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() CALL func (RSP + -216) f() f()
(RSP + -192) PTRSUB RSP -192
f() CALL func (RSP + -216) f() f()
 CBRANCH (f() INT_EQUAL f())
0 INT_LESS (f() + 1) f()
(f() + 1) INT_ADD f() 1
 CBRANCH ((f() + 1) INT_LESS f())
(RSP + -192) PTRSUB RSP -192
0 COPY 0
(RSP + -168) PTRSUB RSP -168
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
f() CALL func (RSP + -168)
0 INT_NOTEQUAL (f() + 1) f()
 CBRANCH ((f() + 1) INT_NOTEQUAL f())
0 COPY 0
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
1 COPY 1
f() CALL func (RSP + -216) f() f()
 CBRANCH (f() INT_EQUAL 92)
0 COPY 0
(RSP + -216) PTRSUB RSP -216
0 INT_EQUAL f() 92
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
(f() | (f() & -256)) INT_OR (f() & -256) f()
0 INT_NOTEQUAL f() 1
(RSP + -192) PTRSUB RSP -192
f() CALL func (RSP + -216) f() f()
 BRANCH VZERO
 CALL func (RSP + -168)
(f() & -256) INT_AND f() -256
(RSP + -168) PTRSUB RSP -168
f() INT_ZEXT f()
 CALL func (RSP + -168) (RSP + -192) (RSP + -192)
 BRANCH VZERO
(RSP + -168) PTRSUB RSP -168
(RSP + -216) PTRSUB RSP -216
(RSP + -168) PTRSUB RSP -168
f() CALL func (RSP + -168)
 CBRANCH ~(f())
 BRANCH VZERO
0 INT_EQUAL f() f()
(f() + 1) INT_ADD f() 1
~(f()) BOOL_NEGATE f()
(RSP + -216) PTRSUB RSP -216
f() CALL func (RSP + -216) f() f()
0 INT_EQUAL f() f()
 CBRANCH (f() INT_EQUAL f())
0 COPY 0
f() CALL func (RSP + -216) (f() + 1) (f() + 1)
f() INT_SEXT f()
f() CALL func f()
(f() + 1) INT_ADD f() 1
(RSP + -216) PTRSUB RSP -216
0 INT_EQUAL f() 0
 BRANCH VZERO
1 COPY 1
0 INT_NOTEQUAL f() 0
f() CALL func (RSP + -216) (f() + 1) (f() + 1)
f() CALL func f()
f() INT_SEXT f()
(RSP + -216) PTRSUB RSP -216
(f() + 1) INT_ADD f() 1
0 INT_EQUAL f() f()
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
[ARG3] LOAD 433 ARG3
ARG1 CAST ARG1
 CALL libcall_memset_thunk ARG1 [ARG3] (ARG2 - ARG1)
(ARG2 - ARG1) INT_SUB ARG2 ARG1
0 INT_NOTEQUAL (ARG2 - ARG1) 0
 RETURN 0
 CBRANCH ((ARG2 - ARG1) INT_NOTEQUAL 0)
[ARG3] INT_ZEXT [ARG3]
(ARG2 + ARG1) INT_ADD ARG2 ARG1
 CALL func ARG1 (ARG1 + ARG2) ARG3 (ARG1 + ARG2)
(ARG1 + ARG2) INT_ADD ARG1 ARG2
 RETURN 0 (ARG2 + ARG1)
f() CALL func ARG1
 CALL func f() ARG2 ARG3 f()
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 (ARG2 + f()) (ARG2 + f())
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1 (ARG2 + f()) (ARG2 + f())
f() CALL func ARG1
f() CALL func ARG1
(ARG2 + f()) INT_ADD f() ARG2
(ARG2 + f()) INT_ADD f() ARG2
 CALL func f() ARG2 ARG3 f()
0 INT_LESS (f() - f()) ARG2
 CBRANCH ((f() - f()) INT_LESS ARG2)
(f() - f()) CAST (f() - f())
(f() - f()) INT_SUB f() f()
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 ARG2 (RSP + -28) ARG2
ARG2 COPY ARG2
ARG3 COPY ARG3
(RSP + -28) PTRSUB RSP -28
 RETURN 0
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
 CALL func ARG4 (RSP + -30) (RSP + -30)
 CALL func ARG4 f() 92 f()
 CALL func ARG4 (f() / 2) 92 (f() / 2)
 CBRANCH ((f(ARG3) + 1) INT_EQUAL f())
(f() + 1) INT_ADD f() 1
0 INT_EQUAL (f(ARG3) + 1) f()
f(ARG3) COPY f(ARG3)
(f(ARG3) + 1) COPY (f(ARG3) + 1)
ARG3 COPY ARG3
(f(ARG3) + 1) INT_ADD f(ARG3) 1
 CBRANCH f()
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
 CBRANCH ((f(ARG3) + 1) INT_EQUAL f())
0 INT_EQUAL (f(ARG3) + 1) f()
0 INT_EQUAL f() [(f() + 40)]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
0 INT_EQUAL f() 0
0 COPY 0
[(f() + 40)] LOAD 433 (f() + 40)
f() CALL func (RSP + -56)
0 INT_NOTEQUAL f() 34
f() CALL func (RSP + -56) (f(ARG3) + 1) (f(ARG3) + 1)
 CBRANCH (f() INT_NOTEQUAL 34)
0 COPY 0
(RSP + -56) PTRSUB RSP -56
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 f(ARG3)
(RSP + -56) PTRSUB RSP -56
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 92)
f() CALL func (RSP + -56) (f(ARG3) + 1) (f(ARG3) + 1)
0 INT_NOTEQUAL f() 92
1 COPY 1
 BRANCH VZERO
 BRANCH VZERO
1 COPY 1
 CBRANCH ((f() & 1) INT_NOTEQUAL 0)
(RSP + -30) PTRSUB RSP -30
34 COPY 34
(f(ARG3) + 1) COPY (f(ARG3) + 1)
 BRANCH VZERO
f() CAST f()
f() INT_SEXT f()
(f() / 2) INT_SDIV f() 2
(f() / 2) INT_SEXT (f() / 2)
f() CAST f()
(f() & 1) INT_AND f() 1
0 INT_NOTEQUAL (f() & 1) 0
0 INT_NOTEQUAL ARG5 0
0 INT_EQUAL ARG5 0
0 INT_EQUAL ARG5 0
ARG1 COPY ARG1
ARG2 COPY ARG2
f() CALL func ARG3 f() f()
f() CALL func ARG3 f() f()
 CALL func ARG4 (RSP + -192) (RSP + -192)
 CALL func ARG4 (RSP + -192) (RSP + -192)
 CALL func ARG4 (RSP + -192) (RSP + -192)
 CALL func ARG4 (RSP + -192) (RSP + -192)
 CALL func ARG4 (RSP + -192) (RSP + -192)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 COPY 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
0 INT_EQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
0 COPY 0
 CALL func (RSP + -168)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -168) PTRSUB RSP -168
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -168)
f() CALL func (RSP + -216)
(RSP + -168) PTRSUB RSP -168
 CBRANCH (ARG5 INT_NOTEQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -216) PTRSUB RSP -216
 CBRANCH (f() INT_NOTEQUAL f())
f() CALL func (RSP + -168)
0 INT_NOTEQUAL f() f()
(RSP + -192) PTRSUB RSP -192
(RSP + -168) PTRSUB RSP -168
f() CALL func (RSP + -168)
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 2
f() CALL func f()
f() INT_SEXT f()
 CBRANCH (f() INT_EQUAL 2)
(RSP + -216) PTRSUB RSP -216
0 INT_EQUAL f() 0
f() CALL func (RSP + -216) f() f()
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 34)
 BRANCH VZERO
2 COPY 2
(RSP + -216) PTRSUB RSP -216
 CBRANCH (f() INT_EQUAL 92)
0 INT_EQUAL f() 92
f() CALL func (RSP + -216) f() f()
 CBRANCH (f() INT_EQUAL 92)
(RSP + -168) PTRSUB RSP -168
(f() | (f() & -256)) INT_OR (f() & -256) f()
f() INT_ZEXT f()
(f() & -256) INT_AND f() -256
(RSP + -216) PTRSUB RSP -216
(RSP + -168) PTRSUB RSP -168
 BRANCH VZERO
f() CALL func (RSP + -216) f() f()
 BRANCH VZERO
 CALL func (RSP + -168) (RSP + -192) (RSP + -192)
f() CALL func f(ARG1) f(ARG2) f() (RSP + -168)
(RSP + -192) PTRSUB RSP -192
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
(RSP + -192) PTRSUB RSP -192
0 COPY 0
 CBRANCH (f() INT_EQUAL 34)
(RSP + -216) PTRSUB RSP -216
f() CALL func (RSP + -216) f() f()
1 COPY 1
 CBRANCH (f() INT_EQUAL 92)
0 INT_EQUAL f() 92
 BRANCH VZERO
(f() & -256) INT_AND f() -256
(f() | (f() & -256)) INT_OR (f() & -256) f()
f() INT_ZEXT f()
 CALL func (RSP + -168) (RSP + -192) (RSP + -192)
1 COPY 1
1 COPY 1
(RSP + -216) PTRSUB RSP -216
(RSP + -168) PTRSUB RSP -168
(RSP + -168) PTRSUB RSP -168
f() CALL func f(ARG1) f(ARG2) f() (RSP + -168)
f() CALL func (RSP + -216) f() f()
 BRANCH VZERO
 BRANCH VZERO
(RSP + -192) PTRSUB RSP -192
0 INT_EQUAL f() 34
f() CALL func (RSP + -216) f() f()
(RSP + -216) PTRSUB RSP -216
 CBRANCH (f() INT_NOTEQUAL 10)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 10)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH f()
 BRANCH VZERO
(RSP + -192) PTRSUB RSP -192
0 COPY 0
 CBRANCH f()
 BRANCH VZERO
(RSP + -192) PTRSUB RSP -192
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 34
f() CALL func (RSP + -216) f() f()
(RSP + -216) PTRSUB RSP -216
 CBRANCH (ARG5 INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 34)
0 INT_EQUAL f() 92
f() CALL func (RSP + -216) f() f()
 BRANCH VZERO
2 COPY 2
(RSP + -216) PTRSUB RSP -216
f() CALL func (RSP + -216) f() f()
f() CALL func f(ARG1) f(ARG2) f() (RSP + -168)
(RSP + -216) PTRSUB RSP -216
(RSP + -168) PTRSUB RSP -168
(f() | (f() & -256)) INT_OR (f() & -256) f()
f() INT_ZEXT f()
 CALL func (RSP + -168) (RSP + -192) (RSP + -192)
(f() & -256) INT_AND f() -256
 BRANCH VZERO
 BRANCH VZERO
(RSP + -168) PTRSUB RSP -168
(RSP + -192) PTRSUB RSP -192
0 INT_EQUAL f() 0
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (ARG5 INT_EQUAL 0)
(RSP + -216) PTRSUB RSP -216
0 INT_NOTEQUAL f() 10
f() CALL func (RSP + -216) f() f()
(RSP + -216) PTRSUB RSP -216
0 INT_NOTEQUAL f() 10
f() CALL func (RSP + -216) f() f()
0 INT_EQUAL f() 0
(RSP + -216) PTRSUB RSP -216
f() CALL func (RSP + -216) f() f()
f() CALL func f()
f() INT_SEXT f()
0 INT_EQUAL f() 1
0 COPY 0
(RSP + -192) PTRSUB RSP -192
0 INT_EQUAL f() 34
 CALL func (RSP + -168)
f() CALL func (RSP + -168)
(RSP + -216) PTRSUB RSP -216
f() CALL func (RSP + -216) f() f()
(RSP + -168) PTRSUB RSP -168
(RSP + -168) PTRSUB RSP -168
ARG1 COPY ARG1
ARG2 COPY ARG2
0 INT_LESS 2 f()
 CBRANCH (2 INT_LESS f())
(RSP + -24) PTRSUB RSP -24
f() CALL func (RSP + -24)
 CBRANCH ([f()] INT_EQUAL 191)
 RETURN 0 0
0 COPY 0
1 COPY 1
 RETURN 0 1
 CBRANCH ([f()] INT_EQUAL 187)
(RSP + -24) PTRSUB RSP -24
0 INT_EQUAL [f()] 191
f() CALL func (RSP + -24) 2
[f()] LOAD 433 f()
f() CAST f()
f() CALL func (RSP + -24) 0
[f()] LOAD 433 f()
f() CAST f()
(RSP + -24) PTRSUB RSP -24
0 INT_EQUAL [f()] 239
 CBRANCH ([f()] INT_EQUAL 239)
0 INT_EQUAL [f()] 187
f() CAST f()
(RSP + -24) PTRSUB RSP -24
f() CALL func (RSP + -24) 1
[f()] LOAD 433 f()
 CALL func ARG1
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
 RETURN 0 [(ARG1 + 16)]
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
(ARG3 - ARG2) INT_SUB ARG3 ARG2
 RETURN 0
 STORE 433 (ARG1 + 8) (ARG3 - ARG2)
ARG1 COPY ARG1
ARG2 COPY ARG2
0 INT_LESS 1 f()
 CBRANCH (1 INT_LESS f())
f() CALL func (RSP + -24)
(RSP + -24) PTRSUB RSP -24
 CBRANCH ([f()] INT_EQUAL 254)
 RETURN 0 1
f() CAST f()
(RSP + -24) PTRSUB RSP -24
1 COPY 1
f() CALL func (RSP + -24) 0
 RETURN 0 0
0 COPY 0
0 INT_EQUAL [f()] 254
[f()] LOAD 433 f()
 CBRANCH ([f()] INT_EQUAL 254)
0 INT_EQUAL [f()] 255
f() CAST f()
 CBRANCH ([f()] INT_EQUAL 255)
[f()] LOAD 433 f()
(RSP + -24) PTRSUB RSP -24
f() CALL func (RSP + -24) 0
f() CALL func (RSP + -24) 1
f() CAST f()
(RSP + -24) PTRSUB RSP -24
0 INT_EQUAL [f()] 254
[f()] LOAD 433 f()
 CBRANCH ([f()] INT_EQUAL 255)
[f()] LOAD 433 f()
f() CALL func (RSP + -24) 1
f() CAST f()
(RSP + -24) PTRSUB RSP -24
0 INT_EQUAL [f()] 255
0 INT_EQUAL ARG5 0
0 INT_EQUAL ARG5 0
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 f(ARG1)
0 INT_LESSEQUAL ARG2 (f(ARG1) + 2)
0 INT_LESSEQUAL ARG2 f(ARG1)
 STORE 433 ARG3 f(ARG3)
[ARG3] LOAD 433 ARG3
0 INT_LESS ARG4 (f(ARG3) + f())
 CBRANCH (ARG2 INT_LESSEQUAL f(ARG1))
 RETURN 0 f()
0 COPY 0
 BRANCH VZERO
f() COPY f()
f(ARG1) COPY f(ARG1)
(f(ARG1) + 2) PTRADD f(ARG1) 1 2
0 INT_LESS [f(ARG1)] 55296
[f(ARG1)] INT_ZEXT [f(ARG1)]
[f(ARG1)] LOAD 433 f(ARG1)
 CBRANCH ([f(ARG1)] INT_LESS 55296)
 CBRANCH ([(f(ARG1) + 2)] INT_LESS 56320)
(f(ARG1) + 2) COPY (f(ARG1) + 2)
0 INT_LESS 57343 [(f(ARG1) + 2)]
 CBRANCH (ARG5 INT_EQUAL 0)
 CBRANCH (57343 INT_LESS [(f(ARG1) + 2)])
 CBRANCH (f(ARG1) INT_LESS 128)
0 INT_LESS f(ARG1) 2048
 BRANCH VZERO
1 COPY 1
 CBRANCH (f(ARG1) INT_LESS 2048)
 CBRANCH (f() INT_NOTEQUAL 3)
(f(ARG3) + -1) PTRADD f(ARG3) -1 1
(f() + 4638744) PTRADD 4638744 f() 1
f() INT_ZEXT f()
f() INT_SEXT f()
4638744 PTRSUB 0 4638744
([(f() + 4638744)] | (f(ARG1) / 2147483647)) INT_OR (f(ARG1) / 2147483647) [(f() + 4638744)]
(f(ARG3) + -1) PTRADD f(ARG3) -1 1
 STORE 433 (f(ARG3) + -1) ([(f() + 4638744)] | (f(ARG1) / 2147483647))
[(f() + 4638744)] LOAD 433 (f() + 4638744)
f() CAST f()
(191 & (f(ARG1) / 2147483647)) INT_AND (f(ARG1) / 2147483647) 191
(191 & (f(ARG1) / 2147483647)) INT_AND (f(ARG1) / 2147483647) 191
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(f(ARG3) + -1) PTRADD f(ARG3) -1 1
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(f(ARG1) / 64) INT_RIGHT f(ARG1) 6
(f(ARG1) / 64) INT_RIGHT f(ARG1) 6
(128 | (191 & (f(ARG1) / 2147483647))) INT_OR (191 & (f(ARG1) / 2147483647)) 128
 CBRANCH (f() INT_NOTEQUAL 4)
(128 | (191 & (f(ARG1) / 2147483647))) INT_OR (191 & (f(ARG1) / 2147483647)) 128
0 INT_NOTEQUAL f() 4
 STORE 433 (f(ARG3) + -1) (128 | (191 & (f(ARG1) / 2147483647)))
 STORE 433 (f(ARG3) + -1) (128 | (191 & (f(ARG1) / 2147483647)))
 CBRANCH (56319 INT_LESS [f(ARG1)])
 CBRANCH (ARG2 INT_LESSEQUAL (f(ARG1) + 2))
 CBRANCH (ARG5 INT_EQUAL 0)
(f(ARG1) + 2) COPY (f(ARG1) + 2)
 CBRANCH (2 INT_LESS f())
0 INT_NOTEQUAL f() 3
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
(([(f(ARG1) + 2)] + (([f(ARG1)] + 55296) * 1024)) + 9216) INT_ADD ([(f(ARG1) + 2)] + (([f(ARG1)] + 55296) * 1024)) 9216
([(f(ARG1) + 2)] + (([f(ARG1)] + 55296) * 1024)) INT_ADD [(f(ARG1) + 2)] (([f(ARG1)] + 55296) * 1024)
([f(ARG1)] + 55296) INT_SUB [f(ARG1)] 55296
(f(ARG1) + 4) PTRADD f(ARG1) 2 2
(([f(ARG1)] + 55296) * 1024) INT_MULT ([f(ARG1)] + 55296) 1024
(f(ARG3) + f()) PTRADD f(ARG3) f() 1
(f(ARG1) + 4) COPY (f(ARG1) + 4)
 BRANCH VZERO
f() INT_ZEXT f()
 CBRANCH (ARG4 INT_LESS (f(ARG3) + f()))
0 INT_LESS f(ARG1) 128
0 INT_LESS 56319 [f(ARG1)]
 CBRANCH (f(ARG1) INT_LESS 1114112)
3 COPY 3
4 COPY 4
65533 COPY 65533
 BRANCH VZERO
[(f(ARG1) + 2)] INT_ZEXT [(f(ARG1) + 2)]
1 COPY 1
 BRANCH VZERO
0 INT_LESS [(f(ARG1) + 2)] 56320
[(f(ARG1) + 2)] LOAD 433 (f(ARG1) + 2)
(191 & (f(ARG1) / 2147483647)) INT_AND (f(ARG1) / 2147483647) 191
(128 | (191 & (f(ARG1) / 2147483647))) INT_OR (191 & (f(ARG1) / 2147483647)) 128
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
 STORE 433 ((f(ARG3) + f()) + -1) (128 | (191 & (f(ARG1) / 2147483647)))
((f(ARG3) + f()) + -1) PTRADD (f(ARG3) + f()) -1 1
(f(ARG1) / 64) INT_RIGHT f(ARG1) 6
0 INT_LESS f(ARG1) 65536
 BRANCH VZERO
2 COPY 2
 CBRANCH (f(ARG1) INT_LESS 65536)
 CBRANCH (f() INT_EQUAL 2)
0 INT_LESS 2 f()
0 INT_LESS f(ARG1) 1114112
 BRANCH VZERO
3 COPY 3
(f(ARG1) + 2) COPY (f(ARG1) + 2)
(f(ARG1) + 2) COPY (f(ARG1) + 2)
((f(ARG3) + f()) + (~(f()) + 1)) PTRADD (f(ARG3) + f()) (~(f()) + 1) 1
(f(ARG3) + f()) PTRADD f(ARG3) f() 1
f() INT_ZEXT f()
 CBRANCH (56319 INT_LESS [f(ARG1)])
0 INT_LESS 56319 [f(ARG1)]
f() INT_ZEXT f()
3 COPY 3
 BRANCH VZERO
0 INT_EQUAL f() 2
 BRANCH VZERO
(~(f()) + 1) INT_2COMP f()
0 INT_LESS [f(ARG1)] 57344
 CBRANCH ([f(ARG1)] INT_LESS 57344)
2 COPY 2
3 COPY 3
 BRANCH VZERO
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL libcall_operator.delete_thunk ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
0 INT_NOTEQUAL ARG2 0
 CBRANCH (ARG2 INT_NOTEQUAL 0)
 RETURN 0
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 2) [ARG1]
[ARG1] LOAD 433 ARG1
 CALL func ARG1
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(([(ARG1 + 16)] - [ARG1]) / 2) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 1
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
 RETURN 0
[ARG1] LOAD 433 ARG1
 CALL func ARG1
f(ARG1) CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -24) PTRSUB RSP -24
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
[ARG1] LOAD 433 ARG1
(ARG2 * 2) INT_MULT ARG2 2
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -32) PTRSUB RSP -32
(RSP + -24) PTRSUB RSP -24
[40] LOAD 433 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
([ARG1] + (ARG2 * 2)) INT_ADD [ARG1] (ARG2 * 2)
(FS_OFFSET + 40) INT_ADD 0 40
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
40 INT_ADD 0 40
 CALL func (RSP + -24) (RSP + -32) (RSP + -32)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
([f(ARG1)] - [f(ARG2)]) INT_SUB [f(ARG1)] [f(ARG2)]
f(ARG2) CAST f(ARG2)
f(ARG1) CAST f(ARG1)
 RETURN 0 (([f(ARG1)] - [f(ARG2)]) / 2)
[f(ARG2)] LOAD 433 f(ARG2)
(([f(ARG1)] - [f(ARG2)]) / 2) INT_SRIGHT ([f(ARG1)] - [f(ARG2)]) 1
[f(ARG1)] LOAD 433 f(ARG1)
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
[ARG1] LOAD 433 ARG1
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -24) PTRSUB RSP -24
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -32) PTRSUB RSP -32
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
 CALL func (RSP + -24) (RSP + -32) (RSP + -32)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 [f(RSP)]
f(RSP) CAST f(RSP)
[f(RSP)] LOAD 433 f(RSP)
[f(RSP)] COPY [f(RSP)]
(RSP + -16) PTRSUB RSP -16
f(RSP) CALL func (RSP + -16)
 CALL func ARG1
 RETURN 0
ARG1 CAST ARG1
 CALL libcall_memmove_thunk ARG3 ARG1 (((ARG2 - ARG1) / 2) * 2)
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG3 CAST ARG3
(ARG3 + (((ARG2 - ARG1) / 2) * 2)) CAST (ARG3 + (((ARG2 - ARG1) / 2) * 2))
(ARG3 + (((ARG2 - ARG1) / 2) * 2)) INT_ADD ARG3 (((ARG2 - ARG1) / 2) * 2)
((ARG2 - ARG1) / 2) INT_SRIGHT (ARG2 - ARG1) 1
0 INT_NOTEQUAL ((ARG2 - ARG1) / 2) 0
(((ARG2 - ARG1) / 2) * 2) INT_MULT ((ARG2 - ARG1) / 2) 2
 RETURN 0 (ARG3 + (((ARG2 - ARG1) / 2) * 2))
 CBRANCH (((ARG2 - ARG1) / 2) INT_NOTEQUAL 0)
(((ARG2 - ARG1) / 2) * 2) INT_MULT ((ARG2 - ARG1) / 2) 2
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -40) (RSP + -48) (RSP + -48)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
A_Stack[-0x28]:8 COPY A_Stack[-0x28]:8
f() CALL func f() f() f()
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -48) PTRSUB RSP -48
(RSP + -40) PTRSUB RSP -40
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x28]:8
 RETURN 1
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
 RETURN 0
 STORE 433 ARG1 ((ARG2 * 2) + [ARG1])
[ARG1] LOAD 433 ARG1
(ARG2 * 2) INT_MULT ARG2 2
 RETURN 0
((ARG2 * 2) + [ARG1]) INT_ADD (ARG2 * 2) [ARG1]
 CALL func ARG1
 CALL func ARG1 ARG2 ARG2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
40 INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
 RETURN 0 ARG1
9223372036854775807 COPY 9223372036854775807
 RETURN 0 9223372036854775807
 CALL func ARG1
 RETURN 0
f(ARG1) CALL func ARG1
 CALL func f(ARG1)
 RETURN 0
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
(([(ARG1 + 8)] - [ARG1]) / 2) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 1
 RETURN 0 (([(ARG1 + 8)] - [ARG1]) / 2)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
ARG1 COPY ARG1
f() CALL func ARG1
ARG2 COPY ARG2
 CALL libcall___throw_length_error_thunk ARG3
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() - f()) CAST (f() - f())
(FS_OFFSET + 40) INT_ADD 0 40
f(RSP) CAST f(RSP)
f() CALL func f(ARG1)
f() CALL func ARG1
f() CALL func f(ARG1)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(RSP + -48) PTRSUB RSP -48
 CBRANCH ((f() - f()) INT_LESS ARG2)
(RSP + -72) PTRSUB RSP -72
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() [(f() + 40)]
([f(RSP)] + f()) INT_ADD [f(RSP)] f()
0 INT_LESS (f() - f()) ARG2
[(f() + 40)] LOAD 433 (f() + 40)
f() CALL func f(ARG1)
0 INT_LESS ([f(RSP)] + f()) f()
(f() - f()) INT_SUB f() f()
f(RSP) CALL func (RSP + -48) (RSP + -72) (RSP + -72)
(f() + 40) CAST (f() + 40)
 CBRANCH (([f(RSP)] + f()) INT_LESS f())
[f(RSP)] LOAD 433 f(RSP)
f() CALL func f(ARG1)
 CBRANCH (f() INT_LESS ([f(RSP)] + f()))
([f(RSP)] + f()) COPY ([f(RSP)] + f())
 BRANCH VZERO
f() COPY f()
f() CALL func f(ARG1)
0 INT_LESS f() ([f(RSP)] + f())
 RETURN 0 f(RSP)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
(([f(ARG1)] - [f(ARG2)]) / 2) INT_SRIGHT ([f(ARG1)] - [f(ARG2)]) 1
[f(ARG1)] LOAD 433 f(ARG1)
f(ARG1) CAST f(ARG1)
([f(ARG1)] - [f(ARG2)]) INT_SUB [f(ARG1)] [f(ARG2)]
f(ARG2) CAST f(ARG2)
[f(ARG2)] LOAD 433 f(ARG2)
 RETURN 0 (([f(ARG1)] - [f(ARG2)]) / 2)
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
ARG1 COPY ARG1
 CALL func (RSP + -16)
 RETURN 0
(RSP + -16) PTRSUB RSP -16
 CALL func ARG1
 RETURN 0
ARG1 CAST ARG1
 CALL libcall_memmove_thunk ARG3 ARG1 (((ARG2 - ARG1) / 2) * 2)
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG3 CAST ARG3
(ARG3 + (((ARG2 - ARG1) / 2) * 2)) CAST (ARG3 + (((ARG2 - ARG1) / 2) * 2))
(ARG3 + (((ARG2 - ARG1) / 2) * 2)) INT_ADD ARG3 (((ARG2 - ARG1) / 2) * 2)
((ARG2 - ARG1) / 2) INT_SRIGHT (ARG2 - ARG1) 1
0 INT_NOTEQUAL ((ARG2 - ARG1) / 2) 0
(((ARG2 - ARG1) / 2) * 2) INT_MULT ((ARG2 - ARG1) / 2) 2
 RETURN 0 (ARG3 + (((ARG2 - ARG1) / 2) * 2))
 CBRANCH (((ARG2 - ARG1) / 2) INT_NOTEQUAL 0)
(((ARG2 - ARG1) / 2) * 2) INT_MULT ((ARG2 - ARG1) / 2) 2
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 RETURN 0
 CALL func f() f() f()
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG4
 RETURN 0
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -24) PTRSUB RSP -24
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 ARG4
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 CALL func f() f() f()
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG4
 RETURN 0
ARG1 CAST ARG1
 CALL libcall_memmove_thunk ((((ARG2 - ARG1) / 2) * -2) + ARG3) ARG1 (((ARG2 - ARG1) / 2) * 2)
(ARG2 - ARG1) INT_SUB ARG2 ARG1
((((ARG2 - ARG1) / 2) * -2) + ARG3) INT_ADD (((ARG2 - ARG1) / 2) * -2) ARG3
(ARG3 + (((ARG2 - ARG1) / 2) * -2)) INT_ADD ARG3 (((ARG2 - ARG1) / 2) * -2)
 CBRANCH (((ARG2 - ARG1) / 2) INT_NOTEQUAL 0)
((ARG2 - ARG1) / 2) INT_SRIGHT (ARG2 - ARG1) 1
 RETURN 0 (ARG3 + (((ARG2 - ARG1) / 2) * -2))
(((ARG2 - ARG1) / 2) * -2) INT_MULT ((ARG2 - ARG1) / 2) -2
0 INT_NOTEQUAL ((ARG2 - ARG1) / 2) 0
(((ARG2 - ARG1) / 2) * -2) INT_MULT ((ARG2 - ARG1) / 2) -2
(((ARG2 - ARG1) / 2) * 2) INT_MULT ((ARG2 - ARG1) / 2) 2
((((ARG2 - ARG1) / 2) * -2) + ARG3) CAST ((((ARG2 - ARG1) / 2) * -2) + ARG3)
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 CALL func f() f() f()
 RETURN 0
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
f() CALL func ARG1
(ARG2 * 2) INT_MULT ARG2 2
0 INT_LESS f() ARG2
 CBRANCH (f() INT_LESS ARG2)
 CALL libcall_operator.new_thunk (ARG2 * 2)
 RETURN 0
 CALL libcall___throw_bad_alloc_thunk
 CALL func ARG1 ARG2 0 ARG2
 RETURN 0
f() CALL func ARG1 ARG2 ARG2
0 INT_EQUAL ARG2 0
 CBRANCH (ARG2 INT_EQUAL 0)
 RETURN 0 f()
 BRANCH VZERO
0 COPY 0
 CALL func (RSP + -24) ARG1 ARG1
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -24) PTRSUB RSP -24
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 ARG4
 RETURN 0
(ARG2 - ARG1) INT_SUB ARG2 ARG1
((ARG2 - ARG1) / 2) INT_SRIGHT (ARG2 - ARG1) 1
 RETURN 0 ((ARG2 - ARG1) / 2)
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
[40] LOAD 433 40
40 INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (RSP + -48)
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -48) PTRSUB RSP -48
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 8) INT_ADD ARG1 8
(RSP + -24) PTRSUB RSP -24
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
 CALL func (RSP + -24) (ARG1 + 8) (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
ARG1 COPY ARG1
ARG2 COPY ARG2
f() CALL func ARG3 ARG4 ARG4
 CALL func ARG3 ARG4 ARG2 ARG4
f() CALL func ARG3 ARG4 f() f(ARG1)
ARG3 COPY ARG3
 CALL func ARG3 ARG3 ARG2 ARG3
0 INT_NOTEQUAL ARG3 ARG4
 CALL func ARG3 ARG4 [(ARG1 + 8)] f(ARG1)
 CBRANCH (ARG3 INT_NOTEQUAL ARG4)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CBRANCH ((([(ARG1 + 16)] - [(ARG1 + 8)]) / 2) INT_LESS f())
f() CALL func [f(RSP)] [(ARG1 + 8)] f() f(ARG1)
(RSP + -88) PTRSUB RSP -88
 STORE 433 (ARG1 + 16) ((f(RSP) * 2) + f())
(RSP + -104) PTRSUB RSP -104
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
f(ARG1) CALL func ARG1
f() CALL func ARG1 f(RSP) f(RSP)
f() COPY f()
[f(RSP)] LOAD 433 f(RSP)
((f(RSP) * 2) + f()) INT_ADD (f(RSP) * 2) f()
 STORE 433 ARG1 f()
f(ARG1) CALL func ARG1
f(RSP) CALL func (RSP + -104)
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
(ARG1 + 16) PTRADD ARG1 2 8
f(RSP) CAST f(RSP)
(RSP + -104) PTRSUB RSP -104
[ARG1] LOAD 433 ARG1
0 COPY 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(RSP + -104) PTRSUB RSP -104
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f(ARG1) CALL func ARG1
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 2) [ARG1]
f(RSP) CALL func (RSP + -104)
(ARG1 + 8) PTRADD ARG1 1 8
0 INT_LESS f() f()
f() CALL func [ARG1] [f(RSP)] f() f(ARG1)
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[f(RSP)] LOAD 433 f(RSP)
f() CALL func (RSP + -88) (RSP + -104) (RSP + -104)
(([(ARG1 + 16)] - [ARG1]) / 2) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 1
f(RSP) CALL func ARG1 f() 0 f()
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) CALL func ARG1
 CBRANCH (f() INT_LESS f())
 STORE 433 (ARG1 + 8) f()
[ARG1] LOAD 433 ARG1
(f(RSP) * 2) INT_MULT f(RSP) 2
f(RSP) CAST f(RSP)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[ARG1] LOAD 433 ARG1
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) PTRADD ARG1 1 8
(f() * -2) INT_MULT f() -2
f(RSP) CAST f(RSP)
(ARG1 + 8) PTRADD ARG1 1 8
 BRANCH VZERO
[f(RSP)] LOAD 433 f(RSP)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f(RSP) CALL func (RSP + -104)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() - f()) INT_SUB f() f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(RSP + -104) PTRSUB RSP -104
(f() * 2) INT_MULT f() 2
([(ARG1 + 8)] + (f() * -2)) INT_ADD [(ARG1 + 8)] (f() * -2)
 CALL func ([(ARG1 + 8)] + (f() * -2)) [(ARG1 + 8)] [(ARG1 + 8)] f(ARG1)
[f(RSP)] LOAD 433 f(RSP)
(ARG1 + 8) PTRADD ARG1 1 8
(f() * 2) INT_MULT f() 2
f(RSP) CALL func (RSP + -104)
(f() * -2) INT_MULT f() -2
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func [f(RSP)] [(ARG1 + 8)] [(ARG1 + 8)] f(ARG1)
([(ARG1 + 8)] + (f() * -2)) INT_ADD (f() * -2) [(ARG1 + 8)]
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f(ARG1) CALL func ARG1
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + (f() * 2))
([(ARG1 + 8)] + (f() * 2)) INT_ADD (f() * 2) [(ARG1 + 8)]
f(ARG1) CALL func ARG1
([(ARG1 + 8)] + ((f() - f()) * 2)) INT_ADD [(ARG1 + 8)] ((f() - f()) * 2)
 CALL func [f(RSP)] ([(ARG1 + 8)] + (f() * -2)) [(ARG1 + 8)]
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + ((f() - f()) * 2))
f(RSP) CAST f(RSP)
((f() - f()) * 2) INT_MULT (f() - f()) 2
 CALL func (RSP + -88) f() f()
(RSP + -88) PTRSUB RSP -88
(ARG1 + 8) PTRADD ARG1 1 8
(RSP + -104) PTRSUB RSP -104
 BRANCH VZERO
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + (f() * 2))
(ARG1 + 8) PTRADD ARG1 1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + (f() * 2)) INT_ADD (f() * 2) [(ARG1 + 8)]
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0
(([(ARG1 + 16)] - [(ARG1 + 8)]) / 2) CAST (([(ARG1 + 16)] - [(ARG1 + 8)]) / 2)
(([(ARG1 + 16)] - [(ARG1 + 8)]) / 2) INT_SRIGHT ([(ARG1 + 16)] - [(ARG1 + 8)]) 1
0 INT_LESS (([(ARG1 + 16)] - [(ARG1 + 8)]) / 2) f()
([(ARG1 + 16)] - [(ARG1 + 8)]) INT_SUB [(ARG1 + 16)] [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5 ARG6 ARG5
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
40 INT_ADD 0 40
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
f() CALL func ARG1
ARG2 COPY ARG2
 CALL func ARG1 f() ARG3 ARG4
 CALL func (RSP + -48) f() f()
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -48) PTRSUB RSP -48
f() CALL func ARG1
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func ARG1
40 INT_ADD 0 40
(RSP + -48) PTRSUB RSP -48
(RSP + -48) PTRSUB RSP -48
f() CALL func (RSP + -72) (RSP + -48) (RSP + -48)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -72) PTRSUB RSP -72
f() CALL func (RSP + -48) f() f()
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 40
40 CAST 40
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
[ARG1] LOAD 433 ARG1
(ARG2 * 2) INT_MULT ARG2 2
([ARG1] + (ARG2 * 2)) INT_ADD [ARG1] (ARG2 * 2)
 RETURN 0 ([ARG1] + (ARG2 * 2))
 RETURN 0
 CALL func ARG1
 RETURN 0
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 (ARG1 + 8) 0
 STORE 433 (ARG1 + 16) 0
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] & -256) INT_AND [(ARG1 + 8)] -256
([(ARG1 + 8)] & -256) INT_OR ([(ARG1 + 8)] & -256) 0
0 INT_EQUAL [(ARG1 + 8)] 0
 RETURN 0 ([(ARG1 + 8)] & -256)
0 INT_ZEXT 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
 STORE 433 ARG1 [f(ARG2)]
f(ARG2) CALL func ARG2
f(ARG2) CAST f(ARG2)
[f(ARG2)] LOAD 433 f(ARG2)
 RETURN 0
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0 ([(ARG1 + 8)] + [ARG1])
([(ARG1 + 8)] + [ARG1]) INT_ADD [(ARG1 + 8)] [ARG1]
ARG1 COPY ARG1
f() CALL libcall_operator[]_thunk ARG3
(ARG3 / 2147483647) SUBPIECE ARG3 0
 CALL libcall_resize_thunk ARG3
 CALL libcall_resize_thunk ARG3
 CALL libcall_operator[]_thunk ARG3
ARG2 COPY ARG2
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_empty_thunk
0 INT_EQUAL f() 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 2)
[(f() + 40)] LOAD 433 (f() + 40)
 CALL libcall___assert_fail_thunk CR != targetExhausted /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp 120 0
(f() + 40) CAST (f() + 40)
0 INT_EQUAL f() 0
f() COPY f()
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
(f() + 40) INT_ADD f() 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
CR != targetExhausted COPY CR != targetExhausted
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp
0 INT_NOTEQUAL 0 [(f() + 40)]
(RSP + -56) PTRSUB RSP -56
 RETURN 1
 CALL func (RSP + -56)
 CBRANCH ([f()] INT_EQUAL 65279)
(f() + 2) PTRADD f() 1 2
 CBRANCH (f() INT_NOTEQUAL f())
0 INT_NOTEQUAL f() f()
[f()] LOAD 433 f()
f() CALL func (RSP + -56) f() f()
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -56) f() f()
(RSP + -56) PTRSUB RSP -56
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
 STORE 433 f() f()
f() CAST f()
f() CALL func [f()]
f() CAST f()
 RETURN 1
(RSP + -136) PTRSUB RSP -136
(f() & 1) INT_AND f() 1
 CALL libcall___assert_fail_thunk Out.empty() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp 85 0
0 INT_EQUAL (f() & 1) 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp
f() CALL func (RSP + -136)
0 COPY 0
 CBRANCH ((f() & 1) INT_EQUAL 0)
Out.empty() COPY Out.empty()
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 CALL libcall_push_back_thunk (ARG3 / 2147483647)
 CALL libcall_clear_thunk
 CALL libcall_pop_back_thunk
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
[f()] LOAD 433 f()
(f() + f()) INT_ADD f() f()
1 COPY 1
0 INT_EQUAL f() 2
 CALL func (RSP + -56)
f() CAST f()
(RSP + -56) PTRSUB RSP -56
(RSP + -96) PTRSUB RSP -96
 BRANCH VZERO
(RSP + -80) PTRSUB RSP -80
0 INT_EQUAL [f()] 65279
f() COPY f()
f() CALL func (RSP + -96) f() (RSP + -80) (f() + f()) 0
(RSP + -136) PTRSUB RSP -136
f() CALL libcall_size_thunk
f() CALL func (RSP + -136)
[f()] LOAD 433 f()
0 INT_EQUAL [f()] 65534
 CALL func (RSP + -136)
 CBRANCH ([f()] INT_EQUAL 65534)
(RSP + -136) PTRSUB RSP -136
(RSP + -136) PTRSUB RSP -136
f() CALL func (RSP + -136)
f() COPY f()
0 COPY 0
 BRANCH VZERO
(RSP + -136) PTRSUB RSP -136
f() CALL func (RSP + -136)
0 INT_EQUAL f() 0
 CALL func (RSP + -56) A_Stack[-0x50]:8 f() f()
f() CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
0 COPY 0
 CALL func (RSP + -80) (RSP + -88) (RSP + -88)
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -56) (f() + -1) (f() + -1)
(f() + 2) INT_ADD f() 2
f() CAST f()
(f() + -1) INT_ADD f() -1
(RSP + -88) PTRSUB RSP -88
f() CALL func (RSP + -56) 0
(RSP + -80) PTRSUB RSP -80
(RSP + -56) PTRSUB RSP -56
 CALLIND ARG3 f() f() ARG2 ARG4 ARG5
 CALL func (RSP + -136) ARG1 ARG1
(f() + 40) CAST (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -136) PTRSUB RSP -136
f() CALL func (RSP + -104)
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
(RSP + -136) PTRSUB RSP -136
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -104)
f() COPY f()
(RSP + -104) PTRSUB RSP -104
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -104) PTRSUB RSP -104
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_NOTEQUAL 0 [(f() + 40)]
 CALL func (RSP + -104) (RSP + -136) -1 1 0
(f() + 40) INT_ADD f() 40
(RSP + -104) PTRSUB RSP -104
f() CALL func f()
(RSP + -152) PTRSUB RSP -152
 CALL libcall_~basic_string_thunk (RSP + -72)
 CALL func (RSP + -168) f() f() f()
f() CALL func (RSP + -104)
(RSP + -72) PTRSUB RSP -72
0 INT_EQUAL f() 0
f() CALL func f()
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
 CALL func (RSP + -152) f() f() f()
0 COPY 0
f() CALL func f()
f() CALL func f()
f() CALL func f()
(RSP + -168) PTRSUB RSP -168
(RSP + -104) PTRSUB RSP -104
f() CALL func A_Stack[-0x98]:8 A_Stack[-0x90]:8 A_Stack[-0x98]:8
 CALL libcall_basic_string_thunk
 CBRANCH (f() INT_EQUAL 1)
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
0 COPY 0
1 COPY 1
 CALL func (RSP + -136) (RSP + -72) (RSP + -72)
A_Stack[-0x88]:8 COPY A_Stack[-0x88]:8
A_Stack[-0x80]:8 COPY A_Stack[-0x80]:8
(RSP + -136) PTRSUB RSP -136
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
f() CALL func A_Stack[-0x98]:8 A_Stack[-0x90]:8 (RSP + -72) A_Stack[-0x98]:8
0 INT_EQUAL f() 1
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func A_Stack[-0x98]:8 A_Stack[-0x90]:8 A_Stack[-0x98]:8
(f() + -3) INT_ADD f() -3
(RSP + -136) PTRSUB RSP -136
A_Stack[-0x80]:8 COPY A_Stack[-0x80]:8
f() CALL func (RSP + -152)
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -136) (f() + 3) (f() + -3) (f() + 3)
f() CALL func (RSP + -152)
A_Stack[-0x88]:8 COPY A_Stack[-0x88]:8
(f() + 3) INT_ADD f() 3
(RSP + -152) PTRSUB RSP -152
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 RETURN 1
 CALL func ARG1
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
 RETURN 0 [(ARG1 + 16)]
f() CALL func ARG1
f() CALL func ARG1
 RETURN 0 ((f() - f()) / 8)
(f() - f()) INT_SUB f() f()
((f() - f()) / 8) INT_SRIGHT (f() - f()) 3
 CALL func ARG1 ARG2 ARG2
f() CALL func ARG1
0 INT_LESS f() ARG2
 RETURN 0
 CBRANCH (f() INT_LESS ARG2)
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
((f() - f()) / 8) INT_SRIGHT (f() - f()) 3
(f() - f()) INT_SUB f() f()
 RETURN 0 ((f() - f()) / 8)
ARG1 COPY ARG1
ARG2 COPY ARG2
(RSP + -16) PTRSUB RSP -16
 RETURN 0
(RSP + -24) PTRSUB RSP -24
 CALL func (RSP + -24) (RSP + -16) (RSP + -16)
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -48)
40 CAST 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -48) PTRSUB RSP -48
[40] LOAD 433 40
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1 (f() + f()) (f() + f())
f() CALL func ARG1
 CALL func ARG1 ((f() * 8) + f()) ((f() * 8) + f())
f() CALL func ARG2 ARG3 ARG3
 CALL func ARG2 ARG3 f() ARG3
((f() - f()) / 8) CAST ((f() - f()) / 8)
(f() * 8) INT_MULT f() 8
((f() - f()) / 8) INT_SRIGHT (f() - f()) 3
0 INT_LESS ((f() - f()) / 8) f()
((f() * 8) + f()) INT_ADD f() (f() * 8)
(f() - f()) INT_SUB f() f()
 CBRANCH (((f() - f()) / 8) INT_LESS f())
 RETURN 0
(f() + f()) INT_ADD f() f()
0 INT_NOTEQUAL ARG1 ARG2
ARG1 CAST ARG1
 CALL libcall_memcpy_thunk ARG3 ARG1 (((ARG2 - ARG1) / 8) * 8)
ARG2 CAST ARG2
 CBRANCH (ARG1 INT_NOTEQUAL ARG2)
 RETURN 0
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
(ARG2 - ARG1) INT_SUB ARG2 ARG1
(ARG2 - ARG1) CAST (ARG2 - ARG1)
((ARG2 - ARG1) / 8) INT_SRIGHT (ARG2 - ARG1) 3
 CALL func ARG1 ARG2 ARG3 0
 RETURN 0
 RETURN 0
(ARG2 - ARG1) INT_SUB ARG2 ARG1
((ARG2 - ARG1) / 8) INT_SRIGHT (ARG2 - ARG1) 3
 RETURN 0 ((ARG2 - ARG1) / 8)
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -48) PTRSUB RSP -48
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -48)
40 CAST 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 CALL func ARG1
 RETURN 0
 CALL libcall_memmove_thunk ARG3 ARG1 (((ARG2 - ARG1) / 8) * 8)
ARG1 CAST ARG1
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG3 CAST ARG3
0 INT_NOTEQUAL ((ARG2 - ARG1) / 8) 0
((ARG2 - ARG1) / 8) INT_SRIGHT (ARG2 - ARG1) 3
 RETURN 0 (ARG3 + (((ARG2 - ARG1) / 8) * 8))
 CBRANCH (((ARG2 - ARG1) / 8) INT_NOTEQUAL 0)
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) INT_ADD ARG3 (((ARG2 - ARG1) / 8) * 8)
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) CAST (ARG3 + (((ARG2 - ARG1) / 8) * 8))
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 RETURN 0
 CALL func f() f() f()
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1 ((f() * 8) + f()) ((f() * 8) + f())
 CALL func ARG1 (f() + f()) (f() + f())
f() CALL func ARG1
f() CALL func ARG2 ARG3 ARG3
 CALL func ARG2 ARG3 f() 0
(f() - f()) INT_SUB f() f()
 CBRANCH (((f() - f()) / 8) INT_LESS f())
 RETURN 0
((f() - f()) / 8) CAST ((f() - f()) / 8)
((f() * 8) + f()) INT_ADD f() (f() * 8)
(f() * 8) INT_MULT f() 8
((f() - f()) / 8) INT_SRIGHT (f() - f()) 3
0 INT_LESS ((f() - f()) / 8) f()
(f() + f()) INT_ADD f() f()
 CALL libcall_memmove_thunk ((((ARG2 - ARG1) / 8) * -8) + ARG3) ARG1 (((ARG2 - ARG1) / 8) * 8)
ARG1 CAST ARG1
(ARG2 - ARG1) INT_SUB ARG2 ARG1
(ARG3 + (((ARG2 - ARG1) / 8) * -8)) INT_ADD ARG3 (((ARG2 - ARG1) / 8) * -8)
((((ARG2 - ARG1) / 8) * -8) + ARG3) INT_ADD (((ARG2 - ARG1) / 8) * -8) ARG3
((ARG2 - ARG1) / 8) INT_SRIGHT (ARG2 - ARG1) 3
0 INT_NOTEQUAL ((ARG2 - ARG1) / 8) 0
 RETURN 0 (ARG3 + (((ARG2 - ARG1) / 8) * -8))
(((ARG2 - ARG1) / 8) * -8) INT_MULT ((ARG2 - ARG1) / 8) -8
 CBRANCH (((ARG2 - ARG1) / 8) INT_NOTEQUAL 0)
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
(((ARG2 - ARG1) / 8) * -8) INT_MULT ((ARG2 - ARG1) / 8) -8
((((ARG2 - ARG1) / 8) * -8) + ARG3) CAST ((((ARG2 - ARG1) / 8) * -8) + ARG3)
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 CALL func f() f() f()
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
0 INT_EQUAL f() ARG2
(ARG2 - f()) INT_SUB ARG2 f()
0 INT_LESS f() ARG2
0 INT_LESS ARG2 f()
f() CALL func ARG3 ARG4 ARG4
 CALL func ARG3 ARG4 ((((ARG2 - f()) / 8) * 8) + f()) ARG4
 CALL func ARG1 ARG3 ARG4 ARG3
ARG3 COPY ARG3
 CALL func f(ARG3) ARG4 f() 0
f() CALL func ARG1
 CALL func ARG1 A_Stack[-0x60]:8 A_Stack[-0x58]:8 A_Stack[-0x60]:8
f() CALL func ARG1
 CALL func ARG1 ((f() * 8) + f()) ((f() * 8) + f())
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1 (f() + f()) (f() + f())
((ARG2 - f()) / 8) INT_SRIGHT (ARG2 - f()) 3
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(ARG2 - f()) CAST (ARG2 - f())
 CBRANCH (f() INT_EQUAL ARG2)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
 STORE 433 f(ARG2) [f(ARG3)]
[f(ARG3)] LOAD 433 f(ARG3)
0 INT_NOTEQUAL f(ARG2) 0
 BRANCH VZERO
(f(ARG3) + 8) PTRADD f(ARG3) 1 8
(f(ARG2) + -1) INT_ADD f(ARG2) -1
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
((((ARG2 - f()) / 8) * 8) + f()) INT_ADD (((ARG2 - f()) / 8) * 8) f()
[(f() + 40)] LOAD 433 (f() + 40)
 BRANCH VZERO
((((ARG2 - f()) / 8) * 8) + f()) CAST ((((ARG2 - f()) / 8) * 8) + f())
(((ARG2 - f()) / 8) * 8) INT_MULT ((ARG2 - f()) / 8) 8
 CBRANCH (ARG2 INT_LESS f())
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CBRANCH (((f() - ((((ARG2 - f()) / 8) * 8) + f())) / 8) INT_LESS f())
((f() - ((((ARG2 - f()) / 8) * 8) + f())) / 8) INT_SRIGHT (f() - ((((ARG2 - f()) / 8) * 8) + f())) 3
(((f() - ((((ARG2 - f()) / 8) * 8) + f())) / 8) * -8) INT_MULT ((f() - ((((ARG2 - f()) / 8) * 8) + f())) / 8) -8
 CALL func (RSP + -96) ((f() * -8) + f()) ((f() * -8) + f())
 BRANCH VZERO
((f() * -8) + f()) INT_ADD (f() * -8) f()
(f() * -8) INT_MULT f() -8
((f() * -8) + f()) INT_ADD f() (f() * -8)
((((f() - ((((ARG2 - f()) / 8) * 8) + f())) / 8) * -8) + f()) INT_ADD f() (((f() - ((((ARG2 - f()) / 8) * 8) + f())) / 8) * -8)
((f() * 8) + f()) INT_ADD f() (f() * 8)
(f() * -8) INT_MULT f() -8
(f() - ((((ARG2 - f()) / 8) * 8) + f())) INT_SUB f() ((((ARG2 - f()) / 8) * 8) + f())
(RSP + -88) PTRSUB RSP -88
(RSP + -96) PTRSUB RSP -96
(f() * 8) INT_MULT f() 8
((((ARG2 - f()) / 8) * 8) + f()) CAST ((((ARG2 - f()) / 8) * 8) + f())
((((ARG2 - f()) / 8) * 8) + f()) COPY ((((ARG2 - f()) / 8) * 8) + f())
 CALL func (RSP + -88) f() f()
 CALL func ((((ARG2 - f()) / 8) * 8) + f()) ((f() * -8) + f()) f() ((f() * -8) + f())
 CALL func ((((ARG2 - f()) / 8) * 8) + f()) f() ((((f() - ((((ARG2 - f()) / 8) * 8) + f())) / 8) * -8) + f()) f()
 CBRANCH (f() INT_LESS ARG2)
llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::insert(llvm::SmallVectorImpl<T>::iterator, ItTy, ItTy) [with ItTy = const char**; T = const char*; llvm::SmallVectorImpl<T>::iterator = const char**] COPY llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::insert(llvm::SmallVectorImpl<T>::iterator, ItTy, ItTy) [with ItTy = const char**; T = const char*; llvm::SmallVectorImpl<T>::iterator = const char**]
I <= this->end() && "Inserting past the end of the vector." COPY I <= this->end() && "Inserting past the end of the vector."
((((ARG2 - f()) / 8) * 8) + f()) INT_ADD (((ARG2 - f()) / 8) * 8) f()
 CALL libcall___assert_fail_thunk I <= this->end() && "Inserting past the end of the vector." /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 602 llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::insert(llvm::SmallVectorImpl<T>::iterator, ItTy, ItTy) [with ItTy = const char**; T = const char*; llvm::SmallVectorImpl<T>::iterator = const char**]
(f() - ((((ARG2 - f()) / 8) * 8) + f())) INT_SUB f() ((((ARG2 - f()) / 8) * 8) + f())
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
((((ARG2 - f()) / 8) * 8) + f()) CAST ((((ARG2 - f()) / 8) * 8) + f())
(((ARG2 - f()) / 8) * 8) INT_MULT ((ARG2 - f()) / 8) 8
0 INT_LESS ((f() - ((((ARG2 - f()) / 8) * 8) + f())) / 8) f()
((((ARG2 - f()) / 8) * 8) + f()) CAST ((((ARG2 - f()) / 8) * 8) + f())
(f() + f()) INT_ADD f() f()
((f() - ((((ARG2 - f()) / 8) * 8) + f())) / 8) INT_SRIGHT (f() - ((((ARG2 - f()) / 8) * 8) + f())) 3
 RETURN 1
((f() - ((((ARG2 - f()) / 8) * 8) + f())) / 8) CAST ((f() - ((((ARG2 - f()) / 8) * 8) + f())) / 8)
llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::insert(llvm::SmallVectorImpl<T>::iterator, ItTy, ItTy) [with ItTy = const char**; T = const char*; llvm::SmallVectorImpl<T>::iterator = const char**] COPY llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::insert(llvm::SmallVectorImpl<T>::iterator, ItTy, ItTy) [with ItTy = const char**; T = const char*; llvm::SmallVectorImpl<T>::iterator = const char**]
 CALL libcall___assert_fail_thunk I >= this->begin() && "Insertion iterator is out of bounds." /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 601 llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::insert(llvm::SmallVectorImpl<T>::iterator, ItTy, ItTy) [with ItTy = const char**; T = const char*; llvm::SmallVectorImpl<T>::iterator = const char**]
 RETURN 1
I >= this->begin() && "Insertion iterator is out of bounds." COPY I >= this->begin() && "Insertion iterator is out of bounds."
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(ARG2)
 RETURN 1
 CALL func ARG1 0
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 (f() + -8) (f() + -8)
f() CALL func ARG1
 RETURN 0
(f() + -8) INT_ADD f() -8
 CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
(ARG2 + 8) INT_ADD ARG2 8
ARG2 COPY ARG2
0 INT_LESS ARG2 f()
0 INT_LESSEQUAL f() ARG2
 CALL func (ARG2 + 8) f() ARG2 (ARG2 + 8)
 CBRANCH (ARG2 INT_LESS f())
 CBRANCH (f() INT_LESSEQUAL ARG2)
 CALL libcall___assert_fail_thunk I < this->end() && "Erasing at past-the-end iterator." /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 457 llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::erase(llvm::SmallVectorImpl<T>::iterator) [with T = const char*; llvm::SmallVectorImpl<T>::iterator = const char**]
I < this->end() && "Erasing at past-the-end iterator." COPY I < this->end() && "Erasing at past-the-end iterator."
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
 RETURN 0 ARG2
llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::erase(llvm::SmallVectorImpl<T>::iterator) [with T = const char*; llvm::SmallVectorImpl<T>::iterator = const char**] COPY llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::erase(llvm::SmallVectorImpl<T>::iterator) [with T = const char*; llvm::SmallVectorImpl<T>::iterator = const char**]
 RETURN 1
llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::erase(llvm::SmallVectorImpl<T>::iterator) [with T = const char*; llvm::SmallVectorImpl<T>::iterator = const char**] COPY llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::erase(llvm::SmallVectorImpl<T>::iterator) [with T = const char*; llvm::SmallVectorImpl<T>::iterator = const char**]
 CALL libcall___assert_fail_thunk I >= this->begin() && "Iterator to erase is out of bounds." /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 456 llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::erase(llvm::SmallVectorImpl<T>::iterator) [with T = const char*; llvm::SmallVectorImpl<T>::iterator = const char**]
I >= this->begin() && "Iterator to erase is out of bounds." COPY I >= this->begin() && "Iterator to erase is out of bounds."
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
f() CALL func ([f()] + 1) ARG1 ARG2 (RSP + -72) ARG4
 CALL func ARG3 ((f() * 8) + f()) ((f() * 8) + f())
f() CALL func ARG3
f() CALL func ARG3 f() f()
f() CALL func ARG3
f() CALL func ARG3
 CALL func ARG3 ((f() * 8) + f()) f() f()
0 COPY 0
0 COPY 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f() f()
f() INT_ZEXT f()
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
 CBRANCH (f() INT_EQUAL f())
0 INT_EQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) INT_ADD 0 40
0 COPY 0
1 COPY 1
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL [f()] 0
f() CAST f()
[f()] LOAD 433 f()
 CBRANCH ([f()] INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 1)
((f() * 8) + f()) INT_ADD f() (f() * 8)
f() INT_ZEXT f()
f() CALL func (RSP + -72)
f() CALL func (RSP + -72)
(f() * 8) INT_MULT f() 8
(RSP + -72) PTRSUB RSP -72
0 COPY 0
((f() * 8) + f()) INT_ADD f() (f() * 8)
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() INT_ZEXT f()
(RSP + -72) PTRSUB RSP -72
(f() * 8) INT_MULT f() 8
 CBRANCH ([[f()]] INT_EQUAL 64)
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(f() + 1) INT_ADD f() 1
 CBRANCH (20 INT_LESS f())
f() COPY f()
0 INT_LESS 20 f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 RETURN 1
 CALL func (RSP + -72)
 BRANCH VZERO
 CALL func (RSP + -72)
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
0 INT_EQUAL f() 1
([f()] + 1) PTRADD [f()] 1 1
(RSP + -72) PTRSUB RSP -72
0 COPY 0
(f() + 1) COPY (f() + 1)
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
[[f()]] LOAD 433 [f()]
0 INT_EQUAL [[f()]] 64
f() COPY f()
 CALL func ARG1
 RETURN 0
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func ARG1
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
(ARG1 + 24) INT_ADD ARG1 24
 CALL func ARG1 (ARG1 + 24) ARG2 (ARG1 + 24)
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 (ARG2 * 8) (ARG2 * 8)
ARG2 INT_ZEXT ARG2
 RETURN 0
(ARG2 * 8) INT_MULT ARG2 8
 CALL func ARG1 4
 RETURN 0
 RETURN 0
 CALL func ARG1 (ARG1 + 24) ARG2 (ARG1 + 24)
(ARG1 + 24) INT_ADD ARG1 24
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
ARG2 INT_ZEXT ARG2
 CALL func ARG1 (ARG2 * 16) (ARG2 * 16)
(ARG2 * 16) INT_LEFT ARG2 4
 RETURN 0
 CALL func ARG1 0
 RETURN 0
 CALL func ARG1
(ARG1 + 120) PTRADD ARG1 15 8
 STORE 433 ARG1 0
(ARG1 + 72) PTRADD ARG1 9 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func (ARG1 + 16)
 CALL func (ARG1 + 72)
 RETURN 0
 STORE 433 (ARG1 + 8) 0
 STORE 433 (ARG1 + 120) 0
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
 RETURN 0 [(ARG1 + 8)]
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
f() CALL func ARG1
f() CALL func ARG1
((f() - f()) / 8) INT_SRIGHT (f() - f()) 3
 RETURN 0 (((f() - f()) / 8) * -6148914691236517205)
(f() - f()) INT_SUB f() f()
(((f() - f()) / 8) * -6148914691236517205) INT_MULT ((f() - f()) / 8) -6148914691236517205
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
 RETURN 0 [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
f() CALL func ARG1
f() CALL func ARG1
((f() - f()) / 8) INT_SRIGHT (f() - f()) 3
 RETURN 0 ((f() - f()) / 8)
(f() - f()) INT_SUB f() f()
 STORE 433 ARG1 Symbol
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 (ARG1 + 8) ARG2
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 CALL func (RSP + -24) [ARG1] 0 [ARG1]
40 INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -24) PTRSUB RSP -24
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL [(ARG1 + 8)] 0
40 CAST 40
(ARG1 + 8) CAST (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
 RETURN 1
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1 [f(ARG2)] [f(ARG2)]
f(ARG2) CALL func ARG2
(ARG2 + 8) INT_ADD ARG2 8
f(ARG2) CAST f(ARG2)
 STORE 433 (ARG1 + 16) [f(ARG2)]
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG2) CAST f(ARG2)
 RETURN 0
(ARG1 + 16) CAST (ARG1 + 16)
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG2) CALL func (ARG2 + 8)
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
[ARG1] LOAD 433 ARG1
(ARG1 + 24) PTRADD ARG1 3 8
[ARG1] CAST [ARG1]
[ARG1] CAST [ARG1]
0 INT_ZEXT 0
([ARG1] & -256) INT_OR ([ARG1] & -256) 0
 RETURN 0 ([ARG1] & -256)
0 INT_EQUAL [ARG1] (ARG1 + 24)
([ARG1] & -256) INT_AND [ARG1] -256
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
 RETURN 0
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 RETURN 0
 CALL func f() f()
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
f() CAST f()
 CALL libcall_free_thunk f()
 CALL func ARG1
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 8)] COPY [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0 [(ARG1 + 8)]
(ARG1 + 24) INT_ADD ARG1 24
 CALL func ARG1 (ARG1 + 24) ARG2 ARG3
 RETURN 0
 CALL func ARG1 (ARG2 * 24) 24 (ARG2 * 24)
(ARG2 * 24) INT_MULT ARG2 24
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 STORE 433 (ARG1 + 8) ARG2
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
f() CALL func ARG1
 CALL func ARG1 0
f() CALL func ARG1
 CALL func ARG1 (f() + 24) (f() + 24)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CALL libcall_memcpy_thunk f() ARG2 24
0 INT_LESSEQUAL [(ARG1 + 16)] [(ARG1 + 8)]
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH ([(ARG1 + 16)] INT_LESSEQUAL [(ARG1 + 8)])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() + 24) INT_ADD f() 24
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
f() CAST f()
f() CALL func ARG1
f() CALL func ARG1
(ARG2 * 24) INT_MULT ARG2 24
0 INT_LESSEQUAL f() ARG2
 CBRANCH (f() INT_LESSEQUAL ARG2)
 RETURN 0 ((ARG2 * 24) + f())
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 139 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
 RETURN 1
0 COPY 0
((ARG2 * 24) + f()) INT_ADD (ARG2 * 24) f()
idx < size() COPY idx < size()
f() CALL func ARG1
f() CALL func ARG1
(ARG2 * 8) INT_MULT ARG2 8
0 INT_LESSEQUAL f() ARG2
 CBRANCH (f() INT_LESSEQUAL ARG2)
((ARG2 * 8) + f()) INT_ADD (ARG2 * 8) f()
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 139 0
 RETURN 1
0 COPY 0
idx < size() COPY idx < size()
 RETURN 0 ((ARG2 * 8) + f())
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
 CALL func ARG1 (ARG1 + 24) ARG2 (ARG1 + 24)
(ARG1 + 24) INT_ADD ARG1 24
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
ARG2 INT_ZEXT ARG2
 CALL func ARG1 (ARG2 * 24) (ARG2 * 24)
(ARG2 * 24) INT_MULT ARG2 24
 RETURN 0
 CALL func ARG1 4
 RETURN 0
(ARG1 + 24) PTRADD ARG1 3 8
[ARG1] LOAD 433 ARG1
([ARG1] & -256) INT_OR ([ARG1] & -256) 0
 RETURN 0 ([ARG1] & -256)
0 INT_EQUAL [ARG1] (ARG1 + 24)
([ARG1] & -256) INT_AND [ARG1] -256
[ARG1] CAST [ARG1]
[ARG1] CAST [ARG1]
0 INT_ZEXT 0
 RETURN 0
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 CALL func f() f()
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
 RETURN 0
 CALL libcall_free_thunk f()
f() CAST f()
 CALL func ARG1
 RETURN 0
 RETURN 0
[ARG1] LOAD 433 ARG1
(ARG1 + 24) PTRADD ARG1 3 8
[ARG1] CAST [ARG1]
[ARG1] CAST [ARG1]
0 INT_ZEXT 0
([ARG1] & -256) INT_OR ([ARG1] & -256) 0
 RETURN 0 ([ARG1] & -256)
0 INT_EQUAL [ARG1] (ARG1 + 24)
([ARG1] & -256) INT_AND [ARG1] -256
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 CALL func f() f()
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 RETURN 0
 CALL libcall_free_thunk f()
f() CAST f()
 CALL func ARG1
 RETURN 0
(ARG2 - ARG1) INT_SUB ARG2 ARG1
((ARG2 - ARG1) / 8) INT_SRIGHT (ARG2 - ARG1) 3
 RETURN 0 ((ARG2 - ARG1) / 8)
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
[40] LOAD 433 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -48) PTRSUB RSP -48
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -48)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 128) INT_ADD ARG1 128
(ARG1 + 16) INT_ADD ARG1 16
ARG2 COPY ARG2
0 INT_NOTEQUAL f(ARG2) ARG3
 CBRANCH (f(ARG2) INT_NOTEQUAL ARG3)
 RETURN 0
 CALL func (ARG1 + 128) [f(ARG2)] f() (ARG1 + 128)
f() CALL func (ARG1 + 16)
f() CALL func f()
[f(ARG2)] LOAD 433 f(ARG2)
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
f() CALL func f() f(ARG2) f()
 BRANCH VZERO
(ARG1 + 72) INT_ADD ARG1 72
(ARG1 + 128) INT_ADD ARG1 128
f() CAST f()
f() CALL func (ARG1 + 72)
 RETURN 0
 CBRANCH (f() INT_NOTEQUAL f())
f() CAST f()
0 INT_NOTEQUAL f() f()
f() CALL func (ARG1 + 72)
[(f() + 8)] LOAD 433 (f() + 8)
(f() + 8) PTRADD f() 1 8
(f() + 16) PTRADD f() 2 8
 BRANCH VZERO
[f()] LOAD 433 f()
 CALL func (ARG1 + 128) [f()] [(f() + 8)] (ARG1 + 128)
 CALL func ARG1 f() f() f()
(ARG1 + 72) INT_ADD ARG1 72
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func (ARG1 + 16)
 CALL func (ARG1 + 72)
 CALL func (ARG1 + 16)
 RETURN 0
f() CALL func (ARG1 + 16)
 CALL func ARG1 ARG2 ARG3 ARG2
 CALL func ARG1 20
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
f(ARG1) CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
 STORE 433 (ARG1 + 8) ARG2
 CALL func ARG2 [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 CALL func ARG1 [ARG1] [ARG1]
[ARG1] LOAD 433 ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 [ARG2]
(ARG1 + 8) PTRADD ARG1 1 8
[ARG2] LOAD 433 ARG2
f(ARG3) CALL func ARG3
[f(ARG3)] LOAD 433 f(ARG3)
 STORE 433 (ARG1 + 8) [f(ARG3)]
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
f(ARG3) CAST f(ARG3)
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
40 INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -56) f(ARG1) f(ARG2) f(ARG1)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
(RSP + -56) PTRSUB RSP -56
 RETURN 1
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
ARG2 INT_SEXT ARG2
f() CALL func ARG1 (RSP + -600) (RSP + -616) (RSP + -600)
 CALL libcall_operator=_thunk ARG1 (RSP + -504)
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 120) PTRADD ARG1 120 1
(ARG1 + 208) PTRADD ARG1 208 1
(ARG1 + 176) PTRADD ARG1 176 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 208) PTRADD ARG1 208 1
f() CALL func ARG1 (RSP + -600) (RSP + -616) (RSP + -600)
(ARG1 + 176) PTRADD ARG1 176 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 208) PTRADD ARG1 208 1
f() CALL func f() ARG1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 32) PTRADD ARG1 32 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 40) PTRADD ARG1 40 1
(ARG1 + 64) PTRADD ARG1 64 1
f() CALL func f() ARG1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 208) PTRADD ARG1 208 1
(ARG1 + 64) PTRADD ARG1 64 1
f() CALL func ARG1
(ARG1 + 208) PTRADD ARG1 208 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 176) PTRADD ARG1 176 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 208) PTRADD ARG1 208 1
(ARG1 + 64) PTRADD ARG1 64 1
f() CALL func f() ARG1
(ARG1 + 120) PTRADD ARG1 120 1
(ARG1 + 120) PTRADD ARG1 120 1
f() CALL func f() ARG1
f() CALL func f() ARG1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 208) PTRADD ARG1 208 1
(ARG1 + 120) PTRADD ARG1 120 1
((ARG2 * 8) + ARG3) INT_ADD (ARG2 * 8) ARG3
 CALL func (RSP + -232) ARG3 ((ARG2 * 8) + ARG3) ARG3
 STORE 433 (ARG1 + 32) ARG4
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ((f() + 1) INT_SLESS f())
 CALL func (RSP + -568) (RSP + -584) (RSP + -584)
(RSP + -568) PTRSUB RSP -568
(f() / 2147483647) SUBPIECE f() 8
(RSP + -584) PTRSUB RSP -584
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -504) (RSP + -568) (RSP + -568)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() + 1) INT_ADD f() 1
(RSP + -504) PTRSUB RSP -504
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() + 1) INT_SEXT (f() + 1)
(RSP + -768) PTRSUB RSP -768
(((f() + 1) * 8) + f()) PTRADD f() (f() + 1) 8
(RSP + -568) PTRSUB RSP -568
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
0 INT_SLESS (f() + 1) f()
f() CALL func (((f() + 1) * 8) + f()) (RSP + -768) (((f() + 1) * 8) + f())
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_LESS f())
 CBRANCH ([(ARG1 + 208)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 208)] 0
[(ARG1 + 208)] LOAD 433 (ARG1 + 208)
0 COPY 0
(ARG1 + 208) CAST (ARG1 + 208)
 CBRANCH ((f() & 2) INT_NOTEQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL f())
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (ARG1 + 64) f() (ARG1 + 64)
[f()] LOAD 433 f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CAST f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func [f()]
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 INT_NOTEQUAL f() f()
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(f() - f()) CAST (f() - f())
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
0 INT_LESSEQUAL (f() - f()) f()
(f() + 1) INT_ADD f() 1
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (ARG1 + 64) f() (ARG1 + 64)
[f()] LOAD 433 f()
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH ((f() - f()) INT_LESSEQUAL f())
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() 2
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CAST f()
f() CALL func [f()]
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() - f()) INT_SUB f() f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_NOTEQUAL f())
(f() / 2147483647) SUBPIECE f() 8
f() CAST f()
(f() | f()) INT_OR f() f()
f() CALL func f()
0 INT_EQUAL f() 0
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_EQUAL 0)
0 INT_NOTEQUAL f() f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
f() CALL func [f()]
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() + 1) INT_ADD f() 1
f() CALL func (ARG1 + 64) f() (ARG1 + 64)
[f()] LOAD 433 f()
 CBRANCH ([([((f() * 8) + f())] + 2)] INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH ~(f())
0 COPY 0
~(f()) BOOL_NEGATE f()
 CBRANCH ([(ARG1 + 208)] INT_EQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH f()
(f() / 2147483647) SUBPIECE f() 0
(f() + 16) CAST (f() + 16)
(f() / 2147483647) SUBPIECE f() 8
(f() + 8) PTRADD f() 1 8
[f()] LOAD 433 f()
f() CALL func (ARG1 + 64) 0
[f()] LOAD 433 f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CAST f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() + 16) INT_ADD f() 16
(f() / 2147483647) SUBPIECE f() 8
(RSP + -504) PTRSUB RSP -504
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -504) f() f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
[(f() + 16)] LOAD 433 (f() + 16)
f() CALL func [f()] [f()] [(f() + 8)] [(f() + 16)]
f() CAST f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() + 1) INT_ADD f() 1
f() CALL func (RSP + -504) f() f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -504) PTRSUB RSP -504
(f() / 2147483647) SUBPIECE f() 8
[(f() + 8)] LOAD 433 (f() + 8)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() | f()) INT_OR f() f()
 CBRANCH ([(ARG1 + 208)] INT_NOTEQUAL 0)
1 COPY 1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -504) PTRSUB RSP -504
(f() / 2147483647) SUBPIECE f() 8
0 INT_SLESS f() f()
f() CALL func (RSP + -504)
(f() / 2147483647) SUBPIECE f() 8
0 COPY 0
(f() # f()) PIECE f() f()
f() CALL func (ARG1 + 64)
(RSP + -504) PTRSUB RSP -504
 CBRANCH (f() INT_SLESS f())
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_EQUAL 0)
 CALL func (RSP + -504)
0 INT_EQUAL f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (ARG1 + 64)
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_LESS f())
(f() / 2147483647) SUBPIECE f() 8
f() INT_ZEXT f()
0 INT_LESS f() f()
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(f() # f()) PIECE f() f()
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 45)
0 COPY 0
 BRANCH VZERO
1 COPY 1
(f() / 2147483647) SUBPIECE f() 8
0 COPY 0
[((f() * 8) + f())] LOAD 433 ((f() * 8) + f())
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -536) PTRSUB RSP -536
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -616)
(f() / 2147483647) SUBPIECE f() 8
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -600) PTRSUB RSP -600
(f() / 2147483647) SUBPIECE f() 0
f() INT_SEXT f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL libcall_basic_string_thunk
(f() / 2147483647) SUBPIECE f() 8
(RSP + -616) PTRSUB RSP -616
(f() / 2147483647) SUBPIECE f() 8
f() COPY f()
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
((f() * 8) + f()) PTRADD f() f() 8
0 INT_NOTEQUAL [[((f() * 8) + f())]] 45
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH ([[((f() * 8) + f())]] INT_NOTEQUAL 45)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall_~basic_string_thunk (RSP + -536)
 CALL func (RSP + -600) 4619597
(f() / 2147483647) SUBPIECE f() 0
[((f() * 8) + f())] CAST [((f() * 8) + f())]
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
[[((f() * 8) + f())]] LOAD 433 [((f() * 8) + f())]
(f() / 2147483647) SUBPIECE f() 0
4619597 PTRSUB 0 4619597
 CBRANCH f()
f() CALL func f() f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f() Can specify at most 
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f() positional arguments: See: 
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -600) PTRSUB RSP -600
 CBRANCH (f() INT_EQUAL 0)
(f() / 2147483647) SUBPIECE f() 0
f() CALL func
positional arguments: See:  COPY positional arguments: See: 
0 INT_EQUAL f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -616) (RSP + -600) (RSP + -600)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f() : Too many positional arguments specified! 
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
-help  COPY -help 
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(ARG1 + 208) CAST (ARG1 + 208)
(RSP + -616) PTRSUB RSP -616
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (ARG1 + 176)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
[f()] LOAD 433 f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH ([(ARG1 + 208)] INT_EQUAL 0)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL [(ARG1 + 208)] 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (ARG1 + 64)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
Can specify at most  COPY Can specify at most 
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() COPY f()
: Too many positional arguments specified!  COPY : Too many positional arguments specified! 
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH f()
(f() / 2147483647) SUBPIECE f() 8
 CALL func (ARG1 + 40)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func f() -help 
1 COPY 1
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f() [f()]
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (ARG1 + 176)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
[(ARG1 + 208)] LOAD 433 (ARG1 + 208)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
(RSP + -504) PTRSUB RSP -504
f() CALL func (RSP + -504)
(ARG1 + 208) CAST (ARG1 + 208)
[(ARG1 + 208)] LOAD 433 (ARG1 + 208)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH ([(ARG1 + 208)] INT_EQUAL 0)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL [(ARG1 + 208)] 0
f() CALL func (ARG1 + 64)
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_EQUAL 0)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
[f()] LOAD 433 f()
(f() / 2147483647) SUBPIECE f() 0
((f() * 8) + f()) PTRADD f() f() 8
f() CALL func f() [((f() * 8) + f())]
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f() : Unknown command line argument '
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() INT_SEXT f()
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f() [f()]
f() CAST f()
f() CALL func (ARG1 + 120)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
: Unknown command line argument ' COPY : Unknown command line argument '
f() CALL func f() '.  Try: '
0 INT_NOTEQUAL f() 0
f() CALL func
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_NOTEQUAL f())
(f() / 2147483647) SUBPIECE f() 8
-help'  COPY -help' 
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
0 INT_NOTEQUAL f() f()
(f() / 2147483647) SUBPIECE f() 8
1 COPY 1
(f() / 2147483647) SUBPIECE f() 0
[((f() * 8) + f())] LOAD 433 ((f() * 8) + f())
 CALL func f() -help' 
f() CAST f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
'.  Try: ' COPY '.  Try: '
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (ARG1 + 120)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH ([([((f() * 8) + f())] + 1)] INT_EQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
(RSP + -616) PTRSUB RSP -616
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -600) (RSP + -616) (RSP + -773) (ARG1 + 176)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -773) PTRSUB RSP -773
(RSP + -600) PTRSUB RSP -600
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
1 COPY 1
 BRANCH VZERO
0 COPY 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -568) [((f() * 8) + f())] [((f() * 8) + f())]
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
0 INT_NOTEQUAL f() 1
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_NOTEQUAL 1)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func f() (f() / 2147483647) (f() / 2147483647) f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
[((f() * 8) + f())] LOAD 433 ((f() * 8) + f())
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -568) PTRSUB RSP -568
f() CALL func (ARG1 + 64)
(f() / 2147483647) SUBPIECE f() 8
((f() * 8) + f()) PTRADD f() f() 8
f() INT_SEXT f()
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
0 INT_NOTEQUAL f() 2
(f() + 1) INT_ADD f() 1
 CBRANCH (f() INT_NOTEQUAL 2)
 CBRANCH (f() INT_NOTEQUAL 3)
f() CALL func (RSP + -504) f() f()
(f() / 2147483647) SUBPIECE f() 8
[(f() + 8)] LOAD 433 (f() + 8)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
[f()] LOAD 433 f()
f() CALL func (ARG1 + 64) f() (ARG1 + 64)
[f()] LOAD 433 f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CAST f()
 BRANCH VZERO
(RSP + -504) PTRSUB RSP -504
 CBRANCH (f() INT_NOTEQUAL 0)
(f() / 2147483647) SUBPIECE f() 8
(f() + 1) INT_ADD f() 1
(f() + 16) INT_ADD f() 16
0 INT_NOTEQUAL f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() + 16) CAST (f() + 16)
f() CALL func (RSP + -504) f() f()
[(f() + 16)] LOAD 433 (f() + 16)
(f() / 2147483647) SUBPIECE f() 8
f() CAST f()
(f() / 2147483647) SUBPIECE f() 0
 CALL func [f()] [f()] [(f() + 8)] [(f() + 16)]
(RSP + -504) PTRSUB RSP -504
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() + 8) PTRADD f() 1 8
 CBRANCH ((f() + -2) INT_LESS 2)
(f() / 2147483647) SUBPIECE f() 0
(f() + 8) CAST (f() + 8)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(f() + 8) INT_ADD f() 8
[(f() + 8)] LOAD 433 (f() + 8)
f() CALL func [(f() + 8)]
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) INT_RIGHT f() 64
f() COPY f()
f() CALL func (RSP + -600)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -600) PTRSUB RSP -600
(f() / 2147483647) SUBPIECE f() 8
~(f()) BOOL_NEGATE f()
 CALL func (RSP + -568) ([((f() * 8) + f())] + 1) ([((f() * 8) + f())] + 1)
f() COPY f()
(RSP + -600) PTRSUB RSP -600
(RSP + -600) PTRSUB RSP -600
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
[((f() * 8) + f())] LOAD 433 ((f() * 8) + f())
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
 CBRANCH (f() INT_EQUAL 0)
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH f()
f() COPY f()
 CBRANCH ~(f())
0 INT_EQUAL f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() INT_SEXT f()
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_EQUAL 0)
 CALL func (RSP + -568) ([((f() * 8) + f())] + 1) ([((f() * 8) + f())] + 1)
(RSP + -568) PTRSUB RSP -568
((f() * 8) + f()) PTRADD f() f() 8
f() COPY f()
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
f() INT_SEXT f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL f() 0
((f() * 8) + f()) PTRADD f() f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -600)
([((f() * 8) + f())] + 1) INT_ADD [((f() * 8) + f())] 1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
([((f() * 8) + f())] + 1) INT_ADD [((f() * 8) + f())] 1
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -616) PTRSUB RSP -616
(f() / 2147483647) SUBPIECE f() 8
(RSP + -600) PTRSUB RSP -600
(f() / 2147483647) SUBPIECE f() 8
~(f()) BOOL_NEGATE f()
 CBRANCH ~(f())
(RSP + -616) PTRSUB RSP -616
 CBRANCH f()
[((f() * 8) + f())] LOAD 433 ((f() * 8) + f())
 CBRANCH (f() INT_EQUAL 1)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -568) PTRSUB RSP -568
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL f() 1
([((f() * 8) + f())] + 1) INT_ADD [((f() * 8) + f())] 1
0 INT_EQUAL [([((f() * 8) + f())] + 1)] 0
((f() * 8) + f()) PTRADD f() f() 8
[((f() * 8) + f())] LOAD 433 ((f() * 8) + f())
[([((f() * 8) + f())] + 1)] LOAD 433 ([((f() * 8) + f())] + 1)
f() INT_SEXT f()
([((f() * 8) + f())] + 1) CAST ([((f() * 8) + f())] + 1)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -600) PTRSUB RSP -600
0 INT_NOTEQUAL f() 45
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_NOTEQUAL 45)
f() CALL func (RSP + -600) 0
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f() Must specify at least 
(f() / 2147483647) SUBPIECE f() 8
-help  COPY -help 
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f() positional arguments: See: 
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f() f() f()
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func
Must specify at least  COPY Must specify at least 
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
: Not enough positional command line arguments specified!  COPY : Not enough positional command line arguments specified! 
f() CALL func f() : Not enough positional command line arguments specified! 
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
positional arguments: See:  COPY positional arguments: See: 
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
[f()] LOAD 433 f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f() [f()]
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
1 COPY 1
(f() / 2147483647) SUBPIECE f() 8
 CALL func f() -help 
 CBRANCH (f() INT_NOTEQUAL f())
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func (ARG1 + 64) f() (ARG1 + 64)
0 INT_NOTEQUAL f() 0
[f()] LOAD 433 f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
(f() + 1) INT_ADD f() 1
(f() / 2147483647) SUBPIECE f() 8
f() CAST f()
(f() / 2147483647) SUBPIECE f() 8
0 INT_NOTEQUAL f() f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func [f()]
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_EQUAL f())
[(f() + 8)] LOAD 433 (f() + 8)
(f() / 2147483647) SUBPIECE f() 0
f() INT_ZEXT f()
f() CAST f()
f() CALL func (RSP + -504) f() f()
[(f() + 16)] LOAD 433 (f() + 16)
[f()] LOAD 433 f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -504)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
[(ARG1 + 208)] LOAD 433 (ARG1 + 208)
(RSP + -504) PTRSUB RSP -504
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -504) PTRSUB RSP -504
f() CALL func (RSP + -504) f() f()
(f() / 2147483647) SUBPIECE f() 0
(f() + 16) CAST (f() + 16)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
f() CALL func [(ARG1 + 208)] [f()] [(f() + 8)] [(f() + 16)]
(f() / 2147483647) SUBPIECE f() 8
(f() + 1) INT_ADD f() 1
(f() / 2147483647) SUBPIECE f() 0
(f() + 8) PTRADD f() 1 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -504) PTRSUB RSP -504
(f() / 2147483647) SUBPIECE f() 0
(f() + 16) INT_ADD f() 16
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL f() f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() | f()) INT_OR f() f()
(f() / 2147483647) SUBPIECE f() 8
(ARG1 + 208) CAST (ARG1 + 208)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
1 COPY 1
0 INT_NOTEQUAL f() 1
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_NOTEQUAL 1)
f() CALL func f()
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_EQUAL 1)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 COPY 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -536) PTRSUB RSP -536
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) (ARG1 + 176) (RSP + -536)
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_SLESS f())
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() + 1) INT_ADD f() 1
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
[((f() * 8) + f())] LOAD 433 ((f() * 8) + f())
(f() / 2147483647) SUBPIECE f() 0
0 INT_SLESS f() f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f() [((f() * 8) + f())]
(f() / 2147483647) SUBPIECE f() 8
((f() * 8) + f()) PTRADD f() f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() INT_SEXT f()
 CALL func f() 32
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
f() CALL func
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -600) 1 -1
(f() / 2147483647) SUBPIECE f() 0
(RSP + -600) PTRSUB RSP -600
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() 0
f() CALL func (ARG1 + 64)
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 3
 CBRANCH (1 INT_LESS f())
(RSP + -568) PTRSUB RSP -568
 CALL func (RSP + -568) error - this positional option will never be matched, because it does not Require a value, and a cl::ConsumeAfter option is active!
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -584)
(f() | f()) INT_OR f() f()
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
f() CALL func [f()] (RSP + -568) f()
(RSP + -584) PTRSUB RSP -584
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
error - this positional option will never be matched, because it does not Require a value, and a cl::ConsumeAfter option is active! COPY error - this positional option will never be matched, because it does not Require a value, and a cl::ConsumeAfter option is active!
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -568) PTRSUB RSP -568
 CBRANCH (f() INT_LESS f())
void {anonymous}::CommandLineParser::ParseCommandLineOptions(int, const char* const*, const char*) COPY void {anonymous}::CommandLineParser::ParseCommandLineOptions(int, const char* const*, const char*)
ConsumeAfterOpt && NumPositionalRequired <= PositionalVals.size() COPY ConsumeAfterOpt && NumPositionalRequired <= PositionalVals.size()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (ARG1 + 64)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() 1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (ARG1 + 64)
f() COPY f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
1 COPY 1
(f() / 2147483647) SUBPIECE f() 8
0 COPY 0
 RETURN 1
 CALL libcall___assert_fail_thunk ConsumeAfterOpt && NumPositionalRequired <= PositionalVals.size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 1044 void {anonymous}::CommandLineParser::ParseCommandLineOptions(int, const char* const*, const char*)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 INT_NOTEQUAL [[((f() * 8) + f())]] 45
 CBRANCH ([[((f() * 8) + f())]] INT_NOTEQUAL 45)
[[((f() * 8) + f())]] LOAD 433 [((f() * 8) + f())]
((f() * 8) + f()) PTRADD f() f() 8
[((f() * 8) + f())] LOAD 433 ((f() * 8) + f())
f() INT_SEXT f()
[((f() * 8) + f())] CAST [((f() * 8) + f())]
f() CALL func (ARG1 + 64)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -504)
0 INT_LESSEQUAL f() f()
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_LESSEQUAL f())
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -504) PTRSUB RSP -504
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
commandline COPY commandline
(f() / 2147483647) SUBPIECE f() 8
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func commandline
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func f() 10
(f() / 2147483647) SUBPIECE f() 0
 CALL func f() Args: 
Args:  COPY Args: 
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func
f() CALL func
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (ARG1 + 120)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH ([(ARG1 + 208)] INT_EQUAL 0)
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (ARG1 + 64)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
0 INT_LESS 1 f()
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_NOTEQUAL 0)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func [f()]
(f() / 2147483647) SUBPIECE f() 8
f() CAST f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (ARG1 + 64) f() (ARG1 + 64)
0 INT_NOTEQUAL f() 1
[f()] LOAD 433 f()
(f() / 2147483647) SUBPIECE f() 0
f() INT_SEXT f()
 CALLIND [([[f()]] + 56)] [f()] f() (f() / 2147483647) (f() / 2147483647) (f() / 2147483647) (f() / 2147483647) 0 4435139
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
4619597 PTRSUB 0 4619597
 CALL func (RSP + -568) [((f() * 8) + f())] [((f() * 8) + f())]
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -568) PTRSUB RSP -568
(f() / 2147483647) SUBPIECE f() 0
((f() * 8) + f()) PTRADD f() f() 8
(f() / 2147483647) SUBPIECE f() 0
[f()] LOAD 433 f()
([[f()]] + 56) INT_ADD [[f()]] 56
[([[f()]] + 56)] LOAD 433 ([[f()]] + 56)
(f() + 8) PTRADD f() 1 8
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
([[f()]] + 56) CAST ([[f()]] + 56)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
[((f() * 8) + f())] LOAD 433 ((f() * 8) + f())
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -584) 4619597
(f() / 2147483647) SUBPIECE f() 8
[[f()]] LOAD 433 [f()]
(f() / 2147483647) SUBPIECE f() 8
[f()] LOAD 433 f()
(RSP + -584) PTRSUB RSP -584
(f() / 2147483647) SUBPIECE f() 8
4435139 COPY 4435139
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() + 8) INT_ADD f() 8
f() CALL func [(f() + 8)]
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
[(f() + 8)] LOAD 433 (f() + 8)
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(RSP + -616) PTRSUB RSP -616
0 INT_LESS (f() + -2) 2
 CALL func (RSP + -616)
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -616)
(f() / 2147483647) SUBPIECE f() 0
(f() + -2) INT_SUB f() -2
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -616) PTRSUB RSP -616
(f() + 8) CAST (f() + 8)
 CBRANCH f()
 BRANCH VZERO
 BRANCH VZERO
1 COPY 1
0 COPY 0
(RSP + -584) PTRSUB RSP -584
(ARG1 + 32) CAST (ARG1 + 32)
VZERO COPY VZERO
void {anonymous}::CommandLineParser::ParseCommandLineOptions(int, const char* const*, const char*) COPY void {anonymous}::CommandLineParser::ParseCommandLineOptions(int, const char* const*, const char*)
(RSP + -376) PTRSUB RSP -376
0 INT_NOTEQUAL [(ARG1 + 208)] 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -632) (RSP + -376) (RSP + -376)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -504) PTRSUB RSP -504
 RETURN 1
 CALL libcall___assert_fail_thunk hasOptions() && "No options specified!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 820 void {anonymous}::CommandLineParser::ParseCommandLineOptions(int, const char* const*, const char*)
[f()] LOAD 433 f()
(RSP + -232) PTRSUB RSP -232
 CALL func (RSP + -632) 4427161 (RSP + -232) 0
 CALL libcall_~basic_string_thunk (RSP + -504)
(f() / 2147483647) SUBPIECE f() 0
4427161 PTRSUB 0 4427161
(ARG2 * 8) INT_MULT ARG2 8
(RSP + -632) PTRSUB RSP -632
 CALL func (RSP + -584) [f()] [f()]
(RSP + -376) PTRSUB RSP -376
(f() / 2147483647) SUBPIECE f() 0
(RSP + -568) PTRSUB RSP -568
(f() / 2147483647) SUBPIECE f() 8
0 COPY 0
(RSP + -504) PTRSUB RSP -504
f() CALL func (RSP + -232) 0
0 COPY 0
(RSP + -632) PTRSUB RSP -632
f() CALL func A_Stack[-0x248]:8 A_Stack[-0x240]:8 A_Stack[-0x248]:8
(ARG1 + 208) CAST (ARG1 + 208)
(RSP + -232) PTRSUB RSP -232
hasOptions() && "No options specified!" COPY hasOptions() && "No options specified!"
(RSP + -232) PTRSUB RSP -232
(RSP + -504) CAST (RSP + -504)
(RSP + -504) PTRSUB RSP -504
(f() / 2147483647) SUBPIECE f() 8
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
[(ARG1 + 208)] LOAD 433 (ARG1 + 208)
 CALL func (RSP + -504) (RSP + -568) (RSP + -568)
f() CALL func (RSP + -232)
f() CAST f()
0 COPY 0
 CALL func (RSP + -376)
(RSP + -232) PTRSUB RSP -232
1 COPY 1
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
f() CALL func (ARG1 + 120)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL f() 1
2 COPY 2
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() 0
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_EQUAL 1)
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f()
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL [[([f()] + 24)]] 0
 CBRANCH ([[([f()] + 24)]] INT_EQUAL 0)
[[([f()] + 24)]] LOAD 433 [([f()] + 24)]
([f()] + 24) CAST ([f()] + 24)
([f()] + 24) INT_ADD [f()] 24
[([f()] + 24)] LOAD 433 ([f()] + 24)
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -504)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
(RSP + -504) PTRSUB RSP -504
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
Internal error, unexpected NumOccurrences flag in positional argument processing! COPY Internal error, unexpected NumOccurrences flag in positional argument processing!
(f() / 2147483647) SUBPIECE f() 8
 CALL func Internal error, unexpected NumOccurrences flag in positional argument processing! /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 1039
(f() / 2147483647) SUBPIECE f() 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
1 COPY 1
(RSP + -768) PTRSUB RSP -768
((f() * 8) + f()) PTRADD f() f() 8
(RSP + -568) PTRSUB RSP -568
0 INT_LESS f() f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func ((f() * 8) + f()) (RSP + -768) ((f() * 8) + f())
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -568) (RSP + -584) (RSP + -584)
(RSP + -568) PTRSUB RSP -568
f() INT_ZEXT f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -584) PTRSUB RSP -584
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -504)
(RSP + -504) PTRSUB RSP -504
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -504) (RSP + -568) (RSP + -568)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -504) PTRSUB RSP -504
(f() / 2147483647) SUBPIECE f() 0
f() INT_SEXT f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
VZERO COPY VZERO
void {anonymous}::CommandLineParser::ParseCommandLineOptions(int, const char* const*, const char*) COPY void {anonymous}::CommandLineParser::ParseCommandLineOptions(int, const char* const*, const char*)
 RETURN 1
 CALL libcall___assert_fail_thunk PositionalOpts.size() > 0 && "Cannot specify cl::ConsumeAfter without a positional argument!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 844 void {anonymous}::CommandLineParser::ParseCommandLineOptions(int, const char* const*, const char*)
PositionalOpts.size() > 0 && "Cannot specify cl::ConsumeAfter without a positional argument!" COPY PositionalOpts.size() > 0 && "Cannot specify cl::ConsumeAfter without a positional argument!"
1 COPY 1
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
f() COPY f()
f() CALL func f() (f() / 2147483647) (f() / 2147483647) f() f() f() f() (RSP + -768)
(RSP + -768) PTRSUB RSP -768
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() | f()) INT_OR f() f()
 CBRANCH ([([((f() * 8) + f())] + 1)] INT_NOTEQUAL 45)
f() INT_SEXT f()
[((f() * 8) + f())] LOAD 433 ((f() * 8) + f())
((f() * 8) + f()) PTRADD f() f() 8
0 INT_NOTEQUAL [([((f() * 8) + f())] + 2)] 0
([((f() * 8) + f())] + 2) INT_ADD [((f() * 8) + f())] 2
[([((f() * 8) + f())] + 2)] LOAD 433 ([((f() * 8) + f())] + 2)
([((f() * 8) + f())] + 2) CAST ([((f() * 8) + f())] + 2)
(f() + 1) INT_ADD f() 1
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CAST f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -504) f() f()
[(f() + 8)] LOAD 433 (f() + 8)
(f() / 2147483647) SUBPIECE f() 0
(f() | f()) INT_OR f() f()
(RSP + -504) PTRSUB RSP -504
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
[f()] LOAD 433 f()
(f() / 2147483647) SUBPIECE f() 8
(f() + 16) CAST (f() + 16)
f() CALL func (ARG1 + 64) f() (ARG1 + 64)
[f()] LOAD 433 f()
(f() + 8) PTRADD f() 1 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CAST f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() + 16) INT_ADD f() 16
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -504) PTRSUB RSP -504
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -504) f() f()
[(f() + 16)] LOAD 433 (f() + 16)
(f() / 2147483647) SUBPIECE f() 0
f() CALL func [f()] [f()] [(f() + 8)] [(f() + 16)]
f() CALL func (ARG1 + 64)
(f() / 2147483647) SUBPIECE f() 8
[([f()] + 24)] LOAD 433 ([f()] + 24)
f() CALL func f() : CommandLine Error: Option '
 CALL func (RSP + -584)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() | f()) INT_OR f() f()
(f() / 2147483647) SUBPIECE f() 8
: CommandLine Error: Option ' COPY : CommandLine Error: Option '
([f()] + 24) CAST ([f()] + 24)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -568) PTRSUB RSP -568
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func f() f()
 CALL func f() ' is all messed up! 
(f() / 2147483647) SUBPIECE f() 0
(RSP + -584) PTRSUB RSP -584
 CALL func (RSP + -568) error - option can never match, because another positional argument will match an unbounded number of values, and this option does not require a value!
(f() / 2147483647) SUBPIECE f() 8
' is all messed up!  COPY ' is all messed up! 
f() CALL func
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
error - option can never match, because another positional argument will match an unbounded number of values, and this option does not require a value! COPY error - option can never match, because another positional argument will match an unbounded number of values, and this option does not require a value!
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL func
(RSP + -568) PTRSUB RSP -568
f() CALL func [f()] (RSP + -568) f()
([f()] + 24) INT_ADD [f()] 24
f() CALL func f() [([f()] + 24)]
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
f() COPY f()
f() COPY f()
1 COPY 1
 BRANCH VZERO
[(ARG1 + 208)] LOAD 433 (ARG1 + 208)
(ARG1 + 208) CAST (ARG1 + 208)
0 INT_EQUAL [(ARG1 + 208)] 0
(f() + 1) INT_ADD f() 1
0 INT_EQUAL [(ARG1 + 208)] 0
[(ARG1 + 208)] LOAD 433 (ARG1 + 208)
 BRANCH VZERO
(ARG1 + 208) CAST (ARG1 + 208)
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -600) 1 -1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -600) PTRSUB RSP -600
(f() / 2147483647) SUBPIECE f() 0
(f() + 40) CAST (f() + 40)
 CALL func (RSP + -232)
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -504)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -504) PTRSUB RSP -504
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall_exit_thunk 1
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -376)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -232) PTRSUB RSP -232
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() + 40) INT_ADD f() 40
(f() / 2147483647) SUBPIECE f() 8
(RSP + -376) PTRSUB RSP -376
f() COPY f()
 CALL func (RSP + -632)
(f() / 2147483647) SUBPIECE f() 0
0 INT_NOTEQUAL f() [(f() + 40)]
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -632) PTRSUB RSP -632
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() + 8) INT_ADD f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func [(f() + 8)] (RSP + -568) (f() / 2147483647) (f() / 2147483647)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -568) PTRSUB RSP -568
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
[(f() + 8)] LOAD 433 (f() + 8)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -568) PTRSUB RSP -568
(RSP + -584) PTRSUB RSP -584
must be specified at least once! COPY must be specified at least once!
 CALL func (RSP + -584)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() + 8) CAST (f() + 8)
 CALL func (RSP + -568) must be specified at least once!
1 COPY 1
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -504) PTRSUB RSP -504
(f() / 2147483647) SUBPIECE f() 8
f() INT_ZEXT f()
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -504)
(f() / 2147483647) SUBPIECE f() 8
0 INT_LESS f() f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func f() (f() / 2147483647) (f() / 2147483647) f()
(RSP + -568) PTRSUB RSP -568
f() INT_SEXT f()
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
((f() * 8) + f()) PTRADD f() f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
[((f() * 8) + f())] LOAD 433 ((f() * 8) + f())
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -568) [((f() * 8) + f())] [((f() * 8) + f())]
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
[([((f() * 8) + f())] + 1)] LOAD 433 ([((f() * 8) + f())] + 1)
((f() * 8) + f()) PTRADD f() f() 8
f() INT_SEXT f()
([((f() * 8) + f())] + 1) CAST ([((f() * 8) + f())] + 1)
[((f() * 8) + f())] LOAD 433 ((f() * 8) + f())
0 INT_NOTEQUAL [([((f() * 8) + f())] + 1)] 45
([((f() * 8) + f())] + 1) INT_ADD [((f() * 8) + f())] 1
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f()
(f() / 2147483647) SUBPIECE f() 0
0 INT_NOTEQUAL (f() & 2) 0
(f() & 2) INT_AND f() 2
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f() : Did you mean '-
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
: Did you mean '- COPY : Did you mean '-
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func f() 4621352
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func
f() CALL func f() (RSP + -536) f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
4621352 PTRSUB 0 4621352
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -536) PTRSUB RSP -536
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
0 INT_NOTEQUAL f() 45
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -600) 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -600) PTRSUB RSP -600
(f() / 2147483647) SUBPIECE f() 8
(f() + 16) CAST (f() + 16)
(f() + 1) INT_ADD f() 1
f() CAST f()
(f() + 16) INT_ADD f() 16
(f() / 2147483647) SUBPIECE f() 8
(RSP + -504) PTRSUB RSP -504
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() + 8) PTRADD f() 1 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
[(f() + 16)] LOAD 433 (f() + 16)
(f() / 2147483647) SUBPIECE f() 8
 CALL func [f()] [f()] [(f() + 8)] [(f() + 16)]
f() CALL func (RSP + -504) f() f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CAST f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -504) PTRSUB RSP -504
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -504) f() f()
(f() + -1) INT_SUB f() -1
[(f() + 8)] LOAD 433 (f() + 8)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
[f()] LOAD 433 f()
f() CALL func (ARG1 + 64) f() (ARG1 + 64)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
[f()] LOAD 433 f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
0 INT_NOTEQUAL f() 0
 CALL func f() ARG1 ARG2 ARG3
f() CALL func 6887840
6887840 PTRSUB 0 6887840
 RETURN 0
 CALL func ARG1 20
 RETURN 0
0 INT_EQUAL ARG1 0
f() CALL func (RSP + -376) ARG1 ARG1
f() CALL libcall_getenv_thunk ARG2
0 INT_EQUAL ARG2 0
 CALL func f() f() ARG3 f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (ARG1 INT_EQUAL 0)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
 RETURN 1
 CALL libcall___assert_fail_thunk progName && "Program name not specified" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 790 void llvm::cl::ParseEnvironmentOptions(const char*, const char*, const char*)
progName && "Program name not specified" COPY progName && "Program name not specified"
void llvm::cl::ParseEnvironmentOptions(const char*, const char*, const char*) COPY void llvm::cl::ParseEnvironmentOptions(const char*, const char*, const char*)
 CBRANCH (ARG2 INT_EQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -344)
(RSP + -376) PTRSUB RSP -376
(RSP + -200) PTRSUB RSP -200
(RSP + -344) PTRSUB RSP -344
(RSP + -376) PTRSUB RSP -376
 CALL func (RSP + -200) (RSP + -360) (RSP + -360)
 CALL func (RSP + -200)
(RSP + -360) PTRSUB RSP -360
 BRANCH VZERO
(RSP + -344) PTRSUB RSP -344
(RSP + -200) PTRSUB RSP -200
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -200)
f() CALL func (RSP + -200)
(RSP + -344) PTRSUB RSP -344
 CALL func (RSP + -376) (RSP + -344) (RSP + -344)
(RSP + -376) PTRSUB RSP -376
(RSP + -376) PTRSUB RSP -376
 CALL func (RSP + -344)
(RSP + -360) PTRSUB RSP -360
(RSP + -200) PTRSUB RSP -200
(RSP + -200) PTRSUB RSP -200
 CALL func f() A_Stack[-0x160]:8 (RSP + -376) (RSP + -200) 0
 CALL func (RSP + -360) f() f()
f() CALL func (RSP + -200) 0
 CALL func (RSP + -376)
 RETURN 1
[(f() + 40)] LOAD 433 (f() + 40)
 CALL libcall___assert_fail_thunk envVar && "Environment variable name missing" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 791 void llvm::cl::ParseEnvironmentOptions(const char*, const char*, const char*)
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
void llvm::cl::ParseEnvironmentOptions(const char*, const char*, const char*) COPY void llvm::cl::ParseEnvironmentOptions(const char*, const char*, const char*)
0 INT_NOTEQUAL f() 0
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
envVar && "Environment variable name missing" COPY envVar && "Environment variable name missing"
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALLIND [[ARG1]] ARG1 ARG2 ARG3 ARG4 ARG5 ARG6
 CALL func ARG1 (RSP + -56) ARG3 ARG4
 CALL func ARG1 (RSP + -56) ARG3 ARG4
0 INT_NOTEQUAL ARG7 1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (ARG7 INT_NOTEQUAL 1)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
[(f() + 40)] LOAD 433 (f() + 40)
 BRANCHIND f()
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 1)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + 1) INT_ADD [(ARG1 + 8)] 1
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (1 INT_SLESS [(ARG1 + 8)])
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) may only occur zero or one times!
may only occur zero or one times! COPY may only occur zero or one times!
 BRANCH VZERO
[[ARG1]] LOAD 433 [ARG1]
(RSP + -56) PTRSUB RSP -56
[ARG1] CAST [ARG1]
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CBRANCH (1 INT_SLESS [(ARG1 + 8)])
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) must occur exactly one time!
must occur exactly one time! COPY must occur exactly one time!
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_SLESS 1 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_SLESS 1 [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 24) INT_ADD ARG1 24
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
f() CALL libcall_strlen_thunk [(ARG1 + 24)]
 RETURN 0 (f() + 6)
(f() + 6) INT_ADD f() 6
(ARG1 + 24) CAST (ARG1 + 24)
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 24) INT_ADD ARG1 24
 CALL func A_Stack[-0x38]:8 A_Stack[-0x30]:8 ARG2 (f() + 6)
(f() + 6) INT_ADD f() 6
(ARG1 + 32) CAST (ARG1 + 32)
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
f() CALL func
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(ARG1 + 24) CAST (ARG1 + 24)
f() CALL libcall_strlen_thunk [(ARG1 + 24)]
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
 CALL func (RSP + -56) [(ARG1 + 32)] [(ARG1 + 32)]
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func f() [(ARG1 + 24)]
4621880 PTRSUB 0 4621880
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 40
(RSP + -56) PTRSUB RSP -56
(ARG1 + 24) CAST (ARG1 + 24)
f() CALL func f() 4621880
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG5 COPY ARG5
ARG6 COPY ARG6
 STORE 433 ARG7 2
 STORE 433 ARG7 1
 CBRANCH (f() INT_EQUAL 0)
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f() 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
f() CALL func ARG5 ARG6 A_Stack[-0x138]:8 A_Stack[-0x130]:8
 CALL func (RSP + -312) 4619597
4619597 PTRSUB 0 4619597
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -312) PTRSUB RSP -312
 CBRANCH f()
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 CBRANCH (f() INT_NOTEQUAL 0)
 CALL func (RSP + -200) False
 BRANCH VZERO
False COPY False
0 INT_NOTEQUAL f() 0
f() CALL func f(ARG5) f(ARG6) f() f()
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -200) PTRSUB RSP -200
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
f() CALL func f(ARG5) f(ARG6) f() f()
 CALL func (RSP + -216) FALSE
FALSE COPY FALSE
(RSP + -216) PTRSUB RSP -216
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CALL func (RSP + -296) 4621887
0 INT_NOTEQUAL f() 0
4621887 PTRSUB 0 4621887
f() CALL func ARG5 ARG6 A_Stack[-0x128]:8 A_Stack[-0x120]:8
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -296) PTRSUB RSP -296
(RSP + -184) PTRSUB RSP -184
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
f() CALL func f(ARG5) f(ARG6) f() f()
 CALL func (RSP + -184) 4621922
4621922 PTRSUB 0 4621922
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
f() CALL func ARG5 ARG6 A_Stack[-0xf8]:8 A_Stack[-0xf0]:8
(RSP + -248) PTRSUB RSP -248
4621902 PTRSUB 0 4621902
 CALL func (RSP + -248) 4621902
 CBRANCH (f() INT_NOTEQUAL 0)
4621897 PTRSUB 0 4621897
f() CALL func ARG5 ARG6 A_Stack[-0x108]:8 A_Stack[-0x100]:8
 CALL func (RSP + -264) 4621897
(RSP + -264) PTRSUB RSP -264
0 INT_NOTEQUAL f() 0
0 INT_EQUAL f() 0
(RSP + -232) PTRSUB RSP -232
f() CALL func f(ARG5) f(ARG6) f() f()
 CALL func (RSP + -232) false
 BRANCH VZERO
0 COPY 0
 CBRANCH f()
false COPY false
0 COPY 0
(RSP + -280) PTRSUB RSP -280
0 INT_NOTEQUAL f() 0
f() CALL func ARG5 ARG6 A_Stack[-0x118]:8 A_Stack[-0x110]:8
 CALL func (RSP + -280) 4621892
4621892 PTRSUB 0 4621892
(RSP + -360) PTRSUB RSP -360
 BRANCH VZERO
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -88) (RSP + -152) (RSP + -120) (RSP + -152)
(RSP + -88) PTRSUB RSP -88
(RSP + -152) PTRSUB RSP -152
0 COPY 0
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -168)
 CALL func (RSP + -152) 4621980 (RSP + -360)
f() CALL func f(ARG2) (RSP + -88) f() f()
 CALL func (RSP + -120) ' is invalid value for boolean argument! Try 0 or 1
' is invalid value for boolean argument! Try 0 or 1 COPY ' is invalid value for boolean argument! Try 0 or 1
(RSP + -152) PTRSUB RSP -152
(RSP + -88) PTRSUB RSP -88
(RSP + -120) PTRSUB RSP -120
4621980 PTRSUB 0 4621980
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
f() CALL func [ARG1] [(ARG1 + 8)] ARG2 (RSP + -24)
 STORE 433 ARG3 (A_Stack[-0x18]:8 / 2147483647)
 CBRANCH (f() INT_EQUAL 0)
~(~(f())) COPY ~(~(f()))
0 INT_EQUAL f() 0
 CBRANCH ~(f())
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
 CBRANCH ([(FS_OFFSET + 40)] INT_EQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
40 INT_ADD 0 40
~(~(f())) BOOL_NEGATE ~(f())
0 INT_EQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
(A_Stack[-0x18]:8 / 2147483647) SUBPIECE A_Stack[-0x18]:8 0
~(f()) BOOL_NEGATE f()
(RSP + -24) PTRSUB RSP -24
40 CAST 40
 CBRANCH ((A_Stack[-0x18]:8 / 2147483647) INT_EQUAL A_Stack[-0x18]:8)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 RETURN 0 ~(~(f()))
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
0 INT_EQUAL (A_Stack[-0x18]:8 / 2147483647) A_Stack[-0x18]:8
(A_Stack[-0x18]:8 / 2147483647) INT_SEXT (A_Stack[-0x18]:8 / 2147483647)
ARG5 COPY ARG5
ARG6 COPY ARG6
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
f() CALL func (RSP + -168) 0 ARG7
ARG4 COPY ARG4
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
(RSP + -168) PTRSUB RSP -168
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
4621980 PTRSUB 0 4621980
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
f() CALL func ARG2 (RSP + -40) A_Stack[-0x78]:8 A_Stack[-0x70]:8
0 COPY 0
 CALL func (RSP + -120)
(RSP + -168) PTRSUB RSP -168
(RSP + -104) PTRSUB RSP -104
(RSP + -104) PTRSUB RSP -104
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -104) 4621980 (RSP + -168)
 CALL func (RSP + -40) (RSP + -104) (RSP + -72) (RSP + -104)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -72) ' value invalid for integer argument!
(RSP + -120) PTRSUB RSP -120
' value invalid for integer argument! COPY ' value invalid for integer argument!
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
f() CALL func [ARG1] [(ARG1 + 8)] ARG2 (RSP + -24)
 STORE 433 ARG3 (A_Stack[-0x18]:8 / 2147483647)
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
~(f()) BOOL_NEGATE f()
0 INT_EQUAL [(FS_OFFSET + 40)] [40]
(RSP + -24) PTRSUB RSP -24
40 CAST 40
~(~(f())) BOOL_NEGATE ~(f())
40 INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f() 0
 CBRANCH ~(f())
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
~(~(f())) COPY ~(~(f()))
[40] LOAD 433 40
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_EQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
(A_Stack[-0x18]:8 / 2147483647) SUBPIECE A_Stack[-0x18]:8 0
 CBRANCH ((A_Stack[-0x18]:8 & 4294967295) INT_EQUAL A_Stack[-0x18]:8)
1 COPY 1
0 COPY 0
 BRANCH VZERO
(A_Stack[-0x18]:8 & 4294967295) INT_AND A_Stack[-0x18]:8 4294967295
0 INT_EQUAL (A_Stack[-0x18]:8 & 4294967295) A_Stack[-0x18]:8
 RETURN 0 ~(~(f()))
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
ARG5 COPY ARG5
ARG6 COPY ARG6
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
f() CALL func (RSP + -168) 0 ARG7
ARG4 COPY ARG4
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
(RSP + -168) PTRSUB RSP -168
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -104) 4621980 (RSP + -168)
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -40) (RSP + -104) (RSP + -72) (RSP + -104)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -72) ' value invalid for uint argument!
(RSP + -120) PTRSUB RSP -120
' value invalid for uint argument! COPY ' value invalid for uint argument!
4621980 PTRSUB 0 4621980
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
f() CALL func ARG2 (RSP + -40) A_Stack[-0x78]:8 A_Stack[-0x70]:8
0 COPY 0
 CALL func (RSP + -120)
(RSP + -168) PTRSUB RSP -168
(RSP + -104) PTRSUB RSP -104
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
f() CALL func [ARG1] [(ARG1 + 8)] ARG2 (RSP + -24)
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 STORE 433 ARG3 A_Stack[-0x18]:8
0 INT_EQUAL f() 0
[40] LOAD 433 40
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
40 CAST 40
 CBRANCH (f() INT_EQUAL 0)
-1 COPY -1
(FS_OFFSET + 40) INT_ADD 0 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -24) PTRSUB RSP -24
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
-1 BOOL_NEGATE 0
 RETURN 1
 RETURN 0 -1
 CALL libcall___stack_chk_fail_thunk
ARG5 COPY ARG5
ARG6 COPY ARG6
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
f() CALL func (RSP + -168) 0 ARG7
ARG4 COPY ARG4
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
(RSP + -168) PTRSUB RSP -168
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
4621980 PTRSUB 0 4621980
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
f() CALL func ARG2 (RSP + -40) A_Stack[-0x78]:8 A_Stack[-0x70]:8
0 COPY 0
 CALL func (RSP + -120)
(RSP + -168) PTRSUB RSP -168
(RSP + -104) PTRSUB RSP -104
(RSP + -104) PTRSUB RSP -104
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -104) 4621980 (RSP + -168)
 CALL func (RSP + -40) (RSP + -104) (RSP + -72) (RSP + -104)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -72) ' value invalid for uint argument!
(RSP + -120) PTRSUB RSP -120
' value invalid for uint argument! COPY ' value invalid for uint argument!
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 CALL func ARG1 ARG2 ARG3 ARG2
 CALL func ARG1 32
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG1 COPY ARG1
ARG2 COPY ARG2
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -248) PTRSUB RSP -248
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL func (RSP + -248)
[A_Stack[-0xd8]:8] LOAD 433 A_Stack[-0xd8]:8
(RSP + -88) PTRSUB RSP -88
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func (RSP + -88)
 STORE 433 ARG4 f()
(f() + 40) CAST (f() + 40)
 CALL func (RSP + -88)
f() CALL func (RSP + -248)
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -88) f() f() f()
(RSP + -88) PTRSUB RSP -88
f() CALL libcall_strtod_thunk f() (RSP + -216)
f() COPY f()
0 INT_EQUAL [A_Stack[-0xd8]:8] 0
 CBRANCH ([A_Stack[-0xd8]:8] INT_EQUAL 0)
(RSP + -248) PTRSUB RSP -248
(RSP + -216) PTRSUB RSP -216
f() CAST f()
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 COPY 0
' value invalid for floating point argument! COPY ' value invalid for floating point argument!
(RSP + -120) PTRSUB RSP -120
4621980 PTRSUB 0 4621980
(RSP + -152) PTRSUB RSP -152
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -120) (RSP + -184) (RSP + -152) (RSP + -184)
(RSP + -248) PTRSUB RSP -248
 BRANCH VZERO
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -184) 4621980 (RSP + -248)
(RSP + -120) PTRSUB RSP -120
(RSP + -184) PTRSUB RSP -184
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -152) ' value invalid for floating point argument!
f() CALL func ARG1 (RSP + -120) A_Stack[-0xc8]:8 A_Stack[-0xc0]:8
 CALL func (RSP + -200)
 RETURN 0 f()
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG2 ARG5 ARG6 ARG7
 RETURN 0
f() CALL func ARG2 ARG5 ARG6 (RSP + -24)
 STORE 433 ARG7 A_Stack[-0x18]:8
[40] LOAD 433 40
-1 COPY -1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH ([(FS_OFFSET + 40)] INT_EQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
40 INT_ADD 0 40
(RSP + -24) PTRSUB RSP -24
0 INT_EQUAL [(FS_OFFSET + 40)] [40]
-1 BOOL_NEGATE 0
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
A_Stack[-0x18]:8 FLOAT2FLOAT A_Stack[-0x18]:8
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 -1
[ARG1] LOAD 433 ARG1
VZERO CALLIND [([ARG1] + 16)] ARG1 ARG2 ARG1
[ARG1] LOAD 433 ARG1
VZERO CALLIND [([ARG1] + 24)] ARG1 f() ARG1 f()
f() CALL libcall_strcmp_thunk VZERO ARG2
([ARG1] + 16) INT_ADD [ARG1] 16
([ARG1] + 16) CAST ([ARG1] + 16)
 CBRANCH (f() INT_EQUAL VZERO)
[([ARG1] + 16)] LOAD 433 ([ARG1] + 16)
0 COPY 0
0 INT_EQUAL f() VZERO
VZERO COPY VZERO
f() COPY f()
 RETURN 0 f()
([ARG1] + 24) INT_ADD [ARG1] 24
0 INT_EQUAL f() 0
([ARG1] + 24) CAST ([ARG1] + 24)
[([ARG1] + 24)] LOAD 433 ([ARG1] + 24)
VZERO CAST VZERO
 CBRANCH (f() INT_EQUAL 0)
 RETURN 0 VZERO
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
VZERO CALLIND [([ARG1] + 16)] ARG1
[ARG1] LOAD 433 ARG1
VZERO CALLIND [([ARG1] + 16)] ARG1
VZERO CALLIND [([ARG1] + 24)] ARG1 f() ARG1 f()
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
VZERO CALLIND [([ARG1] + 24)] ARG1 f() ARG1 f()
f() CALL func ARG2
(ARG2 + 24) INT_ADD ARG2 24
 CBRANCH (f() INT_EQUAL [(f() + 40)])
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
 RETURN 1
 RETURN 0 f(ARG2 , RSP)
 CALL libcall___stack_chk_fail_thunk
([ARG1] + 16) INT_ADD [ARG1] 16
f() CALL libcall_strlen_thunk [(ARG2 + 24)]
([ARG1] + 16) INT_ADD [ARG1] 16
[([ARG1] + 16)] LOAD 433 ([ARG1] + 16)
0 COPY 0
[([ARG1] + 16)] LOAD 433 ([ARG1] + 16)
0 COPY 0
(f() + 6) INT_ADD f() 6
([ARG1] + 16) CAST ([ARG1] + 16)
([ARG1] + 16) CAST ([ARG1] + 16)
0 COPY 0
0 INT_NOTEQUAL f() VZERO
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
 CBRANCH (f() INT_NOTEQUAL VZERO)
(ARG2 + 24) CAST (ARG2 + 24)
0 INT_NOTEQUAL f() VZERO
 CBRANCH (f() INT_NOTEQUAL VZERO)
f(ARG2 , RSP) CALL func (RSP + -32)
[f(ARG2 , RSP)] LOAD 433 f(ARG2 , RSP)
(RSP + -32) PTRSUB RSP -32
([ARG1] + 24) CAST ([ARG1] + 24)
f() CALL libcall_strlen_thunk VZERO
([ARG1] + 24) INT_ADD [ARG1] 24
VZERO CAST VZERO
f(ARG2 , RSP) CAST f(ARG2 , RSP)
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(f() + 8) INT_ADD f() 8
[([ARG1] + 24)] LOAD 433 ([ARG1] + 24)
[f(ARG2 , RSP)] LOAD 433 f(ARG2 , RSP)
 BRANCH VZERO
(f() + 8) INT_ADD f() 8
(f() + 1) INT_ADD f() 1
f(ARG2 , RSP) CALL func (RSP + -32)
([ARG1] + 24) CAST ([ARG1] + 24)
(RSP + -32) PTRSUB RSP -32
f() CALL libcall_strlen_thunk VZERO
VZERO CAST VZERO
([ARG1] + 24) INT_ADD [ARG1] 24
f(ARG2 , RSP) CAST f(ARG2 , RSP)
[([ARG1] + 24)] LOAD 433 ([ARG1] + 24)
VZERO CALLIND [([ARG1] + 32)] ARG1 f() ARG1 f()
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
VZERO CALLIND [([ARG1] + 24)] ARG1 f() ARG1 f()
VZERO CALLIND [([ARG1] + 16)] ARG1
VZERO CALLIND [([ARG1] + 24)] ARG1 f() ARG1 f()
VZERO CALLIND [([ARG1] + 16)] ARG1
[ARG1] LOAD 433 ARG1
VZERO CALLIND [([ARG1] + 32)] ARG1 f() ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
VZERO CALLIND [([ARG1] + 24)] ARG1 f() ARG1
f() CALL func ARG2
(ARG2 + 32) INT_ADD ARG2 32
(ARG2 + 24) INT_ADD ARG2 24
(ARG2 + 32) INT_ADD ARG2 32
(ARG2 + 24) INT_ADD ARG2 24
(ARG2 + 32) INT_ADD ARG2 32
(ARG3 - f()) INT_SUB ARG3 f()
 CALL func f() f() ARG3
 CALL func A_Stack[-0x38]:8 A_Stack[-0x30]:8 ARG3 (f() + 6)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL f() [(f() + 40)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f() INT_NOTEQUAL VZERO)
- COPY -
([ARG1] + 32) INT_ADD [ARG1] 32
[([ARG1] + 32)] LOAD 433 ([ARG1] + 32)
 CALL libcall_strlen_thunk VZERO
([ARG1] + 24) CAST ([ARG1] + 24)
f() CALL func
 CALL func (RSP + -56) VZERO VZERO
 BRANCH VZERO
([ARG1] + 32) CAST ([ARG1] + 32)
(f() + 1) INT_ADD f() 1
([ARG1] + 24) INT_ADD [ARG1] 24
VZERO CAST VZERO
[([ARG1] + 24)] LOAD 433 ([ARG1] + 24)
0 INT_NOTEQUAL f() VZERO
f() CALL func f() -
 CALL func f() VZERO f()
(RSP + -56) PTRSUB RSP -56
([ARG1] + 16) INT_ADD [ARG1] 16
4621880 PTRSUB 0 4621880
(ARG2 + 24) CAST (ARG2 + 24)
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
[([ARG1] + 16)] LOAD 433 ([ARG1] + 16)
([ARG1] + 16) CAST ([ARG1] + 16)
[[(ARG2 + 32)]] LOAD 433 [(ARG2 + 32)]
(ARG2 + 32) CAST (ARG2 + 32)
[([ARG1] + 16)] LOAD 433 ([ARG1] + 16)
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_NOTEQUAL VZERO)
([ARG1] + 16) CAST ([ARG1] + 16)
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
 CALL func (RSP + -56) [(ARG2 + 32)] [(ARG2 + 32)]
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
0 INT_NOTEQUAL f() VZERO
 CALL func f() [(ARG2 + 24)]
(ARG2 + 32) CAST (ARG2 + 32)
(ARG2 + 24) CAST (ARG2 + 24)
0 COPY 0
f() CALL func f() 4621880
0 COPY 0
(f() + 6) INT_ADD f() 6
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
0 INT_NOTEQUAL [[(ARG2 + 32)]] 0
 CBRANCH ([[(ARG2 + 32)]] INT_NOTEQUAL 0)
f() CALL libcall_strlen_thunk [(ARG2 + 24)]
f() CALL func
([ARG1] + 16) INT_ADD [ARG1] 16
f() CALL func
4622121 PTRSUB 0 4622121
(ARG2 + 32) CAST (ARG2 + 32)
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
f() CALL func f() 4622121
f() CALL func f() [(ARG2 + 32)]
 CALL func f() 10
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
f() CALL func f() =
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
[([ARG1] + 24)] LOAD 433 ([ARG1] + 24)
f() CALL libcall_strlen_thunk VZERO
(4294967295 & ((ARG3 - f()) + -8)) INT_AND ((ARG3 - f()) + -8) 4294967295
-    COPY -   
([ARG1] + 32) INT_ADD [ARG1] 32
VZERO CAST VZERO
f() CALL func f() (4294967295 & ((ARG3 - f()) + -8))
f() CALL func
((ARG3 - f()) + -8) INT_SUB (ARG3 - f()) -8
 CALL func f()
= COPY =
[([ARG1] + 32)] LOAD 433 ([ARG1] + 32)
f() CALL func
([ARG1] + 24) CAST ([ARG1] + 24)
([ARG1] + 32) CAST ([ARG1] + 32)
([ARG1] + 24) CAST ([ARG1] + 24)
f() CALL func f() VZERO
([ARG1] + 24) INT_ADD [ARG1] 24
 CALL func f() VZERO
[([ARG1] + 24)] LOAD 433 ([ARG1] + 24)
f() CALL func f() -   
([ARG1] + 24) INT_ADD [ARG1] 24
VZERO CALLIND [([ARG1] + 16)] ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
VZERO CALLIND [([ARG1] + 24)] ARG1 f() ARG1 f()
 CALLIND [([ARG1] + 48)] ARG1 f() ARG1 f()
 CALLIND [([ARG1] + 48)] ARG1 f() ARG1 f()
VZERO CALLIND [([ARG1] + 24)] ARG1 f() ARG1 f()
VZERO CALLIND [([ARG1] + 24)] ARG1 f() ARG1 f()
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
(ARG2 + 24) INT_ADD ARG2 24
(ARG2 + 24) INT_ADD ARG2 24
VZERO CALLIND [[ARG3]] ARG3
[ARG3] LOAD 433 ARG3
(ARG5 - (f() / 2147483647)) INT_SUB ARG5 (f() / 2147483647)
VZERO CALLIND [[ARG4]] ARG4
[ARG4] LOAD 433 ARG4
4621880 PTRSUB 0 4621880
([ARG1] + 16) INT_ADD [ARG1] 16
 CALL func f() (ARG5 - (f() / 2147483647))
(ARG2 + 24) CAST (ARG2 + 24)
[([ARG1] + 16)] LOAD 433 ([ARG1] + 16)
f() CALL libcall_strlen_thunk [(ARG2 + 24)]
0 COPY 0
 CALL func f() [(ARG2 + 24)]
0 INT_EQUAL f() VZERO
 CBRANCH (f() INT_EQUAL VZERO)
(f() / 2147483647) SUBPIECE f() 0
f() CALL func
(ARG2 + 24) CAST (ARG2 + 24)
f() CALL func
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
([ARG1] + 16) CAST ([ARG1] + 16)
f() CALL func f() 4621880
 CBRANCH (VZERO INT_EQUAL 0)
(default:  COPY (default: 
 CBRANCH (f() INT_LESS 8)
 CBRANCH (f() INT_EQUAL VZERO)
([ARG1] + 24) INT_ADD [ARG1] 24
(f() & 4294967295) INT_AND f() 4294967295
0 INT_EQUAL f() VZERO
f() CALL func
f() CALL func
([ARG1] + 24) CAST ([ARG1] + 24)
([ARG1] + 24) CAST ([ARG1] + 24)
[([ARG1] + 24)] LOAD 433 ([ARG1] + 24)
 CALL func f() 4622159
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
 RETURN 0
f() CALL libcall_strlen_thunk VZERO
 CALL func f() VZERO
4622159 PTRSUB 0 4622159
 CALL func f() (default: 
0 COPY 0
f() CALL func
4622144 PTRSUB 0 4622144
([ARG1] + 24) INT_ADD [ARG1] 24
f() CALL func f() 4622144
[([ARG1] + 24)] LOAD 433 ([ARG1] + 24)
0 INT_LESS f() 8
VZERO CAST VZERO
f() CALL func f() (f() & 4294967295)
 RETURN 0
0 COPY 0
(8 - f()) INT_SUB 8 f()
 BRANCH VZERO
([ARG1] + 48) CAST ([ARG1] + 48)
0 INT_EQUAL VZERO 0
([ARG1] + 48) INT_ADD [ARG1] 48
 CBRANCH (VZERO INT_EQUAL 0)
[ARG4] CAST [ARG4]
[[ARG4]] LOAD 433 [ARG4]
[([ARG1] + 48)] LOAD 433 ([ARG1] + 48)
f() CALL func
 CALL func f() VZERO
([ARG1] + 24) CAST ([ARG1] + 24)
([ARG1] + 24) INT_ADD [ARG1] 24
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
[([ARG1] + 24)] LOAD 433 ([ARG1] + 24)
 BRANCH VZERO
([ARG1] + 48) CAST ([ARG1] + 48)
= *unknown option value*  COPY = *unknown option value* 
[ARG3] CAST [ARG3]
f() CALL func
0 INT_EQUAL VZERO 0
([ARG1] + 48) INT_ADD [ARG1] 48
[([ARG1] + 48)] LOAD 433 ([ARG1] + 48)
 CALL func f() = *unknown option value* 
[[ARG3]] LOAD 433 [ARG3]
(ARG1 + 12) INT_ADD ARG1 12
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
[(ARG1 + 12)] COPY [(ARG1 + 12)]
(ARG1 + 12) CAST (ARG1 + 12)
 RETURN 0 [(ARG1 + 12)]
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(ARG1 + 12) CAST (ARG1 + 12)
0 INT_EQUAL [(ARG1 + 12)] 0
 CBRANCH ([(ARG1 + 12)] INT_EQUAL 0)
const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = llvm::cl::boolOrDefault] COPY const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = llvm::cl::boolOrDefault]
 RETURN 1
Valid && "invalid option value" COPY Valid && "invalid option value"
 RETURN 0 (ARG1 + 8)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
 CALL libcall___assert_fail_thunk Valid && "invalid option value" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 412 const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = llvm::cl::boolOrDefault]
 CALL func ARG1 ARG2 ARG5 ARG2
f() CALL func ARG4
f() CALL func ARG4
 CALL func (RSP + -120) ARG3 ARG3
f() CALL func
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 CALL func f() (default: 
f() CALL libcall_size_thunk
 CALL func (RSP + -120)
0 INT_NOTEQUAL f() [(f() + 40)]
f() CALL func
(f() + 40) INT_ADD f() 40
(default:  COPY (default: 
(RSP + -120) PTRSUB RSP -120
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
f() CALL func f() f()
 CALL func f() (RSP + -72) f()
 CALL libcall_basic_string_thunk
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(RSP + -120) PTRSUB RSP -120
 CALL libcall_~basic_string_thunk (RSP + -72)
(RSP + -72) PTRSUB RSP -72
0 INT_LESS f() 8
f() CALL func
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -72) PTRSUB RSP -72
 CBRANCH (f() INT_LESS 8)
4622159 PTRSUB 0 4622159
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL func f() 4622144
(RSP + -120) PTRSUB RSP -120
(RSP + -72) PTRSUB RSP -72
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func f() 4622159
4622144 PTRSUB 0 4622144
 CALL func (RSP + -120) (RSP + -72) (RSP + -72)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 BRANCH VZERO
0 COPY 0
(8 - f()) INT_SUB 8 f()
f() CALL libcall_size_thunk
*no default* COPY *no default*
f() CALL func
 CALL func f() [f()]
[f()] LOAD 433 f()
 CALL func f() *no default*
 BRANCH VZERO
f() CAST f()
f() CALL func
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(ARG1 + 12) CAST (ARG1 + 12)
0 INT_EQUAL [(ARG1 + 12)] 0
 CBRANCH ([(ARG1 + 12)] INT_EQUAL 0)
 CALL libcall___assert_fail_thunk Valid && "invalid option value" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 412 const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = int]
const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = int] COPY const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = int]
 RETURN 1
Valid && "invalid option value" COPY Valid && "invalid option value"
 RETURN 0 (ARG1 + 8)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
(ARG1 + 12) INT_ADD ARG1 12
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
[(ARG1 + 12)] COPY [(ARG1 + 12)]
(ARG1 + 12) CAST (ARG1 + 12)
 RETURN 0 [(ARG1 + 12)]
 CALL func ARG1 ARG2 ARG5 ARG2
f() CALL func ARG4
f() CALL func ARG4
 CALL func (RSP + -120) ARG3 ARG3
0 INT_LESS f() 8
 CALL libcall_~basic_string_thunk (RSP + -72)
f() CALL func
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -120) PTRSUB RSP -120
 CBRANCH (f() INT_LESS 8)
f() CALL func f() 4622144
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -120) PTRSUB RSP -120
 CALL func f() 4622159
4622159 PTRSUB 0 4622159
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -120) (RSP + -72) (RSP + -72)
f() CALL func
 CALL func f() (default: 
f() CALL libcall_size_thunk
4622144 PTRSUB 0 4622144
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 CALL func (RSP + -120)
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
f() CALL func
(default:  COPY (default: 
f() CALL func f() f()
(RSP + -120) PTRSUB RSP -120
 CALL func f() (RSP + -72) f()
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
 CALL libcall_basic_string_thunk
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
(8 - f()) INT_SUB 8 f()
 BRANCH VZERO
f() CALL libcall_size_thunk
0 COPY 0
[f()] LOAD 433 f()
f() CALL func
 CALL func f() [f()]
 CALL func f() *no default*
 BRANCH VZERO
f() CALL func
*no default* COPY *no default*
f() CAST f()
 CALL func ARG1 ARG2 ARG5 ARG2
f() CALL func ARG4
f() CALL func ARG4
 CALL func (RSP + -120) ARG3 ARG3
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
0 INT_NOTEQUAL f() [(f() + 40)]
f() CALL func
(f() + 40) INT_ADD f() 40
 CALL func (RSP + -120)
(RSP + -120) PTRSUB RSP -120
 CALL func f() (RSP + -72) f()
 CALL libcall_basic_string_thunk
(default:  COPY (default: 
f() CALL func f() f()
 CBRANCH (f() INT_EQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
0 INT_EQUAL f() 0
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -120) PTRSUB RSP -120
0 INT_LESS f() 8
f() CALL func
 CALL libcall_~basic_string_thunk (RSP + -72)
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
 CBRANCH (f() INT_LESS 8)
f() CALL func f() 4622144
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func f() 4622159
4622159 PTRSUB 0 4622159
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -120) (RSP + -72) (RSP + -72)
(RSP + -120) PTRSUB RSP -120
4622144 PTRSUB 0 4622144
(RSP + -72) PTRSUB RSP -72
f() CALL func
 CALL func f() (default: 
f() CALL libcall_size_thunk
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 BRANCH VZERO
[f()] LOAD 433 f()
*no default* COPY *no default*
f() CAST f()
f() CALL func
 CALL func f() [f()]
 CALL func f() *no default*
f() CALL func
(8 - f()) INT_SUB 8 f()
f() CALL libcall_size_thunk
 BRANCH VZERO
0 COPY 0
(ARG1 + 16) INT_ADD ARG1 16
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 0 [(ARG1 + 16)]
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL [(ARG1 + 16)] 0
 CALL libcall___assert_fail_thunk Valid && "invalid option value" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 412 const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = long long unsigned int]
const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = long long unsigned int] COPY const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = long long unsigned int]
 RETURN 1
Valid && "invalid option value" COPY Valid && "invalid option value"
 RETURN 0 (ARG1 + 8)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
 CALL func ARG1 ARG2 ARG5 ARG2
 CALL func (RSP + -120) ARG3 ARG3
f() CALL func ARG4
f() CALL func ARG4
(RSP + -120) PTRSUB RSP -120
 CBRANCH (f() INT_LESS 8)
(f() + 40) CAST (f() + 40)
(default:  COPY (default: 
f() CALL func f() 4622144
 CALL func f() 4622159
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -120) (RSP + -72) (RSP + -72)
 CALL func f() (default: 
f() CALL libcall_size_thunk
f() CALL func
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
f() CALL func
 CALL func (RSP + -120)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL f() [(f() + 40)]
4622159 PTRSUB 0 4622159
 CALL func f() (RSP + -72) f()
(RSP + -120) PTRSUB RSP -120
4622144 PTRSUB 0 4622144
(RSP + -72) PTRSUB RSP -72
 CALL libcall_basic_string_thunk
f() CALL func f() f()
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_LESS f() 8
 CALL libcall_~basic_string_thunk (RSP + -72)
f() CALL func
(FS_OFFSET + 40) INT_ADD 0 40
0 COPY 0
(8 - f()) INT_SUB 8 f()
f() CALL libcall_size_thunk
 BRANCH VZERO
 CALL func f() [f()]
f() CALL func
 CALL func f() *no default*
f() CALL func
f() CAST f()
*no default* COPY *no default*
 BRANCH VZERO
[f()] LOAD 433 f()
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
0 INT_EQUAL [(ARG1 + 16)] 0
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 CALL libcall___assert_fail_thunk Valid && "invalid option value" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 412 const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = double]
const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = double] COPY const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = double]
 RETURN 1
Valid && "invalid option value" COPY Valid && "invalid option value"
 RETURN 0 (ARG1 + 8)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
(ARG1 + 16) INT_ADD ARG1 16
 RETURN 0 [(ARG1 + 16)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
(ARG1 + 16) CAST (ARG1 + 16)
 CALL func ARG1 (RSP + -120)
f() CALL func ARG4
f() CALL func ARG4
 CALL func ARG2 ARG3 ARG5 ARG3
0 INT_LESS f() 8
(RSP + -120) PTRSUB RSP -120
 CALL func f() 4622159
f() CALL func
(RSP + -72) PTRSUB RSP -72
 CALL libcall_basic_string_thunk
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_LESS 8)
f() CALL func f() 4622144
(RSP + -120) PTRSUB RSP -120
(FS_OFFSET + 40) INT_ADD 0 40
(default:  COPY (default: 
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
f() CALL func
(RSP + -72) PTRSUB RSP -72
f() CALL func
 CALL func f() (default: 
f() CALL libcall_size_thunk
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -120)
[(f() + 40)] LOAD 433 (f() + 40)
4622159 PTRSUB 0 4622159
(RSP + -72) PTRSUB RSP -72
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -120) (RSP + -72) (RSP + -72)
f() CALL func f() f()
 CALL libcall_~basic_string_thunk (RSP + -72)
 CALL func f() (RSP + -72) f()
4622144 PTRSUB 0 4622144
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
(8 - f()) INT_SUB 8 f()
 BRANCH VZERO
f() CALL libcall_size_thunk
0 COPY 0
[f()] LOAD 433 f()
 BRANCH VZERO
f() CALL func
f() CAST f()
 CALL func [f()] f()
 CALL func f() *no default*
*no default* COPY *no default*
f() CALL func
(ARG1 + 12) INT_ADD ARG1 12
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
[(ARG1 + 12)] COPY [(ARG1 + 12)]
(ARG1 + 12) CAST (ARG1 + 12)
 RETURN 0 [(ARG1 + 12)]
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(ARG1 + 12) CAST (ARG1 + 12)
0 INT_EQUAL [(ARG1 + 12)] 0
 CBRANCH ([(ARG1 + 12)] INT_EQUAL 0)
const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = float] COPY const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = float]
 RETURN 1
Valid && "invalid option value" COPY Valid && "invalid option value"
 RETURN 0 (ARG1 + 8)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
 CALL libcall___assert_fail_thunk Valid && "invalid option value" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 412 const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = float]
 CALL func ARG2 ARG3 ARG5 ARG3
f() CALL func ARG4
f() CALL func ARG4
ARG1 FLOAT2FLOAT ARG1
f() CALL func f() f()
 CALL libcall_basic_string_thunk
 CALL func f() (RSP + -72) f()
4622159 PTRSUB 0 4622159
(RSP + -120) PTRSUB RSP -120
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 CALL func ARG1 (RSP + -120)
 CALL func f() 4622159
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(RSP + -72) PTRSUB RSP -72
0 INT_LESS f() 8
f() CALL func f() 4622144
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL f() [(f() + 40)]
(RSP + -120) PTRSUB RSP -120
(f() + 40) INT_ADD f() 40
f() CALL func
 CBRANCH (f() INT_LESS 8)
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -120) (RSP + -72) (RSP + -72)
4622144 PTRSUB 0 4622144
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
f() CALL func
 CALL func f() (default: 
f() CALL libcall_size_thunk
 CALL func (RSP + -120)
 CALL libcall_~basic_string_thunk (RSP + -72)
(RSP + -72) PTRSUB RSP -72
(default:  COPY (default: 
(RSP + -120) PTRSUB RSP -120
 BRANCH VZERO
0 COPY 0
f() CALL libcall_size_thunk
(8 - f()) INT_SUB 8 f()
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
f() CALL func
f() CAST f()
 CALL func [f()] f()
[f()] FLOAT2FLOAT [f()]
[f()] LOAD 433 f()
f() CALL func
 CALL func f() *no default*
*no default* COPY *no default*
 BRANCH VZERO
(ARG1 + 9) INT_ADD ARG1 9
[(ARG1 + 9)] LOAD 433 (ARG1 + 9)
[(ARG1 + 9)] COPY [(ARG1 + 9)]
(ARG1 + 9) CAST (ARG1 + 9)
 RETURN 0 [(ARG1 + 9)]
(ARG1 + 9) INT_ADD ARG1 9
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 9)] LOAD 433 (ARG1 + 9)
(ARG1 + 9) CAST (ARG1 + 9)
0 INT_EQUAL [(ARG1 + 9)] 0
 CBRANCH ([(ARG1 + 9)] INT_EQUAL 0)
 CALL libcall___assert_fail_thunk Valid && "invalid option value" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 412 const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = char]
const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = char] COPY const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = char]
 RETURN 1
Valid && "invalid option value" COPY Valid && "invalid option value"
 RETURN 0 (ARG1 + 8)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
 CALL func ARG1 ARG2 ARG5 ARG2
f() CALL func ARG4
f() CALL func ARG4
ARG3 INT_SEXT ARG3
[(f() + 40)] LOAD 433 (f() + 40)
 CALL func f() (RSP + -72) f()
(RSP + -120) PTRSUB RSP -120
f() CALL func f() f()
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -120) ARG3 ARG3
 CALL libcall_basic_string_thunk
 CALL libcall_~basic_string_thunk (RSP + -72)
(RSP + -72) PTRSUB RSP -72
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
4622159 PTRSUB 0 4622159
0 INT_LESS f() 8
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -120) PTRSUB RSP -120
4622144 PTRSUB 0 4622144
 CBRANCH (f() INT_LESS 8)
f() CALL func f() 4622144
(RSP + -72) PTRSUB RSP -72
 CALL func f() 4622159
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 CALL func (RSP + -120) (RSP + -72) (RSP + -72)
(f() + 40) CAST (f() + 40)
(RSP + -120) PTRSUB RSP -120
f() CALL func
 CALL func f() (default: 
f() CALL libcall_size_thunk
0 INT_NOTEQUAL f() [(f() + 40)]
f() CALL func
(f() + 40) INT_ADD f() 40
(default:  COPY (default: 
 CALL func (RSP + -120)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
f() CALL libcall_size_thunk
0 COPY 0
(8 - f()) INT_SUB 8 f()
 BRANCH VZERO
 CALL func f() *no default*
 BRANCH VZERO
[f()] INT_SEXT [f()]
f() CALL func
[f()] LOAD 433 f()
*no default* COPY *no default*
f() CALL func
 CALL func f() [f()]
f() CAST f()
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 40) INT_ADD ARG1 40
 CBRANCH ([(ARG1 + 40)] INT_EQUAL 0)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
0 INT_EQUAL [(ARG1 + 40)] 0
 CALL libcall___assert_fail_thunk Valid && "invalid option value" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 412 0
0 COPY 0
 RETURN 1
Valid && "invalid option value" COPY Valid && "invalid option value"
 RETURN 0 (ARG1 + 8)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
(ARG1 + 40) INT_ADD ARG1 40
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
[(ARG1 + 40)] COPY [(ARG1 + 40)]
(ARG1 + 40) CAST (ARG1 + 40)
 RETURN 0 [(ARG1 + 40)]
ARG4 COPY ARG4
f() CALL func ARG5
f() CALL func ARG5
 CALL func ARG1 ARG2 ARG6 ARG2
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
 CBRANCH (f() INT_LESS 8)
4622159 PTRSUB 0 4622159
f() CALL func f() 4622144
4622144 PTRSUB 0 4622144
 CALL func f() 4622159
f() CALL func (RSP + -72)
 CALL func f() (default: 
(f() & 4294967295) INT_AND f() 4294967295
(default:  COPY (default: 
f() CALL func
f() CALL func
f() CALL func f() (f() & 4294967295)
 CALL func f() ARG3 ARG4 f()
(RSP + -72) PTRSUB RSP -72
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 RETURN 0
0 INT_LESS f() 8
f() CALL func
f() CALL func (RSP + -72)
0 COPY 0
(8 - f()) INT_SUB 8 f()
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
 BRANCH VZERO
f() CALL func
f() CALL func
*no default* COPY *no default*
 CALL func f() f()
 CALL func f() *no default*
[ARG1] LOAD 433 ARG1
[ARG2] LOAD 433 ARG2
 CALL libcall_strcmp_thunk [ARG1] [ARG2]
 RETURN 0
(ARG1 + 24) INT_ADD ARG1 24
 CALL func ARG1 (ARG1 + 24) ARG2 ARG3
 RETURN 0
 CALL func ARG1 (ARG2 * 16) 16 (ARG2 * 16)
(ARG2 * 16) INT_LEFT ARG2 4
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
 RETURN 0 [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) INT_ADD ARG1 8
 STORE 433 (ARG1 + 8) ARG2
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1 0
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1 (f() + 16) (f() + 16)
(ARG2 + 8) PTRADD ARG2 1 8
[ARG2] LOAD 433 ARG2
 STORE 433 f() [ARG2]
0 INT_LESSEQUAL [(ARG1 + 16)] [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() CAST f()
(ARG1 + 16) CAST (ARG1 + 16)
(f() + 8) PTRADD f() 1 8
 CBRANCH ([(ARG1 + 16)] INT_LESSEQUAL [(ARG1 + 8)])
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(f() + 16) INT_ADD f() 16
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 STORE 433 (f() + 8) [(ARG2 + 8)]
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 [f(ARG2)]
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
 STORE 433 (ARG1 + 16) [f(ARG3)]
(ARG1 + 16) CAST (ARG1 + 16)
f(ARG2) CAST f(ARG2)
f(ARG3) CAST f(ARG3)
 STORE 433 (ARG1 + 8) [(f(ARG2) + 8)]
[f(ARG2)] LOAD 433 f(ARG2)
 RETURN 0
[f(ARG3)] LOAD 433 f(ARG3)
[(f(ARG2) + 8)] LOAD 433 (f(ARG2) + 8)
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
 CALL func ARG1 f(ARG2) f(ARG3) f(ARG2)
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -40) (RSP + -48) (RSP + -40)
f() CALL func ARG2 f(ARG3) f(ARG3)
(ARG2 + 8) INT_ADD ARG2 8
(ARG2 + 16) INT_ADD ARG2 16
f(ARG3) CALL func ARG3
([(ARG2 + 8)] + ([(ARG2 + 16)] * 8)) INT_ADD [(ARG2 + 8)] ([(ARG2 + 16)] * 8)
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
(RSP + -48) PTRSUB RSP -48
(RSP + -40) PTRSUB RSP -40
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
40 INT_ADD 0 40
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
([(ARG2 + 16)] * 8) INT_MULT [(ARG2 + 16)] 8
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[40] LOAD 433 40
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) (f() / 2147483647) ([(ARG2 + 8)] + ([(ARG2 + 16)] * 8)) (f() / 2147483647)
[(ARG2 + 16)] INT_ZEXT [(ARG2 + 16)]
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
(f() / 2147483647) INT_RIGHT f() 64
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(ARG2 + 16) CAST (ARG2 + 16)
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 (ARG1 + 32) 128 (ARG1 + 32)
(ARG1 + 32) INT_ADD ARG1 32
 RETURN 0
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
f() CALL func ARG1
f() CALL func ARG1
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -56) f() f() f()
[40] LOAD 433 40
(RSP + -56) PTRSUB RSP -56
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
(ARG1 + 12) INT_ADD ARG1 12
(3 & ([(ARG1 + 12)] / 32)) COPY (3 & ([(ARG1 + 12)] / 32))
(3 & ([(ARG1 + 12)] / 32)) INT_AND ([(ARG1 + 12)] / 32) 3
([(ARG1 + 12)] / 32) INT_RIGHT [(ARG1 + 12)] 5
(ARG1 + 12) CAST (ARG1 + 12)
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
 RETURN 0 (3 & ([(ARG1 + 12)] / 32))
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 [f(ARG2)]
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
[f(ARG3)] LOAD 433 f(ARG3)
f(ARG2) CAST f(ARG2)
 STORE 433 (ARG1 + 8) [f(ARG3)]
 RETURN 0
f(ARG3) CAST f(ARG3)
[f(ARG2)] LOAD 433 f(ARG2)
 CALL libcall_qsort_thunk ARG1 ((ARG2 - ARG1) / 16) 16 ARG3
ARG1 CAST ARG1
(ARG2 - ARG1) INT_SUB ARG2 ARG1
0 INT_SLESS 1 ((ARG2 - ARG1) / 16)
((ARG2 - ARG1) / 16) CAST ((ARG2 - ARG1) / 16)
((ARG2 - ARG1) / 16) INT_SRIGHT (ARG2 - ARG1) 4
 RETURN 0
 CBRANCH (1 INT_SLESS ((ARG2 - ARG1) / 16))
 BRANCH VZERO
[ARG1] LOAD 433 ARG1
[ARG1] CAST [ARG1]
 RETURN 0 [[ARG1]]
[[ARG1]] LOAD 433 [ARG1]
[[ARG1]] COPY [[ARG1]]
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG2 (RSP + -1128) (RSP + -1128)
f() CALL func ARG2
f() CALL func ARG2
0 INT_NOTEQUAL ARG3 1
f() CALL func ARG1
f() CALL func ARG1
 CALL func f() f() 4448300
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -1168) PTRSUB RSP -1168
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1096) PTRSUB RSP -1096
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (0 INT_EQUAL [40])
(RSP + -1160) PTRSUB RSP -1160
 CALL func (RSP + -1096)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL 0 [40]
(f() + 40) INT_ADD f() 40
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1096) PTRSUB RSP -1096
0 INT_EQUAL f() 0
(f() / 2147483647) SUBPIECE f() 0
[40] LOAD 433 (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -1096)
(A_Stack[-0x470]:8 # A_Stack[-0x478]:8) PIECE A_Stack[-0x470]:8 A_Stack[-0x478]:8
f() CALL func (RSP + -1168) (RSP + -1160) (RSP + -1160)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 8
4448300 PTRSUB 0 4448300
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_EQUAL 1)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1168) PTRSUB RSP -1168
(RSP + -1144) PTRSUB RSP -1144
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1128) PTRSUB RSP -1128
f() CALL func (RSP + -1144)
(f() / 2147483647) SUBPIECE f() 8
(f() + 8) INT_ADD f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -1168)
 CALL func (RSP + -1128) (RSP + -1152) (f() + 8) (RSP + -1152)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1128) PTRSUB RSP -1128
(RSP + -1168) PTRSUB RSP -1168
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f()
(RSP + -1152) PTRSUB RSP -1152
f() COPY f()
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
f() CALL func (RSP + -1168)
(f() / 2147483647) SUBPIECE f() 0
0 INT_NOTEQUAL f() 2
(f() / 2147483647) SUBPIECE f() 8
[(f() + 8)] LOAD 433 (f() + 8)
(RSP + -1168) PTRSUB RSP -1168
(f() + 8) CAST (f() + 8)
(RSP + -1168) PTRSUB RSP -1168
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -1168)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(f() + 8) INT_ADD f() 8
f() CALL func [(f() + 8)]
 CBRANCH (f() INT_NOTEQUAL 2)
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -1168)
f() CALL func (RSP + -1168)
0 INT_EQUAL f() 1
[(f() + 8)] LOAD 433 (f() + 8)
(f() / 2147483647) SUBPIECE f() 8
(f() + 8) CAST (f() + 8)
(RSP + -1168) PTRSUB RSP -1168
(f() / 2147483647) SUBPIECE f() 0
f() CALL func [(f() + 8)]
(f() / 2147483647) SUBPIECE f() 8
(f() + 8) INT_ADD f() 8
 CBRANCH ~(f())
~(f()) BOOL_NEGATE f()
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_EQUAL 1)
 CBRANCH (ARG3 INT_NOTEQUAL 1)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CALL func (RSP + -1128) (RSP + -1096) [(f() + 8)] (RSP + -1096)
[(f() + 8)] LOAD 433 (f() + 8)
(RSP + -1096) PTRSUB RSP -1096
(RSP + -1128) PTRSUB RSP -1128
0 INT_EQUAL f() 1
f() CALL func (RSP + -1168)
(RSP + -1168) PTRSUB RSP -1168
(f() / 2147483647) SUBPIECE f() 0
(f() + 8) CAST (f() + 8)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() + 8) INT_ADD f() 8
(f() / 2147483647) SUBPIECE f() 0
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
 RETURN 0 [(ARG1 + 8)]
f() CALL func ARG1
f() CALL func ARG1
(f() - f()) INT_SUB f() f()
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
 RETURN 0 ((f() - f()) / 16)
f() CALL func ARG1
f() CALL func ARG1
0 INT_LESSEQUAL f() ARG2
(ARG2 * 16) INT_MULT ARG2 16
 CBRANCH (f() INT_LESSEQUAL ARG2)
 RETURN 1
0 COPY 0
 RETURN 0 ((ARG2 * 16) + f())
idx < size() COPY idx < size()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
((ARG2 * 16) + f()) INT_ADD (ARG2 * 16) f()
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 139 0
 CALLIND [([[(f() + 8)]] + 32)] [(f() + 8)] ARG3 [([[(f() + 8)]] + 32)] ARG3
f() CALL func ARG2
f() CALL func ARG2 f() f()
0 INT_NOTEQUAL f() f()
 CBRANCH (f() INT_NOTEQUAL f())
0 COPY 0
 RETURN 0
[[(f() + 8)]] LOAD 433 [(f() + 8)]
[(f() + 8)] LOAD 433 (f() + 8)
([[(f() + 8)]] + 32) CAST ([[(f() + 8)]] + 32)
([[(f() + 8)]] + 32) INT_ADD [[(f() + 8)]] 32
[([[(f() + 8)]] + 32)] LOAD 433 ([[(f() + 8)]] + 32)
(f() + 8) CAST (f() + 8)
(f() + 8) INT_ADD f() 8
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
 STORE 433 ARG1 Symbol
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 (ARG1 + 8) ARG2
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 CALL func ARG1
 CALL libcall_operator.delete_thunk ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
[f(ARG2)] LOAD 433 f(ARG2)
([f(ARG2)] & -256) INT_AND [f(ARG2)] -256
([f(ARG2)] & -256) INT_OR ([f(ARG2)] & -256) 0
 RETURN 0 ([f(ARG2)] & -256)
0 INT_NOTEQUAL [f(ARG1)] [f(ARG2)]
f(ARG1) CAST f(ARG1)
f(ARG2) CAST f(ARG2)
[f(ARG1)] LOAD 433 f(ARG1)
0 INT_ZEXT 0
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
 CALL func (RSP + -24) (ARG1 + 8) (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
(RSP + -24) PTRSUB RSP -24
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
 CALL func ARG1 (ARG1 + 24) ARG2 (ARG1 + 24)
(ARG1 + 24) INT_ADD ARG1 24
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
ARG2 INT_ZEXT ARG2
 CALL func ARG1 (ARG2 * 16) (ARG2 * 16)
 RETURN 0
(ARG2 * 16) INT_LEFT ARG2 4
 CALL func ARG1 128
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -24) PTRSUB RSP -24
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 ([ARG1] + 8)
ARG1 COPY ARG1
([ARG1] + 8) INT_ADD [ARG1] 8
 RETURN 0 ARG1
0 INT_EQUAL ARG2 1
[ARG1] LOAD 433 ARG1
 CALLIND [[ARG1]] ARG1 (RSP + -2104) f(RSP) ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CBRANCH (ARG2 INT_EQUAL 1)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(f() + 208)] INT_NOTEQUAL 0)
(f() + 208) CAST (f() + 208)
(f() + 208) INT_ADD f() 208
[(f() + 208)] LOAD 433 (f() + 208)
 CALL func f() [([(f() + 208)] + 32)]
f() CALL func f() 4622273
f() CALL func 6887840
([(f() + 208)] + 32) CAST ([(f() + 208)] + 32)
f() CALL func
([(f() + 208)] + 32) INT_ADD [(f() + 208)] 32
[([(f() + 208)] + 32)] LOAD 433 ([(f() + 208)] + 32)
4622273 PTRSUB 0 4622273
6887840 PTRSUB 0 6887840
 CBRANCH (f() INT_EQUAL 0)
(RSP + -2184) PTRSUB RSP -2184
f() CAST f()
 CALL func f() [f()] f()
f() CALL func
 BRANCH VZERO
(RSP + -2184) PTRSUB RSP -2184
 CALL func (RSP + -2184)
0 INT_EQUAL f() 0
(RSP + -2184) PTRSUB RSP -2184
(RSP + -2176) PTRSUB RSP -2176
[f()] LOAD 433 f()
f() CALL func (RSP + -2184) (RSP + -2176) (RSP + -2176)
f() CALL func (RSP + -2184)
 CBRANCH (f() INT_NOTEQUAL f())
 BRANCH VZERO
f() CALL func
(f() + 8) PTRADD f() 1 8
[f()] LOAD 433 f()
4622273 PTRSUB 0 4622273
[[([f()] + 24)]] LOAD 433 [([f()] + 24)]
[([f()] + 24)] LOAD 433 ([f()] + 24)
[(f() + 32)] LOAD 433 (f() + 32)
f() CALL func f() 4622273
(f() + 32) CAST (f() + 32)
([f()] + 24) CAST ([f()] + 24)
0 INT_NOTEQUAL [[([f()] + 24)]] 0
 CBRANCH ([[([f()] + 24)]] INT_NOTEQUAL 0)
([f()] + 24) INT_ADD [f()] 24
(f() + 32) INT_ADD f() 32
 CALL func f() [(f() + 32)]
0 INT_NOTEQUAL f() f()
 CALL func f() OPTIONS: 
 CALL func (f() + 176) (RSP + -2104) [(ARG1 + 8)] (f() + 176)
(f() + 208) CAST (f() + 208)
f() CALL func (f() + 40)
0 COPY 0
[40] LOAD 433 40
40 CAST 40
 RETURN 1
f() CALL func 6887840
6887840 PTRSUB 0 6887840
f() CALL func
(f() + 176) INT_ADD f() 176
0 INT_NOTEQUAL [(f() + 208)] 0
 CALL func f() 4622275
(f() + 208) INT_ADD f() 208
0 COPY 0
 CALL libcall_exit_thunk 0
(RSP + -2104) PTRSUB RSP -2104
6887840 PTRSUB 0 6887840
f() CALL func (f() + 64)
f() CALL func 6887840
f() CALL func (f() + 40)
USAGE:  COPY USAGE: 
f() CALL func (RSP + -2104)
[ARG1] CAST [ARG1]
[(f() + 32)] LOAD 433 (f() + 32)
(RSP + -2104) PTRSUB RSP -2104
[[ARG1]] LOAD 433 [ARG1]
f() CALL func 6887840
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(f() + 32) CAST (f() + 32)
6887840 PTRSUB 0 6887840
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(f() + 64) INT_ADD f() 64
f() CALL func (f() + 64)
0 INT_NOTEQUAL f() f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() CALL func f() USAGE: 
 CBRANCH ([(f() + 32)] INT_NOTEQUAL 0)
f() CAST f()
4622275 PTRSUB 0 4622275
[options] COPY [options]
 CALL func (RSP + -2104)
(RSP + -2104) PTRSUB RSP -2104
0 INT_NOTEQUAL [(f() + 32)] 0
f() CALL func
OPTIONS:  COPY OPTIONS: 
(f() + 32) INT_ADD f() 32
6887840 PTRSUB 0 6887840
(RSP + -2104) PTRSUB RSP -2104
 CALL func f() [options]
f() CALL func 6887840
 CALL func (f() + 40)
(f() + 40) INT_ADD f() 40
(f() + 40) INT_ADD f() 40
[(f() + 208)] LOAD 433 (f() + 208)
f() CALL func
f() CALL func 6887840
f() CAST f()
(ARG1 + 8) CAST (ARG1 + 8)
6887840 PTRSUB 0 6887840
6887840 PTRSUB 0 6887840
f() CALL func f() f()
6887840 PTRSUB 0 6887840
f() CALL func 6887840
f() CALL func 6887840
 CBRANCH (f() INT_NOTEQUAL f())
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
4622269 PTRSUB 0 4622269
([f()] + 24) INT_ADD [f()] 24
[([f()] + 24)] LOAD 433 ([f()] + 24)
f() CALL func f() 4622269
 CALL func f() [([f()] + 24)]
([f()] + 24) CAST ([f()] + 24)
f() CALL func
6887840 PTRSUB 0 6887840
 CALL func f() 4621786
f() CALL func 6887840
(f() + 32) CAST (f() + 32)
(f() + 32) INT_ADD f() 32
[(f() + 32)] LOAD 433 (f() + 32)
f() CALL func f() OVERVIEW: 
OVERVIEW:  COPY OVERVIEW: 
f() CALL func f() [(f() + 32)]
4621786 PTRSUB 0 4621786
f() CALL func
(RSP + -2176) PTRSUB RSP -2176
[([[(f() + 8)]] + 24)] LOAD 433 ([[(f() + 8)]] + 24)
(f() + 1) INT_ADD f() 1
([[(f() + 8)]] + 24) CAST ([[(f() + 8)]] + 24)
(f() + 8) INT_ADD f() 8
f(RSP) CALL func (RSP + -2192) (RSP + -2176) (RSP + -2176)
[f(RSP)] LOAD 433 f(RSP)
(f() + 8) CAST (f() + 8)
VZERO CALLIND [([[(f() + 8)]] + 24)] [(f() + 8)]
(RSP + -2104) PTRSUB RSP -2104
[[(f() + 8)]] LOAD 433 [(f() + 8)]
(RSP + -2192) PTRSUB RSP -2192
[(f() + 8)] LOAD 433 (f() + 8)
 BRANCH VZERO
f(RSP) CAST f(RSP)
([[(f() + 8)]] + 24) INT_ADD [[(f() + 8)]] 24
f() CALL func (RSP + -2104) f() f()
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
[ARG1] LOAD 433 ARG1
[ARG2] LOAD 433 ARG2
f() CAST f()
f() CALL func [ARG2]
 RETURN 0
f() CAST f()
 CALL libcall_strcmp_thunk f() f()
f() CALL func [ARG1]
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(([(ARG1 + 8)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 3
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
 RETURN 0 (([(ARG1 + 8)] - [ARG1]) / 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0
 CALL func ARG1
 RETURN 0 VZERO
VZERO COPY VZERO
(ARG1 + 24) INT_ADD ARG1 24
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
[(ARG1 + 24)] COPY [(ARG1 + 24)]
 RETURN 0 [(ARG1 + 24)]
(ARG1 + 24) CAST (ARG1 + 24)
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) CAST (ARG1 + 40)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
[(ARG1 + 40)] COPY [(ARG1 + 40)]
 RETURN 0 [(ARG1 + 40)]
(ARG1 + 24) INT_ADD ARG1 24
 RETURN 0 (ARG1 + 24)
 STORE 433 ARG1 f()
ARG1 COPY ARG1
[ARG1] LOAD 433 ARG1
f() CAST f()
f() CALL libcall__Rb_tree_increment_thunk [ARG1]
 RETURN 0 ARG1
(ARG1 + 32) INT_ADD ARG1 32
 RETURN 0 (ARG1 + 32)
 STORE 433 ARG1 f()
ARG1 COPY ARG1
[ARG1] LOAD 433 ARG1
 RETURN 0 ARG1
f() CAST f()
f() CALL libcall__Rb_tree_decrement_thunk [ARG1]
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 [f(ARG2)]
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
[f(ARG2)] LOAD 433 f(ARG2)
 RETURN 0
[f(ARG3)] LOAD 433 f(ARG3)
 STORE 433 (ARG1 + 8) [f(ARG3)]
f(ARG2) CAST f(ARG2)
f(ARG3) CAST f(ARG3)
[ARG2] LOAD 433 ARG2
f(ARG3) CALL func ARG3
 STORE 433 ARG1 [ARG2]
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0
f(ARG3) CAST f(ARG3)
[f(ARG3)] LOAD 433 f(ARG3)
 STORE 433 (ARG1 + 8) [f(ARG3)]
 STORE 433 ARG1 ARG2
 RETURN 0
[ARG1] LOAD 433 ARG1
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -24) [ARG1] [ARG1]
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -24) PTRSUB RSP -24
 RETURN 0 A_Stack[-0x18]:8
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
f(ARG2) CALL func ARG2
[ARG3] LOAD 433 ARG3
 STORE 433 ARG1 [f(ARG2)]
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG2) CAST f(ARG2)
 RETURN 0
 STORE 433 (ARG1 + 8) [ARG3]
[f(ARG2)] LOAD 433 f(ARG2)
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 (ARG1 + 8)
[ARG1] LOAD 433 ARG1
[ARG2] LOAD 433 ARG2
([ARG2] & -256) INT_OR ([ARG2] & -256) 0
0 INT_EQUAL [ARG1] [ARG2]
 RETURN 0 ([ARG2] & -256)
([ARG2] & -256) INT_AND [ARG2] -256
0 INT_ZEXT 0
(ARG1 + 16) INT_ADD ARG1 16
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
 RETURN 0 [(ARG1 + 16)]
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 16) INT_ADD ARG1 16
 RETURN 0 [(ARG1 + 16)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 24) INT_ADD ARG1 24
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
(ARG1 + 24) CAST (ARG1 + 24)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -24) PTRSUB RSP -24
 CALL func (RSP + -24) [(ARG1 + 24)] [(ARG1 + 24)]
40 INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
40 CAST 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
 RETURN 0 A_Stack[-0x18]:8
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 [f(ARG2)]
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
[f(ARG2)] LOAD 433 f(ARG2)
 RETURN 0
[f(ARG3)] LOAD 433 f(ARG3)
 STORE 433 (ARG1 + 8) [f(ARG3)]
f(ARG2) CAST f(ARG2)
f(ARG3) CAST f(ARG3)
ARG2 COPY ARG2
 RETURN 0 ARG2
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
(ARG1 + 32) INT_ADD ARG1 32
 CALL func (ARG1 + 32)
 RETURN 0
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
40 INT_ADD 0 40
 CALL func (RSP + -17) f() f()
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -17) PTRSUB RSP -17
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -17) PTRSUB RSP -17
[40] LOAD 433 40
40 CAST 40
 CALL func (RSP + -17) f() f()
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
[ARG2] LOAD 433 ARG2
[ARG3] LOAD 433 ARG3
([ARG3] & -256) INT_AND [ARG3] -256
0 INT_ZEXT 0
([ARG3] & -256) INT_OR ([ARG3] & -256) 0
0 INT_LESS [ARG2] [ARG3]
 RETURN 0 ([ARG3] & -256)
f() CALL func ARG1 f() ARG2 f()
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1 ARG2 f() ARG2
f() CALL func ARG1
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f() [(f() + 40)]
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) f() f()
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_NOTEQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL f() 0
0 INT_NOTEQUAL f() 0
1 COPY 1
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
 CALL func (RSP + -40) (RSP + -72) (RSP + -64) (RSP + -72)
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) (RSP + -56) (RSP + -48) (RSP + -56)
0 COPY 0
(RSP + -48) PTRSUB RSP -48
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
(RSP + -64) PTRSUB RSP -64
(RSP + -40) PTRSUB RSP -40
(RSP + -72) PTRSUB RSP -72
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
 CALL func (RSP + -40) (RSP + -72) (RSP + -64) (RSP + -72)
(RSP + -64) PTRSUB RSP -64
0 INT_EQUAL f() 0
f() CALL func f()
(RSP + -72) PTRSUB RSP -72
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -56)
f() COPY f()
0 INT_EQUAL f() 0
f() CALL func f()
 CBRANCH (f() INT_EQUAL 0)
 RETURN 0 (f() # f())
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(f() # f()) PIECE f() f()
f() CALL func f()
f() CALL func f()
 BRANCH VZERO
f() CALL func (RSP + -56) (RSP + -40) (RSP + -40)
0 INT_NOTEQUAL f() 0
(RSP + -40) PTRSUB RSP -40
(RSP + -56) PTRSUB RSP -56
f() CALL func ARG1 f() ARG3 f()
f() CALL func ARG1 ARG3 f() ARG3
f() CALL func ARG1 ARG3 ARG3
f() CALL func ARG1 f() ARG3 f()
f() CALL func ARG1 f() ARG3 f()
f() CALL func f(ARG1) ARG3 ARG3
f() CALL func ARG1 ARG3 ARG3
f() CALL func ARG1 ARG3 f() ARG3
ARG1 COPY ARG1
ARG2 COPY ARG2
f() COPY f()
f() CALL func ARG1
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_NOTEQUAL f())
f() CALL func (RSP + -104)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL f() f()
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) CAST (f() + 40)
(RSP + -104) PTRSUB RSP -104
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
f() COPY f()
[f()] LOAD 433 f()
f() CALL func ARG1
f() CAST f()
(RSP + -64) PTRSUB RSP -64
 CBRANCH (f() INT_EQUAL [f()])
0 INT_EQUAL f() [f()]
(RSP + -80) PTRSUB RSP -80
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) (RSP + -80) (RSP + -64) (RSP + -80)
0 COPY 0
f() COPY f()
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CALL func f()
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH f()
f() CALL func ARG1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
f() CALL func f()
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
f() CAST f()
f() COPY f()
0 INT_EQUAL f() 0
[f()] LOAD 433 f()
f() CALL func f()
f() CALL func ARG1
 CBRANCH (f() INT_EQUAL [f()])
0 INT_EQUAL f() [f()]
f() COPY f()
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
f() CALL func f()
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 BRANCH VZERO
(RSP + -64) PTRSUB RSP -64
0 COPY 0
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
 CALL func (RSP + -56) (RSP + -64) f() (RSP + -64)
f() CALL func f(ARG1)
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
f(RSP) CAST f(RSP)
 BRANCH VZERO
0 INT_EQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -72)
 CALL func (RSP + -56) (RSP + -64) f() (RSP + -64)
(RSP + -72) PTRSUB RSP -72
f() CALL func [f(RSP)]
(RSP + -64) PTRSUB RSP -64
f() CALL func ARG1
(RSP + -56) PTRSUB RSP -56
0 COPY 0
 BRANCH VZERO
f() CALL func [f(RSP)]
f() CALL func ARG1
f() CALL func ARG1
 CALL func (RSP + -56) f() f() f()
0 INT_EQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -72)
f(RSP) CAST f(RSP)
(RSP + -56) PTRSUB RSP -56
(RSP + -72) PTRSUB RSP -72
(RSP + -64) PTRSUB RSP -64
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
 CALL func (RSP + -56) (RSP + -64) (RSP + -72) (RSP + -64)
(RSP + -80) PTRSUB RSP -80
 CALL func (RSP + -56) (RSP + -80) (RSP + -80) (RSP + -80)
0 COPY 0
(RSP + -80) PTRSUB RSP -80
(RSP + -56) PTRSUB RSP -56
(RSP + -72) PTRSUB RSP -72
 BRANCH VZERO
f() CAST f()
0 INT_EQUAL f() 0
[f()] LOAD 433 f()
f() CALL func [f()]
f() CALL func ARG1
(RSP + -64) PTRSUB RSP -64
(RSP + -56) PTRSUB RSP -56
(RSP + -72) PTRSUB RSP -72
(RSP + -80) PTRSUB RSP -80
 CALL func (RSP + -56) (RSP + -72) (RSP + -72) (RSP + -72)
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
 CALL func (RSP + -56) (RSP + -64) (RSP + -80) (RSP + -64)
(RSP + -72) PTRSUB RSP -72
0 COPY 0
 BRANCH VZERO
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
 RETURN 0 288230376151711743
288230376151711743 COPY 288230376151711743
f() CALL func ARG1
0 INT_LESS f() ARG2
(ARG2 * 64) INT_LEFT ARG2 6
 CBRANCH (f() INT_LESS ARG2)
 CALL libcall_operator.new_thunk (ARG2 * 64)
 RETURN 0
 CALL libcall___throw_bad_alloc_thunk
 CALL func ARG1 ARG2 0 ARG2
 RETURN 0
f(ARG1) CALL func ARG1
 CALL func f(ARG1) 1
 RETURN 0
 RETURN 0
 RETURN 0
(ARG1 + 32) INT_ADD ARG1 32
 CALL func ARG1
 RETURN 0
 CALL func (ARG1 + 32)
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
(ARG1 + 32) INT_ADD ARG1 32
 CALL func (ARG1 + 32)
 RETURN 0
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0
 STORE 433 (ARG1 + 16) 0
 STORE 433 (ARG1 + 8) 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 [f()]
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG2
 CALL func (ARG1 + 8)
 RETURN 0
[f()] LOAD 433 f()
f() CALL func f()
f() CAST f()
 CALL func ARG1 ARG2 (RSP + 16) ARG2 ARG5 ARG6 ARG5 ARG6
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + 16) PTRSUB RSP 16
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
[40] LOAD 433 40
40 INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func ARG1 f() f()
f() CALL func ARG2
f() CALL func f()
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
f(ARG2) CALL func 32 ARG2
 CALL func ARG3
f(ARG4) CALL func ARG4
 CALL func ARG5
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
0 INT_NOTEQUAL f(ARG2) 0
 CALL func (RSP + -40) f(ARG4) f(ARG4)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
 CALL func f(ARG2) (RSP + -40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALL func ARG1 ARG2 f(ARG3) f(ARG4) f(ARG5)
f(ARG3) CALL func ARG3
f(ARG4) CALL func ARG4
f(ARG5) CALL func ARG5
 RETURN 0
f(ARG5) CALL func ARG5
f(ARG1) CALL func ARG1
f() CALL func ARG2
f(ARG2) CALL func 64 ARG2
f(ARG3) CALL func ARG3
f(ARG4) CALL func ARG4
 CALL func f(ARG1) f() f(ARG3) f(ARG4) f(ARG5)
 RETURN 0
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG2) 0
 CALL func f(ARG2)
f() CALL func ARG1
 CALL func ARG1 f() f(ARG2) f(ARG3) f(ARG4)
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
f(ARG4) CALL func ARG4
 RETURN 0 f()
f() COPY f()
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1 f() f() f()
0 INT_EQUAL ARG2 0
0 INT_NOTEQUAL f() ARG3
f() CALL func ARG3
 CALL libcall__Rb_tree_insert_and_rebalance_thunk f() ARG4 ARG3 (ARG1 + 8)
f() CALL func ARG4
 CALL func (RSP + -40) ARG4 ARG4
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(ARG1 + 40) CAST (ARG1 + 40)
f() COPY f()
([(ARG1 + 40)] + 1) INT_ADD [(ARG1 + 40)] 1
 CBRANCH (ARG2 INT_EQUAL 0)
 STORE 433 (ARG1 + 40) ([(ARG1 + 40)] + 1)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(ARG1 + 8) CAST (ARG1 + 8)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
[(f() + 40)] LOAD 433 (f() + 40)
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CBRANCH (f() INT_NOTEQUAL ARG3)
1 COPY 1
 BRANCH VZERO
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CALL func
f() CAST f()
0 COPY 0
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL libcall_operator.delete_thunk ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
0 INT_NOTEQUAL ARG2 0
 RETURN 0
 CBRANCH (ARG2 INT_NOTEQUAL 0)
[ARG1] LOAD 433 ARG1
 CALL func ARG1
(ARG1 + 16) PTRADD ARG1 2 8
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 8) [ARG1]
[ARG1] LOAD 433 ARG1
 RETURN 0
(([(ARG1 + 16)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 3
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CALL func ARG1
f(ARG1) CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 CALL func (ARG1 + 8)
 RETURN 0
 CALL func ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
f(ARG1) CALL func ARG1
f() CALL func ARG2
 CALL func f(ARG1) f()
 RETURN 0
 CALL libcall_operator.delete_thunk ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f(ARG1) CALL func ARG1
 CALL func f(ARG1) ARG2 1 f(ARG1)
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 ARG2 ARG2
 RETURN 0
f() CALL func ARG1 (f() / 2147483647) (f() / 4611686014132420609) f()
f() CALL func ARG1 ARG2 f() ARG2
f() CALL func ARG1 f(ARG3) f(ARG4) f(ARG5)
 CALL func ARG1 f() f()
f(ARG3) CALL func ARG3
f(ARG4) CALL func ARG4
f(ARG5) CALL func ARG5
f() CALL func f()
(f() / 2147483647) INT_RIGHT f() 64
(f() + 40) CAST (f() + 40)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
 CBRANCH ((f() / 4611686014132420609) INT_EQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL (f() / 4611686014132420609) 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -72) (f() / 2147483647) (f() / 2147483647)
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -72) PTRSUB RSP -72
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
 RETURN 0 f()
[ARG1] LOAD 433 ARG1
 CALL func [ARG1]
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
f() CALL func ARG1 f() ARG4 f()
ARG2 COPY ARG2
ARG3 COPY ARG3
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
[40] LOAD 433 (f() + 40)
(RSP + -24) PTRSUB RSP -24
 CBRANCH (0 INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_NOTEQUAL f(ARG2) 0
(f() + 40) CAST (f() + 40)
f() COPY f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -24) f(ARG2 , ARG3) f(ARG2 , ARG3)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [40]
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CBRANCH (f() INT_EQUAL 1)
 BRANCH VZERO
f(ARG2) COPY f(ARG2)
 BRANCH VZERO
f() CALL func f(ARG2)
f() CALL func f(ARG2)
f() CALL func f(ARG2)
0 INT_EQUAL f() 1
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1 f() f() ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -24) PTRSUB RSP -24
40 INT_ADD 0 40
 CALL func (RSP + -24) (ARG1 + 8) (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func ARG1
 RETURN 0
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
f() CALL func ARG1 f() 4618848 (RSP + -64) (RSP + -81)
 CALL func ARG1
f() CALL func ARG1 ARG2 ARG2
f() CALL func ARG1
f() CALL func (RSP + -82) ARG2 f() ARG2
 CALL func (RSP + -64) ARG2 ARG2
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_EQUAL 0)
(f() + 40) CAST (f() + 40)
0 INT_EQUAL f() 0
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -80) PTRSUB RSP -80
 CBRANCH f()
f() CALL func (RSP + -80)
(f() + 8) INT_ADD f() 8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -80) PTRSUB RSP -80
f() CALL func (RSP + -80) (RSP + -72) (RSP + -72)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -72) PTRSUB RSP -72
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
1 COPY 1
(RSP + -82) PTRSUB RSP -82
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
f() CALL func (RSP + -80)
(RSP + -80) PTRSUB RSP -80
 BRANCH VZERO
0 COPY 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 (f() + 8)
(RSP + -64) PTRSUB RSP -64
(RSP + -80) PTRSUB RSP -80
 CALL func (RSP + -56) (RSP + -80) (RSP + -80)
(RSP + -64) PTRSUB RSP -64
(RSP + -56) PTRSUB RSP -56
(RSP + -81) PTRSUB RSP -81
4618848 PTRSUB 0 4618848
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
[f(ARG1)] LOAD 433 f(ARG1)
(([f(ARG1)] - [f(ARG2)]) / 8) INT_SRIGHT ([f(ARG1)] - [f(ARG2)]) 3
f(ARG1) CAST f(ARG1)
 RETURN 0 (([f(ARG1)] - [f(ARG2)]) / 8)
f(ARG2) CAST f(ARG2)
([f(ARG1)] - [f(ARG2)]) INT_SUB [f(ARG1)] [f(ARG2)]
[f(ARG2)] LOAD 433 f(ARG2)
ARG1 COPY ARG1
ARG2 COPY ARG2
 CALL libcall_qsort_thunk f() f() 8 ARG3
(RSP + -48) PTRSUB RSP -48
 RETURN 0
f() CAST f()
f() CALL func (RSP + -56) (RSP + -48) (RSP + -48)
(RSP + -56) PTRSUB RSP -56
 CBRANCH (1 INT_SLESS f())
0 INT_SLESS 1 f()
 BRANCH VZERO
f() CAST f()
f() CALL func (RSP + -48)
f() COPY f()
(RSP + -48) PTRSUB RSP -48
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
0 INT_ZEXT 0
([f(ARG2)] & -256) INT_OR ([f(ARG2)] & -256) 0
 RETURN 0 ([f(ARG2)] & -256)
0 INT_NOTEQUAL [f(ARG1)] [f(ARG2)]
f(ARG1) CAST f(ARG1)
f(ARG2) CAST f(ARG2)
[f(ARG1)] LOAD 433 f(ARG1)
[f(ARG2)] LOAD 433 f(ARG2)
([f(ARG2)] & -256) INT_AND [f(ARG2)] -256
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -24) PTRSUB RSP -24
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(ARG1 + 8) INT_ADD ARG1 8
 CALL func (RSP + -24) (ARG1 + 8) (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -24) PTRSUB RSP -24
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
[ARG1] LOAD 433 ARG1
[ARG2] LOAD 433 ARG2
0 INT_ZEXT 0
0 INT_EQUAL [ARG1] [ARG2]
 RETURN 0 ([ARG2] & -256)
([ARG2] & -256) INT_AND [ARG2] -256
([ARG2] & -256) INT_OR ([ARG2] & -256) 0
 STORE 433 ARG1 ARG2
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
(RSP + -24) PTRSUB RSP -24
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
 CALL func (RSP + -24) (ARG1 + 8) (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 (ARG1 + 8)
(ARG1 + 16) INT_ADD ARG1 16
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
 RETURN 0 [(ARG1 + 16)]
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 24) INT_ADD ARG1 24
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
[(ARG1 + 24)] COPY [(ARG1 + 24)]
 RETURN 0 [(ARG1 + 24)]
(ARG1 + 24) CAST (ARG1 + 24)
f() CALL func ARG1 f() ARG4 f()
ARG2 COPY ARG2
ARG3 COPY ARG3
[40] LOAD 433 (f() + 40)
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG2) 0
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -24) PTRSUB RSP -24
f() COPY f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [40])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
 CALL func (RSP + -24) f(ARG2 , ARG3) f(ARG2 , ARG3)
0 INT_NOTEQUAL 0 [40]
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
f() CALL func f(ARG2)
f(ARG2) COPY f(ARG2)
 BRANCH VZERO
 BRANCH VZERO
f() CALL func f(ARG2)
f() CALL func f(ARG2)
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
 RETURN 0 [(ARG1 + 16)]
f() CALL func ARG1
f() CALL func ARG1 ARG2 f() ARG2
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1 f() f() ARG2
f() CALL func ARG1
(RSP + -40) PTRSUB RSP -40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -48) PTRSUB RSP -48
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
0 INT_EQUAL f() 0
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func (RSP + -48) (RSP + -40) (RSP + -40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
f() CALL func f()
 BRANCH VZERO
f() COPY f()
f() COPY f()
f() CALL func ARG1
f() CALL func ARG1 ARG2 ARG2
(RSP + -32) PTRSUB RSP -32
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -24) PTRSUB RSP -24
0 COPY 0
0 INT_EQUAL f() 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
f() CALL func (RSP + -32) (RSP + -24) (RSP + -24)
 RETURN 0 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0
 CALL func ARG1
 RETURN 0
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 RETURN 0
 STORE 433 (ARG1 + 16) 0
 STORE 433 (ARG1 + 24) (ARG1 + 8)
(ARG1 + 32) CAST (ARG1 + 32)
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG1 + 32) (ARG1 + 8)
(ARG1 + 24) CAST (ARG1 + 24)
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) 0
 CALL func ARG1
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 24) INT_ADD ARG1 24
 CALL func ARG1
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 40) 0
 STORE 433 (ARG1 + 8) 0
 STORE 433 (ARG1 + 24) 0
(ARG1 + 24) CAST (ARG1 + 24)
 STORE 433 (ARG1 + 32) 0
(ARG1 + 40) CAST (ARG1 + 40)
(ARG1 + 32) CAST (ARG1 + 32)
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 0
 STORE 433 (ARG1 + 16) 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG3) CALL func ARG3
f(ARG2) CALL func 8 ARG2
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG2) 0
f(ARG3) CAST f(ARG3)
[f(ARG3)] LOAD 433 f(ARG3)
 RETURN 0
f(ARG2) CAST f(ARG2)
 STORE 433 f(ARG2) [f(ARG3)]
 CALL func ARG1 ARG2 f(ARG3) ARG2
f(ARG3) CALL func ARG3
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
ARG1 COPY ARG1
 CALL func (RSP + -16)
 RETURN 0
(RSP + -16) PTRSUB RSP -16
 CALL func ARG1
 RETURN 0
 CALL libcall_memmove_thunk ARG3 ARG1 (((ARG2 - ARG1) / 8) * 8)
ARG1 CAST ARG1
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG3 CAST ARG3
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) CAST (ARG3 + (((ARG2 - ARG1) / 8) * 8))
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) INT_ADD ARG3 (((ARG2 - ARG1) / 8) * 8)
 CBRANCH (((ARG2 - ARG1) / 8) INT_NOTEQUAL 0)
((ARG2 - ARG1) / 8) INT_SRIGHT (ARG2 - ARG1) 3
0 INT_NOTEQUAL ((ARG2 - ARG1) / 8) 0
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
 RETURN 0 (ARG3 + (((ARG2 - ARG1) / 8) * 8))
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 RETURN 0
 CALL func f() f() f()
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG4
 RETURN 0
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -24) PTRSUB RSP -24
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 ARG4
 RETURN 0
 CALL libcall_operator.delete_thunk ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
0 INT_NOTEQUAL ARG2 0
 CBRANCH (ARG2 INT_NOTEQUAL 0)
 RETURN 0
 RETURN 0 2305843009213693951
2305843009213693951 COPY 2305843009213693951
f() CALL func ARG1
0 INT_LESS f() ARG2
(ARG2 * 8) INT_LEFT ARG2 3
 CALL libcall_operator.new_thunk (ARG2 * 8)
 RETURN 0
 CBRANCH (f() INT_LESS ARG2)
 CALL libcall___throw_bad_alloc_thunk
 CALL func ARG1 ARG2 0 ARG2
 RETURN 0
f() CALL func ARG1 ARG2 ARG2
0 INT_EQUAL ARG2 0
 CBRANCH (ARG2 INT_EQUAL 0)
 RETURN 0 f()
 BRANCH VZERO
0 COPY 0
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
f(ARG1) CALL func ARG1
 RETURN 0
 CALL func f(ARG1)
ARG1 COPY ARG1
f() CALL func ARG1
ARG2 COPY ARG2
 CALL libcall___throw_length_error_thunk ARG3
f() CALL func ARG1
f() CALL func f(ARG1)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
 CBRANCH ((f() - f()) INT_LESS ARG2)
(RSP + -48) PTRSUB RSP -48
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f() [(f() + 40)]
([f(RSP)] + f()) INT_ADD [f(RSP)] f()
f() CALL func f(ARG1)
(f() + 40) INT_ADD f() 40
(RSP + -72) PTRSUB RSP -72
0 INT_LESS (f() - f()) ARG2
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_LESS ([f(RSP)] + f()) f()
 CBRANCH (([f(RSP)] + f()) INT_LESS f())
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -48) (RSP + -72) (RSP + -72)
(f() - f()) INT_SUB f() f()
f() CALL func f(ARG1)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
(f() - f()) CAST (f() - f())
(FS_OFFSET + 40) INT_ADD 0 40
f(RSP) CAST f(RSP)
 CBRANCH (f() INT_LESS ([f(RSP)] + f()))
f() COPY f()
f() CALL func f(ARG1)
([f(RSP)] + f()) COPY ([f(RSP)] + f())
 BRANCH VZERO
f() CALL func f(ARG1)
0 INT_LESS f() ([f(RSP)] + f())
 RETURN 0 f(RSP)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
f(ARG2) CALL func ARG2
f(ARG1) CALL func ARG1
f(ARG1) CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 ((f() * 8) + f()) f(ARG2) ((f() * 8) + f())
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 f()
[ARG1] LOAD 433 ARG1
f() CALL func ARG1 f(RSP) f(RSP)
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
f(RSP) CALL func ARG1 1 0
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 8) [ARG1]
 STORE 433 (ARG1 + 16) ((f(RSP) * 8) + f())
((f(RSP) * 8) + f()) INT_ADD (f(RSP) * 8) f()
(f(RSP) * 8) INT_MULT f(RSP) 8
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(([(ARG1 + 16)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 3
(f() + 8) INT_ADD f() 8
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
(f() * 8) INT_MULT f() 8
((f() * 8) + f()) INT_ADD (f() * 8) f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0
0 COPY 0
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
f() CALL func [ARG1] [(ARG1 + 8)] f() f(ARG1)
 STORE 433 (ARG1 + 8) (f() + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1 [(ARG1 + 8)] f(ARG2) [(ARG1 + 8)]
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1 f(ARG2) f(ARG2)
(ARG1 + 8) INT_ADD ARG1 8
f(ARG2) CALL func ARG2
f(ARG2) CALL func ARG2
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 RETURN 0
0 INT_EQUAL [(ARG1 + 8)] [(ARG1 + 16)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL [(ARG1 + 16)])
 BRANCH VZERO
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + 8) INT_ADD [(ARG1 + 8)] 8
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 CALL func ARG1 f(ARG2) f(ARG2)
f(ARG2) CALL func ARG2
 RETURN 0
 STORE 433 ARG1 ([ARG1] + 8)
ARG1 COPY ARG1
[ARG1] LOAD 433 ARG1
([ARG1] + 8) INT_ADD [ARG1] 8
 RETURN 0 ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1 f(ARG2) f(ARG2)
 CALL func ARG1 f() f()
ARG2 COPY ARG2
ARG2 COPY ARG2
 RETURN 0
0 INT_NOTEQUAL f(ARG2) 0
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
f() CALL func f(ARG2)
 BRANCH VZERO
f() COPY f()
f() CALL func f(ARG2)
 CALL func ARG1
f() CALL func ARG1
 CALL func ARG1 f() f()
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 [f(ARG2)]
f(ARG2) CALL func ARG2
 RETURN 0
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG2) CAST f(ARG2)
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -24) PTRSUB RSP -24
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 STORE 433 ARG1 [f(ARG2)]
f(ARG2) CALL func ARG2
f(ARG2) CAST f(ARG2)
 RETURN 0
[f(ARG2)] LOAD 433 f(ARG2)
 RETURN 0
 CALL func ARG1
 RETURN 0
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1
 STORE 433 (ARG1 + 16) 0
 STORE 433 (ARG1 + 8) 0
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 0
(ARG1 + 16) PTRADD ARG1 2 8
 RETURN 0
 STORE 433 (ARG1 + 16) 0
 STORE 433 (ARG1 + 8) 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
 STORE 433 ARG1 [f(ARG2)]
 STORE 433 ARG2 [f(RSP)]
f(ARG2) CALL func ARG2
(RSP + -24) PTRSUB RSP -24
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -24)
[f(ARG1)] LOAD 433 f(ARG1)
40 CAST 40
f(ARG1) CAST f(ARG1)
[f(ARG2)] LOAD 433 f(ARG2)
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 40
f(ARG2) CAST f(ARG2)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
f(RSP) CAST f(RSP)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func ARG1 ARG2 ARG2
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
(ARG2 + 16) INT_ADD ARG2 16
(ARG2 + 8) INT_ADD ARG2 8
 CALL func (ARG1 + 16) (ARG2 + 16) (ARG2 + 16)
 RETURN 0
 CALL func (ARG1 + 8) (ARG2 + 8) (ARG2 + 8)
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1 f(ARG2) f(ARG2)
ARG1 COPY ARG1
f(ARG2) CALL func ARG2
 RETURN 0 ARG1
 CALL func (RSP + -57) ARG1 ARG1
f(ARG1) CALL func ARG1
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 (RSP + -56) (RSP + -56)
f(ARG2) CALL func ARG2
40 INT_ADD 0 40
(RSP + -57) PTRSUB RSP -57
 CALL func (RSP + -57)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -57) PTRSUB RSP -57
[40] LOAD 433 40
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func f(ARG1) f(ARG2)
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -56) (RSP + -57) (RSP + -57)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -57) PTRSUB RSP -57
40 CAST 40
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1 f(ARG2) f(ARG2)
ARG1 COPY ARG1
f(ARG2) CALL func ARG2
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 8) INT_ADD ARG1 8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -24) PTRSUB RSP -24
40 INT_ADD 0 40
 CALL func (RSP + -24) (ARG1 + 8) (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
[ARG1] LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
 CALL func ARG1
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 8) [ARG1]
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 RETURN 0
(([(ARG1 + 16)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 3
[ARG1] LOAD 433 ARG1
 CALL func ARG1
f(ARG1) CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(([(ARG1 + 8)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 3
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
 RETURN 0 (([(ARG1 + 8)] - [ARG1]) / 8)
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 ([ARG1] + 8)
ARG1 COPY ARG1
([ARG1] + 8) INT_ADD [ARG1] 8
 RETURN 0 ARG1
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
([f(ARG2)] & -256) INT_AND [f(ARG2)] -256
 RETURN 0 ([f(ARG2)] & -256)
0 INT_NOTEQUAL [f(ARG1)] [f(ARG2)]
[f(ARG2)] LOAD 433 f(ARG2)
0 INT_ZEXT 0
([f(ARG2)] & -256) INT_OR ([f(ARG2)] & -256) 0
f(ARG2) CAST f(ARG2)
f(ARG1) CAST f(ARG1)
[f(ARG1)] LOAD 433 f(ARG1)
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -24) PTRSUB RSP -24
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
ARG1 COPY ARG1
 CALL func (RSP + -16)
 RETURN 0
(RSP + -16) PTRSUB RSP -16
 CALL func ARG1
 RETURN 0
 CALL libcall_memmove_thunk ARG3 ARG1 (((ARG2 - ARG1) / 8) * 8)
ARG1 CAST ARG1
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG3 CAST ARG3
 CBRANCH (((ARG2 - ARG1) / 8) INT_NOTEQUAL 0)
0 INT_NOTEQUAL ((ARG2 - ARG1) / 8) 0
((ARG2 - ARG1) / 8) INT_SRIGHT (ARG2 - ARG1) 3
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
 RETURN 0 (ARG3 + (((ARG2 - ARG1) / 8) * 8))
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) CAST (ARG3 + (((ARG2 - ARG1) / 8) * 8))
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) INT_ADD ARG3 (((ARG2 - ARG1) / 8) * 8)
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 RETURN 0
 CALL func f() f() f()
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG4
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 ARG4
 RETURN 0
2305843009213693951 COPY 2305843009213693951
 RETURN 0 2305843009213693951
 CALL func ARG1
 RETURN 0
f(ARG1) CALL func ARG1
 RETURN 0
 CALL func f(ARG1)
ARG1 COPY ARG1
f() CALL func ARG1
ARG2 COPY ARG2
 CALL libcall___throw_length_error_thunk ARG3
 CBRANCH (([f(RSP)] + f()) INT_LESS f())
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -48) (RSP + -72) (RSP + -72)
(f() - f()) INT_SUB f() f()
f() CALL func f(ARG1)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
(f() - f()) CAST (f() - f())
(FS_OFFSET + 40) INT_ADD 0 40
f(RSP) CAST f(RSP)
f() CALL func f(ARG1)
f() CALL func ARG1
 CBRANCH (f() INT_EQUAL [(f() + 40)])
 CBRANCH ((f() - f()) INT_LESS ARG2)
(RSP + -48) PTRSUB RSP -48
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f() [(f() + 40)]
([f(RSP)] + f()) INT_ADD [f(RSP)] f()
f() CALL func f(ARG1)
(RSP + -72) PTRSUB RSP -72
(f() + 40) INT_ADD f() 40
0 INT_LESS (f() - f()) ARG2
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_LESS ([f(RSP)] + f()) f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(RSP)
 RETURN 1
([f(RSP)] + f()) COPY ([f(RSP)] + f())
 BRANCH VZERO
f() CALL func f(ARG1)
0 INT_LESS f() ([f(RSP)] + f())
 CBRANCH (f() INT_LESS ([f(RSP)] + f()))
f() COPY f()
f() CALL func f(ARG1)
f() CALL func ARG1
0 INT_LESS f() ARG2
(ARG2 * 8) INT_LEFT ARG2 3
 CBRANCH (f() INT_LESS ARG2)
 CALL libcall_operator.new_thunk (ARG2 * 8)
 RETURN 0
 CALL libcall___throw_bad_alloc_thunk
 CALL func ARG1 ARG2 0 ARG2
 RETURN 0
f() CALL func ARG1 ARG2 ARG2
0 INT_EQUAL ARG2 0
 CBRANCH (ARG2 INT_EQUAL 0)
 RETURN 0 f()
0 COPY 0
 BRANCH VZERO
f(ARG3) CALL func ARG3
f(ARG2) CALL func 8 ARG2
f(ARG3) CAST f(ARG3)
 RETURN 0
[f(ARG3)] LOAD 433 f(ARG3)
f(ARG2) CAST f(ARG2)
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG2) 0
 STORE 433 f(ARG2) [f(ARG3)]
 CALL func ARG1 ARG2 f(ARG3) ARG2
f(ARG3) CALL func ARG3
 RETURN 0
f(ARG2) CALL func ARG2
f(ARG1) CALL func ARG1
f(ARG1) CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 ((f() * 8) + f()) f(ARG2) ((f() * 8) + f())
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 f()
[ARG1] LOAD 433 ARG1
f() CALL func ARG1 f(RSP) f(RSP)
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
f(RSP) CALL func ARG1 1 0
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 8) [ARG1]
 STORE 433 (ARG1 + 16) ((f(RSP) * 8) + f())
((f(RSP) * 8) + f()) INT_ADD (f(RSP) * 8) f()
(f(RSP) * 8) INT_MULT f(RSP) 8
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(([(ARG1 + 16)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 3
(f() + 8) INT_ADD f() 8
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
(f() * 8) INT_MULT f() 8
((f() * 8) + f()) INT_ADD (f() * 8) f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0
0 COPY 0
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
f() CALL func [ARG1] [(ARG1 + 8)] f() f(ARG1)
 STORE 433 (ARG1 + 8) (f() + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func ARG1 ARG2 ARG2
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1 [(ARG1 + 8)] ARG2 [(ARG1 + 8)]
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0
 CBRANCH ([(ARG1 + 8)] INT_EQUAL [(ARG1 + 16)])
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_EQUAL [(ARG1 + 8)] [(ARG1 + 16)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + 8) INT_ADD [(ARG1 + 8)] 8
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG2 f() f()
f() CALL func ARG2
 CALLIND [([[f()]] + 32)] [f()] ARG3 [([[f()]] + 32)] ARG3
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -152)
(f() / 2147483647) SUBPIECE f() 8
f() CALL func 6887840
f() CALL func 6887840
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -168) PTRSUB RSP -168
(f() / 2147483647) SUBPIECE f() 8
(RSP + -120) PTRSUB RSP -120
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -88)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
6887840 PTRSUB 0 6887840
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -152)
f() CALL func (f() + 216)
f() CALL func (f() + 216)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(RSP + -88) PTRSUB RSP -88
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() 0
(f() + 216) INT_ADD f() 216
 CBRANCH (f() INT_EQUAL 0)
(f() + 216) INT_ADD f() 216
(RSP + -152) PTRSUB RSP -152
6887840 PTRSUB 0 6887840
(RSP + -152) PTRSUB RSP -152
f() CALL func (RSP + -168) (RSP + -120) (RSP + -120)
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 1)
(f() / 2147483647) SUBPIECE f() 8
f() CALL func
(RSP + -208) PTRSUB RSP -208
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -208) PTRSUB RSP -208
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -208)
f() CALL func
[f()] LOAD 433 f()
f() CALL func [f()]
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 0)
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_EQUAL 0)
[f()] LOAD 433 f()
(f() / 2147483647) SUBPIECE f() 8
 CALL func f() 4622445
(f() / 2147483647) SUBPIECE f() 0
f() CAST f()
f() CALL func (RSP + -208)
(f() / 2147483647) SUBPIECE f() 8
f() CAST f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f() f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
4621786 PTRSUB 0 4621786
4622445 PTRSUB 0 4622445
 CALL func f() 4621786
f() CALL func [f()]
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___assert_fail_thunk SortedCategories.size() > 0 && "No option categories registered!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 1569 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -192) (RSP + -120) (RSP + -120)
(RSP + -152) PTRSUB RSP -152
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
SortedCategories.size() > 0 && "No option categories registered!" COPY SortedCategories.size() > 0 && "No option categories registered!"
(f() / 2147483647) SUBPIECE f() 8
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(RSP + -152) PTRSUB RSP -152
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -152)
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -152)
(RSP + -192) PTRSUB RSP -192
(RSP + -120) PTRSUB RSP -120
(f() / 2147483647) SUBPIECE f() 8
f() COPY f()
 CALL func f() f() 4450246
(RSP + -152) PTRSUB RSP -152
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -168) PTRSUB RSP -168
 CBRANCH (f() INT_NOTEQUAL f())
(RSP + -120) PTRSUB RSP -120
0 INT_NOTEQUAL f() f()
 CALL func (RSP + -168) (RSP + -120) (RSP + -120)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -152)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
4450246 PTRSUB 0 4450246
f() CALL func (RSP + -192) (RSP + -168) (RSP + -168)
(RSP + -152) PTRSUB RSP -152
f() CALL func (RSP + -152)
(RSP + -192) PTRSUB RSP -192
(f() / 2147483647) SUBPIECE f() 0
(RSP + -168) PTRSUB RSP -168
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_EQUAL 0)
 CALL func (RSP + -208)
f() CALL func (RSP + -88) f() f()
(RSP + -208) PTRSUB RSP -208
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -208) (RSP + -200) (RSP + -200)
(RSP + -208) PTRSUB RSP -208
(f() / 2147483647) SUBPIECE f() 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(ARG1 + 8) CAST (ARG1 + 8)
f() CALL func (RSP + -208)
(RSP + -88) PTRSUB RSP -88
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
0 INT_NOTEQUAL f() 0
(RSP + -208) PTRSUB RSP -208
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL [(ARG1 + 8)] 1
f() CALL func f()
0 INT_EQUAL f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_NOTEQUAL [40])
(f() / 2147483647) SUBPIECE f() 0
 RETURN 0
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
f() CALL func (RSP + -88) f() f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -192) (RSP + -168) (RSP + -168)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func
 CALL func (RSP + -192) (RSP + -120) (RSP + -120)
f() CALL func f()
(f() / 2147483647) SUBPIECE f() 0
(RSP + -88) PTRSUB RSP -88
(RSP + -88) PTRSUB RSP -88
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -192) PTRSUB RSP -192
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -208)
f() CALL func (RSP + -88) f() f()
(RSP + -168) PTRSUB RSP -168
This option category has no options.  COPY This option category has no options. 
(RSP + -208) PTRSUB RSP -208
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -168) (RSP + -120) (RSP + -120)
(RSP + -208) PTRSUB RSP -208
(RSP + -168) PTRSUB RSP -168
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f()
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
f() CALL func (RSP + -208)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -192) PTRSUB RSP -192
(f() / 2147483647) SUBPIECE f() 0
(RSP + -120) PTRSUB RSP -120
0 INT_EQUAL f() 0
(RSP + -120) PTRSUB RSP -120
 CALL func f() This option category has no options. 
 CBRANCH (f() INT_EQUAL 0)
(f() / 2147483647) SUBPIECE f() 0
0 INT_NOTEQUAL f() [40]
(f() + 40) INT_ADD f() 40
(f() / 2147483647) SUBPIECE f() 8
(f() + 40) CAST (f() + 40)
(f() / 2147483647) SUBPIECE f() 8
(f() + 8) INT_ADD f() 8
[40] LOAD 433 (f() + 40)
f() CALL func (RSP + -152)
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -152)
[(f() + 8)] LOAD 433 (f() + 8)
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() 0
 CALL func (RSP + -200) (RSP + -120) (RSP + -120)
(RSP + -152) PTRSUB RSP -152
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -88) ([(f() + 8)] + 48) ([(f() + 8)] + 48)
(f() / 2147483647) SUBPIECE f() 0
([(f() + 8)] + 48) INT_ADD [(f() + 8)] 48
(f() / 2147483647) SUBPIECE f() 0
(f() + 8) CAST (f() + 8)
f() CALL func (RSP + -152)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -208) PTRSUB RSP -208
(f() / 2147483647) SUBPIECE f() 0
(RSP + -88) PTRSUB RSP -88
(RSP + -120) PTRSUB RSP -120
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_EQUAL 0)
 CALL func (RSP + -208) (RSP + -120) (RSP + -120)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -152) PTRSUB RSP -152
(f() / 2147483647) SUBPIECE f() 8
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 8
(RSP + -120) PTRSUB RSP -120
(RSP + -88) PTRSUB RSP -88
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -88)
(RSP + -152) PTRSUB RSP -152
(f() + 1) INT_ADD f() 1
(f() / 2147483647) SUBPIECE f() 8
(RSP + -120) PTRSUB RSP -120
0 COPY 0
CategorizedOptions.count(Opt->Category) > 0 && "Option has an unregistered category" COPY CategorizedOptions.count(Opt->Category) > 0 && "Option has an unregistered category"
(f() / 2147483647) SUBPIECE f() 8
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -88) ([(f() + 8)] + 48) ([(f() + 8)] + 48)
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
 CALL func f() (RSP + -120) f()
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___assert_fail_thunk CategorizedOptions.count(Opt->Category) > 0 && "Option has an unregistered category" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 1586 0
(RSP + -88) PTRSUB RSP -88
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
([(f() + 8)] + 48) INT_ADD [(f() + 8)] 48
(f() / 2147483647) SUBPIECE f() 8
(RSP + -168) PTRSUB RSP -168
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(RSP + -152) PTRSUB RSP -152
f() CALL func (RSP + -168)
 CALL func (RSP + -168)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -192) PTRSUB RSP -192
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -152) (RSP + -192) (RSP + -192)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -168) PTRSUB RSP -168
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -192) PTRSUB RSP -192
(f() / 2147483647) SUBPIECE f() 0
([[f()]] + 32) INT_ADD [[f()]] 32
[([[f()]] + 32)] LOAD 433 ([[f()]] + 32)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -192) PTRSUB RSP -192
 BRANCH VZERO
 CALL func (RSP + -192)
([[f()]] + 32) CAST ([[f()]] + 32)
(f() / 2147483647) SUBPIECE f() 0
[[f()]] LOAD 433 [f()]
f() CALL func (RSP + -192)
(f() / 2147483647) SUBPIECE f() 8
[f()] LOAD 433 f()
f() CAST f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
f() CAST f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -208)
4621786 PTRSUB 0 4621786
[f()] LOAD 433 f()
 CALL func f() 4622275
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func f() 4621786
4622275 PTRSUB 0 4622275
f() CALL func f() f()
(RSP + -208) PTRSUB RSP -208
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func
f() CALL func
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL func [f()]
(f() / 2147483647) SUBPIECE f() 8
 CALL func f() (RSP + -120) f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -192) PTRSUB RSP -192
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -120)
(RSP + -192) PTRSUB RSP -192
(f() / 2147483647) SUBPIECE f() 8
(RSP + -120) PTRSUB RSP -120
(f() / 2147483647) SUBPIECE f() 0
(RSP + -120) PTRSUB RSP -120
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -192)
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -88) f() f()
(RSP + -120) PTRSUB RSP -120
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -120)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -88) PTRSUB RSP -88
f() CALL func (RSP + -192)
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 (ARG1 + 8) ARG3
 RETURN 0
(ARG1 + 20) INT_ADD ARG1 20
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
[(ARG1 + 20)] COPY [(ARG1 + 20)]
(ARG1 + 20) CAST (ARG1 + 20)
 RETURN 0 [(ARG1 + 20)]
0 INT_EQUAL ARG2 1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0
 CBRANCH (ARG2 INT_EQUAL 1)
 CBRANCH (f() INT_LESS 2)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
6888000 PTRSUB 0 6888000
 BRANCH VZERO
 CALL func [ARG1] 1
 CALL func [(ARG1 + 8)] 1
 CALL func 6888000 0
 BRANCH VZERO
f() CALL func (f() + 216)
0 INT_LESS f() 2
6887840 PTRSUB 0 6887840
(f() + 216) INT_ADD f() 216
f() CALL func 6887840
(ARG1 + 24) PTRADD ARG1 3 8
[ARG1] LOAD 433 ARG1
([ARG1] & -256) INT_AND [ARG1] -256
[ARG1] CAST [ARG1]
[ARG1] CAST [ARG1]
0 INT_ZEXT 0
([ARG1] & -256) INT_OR ([ARG1] & -256) 0
0 INT_EQUAL [ARG1] (ARG1 + 24)
 RETURN 0 ([ARG1] & -256)
 RETURN 0
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 CALL func f() f()
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
 RETURN 0
 CALL libcall_free_thunk f()
f() CAST f()
 CALL func ARG1
 RETURN 0
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
 CALL func ARG1
 RETURN 0
(ARG1 + 176) INT_ADD ARG1 176
6888448 PTRSUB 0 6888448
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ~(f())
f() CALL func 6888448
~(f()) BOOL_NEGATE f()
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(f() + 40) INT_ADD f() 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL f() [(f() + 40)]
 CBRANCH (f() INT_NOTEQUAL f())
(f() + 8) INT_ADD f() 8
([[(f() + 8)]] + 40) CAST ([[(f() + 8)]] + 40)
 CALLIND [([[(f() + 8)]] + 40)] [(f() + 8)] f(RSP) f()
f() CALL func 6888544
(f() + 8) CAST (f() + 8)
 BRANCH VZERO
[[(f() + 8)]] LOAD 433 [(f() + 8)]
[(f() + 8)] LOAD 433 (f() + 8)
(f() + 1) INT_ADD f() 1
([[(f() + 8)]] + 40) INT_ADD [[(f() + 8)]] 40
f() CALL func (RSP + -2104) f() f()
0 INT_NOTEQUAL f() f()
[([[(f() + 8)]] + 40)] LOAD 433 ([[(f() + 8)]] + 40)
6888544 PTRSUB 0 6888544
(RSP + -2104) PTRSUB RSP -2104
 CBRANCH (f() INT_NOTEQUAL f())
f() CALL func (RSP + -2104) f() f()
([[(f() + 8)]] + 24) INT_ADD [[(f() + 8)]] 24
[(f() + 8)] LOAD 433 (f() + 8)
(RSP + -2144) PTRSUB RSP -2144
 BRANCH VZERO
0 INT_NOTEQUAL f() f()
(f() + 1) INT_ADD f() 1
[([[(f() + 8)]] + 24)] LOAD 433 ([[(f() + 8)]] + 24)
f(RSP) CAST f(RSP)
[f(RSP)] LOAD 433 f(RSP)
(RSP + -2104) PTRSUB RSP -2104
(f() + 8) INT_ADD f() 8
f(RSP) CALL func (RSP + -2152) (RSP + -2144) (RSP + -2144)
([[(f() + 8)]] + 24) CAST ([[(f() + 8)]] + 24)
[[(f() + 8)]] LOAD 433 [(f() + 8)]
(f() + 8) CAST (f() + 8)
VZERO CALLIND [([[(f() + 8)]] + 24)] [(f() + 8)]
(RSP + -2152) PTRSUB RSP -2152
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
0 COPY 0
f() CALL func 6888544
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
6888544 PTRSUB 0 6888544
 BRANCH VZERO
1 COPY 1
0 COPY 0
(RSP + -2104) PTRSUB RSP -2104
f() CALL func (RSP + -2104)
(RSP + -2104) PTRSUB RSP -2104
0 COPY 0
0 COPY 0
 CALL func (RSP + -2104)
(RSP + -2104) PTRSUB RSP -2104
f() CALL func (RSP + -2104)
 CALL func (ARG1 + 176) (RSP + -2104) 1 (ARG1 + 176)
(RSP + -2104) PTRSUB RSP -2104
(RSP + -2104) PTRSUB RSP -2104
 BRANCH VZERO
 CALL func (RSP + -2104)
 RETURN 0
 CALL func f()
6887840 PTRSUB 0 6887840
f() CALL func 6887840
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
 STORE 433 ARG1 [f(ARG2)]
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG2) CALL func ARG2
 STORE 433 ARG2 [f(RSP)]
(ARG2 + 8) PTRADD ARG2 1 8
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
f(RSP) CALL func (RSP + -40)
40 INT_ADD 0 40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
f(ARG2) CAST f(ARG2)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[f(ARG1)] LOAD 433 f(ARG1)
 STORE 433 (ARG1 + 8) [(f(ARG2) + 8)]
[40] LOAD 433 40
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
f(ARG1) CAST f(ARG1)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(ARG1) + 8)] LOAD 433 (f(ARG1) + 8)
[(f(ARG2) + 8)] LOAD 433 (f(ARG2) + 8)
f(RSP) CAST f(RSP)
[f(ARG2)] LOAD 433 f(ARG2)
 STORE 433 (ARG2 + 8) [(f(RSP) + 8)]
(RSP + -40) PTRSUB RSP -40
[f(RSP)] LOAD 433 f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
(ARG1 + 16) INT_ADD ARG1 16
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
 RETURN 0 [(ARG1 + 16)]
(ARG1 + 16) CAST (ARG1 + 16)
f() CALL func ARG1
f() CALL func ARG1
(f() - f()) INT_SUB f() f()
 RETURN 0 ((f() - f()) / 16)
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
 CALL func ARG1 ARG2 ARG2
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1 ((ARG2 * 16) + f()) ((ARG2 * 16) + f())
 CALL func ARG1 ((ARG2 * 16) + f()) ((ARG2 * 16) + f())
f() CALL func ARG1
f() CALL func ARG1
(ARG2 * 16) INT_MULT ARG2 16
(ARG2 * 16) INT_MULT ARG2 16
0 INT_LESS f() ARG2
0 INT_LESS f() ARG2
0 INT_LESS ARG2 f()
(ARG2 * 16) INT_MULT ARG2 16
(ARG2 * 16) INT_MULT ARG2 16
 CBRANCH (ARG2 INT_LESS f())
 RETURN 0
 CBRANCH (f() INT_NOTEQUAL ((ARG2 * 16) + f()))
0 INT_NOTEQUAL f() ((ARG2 * 16) + f())
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func 16 f()
0 INT_NOTEQUAL f() 0
 BRANCH VZERO
(f() + 16) INT_ADD f() 16
 CBRANCH (f() INT_LESS ARG2)
 CALL func f()
 BRANCH VZERO
 CALL func ((ARG2 * 16) + f()) f() f()
 CBRANCH (f() INT_LESS ARG2)
((ARG2 * 16) + f()) INT_ADD f() (ARG2 * 16)
((ARG2 * 16) + f()) INT_ADD (ARG2 * 16) f()
((ARG2 * 16) + f()) INT_ADD f() (ARG2 * 16)
((ARG2 * 16) + f()) INT_ADD (ARG2 * 16) f()
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL libcall_memcmp_thunk ARG2 f() 5
 STORE 433 (ARG1 + 16) ARG3
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH f()
 RETURN 0 ARG1
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL f() 5
0 COPY 0
 CBRANCH (f() INT_EQUAL 5)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CAST f()
(ARG1 + 16) CAST (ARG1 + 16)
 BRANCH VZERO
1 COPY 1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL libcall_memcmp_thunk ARG2 f() 6
 STORE 433 (ARG1 + 16) ARG3
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH f()
 RETURN 0 ARG1
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL f() 6
0 COPY 0
 CBRANCH (f() INT_EQUAL 6)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CAST f()
(ARG1 + 16) CAST (ARG1 + 16)
 BRANCH VZERO
1 COPY 1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL libcall_memcmp_thunk ARG2 f() 2
 STORE 433 (ARG1 + 16) ARG3
 CBRANCH f()
0 INT_EQUAL [(ARG1 + 16)] 0
 RETURN 0 ARG1
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 2)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CAST f()
0 COPY 0
(ARG1 + 16) CAST (ARG1 + 16)
1 COPY 1
 BRANCH VZERO
0 INT_EQUAL f() 2
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL libcall_memcmp_thunk ARG2 f() 4
 STORE 433 (ARG1 + 16) ARG3
 RETURN 0 ARG1
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH f()
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
0 INT_EQUAL f() 4
 CBRANCH (f() INT_EQUAL 4)
f() CAST f()
0 INT_EQUAL f() 0
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
f() CALL libcall_memcmp_thunk ARG2 f() 3
 STORE 433 (ARG1 + 16) ARG3
 RETURN 0 ARG1
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH f()
0 INT_EQUAL f() 3
0 COPY 0
 CBRANCH (f() INT_EQUAL 3)
f() CAST f()
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(ARG1 + 16) CAST (ARG1 + 16)
 BRANCH VZERO
1 COPY 1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 ARG2
 STORE 433 (ARG1 + 8) ARG3
 STORE 433 (ARG1 + 16) 0
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
[ARG2] LOAD 433 ARG2
 RETURN 0 f(ARG1 , ARG2)
f(ARG1 , ARG2) COPY f(ARG1 , ARG2)
(ARG1 + 16) CAST (ARG1 + 16)
[[(ARG1 + 16)]] LOAD 433 [(ARG1 + 16)]
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 BRANCH VZERO
(ARG1 + 16) CAST (ARG1 + 16)
 CALL func (RSP + -40) ARG1 ARG2 ARG1
 CALL func f(RSP) (RSP + -44) f(RSP)
f(RSP) CALL func f(RSP) 4640678 (RSP + -60) f(RSP)
8 COPY 8
apple COPY apple
f(RSP) CALL func f(RSP) 4640662 (RSP + -76) f(RSP)
4640678 PTRSUB 0 4640678
9 COPY 9
4640657 PTRSUB 0 4640657
40 CAST 40
(RSP + -60) PTRSUB RSP -60
(RSP + -80) PTRSUB RSP -80
f(RSP) CALL func f(RSP) 4640693 (RSP + -48) f(RSP)
10 COPY 10
nvidia COPY nvidia
5 COPY 5
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
f(RSP) CALL func f(RSP) 4640682 (RSP + -56) f(RSP)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
f(RSP) CALL func f(RSP) 4640666 (RSP + -72) f(RSP)
4640662 PTRSUB 0 4640662
(RSP + -56) PTRSUB RSP -56
6 COPY 6
f(RSP) CALL func (RSP + -40) apple (RSP + -88)
4640682 PTRSUB 0 4640682
(RSP + -76) PTRSUB RSP -76
7 COPY 7
[40] LOAD 433 40
(RSP + -68) PTRSUB RSP -68
f(RSP) CALL func f(RSP) nvidia (RSP + -52) f(RSP)
4640670 PTRSUB 0 4640670
(RSP + -40) PTRSUB RSP -40
(RSP + -48) PTRSUB RSP -48
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
2 COPY 2
f(RSP) CALL func f(RSP) 4640670 (RSP + -68) f(RSP)
(RSP + -88) PTRSUB RSP -88
f(RSP) CALL func f(RSP) 4640654 (RSP + -84) f(RSP)
3 COPY 3
4 COPY 4
(RSP + -52) PTRSUB RSP -52
(RSP + -72) PTRSUB RSP -72
(RSP + -40) PTRSUB RSP -40
4640666 PTRSUB 0 4640666
f(RSP) CALL func f(RSP) 4640674 (RSP + -64) f(RSP)
4640674 PTRSUB 0 4640674
11 COPY 11
0 COPY 0
(RSP + -84) PTRSUB RSP -84
f(RSP) CALL func f(RSP) 4640657 (RSP + -80) f(RSP)
4640654 PTRSUB 0 4640654
(RSP + -44) PTRSUB RSP -44
(RSP + -64) PTRSUB RSP -64
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
1 COPY 1
4640693 PTRSUB 0 4640693
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
[ARG2] LOAD 433 ARG2
 RETURN 0 f(ARG1 , ARG2)
f(ARG1 , ARG2) COPY f(ARG1 , ARG2)
(ARG1 + 16) CAST (ARG1 + 16)
[[(ARG1 + 16)]] LOAD 433 [(ARG1 + 16)]
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 BRANCH VZERO
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 (ARG1 + 8) ARG3
 STORE 433 (ARG1 + 16) 0
 RETURN 0
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL libcall_memcmp_thunk ARG2 f() 7
 STORE 433 (ARG1 + 16) ARG3
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 0 ARG1
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH f()
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
0 INT_LESS 6 f()
 CBRANCH (6 INT_LESS f())
f() CAST f()
0 INT_EQUAL f() 0
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
f() CALL libcall_memcmp_thunk ARG2 f() 6
 STORE 433 (ARG1 + 16) ARG3
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 0 ARG1
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH f()
0 INT_LESS 5 f()
0 COPY 0
 CBRANCH (5 INT_LESS f())
f() CAST f()
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(ARG1 + 16) CAST (ARG1 + 16)
1 COPY 1
 BRANCH VZERO
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
f() CALL libcall_memcmp_thunk ARG2 f() 3
 STORE 433 (ARG1 + 16) ARG3
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 0 ARG1
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH f()
0 INT_LESS 2 f()
0 COPY 0
 CBRANCH (2 INT_LESS f())
f() CAST f()
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(ARG1 + 16) CAST (ARG1 + 16)
1 COPY 1
 BRANCH VZERO
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL libcall_memcmp_thunk ARG2 f() 4
 STORE 433 (ARG1 + 16) ARG3
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH f()
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 0 ARG1
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
0 COPY 0
 CBRANCH (3 INT_LESS f())
0 INT_LESS 3 f()
f() CAST f()
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(ARG1 + 16) CAST (ARG1 + 16)
 BRANCH VZERO
1 COPY 1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL libcall_memcmp_thunk ARG2 f() 9
 STORE 433 (ARG1 + 16) ARG3
 CBRANCH f()
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL [(ARG1 + 16)] 0
 RETURN 0 ARG1
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH (8 INT_LESS f())
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
f() CAST f()
(ARG1 + 16) CAST (ARG1 + 16)
1 COPY 1
 BRANCH VZERO
0 INT_LESS 8 f()
 CALL func (RSP + -40) ARG1 ARG2 ARG1
(RSP + -76) PTRSUB RSP -76
[40] LOAD 433 40
f(RSP) CALL func (RSP + -40) eabihf (RSP + -88)
(RSP + -56) PTRSUB RSP -56
cygnus COPY cygnus
code16 COPY code16
1 COPY 1
eabihf COPY eabihf
8 COPY 8
 CALL func f(RSP) (RSP + -44) f(RSP)
f(RSP) CALL func f(RSP) android (RSP + -60) f(RSP)
(RSP + -60) PTRSUB RSP -60
9 COPY 9
(RSP + -80) PTRSUB RSP -80
f(RSP) CALL func f(RSP) gnueabi (RSP + -76) f(RSP)
(RSP + -40) PTRSUB RSP -40
3 COPY 3
(RSP + -52) PTRSUB RSP -52
(RSP + -72) PTRSUB RSP -72
2 COPY 2
4 COPY 4
f(RSP) CALL func f(RSP) 4641096 (RSP + -56) f(RSP)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
4641096 PTRSUB 0 4641096
5 COPY 5
40 INT_ADD 0 40
f(RSP) CALL func f(RSP) gnux32 (RSP + -72) f(RSP)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
gnueabi COPY gnueabi
7 COPY 7
(RSP + -48) PTRSUB RSP -48
f(RSP) CALL func f(RSP) itanium (RSP + -52) f(RSP)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -88) PTRSUB RSP -88
6 COPY 6
f(RSP) CALL func f(RSP) code16 (RSP + -68) f(RSP)
(RSP + -68) PTRSUB RSP -68
(RSP + -40) PTRSUB RSP -40
gnueabihf COPY gnueabihf
f(RSP) CALL func f(RSP) 4641076 (RSP + -84) f(RSP)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
android COPY android
itanium COPY itanium
10 COPY 10
40 CAST 40
f(RSP) CALL func f(RSP) cygnus (RSP + -48) f(RSP)
gnux32 COPY gnux32
(RSP + -44) PTRSUB RSP -44
f(RSP) CALL func f(RSP) 4641040 (RSP + -64) f(RSP)
(RSP + -64) PTRSUB RSP -64
4641076 PTRSUB 0 4641076
11 COPY 11
f(RSP) CALL func f(RSP) gnueabihf (RSP + -80) f(RSP)
4641040 PTRSUB 0 4641040
(RSP + -84) PTRSUB RSP -84
0 COPY 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
0 INT_SLESS ARG1 2
0 INT_EQUAL ARG1 1
0 INT_EQUAL ARG1 2
0 INT_EQUAL ARG1 0
0 INT_EQUAL ARG1 3
 CBRANCH (ARG1 INT_EQUAL 1)
 CBRANCH (ARG1 INT_SLESS 2)
 CBRANCH (ARG1 INT_EQUAL 0)
 CBRANCH (ARG1 INT_EQUAL 2)
Symbol COPY Symbol
f() CALL func unknown object format type /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp 512
macho COPY macho
Symbol COPY Symbol
f() CAST f()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp
unknown object format type COPY unknown object format type
 RETURN 0 macho
 RETURN 0 Symbol
 RETURN 0 Symbol
f() COPY f()
Symbol COPY Symbol
Symbol COPY Symbol
 RETURN 0 Symbol
 RETURN 0 f()
 CBRANCH (ARG1 INT_EQUAL 3)
Symbol COPY Symbol
Symbol COPY Symbol
macho COPY macho
f() CALL func ARG1
 CALL func ARG1 ARG2 -1 ARG2
0 INT_LESS f() ARG2
 CBRANCH (f() INT_LESS ARG2)
 CALL libcall___assert_fail_thunk size() >= N && "Dropping more elements than exist" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 413 0
size() >= N && "Dropping more elements than exist" COPY size() >= N && "Dropping more elements than exist"
 RETURN 1
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
[ARG2] LOAD 433 ARG2
 RETURN 0 f(ARG1 , ARG2)
f(ARG1 , ARG2) COPY f(ARG1 , ARG2)
(ARG1 + 16) CAST (ARG1 + 16)
[[(ARG1 + 16)]] LOAD 433 [(ARG1 + 16)]
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 BRANCH VZERO
(ARG1 + 16) CAST (ARG1 + 16)
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
f() CALL libcall_memcmp_thunk ARG2 ((f() + -3) + f()) 3
 STORE 433 (ARG1 + 16) ARG3
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH f()
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 RETURN 0 ARG1
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_LESS 2 f()
0 COPY 0
 CBRANCH (2 INT_LESS f())
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 INT_EQUAL f() 0
((f() + -3) + f()) INT_ADD f() (f() + -3)
(f() + -3) INT_ADD f() -3
((f() + -3) + f()) CAST ((f() + -3) + f())
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 ARG2
 STORE 433 (ARG1 + 8) ARG3
 RETURN 0
 STORE 433 (ARG1 + 16) 0
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
f() CALL func ARG1
ARG1 COPY ARG1
f() CALL libcall_memcmp_thunk ARG2 ((f() + -5) + f()) 5
 STORE 433 (ARG1 + 16) ARG3
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH f()
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL [(ARG1 + 16)] 0
 RETURN 0 ARG1
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH (4 INT_LESS f())
0 COPY 0
((f() + -5) + f()) CAST ((f() + -5) + f())
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
((f() + -5) + f()) INT_ADD f() (f() + -5)
(f() + -5) INT_ADD f() -5
(ARG1 + 16) CAST (ARG1 + 16)
 BRANCH VZERO
1 COPY 1
0 INT_LESS 4 f()
f() CALL func ARG1
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
f() CALL libcall_memcmp_thunk ARG2 ((f() + -4) + f()) 4
 STORE 433 (ARG1 + 16) ARG3
 RETURN 0 ARG1
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH f()
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL [(ARG1 + 16)] 0
 CBRANCH (3 INT_LESS f())
0 COPY 0
0 INT_LESS 3 f()
(f() + -4) INT_ADD f() -4
((f() + -4) + f()) CAST ((f() + -4) + f())
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
((f() + -4) + f()) INT_ADD f() (f() + -4)
(ARG1 + 16) CAST (ARG1 + 16)
 BRANCH VZERO
1 COPY 1
 CALL func (RSP + -40) ARG1 ARG2 ARG1
f(RSP) CALL func (RSP + -40) 4641375 (RSP + -56)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -40) PTRSUB RSP -40
f(RSP) CALL func f(RSP) macho (RSP + -48) f(RSP)
40 INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
4641380 PTRSUB 0 4641380
(RSP + -52) PTRSUB RSP -52
1 COPY 1
[40] LOAD 433 40
2 COPY 2
3 COPY 3
 CALL func f(RSP) (RSP + -44) f(RSP)
(RSP + -44) PTRSUB RSP -44
4641375 PTRSUB 0 4641375
f(RSP) CALL func f(RSP) 4641380 (RSP + -52) f(RSP)
(RSP + -40) PTRSUB RSP -40
0 COPY 0
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
macho COPY macho
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -48) PTRSUB RSP -48
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 ARG2
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 (ARG1 + 8) ARG3
 STORE 433 (ARG1 + 16) 0
 RETURN 0
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL libcall_memcmp_thunk ARG2 f() 4
 STORE 433 (ARG1 + 16) ARG3
 CBRANCH f()
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL [(ARG1 + 16)] 0
 RETURN 0 ARG1
(ARG1 + 16) CAST (ARG1 + 16)
0 COPY 0
 CBRANCH (3 INT_LESS f())
0 INT_LESS 3 f()
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 INT_EQUAL f() 0
f() CAST f()
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL libcall_memcmp_thunk ARG2 f() 6
 STORE 433 (ARG1 + 16) ARG3
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL [(ARG1 + 16)] 0
 RETURN 0 ARG1
 CBRANCH f()
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_LESS 5 f()
0 COPY 0
 CBRANCH (5 INT_LESS f())
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
1 COPY 1
f() CAST f()
0 INT_EQUAL f() 0
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
f() CALL libcall_memcmp_thunk ARG2 f() 3
 STORE 433 (ARG1 + 16) ARG3
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL [(ARG1 + 16)] 0
 RETURN 0 ARG1
 CBRANCH f()
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_LESS 2 f()
0 COPY 0
 CBRANCH (2 INT_LESS f())
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
f() CAST f()
0 INT_EQUAL f() 0
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL libcall_memcmp_thunk ARG2 f() 5
 STORE 433 (ARG1 + 16) ARG3
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL [(ARG1 + 16)] 0
 RETURN 0 ARG1
 CBRANCH f()
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_LESS 4 f()
0 COPY 0
 CBRANCH (4 INT_LESS f())
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
1 COPY 1
f() CAST f()
0 INT_EQUAL f() 0
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
[ARG2] LOAD 433 ARG2
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
f(ARG1 , ARG2) COPY f(ARG1 , ARG2)
 RETURN 0 f(ARG1 , ARG2)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
[[(ARG1 + 16)]] LOAD 433 [(ARG1 + 16)]
0 INT_EQUAL [(ARG1 + 16)] 0
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 BRANCH VZERO
(ARG1 + 16) CAST (ARG1 + 16)
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL libcall_memcmp_thunk ARG2 f() 9
 STORE 433 (ARG1 + 16) ARG3
 CBRANCH f()
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL [(ARG1 + 16)] 0
 RETURN 0 ARG1
(ARG1 + 16) CAST (ARG1 + 16)
0 COPY 0
 CBRANCH (8 INT_LESS f())
0 INT_LESS 8 f()
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 INT_EQUAL f() 0
f() CAST f()
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL libcall_memcmp_thunk ARG2 f() 7
 STORE 433 (ARG1 + 16) ARG3
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL [(ARG1 + 16)] 0
 RETURN 0 ARG1
 CBRANCH f()
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH (6 INT_LESS f())
0 INT_EQUAL f() 0
f() CAST f()
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_LESS 6 f()
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
f() CALL libcall_memcmp_thunk ARG2 f() 8
 STORE 433 (ARG1 + 16) ARG3
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL [(ARG1 + 16)] 0
 RETURN 0 ARG1
 CBRANCH f()
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_LESS 7 f()
0 COPY 0
 CBRANCH (7 INT_LESS f())
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
f() CAST f()
0 INT_EQUAL f() 0
 CALL func (RSP + -40) ARG1 ARG2 ARG1
(RSP + -112) PTRSUB RSP -112
5 COPY 5
darwin COPY darwin
(RSP + -72) PTRSUB RSP -72
solaris COPY solaris
4640886 PTRSUB 0 4640886
f(RSP) CALL func f(RSP) solaris (RSP + -100) f(RSP)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
6 COPY 6
40 INT_ADD 0 40
openbsd COPY openbsd
f(RSP) CALL func f(RSP) 4640886 (RSP + -72) f(RSP)
(RSP + -116) PTRSUB RSP -116
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -76) PTRSUB RSP -76
7 COPY 7
f(RSP) CALL func f(RSP) freebsd (RSP + -132) f(RSP)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -68) PTRSUB RSP -68
(RSP + -40) PTRSUB RSP -40
dragonfly COPY dragonfly
f(RSP) CALL func f(RSP) win32 (RSP + -96) f(RSP)
2 COPY 2
(RSP + -108) PTRSUB RSP -108
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
3 COPY 3
4 COPY 4
f(RSP) CALL func f(RSP) 4640802 (RSP + -128) f(RSP)
f(RSP) CALL func f(RSP) bitrig (RSP + -68) f(RSP)
11 COPY 11
12 COPY 12
(RSP + -84) PTRSUB RSP -84
f(RSP) CALL func f(RSP) netbsd (RSP + -108) f(RSP)
(RSP + -44) PTRSUB RSP -44
13 COPY 13
macosx COPY macosx
f(RSP) CALL func f(RSP) 4640918 (RSP + -48) f(RSP)
(RSP + -124) PTRSUB RSP -124
f(RSP) CALL func f(RSP) darwin (RSP + -140) f(RSP)
8 COPY 8
4640881 PTRSUB 0 4640881
cloudabi COPY cloudabi
f(RSP) CALL func f(RSP) openbsd (RSP + -104) f(RSP)
9 COPY 9
4640821 PTRSUB 0 4640821
[40] LOAD 433 40
(RSP + -80) PTRSUB RSP -80
 CALL func f(RSP) (RSP + -44) f(RSP)
netbsd COPY netbsd
bitrig COPY bitrig
f(RSP) CALL func f(RSP) dragonfly (RSP + -136) f(RSP)
f(RSP) CALL func f(RSP) 4640881 (RSP + -76) f(RSP)
(RSP + -120) PTRSUB RSP -120
10 COPY 10
40 CAST 40
linux COPY linux
(RSP + -132) PTRSUB RSP -132
rtems COPY rtems
f(RSP) CALL func (RSP + -40) cloudabi (RSP + -144)
(RSP + -92) PTRSUB RSP -92
f(RSP) CALL func f(RSP) minix (RSP + -84) f(RSP)
17 COPY 17
f(RSP) CALL func f(RSP) 4640906 (RSP + -56) f(RSP)
f(RSP) CALL func f(RSP) 4640821 (RSP + -116) f(RSP)
18 COPY 18
(RSP + -96) PTRSUB RSP -96
19 COPY 19
kfreebsd COPY kfreebsd
(RSP + -56) PTRSUB RSP -56
minix COPY minix
(RSP + -48) PTRSUB RSP -48
f(RSP) CALL func f(RSP) rtems (RSP + -80) f(RSP)
13 COPY 13
(RSP + -128) PTRSUB RSP -128
(RSP + -88) PTRSUB RSP -88
14 COPY 14
15 COPY 15
4640802 PTRSUB 0 4640802
f(RSP) CALL func f(RSP) macosx (RSP + -112) f(RSP)
4640918 PTRSUB 0 4640918
f(RSP) CALL func f(RSP) amdhsa (RSP + -52) f(RSP)
(RSP + -52) PTRSUB RSP -52
16 COPY 16
23 COPY 23
f(RSP) CALL func f(RSP) windows (RSP + -92) f(RSP)
(RSP + -64) PTRSUB RSP -64
windows COPY windows
24 COPY 24
amdhsa COPY amdhsa
(RSP + -40) PTRSUB RSP -40
f(RSP) CALL func f(RSP) kfreebsd (RSP + -124) f(RSP)
(RSP + -104) PTRSUB RSP -104
freebsd COPY freebsd
(RSP + -144) PTRSUB RSP -144
win32 COPY win32
0 COPY 0
f(RSP) CALL func f(RSP) 4640897 (RSP + -64) f(RSP)
4640897 PTRSUB 0 4640897
1 COPY 1
4640906 PTRSUB 0 4640906
f(RSP) CALL func f(RSP) haiku (RSP + -88) f(RSP)
20 COPY 20
(RSP + -136) PTRSUB RSP -136
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
haiku COPY haiku
f(RSP) CALL func f(RSP) linux (RSP + -120) f(RSP)
(RSP + -100) PTRSUB RSP -100
f(RSP) CALL func f(RSP) 4640901 (RSP + -60) f(RSP)
21 COPY 21
(RSP + -60) PTRSUB RSP -60
4640901 PTRSUB 0 4640901
(RSP + -140) PTRSUB RSP -140
22 COPY 22
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL libcall_memcmp_thunk ARG2 f() 7
 STORE 433 (ARG1 + 16) ARG3
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH f()
 RETURN 0 ARG1
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL f() 7
0 COPY 0
 CBRANCH (f() INT_EQUAL 7)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CAST f()
(ARG1 + 16) CAST (ARG1 + 16)
 BRANCH VZERO
1 COPY 1
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL libcall_memcmp_thunk ARG2 f() 6
 STORE 433 (ARG1 + 16) ARG3
 RETURN 0 ARG1
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH f()
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
0 INT_EQUAL f() 6
 CBRANCH (f() INT_EQUAL 6)
f() CAST f()
0 INT_EQUAL f() 0
(ARG1 + 16) CAST (ARG1 + 16)
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL libcall_memcmp_thunk ARG2 f() 14
 STORE 433 (ARG1 + 16) ARG3
 CBRANCH f()
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL [(ARG1 + 16)] 0
 RETURN 0 ARG1
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL f() 14
 CBRANCH (f() INT_EQUAL 14)
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 INT_EQUAL f() 0
f() CAST f()
f(ARG1) CALL func ARG1 ARG2 ARG4 ARG2
 CALL func f(ARG1) ARG3 ARG4 f(ARG1)
 RETURN 0
ARG1 COPY ARG1
ARG2 COPY ARG2
 CALL func (RSP + -56) 4640467
[(f() + 40)] LOAD 433 (f() + 40)
4640467 PTRSUB 0 4640467
f() CALL func (RSP + -120) A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(RSP + -120) PTRSUB RSP -120
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
5 COPY 5
0 COPY 0
 CBRANCH f()
 CALL func (RSP + -104) 0
(RSP + -120) PTRSUB RSP -120
 BRANCH VZERO
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -120) A_Stack[-0x68]:8 A_Stack[-0x60]:8 A_Stack[-0x68]:8
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
6 COPY 6
(RSP + -72) PTRSUB RSP -72
 CBRANCH (f() INT_EQUAL 0)
f() CALL func (RSP + -120) f() f() f()
0 INT_EQUAL f() 0
(RSP + -120) PTRSUB RSP -120
 CBRANCH f()
 CALL func (RSP + -72) 0
 BRANCH VZERO
0 COPY 0
 RETURN 0 f()
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 CALL func (RSP + -56) bpfel
 BRANCH VZERO
(RSP + -120) PTRSUB RSP -120
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
bpfel COPY bpfel
(RSP + -56) PTRSUB RSP -56
1 COPY 1
f() CALL func (RSP + -120) f() f() f()
 BRANCH VZERO
0 COPY 0
5 COPY 5
f() CALL func (RSP + -120) A_Stack[-0x58]:8 A_Stack[-0x50]:8 A_Stack[-0x58]:8
bpfeb COPY bpfeb
0 INT_NOTEQUAL f() 0
 CALL func (RSP + -88) bpfeb
(RSP + -88) PTRSUB RSP -88
(RSP + -120) PTRSUB RSP -120
0 COPY 0
f(ARG1) CALL func ARG1 ARG2 ARG4 ARG2
 CALL func f(ARG1) ARG3 ARG4 f(ARG1)
 RETURN 0
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL libcall_memcmp_thunk ARG2 f() 4
 STORE 433 (ARG1 + 16) ARG3
 CBRANCH f()
0 INT_EQUAL [(ARG1 + 16)] 0
 RETURN 0 ARG1
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 4)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CAST f()
0 COPY 0
(ARG1 + 16) CAST (ARG1 + 16)
1 COPY 1
 BRANCH VZERO
0 INT_EQUAL f() 4
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 ARG2
 STORE 433 (ARG1 + 8) ARG3
 STORE 433 (ARG1 + 16) 0
 RETURN 0
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL libcall_memcmp_thunk ARG2 f() 5
 STORE 433 (ARG1 + 16) ARG3
 RETURN 0 ARG1
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH f()
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
0 INT_EQUAL f() 5
 CBRANCH (f() INT_EQUAL 5)
f() CAST f()
0 INT_EQUAL f() 0
(ARG1 + 16) CAST (ARG1 + 16)
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL libcall_memcmp_thunk ARG2 f() 5
 STORE 433 (ARG1 + 16) ARG3
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL [(ARG1 + 16)] 0
 RETURN 0 ARG1
 CBRANCH f()
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_LESS 4 f()
0 COPY 0
 CBRANCH (4 INT_LESS f())
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
1 COPY 1
f() CAST f()
0 INT_EQUAL f() 0
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
f() CALL libcall_memcmp_thunk ARG2 f() 3
 STORE 433 (ARG1 + 16) ARG3
 RETURN 0 ARG1
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH f()
0 INT_EQUAL f() 3
0 COPY 0
 CBRANCH (f() INT_EQUAL 3)
f() CAST f()
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(ARG1 + 16) CAST (ARG1 + 16)
 BRANCH VZERO
1 COPY 1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
f() CALL libcall_memcmp_thunk ARG2 f() 9
 STORE 433 (ARG1 + 16) ARG3
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL [(ARG1 + 16)] 0
 RETURN 0 ARG1
 CBRANCH f()
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
(ARG1 + 16) CAST (ARG1 + 16)
0 COPY 0
0 INT_EQUAL f() 9
 CBRANCH (f() INT_EQUAL 9)
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
f() CAST f()
0 INT_EQUAL f() 0
f(ARG1) CALL func ARG1 ARG2 ARG4 ARG2
 CALL func f(ARG1) ARG3 ARG4 f(ARG1)
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
f() CALL libcall_memcmp_thunk ARG2 f() 11
 STORE 433 (ARG1 + 16) ARG3
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL [(ARG1 + 16)] 0
 RETURN 0 ARG1
 CBRANCH f()
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
(ARG1 + 16) CAST (ARG1 + 16)
0 COPY 0
0 INT_EQUAL f() 11
 CBRANCH (f() INT_EQUAL 11)
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
f() CAST f()
0 INT_EQUAL f() 0
f(ARG1) CALL func f(ARG1) ARG3 ARG5 f(ARG1)
 CALL func f(ARG1) ARG4 ARG5 f(ARG1)
f(ARG1) CALL func ARG1 ARG2 ARG5 ARG2
 RETURN 0
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL libcall_memcmp_thunk ARG2 f() 3
 STORE 433 (ARG1 + 16) ARG3
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH f()
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 0 ARG1
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
0 COPY 0
 CBRANCH (2 INT_LESS f())
0 INT_LESS 2 f()
f() CAST f()
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(ARG1 + 16) CAST (ARG1 + 16)
 BRANCH VZERO
1 COPY 1
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
[ARG2] LOAD 433 ARG2
 RETURN 0 f(ARG1 , ARG2)
f(ARG1 , ARG2) COPY f(ARG1 , ARG2)
(ARG1 + 16) CAST (ARG1 + 16)
[[(ARG1 + 16)]] LOAD 433 [(ARG1 + 16)]
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 BRANCH VZERO
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
f() CALL libcall_memcmp_thunk ARG2 f() 8
 STORE 433 (ARG1 + 16) ARG3
 RETURN 0 ARG1
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH f()
0 INT_EQUAL f() 8
0 COPY 0
 CBRANCH (f() INT_EQUAL 8)
f() CAST f()
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(ARG1 + 16) CAST (ARG1 + 16)
 BRANCH VZERO
1 COPY 1
f(ARG1) CALL func ARG1 ARG2 ARG4 ARG2
 CALL func f(ARG1) ARG3 ARG4 f(ARG1)
 RETURN 0
f() CALL func (f() - ARG3) ARG2 ARG3
(f() - ARG3) INT_SUB f() ARG3
0 INT_LESSEQUAL ARG3 [(ARG1 + 8)]
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
 CBRANCH (ARG3 INT_LESSEQUAL [(ARG1 + 8)])
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (f() INT_EQUAL 0)
 RETURN 0 0
 RETURN 0 1
1 COPY 1
0 COPY 0
0 INT_EQUAL f() 0
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
f() CALL libcall_memcmp_thunk ARG2 f() 5
 STORE 433 (ARG1 + 16) ARG3
 RETURN 0 ARG1
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH f()
0 INT_EQUAL f() 5
0 COPY 0
 CBRANCH (f() INT_EQUAL 5)
f() CAST f()
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(ARG1 + 16) CAST (ARG1 + 16)
 BRANCH VZERO
1 COPY 1
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 (ARG1 + 8) ARG3
 STORE 433 (ARG1 + 16) 0
 RETURN 0
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL libcall_memcmp_thunk ARG2 f() 4
 STORE 433 (ARG1 + 16) ARG3
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH f()
 RETURN 0 ARG1
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL f() 4
0 COPY 0
 CBRANCH (f() INT_EQUAL 4)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CAST f()
(ARG1 + 16) CAST (ARG1 + 16)
 BRANCH VZERO
1 COPY 1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL libcall_memcmp_thunk ARG2 f() 3
 STORE 433 (ARG1 + 16) ARG3
 CBRANCH f()
0 INT_EQUAL [(ARG1 + 16)] 0
 RETURN 0 ARG1
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 3)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CAST f()
0 COPY 0
(ARG1 + 16) CAST (ARG1 + 16)
1 COPY 1
 BRANCH VZERO
0 INT_EQUAL f() 3
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
f() CALL libcall_memcmp_thunk ARG2 f() 7
 STORE 433 (ARG1 + 16) ARG3
 RETURN 0 ARG1
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH f()
0 INT_EQUAL f() 7
0 COPY 0
 CBRANCH (f() INT_EQUAL 7)
f() CAST f()
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(ARG1 + 16) CAST (ARG1 + 16)
 BRANCH VZERO
1 COPY 1
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL libcall_memcmp_thunk ARG2 f() 2
 STORE 433 (ARG1 + 16) ARG3
 RETURN 0 ARG1
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH f()
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
0 INT_EQUAL f() 2
 CBRANCH (f() INT_EQUAL 2)
f() CAST f()
0 INT_EQUAL f() 0
(ARG1 + 16) CAST (ARG1 + 16)
f(ARG1) CALL func ARG1 ARG2 ARG6 ARG2
f(ARG1) CALL func f(ARG1) ARG3 ARG6 f(ARG1)
f(ARG1) CALL func f(ARG1) ARG4 ARG6 f(ARG1)
 CALL func f(ARG1) ARG5 ARG6 f(ARG1)
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 1 8
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 RETURN 0 (f(ARG1 , ARG2) # f(ARG1 , ARG2))
(f(ARG1 , ARG2) # f(ARG1 , ARG2)) PIECE f(ARG1 , ARG2) f(ARG1 , ARG2)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[([(ARG1 + 16)] + 8)] LOAD 433 ([(ARG1 + 16)] + 8)
[[(ARG1 + 16)]] LOAD 433 [(ARG1 + 16)]
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
([(ARG1 + 16)] + 8) PTRADD [(ARG1 + 16)] 1 8
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 BRANCH VZERO
ARG1 COPY ARG1
ARG2 COPY ARG2
40 INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
v7e-m COPY v7e-m
 CALL func (RSP + -168) v6s-m
(RSP + -72) PTRSUB RSP -72
4645104 PTRSUB 0 4645104
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[40] LOAD 433 40
f(RSP) CALL func f(RSP) 4645087 (RSP + -88) f(RSP)
 CALL func (RSP + -88) v7e-m
4646247 PTRSUB 0 4646247
(RSP + -152) PTRSUB RSP -152
(RSP + -136) PTRSUB RSP -136
f(RSP) CALL func f(RSP) 4645003 (RSP + -152) f(RSP)
4645003 PTRSUB 0 4645003
 CALL func (RSP + -40) ARG1 ARG2 ARG1
(RSP + -168) PTRSUB RSP -168
4646226 PTRSUB 0 4646226
 CALL func (RSP + -120) 4646242
(RSP + -56) PTRSUB RSP -56
(RSP + -72) PTRSUB RSP -72
4645053 PTRSUB 0 4645053
4646263 PTRSUB 0 4646263
(RSP + -56) PTRSUB RSP -56
(RSP + -136) PTRSUB RSP -136
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -104) 4646237
4646281 PTRSUB 0 4646281
(RSP + -152) PTRSUB RSP -152
4646252 PTRSUB 0 4646252
f(RSP) CALL func f(RSP) 4646263 (RSP + -136) f(RSP)
(RSP + -104) PTRSUB RSP -104
(RSP + -40) PTRSUB RSP -40
f(RSP) CALL func (RSP + -40) 4645021 (RSP + -168)
4645069 PTRSUB 0 4645069
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -136) 4646247
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -56) v8.1-a
(RSP + -120) PTRSUB RSP -120
f() CALL func f(RSP) 4645104 4646281 aarch64 arm64 (RSP + -72)
f(RSP) CALL func f(RSP) 4645053 (RSP + -120) f(RSP)
4646242 PTRSUB 0 4646242
(RSP + -120) PTRSUB RSP -120
 CALL func f() (RSP + -184) f()
v6s-m COPY v6s-m
 CALL func (RSP + -152) 4646252
(RSP + -88) PTRSUB RSP -88
(RSP + -40) PTRSUB RSP -40
4645087 PTRSUB 0 4645087
v8.1-a COPY v8.1-a
f(RSP) CALL func f(RSP) 4645069 (RSP + -104) f(RSP)
 CALL func (RSP + -72) 4646226
40 CAST 40
v8.1a COPY v8.1a
(RSP + -168) PTRSUB RSP -168
f() CALL func f() v8.1a (RSP + -56) f()
arm64 COPY arm64
aarch64 COPY aarch64
4646237 PTRSUB 0 4646237
4645021 PTRSUB 0 4645021
(RSP + -104) PTRSUB RSP -104
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
(ARG2 # ARG1) PIECE ARG2 ARG1
ARG2 COPY ARG2
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
-1 COPY -1
(RSP + -88) PTRSUB RSP -88
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -88) 4645136
[(f() + 40)] LOAD 433 (f() + 40)
4645136 PTRSUB 0 4645136
 CBRANCH (0 INT_EQUAL [(f() + 40)])
arm64 COPY arm64
 CALL func (RSP + -56) arm64
(f() + 40) CAST (f() + 40)
f() CALL func (RSP + -104) A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -104) PTRSUB RSP -104
(RSP + -56) PTRSUB RSP -56
(f() + 40) INT_ADD f() 40
 CBRANCH (f(RSP) INT_NOTEQUAL -1)
f(ARG1 , ARG2) COPY f(ARG1 , ARG2)
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
(ARG2 # ARG1) COPY (ARG2 # ARG1)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
5 COPY 5
(RSP + -104) PTRSUB RSP -104
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
0 INT_EQUAL f() -1
 CBRANCH (f() INT_EQUAL 0)
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
 CBRANCH (f() INT_EQUAL -1)
0 INT_EQUAL f() 0
(f(ARG2) # f(ARG1)) PIECE f(ARG2) f(ARG1)
f() CALL func (RSP + -104)
 BRANCH VZERO
4646285 PTRSUB 0 4646285
f(ARG1 , ARG2) COPY f(ARG1 , ARG2)
 CALL func (RSP + -56) 4646285
0 INT_NOTEQUAL f() -1
(RSP + -104) PTRSUB RSP -104
 CBRANCH f()
 CBRANCH (f() INT_NOTEQUAL -1)
f() CALL func (RSP + -104) A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_EQUAL 0)
(RSP + -104) PTRSUB RSP -104
(RSP + -56) PTRSUB RSP -56
aarch64 COPY aarch64
 CALL func (RSP + -56) aarch64
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
5 COPY 5
 BRANCH VZERO
f() CALL func (RSP + -104) A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
 CBRANCH (f() INT_EQUAL 118)
f() CALL func (RSP + -104) 1
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
f() INT_SEXT f()
(RSP + -104) PTRSUB RSP -104
 CBRANCH (9 INT_LESS (f() + 48))
1 COPY 1
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
0 INT_LESS 9 (f() + 48)
(f() + 48) INT_SUB f() 48
 BRANCH VZERO
f(RSP) CALL func (RSP + -104) A_Stack[-0x38]:8 A_Stack[-0x30]:8 0
(RSP + -104) PTRSUB RSP -104
7 COPY 7
(A_Stack[-0x50]:8 # A_Stack[-0x58]:8) COPY (A_Stack[-0x50]:8 # A_Stack[-0x58]:8)
(A_Stack[-0x50]:8 # A_Stack[-0x58]:8) PIECE A_Stack[-0x50]:8 A_Stack[-0x58]:8
(RSP + -56) PTRSUB RSP -56
4646295 PTRSUB 0 4646295
 CALL func (RSP + -56) 4646295
(ARG2 # ARG1) PIECE ARG2 ARG1
 CBRANCH (f(RSP) INT_NOTEQUAL -1)
0 INT_NOTEQUAL f(RSP) -1
 CBRANCH (f() INT_NOTEQUAL 0)
10 COPY 10
(RSP + -104) PTRSUB RSP -104
0 INT_EQUAL f() 0
3 COPY 3
 BRANCH VZERO
thumb COPY thumb
 CALL func (RSP + -56) thumb
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -104) A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) f() f()
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) INT_RIGHT f() 64
f() CALL func (RSP + -104) f() 2 f()
0 INT_EQUAL f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -72) 4646295
4646295 PTRSUB 0 4646295
(RSP + -104) PTRSUB RSP -104
(RSP + -72) PTRSUB RSP -72
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
f(ARG1 , ARG2) COPY f(ARG1 , ARG2)
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 f(ARG1 , ARG2)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func (RSP + -104)
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 0 (f() + -2)
(RSP + -104) PTRSUB RSP -104
(f() + -2) INT_ADD f() -2
 CBRANCH (f() INT_NOTEQUAL -1)
 CBRANCH f()
(f() # f()) PIECE f() f()
f() CALL func (RSP + -104) 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
0 INT_EQUAL f() 118
(RSP + -104) PTRSUB RSP -104
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
4646295 PTRSUB 0 4646295
0 INT_NOTEQUAL f(RSP) -1
f(RSP) CALL func (RSP + -104) f() f() 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
(RSP + -104) PTRSUB RSP -104
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
(f() # f()) PIECE f() f()
 CALL func (RSP + -56) 4646295
(RSP + -56) PTRSUB RSP -56
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
0 COPY 0
0 INT_NOTEQUAL f() 0
f() CALL func (RSP + -104) f() f() f()
(f() + 2) INT_ADD f() 2
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
(f(ARG2) # f(ARG1)) PIECE f(ARG2) f(ARG1)
 CALL func (RSP + -56) 4646295
4646295 PTRSUB 0 4646295
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) f() -1 f()
f(ARG1 , ARG2) COPY f(ARG1 , ARG2)
(RSP + -104) PTRSUB RSP -104
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
0 INT_NOTEQUAL f() -1
f() CALL func (RSP + -104) 7 3 7
(RSP + -104) PTRSUB RSP -104
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) INT_RIGHT f() 64
 CALL func (RSP + -56) 4646298
4646298 PTRSUB 0 4646298
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL f() 0
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) A_Stack[-0x38]:8 A_Stack[-0x30]:8
f(ARG1 , ARG2) CALL func ARG1 ARG2 ARG1
(f(ARG1 , ARG2) / 2147483647) INT_RIGHT f(ARG1 , ARG2) 64
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(f() / 2147483647) INT_RIGHT f() 64
6880496 CAST 6880496
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f(Symbol) INT_EQUAL 6880496)
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
(FS_OFFSET + 40) INT_ADD 0 40
(f(ARG1 , ARG2) / 4611686014132420609) SUBPIECE (f(ARG1 , ARG2) / 2147483647) 0
Symbol PTRSUB 0 Symbol
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
6880496 PTRSUB 0 6880496
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
0 INT_EQUAL f(Symbol) 6880496
f() CALL func (f(ARG1 , ARG2) / 2147483647) (f(ARG1 , ARG2) / 4611686014132420609) (f(ARG1 , ARG2) / 2147483647)
[(f(Symbol) + 24)] LOAD 433 (f(Symbol) + 24)
0 COPY 0
(f(Symbol) + 16) PTRADD f(Symbol) 2 8
(RSP + -72) PTRSUB RSP -72
[(f(Symbol) + 8)] LOAD 433 (f(Symbol) + 8)
(f(Symbol) + 8) PTRADD f(Symbol) 1 8
[f(Symbol)] LOAD 433 f(Symbol)
 CALL func (RSP + -72) [f(Symbol)] [f(Symbol)]
(RSP + -72) PTRSUB RSP -72
f() CALL func (RSP + -72) (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
[(f(Symbol) + 16)] LOAD 433 (f(Symbol) + 16)
(f(Symbol) + 32) PTRADD f(Symbol) 4 8
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
[(f(Symbol) + 32)] LOAD 433 (f(Symbol) + 32)
(f(Symbol) + 24) PTRADD f(Symbol) 3 8
[(f(Symbol) + 8)] CAST [(f(Symbol) + 8)]
 BRANCH VZERO
([(f(Symbol) + 8)] & 4294967295) INT_AND [(f(Symbol) + 8)] 4294967295
(f(Symbol) + 40) PTRADD f(Symbol) 5 8
 BRANCH VZERO
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(Symbol)
 RETURN 1
f(ARG1 , ARG2) CALL func ARG1 ARG2 ARG1
 BRANCHIND f(Symbol)
f(Symbol) CALL func (f(ARG1 , ARG2) / 2147483647) (f(ARG1 , ARG2) / 4611686014132420609) (f(ARG1 , ARG2) / 2147483647)
 RETURN 0 f()
(f(ARG1 , ARG2) / 4611686014132420609) SUBPIECE (f(ARG1 , ARG2) / 2147483647) 0
(f(ARG1 , ARG2) / 2147483647) INT_RIGHT f(ARG1 , ARG2) 64
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
2 COPY 2
 BRANCH VZERO
0 COPY 0
1 COPY 1
3 COPY 3
 BRANCH VZERO
 BRANCH VZERO
f(ARG1 , ARG2) CALL func ARG1 ARG2 ARG1
 BRANCHIND f(Symbol)
f(Symbol) CALL func (f(ARG1 , ARG2) / 2147483647) (f(ARG1 , ARG2) / 4611686014132420609) (f(ARG1 , ARG2) / 2147483647)
 RETURN 0 f()
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
(f(ARG1 , ARG2) / 4611686014132420609) SUBPIECE (f(ARG1 , ARG2) / 2147483647) 0
(f(ARG1 , ARG2) / 2147483647) INT_RIGHT f(ARG1 , ARG2) 64
0 COPY 0
 BRANCH VZERO
 BRANCH VZERO
2 COPY 2
 BRANCH VZERO
 BRANCH VZERO
5 COPY 5
6 COPY 6
3 COPY 3
8 COPY 8
4 COPY 4
7 COPY 7
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
ARG1 COPY ARG1
ARG2 COPY ARG2
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) CAST (f() + 40)
 CALL func (RSP + -152) armeb
(RSP + -152) PTRSUB RSP -152
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
armeb COPY armeb
(RSP + -168) PTRSUB RSP -168
 CBRANCH f()
f() CALL func (RSP + -168) A_Stack[-0x98]:8 A_Stack[-0x90]:8 A_Stack[-0x98]:8
0 INT_NOTEQUAL f() [(f() + 40)]
 CBRANCH f()
f() CALL func (RSP + -168) f() f() f()
f() CALL func (RSP + -168) f() f() f()
(RSP + -168) PTRSUB RSP -168
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -72) 4646295
aarch64 COPY aarch64
(RSP + -72) PTRSUB RSP -72
4646295 PTRSUB 0 4646295
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -72) aarch64
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
1 COPY 1
 BRANCH VZERO
0 COPY 0
 BRANCH VZERO
2 COPY 2
 BRANCH VZERO
1 COPY 1
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
(RSP + -168) PTRSUB RSP -168
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
f() CALL func (RSP + -168) A_Stack[-0x78]:8 A_Stack[-0x70]:8 A_Stack[-0x78]:8
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -120) 0
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -88) thumb
f() CALL func (RSP + -168) f() f() f()
(RSP + -88) PTRSUB RSP -88
thumb COPY thumb
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 BRANCH VZERO
(RSP + -168) PTRSUB RSP -168
4646285 PTRSUB 0 4646285
f() CALL func (RSP + -168) f() f() f()
0 INT_EQUAL f() 0
2 COPY 2
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -104) 4646285
0 INT_NOTEQUAL f() 0
(RSP + -136) PTRSUB RSP -136
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -136) thumbeb
f() CALL func (RSP + -168) A_Stack[-0x88]:8 A_Stack[-0x80]:8 A_Stack[-0x88]:8
thumbeb COPY thumbeb
0 COPY 0
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL libcall_memcmp_thunk ARG2 f() 5
 STORE 433 (ARG1 + 16) ARG3
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 0 ARG1
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH f()
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
0 INT_LESS 4 f()
 CBRANCH (4 INT_LESS f())
f() CAST f()
0 INT_EQUAL f() 0
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
[ARG2] LOAD 433 ARG2
 RETURN 0 f(ARG1 , ARG2)
f(ARG1 , ARG2) COPY f(ARG1 , ARG2)
(ARG1 + 16) CAST (ARG1 + 16)
[[(ARG1 + 16)]] LOAD 433 [(ARG1 + 16)]
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 BRANCH VZERO
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 (ARG1 + 8) ARG3
 RETURN 0
 STORE 433 (ARG1 + 16) 0
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL libcall_memcmp_thunk ARG2 f() 7
 STORE 433 (ARG1 + 16) ARG3
 CBRANCH f()
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL [(ARG1 + 16)] 0
 RETURN 0 ARG1
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH (6 INT_LESS f())
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
f() CAST f()
(ARG1 + 16) CAST (ARG1 + 16)
1 COPY 1
 BRANCH VZERO
0 INT_LESS 6 f()
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
f() CALL libcall_memcmp_thunk ARG2 f() 3
 STORE 433 (ARG1 + 16) ARG3
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 0 ARG1
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH f()
0 INT_LESS 2 f()
0 COPY 0
 CBRANCH (2 INT_LESS f())
f() CAST f()
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(ARG1 + 16) CAST (ARG1 + 16)
1 COPY 1
 BRANCH VZERO
 CALL func (RSP + -40) ARG1 ARG2 ARG1
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
2 COPY 2
arm64 COPY arm64
f(RSP) CALL func f(RSP) arm64 (RSP + -56) f(RSP)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
1 COPY 1
(RSP + -56) PTRSUB RSP -56
40 INT_ADD 0 40
4646285 PTRSUB 0 4646285
(RSP + -48) PTRSUB RSP -48
[40] LOAD 433 40
0 COPY 0
aarch64 COPY aarch64
(RSP + -60) PTRSUB RSP -60
thumb COPY thumb
f(RSP) CALL func (RSP + -40) aarch64 (RSP + -60)
 CALL func f(RSP) (RSP + -44) f(RSP)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -40) PTRSUB RSP -40
f(RSP) CALL func f(RSP) thumb (RSP + -52) f(RSP)
(RSP + -52) PTRSUB RSP -52
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
3 COPY 3
f(RSP) CALL func f(RSP) 4646285 (RSP + -48) f(RSP)
(RSP + -44) PTRSUB RSP -44
3 COPY 3
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
ARG1 COPY ARG1
f() CALL func ARG1 ARG2 ARG1
ARG2 COPY ARG2
f() CALL func ARG1 ARG2 ARG1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_EQUAL f() 1
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
f(ARG1 , ARG2) CALL func ARG1 ARG2 ARG1
f() CALL func (RSP + -120)
0 COPY 0
0 INT_EQUAL 0 [(f() + 40)]
 CBRANCH (f() INT_EQUAL 1)
(RSP + -120) PTRSUB RSP -120
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_EQUAL 2)
24 COPY 24
 BRANCH VZERO
23 COPY 23
 BRANCH VZERO
23 COPY 23
24 COPY 24
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH f()
(f(ARG1 , ARG2) / 2147483647) INT_RIGHT f(ARG1 , ARG2) 64
0 INT_EQUAL f() 2
(f(ARG1 , ARG2) / 4611686014132420609) SUBPIECE (f(ARG1 , ARG2) / 2147483647) 0
 CBRANCH (f() INT_EQUAL 2)
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
0 COPY 0
 BRANCH VZERO
0 COPY 0
 CALL func (RSP + -72) 4641247
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
4641247 PTRSUB 0 4641247
(RSP + -72) PTRSUB RSP -72
(RSP + -120) PTRSUB RSP -120
0 INT_EQUAL f() 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
f() CALL func (RSP + -120) A_Stack[-0x48]:8 A_Stack[-0x40]:8 A_Stack[-0x48]:8
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 3)
4 COPY 4
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 2)
0 INT_EQUAL f() 2
 CBRANCH (f() INT_EQUAL 2)
 CBRANCH (f() INT_EQUAL 3)
3 COPY 3
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 RETURN 1
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
0 COPY 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
0 INT_EQUAL f() 3
 BRANCH VZERO
f() COPY f()
f() CALL func (f(ARG1 , ARG2) / 2147483647) (f(ARG1 , ARG2) / 4611686014132420609) (f(ARG1 , ARG2) / 2147483647)
 CBRANCH (f() INT_EQUAL 3)
0 COPY 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
f() CALL func (f(ARG1 , ARG2) / 2147483647) (f(ARG1 , ARG2) / 2147483647) (f(ARG1 , ARG2) / 2147483647)
 CBRANCH (f() INT_EQUAL 2)
0 INT_EQUAL f() 3
 BRANCH VZERO
23 COPY 23
 BRANCH VZERO
2 COPY 2
 BRANCH VZERO
1 COPY 1
0 INT_EQUAL f() 2
0 INT_EQUAL f() 2
 CBRANCH (f() INT_EQUAL 6)
0 INT_EQUAL f() 2
 BRANCH VZERO
0 INT_EQUAL f() 3
24 COPY 24
 CALL func (RSP + -56) 4641250
4641250 PTRSUB 0 4641250
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
0 INT_EQUAL f() 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
f() CALL func (RSP + -120) A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
(RSP + -120) PTRSUB RSP -120
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
(RSP + -56) PTRSUB RSP -56
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
0 INT_EQUAL f() 6
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL libcall_memcmp_thunk ARG2 f() 7
 STORE 433 (ARG1 + 16) ARG3
 CBRANCH f()
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL [(ARG1 + 16)] 0
 RETURN 0 ARG1
(ARG1 + 16) CAST (ARG1 + 16)
0 COPY 0
 CBRANCH (6 INT_LESS f())
0 INT_LESS 6 f()
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 INT_EQUAL f() 0
f() CAST f()
f(ARG1) CALL func f(ARG1) ARG3 ARG5 f(ARG1)
 CALL func f(ARG1) ARG4 ARG5 f(ARG1)
f(ARG1) CALL func ARG1 ARG2 ARG5 ARG2
 RETURN 0
f(ARG1) CALL func ARG1 ARG2 ARG6 ARG2
f(ARG1) CALL func f(ARG1) ARG3 ARG6 f(ARG1)
f(ARG1) CALL func f(ARG1) ARG4 ARG6 f(ARG1)
 CALL func f(ARG1) ARG5 ARG6 f(ARG1)
 RETURN 0
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL libcall_memcmp_thunk ARG2 f() 12
 STORE 433 (ARG1 + 16) ARG3
0 INT_EQUAL [(ARG1 + 16)] 0
 RETURN 0 ARG1
 CBRANCH f()
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
0 COPY 0
0 INT_EQUAL f() 12
 CBRANCH (f() INT_EQUAL 12)
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
1 COPY 1
f() CAST f()
0 INT_EQUAL f() 0
f(ARG1) CALL func f(ARG1) ARG3 ARG5 f(ARG1)
 CALL func f(ARG1) ARG4 ARG5 f(ARG1)
f(ARG1) CALL func ARG1 ARG2 ARG5 ARG2
 RETURN 0
f() CALL func ARG1 ARG2 ARG1
f() CALL func ARG1 ARG2 ARG1
 CALL func (RSP + -40) ARG1 ARG2 ARG1
(RSP + -128) PTRSUB RSP -128
hsail64 COPY hsail64
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func f() powerpc (RSP + -176) f()
f() CALL func f() 4640002 (RSP + -136) f()
(RSP + -180) PTRSUB RSP -180
powerpc64le COPY powerpc64le
f() CALL func f() amdil64 (RSP + -80) f()
29 COPY 29
25 COPY 25
sparcv9 COPY sparcv9
(RSP + -52) PTRSUB RSP -52
mipsallegrex COPY mipsallegrex
mipseb COPY mipseb
30 COPY 30
31 COPY 31
mipsel COPY mipsel
(RSP + -92) PTRSUB RSP -92
(RSP + -196) PTRSUB RSP -196
26 COPY 26
f() CALL func f() sparcv9 sparc64 (RSP + -112)
hsail COPY hsail
f() CALL func f() wasm32 (RSP + -52) f()
(RSP + -84) PTRSUB RSP -84
sparc64 COPY sparc64
(RSP + -176) PTRSUB RSP -176
f() CALL func f() hsail (RSP + -76) f()
mips64el COPY mips64el
19 COPY 19
(RSP + -44) PTRSUB RSP -44
(RSP + -124) PTRSUB RSP -124
f() CALL func f() amdgcn (RSP + -132) f()
22 COPY 22
27 COPY 27
f() CALL func f() 4640042 (RSP + -108) f()
mipsallegrexel COPY mipsallegrexel
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func f() aarch64 (RSP + -196) f()
4639937 PTRSUB 0 4639937
(RSP + -88) PTRSUB RSP -88
28 COPY 28
mips64 COPY mips64
25 COPY 25
f() CALL func f() wasm64 (RSP + -48) f()
(RSP + -156) PTRSUB RSP -156
(RSP + -48) PTRSUB RSP -48
powerpc COPY powerpc
35 COPY 35
f() CALL func f() 4639907 (RSP + -196) f()
sparc COPY sparc
4640092 PTRSUB 0 4640092
1 COPY 1
f() CALL func f() 4640097 (RSP + -88) f()
(RSP + -100) PTRSUB RSP -100
amdil COPY amdil
36 COPY 36
(RSP + -60) PTRSUB RSP -60
f() CALL func f() mips64 mips64eb (RSP + -144)
s390x COPY s390x
(RSP + -136) PTRSUB RSP -136
0 COPY 0
4641258 PTRSUB 0 4641258
4641263 PTRSUB 0 4641263
4641253 PTRSUB 0 4641253
(RSP + -196) PTRSUB RSP -196
f() CALL func f() kalimba (RSP + -60) f()
2 COPY 2
f() CALL func f() 4641278 4641273 4641268 (RSP + -184)
37 COPY 37
13 COPY 13
4641273 PTRSUB 0 4641273
4641278 PTRSUB 0 4641278
32 COPY 32
powerpc64 COPY powerpc64
sparcel COPY sparcel
f() CALL func f() thumb (RSP + -196) f()
(RSP + -192) PTRSUB RSP -192
f() CALL func f() mips64el (RSP + -140) f()
(RSP + -56) PTRSUB RSP -56
f() CALL func f() amd64 0 0 (RSP + -180)
4640097 PTRSUB 0 4640097
4641268 PTRSUB 0 4641268
f() CALL func f() amdil (RSP + -84) f()
amdil64 COPY amdil64
(RSP + -196) PTRSUB RSP -196
4640467 PTRSUB 0 4640467
(RSP + -184) PTRSUB RSP -184
33 COPY 33
(RSP + -96) PTRSUB RSP -96
14 COPY 14
(RSP + -132) PTRSUB RSP -132
f() CALL func f() shave (RSP + -56) f()
0 COPY 0
15 COPY 15
amd64 COPY amd64
f() CALL func f() sparcel (RSP + -116) f()
34 COPY 34
aarch64 COPY aarch64
9 COPY 9
f() CALL func f() spir64 (RSP + -64) f()
41 COPY 41
(RSP + -108) PTRSUB RSP -108
f() CALL func f() s390x (RSP + -124) f()
4640002 PTRSUB 0 4640002
10 COPY 10
(RSP + -164) PTRSUB RSP -164
f() CALL func (RSP + -40) 4640060 4641263 4641258 4641253 (RSP + -188)
0 COPY 0
(RSP + -144) PTRSUB RSP -144
(RSP + -72) PTRSUB RSP -72
thumb COPY thumb
f() CALL func f() nvptx64 (RSP + -96) f()
f() CALL func f() xscale (RSP + -164) f()
nvptx64 COPY nvptx64
(RSP + -112) PTRSUB RSP -112
shave COPY shave
11 COPY 11
wasm64 COPY wasm64
4640060 PTRSUB 0 4640060
12 COPY 12
(RSP + -40) PTRSUB RSP -40
(RSP + -104) PTRSUB RSP -104
f() CALL func f() sparc (RSP + -120) f()
msp430 COPY msp430
(RSP + -64) PTRSUB RSP -64
38 COPY 38
39 COPY 39
(RSP + -160) PTRSUB RSP -160
f() CALL func f() 4640092 (RSP + -92) f()
(RSP + -188) PTRSUB RSP -188
f() CALL func f() xscaleeb (RSP + -160) f()
(RSP + -140) PTRSUB RSP -140
40 COPY 40
8 COPY 8
f() CALL func f() mipsel mipsallegrexel (RSP + -148)
4639907 PTRSUB 0 4639907
(RSP + -68) PTRSUB RSP -68
wasm32 COPY wasm32
hexagon COPY hexagon
(RSP + -40) PTRSUB RSP -40
40 INT_ADD 0 40
f() CALL func f() hsail64 (RSP + -72) f()
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
f() CALL func f() 4640467 (RSP + -192) f()
4641297 PTRSUB 0 4641297
21 COPY 21
40 CAST 40
spir64 COPY spir64
18 COPY 18
xscale COPY xscale
(RSP + -80) PTRSUB RSP -80
(RSP + -172) PTRSUB RSP -172
f() CALL func f() xcore (RSP + -104) f()
f() CALL func f() msp430 (RSP + -156) f()
20 COPY 20
xcore COPY xcore
mips64eb COPY mips64eb
[40] LOAD 433 40
(RSP + -120) PTRSUB RSP -120
(RSP + -152) PTRSUB RSP -152
 CALL func f() (RSP + -44) f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL func f() powerpc64 4641297 (RSP + -172)
f() CALL func f() hexagon (RSP + -128) f()
16 COPY 16
f() CALL func f() 4639937 mipseb mipsallegrex (RSP + -152)
4640130 PTRSUB 0 4640130
f() CALL func f() 4640130 (RSP + -68) f()
4640042 PTRSUB 0 4640042
17 COPY 17
amdgcn COPY amdgcn
(RSP + -168) PTRSUB RSP -168
xscaleeb COPY xscaleeb
f() CALL func f() powerpc64le (RSP + -168) f()
nvptx COPY nvptx
(RSP + -148) PTRSUB RSP -148
(RSP + -76) PTRSUB RSP -76
kalimba COPY kalimba
f() CALL func f() nvptx (RSP + -100) f()
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -116) PTRSUB RSP -116
7 COPY 7
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
f() CALL func ARG1
f() CALL func ARG1
(ARG2 * 16) INT_MULT ARG2 16
0 INT_LESSEQUAL f() ARG2
 CBRANCH (f() INT_LESSEQUAL ARG2)
((ARG2 * 16) + f()) INT_ADD (ARG2 * 16) f()
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 139 0
 RETURN 1
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
 RETURN 0 ((ARG2 * 16) + f())
idx < size() COPY idx < size()
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
 CALL libcall_append_thunk ARG1 f()
 RETURN 0
f() CALL func (RSP + -56)
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
4 COPY 4
 RETURN 0 4
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
f() CALL func (RSP + -120)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -216) PTRSUB RSP -216
0 INT_NOTEQUAL f() 0
4641648 PTRSUB 0 4641648
0 COPY 0
0 COPY 0
0 COPY 0
0 INT_LESS 3 f()
0 INT_LESS 4 f()
0 INT_NOTEQUAL f() f()
 CBRANCH (4 INT_LESS f())
0 COPY 0
0 COPY 0
(RSP + -328) PTRSUB RSP -328
0 INT_NOTEQUAL f() 0
0 COPY 0
0 COPY 0
 CALL func (RSP + -328) (RSP + -120) A_Stack[-0xd8]:8 A_Stack[-0xd0]:8 4294967295 1
(RSP + -120) PTRSUB RSP -120
0 COPY 0
f() CALL func (RSP + -188)
(RSP + -120) PTRSUB RSP -120
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func (RSP + -120)
(RSP + -120) PTRSUB RSP -120
(RSP + -120) PTRSUB RSP -120
0 INT_NOTEQUAL f() 0
f() CALL func (RSP + -120)
 CALL func (RSP + -120)
f() CALL func (RSP + -120)
f() CALL func (RSP + -120)
 CBRANCH (f() INT_NOTEQUAL f())
 CBRANCH (3 INT_LESS f())
(RSP + -188) PTRSUB RSP -188
(RSP + -120) PTRSUB RSP -120
 CBRANCH (f() INT_NOTEQUAL 0)
 CALL func (RSP + -216) 4641648
 CBRANCH (1 INT_LESS f())
(RSP + -120) PTRSUB RSP -120
0 INT_NOTEQUAL f() 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_LESS 1 f()
f() INT_ZEXT f()
 CBRANCH (2 INT_LESS f())
0 INT_NOTEQUAL f() 0
(RSP + -120) PTRSUB RSP -120
0 INT_LESS 2 f()
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -152) CAST (RSP + -152)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -152) PTRSUB RSP -152
 CALL libcall_operator+=_thunk (RSP + -152) 45
 CBRANCH (f() INT_EQUAL [40])
 RETURN 1
 RETURN 0 f(ARG1)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
 CBRANCH ([((RSP + -188) + f())] INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_LESS f())
(RSP + -120) PTRSUB RSP -120
 CBRANCH ~(f())
 CALL func (RSP + -216) f() f()
(RSP + -216) PTRSUB RSP -216
f() INT_ZEXT f()
(RSP + -188) PTRSUB RSP -188
f() CALL func (RSP + -120) f() f()
~(f()) BOOL_NEGATE f()
0 INT_LESS f() f()
(f() + 1) INT_ADD f() 1
f() CALL func (RSP + -216)
f() CALL func (RSP + -188)
(RSP + -216) PTRSUB RSP -216
 BRANCH VZERO
 CBRANCH ((f() + 1) INT_LESS f())
[((f() + 1) + (RSP + -188))] LOAD 433 ((f() + 1) + (RSP + -188))
0 COPY 0
(f() + 1) INT_ZEXT (f() + 1)
(RSP + -188) PTRSUB RSP -188
((f() + 1) + (RSP + -188)) PTRADD (RSP + -188) (f() + 1) 1
0 INT_NOTEQUAL [((f() + 1) + (RSP + -188))] 0
 CBRANCH ([((f() + 1) + (RSP + -188))] INT_NOTEQUAL 0)
 CBRANCH (f() INT_LESSEQUAL f())
0 COPY 0
Pos < Components.size() && Components[Pos] == Comp && "Component moved wrong!" COPY Pos < Components.size() && Components[Pos] == Comp && "Component moved wrong!"
(f() + 8) PTRADD f() 1 8
[(f() + 8)] LOAD 433 (f() + 8)
(RSP + -120) PTRSUB RSP -120
f() CALL func (RSP + -120) f() f()
 CALL libcall___assert_fail_thunk Pos < Components.size() && Components[Pos] == Comp && "Component moved wrong!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp 729 0
f() CALL func [f()] [(f() + 8)] f() f()
f() CAST f()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp
[f()] LOAD 433 f()
 RETURN 1
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
 CBRANCH (f() INT_EQUAL 0)
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -120) 3
 CALL func (RSP + -216) 4641096
f() CAST f()
 STORE 433 (f() + 8) f()
(f() + 8) PTRADD f() 1 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -120) PTRSUB RSP -120
 STORE 433 f() f()
(RSP + -216) PTRSUB RSP -216
(f() / 2147483647) SUBPIECE f() 0
4641096 PTRSUB 0 4641096
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
 CBRANCH (f() INT_LESS f())
0 INT_NOTEQUAL f() 0
f() CALL func (RSP + -216)
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -120) PTRSUB RSP -120
f() CALL func (RSP + -120) f() f()
(RSP + -216) PTRSUB RSP -216
 CALL func (RSP + -216) f() f()
(RSP + -216) PTRSUB RSP -216
 CBRANCH (f() INT_NOTEQUAL f())
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -152) [f()] [(f() + 8)] [f()]
(f() / 2147483647) SUBPIECE f() 8
[(f() + 8)] LOAD 433 (f() + 8)
(f() + 1) INT_ADD f() 1
[f()] LOAD 433 f()
0 INT_NOTEQUAL f() 0
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
f() CALL func (RSP + -120) f() f()
(RSP + -120) PTRSUB RSP -120
0 INT_NOTEQUAL f() f()
f() CAST f()
(f() + 8) PTRADD f() 1 8
(RSP + -152) PTRSUB RSP -152
(f() / 2147483647) SUBPIECE f() 8
 STORE 433 ((RSP + -188) + f()) 1
 BRANCH VZERO
(RSP + -188) PTRSUB RSP -188
((RSP + -188) + f()) PTRADD (RSP + -188) f() 1
f() INT_ZEXT f()
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
(f() / 2147483647) SUBPIECE f() 8
0 INT_NOTEQUAL f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -120) PTRSUB RSP -120
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -120) 4
(f() + 8) PTRADD f() 1 8
 BRANCH VZERO
f() CAST f()
f() CAST f()
(RSP + -120) PTRSUB RSP -120
(f() + 8) PTRADD f() 1 8
 CALL func (RSP + -216) windows
(f() / 2147483647) SUBPIECE f() 8
 STORE 433 (f() + 8) f()
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -120) 3
windows COPY windows
(f() / 2147483647) SUBPIECE f() 0
4641040 PTRSUB 0 4641040
 STORE 433 f() f()
(RSP + -120) PTRSUB RSP -120
(f() / 2147483647) SUBPIECE f() 0
 STORE 433 (f() + 8) f()
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -120) 2
(RSP + -216) PTRSUB RSP -216
 CALL func (RSP + -216) 4641040
(RSP + -216) PTRSUB RSP -216
 STORE 433 f() f()
 CBRANCH (f() INT_NOTEQUAL 0)
(f() / 2147483647) SUBPIECE f() 0
(f() + 8) PTRADD f() 1 8
f() CAST f()
[(f() + 8)] LOAD 433 (f() + 8)
f() CALL func [f()] [(f() + 8)] [f()]
f() CALL func (RSP + -120) 4
(RSP + -120) PTRSUB RSP -120
[f()] LOAD 433 f()
 CBRANCH f()
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
(f() + 1) INT_ADD f() 1
[f()] LOAD 433 f()
f() CAST f()
(RSP + -120) PTRSUB RSP -120
f() INT_ZEXT f()
0 INT_NOTEQUAL f() f()
[(f() + 8)] LOAD 433 (f() + 8)
f() CALL func (RSP + -120) f() f()
(RSP + -120) PTRSUB RSP -120
f() CAST f()
 CBRANCH (f() INT_EQUAL 1)
0 COPY 0
 BRANCH VZERO
0 INT_EQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL f())
f() CALL func (RSP + -120)
(f() + 8) PTRADD f() 1 8
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
0 INT_EQUAL f() 0
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
f() CALL func f() f() f()
0 INT_EQUAL f() 2
 CBRANCH (f() INT_EQUAL 2)
 BRANCH VZERO
0 INT_NOTEQUAL f() 0
 CBRANCH ((f() + 1) INT_LESS f())
[((f() + 1) + (RSP + -188))] LOAD 433 ((f() + 1) + (RSP + -188))
 CBRANCH ([((f() + 1) + (RSP + -188))] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [((f() + 1) + (RSP + -188))] 0
0 COPY 0
(f() + 1) INT_ZEXT (f() + 1)
(RSP + -188) PTRSUB RSP -188
((f() + 1) + (RSP + -188)) PTRADD (RSP + -188) (f() + 1) 1
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 1)
 CALL func (RSP + -120) (RSP + -216) (RSP + -216)
(RSP + -120) PTRSUB RSP -120
(RSP + -216) PTRSUB RSP -216
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
0 INT_NOTEQUAL f() 0
f() CALL func [f()] [(f() + 8)] [f()]
0 INT_EQUAL f() 0
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CAST f()
 STORE 433 f() f()
(f() / 2147483647) SUBPIECE f() 0
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -120) 5
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() + 8) PTRADD f() 1 8
(RSP + -216) PTRSUB RSP -216
f() CALL func f()
f() CALL func (RSP + -120) 4
(f() / 2147483647) SUBPIECE f() 8
 STORE 433 (f() + 8) f()
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -216) f() f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 STORE 433 (f() + 8) f()
 BRANCH VZERO
f() CALL func f()
(RSP + -120) PTRSUB RSP -120
 STORE 433 f() f()
(f() / 2147483647) SUBPIECE f() 0
(RSP + -216) PTRSUB RSP -216
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -120) 3
 CALL func (RSP + -216) f() f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CAST f()
(f() + 8) PTRADD f() 1 8
(f() / 2147483647) SUBPIECE f() 8
windows COPY windows
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -216) cygnus
f() CALL func (RSP + -120) 2
(f() / 2147483647) SUBPIECE f() 0
 STORE 433 (f() + 8) f()
(f() / 2147483647) SUBPIECE f() 8
(RSP + -216) PTRSUB RSP -216
 STORE 433 f() f()
(RSP + -216) PTRSUB RSP -216
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -216) windows
(f() / 2147483647) SUBPIECE f() 8
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -120) 4
(f() + 8) PTRADD f() 1 8
f() CALL func (RSP + -120) 3
(RSP + -120) PTRSUB RSP -120
(f() / 2147483647) SUBPIECE f() 8
(f() + 8) PTRADD f() 1 8
 STORE 433 f() f()
 STORE 433 (f() + 8) f()
(f() / 2147483647) SUBPIECE f() 0
f() CAST f()
f() CAST f()
(f() / 2147483647) SUBPIECE f() 0
cygnus COPY cygnus
(RSP + -120) PTRSUB RSP -120
 CBRANCH (f() INT_EQUAL 13)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (f() INT_LESS f())
(RSP + -120) PTRSUB RSP -120
0 INT_LESS f() f()
0 INT_LESSEQUAL f() f()
f() INT_ZEXT f()
f() CALL func (RSP + -120)
 CBRANCH ([((RSP + -188) + f())] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [((RSP + -188) + f())] 0
[((RSP + -188) + f())] LOAD 433 ((RSP + -188) + f())
f() INT_ZEXT f()
(RSP + -188) PTRSUB RSP -188
((RSP + -188) + f()) PTRADD (RSP + -188) f() 1
0 COPY 0
 CBRANCH f()
0 INT_LESS (f() + 1) f()
f() CALL func (RSP + -188)
(f() + 1) INT_ADD f() 1
(RSP + -188) PTRSUB RSP -188
(f() + 1) INT_ZEXT (f() + 1)
 CBRANCH (f() INT_EQUAL 0)
f() CAST f()
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -120) 3
(f() / 2147483647) SUBPIECE f() 0
 STORE 433 f() f()
 STORE 433 (f() + 8) f()
 STORE 433 f() f()
(f() / 2147483647) SUBPIECE f() 0
(RSP + -216) PTRSUB RSP -216
(f() + 8) PTRADD f() 1 8
(RSP + -120) PTRSUB RSP -120
(RSP + -152) PTRSUB RSP -152
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -216) android
 CALL func (RSP + -152) (RSP + -216) (RSP + -216)
 CALL libcall_~basic_string_thunk (RSP + -152)
(RSP + -152) PTRSUB RSP -152
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -216) (RSP + -184) (RSP + -184)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -216) PTRSUB RSP -216
f() CAST f()
(RSP + -152) CAST (RSP + -152)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -216) PTRSUB RSP -216
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -216) android (RSP + -232)
android COPY android
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(RSP + -232) PTRSUB RSP -232
 CALL libcall_operator=_thunk (RSP + -184) (RSP + -152)
(RSP + -184) PTRSUB RSP -184
(RSP + -216) PTRSUB RSP -216
android COPY android
(f() + 8) PTRADD f() 1 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -120) 3
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -120) PTRSUB RSP -120
(f() / 2147483647) SUBPIECE f() 8
(RSP + -184) PTRSUB RSP -184
(RSP + -152) PTRSUB RSP -152
 STORE 433 (f() + 8) f()
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL 3)
unexpected component type! COPY unexpected component type!
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp
0 INT_NOTEQUAL f() 0
0 CAST 0
f() CALL func [f()] [(f() + 8)] [f()]
-1 BOOL_NEGATE 0
 CBRANCH -1
 CALL func unexpected component type! /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp 654
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 8)
0 COPY 0
 CALL func (RSP + -248) androideabi
(RSP + -120) PTRSUB RSP -120
f() CALL func (RSP + -120) 3
androideabi COPY androideabi
(RSP + -248) PTRSUB RSP -248
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
f() CALL func f() f() f() f()
f() CALL func (RSP + -120)
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -120) PTRSUB RSP -120
0 INT_EQUAL f() [40]
(f() / 2147483647) SUBPIECE f() 8
[40] LOAD 433 (f() + 40)
0 INT_EQUAL f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -184) PTRSUB RSP -184
 CALL libcall_~basic_string_thunk (RSP + -152)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() # f()) PIECE f() f()
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH ([((RSP + -188) + f())] INT_EQUAL 0)
 CALL libcall_basic_string_thunk
 CALL libcall_basic_string_thunk f(ARG1)
0 INT_EQUAL [((RSP + -188) + f())] 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -152) PTRSUB RSP -152
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
 CALL libcall_basic_string_thunk
(f() / 2147483647) SUBPIECE f() 0
f(ARG1) COPY f(ARG1)
 CALL func (RSP + -120)
f() INT_ZEXT f()
(RSP + -120) PTRSUB RSP -120
 CBRANCH f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL libcall_~basic_string_thunk (RSP + -184)
0 INT_EQUAL f() 13
[((RSP + -188) + f())] LOAD 433 ((RSP + -188) + f())
(RSP + -152) CAST (RSP + -152)
 CBRANCH (f() INT_EQUAL 13)
(RSP + -188) PTRSUB RSP -188
((RSP + -188) + f()) PTRADD (RSP + -188) f() 1
0 INT_NOTEQUAL f() 0
[f()] LOAD 433 f()
f() CALL func (RSP + -120) 3
(RSP + -120) PTRSUB RSP -120
(f() + 8) PTRADD f() 1 8
[(f() + 8)] LOAD 433 (f() + 8)
f() CAST f()
f() CALL func [f()] [(f() + 8)] [f()]
0 INT_EQUAL f() 13
f() CALL func (RSP + -232) f() f() f()
 CALL func (RSP + -216) cygwin
(RSP + -216) PTRSUB RSP -216
(RSP + -216) PTRSUB RSP -216
0 INT_NOTEQUAL f() 3
f() CALL func [f()] [(f() + 8)] [f()]
0 INT_EQUAL f() 0
 CALL func (RSP + -216) mingw
(RSP + -232) PTRSUB RSP -232
cygwin COPY cygwin
mingw COPY mingw
(RSP + -232) PTRSUB RSP -232
f() CALL func (RSP + -232) f() f() f()
 CBRANCH (f() INT_LESS f())
f() INT_ZEXT f()
0 INT_LESS f() f()
(RSP + -188) PTRSUB RSP -188
f() CALL func (RSP + -188)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 BRANCH VZERO
1 COPY 1
f() INT_ZEXT f()
0 INT_NOTEQUAL [((RSP + -188) + f())] 0
[((RSP + -188) + f())] LOAD 433 ((RSP + -188) + f())
(RSP + -188) PTRSUB RSP -188
((RSP + -188) + f()) PTRADD (RSP + -188) f() 1
 CALL func (RSP + -216) f() f()
(RSP + -216) PTRSUB RSP -216
 CALL func (RSP + -216) 4639877
f() CALL func (RSP + -120) f() f()
(RSP + -120) PTRSUB RSP -120
 CBRANCH (f() INT_LESS f())
(RSP + -216) PTRSUB RSP -216
4639877 PTRSUB 0 4639877
0 INT_LESS f() f()
f() COPY f()
 CBRANCH f()
(RSP + -188) PTRSUB RSP -188
(f() + 1) INT_ZEXT (f() + 1)
f() CALL func (RSP + -188)
0 INT_LESS (f() + 1) f()
(f() + 1) INT_ADD f() 1
f() CALL func (RSP + -120) 0
[f()] LOAD 433 f()
(RSP + -120) PTRSUB RSP -120
[(f() + 8)] LOAD 433 (f() + 8)
f() CALL func [f()] [(f() + 8)] [f()]
(f() + 8) PTRADD f() 1 8
f() CAST f()
[f()] LOAD 433 f()
[(f() + 8)] LOAD 433 (f() + 8)
(RSP + -120) PTRSUB RSP -120
f() CAST f()
f() CALL func [f()] [(f() + 8)] [f()]
(f() + 8) PTRADD f() 1 8
f() CALL func (RSP + -120) 1
 CBRANCH ((f() + 1) INT_LESS f())
f() INT_ZEXT f()
0 INT_LESS f() f()
 CALL func (RSP + -216) 4639877
(RSP + -216) PTRSUB RSP -216
(RSP + -216) PTRSUB RSP -216
0 INT_NOTEQUAL f() 1
0 INT_LESS (f() + 1) f()
f() CALL func (RSP + -216)
f() COPY f()
(RSP + -120) PTRSUB RSP -120
4639877 PTRSUB 0 4639877
f() CALL func (RSP + -120)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 COPY 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f() 11
0 INT_EQUAL f() 0
(RSP + -120) PTRSUB RSP -120
(RSP + -232) PTRSUB RSP -232
f() CALL func (RSP + -232)
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -120) 3
(RSP + -216) PTRSUB RSP -216
f() CALL func f() f() f() f()
(RSP + -120) PTRSUB RSP -120
(RSP + -120) PTRSUB RSP -120
cygwin COPY cygwin
 CALL func (RSP + -216) mingw
 CALL func (RSP + -216) cygwin
f() CALL func (RSP + -120) 2
(RSP + -216) PTRSUB RSP -216
[f()] LOAD 433 f()
f() CALL func f() f() f() f()
[(f() + 8)] LOAD 433 (f() + 8)
f() CALL func (RSP + -120) 2
f() CALL func (RSP + -120) 2
(RSP + -120) PTRSUB RSP -120
f() CAST f()
f() CALL func [f()] [(f() + 8)] [f()]
(f() + 8) PTRADD f() 1 8
mingw COPY mingw
f() CALL func (RSP + -120) 2
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -216) windows
 STORE 433 (f() + 8) f()
 STORE 433 f() f()
0 INT_EQUAL f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() + 8) PTRADD f() 1 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -120) PTRSUB RSP -120
(RSP + -216) PTRSUB RSP -216
windows COPY windows
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() 0
 CALL func (RSP + -120) 4
(RSP + -120) PTRSUB RSP -120
f() CAST f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func [f()] [(f() + 8)] [f()]
0 INT_NOTEQUAL f() 0
 CALL libcall_basic_string_thunk ARG1 (RSP + -278)
ARG1 COPY ARG1
 CALL libcall_basic_string_thunk ARG1 4636708
(f() + 40) CAST (f() + 40)
0 INT_EQUAL f() 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
f() CALL libcall_uname_thunk (RSP + -408)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -408) PTRSUB RSP -408
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -409) PTRSUB RSP -409
 CALL libcall_~allocator_thunk (RSP + -409)
(RSP + -409) PTRSUB RSP -409
4636708 CAST 4636708
 CALL libcall_allocator_thunk
4636708 PTRSUB 0 4636708
 BRANCH VZERO
 CALL libcall_~allocator_thunk (RSP + -409)
(RSP + -278) PTRSUB (RSP + -408) 130
(RSP + -278) CAST (RSP + -278)
(RSP + -408) PTRSUB RSP -408
 CALL libcall_allocator_thunk
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
 CALL func ARG1 f() f() f()
ARG1 COPY ARG1
(RSP + -88) PTRSUB RSP -88
 CALL libcall_~allocator_thunk (RSP + -104)
(RSP + -104) PTRSUB RSP -104
(f() + 40) CAST (f() + 40)
0 CAST 0
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -88) CAST (RSP + -88)
0 COPY 0
(RSP + -88) PTRSUB RSP -88
(RSP + -104) PTRSUB RSP -104
 CBRANCH (f() INT_NOTEQUAL -1)
0 INT_NOTEQUAL f() -1
 CALL func (RSP + -104) (RSP + -88) (RSP + -88)
 CALL libcall_basic_string_thunk (RSP + -88) 0
(FS_OFFSET + 40) INT_ADD 0 40
 CALL libcall_~basic_string_thunk (RSP + -88)
(RSP + -88) CAST (RSP + -88)
(RSP + -88) PTRSUB RSP -88
-darwin CAST -darwin
f() CALL libcall_find_thunk (RSP + -88) -darwin
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -88) PTRSUB RSP -88
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
-darwin COPY -darwin
(RSP + -104) CAST (RSP + -104)
 CALL libcall_allocator_thunk
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
(RSP + -56) PTRSUB RSP -56
(RSP + -88) PTRSUB RSP -88
 CALL libcall_operator+=_thunk (RSP + -88) (RSP + -56)
(RSP + -88) PTRSUB RSP -88
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
(RSP + -88) CAST (RSP + -88)
 CALL libcall_~basic_string_thunk (RSP + -56)
 CALL libcall_resize_thunk (RSP + -88)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) CAST (RSP + -56)
 STORE 433 ARG2 [f()]
 STORE 433 ARG3 [(f() + 4)]
 STORE 433 ARG4 [(f() + 12)]
 STORE 433 ARG5 [(f() + 8)]
0 INT_EQUAL ARG1 4
0 INT_EQUAL ARG1 3
0 INT_EQUAL ARG1 6
0 INT_EQUAL ARG1 5
0 INT_EQUAL ARG1 0
0 INT_EQUAL ARG1 2147483652
VZERO CALLOTHER 40 ARG1
0 INT_EQUAL ARG1 2
0 INT_EQUAL ARG1 1
0 INT_EQUAL ARG1 15
0 INT_EQUAL ARG1 13
0 INT_EQUAL ARG1 2147483651
0 INT_EQUAL ARG1 2147483650
0 INT_EQUAL ARG1 9
0 INT_EQUAL ARG1 7
0 INT_EQUAL ARG1 11
0 INT_EQUAL ARG1 10
 CBRANCH (ARG1 INT_EQUAL 7)
 CBRANCH (ARG1 INT_EQUAL 6)
 CBRANCH (ARG1 INT_EQUAL 10)
 CBRANCH (ARG1 INT_EQUAL 9)
 CBRANCH (ARG1 INT_EQUAL 3)
 CBRANCH (ARG1 INT_EQUAL 2)
 CBRANCH (ARG1 INT_EQUAL 5)
 CBRANCH (ARG1 INT_EQUAL 4)
VZERO CAST VZERO
VZERO CAST VZERO
VZERO CAST VZERO
VZERO CAST VZERO
VZERO CAST VZERO
 CBRANCH (ARG1 INT_EQUAL 1)
VZERO CAST VZERO
 CBRANCH (ARG1 INT_EQUAL 0)
VZERO CAST VZERO
0 COPY 0
VZERO CAST VZERO
VZERO CAST VZERO
VZERO CAST VZERO
VZERO CAST VZERO
VZERO CAST VZERO
VZERO CAST VZERO
VZERO CAST VZERO
VZERO CAST VZERO
VZERO CALLOTHER 45 4
 BRANCH 19
VZERO CALLOTHER 44 3
 BRANCH 21
VZERO CALLOTHER 47 6
 BRANCH 15
VZERO CALLOTHER 46 5
 BRANCH 17
VZERO CALLOTHER 41 0
 BRANCH 27
 BRANCH 29
VZERO CALLOTHER 43 2
 BRANCH 23
VZERO CALLOTHER 42 1
 BRANCH 25
 CBRANCH (ARG1 INT_EQUAL 2147483652)
 CBRANCH (ARG1 INT_EQUAL 2147483651)
 BRANCH 31
 BRANCH 33
 CBRANCH (ARG1 INT_EQUAL 13)
 CBRANCH (ARG1 INT_EQUAL 11)
 RETURN 0 0
 CBRANCH (ARG1 INT_EQUAL 2147483650)
 CBRANCH (ARG1 INT_EQUAL 15)
VZERO CALLOTHER 56 2147483652
[(f() + 8)] LOAD 433 (f() + 8)
[(f() + 12)] LOAD 433 (f() + 12)
VZERO CALLOTHER 53 15
 BRANCH 3
[f()] LOAD 433 f()
VZERO CALLOTHER 52 13
 BRANCH 5
VZERO CALLOTHER 55 2147483651
[(f() + 4)] LOAD 433 (f() + 4)
VZERO CALLOTHER 54 2147483650
 BRANCH 1
VZERO CALLOTHER 49 9
 BRANCH 11
VZERO CALLOTHER 48 7
 BRANCH 13
VZERO CALLOTHER 51 11
 BRANCH 7
VZERO CALLOTHER 50 10
 BRANCH 9
(f() + 12) PTRADD f() 3 4
VZERO CAST VZERO
VZERO CAST VZERO
(f() + 4) PTRADD f() 1 4
(f() + 8) PTRADD f() 2 4
 STORE 433 ARG1 VZERO
 STORE 433 ARG2 VZERO
0 COPY 0
 RETURN 0 0
0 INT_EQUAL ARG1 11
0 INT_EQUAL ARG1 10
0 INT_EQUAL ARG1 15
0 INT_EQUAL ARG1 13
0 INT_EQUAL ARG1 6
0 INT_EQUAL ARG1 5
0 INT_EQUAL ARG1 9
0 INT_EQUAL ARG1 7
0 INT_EQUAL ARG1 2
0 INT_EQUAL ARG1 1
0 INT_EQUAL ARG1 4
0 INT_EQUAL ARG1 3
0 INT_EQUAL ARG1 2147483651
0 INT_EQUAL ARG1 2147483650
0 INT_EQUAL ARG1 0
0 INT_EQUAL ARG1 2147483652
VZERO CALLOTHER 40 ARG1
 STORE 433 ARG3 [f()]
 STORE 433 ARG4 [(f() + 4)]
 STORE 433 ARG5 [(f() + 12)]
 STORE 433 ARG6 [(f() + 8)]
VZERO CALLOTHER 51 11
 BRANCH 7
VZERO CALLOTHER 50 10
 BRANCH 9
VZERO CALLOTHER 53 15
 BRANCH 3
[f()] LOAD 433 f()
VZERO CALLOTHER 52 13
 BRANCH 5
VZERO CALLOTHER 47 6
 BRANCH 15
VZERO CALLOTHER 46 5
 BRANCH 17
VZERO CALLOTHER 49 9
 BRANCH 11
VZERO CALLOTHER 48 7
 BRANCH 13
VZERO CALLOTHER 43 2
 BRANCH 23
VZERO CALLOTHER 42 1
 BRANCH 25
VZERO CALLOTHER 45 4
 BRANCH 19
VZERO CALLOTHER 44 3
 BRANCH 21
 BRANCH 31
 BRANCH 33
VZERO CALLOTHER 41 0
 BRANCH 27
 BRANCH 29
[(f() + 12)] LOAD 433 (f() + 12)
VZERO CALLOTHER 55 2147483651
[(f() + 4)] LOAD 433 (f() + 4)
VZERO CALLOTHER 54 2147483650
 BRANCH 1
VZERO CALLOTHER 56 2147483652
[(f() + 8)] LOAD 433 (f() + 8)
(f() + 12) PTRADD f() 3 4
VZERO CAST VZERO
VZERO CAST VZERO
(f() + 4) PTRADD f() 1 4
(f() + 8) PTRADD f() 2 4
VZERO CAST VZERO
VZERO CAST VZERO
VZERO CAST VZERO
VZERO CAST VZERO
 CBRANCH (ARG1 INT_EQUAL 2147483650)
 CBRANCH (ARG1 INT_EQUAL 15)
 CBRANCH (ARG1 INT_EQUAL 2147483652)
 CBRANCH (ARG1 INT_EQUAL 2147483651)
 CBRANCH (ARG1 INT_EQUAL 10)
 CBRANCH (ARG1 INT_EQUAL 9)
 CBRANCH (ARG1 INT_EQUAL 13)
 CBRANCH (ARG1 INT_EQUAL 11)
 RETURN 0 0
VZERO CAST VZERO
 CBRANCH (ARG1 INT_EQUAL 5)
VZERO CAST VZERO
 CBRANCH (ARG1 INT_EQUAL 4)
VZERO CAST VZERO
 CBRANCH (ARG1 INT_EQUAL 7)
 CBRANCH (ARG1 INT_EQUAL 6)
VZERO CAST VZERO
 CBRANCH (ARG1 INT_EQUAL 1)
VZERO CAST VZERO
VZERO CAST VZERO
0 COPY 0
 CBRANCH (ARG1 INT_EQUAL 0)
VZERO CAST VZERO
VZERO CAST VZERO
 CBRANCH (ARG1 INT_EQUAL 3)
VZERO CAST VZERO
VZERO CAST VZERO
 CBRANCH (ARG1 INT_EQUAL 2)
VZERO CAST VZERO
(ARG1 / 16) INT_RIGHT ARG1 4
(ARG1 / 65536) INT_RIGHT ARG1 16
(ARG1 / 256) INT_RIGHT ARG1 8
(ARG1 / 1048576) INT_RIGHT ARG1 20
f(ARG1) LOAD 433 ARG2
 STORE 433 ARG2 (f(ARG1) + (255 & (ARG1 / 1048576)))
f(ARG1) LOAD 433 ARG2
 STORE 433 ARG2 (15 & (ARG1 / 256))
f(ARG1) LOAD 433 ARG2
(15 & (ARG1 / 256)) LOAD 433 ARG2
 STORE 433 ARG3 (f(ARG1) + ((15 & (ARG1 / 65536)) * 16))
 STORE 433 ARG3 (15 & (ARG1 / 16))
f(ARG1) LOAD 433 ARG3
 RETURN 0
 CBRANCH ((15 & (ARG1 / 256)) INT_EQUAL 6)
0 INT_EQUAL (15 & (ARG1 / 256)) 6
(15 & (ARG1 / 16)) INT_AND (ARG1 / 16) 15
(15 & (ARG1 / 256)) INT_AND (ARG1 / 256) 15
(f(ARG1) + ((15 & (ARG1 / 65536)) * 16)) INT_ADD f(ARG1) ((15 & (ARG1 / 65536)) * 16)
((15 & (ARG1 / 65536)) * 16) INT_MULT (15 & (ARG1 / 65536)) 16
(15 & (ARG1 / 65536)) INT_AND (ARG1 / 65536) 15
 CBRANCH (f(ARG1) INT_EQUAL 15)
0 INT_EQUAL f(ARG1) 15
 CBRANCH (f(ARG1) INT_EQUAL 15)
0 INT_EQUAL f(ARG1) 15
(255 & (ARG1 / 1048576)) INT_AND (ARG1 / 1048576) 255
(f(ARG1) + (255 & (ARG1 / 1048576))) INT_ADD f(ARG1) (255 & (ARG1 / 1048576))
f() CALL func 1 (RSP + -88) (RSP + -84) (RSP + -80) (RSP + -76)
0 COPY 0
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -84) PTRSUB RSP -84
0 COPY 0
0 INT_NOTEQUAL 0 [(f() + 40)]
(RSP + -88) PTRSUB RSP -88
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
(f() + 40) CAST (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -80) PTRSUB RSP -80
(RSP + -76) PTRSUB RSP -76
0 COPY 0
0 COPY 0
 CBRANCH (f() INT_EQUAL 5)
 BRANCH VZERO
athlon64 COPY athlon64
athlon-fx COPY athlon-fx
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) athlon64
 CALL func (RSP + -56) athlon-fx
 CBRANCH f()
 CBRANCH (0 INT_EQUAL 0)
 CALL func (RSP + -56) sandybridge
 BRANCH VZERO
sandybridge COPY sandybridge
(RSP + -56) PTRSUB RSP -56
 CBRANCH f()
(f() & 65536) INT_AND f() 65536
 CBRANCH ((f() & 65536) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (f() & 65536) 0
0 COPY 0
 CBRANCH (0 INT_EQUAL 0)
 BRANCH VZERO
core2 COPY core2
bonnell COPY bonnell
 CBRANCH (f() INT_LESS 9)
 CBRANCH (f() INT_EQUAL 10)
0 INT_EQUAL f() 10
0 INT_LESS 5 f()
 CBRANCH (5 INT_LESS f())
 CBRANCH f()
 CBRANCH f()
broadwell COPY broadwell
 CALL func (RSP + -56) broadwell
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 CBRANCH f()
btver2 COPY btver2
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) btver2
 BRANCH VZERO
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) btver1
btver1 COPY btver1
 CBRANCH f()
(f() & 224) INT_AND f() 224
0 INT_EQUAL (f() & 224) 224
0 COPY 0
 CBRANCH ((f() & 224) INT_EQUAL 224)
 CBRANCH ((f() & 536870912) INT_EQUAL 0)
x86-64 COPY x86-64
 BRANCH VZERO
pentium4 COPY pentium4
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 5
 CALL func (RSP + -56) opteron
opteron COPY opteron
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_LESS 48)
 BRANCH VZERO
 CALL func (RSP + -56) bdver3
0 INT_LESS f() 16
bdver3 COPY bdver3
 CBRANCH (f() INT_LESS 16)
(RSP + -56) PTRSUB RSP -56
 CBRANCH f()
 CBRANCH (0 INT_EQUAL 0)
 CBRANCH ((f() & 536870912) INT_EQUAL 0)
 CALL func (RSP + -56) f(bonnell , core2) (RSP + -56)
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
 BRANCHIND f()
f() CALL libcall_memcmp_thunk (RSP + -28) AuthenticAMD 12
 CBRANCH (f() INT_EQUAL 0)
AuthenticAMD COPY AuthenticAMD
0 INT_EQUAL f() 0
(RSP + -28) PTRSUB RSP -28
 CBRANCH (0 INT_EQUAL 402653184)
(RSP + -76) PTRSUB RSP -76
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
(RSP + -88) PTRSUB RSP -88
f() CALL func (RSP + -88) (RSP + -76) (RSP + -76)
0 COPY 0
 CBRANCH f()
0 COPY 0
(f() & 32) INT_AND f() 32
 CBRANCH ((f() & 32) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (f() & 32) 0
 CBRANCH (f() INT_LESS 80)
bdver4 COPY bdver4
0 INT_LESS f() 48
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) bdver4
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_LESS 4)
pentium COPY pentium
 CALL func (RSP + -56) pentium
0 INT_LESS f() 4
 BRANCH VZERO
 CBRANCH ((f() & 536870912) INT_EQUAL 0)
nocona COPY nocona
 BRANCH VZERO
prescott COPY prescott
0 INT_AND 0 6
0 INT_EQUAL 0 6
 CBRANCH (0 INT_EQUAL 6)
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 1)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 BRANCH VZERO
1 COPY 1
(RSP + -56) PTRSUB RSP -56
generic COPY generic
 CALL func (RSP + -56) generic
 BRANCHIND f()
0 INT_EQUAL 0 0
0 INT_AND 0 1
0 INT_EQUAL 0 0
0 INT_EQUAL 0 0
0 INT_AND 0 1048576
generic COPY generic
0 INT_AND 0 8388608
(RSP + -56) PTRSUB RSP -56
0 INT_EQUAL f() 0
0 INT_EQUAL 0 402653184
(RSP + -88) PTRSUB RSP -88
(RSP + -80) PTRSUB RSP -80
(RSP + -84) PTRSUB RSP -84
 CALL func 0 (RSP + -72) (RSP + -68) (RSP + -72)
(RSP + -76) PTRSUB RSP -76
(f() & 536870912) INT_AND f() 536870912
0 INT_EQUAL (f() & 536870912) 0
 CBRANCH f()
 CBRANCH f()
 CBRANCH (f() INT_LESS 7)
(RSP + -24) PTRSUB RSP -24
 BRANCH VZERO
402653184 COPY 402653184
0 INT_EQUAL 0 0
0 INT_AND 0 Symbol
(f() & 2097152) INT_AND f() 2097152
0 INT_EQUAL (f() & 2097152) 0
 CALL func (RSP + -56) generic
0 INT_AND 0 33554432
(RSP + -68) PTRSUB RSP -68
0 INT_EQUAL 0 0
(RSP + -72) PTRSUB RSP -72
0 INT_EQUAL 0 0
0 INT_AND 0 512
0 INT_AND 0 402653184
 CALL func 2147483649 (RSP + -88) (RSP + -84) (RSP + -80) (RSP + -76)
0 COPY 0
0 INT_EQUAL 0 0
0 COPY 0
(RSP + -28) PTRSUB RSP -28
0 INT_EQUAL 0 0
0 INT_AND 0 524288
GenuineIntel COPY GenuineIntel
 CALL func 0 (RSP + -64) (RSP + -28) (RSP + -20) (RSP + -24)
f() CALL libcall_memcmp_thunk (RSP + -28) GenuineIntel 12
0 INT_AND 0 67108864
(RSP + -64) PTRSUB RSP -64
(RSP + -20) PTRSUB RSP -20
(RSP + -28) PTRSUB RSP -28
0 INT_LESS f() 7
 CBRANCH (0 INT_EQUAL 0)
pentium-m COPY pentium-m
(RSP + -56) PTRSUB RSP -56
 CBRANCH (0 INT_EQUAL 0)
 CALL func (RSP + -56) pentium-m
 BRANCH VZERO
 CBRANCH ((f() & 536870912) INT_EQUAL 0)
x86-64 COPY x86-64
 BRANCH VZERO
pentium4 COPY pentium4
 CBRANCH (0 INT_EQUAL 0)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) pentium2
 BRANCH VZERO
 CALL func (RSP + -56) pentiumpro
 BRANCH VZERO
pentium2 COPY pentium2
pentiumpro COPY pentiumpro
 CBRANCH (f() INT_EQUAL 4)
(RSP + -56) PTRSUB RSP -56
athlon COPY athlon
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) athlon
 BRANCH VZERO
 CALL func (RSP + -56) athlon-tbird
 BRANCH VZERO
athlon-tbird COPY athlon-tbird
 CALL func (RSP + -56) athlon-mp
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
0 INT_EQUAL f() 4
athlon-mp COPY athlon-mp
 CBRANCH ((f() & 524288) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (f() & 524288) 0
(f() & 524288) INT_AND f() 524288
0 COPY 0
 CBRANCH ((f() & 2097152) INT_EQUAL 0)
 BRANCH VZERO
bdver2 COPY bdver2
 CALL func (RSP + -56) bdver2
bdver1 COPY bdver1
 CALL func (RSP + -56) bdver1
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
(RSP + -76) PTRSUB RSP -76
(RSP + -88) PTRSUB RSP -88
(RSP + -80) PTRSUB RSP -80
0 INT_EQUAL f() 1
f() CALL func 7 0 (RSP + -88) (RSP + -84) (RSP + -80) (RSP + -76)
(RSP + -84) PTRSUB RSP -84
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) haswell
haswell COPY haswell
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
 CALL func (RSP + -56) f(nehalem , silvermont) (RSP + -56)
 BRANCH VZERO
 CBRANCH (0 INT_EQUAL 0)
(RSP + -56) PTRSUB RSP -56
 CBRANCH (0 INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 4)
(RSP + -56) PTRSUB RSP -56
pentium-mmx COPY pentium-mmx
 BRANCH VZERO
 CALL func (RSP + -56) pentium-mmx
 CBRANCH f()
 CALL func (RSP + -56) 4636994
 BRANCH VZERO
4636994 PTRSUB 0 4636994
(RSP + -56) PTRSUB RSP -56
pentium COPY pentium
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) pentium
 BRANCH VZERO
0 INT_EQUAL f() 4
 CBRANCH (0 INT_EQUAL 0)
0 INT_EQUAL f() 1
 BRANCH VZERO
k8-sse3 COPY k8-sse3
 CALL func (RSP + -56) k8-sse3
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) penryn
penryn COPY penryn
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
1 COPY 1
 BRANCH VZERO
 RETURN 1
(f() # f()) PIECE f() f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (f() # f())
 BRANCH VZERO
nehalem COPY nehalem
silvermont COPY silvermont
 CBRANCH f()
 CALL func (RSP + -56) btver1
 BRANCH VZERO
btver1 COPY btver1
0 INT_LESS f() 80
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
athlon-xp COPY athlon-xp
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) athlon-xp
x86-64 COPY x86-64
 CALL func (RSP + -56) x86-64
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
pentium3 COPY pentium3
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) pentium3
 BRANCH VZERO
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
haswell COPY haswell
 BRANCHIND f()
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) silvermont
(RSP + -56) PTRSUB RSP -56
silvermont COPY silvermont
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
 CALL func (RSP + -56) bonnell
(RSP + -56) PTRSUB RSP -56
bonnell COPY bonnell
 BRANCH VZERO
sandybridge COPY sandybridge
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) sandybridge
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
ivybridge COPY ivybridge
 CALL func (RSP + -56) broadwell
broadwell COPY broadwell
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
4636835 PTRSUB 0 4636835
4637051 PTRSUB 0 4637051
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) f(pentium4 , x86-64) (RSP + -56)
(RSP + -56) PTRSUB RSP -56
4637043 PTRSUB 0 4637043
(RSP + -56) PTRSUB RSP -56
geode COPY geode
pentium COPY pentium
4637046 PTRSUB 0 4637046
(RSP + -56) PTRSUB RSP -56
 BRANCHIND f()
0 INT_LESS f() 9
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL f() 0
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
 BRANCH VZERO
 CALL func (RSP + -56) 4636835
(RSP + -56) PTRSUB RSP -56
 BRANCHIND f()
 BRANCH VZERO
 CALL func (RSP + -56) geode
 CALL func (RSP + -56) pentium
 BRANCH VZERO
 CALL func (RSP + -56) 4637043
 CALL func (RSP + -56) 4636830
(RSP + -56) PTRSUB RSP -56
4636830 PTRSUB 0 4636830
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 CALL func (RSP + -56) 4636835
4636835 PTRSUB 0 4636835
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) 4637046
 BRANCH VZERO
 CALL func (RSP + -56) 4637051
btver1 COPY btver1
 BRANCH VZERO
 BRANCH VZERO
 CALL func (RSP + -56) generic
generic COPY generic
 CALL func (RSP + -56) amdfam10
(RSP + -56) PTRSUB RSP -56
amdfam10 COPY amdfam10
 CALL func (RSP + -56) generic
generic COPY generic
 BRANCH VZERO
 CALL func (RSP + -56) btver1
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
pentiumpro COPY pentiumpro
 CALL func (RSP + -56) pentium2
(RSP + -56) PTRSUB RSP -56
pentium2 COPY pentium2
 BRANCH VZERO
pentium-m COPY pentium-m
 CALL func (RSP + -56) pentiumpro
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) pentium3
(RSP + -56) PTRSUB RSP -56
pentium3 COPY pentium3
yonah COPY yonah
 CALL func (RSP + -56) pentium-m
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
nehalem COPY nehalem
 BRANCH VZERO
 BRANCH VZERO
 CALL func (RSP + -56) westmere
westmere COPY westmere
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) haswell
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) ivybridge
 CALL func (RSP + -56) f(pentium4 , x86-64) (RSP + -56)
(RSP + -56) PTRSUB RSP -56
core2 COPY core2
 BRANCH VZERO
 BRANCH VZERO
penryn COPY penryn
 CALL func (RSP + -56) penryn
 CALL func (RSP + -56) nehalem
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 CALL func (RSP + -56) yonah
 CALL func (RSP + -56) f(nocona , prescott) (RSP + -56)
 BRANCH VZERO
 CALL func (RSP + -56) core2
f() CALL func f() LLVM (http://llvm.org/): 
(f() / 2147483647) SUBPIECE f() 8
(RSP + -88) PTRSUB RSP -88
(f() / 2147483647) SUBPIECE f() 8
Default target:  COPY Default target: 
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func f() 4622610
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f() Host CPU: 
3.7.0 COPY 3.7.0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -88) generic
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
f() CALL func f() Dec 13 2021
version  COPY version 
generic COPY generic
 CALL func f() 4622535
(f() / 2147483647) SUBPIECE f() 0
(f() + 40) INT_ADD f() 40
4622586 PTRSUB 0 4622586
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f() 10
(f() / 2147483647) SUBPIECE f() 0
 CALL func f() with assertions
(f() / 2147483647) SUBPIECE f() 8
DEBUG build COPY DEBUG build
4622514 PTRSUB 0 4622514
(RSP + -56) PTRSUB RSP -56
(RSP + -104) PTRSUB RSP -104
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f() 4622121
4622610 PTRSUB 0 4622610
f() CALL func f() (RSP + -88) f()
(RSP + -88) PTRSUB RSP -88
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f() 14:02:40
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
4622121 PTRSUB 0 4622121
(f() / 2147483647) SUBPIECE f() 0
 CALL func f() DEBUG build
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f() 4622586
Dec 13 2021 COPY Dec 13 2021
f() CALL func f() version 
LLVM (http://llvm.org/):  COPY LLVM (http://llvm.org/): 
(f() + 40) CAST (f() + 40)
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall_~basic_string_thunk (RSP + -56)
(f() / 2147483647) SUBPIECE f() 8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func f() Default target: 
4622622 PTRSUB 0 4622622
(f() / 2147483647) SUBPIECE f() 0
with assertions COPY with assertions
(f() / 2147483647) SUBPIECE f() 8
Host CPU:  COPY Host CPU: 
(f() / 2147483647) SUBPIECE f() 8
Built  COPY Built 
(RSP + -88) PTRSUB RSP -88
f() CALL func f() 4622514
f() CALL func
(RSP + -88) PTRSUB RSP -88
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f() 4622622
 CALL func f() 10
 CALL func (RSP + -56)
0 INT_NOTEQUAL 0 [(f() + 40)]
14:02:40 COPY 14:02:40
f() CALL func
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f() (RSP + -56) f()
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f() Built 
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -56) PTRSUB RSP -56
4622535 PTRSUB 0 4622535
 CALL func f() 3.7.0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -88) (RSP + -104) (RSP + -104)
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) INT_ADD 0 40
 CALL libcall_~basic_string_thunk (RSP + -88)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -88) PTRSUB RSP -88
(f() / 2147483647) SUBPIECE f() 0
(unknown) COPY (unknown)
 CALL libcall_operator=_thunk (RSP + -88) (unknown)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
 RETURN 0 ([f(ARG2)] & -256)
0 INT_NOTEQUAL [f(ARG1)] [f(ARG2)]
[f(ARG2)] LOAD 433 f(ARG2)
0 INT_ZEXT 0
([f(ARG2)] & -256) INT_OR ([f(ARG2)] & -256) 0
f(ARG2) CAST f(ARG2)
f(ARG1) CAST f(ARG1)
[f(ARG1)] LOAD 433 f(ARG1)
([f(ARG2)] & -256) INT_AND [f(ARG2)] -256
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -24) PTRSUB RSP -24
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 ([ARG1] + 8)
ARG1 COPY ARG1
([ARG1] + 8) INT_ADD [ARG1] 8
 RETURN 0 ARG1
(ARG1 + 8) INT_ADD ARG1 8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -24) PTRSUB RSP -24
40 INT_ADD 0 40
 CALL func (RSP + -24) (ARG1 + 8) (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
0 INT_NOTEQUAL ARG2 1
 CALL func ARG1
 CBRANCH (ARG2 INT_NOTEQUAL 1)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (VZERO INT_NOTEQUAL 0)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
[40] LOAD 433 40
0 INT_NOTEQUAL VZERO 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CBRANCH (VZERO INT_NOTEQUAL 0)
f() CALL func VZERO
 CALL func f() 10
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CALL func (RSP + -32) (RSP + -24) (RSP + -24)
f() CALL func
(RSP + -32) PTRSUB RSP -32
f() CALL func VZERO
(RSP + -24) PTRSUB RSP -24
 RETURN 1
VZERO COPY VZERO
f() COPY f()
0 INT_NOTEQUAL VZERO 0
 CALLIND VZERO
VZERO COPY VZERO
f() COPY f()
 CALL libcall_exit_thunk 0
 RETURN 1
 CALL libcall_exit_thunk 0
VZERO COPY VZERO
 RETURN 1
VZERO COPY VZERO
 CALL libcall___stack_chk_fail_thunk
VZERO COPY VZERO
 RETURN 0
VZERO COPY VZERO
(RSP + -32) PTRSUB RSP -32
 BRANCH VZERO
f() CALL func (RSP + -32)
[f()] LOAD 433 f()
 CALL func (RSP + -32)
f() CAST f()
 CALLIND [f()]
(RSP + -32) PTRSUB RSP -32
0 INT_EQUAL ARG1 0
0 INT_EQUAL ARG1 1
0 INT_EQUAL ARG1 1
0 INT_EQUAL ARG2 1
0 INT_EQUAL ARG2 0
0 INT_EQUAL ARG2 1
 RETURN 0
 CBRANCH (ARG1 INT_EQUAL 1)
 CBRANCH (ARG2 INT_EQUAL 1)
 CALL func 6887920 1
6887920 PTRSUB 0 6887920
 BRANCH VZERO
6887888 PTRSUB 0 6887888
 CALL func 6887888 1
 CBRANCH (ARG2 INT_EQUAL 0)
 CBRANCH (ARG1 INT_EQUAL 0)
6887904 PTRSUB 0 6887904
 BRANCH VZERO
 CALL func 6887904 1
 CBRANCH (ARG2 INT_EQUAL 1)
 CALL func 6887872 1
6887872 PTRSUB 0 6887872
 CBRANCH (ARG1 INT_EQUAL 1)
 BRANCH VZERO
6888592 PTRSUB 0 6888592
 RETURN 0
 CALL func 6888592
ARG1 COPY ARG1
 RETURN 0
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0
 STORE 433 (ARG1 + 16) 0
 STORE 433 (ARG1 + 8) 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG3) CALL func ARG3
f(ARG2) CALL func 8 ARG2
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG2) 0
f(ARG3) CAST f(ARG3)
[f(ARG3)] LOAD 433 f(ARG3)
 RETURN 0
f(ARG2) CAST f(ARG2)
 STORE 433 f(ARG2) [f(ARG3)]
 CALL func ARG1 ARG2 f(ARG3) ARG2
f(ARG3) CALL func ARG3
 RETURN 0
2305843009213693951 COPY 2305843009213693951
 RETURN 0 2305843009213693951
f() CALL func ARG1
0 INT_LESS f() ARG2
(ARG2 * 8) INT_LEFT ARG2 3
 CALL libcall_operator.new_thunk (ARG2 * 8)
 RETURN 0
 CBRANCH (f() INT_LESS ARG2)
 CALL libcall___throw_bad_alloc_thunk
 CALL func ARG1 ARG2 0 ARG2
 RETURN 0
f() CALL func ARG1 ARG2 ARG2
0 INT_EQUAL ARG2 0
 CBRANCH (ARG2 INT_EQUAL 0)
 RETURN 0 f()
 BRANCH VZERO
0 COPY 0
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(([(ARG1 + 8)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 3
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
 RETURN 0 (([(ARG1 + 8)] - [ARG1]) / 8)
 CALL libcall_operator.delete_thunk ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
0 INT_NOTEQUAL ARG2 0
 CBRANCH (ARG2 INT_NOTEQUAL 0)
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -24) PTRSUB RSP -24
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
ARG1 COPY ARG1
 CALL func (RSP + -16)
(RSP + -16) PTRSUB RSP -16
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL libcall_memmove_thunk ARG3 ARG1 (((ARG2 - ARG1) / 8) * 8)
ARG1 CAST ARG1
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG3 CAST ARG3
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) INT_ADD ARG3 (((ARG2 - ARG1) / 8) * 8)
 CBRANCH (((ARG2 - ARG1) / 8) INT_NOTEQUAL 0)
0 INT_NOTEQUAL ((ARG2 - ARG1) / 8) 0
((ARG2 - ARG1) / 8) INT_SRIGHT (ARG2 - ARG1) 3
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
 RETURN 0 (ARG3 + (((ARG2 - ARG1) / 8) * 8))
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) CAST (ARG3 + (((ARG2 - ARG1) / 8) * 8))
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 CALL func f() f() f()
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG4
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 ARG4
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
 CALL func f(ARG1)
 RETURN 0
ARG1 COPY ARG1
f() CALL func ARG1
ARG2 COPY ARG2
 CALL libcall___throw_length_error_thunk ARG3
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
(f() - f()) CAST (f() - f())
(FS_OFFSET + 40) INT_ADD 0 40
f(RSP) CAST f(RSP)
f() CALL func f(ARG1)
f() CALL func ARG1
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(RSP + -48) PTRSUB RSP -48
 CBRANCH ((f() - f()) INT_LESS ARG2)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f() [(f() + 40)]
([f(RSP)] + f()) INT_ADD [f(RSP)] f()
f() CALL func f(ARG1)
(RSP + -72) PTRSUB RSP -72
(f() + 40) INT_ADD f() 40
0 INT_LESS (f() - f()) ARG2
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_LESS ([f(RSP)] + f()) f()
 CBRANCH (([f(RSP)] + f()) INT_LESS f())
[f(RSP)] LOAD 433 f(RSP)
(f() - f()) INT_SUB f() f()
f(RSP) CALL func (RSP + -48) (RSP + -72) (RSP + -72)
f() CALL func f(ARG1)
 CBRANCH (f() INT_LESS ([f(RSP)] + f()))
f() COPY f()
f() CALL func f(ARG1)
([f(RSP)] + f()) COPY ([f(RSP)] + f())
 BRANCH VZERO
f() CALL func f(ARG1)
0 INT_LESS f() ([f(RSP)] + f())
 RETURN 0 f(RSP)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
f(ARG2) CALL func ARG2
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 ((f() * 8) + f()) f(ARG2) ((f() * 8) + f())
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 f()
[ARG1] LOAD 433 ARG1
f(ARG1) CALL func ARG1
f(ARG1) CALL func ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f(RSP) CALL func ARG1 1 0
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 8) [ARG1]
f() CALL func ARG1 f(RSP) f(RSP)
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
(([(ARG1 + 16)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 3
 STORE 433 (ARG1 + 16) ((f(RSP) * 8) + f())
((f(RSP) * 8) + f()) INT_ADD (f(RSP) * 8) f()
((f() * 8) + f()) INT_ADD (f() * 8) f()
(f(RSP) * 8) INT_MULT f(RSP) 8
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() + 8) INT_ADD f() 8
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
(f() * 8) INT_MULT f() 8
0 COPY 0
 RETURN 0
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
f() CALL func [ARG1] [(ARG1 + 8)] f() f(ARG1)
 STORE 433 (ARG1 + 8) (f() + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1 [(ARG1 + 8)] ARG2 [(ARG1 + 8)]
 CALL func ARG1 ARG2 ARG2
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL [(ARG1 + 16)])
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_EQUAL [(ARG1 + 8)] [(ARG1 + 16)]
 RETURN 0
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + 8) INT_ADD [(ARG1 + 8)] 8
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 8)
 BRANCH VZERO
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
ARG1 COPY ARG1
(RSP + -32) PTRSUB RSP -32
0 INT_EQUAL VZERO 0
f() COPY f()
 CALL func f() (RSP + -32) (RSP + -32)
VZERO COPY VZERO
 CBRANCH (VZERO INT_EQUAL 0)
 RETURN 0
f() CALL libcall_operator.new_thunk 24
 CALL func f()
f() COPY f()
6887840 PTRSUB 0 6887840
(f() + 176) INT_ADD f() 176
 RETURN 0 (f() + 176)
f() CALL func 6887840
0 INT_NOTEQUAL [([(f() + 8)] + 48)] ARG1
0 INT_NOTEQUAL 0 [40]
(f() + 40) INT_ADD f() 40
f() CALL func (RSP + -48) (RSP + -40) (RSP + -40)
6887840 PTRSUB 0 6887840
f() CALL func (f() + 176)
[40] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func (f() + 176)
(RSP + -48) PTRSUB RSP -48
f() CALL func 6887840
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [40])
(RSP + -40) PTRSUB RSP -40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 176) INT_ADD f() 176
0 INT_EQUAL f() 0
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH ([([(f() + 8)] + 48)] INT_NOTEQUAL ARG1)
(f() + 8) INT_ADD f() 8
[(f() + 8)] LOAD 433 (f() + 8)
([(f() + 8)] + 48) CAST ([(f() + 8)] + 48)
(f() + 8) CAST (f() + 8)
([(f() + 8)] + 48) INT_ADD [(f() + 8)] 48
[([(f() + 8)] + 48)] LOAD 433 ([(f() + 8)] + 48)
0 INT_NOTEQUAL [([(f() + 8)] + 48)] 6887968
 CBRANCH ([([(f() + 8)] + 48)] INT_NOTEQUAL 6887968)
6887968 PTRSUB 0 6887968
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
(f() + 8) INT_ADD f() 8
[(f() + 8)] LOAD 433 (f() + 8)
(f() + 8) CAST (f() + 8)
 CALL func [(f() + 8)] 2
([(f() + 8)] + 48) INT_ADD [(f() + 8)] 48
([(f() + 8)] + 48) CAST ([(f() + 8)] + 48)
(f() + 8) INT_ADD f() 8
f() CALL func (RSP + -48)
(f() + 8) CAST (f() + 8)
(RSP + -48) PTRSUB RSP -48
[([(f() + 8)] + 48)] LOAD 433 ([(f() + 8)] + 48)
[(f() + 8)] LOAD 433 (f() + 8)
 BRANCH VZERO
(RSP + -48) PTRSUB RSP -48
 CALL func (RSP + -48)
 RETURN 0
[ARG1] LOAD 433 ARG1
[ARG2] LOAD 433 ARG2
([[ARG1]] & -256) INT_OR ([[ARG1]] & -256) 0
 RETURN 0 ([[ARG1]] & -256)
0 INT_EQUAL [ARG2] [[ARG1]]
[[ARG1]] LOAD 433 [ARG1]
([[ARG1]] & -256) INT_AND [[ARG1]] -256
0 INT_ZEXT 0
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG1 COPY ARG1
((ARG2 - ARG1) / 32) INT_SRIGHT (ARG2 - ARG1) 5
 CBRANCH (0 INT_SLESS f(ARG1 , ARG2))
0 INT_SLESS 0 f(ARG1 , ARG2)
 CBRANCH (f() INT_NOTEQUAL 0)
(f(ARG1) + 24) COPY (f(ARG1) + 24)
f(ARG1) COPY f(ARG1)
(f(ARG1) + 8) COPY (f(ARG1) + 8)
(f(ARG1) + 16) COPY (f(ARG1) + 16)
(RSP + -48) PTRSUB RSP -48
 RETURN 0 f(ARG2)
f(ARG1) COPY f(ARG1)
 RETURN 0 f(ARG2)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(f(ARG1) + 8) INT_ADD f(ARG1) 8
 RETURN 0 (f(ARG1) + 8)
 RETURN 0 (f(ARG1) + 16)
 RETURN 0 f(ARG1)
 RETURN 0 f(ARG1)
f(ARG1) COPY f(ARG1)
 RETURN 0 f(ARG1)
f(ARG1) COPY f(ARG1)
f(ARG2) COPY f(ARG2)
f(ARG2) COPY f(ARG2)
 RETURN 0 (f(ARG1) + 24)
f() CALL func (RSP + -48) f(ARG1) f(ARG1)
 RETURN 0 f(ARG1)
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -48) PTRSUB RSP -48
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(f(ARG1) + 24) INT_ADD (f(ARG1) + 16) 8
f() CALL func (RSP + -48) (f(ARG1) + 24) (f(ARG1) + 24)
((f(ARG2) - f(ARG1)) / 8) INT_SRIGHT (f(ARG2) - f(ARG1)) 3
(f(ARG2) - f(ARG1)) INT_SUB f(ARG2) f(ARG1)
0 INT_NOTEQUAL ((f(ARG2) - f(ARG1)) / 8) 2
f() CALL func (RSP + -48) f(ARG1) f(ARG1)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (((f(ARG2) - f(ARG1)) / 8) INT_NOTEQUAL 2)
(RSP + -48) PTRSUB RSP -48
f() CALL func (RSP + -48) (f(ARG1) + 8) (f(ARG1) + 8)
(f(ARG1) + 8) INT_ADD f(ARG1) 8
(RSP + -48) PTRSUB RSP -48
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
(f(ARG1 , ARG2) + -1) INT_ADD f(ARG1 , ARG2) -1
(f(ARG1) + 32) INT_ADD (f(ARG1) + 24) 8
(RSP + -48) PTRSUB RSP -48
0 INT_NOTEQUAL f() 0
f() CALL func (RSP + -48) (f(ARG1) + 16) (f(ARG1) + 16)
(f(ARG1) + 16) INT_ADD (f(ARG1) + 8) 8
 CBRANCH (((f(ARG2) - f(ARG1)) / 8) INT_NOTEQUAL 3)
f() CALL func (RSP + -48) f(ARG1) f(ARG1)
0 INT_NOTEQUAL f() 0
(RSP + -48) PTRSUB RSP -48
0 INT_NOTEQUAL ((f(ARG2) - f(ARG1)) / 8) 1
 CBRANCH (((f(ARG2) - f(ARG1)) / 8) INT_NOTEQUAL 1)
f() CALL func (RSP + -48) f(ARG1) f(ARG1)
(RSP + -48) PTRSUB RSP -48
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 INT_NOTEQUAL ((f(ARG2) - f(ARG1)) / 8) 3
(f(ARG1) + 8) INT_ADD f(ARG1) 8
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG3 ARG2
[40] LOAD 433 40
40 INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -48)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
(RSP + -48) PTRSUB RSP -48
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
(RSP + -24) PTRSUB RSP -24
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func ARG1 ARG2 f() ARG2
f() CALL func ARG3
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 RETURN 0 (([(ARG1 + 8)] * 8) + [ARG1])
(([(ARG1 + 8)] * 8) + [ARG1]) INT_ADD ([(ARG1 + 8)] * 8) [ARG1]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] * 8) INT_MULT [(ARG1 + 8)] 8
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
ARG1 COPY ARG1
ARG2 COPY ARG2
(RSP + -88) PTRSUB RSP -88
f() CALL func (RSP + -88)
f() CALL func (RSP + -88)
f() CALL func (f() + 176)
[40] LOAD 433 (f() + 40)
f() CALL func (RSP + -64) (RSP + -56) (RSP + -56)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func (f() + 176)
6887840 PTRSUB 0 6887840
(f() + 40) CAST (f() + 40)
(RSP + -88) PTRSUB RSP -88
f() CALL func 6887840
 CBRANCH (0 INT_NOTEQUAL [40])
(RSP + -64) PTRSUB RSP -64
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_NOTEQUAL 0 [40]
(f() + 40) INT_ADD f() 40
(f() + 176) INT_ADD f() 176
0 INT_EQUAL f() 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0
 CBRANCH (f() INT_EQUAL f())
0 COPY 0
 CBRANCH ([([(f() + 8)] + 48)] INT_NOTEQUAL 6887968)
6887968 PTRSUB 0 6887968
([(f() + 8)] + 48) CAST ([(f() + 8)] + 48)
([(f() + 8)] + 48) INT_ADD [(f() + 8)] 48
[([(f() + 8)] + 48)] LOAD 433 ([(f() + 8)] + 48)
(f() + 8) INT_ADD f() 8
[(f() + 8)] LOAD 433 (f() + 8)
(f() + 8) CAST (f() + 8)
0 INT_NOTEQUAL [([(f() + 8)] + 48)] 6887968
f() CALL func (RSP + -64)
(f() + 8) INT_ADD f() 8
(f() + 8) CAST (f() + 8)
(RSP + -64) PTRSUB RSP -64
 CBRANCH f()
f() CALL func f() f() ([(f() + 8)] + 48) f()
[(f() + 8)] LOAD 433 (f() + 8)
 BRANCH VZERO
0 INT_EQUAL f() f()
([(f() + 8)] + 48) INT_ADD [(f() + 8)] 48
 CALL func (RSP + -64)
(RSP + -64) PTRSUB RSP -64
 BRANCH VZERO
1 COPY 1
 CALL func [(f() + 8)] 2
(f() + 8) INT_ADD f() 8
[(f() + 8)] LOAD 433 (f() + 8)
(f() + 8) CAST (f() + 8)
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(RSP + -24) PTRSUB RSP -24
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1
 STORE 433 ARG1 Symbol
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 0
 RETURN 0
 CALL func (ARG1 + 8)
 CALL func ARG1 ARG2 ARG2
 RETURN 0
(ARG1 + 48) INT_ADD ARG1 48
 STORE 433 (ARG1 + 48) ARG2
(ARG1 + 48) CAST (ARG1 + 48)
 RETURN 0
[ARG1] LOAD 433 ARG1
 CALL func ARG2 [ARG1] [ARG1]
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG1 ARG3 ARG3
 CALL func [ARG2] ARG1 ARG1
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func ARG1 ARG3 ARG4 ARG3
 CALL func [ARG2] ARG1 ARG1
[ARG2] LOAD 433 ARG2
 RETURN 0
 RETURN 0
 CALL func ARG1 ARG2 ARG2
ARG1 COPY ARG1
 RETURN 0 ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 ARG3
f() CALL func ARG2 (RSP + -40) A_Stack[-0x38]:8 A_Stack[-0x30]:8
 CALL func (ARG1 + 8) ARG3 (ARG1 + 8)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_EQUAL [ARG1] 0
(f() + 40) CAST (f() + 40)
 CBRANCH ([ARG1] INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func (RSP + -56)
(RSP + -40) PTRSUB RSP -40
cl::location(x) specified more than once! COPY cl::location(x) specified more than once!
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) cl::location(x) specified more than once!
0 COPY 0
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
[ARG1] LOAD 433 ARG1
(ARG2 + 64) INT_ADD ARG2 64
 CALL func (ARG2 + 64) ARG2 [ARG1] (ARG2 + 64)
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 CALL func ARG1 ARG3 ARG4 ARG5
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 CALL func ARG1 ARG3 ARG4 ARG5 ARG6
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 CALL func ARG1 ARG3 ARG4 ARG5 ARG6 ARG7
 RETURN 0
 CALL func ARG1
(ARG1 + 80) INT_ADD ARG1 80
 CALL func (ARG1 + 80)
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5 ARG6 ARG7 4454449
(ARG1 + 80) PTRADD ARG1 10 8
(ARG1 + 64) PTRADD ARG1 8 8
 CALL func (ARG1 + 80) ARG1 (ARG1 + 80)
 CALL func ARG1 0 0
 STORE 433 ARG1 Symbol
 CALL func ARG1
4454449 COPY 4454449
 CALL func (ARG1 + 64)
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG1 ARG3 ARG4 ARG5 ARG6 ARG7
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5 ARG6 ARG7 4454621
(ARG1 + 80) PTRADD ARG1 10 8
(ARG1 + 64) PTRADD ARG1 8 8
 CALL func (ARG1 + 80) ARG1 (ARG1 + 80)
 CALL func ARG1 0 0
 STORE 433 ARG1 Symbol
 CALL func ARG1
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
4454621 COPY 4454621
 CALL func (ARG1 + 64)
 RETURN 0
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(RSP + -24) PTRSUB RSP -24
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1
(ARG1 + 80) INT_ADD ARG1 80
 CALL func (ARG1 + 80)
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 RETURN 0
 CALL func ARG1 ARG2 ARG2
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 ARG3
[ARG1] LOAD 433 ARG1
f() CALL func ARG2 (RSP + -40) A_Stack[-0x38]:8 A_Stack[-0x30]:8
 CALL func (ARG1 + 8) ARG3 (ARG1 + 8)
 CBRANCH ([ARG1] INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_EQUAL [ARG1] 0
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CALL func (RSP + -56)
(RSP + -40) PTRSUB RSP -40
cl::location(x) specified more than once! COPY cl::location(x) specified more than once!
(RSP + -40) PTRSUB RSP -40
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40) cl::location(x) specified more than once!
0 COPY 0
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
[ARG1] LOAD 433 ARG1
(ARG2 + 64) INT_ADD ARG2 64
 CALL func (ARG2 + 64) ARG2 [ARG1] (ARG2 + 64)
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
[ARG1] LOAD 433 ARG1
 CALL func ARG2 [ARG1] [ARG1]
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func [ARG2] ARG1 ARG1
 CALL func ARG1 ARG3 ARG3
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 CALL func ARG1 ARG3 ARG4 ARG3
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 CALL func ARG1 ARG3 ARG4 ARG5
 RETURN 0
 CALL func ARG1 ARG3 ARG4 ARG5 ARG6
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 CALL func ARG1
 STORE 433 ARG1 Symbol
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 0
 CALL func (ARG1 + 8)
 RETURN 0
 CALL func (ARG1 + 80) ARG1 (ARG1 + 80)
 CALL func ARG1 0 0
 CALL func ARG1
(ARG1 + 80) PTRADD ARG1 10 8
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5 ARG6
(ARG1 + 64) PTRADD ARG1 8 8
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func (ARG1 + 64)
 CALL func [ARG2] ARG1 ARG1
 CALL func ARG1 ARG3 ARG4 ARG3
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 CALL func ARG1 ARG3 ARG4 ARG5
 RETURN 0
 CALL func ARG1 ARG3 ARG4 ARG5 ARG6
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG1 ARG3 ARG4 ARG5 ARG6 ARG7
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5 ARG6 ARG7 4455025
(ARG1 + 80) PTRADD ARG1 10 8
(ARG1 + 64) PTRADD ARG1 8 8
 CALL func (ARG1 + 80) ARG1 (ARG1 + 80)
 CALL func ARG1 0 0
 STORE 433 ARG1 Symbol
 CALL func ARG1
4455025 COPY 4455025
 CALL func (ARG1 + 64)
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(RSP + -24) PTRSUB RSP -24
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 STORE 433 ARG1 Symbol
 CALL func ARG1
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func ARG1
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func (ARG1 + 8)
 RETURN 0
 CALL func ARG1
(ARG1 + 80) INT_ADD ARG1 80
 CALL func (ARG1 + 80)
 RETURN 0
[ARG1] LOAD 433 ARG1
 CALL func ARG2 [ARG1] [ARG1]
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG1 ARG3 ARG3
 CALL func [ARG2] ARG1 ARG1
[ARG2] LOAD 433 ARG2
 RETURN 0
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 ARG3
[ARG1] LOAD 433 ARG1
f() CALL func ARG2 (RSP + -40) A_Stack[-0x38]:8 A_Stack[-0x30]:8
 CALL func (ARG1 + 8) ARG3 (ARG1 + 8)
(f() + 40) CAST (f() + 40)
 CBRANCH ([ARG1] INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL [ARG1] 0
 CALL func (RSP + -56)
(RSP + -40) PTRSUB RSP -40
cl::location(x) specified more than once! COPY cl::location(x) specified more than once!
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) cl::location(x) specified more than once!
0 COPY 0
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
[ARG1] LOAD 433 ARG1
 CALL func (ARG2 + 64) ARG2 [ARG1] (ARG2 + 64)
(ARG2 + 64) INT_ADD ARG2 64
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG3 ARG4 ARG3
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 CALL func ARG1 ARG3 ARG4 ARG5
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG1 ARG3 ARG4 ARG5 ARG6
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func (ARG1 + 80) ARG1 (ARG1 + 80)
 CALL func ARG1 0 0
 CALL func ARG1
(ARG1 + 80) PTRADD ARG1 10 8
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5 ARG6
(ARG1 + 64) PTRADD ARG1 8 8
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func (ARG1 + 64)
(ARG1 + 80) PTRADD ARG1 10 8
 STORE 433 ARG1 Symbol
 CALL func ARG1
 RETURN 0
 CALL func (ARG1 + 80)
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
(ARG1 + 80) PTRADD ARG1 10 8
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func (ARG1 + 80)
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1
(ARG1 + 80) PTRADD ARG1 10 8
 CALL func (ARG1 + 80)
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1
(ARG1 + 88) PTRADD ARG1 11 8
 CALL func (ARG1 + 88)
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
(ARG1 + 8) PTRADD ARG1 8 1
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
0 INT_NOTEQUAL ARG3 0
 CBRANCH (ARG3 INT_NOTEQUAL 0)
 RETURN 0
(ARG1 + 64) INT_ADD ARG1 64
 CALL func (ARG1 + 64) ARG2 1 (ARG1 + 64)
 RETURN 0
[ARG1] LOAD 433 ARG1
 CALL func ARG2 [ARG1] [ARG1]
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
[ARG1] LOAD 433 ARG1
 CALL func ARG2 [ARG1] [ARG1]
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 CALL func ARG1 ARG3 ARG3
 RETURN 0
 CALL func [ARG2] ARG1 ARG1
 CALL func ARG1 ARG3 ARG4 ARG3
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func ARG1 ARG3 ARG4 ARG5
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 CALL func ARG1 ARG3 ARG4 ARG5 ARG6
 RETURN 0
 CALL func ARG1
(ARG1 + 88) INT_ADD ARG1 88
 CALL func (ARG1 + 88)
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 8 1
(FS_OFFSET + 40) INT_ADD 0 40
40 CAST 40
40 INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (ARG1 + 8) (RSP + -17) (ARG1 + 8)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
0 COPY 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -17) PTRSUB RSP -17
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5 ARG6
 STORE 433 ARG1 Symbol
(ARG1 + 88) PTRADD ARG1 11 8
 CALL func ARG1 0 0
(ARG1 + 64) PTRADD ARG1 8 8
 CALL func ARG1
 CALL func (ARG1 + 88) ARG1 (ARG1 + 88)
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 CALL func (ARG1 + 64)
 RETURN 0
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
(RSP + -24) PTRSUB RSP -24
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
 RETURN 1
 STORE 433 ARG1 ARG2
 CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 (ARG1 + 8) ARG3
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 CALL func ARG1 ARG3 ARG4 ARG5 ARG6
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5 ARG6
 CALL func ARG1 0 0
(ARG1 + 64) PTRADD ARG1 8 8
 CALL func ARG1
 CALL func (ARG1 + 88) ARG1 (ARG1 + 88)
 STORE 433 ARG1 Symbol
(ARG1 + 88) PTRADD ARG1 11 8
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 CALL func (ARG1 + 64)
 RETURN 0
0 INT_EQUAL ARG1 1
0 INT_EQUAL ARG2 65535
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (ARG1 INT_EQUAL 1)
(f() + 40) INT_ADD f() 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (ARG2 INT_EQUAL 65535)
 RETURN 1
f() COPY f()
 RETURN 0
f() COPY f()
 CALL libcall___stack_chk_fail_thunk
(RSP + -48) PTRSUB RSP -48
Display available options (-help-hidden for more) COPY Display available options (-help-hidden for more)
6887872 PTRSUB 0 6887872
6887968 PTRSUB 0 6887968
 CALL func 6888192 4623994 (RSP + -40) (RSP + -32) (RSP + -44) (RSP + -24)
 CALL func (RSP + -40) Display list of available options (-help-list-hidden for more)
 CALL libcall___cxa_atexit_thunk 4459478 6888288 6878568
1 COPY 1
4460217 COPY 4460217
6888608 PTRSUB 0 6888608
(RSP + -44) PTRSUB RSP -44
4459594 PTRSUB 0 4459594
 CALL func 6887904 0
6887968 PTRSUB 0 6887968
(RSP + -32) PTRSUB RSP -32
6887808 PTRSUB 0 6887808
f() CALL func (RSP + -48)
(RSP + -40) PTRSUB RSP -40
4449062 PTRSUB 0 4449062
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) Display list of all available options
6888384 PTRSUB 0 6888384
(RSP + -44) PTRSUB RSP -44
 CALL libcall___cxa_atexit_thunk 4459478 6888192 6878568
4449062 PTRSUB 0 4449062
 CALL func (RSP + -40) Print all option values after command line parsing
4459478 PTRSUB 0 4459478
 CALL func (RSP + -24) 6887968
6887872 PTRSUB 0 6887872
6888096 PTRSUB 0 6888096
 CALL libcall___cxa_atexit_thunk 4459710 6887904 6878568
6878568 PTRSUB 0 6878568
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
(RSP + -40) PTRSUB RSP -40
 CALL func 6888608 version (RSP + -40) (RSP + -32) (RSP + -44) (RSP + -24)
(RSP + -24) PTRSUB RSP -24
6887872 PTRSUB 0 6887872
6878568 PTRSUB 0 6878568
help-list COPY help-list
0 INT_AND 1 4294967040
(RSP + -32) PTRSUB RSP -32
6887968 PTRSUB 0 6887968
(RSP + -40) PTRSUB RSP -40
 CALL libcall___cxa_atexit_thunk 4509636 6888384 6878568
6878568 PTRSUB 0 6878568
3 COPY 3
 CALL func (RSP + -40) Display available options (-help-hidden for more)
6888192 PTRSUB 0 6888192
 CALL func (RSP + -24) 6887968
6887936 PTRSUB 0 6887936
6887872 PTRSUB 0 6887872
(RSP + -24) PTRSUB RSP -24
6887904 PTRSUB 0 6887904
 CALL func 6887888 1
4459362 PTRSUB 0 4459362
1 COPY 1
Print all option values after command line parsing COPY Print all option values after command line parsing
(RSP + -40) PTRSUB RSP -40
f() CALL func 6888592
6887888 PTRSUB 0 6887888
6887920 PTRSUB 0 6887920
4509636 PTRSUB 0 4509636
6887968 PTRSUB 0 6887968
6888192 PTRSUB 0 6888192
(RSP + -24) PTRSUB RSP -24
6887952 PTRSUB 0 6887952
4460371 COPY 4460371
6887952 PTRSUB 0 6887952
(RSP + -24) PTRSUB RSP -24
print-all-options COPY print-all-options
6888608 PTRSUB 0 6888608
(RSP + -24) PTRSUB RSP -24
f() CALL func 6887872
(RSP + -40) PTRSUB RSP -40
6887888 PTRSUB 0 6887888
 CALL func 6888288 help-hidden (RSP + -40) (RSP + -32) (RSP + -48) (RSP + -44) (RSP + -24) 4460659
 CALL func (RSP + -24) 6887968
 CALL libcall___cxa_atexit_thunk 4449062 6887888 6878568
6887920 PTRSUB 0 6887920
(RSP + -40) PTRSUB RSP -40
Display list of available options (-help-list-hidden for more) COPY Display list of available options (-help-list-hidden for more)
6888384 PTRSUB 0 6888384
 CALL func (RSP + -40) Display the version of this program
6878568 PTRSUB 0 6878568
(RSP + -44) PTRSUB RSP -44
6887968 PTRSUB 0 6887968
help-hidden COPY help-hidden
(RSP + -24) PTRSUB RSP -24
f() CALL func 6887888
(RSP + -32) PTRSUB RSP -32
1 COPY 1
 CALL func (RSP + -40) Display all available options
 CALL libcall___cxa_atexit_thunk 4509636 6888480 6878568
6888000 PTRSUB 0 6888000
 CALL func 6887872 0
 CALL func (RSP + -24) 6887968
(RSP + -24) PTRSUB RSP -24
(RSP + -40) PTRSUB RSP -40
6878568 PTRSUB 0 6878568
4460659 COPY 4460659
4459478 PTRSUB 0 4459478
4459710 PTRSUB 0 4459710
6887904 PTRSUB 0 6887904
6887968 PTRSUB 0 6887968
 CALL func 6887808 General options 0
6888480 PTRSUB 0 6888480
(RSP + -24) PTRSUB RSP -24
4623994 PTRSUB 0 4623994
(RSP + -40) PTRSUB RSP -40
 CALL func 6887936 6887872 6887904
6878568 PTRSUB 0 6878568
version COPY version
Display list of all available options COPY Display list of all available options
 CALL libcall___cxa_atexit_thunk 4459594 6888096 6878568
(RSP + -40) PTRSUB RSP -40
 CALL func 6888384 print-options (RSP + -40) (RSP + -44) (RSP + -32) (RSP + -24)
(RSP + -32) PTRSUB RSP -32
f() CALL func 6887936
 CALL func 6887968 Generic Options 0
(RSP + -40) PTRSUB RSP -40
help-list-hidden COPY help-list-hidden
 CALL libcall___cxa_atexit_thunk 4449062 6887872 6878568
3 COPY 3
 CALL func (RSP + -24) 6887968
 CALL func (RSP + -24) 6887968
(RSP + -24) PTRSUB RSP -24
(RSP + -48) PTRSUB RSP -48
6888000 PTRSUB 0 6888000
6878568 PTRSUB 0 6878568
6888592 PTRSUB 0 6888592
3 COPY 3
(RSP + -44) PTRSUB RSP -44
Display all available options COPY Display all available options
0 INT_AND 0 4294967040
General options COPY General options
6878568 PTRSUB 0 6878568
 CALL libcall___cxa_atexit_thunk 4459594 6888000 6878568
 CALL func 6887952 6887888 6887920
3 COPY 3
6887920 PTRSUB 0 6887920
Generic Options COPY Generic Options
(RSP + -24) PTRSUB RSP -24
1 COPY 1
 CALL func 6888096 help-list-hidden (RSP + -40) (RSP + -32) (RSP + -48) (RSP + -44) (RSP + -24) 4460371
6888288 PTRSUB 0 6888288
(RSP + -40) PTRSUB RSP -40
6887968 PTRSUB 0 6887968
(RSP + -40) PTRSUB RSP -40
6888096 PTRSUB 0 6888096
6878568 PTRSUB 0 6878568
f() CALL func (RSP + -48)
Display the version of this program COPY Display the version of this program
3 COPY 3
 CALL func (RSP + -24) 6887968
6878568 PTRSUB 0 6878568
6887888 PTRSUB 0 6887888
(RSP + -48) PTRSUB RSP -48
 CALL libcall___cxa_atexit_thunk 4459362 6888608 6878568
(RSP + -32) PTRSUB RSP -32
4509636 PTRSUB 0 4509636
(RSP + -44) PTRSUB RSP -44
Print non-default options after command line parsing COPY Print non-default options after command line parsing
 CALL func 6887920 1
(RSP + -48) PTRSUB RSP -48
 CALL func (RSP + -40) Print non-default options after command line parsing
(RSP + -48) PTRSUB RSP -48
4459594 PTRSUB 0 4459594
6887904 PTRSUB 0 6887904
 CALL func 6888480 print-all-options (RSP + -40) (RSP + -44) (RSP + -32) (RSP + -24)
f() CALL func 6887952
(RSP + -32) PTRSUB RSP -32
(RSP + -32) PTRSUB RSP -32
6887968 PTRSUB 0 6887968
(RSP + -44) PTRSUB RSP -44
print-options COPY print-options
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
6888288 PTRSUB 0 6888288
 CALL func 6888000 help-list (RSP + -40) (RSP + -32) (RSP + -48) (RSP + -44) (RSP + -24) 4460217
(RSP + -44) PTRSUB RSP -44
6888480 PTRSUB 0 6888480
4459710 PTRSUB 0 4459710
6887936 PTRSUB 0 6887936
 CALL libcall___cxa_atexit_thunk 4459710 6887920 6878568
(RSP + -40) PTRSUB RSP -40
1 COPY 1
6878568 PTRSUB 0 6878568
6887888 PTRSUB 0 6887888
[ARG1] LOAD 433 ARG1
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
 CALL libcall___assert_fail_thunk Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 1100 0
0 COPY 0
Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!" COPY Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!"
 RETURN 0
 RETURN 1
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1
[ARG1] LOAD 433 ARG1
 CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
[ARG2] LOAD 433 ARG2
0 INT_NOTEQUAL ARG3 0
 CALL func [ARG1] [ARG2] [ARG2]
 RETURN 0
 CBRANCH (ARG3 INT_NOTEQUAL 0)
 CALL func ARG1 ARG2 ARG2
(ARG1 + 80) INT_ADD ARG1 80
(ARG1 + 64) INT_ADD ARG1 64
f() CALL func (ARG1 + 80) ARG1 ARG3 ARG4 ARG5 ARG6 (RSP + -33)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
-1 BOOL_NEGATE 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
-1 COPY -1
0 COPY 0
0 INT_EQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
(RSP + -33) PTRSUB RSP -33
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
[(f() + 40)] LOAD 433 (f() + 40)
 RETURN 0 -1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(RSP + -33) PTRSUB RSP -33
 CALL func (ARG1 + 64) (RSP + -33) 0 (ARG1 + 64)
(ARG1 + 80) INT_ADD ARG1 80
 CALL func (ARG1 + 80)
 RETURN 0
 CALL func (ARG1 + 80) ARG1 (ARG1 + 80)
(ARG1 + 80) INT_ADD ARG1 80
 RETURN 0
(ARG1 + 80) INT_ADD ARG1 80
 CALL func (ARG1 + 80) ARG1 ARG2 (ARG1 + 80)
 RETURN 0
 CALL func ARG1
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
0 COPY 0
 RETURN 0 0
 CALL func ARG3 ARG2 ARG6 ARG2
 RETURN 0
 CALL func (RSP + -17) ARG1 ARG2 ARG3 ARG4 ARG5
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
(RSP + -17) PTRSUB RSP -17
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 (ARG1 + 8)
0 INT_EQUAL ARG3 0
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 80) INT_ADD ARG1 80
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
 CALL func ARG1 (ARG1 + 80) f() f() ARG2
 CBRANCH f()
 CBRANCH (ARG3 INT_EQUAL 0)
 RETURN 0
f() CALL func (ARG1 + 64)
f() CALL func (ARG1 + 64)
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
f() CALL func (ARG1 + 64)
f() CALL func f() f()
f() CALL func (ARG1 + 64)
0 INT_EQUAL f() 0
(ARG1 + 80) INT_ADD ARG1 80
 CALL func (ARG1 + 80) ARG2 (ARG1 + 80)
 RETURN 0
0 COPY 0
 RETURN 0 0
[ARG1] LOAD 433 ARG1
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
0 COPY 0
Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!" COPY Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
 RETURN 0
 CALL libcall___assert_fail_thunk Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 1100 0
 RETURN 1
 RETURN 0
 CALL func ARG1 ARG2 ARG2
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
[ARG2] LOAD 433 ARG2
0 INT_NOTEQUAL ARG3 0
 RETURN 0
 CBRANCH (ARG3 INT_NOTEQUAL 0)
 CALL func [ARG1] [ARG2] [ARG2]
(ARG1 + 80) INT_ADD ARG1 80
f() CALL func (ARG1 + 80) ARG1 ARG3 ARG4 ARG5 ARG6 (RSP + -33)
(ARG1 + 64) INT_ADD ARG1 64
 CALL func ARG1 ARG2 ARG2
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_EQUAL 0)
(RSP + -33) PTRSUB RSP -33
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
-1 BOOL_NEGATE 0
0 INT_EQUAL f() 0
-1 COPY -1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 COPY 0
(RSP + -33) PTRSUB RSP -33
 CALL func (ARG1 + 64) (RSP + -33) 0 (ARG1 + 64)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 -1
(ARG1 + 80) INT_ADD ARG1 80
 CALL func (ARG1 + 80)
 RETURN 0
 CALL func (ARG1 + 80) ARG1 (ARG1 + 80)
(ARG1 + 80) INT_ADD ARG1 80
 RETURN 0
 CALL func (ARG1 + 80) ARG1 ARG2 (ARG1 + 80)
(ARG1 + 80) INT_ADD ARG1 80
 RETURN 0
[ARG1] LOAD 433 ARG1
 CALL func ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
 CALL func ARG3 ARG2 ARG6 ARG2
 RETURN 0
 CALL func (RSP + -17) ARG1 ARG2 ARG3 ARG4 ARG5
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -17) PTRSUB RSP -17
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 (ARG1 + 8)
0 COPY 0
 RETURN 0 0
0 INT_EQUAL ARG3 0
(ARG1 + 64) INT_ADD ARG1 64
 CALL func ARG1 (ARG1 + 80) f() f() ARG2
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 80) INT_ADD ARG1 80
 RETURN 0
 CBRANCH (ARG3 INT_EQUAL 0)
 CBRANCH f()
 BRANCH VZERO
0 INT_EQUAL f() 0
1 COPY 1
f() CALL func (ARG1 + 64)
f() CALL func f() f()
f() CALL func (ARG1 + 64)
 CBRANCH (f() INT_EQUAL 0)
f() CALL func (ARG1 + 64)
f() CALL func (ARG1 + 64)
0 COPY 0
(ARG1 + 80) INT_ADD ARG1 80
 CALL func (ARG1 + 80) ARG2 (ARG1 + 80)
 RETURN 0
0 COPY 0
 RETURN 0 0
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
 RETURN 0 ARG1
[ARG1] LOAD 433 ARG1
0 INT_EQUAL [ARG1] 0
 CBRANCH ([ARG1] INT_EQUAL 0)
 CALL libcall___assert_fail_thunk Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 1100 0
0 COPY 0
Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!" COPY Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!"
 RETURN 0
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1
 CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
[ARG2] LOAD 433 ARG2
0 INT_NOTEQUAL ARG3 0
 RETURN 0
 CBRANCH (ARG3 INT_NOTEQUAL 0)
 CALL func [ARG1] [ARG2] [ARG2]
 CALL func ARG1 ARG2 ARG2
(ARG1 + 80) INT_ADD ARG1 80
(ARG1 + 64) INT_ADD ARG1 64
f() CALL func (ARG1 + 80) ARG1 ARG3 ARG4 ARG5 ARG6 (RSP + -33)
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_EQUAL 0 [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -33) PTRSUB RSP -33
(f() + 40) CAST (f() + 40)
-1 COPY -1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
 CBRANCH (0 INT_EQUAL [(f() + 40)])
-1 BOOL_NEGATE 0
 CALL func (ARG1 + 64) (RSP + -33) 0 (ARG1 + 64)
(RSP + -33) PTRSUB RSP -33
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 -1
(ARG1 + 80) INT_ADD ARG1 80
 CALL func (ARG1 + 80)
 RETURN 0
(ARG1 + 80) INT_ADD ARG1 80
 CALL func (ARG1 + 80) ARG1 (ARG1 + 80)
 RETURN 0
 CALL func (ARG1 + 80) ARG1 ARG2 (ARG1 + 80)
(ARG1 + 80) INT_ADD ARG1 80
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 (ARG1 + 8)
0 COPY 0
 RETURN 0 0
 CALL func ARG3 ARG2 ARG6 ARG2
 RETURN 0
 CALL func (RSP + -17) ARG1 ARG2 ARG3 ARG4 ARG5
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -17) PTRSUB RSP -17
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
[ARG1] LOAD 433 ARG1
 CALL func ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
0 INT_EQUAL ARG3 0
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
 CALL func ARG1 (ARG1 + 80) f() f() ARG2
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 80) INT_ADD ARG1 80
(ARG1 + 64) INT_ADD ARG1 64
 CBRANCH (ARG3 INT_EQUAL 0)
 RETURN 0
 CBRANCH f()
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
f() CALL func (ARG1 + 64)
f() CALL func f() f()
0 INT_EQUAL f() 0
f() CALL func (ARG1 + 64)
f() CALL func (ARG1 + 64)
f() CALL func (ARG1 + 64)
(ARG1 + 80) INT_ADD ARG1 80
 CALL func (ARG1 + 80) ARG2 (ARG1 + 80)
 RETURN 0
0 COPY 0
 RETURN 0 0
 CALL func 1 65535
 RETURN 0
f() CALL libcall_memcmp_thunk ARG1 ARG2 ARG3
0 INT_EQUAL ARG3 0
 RETURN 0 f()
 CBRANCH (ARG3 INT_EQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 RETURN 0 1
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 Symbol
 CALL libcall_~basic_string_thunk (ARG1 + 8)
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 40) INT_ADD ARG1 40
 CALL libcall_operator=_thunk (ARG1 + 8) ARG2
(ARG1 + 40) CAST (ARG1 + 40)
 RETURN 0
 STORE 433 (ARG1 + 40) 1
(ARG1 + 8) CAST (ARG1 + 8)
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
 RETURN 0 ARG1
 RETURN 0 value
value COPY value
 RETURN 0 0
0 COPY 0
 RETURN 0 0
0 COPY 0
 RETURN 0 Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0 Symbol
Symbol PTRSUB 0 Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0 Symbol
number COPY number
 RETURN 0 number
number COPY number
 RETURN 0 number
string COPY string
 RETURN 0 string
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG5 COPY ARG5
ARG6 COPY ARG6
 STORE 433 ARG7 f()
f() CALL func (RSP + -56) 0
 RETURN 0 0
(RSP + -56) PTRSUB RSP -56
0 COPY 0
Symbol PTRSUB 0 Symbol
 RETURN 0 Symbol
 CALLIND [[[(ARG1 + 64)]]] [(ARG1 + 64)] ARG2 A_Stack[-0x38]:8 A_Stack[-0x30]:8 ARG5 ARG6 ARG5 ARG6 ARG3 ARG4
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
 CALL func (RSP + -56) [([(ARG1 + 64)] + 24)] [([(ARG1 + 64)] + 24)]
([(ARG1 + 64)] + 24) INT_ADD [(ARG1 + 64)] 24
(RSP + -56) PTRSUB RSP -56
([(ARG1 + 64)] + 24) CAST ([(ARG1 + 64)] + 24)
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[([(ARG1 + 64)] + 24)] LOAD 433 ([(ARG1 + 64)] + 24)
(ARG1 + 64) CAST (ARG1 + 64)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
40 INT_ADD 0 40
[[(ARG1 + 64)]] CAST [[(ARG1 + 64)]]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(ARG1 + 64) CAST (ARG1 + 64)
[[(ARG1 + 64)]] LOAD 433 [(ARG1 + 64)]
[40] LOAD 433 40
[[[(ARG1 + 64)]]] LOAD 433 [[(ARG1 + 64)]]
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(ARG1 + 64) CAST (ARG1 + 64)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
 CALLIND [([[(ARG1 + 64)]] + 56)] [(ARG1 + 64)] ARG2 A_Stack[-0x48]:8 A_Stack[-0x40]:8 ARG5 ARG6 ARG7 4465855 ARG5 ARG6 ARG3 ARG4
([(ARG1 + 64)] + 24) INT_ADD [(ARG1 + 64)] 24
4465855 COPY 4465855
[[(ARG1 + 64)]] LOAD 433 [(ARG1 + 64)]
[40] LOAD 433 40
(ARG1 + 64) CAST (ARG1 + 64)
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
[([(ARG1 + 64)] + 24)] LOAD 433 ([(ARG1 + 64)] + 24)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -72) PTRSUB RSP -72
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(ARG1 + 64) CAST (ARG1 + 64)
([(ARG1 + 64)] + 24) CAST ([(ARG1 + 64)] + 24)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
([[(ARG1 + 64)]] + 56) INT_ADD [[(ARG1 + 64)]] 56
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
([[(ARG1 + 64)]] + 56) CAST ([[(ARG1 + 64)]] + 56)
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
[([[(ARG1 + 64)]] + 56)] LOAD 433 ([[(ARG1 + 64)]] + 56)
(ARG1 + 64) CAST (ARG1 + 64)
 CALL func (RSP + -72) [([(ARG1 + 64)] + 24)] [([(ARG1 + 64)] + 24)]
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) CAST (ARG1 + 64)
 CALL func [(ARG1 + 64)]
 RETURN 0
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
(ARG1 + 64) INT_ADD ARG1 64
 CALL func ARG1 ARG2 ARG2
(ARG1 + 88) INT_ADD ARG1 88
f() CALL func (ARG1 + 88) ARG1 ARG3 ARG4 ARG5 ARG6 (RSP + -36)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL 0 [(f() + 40)]
(RSP + -36) PTRSUB RSP -36
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
-1 COPY -1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(f() + 40) INT_ADD f() 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
0 COPY 0
-1 BOOL_NEGATE 0
 CALL func (ARG1 + 64) (RSP + -36) 0 (ARG1 + 64)
(RSP + -36) PTRSUB RSP -36
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 -1
(ARG1 + 88) INT_ADD ARG1 88
 CALL func (ARG1 + 88)
 RETURN 0
(ARG1 + 88) INT_ADD ARG1 88
 CALL func (ARG1 + 88) ARG2 (ARG1 + 88)
 RETURN 0
 CALL func (ARG1 + 88) ARG1 (ARG1 + 88)
(ARG1 + 88) INT_ADD ARG1 88
 RETURN 0
 CALL func (ARG1 + 88) ARG1 ARG2 (ARG1 + 88)
(ARG1 + 88) INT_ADD ARG1 88
 RETURN 0
 STORE 433 ARG1 Symbol
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 ARG2 ARG2
ARG1 CAST ARG1
(ARG2 + 12) INT_ADD ARG2 12
(ARG2 + 8) INT_ADD ARG2 8
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
(ARG1 + 12) CAST (ARG1 + 12)
[(ARG2 + 12)] LOAD 433 (ARG2 + 12)
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG1 + 12) INT_ADD ARG1 12
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 STORE 433 (ARG1 + 12) [(ARG2 + 12)]
(ARG2 + 12) CAST (ARG2 + 12)
 STORE 433 (ARG1 + 8) [(ARG2 + 8)]
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func ARG3 ARG2 [ARG4] (RSP + -40) ARG6
[ARG4] LOAD 433 ARG4
 CALL func (RSP + -40) ARG5 ARG5
(RSP + -40) PTRSUB RSP -40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
[40] LOAD 433 40
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func (RSP + -17) ARG1 ARG2 ARG3 ARG4 ARG5
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -17) PTRSUB RSP -17
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 (ARG1 + 8)
0 INT_EQUAL ARG3 0
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
 CALL func ARG1 (ARG1 + 88) (RSP + -36) f() ARG2
(ARG1 + 88) INT_ADD ARG1 88
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH f()
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) CAST (f() + 40)
 CBRANCH (ARG3 INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
f() CALL func (ARG1 + 64)
f() CALL func (ARG1 + 64)
(RSP + -36) PTRSUB RSP -36
f() CALL func f() (RSP + -40) f()
0 INT_EQUAL f() 0
f() CALL func (ARG1 + 64)
f() CALL func (ARG1 + 64)
(RSP + -40) PTRSUB RSP -40
(ARG1 + 88) INT_ADD ARG1 88
 RETURN 0 (ARG1 + 88)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 12) INT_ADD ARG1 12
[ARG2] LOAD 433 ARG2
(ARG1 + 12) CAST (ARG1 + 12)
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
 STORE 433 (ARG1 + 8) [ARG2]
 STORE 433 (ARG1 + 12) 1
 CALL func ARG1 ARG2 ARG2
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 2 4
 STORE 433 ARG1 [ARG2]
 CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
[ARG2] LOAD 433 ARG2
0 INT_NOTEQUAL ARG3 0
 CBRANCH (ARG3 INT_NOTEQUAL 0)
 RETURN 0
f() CALL func (ARG1 + 88) ARG1 ARG3 ARG4 ARG5 ARG6 (RSP + -36)
(ARG1 + 64) INT_ADD ARG1 64
 CALL func ARG1 ARG2 ARG2
(ARG1 + 88) INT_ADD ARG1 88
(f() + 40) INT_ADD f() 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 COPY 0
 CBRANCH (0 INT_EQUAL [(f() + 40)])
-1 BOOL_NEGATE 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL 0 [(f() + 40)]
(f() + 40) CAST (f() + 40)
(RSP + -36) PTRSUB RSP -36
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
-1 COPY -1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 RETURN 1
 RETURN 0 -1
 CALL libcall___stack_chk_fail_thunk
(RSP + -36) PTRSUB RSP -36
 CALL func (ARG1 + 64) (RSP + -36) 0 (ARG1 + 64)
(ARG1 + 88) INT_ADD ARG1 88
 CALL func (ARG1 + 88)
 RETURN 0
(ARG1 + 88) INT_ADD ARG1 88
 CALL func (ARG1 + 88) ARG2 (ARG1 + 88)
 RETURN 0
(ARG1 + 88) INT_ADD ARG1 88
 CALL func (ARG1 + 88) ARG1 (ARG1 + 88)
 RETURN 0
 CALL func (ARG1 + 88) ARG1 ARG2 (ARG1 + 88)
(ARG1 + 88) INT_ADD ARG1 88
 RETURN 0
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 12) INT_ADD ARG1 12
[ARG2] LOAD 433 ARG2
 CBRANCH ([(ARG1 + 12)] INT_EQUAL 0)
(ARG1 + 12) CAST (ARG1 + 12)
0 INT_EQUAL [(ARG1 + 12)] 0
 RETURN 0 f()
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
0 COPY 0
 CBRANCH ([(ARG1 + 8)] INT_EQUAL [ARG2])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_EQUAL [(ARG1 + 8)] [ARG2]
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
1 COPY 1
ARG1 CAST ARG1
 CALL func ARG1 ARG2 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 Symbol
(ARG2 + 12) INT_ADD ARG2 12
(ARG2 + 8) INT_ADD ARG2 8
(ARG1 + 12) CAST (ARG1 + 12)
[(ARG2 + 12)] LOAD 433 (ARG2 + 12)
(ARG1 + 12) INT_ADD ARG1 12
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 RETURN 0
(ARG2 + 12) CAST (ARG2 + 12)
 STORE 433 (ARG1 + 12) [(ARG2 + 12)]
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) [(ARG2 + 8)]
(ARG2 + 8) CAST (ARG2 + 8)
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func ARG3 ARG2 [ARG4] (RSP + -40) ARG6
[ARG4] LOAD 433 ARG4
 CALL func (RSP + -40) ARG5 ARG5
[40] LOAD 433 40
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -40) PTRSUB RSP -40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func (RSP + -17) ARG1 ARG2 ARG3 ARG4 ARG5
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -17) PTRSUB RSP -17
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 (ARG1 + 8)
0 INT_EQUAL ARG3 0
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
 CALL func ARG1 (ARG1 + 88) (RSP + -36) f() ARG2
 CBRANCH f()
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) CAST (f() + 40)
 CBRANCH (ARG3 INT_EQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func (ARG1 + 64)
(RSP + -36) PTRSUB RSP -36
f() CALL func (ARG1 + 64)
 BRANCH VZERO
f() CALL func (ARG1 + 64)
1 COPY 1
f() CALL func (ARG1 + 64)
(RSP + -40) PTRSUB RSP -40
f() CALL func f() (RSP + -40) f()
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 COPY 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
(ARG1 + 88) INT_ADD ARG1 88
 CALL func ARG1
 RETURN 0
 CALL func (ARG1 + 88)
(ARG1 + 64) INT_ADD ARG1 64
 CALL func (ARG1 + 64) ARG2 1 (ARG1 + 64)
 RETURN 0
(ARG1 + 88) INT_ADD ARG1 88
 RETURN 0 (ARG1 + 88)
0 INT_NOTEQUAL ARG3 0
(ARG1 + 32) PTRADD ARG1 32 1
 CALL libcall_operator=_thunk ARG1 ARG2
 CALL func (ARG1 + 32) ARG2 (ARG1 + 32)
 RETURN 0
 CBRANCH (ARG3 INT_NOTEQUAL 0)
(ARG1 + 64) INT_ADD ARG1 64
f() CALL func (ARG1 + 144) ARG1 ARG3 ARG4 ARG5 ARG6 (RSP + -72) 4469197
 CALL func ARG1 ARG2 ARG2
(ARG1 + 144) INT_ADD ARG1 144
(RSP + -72) PTRSUB RSP -72
4469197 COPY 4469197
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
-1 COPY -1
(f() + 40) INT_ADD f() 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(RSP + -72) PTRSUB RSP -72
-1 BOOL_NEGATE 0
 CALL libcall_~basic_string_thunk (RSP + -72)
 CBRANCH (f() INT_EQUAL 0)
(f() + 40) CAST (f() + 40)
0 INT_EQUAL 0 [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL f() 0
(FS_OFFSET + 40) INT_ADD 0 40
 CALL libcall_basic_string_thunk
(RSP + -72) PTRSUB RSP -72
 CALL func (ARG1 + 64) (RSP + -72) 0 (ARG1 + 64)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 -1
(ARG1 + 144) INT_ADD ARG1 144
 CALL func (ARG1 + 144)
 RETURN 0
(ARG1 + 144) INT_ADD ARG1 144
 CALL func (ARG1 + 144) ARG2 (ARG1 + 144)
 RETURN 0
 CALL func (ARG1 + 144) ARG1 (ARG1 + 144)
(ARG1 + 144) INT_ADD ARG1 144
 RETURN 0
(ARG1 + 144) INT_ADD ARG1 144
 CALL func (ARG1 + 144) ARG1 ARG2 (ARG1 + 144)
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 32) INT_ADD ARG1 32
 RETURN 0 (ARG1 + 32)
 STORE 433 ARG1 Symbol
 CALL func ARG1
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 Symbol
(ARG1 + 40) PTRADD ARG1 5 8
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 ARG2 ARG2
(ARG2 + 40) INT_ADD ARG2 40
 RETURN 0
Symbol CAST Symbol
[(ARG2 + 40)] LOAD 433 (ARG2 + 40)
Symbol PTRSUB 0 Symbol
(ARG2 + 40) CAST (ARG2 + 40)
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 40) [(ARG2 + 40)]
 CALL libcall_basic_string_thunk (ARG1 + 8)
(ARG1 + 40) CAST (ARG1 + 40)
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func ARG3 ARG2 A_Stack[-0x58]:8 A_Stack[-0x50]:8 (RSP + -72) ARG6
 CALL func (RSP + -88) ARG4 ARG4
 CALL func (RSP + -72) ARG5 ARG5
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -72) PTRSUB RSP -72
40 INT_ADD 0 40
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -72)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -72) PTRSUB RSP -72
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -72) PTRSUB RSP -72
[40] LOAD 433 40
40 CAST 40
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func (RSP + -17) ARG1 ARG2 ARG3 ARG4 ARG5
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
40 INT_ADD 0 40
(RSP + -17) PTRSUB RSP -17
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
f() CALL libcall_size_thunk
f() CALL libcall_size_thunk
0 INT_EQUAL f() f()
 CBRANCH (f() INT_EQUAL f())
f() CALL libcall_data_thunk
 RETURN 0 1
1 COPY 1
 RETURN 0 0
0 INT_EQUAL f() 0
f() CALL libcall_size_thunk
0 COPY 0
f() CALL libcall_data_thunk
f() CALL func f() f() f()
 CBRANCH (f() INT_EQUAL 0)
f() CALL func ARG1 ARG2 ARG2
 RETURN 0 0
0 COPY 0
0 INT_XOR f() 1
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
 CBRANCH ([(ARG1 + 40)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(ARG1 + 40)] 0
(ARG1 + 40) CAST (ARG1 + 40)
1 COPY 1
 RETURN 0 0
0 COPY 0
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 RETURN 0 1
0 INT_EQUAL ARG3 0
 CALL func ARG1 (ARG1 + 144) f(ARG1) f() ARG2
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 144) INT_ADD ARG1 144
(ARG1 + 64) INT_ADD ARG1 64
 RETURN 0
 CBRANCH f()
 CBRANCH (ARG3 INT_EQUAL 0)
f() CALL func (ARG1 + 64)
f(ARG1) CALL func (ARG1 + 64)
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
f(ARG1) CALL func (ARG1 + 64)
f() CALL func f() f(ARG1)
f() CALL func (ARG1 + 64)
0 INT_EQUAL f() 0
 CALL func ARG1
(ARG1 + 144) INT_ADD ARG1 144
 CALL func (ARG1 + 144)
 RETURN 0
(ARG1 + 64) INT_ADD ARG1 64
 CALL func (ARG1 + 64) ARG2 1 (ARG1 + 64)
 RETURN 0
(ARG1 + 144) INT_ADD ARG1 144
 RETURN 0 (ARG1 + 144)
(ARG1 + 9) INT_ADD ARG1 9
(ARG1 + 8) INT_ADD ARG1 8
[ARG2] LOAD 433 ARG2
 RETURN 0
 STORE 433 (ARG1 + 8) [ARG2]
 STORE 433 (ARG1 + 9) 1
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 9) CAST (ARG1 + 9)
 CALL func ARG1 ARG2 ARG2
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 8 1
 STORE 433 ARG1 [ARG2]
 CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
[ARG2] LOAD 433 ARG2
0 INT_NOTEQUAL ARG3 0
 RETURN 0
 CBRANCH (ARG3 INT_NOTEQUAL 0)
 CALL func ARG1 ARG2 ARG2
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 64) INT_ADD ARG1 64
f() CALL func (ARG1 + 88) ARG1 ARG3 ARG4 ARG5 ARG6 (RSP + -33)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
-1 BOOL_NEGATE 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
-1 COPY -1
0 COPY 0
0 INT_EQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
(RSP + -33) PTRSUB RSP -33
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
[(f() + 40)] LOAD 433 (f() + 40)
 RETURN 0 -1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(RSP + -33) PTRSUB RSP -33
 CALL func (ARG1 + 64) (RSP + -33) 0 (ARG1 + 64)
(ARG1 + 88) INT_ADD ARG1 88
 CALL func (ARG1 + 88)
 RETURN 0
(ARG1 + 88) INT_ADD ARG1 88
 CALL func (ARG1 + 88) ARG2 (ARG1 + 88)
 RETURN 0
(ARG1 + 88) INT_ADD ARG1 88
 CALL func (ARG1 + 88) ARG1 (ARG1 + 88)
 RETURN 0
 CALL func (ARG1 + 88) ARG1 ARG2 (ARG1 + 88)
(ARG1 + 88) INT_ADD ARG1 88
 RETURN 0
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
ARG1 CAST ARG1
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
(ARG1 + 8) PTRADD ARG1 1 8
(ARG2 + 8) INT_ADD ARG2 8
(ARG2 + 9) INT_ADD ARG2 9
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 RETURN 0
(ARG1 + 9) CAST (ARG1 + 9)
(ARG2 + 8) CAST (ARG2 + 8)
(ARG2 + 9) CAST (ARG2 + 9)
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
[(ARG2 + 9)] LOAD 433 (ARG2 + 9)
(ARG1 + 9) INT_ADD ARG1 9
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 9) [(ARG2 + 9)]
 STORE 433 (ARG1 + 8) [(ARG2 + 8)]
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func ARG3 ARG2 [ARG4] (RSP + -40) ARG6
[ARG4] LOAD 433 ARG4
 CALL func (RSP + -40) ARG5 ARG5
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[ARG4] INT_SEXT [ARG4]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -40) PTRSUB RSP -40
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -40) PTRSUB RSP -40
[40] LOAD 433 40
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func (RSP + -17) ARG1 ARG2 ARG3 ARG4 ARG5
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
(RSP + -17) PTRSUB RSP -17
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 9) INT_ADD ARG1 9
[ARG2] LOAD 433 ARG2
 RETURN 0 f()
[(ARG1 + 9)] LOAD 433 (ARG1 + 9)
(ARG1 + 9) CAST (ARG1 + 9)
 CBRANCH ([(ARG1 + 9)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 9)] 0
 CBRANCH ([(ARG1 + 8)] INT_EQUAL [ARG2])
1 COPY 1
0 COPY 0
 BRANCH VZERO
0 INT_EQUAL [(ARG1 + 8)] [ARG2]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 (ARG1 + 8)
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
 CALL func ARG1 (ARG1 + 88) (RSP + -33) f() ARG2
0 INT_EQUAL ARG3 0
 CBRANCH (ARG3 INT_EQUAL 0)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
f() CALL func (ARG1 + 64)
(RSP + -34) PTRSUB RSP -34
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
1 COPY 1
f() CALL func f() (RSP + -34) f()
 BRANCH VZERO
f() CALL func (ARG1 + 64)
0 COPY 0
f() CALL func (ARG1 + 64)
(RSP + -33) PTRSUB RSP -33
f() CALL func (ARG1 + 64)
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(ARG1 + 88) INT_ADD ARG1 88
 CALL func ARG1
 RETURN 0
 CALL func (ARG1 + 88)
(ARG1 + 64) INT_ADD ARG1 64
 CALL func (ARG1 + 64) ARG2 1 (ARG1 + 64)
 RETURN 0
(ARG1 + 88) INT_ADD ARG1 88
 RETURN 0 (ARG1 + 88)
(ARG1 + 88) INT_ADD ARG1 88
f() CALL func (ARG1 + 88) ARG1 ARG3 ARG4 ARG5 ARG6 (RSP + -33)
(ARG1 + 64) INT_ADD ARG1 64
 CALL func ARG1 ARG2 ARG2
 CBRANCH (f() INT_EQUAL 0)
(RSP + -33) PTRSUB RSP -33
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
-1 BOOL_NEGATE 0
0 INT_EQUAL f() 0
-1 COPY -1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 COPY 0
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -33) PTRSUB RSP -33
 CALL func (ARG1 + 64) (RSP + -33) 0 (ARG1 + 64)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 -1
(ARG1 + 88) INT_ADD ARG1 88
 CALL func (ARG1 + 88)
 RETURN 0
(ARG1 + 88) INT_ADD ARG1 88
 CALL func (ARG1 + 88) ARG2 (ARG1 + 88)
 RETURN 0
 CALL func (ARG1 + 88) ARG1 (ARG1 + 88)
(ARG1 + 88) INT_ADD ARG1 88
 RETURN 0
(ARG1 + 88) INT_ADD ARG1 88
 CALL func (ARG1 + 88) ARG1 ARG2 (ARG1 + 88)
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 (ARG1 + 8)
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
 CALL func ARG1 (ARG1 + 88) (RSP + -33) f() ARG2
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
0 INT_EQUAL ARG3 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH f()
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) CAST (f() + 40)
 CBRANCH (ARG3 INT_EQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
f() CALL func (ARG1 + 64)
f() CALL func (ARG1 + 64)
(RSP + -33) PTRSUB RSP -33
 BRANCH VZERO
f() CALL func (ARG1 + 64)
1 COPY 1
f() CALL func (ARG1 + 64)
(RSP + -34) PTRSUB RSP -34
f() CALL func f() (RSP + -34) f()
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 COPY 0
(ARG1 + 88) INT_ADD ARG1 88
 RETURN 0 (ARG1 + 88)
 STORE 433 ARG1 Symbol
 CALL func ARG1
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func ARG1
 CALL libcall_operator.delete_thunk ARG1
 RETURN 0
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 Symbol
(ARG1 + 88) PTRADD ARG1 11 8
 CALL func ARG1
 RETURN 0
 CALL func (ARG1 + 88)
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
(ARG1 + 32) PTRADD ARG1 32 1
 CALL libcall_~basic_string_thunk ARG1
 CALL func (ARG1 + 32)
 RETURN 0
 CALL func ARG1
 STORE 433 ARG1 Symbol
(ARG1 + 144) PTRADD ARG1 18 8
(ARG1 + 64) PTRADD ARG1 8 8
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func (ARG1 + 144)
 CALL func (ARG1 + 64)
 CALL func ARG1
 CALL libcall_operator.delete_thunk ARG1
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 Symbol
(ARG1 + 88) PTRADD ARG1 11 8
 CALL func ARG1
 CALL func (ARG1 + 88)
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
f() CALL func ARG1 f() f()
f() CALL func ARG2
f() CALL func ARG2
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
 RETURN 0 f()
0 COPY 0
 BRANCH VZERO
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 12) INT_ADD ARG1 12
[ARG2] LOAD 433 ARG2
 CBRANCH ([(ARG1 + 12)] INT_EQUAL 0)
(ARG1 + 12) CAST (ARG1 + 12)
0 INT_EQUAL [(ARG1 + 12)] 0
 RETURN 0 f()
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL [ARG2])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_EQUAL [(ARG1 + 8)] [ARG2]
0 COPY 0
 BRANCH VZERO
1 COPY 1
f() CALL func ARG1 f() f()
f() CALL func ARG2
f() CALL func ARG2
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
 RETURN 0 f()
 BRANCH VZERO
0 COPY 0
f() CALL func ARG1 f() f()
f() CALL func ARG2
f() CALL func ARG2
 RETURN 0 f()
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
 BRANCH VZERO
0 COPY 0
f() CALL func ARG1 f() f()
f() CALL func ARG2
f() CALL func ARG2
 RETURN 0 f()
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
 BRANCH VZERO
0 COPY 0
[ARG1] LOAD 433 ARG1
(ARG1 + ARG2) PTRADD ARG1 ARG2 1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
0 INT_NOTEQUAL ARG2 3
0 INT_NOTEQUAL ARG2 4
0 INT_SLESS ARG2 3
0 INT_NOTEQUAL ARG2 2
ARG2 INT_SEXT ARG2
0 INT_NOTEQUAL ARG2 1
 CBRANCH (ARG2 INT_NOTEQUAL 2)
 CBRANCH (ARG2 INT_NOTEQUAL 4)
0 COPY 0
[((ARG1 + ARG2) + -1)] CAST [((ARG1 + ARG2) + -1)]
0 COPY 0
0 COPY 0
0 COPY 0
0 COPY 0
((ARG1 + ARG2) + -1) PTRADD (ARG1 + ARG2) -1 1
0 INT_SLESS 255 [((ARG1 + ARG2) + -1)]
 CBRANCH (255 INT_SLESS [((ARG1 + ARG2) + -1)])
 RETURN 0 0
 RETURN 0 0
 RETURN 0 0
0 COPY 0
 RETURN 0 0
 RETURN 0 0
 RETURN 0 0
0 COPY 0
 RETURN 0 0
0 COPY 0
 RETURN 0 0
[((ARG1 + ARG2) + -1)] LOAD 433 ((ARG1 + ARG2) + -1)
 RETURN 0 f()
0 COPY 0
 RETURN 0 0
0 COPY 0
 RETURN 0 0
 CBRANCH (191 INT_LESS [(f(ARG1 , ARG2) + -1)])
(f(ARG1 , ARG2) + -1) PTRADD f(ARG1 , ARG2) -1 1
 CBRANCH (255 INT_SLESS [(f(ARG1 , ARG2) + -1)])
0 INT_SLESS 255 [(f(ARG1 , ARG2) + -1)]
[(f(ARG1 , ARG2) + -1)] CAST [(f(ARG1 , ARG2) + -1)]
[(f(ARG1 , ARG2) + -1)] LOAD 433 (f(ARG1 , ARG2) + -1)
 CBRANCH (191 INT_LESS [(f(ARG1 , ARG2) + -1)])
 CBRANCH ([ARG1] INT_EQUAL 237)
0 INT_EQUAL [ARG1] 237
 CBRANCH ([(f(ARG1 , ARG2) + -1)] INT_LESS 144)
[ARG1] CAST [ARG1]
 CBRANCH ([ARG1] INT_SLESS 0)
0 INT_SLESS [ARG1] 0
 CBRANCH (191 INT_LESS [((ARG1 + ARG2) + -1)])
[(f(ARG1 , ARG2) + -1)] LOAD 433 (f(ARG1 , ARG2) + -1)
[(f(ARG1 , ARG2) + -1)] CAST [(f(ARG1 , ARG2) + -1)]
(f(ARG1 , ARG2) + -1) PTRADD f(ARG1 , ARG2) -1 1
0 INT_SLESS 255 [(f(ARG1 , ARG2) + -1)]
 CBRANCH (255 INT_SLESS [(f(ARG1 , ARG2) + -1)])
 CBRANCH ([ARG1] INT_LESS 238)
0 INT_EQUAL [ARG1] 224
 CBRANCH ([ARG1] INT_EQUAL 224)
0 INT_EQUAL [ARG1] 240
 CBRANCH ([ARG1] INT_EQUAL 240)
 CBRANCH (143 INT_LESS [(f(ARG1 , ARG2) + -1)])
 CBRANCH ([ARG1] INT_EQUAL 244)
0 INT_LESS 143 [(f(ARG1 , ARG2) + -1)]
 CBRANCH (255 INT_SLESS [(f(ARG1 , ARG2) + -1)])
0 INT_SLESS 255 [(f(ARG1 , ARG2) + -1)]
[(f(ARG1 , ARG2) + -1)] CAST [(f(ARG1 , ARG2) + -1)]
 CBRANCH (ARG2 INT_SLESS 3)
 CBRANCH (ARG2 INT_NOTEQUAL 1)
0 INT_LESS 159 [(f(ARG1 , ARG2) + -1)]
 CBRANCH (159 INT_LESS [(f(ARG1 , ARG2) + -1)])
0 INT_LESS [ARG1] 238
 CBRANCH (ARG2 INT_NOTEQUAL 3)
 CBRANCH ([(f(ARG1 , ARG2) + -1)] INT_LESS 160)
 CBRANCH ([ARG1] INT_LESS 245)
 BRANCH VZERO
1 COPY 1
0 COPY 0
0 INT_LESS [(f(ARG1 , ARG2) + -1)] 160
 CBRANCH ([ARG1] INT_LESS 194)
 BRANCH VZERO
0 COPY 0
0 INT_LESS [ARG1] 245
0 INT_LESS 191 [(f(ARG1 , ARG2) + -1)]
0 INT_LESS [ARG1] 194
0 INT_LESS [(f(ARG1 , ARG2) + -1)] 144
0 INT_EQUAL [ARG1] 244
0 INT_LESS 191 [((ARG1 + ARG2) + -1)]
0 INT_LESS 191 [(f(ARG1 , ARG2) + -1)]
[ARG1] LOAD 433 ARG1
f() CALL func ARG1 ([([ARG1] + Symbol)] + 1) ([([ARG1] + Symbol)] + 1)
ARG1 CAST ARG1
(ARG2 - ARG1) INT_SUB ARG2 ARG1
[ARG1] INT_SEXT [ARG1]
[([ARG1] + Symbol)] LOAD 433 ([ARG1] + Symbol)
 RETURN 0 f()
[ARG1] CAST [ARG1]
[ARG1] INT_ZEXT [ARG1]
 CBRANCH ((ARG2 - ARG1) INT_SLESS ([([ARG1] + Symbol)] + 1))
([ARG1] + Symbol) PTRADD Symbol [ARG1] 1
0 INT_SLESS (ARG2 - ARG1) ([([ARG1] + Symbol)] + 1)
([([ARG1] + Symbol)] + 1) INT_ADD [([ARG1] + Symbol)] 1
[([ARG1] + Symbol)] CAST [([ARG1] + Symbol)]
([([ARG1] + Symbol)] + 1) INT_SEXT ([([ARG1] + Symbol)] + 1)
[([ARG1] + Symbol)] INT_SEXT [([ARG1] + Symbol)]
Symbol PTRSUB 0 Symbol
 BRANCH VZERO
0 COPY 0
f() CALL func ARG1 ARG2 ARG2
(ARG1 + 2) PTRADD ARG1 2 1
0 INT_EQUAL ARG1 ARG2
[ARG1] LOAD 433 ARG1
(ARG1 + 1) PTRADD ARG1 1 1
0 INT_EQUAL (ARG1 + 2) ARG2
0 INT_EQUAL (ARG1 + 2) ARG2
0 INT_EQUAL (ARG1 + 2) ARG2
0 INT_EQUAL (ARG1 + 1) ARG2
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (239 INT_LESS [ARG1])
 CBRANCH ([(ARG1 + 1)] INT_SLESS 0)
 RETURN 0 f()
0 INT_EQUAL [ARG1] 240
0 INT_SLESS [(ARG1 + 1)] 0
 CBRANCH ([ARG1] INT_EQUAL 240)
[(ARG1 + 1)] CAST [(ARG1 + 1)]
 CBRANCH ([ARG1] INT_LESS 194)
0 INT_LESS 223 [ARG1]
 CBRANCH ((ARG1 + 1) INT_EQUAL ARG2)
 CBRANCH (223 INT_LESS [ARG1])
 CBRANCH ([(ARG1 + 1)] INT_LESS 160)
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
2 COPY 2
1 COPY 1
0 INT_EQUAL [ARG1] 224
[(ARG1 + 1)] LOAD 433 (ARG1 + 1)
 CBRANCH ([ARG1] INT_EQUAL 224)
 BRANCH VZERO
 CBRANCH ([(ARG1 + 1)] INT_LESS 144)
1 COPY 1
 CBRANCH ((ARG1 + 2) INT_EQUAL ARG2)
 BRANCH VZERO
 CBRANCH (236 INT_LESS [ARG1])
 CBRANCH ([ARG1] INT_EQUAL 237)
 CBRANCH ([(ARG1 + 1)] INT_SLESS 0)
[(ARG1 + 1)] CAST [(ARG1 + 1)]
0 INT_SLESS [(ARG1 + 1)] 0
0 INT_EQUAL [ARG1] 237
 CBRANCH ([(ARG1 + 2)] INT_SLESS 0)
 CBRANCH ([(ARG1 + 2)] INT_LESS 192)
 BRANCH VZERO
2 COPY 2
0 INT_LESS [(ARG1 + 2)] 192
 CBRANCH (243 INT_LESS [ARG1])
 CBRANCH ([(ARG1 + 1)] INT_SLESS 0)
[(ARG1 + 1)] CAST [(ARG1 + 1)]
0 INT_SLESS [(ARG1 + 1)] 0
0 INT_EQUAL [ARG1] 244
 CBRANCH ([ARG1] INT_EQUAL 244)
 CBRANCH ([ARG1] INT_LESS 245)
(b1 >= 0x80 && b1 <= 0xC1) || b1 >= 0xF5 COPY (b1 >= 0x80 && b1 <= 0xC1) || b1 >= 0xF5
1 COPY 1
 CALL libcall___assert_fail_thunk (b1 >= 0x80 && b1 <= 0xC1) || b1 >= 0xF5 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTF.c 479 findMaximalSubpartOfIllFormedUTF8Sequence
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTF.c COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTF.c
 RETURN 1
findMaximalSubpartOfIllFormedUTF8Sequence COPY findMaximalSubpartOfIllFormedUTF8Sequence
 CBRANCH ([(ARG1 + 1)] INT_LESS 144)
 BRANCH VZERO
0 INT_LESS 191 [(ARG1 + 1)]
1 COPY 1
 CBRANCH (191 INT_LESS [(ARG1 + 1)])
 CBRANCH (ARG1 INT_EQUAL ARG2)
0 COPY 0
 BRANCH VZERO
0 INT_LESS [ARG1] 194
 CBRANCH ([(ARG1 + 2)] INT_LESS 192)
 BRANCH VZERO
2 COPY 2
 BRANCH VZERO
3 COPY 3
 CBRANCH ([(ARG1 + 1)] INT_LESS 192)
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
2 COPY 2
 CBRANCH (191 INT_LESS [(ARG1 + 1)])
1 COPY 1
2 COPY 2
 BRANCH VZERO
 BRANCH VZERO
 CBRANCH ([(ARG1 + 1)] INT_SLESS 0)
0 INT_LESS [(ARG1 + 1)] 160
 CBRANCH ([ARG1] INT_LESS 241)
0 INT_LESS 243 [ARG1]
!isLegalUTF8Sequence(source, sourceEnd) COPY !isLegalUTF8Sequence(source, sourceEnd)
 CALL libcall___assert_fail_thunk !isLegalUTF8Sequence(source, sourceEnd) /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTF.c 401 findMaximalSubpartOfIllFormedUTF8Sequence
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTF.c COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTF.c
 RETURN 1
findMaximalSubpartOfIllFormedUTF8Sequence COPY findMaximalSubpartOfIllFormedUTF8Sequence
 CBRANCH ([(ARG1 + 1)] INT_LESS 192)
 BRANCH VZERO
1 COPY 1
 CBRANCH ((ARG1 + 2) INT_EQUAL ARG2)
 CBRANCH ([ARG1] INT_LESS 238)
0 INT_LESS 239 [ARG1]
 CBRANCH ([ARG1] INT_LESS 225)
0 INT_LESS 236 [ARG1]
 CBRANCH ([(ARG1 + 1)] INT_LESS 160)
0 INT_LESS 191 [(ARG1 + 1)]
 CBRANCH ([(ARG1 + 1)] INT_LESS 192)
1 COPY 1
2 COPY 2
 BRANCH VZERO
 BRANCH VZERO
 CBRANCH (193 INT_LESS [ARG1])
0 INT_LESS [ARG1] 245
 CBRANCH ((ARG1 + 2) INT_EQUAL ARG2)
2 COPY 2
[(ARG1 + 2)] LOAD 433 (ARG1 + 2)
 CBRANCH ([(ARG1 + 2)] INT_SLESS 0)
0 INT_SLESS [(ARG1 + 2)] 0
[(ARG1 + 2)] CAST [(ARG1 + 2)]
 BRANCH VZERO
 CBRANCH ([(ARG1 + 1)] INT_SLESS 0)
0 INT_LESS [(ARG1 + 1)] 144
0 INT_LESS [(ARG1 + 2)] 192
0 INT_LESS [(ARG1 + 1)] 192
 BRANCH VZERO
1 COPY 1
 CBRANCH ([(ARG1 + 2)] INT_LESS 192)
 BRANCH VZERO
2 COPY 2
 BRANCH VZERO
3 COPY 3
0 INT_LESS [ARG1] 241
0 INT_LESS [(ARG1 + 1)] 144
[(ARG1 + 1)] CAST [(ARG1 + 1)]
0 INT_LESS [ARG1] 238
0 INT_SLESS [(ARG1 + 1)] 0
0 INT_LESS [(ARG1 + 1)] 192
 CBRANCH (255 INT_SLESS [ARG1])
0 INT_LESS 193 [ARG1]
[(ARG1 + 2)] LOAD 433 (ARG1 + 2)
2 COPY 2
[(ARG1 + 2)] CAST [(ARG1 + 2)]
0 INT_SLESS [(ARG1 + 2)] 0
 CBRANCH ([(ARG1 + 2)] INT_SLESS 0)
 BRANCH VZERO
0 INT_LESS [(ARG1 + 1)] 192
3 COPY 3
 BRANCH VZERO
0 INT_LESS [(ARG1 + 1)] 160
0 INT_LESS [ARG1] 225
 BRANCH VZERO
[(ARG1 + 2)] CAST [(ARG1 + 2)]
2 COPY 2
[(ARG1 + 2)] LOAD 433 (ARG1 + 2)
0 INT_SLESS [(ARG1 + 2)] 0
0 INT_LESS [(ARG1 + 2)] 192
0 INT_SLESS [(ARG1 + 1)] 0
0 INT_SLESS 255 [ARG1]
[(ARG1 + 1)] CAST [(ARG1 + 1)]
[ARG1] CAST [ARG1]
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 f(ARG1 , Symbol)
(ARG2 + (~(f(ARG1)) + 1)) PTRADD ARG2 (~(f(ARG1)) + 1) 1
0 INT_LESSEQUAL ARG2 f(ARG1)
[ARG3] LOAD 433 ARG3
 STORE 433 ARG3 f(ARG3)
0 INT_LESSEQUAL ARG4 f(ARG3)
0 INT_EQUAL ARG5 0
0 INT_EQUAL ARG5 0
0 INT_EQUAL ARG5 0
0 INT_NOTEQUAL ARG6 0
[ARG3] COPY [ARG3]
 CBRANCH (ARG2 INT_LESSEQUAL f(ARG1))
0 COPY 0
 RETURN 0 f()
 BRANCH VZERO
f() COPY f()
 CBRANCH (f() INT_EQUAL 0)
(Symbol + ([([f(ARG1)] + Symbol)] * 4)) PTRADD Symbol ([([f(ARG1)] + Symbol)] * 4) 1
(f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) INT_SUB f(ARG1) [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]
3 COPY 3
 CBRANCH (ARG5 INT_EQUAL 0)
Symbol PTRSUB 0 Symbol
f(ARG1) COPY f(ARG1)
[(Symbol + ([([f(ARG1)] + Symbol)] * 4))] LOAD 433 (Symbol + ([([f(ARG1)] + Symbol)] * 4))
(Symbol + ([([f(ARG1)] + Symbol)] * 4)) CAST (Symbol + ([([f(ARG1)] + Symbol)] * 4))
f(ARG1) COPY f(ARG1)
0 INT_LESS (f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) 1114112
[([f(ARG1)] + Symbol)] INT_SEXT [([f(ARG1)] + Symbol)]
[([f(ARG1)] + Symbol)] CAST [([f(ARG1)] + Symbol)]
 CBRANCH ((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) INT_LESS 1114112)
 BRANCHIND [([f(ARG1)] + Symbol)]
f(ARG1) COPY f(ARG1)
[([f(ARG1)] + Symbol)] INT_ZEXT [([f(ARG1)] + Symbol)]
f(ARG1) COPY f(ARG1)
([([f(ARG1)] + Symbol)] * 4) INT_MULT [([f(ARG1)] + Symbol)] 4
f(ARG1) COPY f(ARG1)
f(ARG1) COPY f(ARG1)
[f(ARG1)] INT_SEXT [f(ARG1)]
[([f(ARG1)] + Symbol)] LOAD 433 ([f(ARG1)] + Symbol)
[f(ARG1)] INT_ZEXT [f(ARG1)]
[([f(ARG1)] + Symbol)] INT_ZEXT [([f(ARG1)] + Symbol)]
[([f(ARG1)] + Symbol)] INT_SEXT [([f(ARG1)] + Symbol)]
0 COPY 0
f(ARG1) CAST f(ARG1)
([f(ARG1)] + Symbol) PTRADD Symbol [f(ARG1)] 1
[f(ARG1)] CAST [f(ARG1)]
0 INT_SLESSEQUAL (ARG2 + (~(f(ARG1)) + 1)) [([f(ARG1)] + Symbol)]
[([f(ARG1)] + Symbol)] CAST [([f(ARG1)] + Symbol)]
 CBRANCH ((ARG2 + (~(f(ARG1)) + 1)) INT_SLESSEQUAL [([f(ARG1)] + Symbol)])
[f(ARG1)] LOAD 433 f(ARG1)
(ARG2 + (~(f(ARG1)) + 1)) CAST (ARG2 + (~(f(ARG1)) + 1))
Symbol PTRSUB 0 Symbol
(~(f(ARG1)) + 1) INT_2COMP f(ARG1)
[([f(ARG1)] + Symbol)] CAST [([f(ARG1)] + Symbol)]
 CBRANCH (ARG6 INT_NOTEQUAL 0)
(f(ARG1) + f()) PTRADD f(ARG1) f() 1
3 COPY 3
1 COPY 1
f() INT_ZEXT f()
 STORE 433 f(ARG3) 65533
f() CALL func f(ARG1)
(f(ARG3) + 4) COPY (f(ARG3) + 4)
 BRANCH VZERO
 BRANCH VZERO
(f(ARG3) + 4) PTRADD f(ARG3) 1 4
 STORE 433 f(ARG3) 65533
f() CALL func f(ARG1)
f() INT_ZEXT f()
(f(ARG1) + f()) PTRADD f(ARG1) f() 1
 BRANCH VZERO
(f(ARG3) + 4) COPY (f(ARG3) + 4)
(f(ARG3) + 4) PTRADD f(ARG3) 1 4
(f(ARG3) + 4) COPY (f(ARG3) + 4)
(f(ARG3) + 4) PTRADD f(ARG3) 1 4
0 INT_LESS (f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) 55296
 CBRANCH ((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) INT_LESS 55296)
 STORE 433 f(ARG3) 65533
3 COPY 3
 CBRANCH (57343 INT_LESS (f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]))
 STORE 433 f(ARG3) (f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))])
 BRANCH VZERO
(f(ARG3) + 4) PTRADD f(ARG3) 1 4
(f(ARG3) + 4) COPY (f(ARG3) + 4)
 CBRANCH (ARG5 INT_EQUAL 0)
 CBRANCH (ARG4 INT_LESSEQUAL f(ARG3))
f() CALL func f(ARG1) ([([f(ARG1)] + Symbol)] + 1) ([([f(ARG1)] + Symbol)] + 1)
[([f(ARG1)] + Symbol)] INT_ZEXT [([f(ARG1)] + Symbol)]
0 INT_EQUAL f() 0
([([f(ARG1)] + Symbol)] + 1) INT_ADD [([f(ARG1)] + Symbol)] 1
 BRANCH VZERO
2 COPY 2
0 INT_LESS 57343 (f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))])
 CBRANCH (ARG5 INT_EQUAL 0)
 STORE 433 f(ARG3) 65533
(f(ARG3) + 4) PTRADD f(ARG3) 1 4
 BRANCH VZERO
 BRANCH VZERO
(f(ARG3) + 4) COPY (f(ARG3) + 4)
[([f(ARG1)] + Symbol)] INT_ZEXT [([f(ARG1)] + Symbol)]
(f(ARG1) + ~([([f(ARG1)] + Symbol)])) PTRADD f(ARG1) ~([([f(ARG1)] + Symbol)]) 1
3 COPY 3
~([([f(ARG1)] + Symbol)]) INT_NEGATE [([f(ARG1)] + Symbol)]
(f(ARG1) + 1) COPY (f(ARG1) + 1)
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
[f(ARG1)] INT_ZEXT [f(ARG1)]
[f(ARG1)] LOAD 433 f(ARG1)
(f(ARG1) + 1) COPY (f(ARG1) + 1)
((f(ARG1) + [f(ARG1)]) * 64) INT_MULT (f(ARG1) + [f(ARG1)]) 64
(f(ARG1) + [f(ARG1)]) INT_ADD f(ARG1) [f(ARG1)]
[f(ARG1)] INT_ZEXT [f(ARG1)]
[f(ARG1)] LOAD 433 f(ARG1)
[f(ARG1)] LOAD 433 f(ARG1)
(f(ARG1) + 1) COPY (f(ARG1) + 1)
[f(ARG1)] LOAD 433 f(ARG1)
[f(ARG1)] INT_ZEXT [f(ARG1)]
[f(ARG1)] LOAD 433 f(ARG1)
(f(ARG1) + 1) COPY (f(ARG1) + 1)
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
(f(ARG1) + [f(ARG1)]) INT_ADD f(ARG1) [f(ARG1)]
((f(ARG1) + [f(ARG1)]) * 64) INT_MULT (f(ARG1) + [f(ARG1)]) 64
[f(ARG1)] INT_ZEXT [f(ARG1)]
(f(ARG1) + 1) COPY (f(ARG1) + 1)
(f(ARG1) + [f(ARG1)]) INT_ADD f(ARG1) [f(ARG1)]
([f(ARG1)] * 64) INT_LEFT [f(ARG1)] 6
[f(ARG1)] INT_ZEXT [f(ARG1)]
[f(ARG1)] LOAD 433 f(ARG1)
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
((f(ARG1) + [f(ARG1)]) * 64) INT_MULT (f(ARG1) + [f(ARG1)]) 64
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
(f(ARG1) + 1) COPY (f(ARG1) + 1)
(f(ARG1) + [f(ARG1)]) INT_ADD f(ARG1) [f(ARG1)]
((f(ARG1) + [f(ARG1)]) * 64) INT_MULT (f(ARG1) + [f(ARG1)]) 64
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
[f(ARG1)] INT_ZEXT [f(ARG1)]
(f(ARG1) + [f(ARG1)]) INT_ADD f(ARG1) [f(ARG1)]
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5 0
 RETURN 0
f(ARG1 , Symbol) LOAD 433 ARG1
f(ARG1 , Symbol) LOAD 433 ARG1
 STORE 433 ARG1 (f(ARG1 , Symbol) + ([([[ARG1]] + Symbol)] + 1))
f(ARG1 , Symbol) LOAD 433 ARG1
f(ARG1 , Symbol) LOAD 433 ARG1
f(ARG1 , Symbol) LOAD 433 ARG1
0 INT_EQUAL f(ARG1 , Symbol) ARG2
(ARG2 + (~(f(ARG1 , Symbol)) + 1)) PTRADD ARG2 (~(f(ARG1 , Symbol)) + 1) 1
 BRANCH VZERO
 CBRANCH (f(ARG1 , Symbol) INT_EQUAL ARG2)
 CBRANCH (f() INT_EQUAL 0)
(f(ARG1 , Symbol) + ([([[ARG1]] + Symbol)] + 1)) PTRADD f(ARG1 , Symbol) ([([[ARG1]] + Symbol)] + 1) 1
 RETURN 0 0
1 COPY 1
([([[ARG1]] + Symbol)] + 1) INT_SEXT ([([[ARG1]] + Symbol)] + 1)
 RETURN 0 1
0 COPY 0
[[ARG1]] INT_SEXT [[ARG1]]
[[ARG1]] CAST [[ARG1]]
([([[ARG1]] + Symbol)] + 1) INT_ADD [([[ARG1]] + Symbol)] 1
 CBRANCH ((ARG2 + (~(f(ARG1 , Symbol)) + 1)) INT_SLESS ([([[ARG1]] + Symbol)] + 1))
[([[ARG1]] + Symbol)] LOAD 433 ([[ARG1]] + Symbol)
[[ARG1]] INT_ZEXT [[ARG1]]
0 INT_SLESS (ARG2 + (~(f(ARG1 , Symbol)) + 1)) ([([[ARG1]] + Symbol)] + 1)
[([[ARG1]] + Symbol)] INT_SEXT [([[ARG1]] + Symbol)]
([[ARG1]] + Symbol) PTRADD Symbol [[ARG1]] 1
(~(f(ARG1 , Symbol)) + 1) INT_2COMP f(ARG1 , Symbol)
([([[ARG1]] + Symbol)] + 1) INT_SEXT ([([[ARG1]] + Symbol)] + 1)
(ARG2 + (~(f(ARG1 , Symbol)) + 1)) CAST (ARG2 + (~(f(ARG1 , Symbol)) + 1))
f(ARG1 , Symbol) CAST f(ARG1 , Symbol)
Symbol PTRSUB 0 Symbol
[[ARG1]] LOAD 433 f(ARG1 , Symbol)
[([[ARG1]] + Symbol)] CAST [([[ARG1]] + Symbol)]
f() CALL func f(ARG1 , Symbol) ([([[ARG1]] + Symbol)] + 1) ([([[ARG1]] + Symbol)] + 1)
0 INT_EQUAL f() 0
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 f(ARG1 , Symbol)
0 INT_LESSEQUAL ARG2 f(ARG1)
(ARG2 + (~(f(ARG1)) + 1)) PTRADD ARG2 (~(f(ARG1)) + 1) 1
[ARG3] LOAD 433 ARG3
 STORE 433 ARG3 f(ARG3)
0 INT_LESSEQUAL ARG4 f(ARG3)
0 INT_LESSEQUAL ARG4 (f(ARG3) + 2)
0 INT_EQUAL ARG5 0
0 INT_EQUAL ARG5 0
[ARG3] COPY [ARG3]
0 COPY 0
 RETURN 0 f()
 BRANCH VZERO
 CBRANCH (ARG2 INT_LESSEQUAL f(ARG1))
f() COPY f()
 CBRANCH (ARG4 INT_LESSEQUAL (f(ARG3) + 2))
2 COPY 2
(f(ARG3) + 4) PTRADD f(ARG3) 2 2
 STORE 433 f(ARG3) ((((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) / 2199023254528) + 55296)
(f(ARG3) + 2) PTRADD f(ARG3) 1 2
(((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) / 1024) INT_RIGHT ((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) 10
((((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) / 2199023254528) + 55296) INT_ADD (((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) / 2199023254528) 55296
(1023 & (((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) / 2147483647)) INT_AND (((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) / 2147483647) 1023
 STORE 433 (f(ARG3) + 2) ((1023 & (((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) / 2147483647)) + 56320)
~([([f(ARG1)] + Symbol)]) INT_NEGATE [([f(ARG1)] + Symbol)]
[([f(ARG1)] + Symbol)] INT_ZEXT [([f(ARG1)] + Symbol)]
(f(ARG1) + ~([([f(ARG1)] + Symbol)])) PTRADD f(ARG1) ~([([f(ARG1)] + Symbol)]) 1
(((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) / 2199023254528) SUBPIECE (((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) / 1024) 0
((1023 & (((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) / 2147483647)) + 56320) INT_ADD (1023 & (((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) / 2147483647)) 56320
((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) INT_SUB (f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) 65536
(((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) / 2147483647) SUBPIECE ((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) 0
 BRANCH VZERO
 CBRANCH ((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) INT_LESS 55296)
 STORE 433 f(ARG3) ((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) / 2147483647)
((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) / 2147483647) SUBPIECE (f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) 0
0 INT_LESS 57343 (f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))])
(f(ARG3) + 2) PTRADD f(ARG3) 1 2
(f(ARG3) + 2) COPY (f(ARG3) + 2)
 BRANCH VZERO
 CBRANCH (57343 INT_LESS (f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]))
 CBRANCH (ARG5 INT_EQUAL 0)
 BRANCH VZERO
~([([f(ARG1)] + Symbol)]) INT_NEGATE [([f(ARG1)] + Symbol)]
 BRANCH VZERO
3 COPY 3
[([f(ARG1)] + Symbol)] INT_ZEXT [([f(ARG1)] + Symbol)]
(f(ARG1) + ~([([f(ARG1)] + Symbol)])) PTRADD f(ARG1) ~([([f(ARG1)] + Symbol)]) 1
 STORE 433 f(ARG3) 65533
(f(ARG3) + 2) COPY (f(ARG3) + 2)
(f(ARG3) + 2) PTRADD f(ARG3) 1 2
 CBRANCH (ARG4 INT_LESSEQUAL f(ARG3))
~([([f(ARG1)] + Symbol)]) INT_NEGATE [([f(ARG1)] + Symbol)]
 BRANCH VZERO
2 COPY 2
0 INT_LESS (f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) 65536
(f(ARG1) + ~([([f(ARG1)] + Symbol)])) PTRADD f(ARG1) ~([([f(ARG1)] + Symbol)]) 1
[([f(ARG1)] + Symbol)] INT_ZEXT [([f(ARG1)] + Symbol)]
 CBRANCH ((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) INT_LESS 65536)
Symbol PTRSUB 0 Symbol
[f(ARG1)] INT_ZEXT [f(ARG1)]
 CBRANCH ((ARG2 + (~(f(ARG1)) + 1)) INT_SLESSEQUAL [([f(ARG1)] + Symbol)])
[f(ARG1)] LOAD 433 f(ARG1)
([f(ARG1)] + Symbol) PTRADD Symbol [f(ARG1)] 1
[([f(ARG1)] + Symbol)] CAST [([f(ARG1)] + Symbol)]
(ARG2 + (~(f(ARG1)) + 1)) CAST (ARG2 + (~(f(ARG1)) + 1))
[([f(ARG1)] + Symbol)] CAST [([f(ARG1)] + Symbol)]
[f(ARG1)] INT_SEXT [f(ARG1)]
[([f(ARG1)] + Symbol)] LOAD 433 ([f(ARG1)] + Symbol)
(~(f(ARG1)) + 1) INT_2COMP f(ARG1)
0 COPY 0
[([f(ARG1)] + Symbol)] INT_SEXT [([f(ARG1)] + Symbol)]
[([f(ARG1)] + Symbol)] INT_ZEXT [([f(ARG1)] + Symbol)]
f(ARG1) CAST f(ARG1)
0 INT_SLESSEQUAL (ARG2 + (~(f(ARG1)) + 1)) [([f(ARG1)] + Symbol)]
[f(ARG1)] CAST [f(ARG1)]
 CBRANCH ((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) INT_LESS 1114112)
(f(ARG3) + 2) PTRADD f(ARG3) 1 2
 CBRANCH (ARG5 INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
f(ARG1) COPY f(ARG1)
(Symbol + ([([f(ARG1)] + Symbol)] * 4)) CAST (Symbol + ([([f(ARG1)] + Symbol)] * 4))
[([f(ARG1)] + Symbol)] INT_SEXT [([f(ARG1)] + Symbol)]
[(Symbol + ([([f(ARG1)] + Symbol)] * 4))] LOAD 433 (Symbol + ([([f(ARG1)] + Symbol)] * 4))
(Symbol + ([([f(ARG1)] + Symbol)] * 4)) PTRADD Symbol ([([f(ARG1)] + Symbol)] * 4) 1
(f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) INT_SUB f(ARG1) [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]
[([f(ARG1)] + Symbol)] CAST [([f(ARG1)] + Symbol)]
[([f(ARG1)] + Symbol)] INT_ZEXT [([f(ARG1)] + Symbol)]
f(ARG1) COPY f(ARG1)
 BRANCH VZERO
Symbol PTRSUB 0 Symbol
f(ARG1) COPY f(ARG1)
f(ARG1) COPY f(ARG1)
3 COPY 3
([([f(ARG1)] + Symbol)] * 4) INT_MULT [([f(ARG1)] + Symbol)] 4
 BRANCHIND [([f(ARG1)] + Symbol)]
f(ARG1) COPY f(ARG1)
f(ARG1) COPY f(ARG1)
(f(ARG3) + 2) PTRADD f(ARG3) 1 2
~([([f(ARG1)] + Symbol)]) INT_NEGATE [([f(ARG1)] + Symbol)]
(f(ARG3) + 2) COPY (f(ARG3) + 2)
 STORE 433 f(ARG3) 65533
[([f(ARG1)] + Symbol)] INT_ZEXT [([f(ARG1)] + Symbol)]
 BRANCH VZERO
 BRANCH VZERO
(f(ARG1) + ~([([f(ARG1)] + Symbol)])) PTRADD f(ARG1) ~([([f(ARG1)] + Symbol)]) 1
3 COPY 3
0 INT_LESS (f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) 55296
0 INT_LESS (f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) 1114112
0 INT_EQUAL f() 0
f() CALL func f(ARG1) ([([f(ARG1)] + Symbol)] + 1) ([([f(ARG1)] + Symbol)] + 1)
((f(ARG1) + [f(ARG1)]) * 64) INT_MULT (f(ARG1) + [f(ARG1)]) 64
(f(ARG1) + [f(ARG1)]) INT_ADD f(ARG1) [f(ARG1)]
(f(ARG1) + 1) COPY (f(ARG1) + 1)
([([f(ARG1)] + Symbol)] + 1) INT_ADD [([f(ARG1)] + Symbol)] 1
[f(ARG1)] LOAD 433 f(ARG1)
(f(ARG1) + 1) COPY (f(ARG1) + 1)
[f(ARG1)] INT_ZEXT [f(ARG1)]
[f(ARG1)] LOAD 433 f(ARG1)
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
(f(ARG1) + 1) COPY (f(ARG1) + 1)
[([f(ARG1)] + Symbol)] INT_ZEXT [([f(ARG1)] + Symbol)]
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
[f(ARG1)] LOAD 433 f(ARG1)
(f(ARG1) + 1) COPY (f(ARG1) + 1)
(f(ARG1) + [f(ARG1)]) INT_ADD f(ARG1) [f(ARG1)]
[f(ARG1)] INT_ZEXT [f(ARG1)]
((f(ARG1) + [f(ARG1)]) * 64) INT_MULT (f(ARG1) + [f(ARG1)]) 64
[f(ARG1)] INT_ZEXT [f(ARG1)]
[f(ARG1)] LOAD 433 f(ARG1)
(f(ARG1) + 1) COPY (f(ARG1) + 1)
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
1 COPY 1
[f(ARG1)] INT_ZEXT [f(ARG1)]
[f(ARG1)] LOAD 433 f(ARG1)
(f(ARG1) + [f(ARG1)]) INT_ADD f(ARG1) [f(ARG1)]
([f(ARG1)] * 64) INT_LEFT [f(ARG1)] 6
((f(ARG1) + [f(ARG1)]) * 64) INT_MULT (f(ARG1) + [f(ARG1)]) 64
 BRANCH VZERO
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
(f(ARG1) + 1) COPY (f(ARG1) + 1)
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
(f(ARG1) + [f(ARG1)]) INT_ADD f(ARG1) [f(ARG1)]
((f(ARG1) + [f(ARG1)]) * 64) INT_MULT (f(ARG1) + [f(ARG1)]) 64
[f(ARG1)] INT_ZEXT [f(ARG1)]
[f(ARG1)] LOAD 433 f(ARG1)
(f(ARG1) + [f(ARG1)]) INT_ADD f(ARG1) [f(ARG1)]
[f(ARG1)] INT_ZEXT [f(ARG1)]
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG5 COPY ARG5
 STORE 433 ARG5 f()
ARG5 COPY ARG5
 STORE 433 ARG5 f()
 STORE 433 ARG5 f()
0 INT_EQUAL ARG1 1
0 INT_EQUAL ARG1 2
ARG1 COPY ARG1
0 INT_NOTEQUAL ARG1 1
0 INT_EQUAL ARG1 4
0 INT_NOTEQUAL ARG1 2
0 INT_NOTEQUAL ARG1 4
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG1 INT_NOTEQUAL 1)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 COPY 0
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (f(ARG4 , ARG5) & -256)
 RETURN 1
 CBRANCH (f() INT_EQUAL 0)
 STORE 433 ARG4 [ARG4]
 BRANCH VZERO
 BRANCH VZERO
ARG4 COPY ARG4
ARG4 COPY ARG4
 CBRANCH (f() INT_EQUAL 2)
(result != targetExhausted) && "ConvertUTF8toUTFXX exhausted target buffer" COPY (result != targetExhausted) && "ConvertUTF8toUTFXX exhausted target buffer"
 CALL libcall___assert_fail_thunk (result != targetExhausted) && "ConvertUTF8toUTFXX exhausted target buffer" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp 59 bool llvm::ConvertUTF8toWide(unsigned int, llvm::StringRef, char*&, const UTF8*&)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp
 RETURN 1
(f(ARG4 , ARG5) & -256) INT_AND f(ARG4 , ARG5) -256
bool llvm::ConvertUTF8toWide(unsigned int, llvm::StringRef, char*&, const UTF8*&) COPY bool llvm::ConvertUTF8toWide(unsigned int, llvm::StringRef, char*&, const UTF8*&)
[(f() + 40)] LOAD 433 (f() + 40)
(f(ARG4 , ARG5) & -256) INT_OR (f(ARG4 , ARG5) & -256) 0
(f() + 40) CAST (f() + 40)
0 INT_ZEXT 0
f(ARG4 , ARG5) CAST f(ARG4 , ARG5)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
ARG4 COPY ARG4
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104)
(f(ARG4) + f()) CAST (f(ARG4) + f())
f(ARG4) CAST f(ARG4)
ARG4 COPY ARG4
f() CALL func (RSP + -104)
 BRANCH VZERO
[ARG4] LOAD 433 ARG4
3 COPY 3
f(ARG4) LOAD 433 ARG4
f() CAST f()
 BRANCH VZERO
f() CALL func (RSP + -104)
(RSP + -104) PTRSUB RSP -104
 CALL libcall_memcpy_thunk [ARG4] f() f()
(RSP + -104) PTRSUB RSP -104
(f(ARG4) + f()) INT_ADD f() f(ARG4)
 STORE 433 ARG4 (f(ARG4) + f())
 CBRANCH (ARG1 INT_EQUAL 2)
(RSP + -40) PTRSUB RSP -40
(f() * 4) INT_MULT f() 4
(f() + f()) INT_ADD f() f()
(RSP + -48) PTRSUB RSP -48
 CBRANCH (ARG1 INT_EQUAL 4)
[ARG4] COPY [ARG4]
0 COPY 0
0 INT_EQUAL f() 0
f() CALL func (RSP + -104)
[ARG4] LOAD 433 ARG4
f() CALL func (RSP + -104)
f() CAST f()
f() CAST f()
(RSP + -104) PTRSUB RSP -104
(RSP + -104) PTRSUB RSP -104
f() COPY f()
([ARG4] + (f() * 4)) INT_ADD [ARG4] (f() * 4)
f() CALL func (RSP + -48) (f() + f()) (RSP + -40) ([ARG4] + (f() * 4)) 0
f() CALL func (RSP + -104)
([ARG4] + (f() * 4)) CAST ([ARG4] + (f() * 4))
[ARG4] CAST [ARG4]
0 COPY 0
(RSP + -104) PTRSUB RSP -104
 CBRANCH (ARG1 INT_NOTEQUAL 2)
0 INT_EQUAL f() 2
0 COPY 0
 CBRANCH (ARG1 INT_EQUAL 1)
 CBRANCH (ARG1 INT_NOTEQUAL 4)
 CBRANCH (f() INT_EQUAL 0)
ARG4 COPY ARG4
ARG4 COPY ARG4
 STORE 433 ARG4 [ARG4]
 BRANCH VZERO
 CALL libcall___assert_fail_thunk WideCharWidth == 1 || WideCharWidth == 2 || WideCharWidth == 4 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp 19 bool llvm::ConvertUTF8toWide(unsigned int, llvm::StringRef, char*&, const UTF8*&)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp
bool llvm::ConvertUTF8toWide(unsigned int, llvm::StringRef, char*&, const UTF8*&) COPY bool llvm::ConvertUTF8toWide(unsigned int, llvm::StringRef, char*&, const UTF8*&)
WideCharWidth == 1 || WideCharWidth == 2 || WideCharWidth == 4 COPY WideCharWidth == 1 || WideCharWidth == 2 || WideCharWidth == 4
 RETURN 1
(RSP + -104) PTRSUB RSP -104
[ARG4] COPY [ARG4]
f() COPY f()
f() CAST f()
f() CAST f()
f() CALL func (RSP + -104)
0 INT_EQUAL f() 0
[ARG4] LOAD 433 ARG4
f() CALL func (RSP + -104)
(RSP + -104) PTRSUB RSP -104
0 INT_EQUAL f() 0
(f() + f()) INT_ADD f() f()
f() CAST f()
f() CALL func (RSP + -104)
f() CALL func (RSP + -40) f() f()
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -48) (f() + f()) (RSP + -40) ([ARG4] + (f() * 16)) 0
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
([ARG4] + (f() * 16)) CAST ([ARG4] + (f() * 16))
(RSP + -48) PTRSUB RSP -48
0 COPY 0
f() CALL func (RSP + -104)
(f() * 16) INT_MULT f() 16
f() CALL func (RSP + -104)
(RSP + -104) PTRSUB RSP -104
([ARG4] + (f() * 16)) INT_ADD [ARG4] (f() * 16)
[ARG4] CAST [ARG4]
(RSP + -104) PTRSUB RSP -104
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 f(ARG1)
0 INT_LESSEQUAL ARG2 f(ARG1)
[ARG3] LOAD 433 ARG3
 STORE 433 ARG3 f(ARG3)
0 INT_LESS ARG4 (f(ARG3) + f())
0 INT_EQUAL ARG5 0
 RETURN 0 f()
0 COPY 0
f() COPY f()
 BRANCH VZERO
 CBRANCH (ARG2 INT_LESSEQUAL f(ARG1))
[ARG1] COPY [ARG1]
 CBRANCH (f() INT_NOTEQUAL 3)
f() INT_SEXT f()
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
([(f() + 4638744)] | (f(ARG1) / 2147483647)) INT_OR (f(ARG1) / 2147483647) [(f() + 4638744)]
 STORE 433 (f(ARG3) + -1) ([(f() + 4638744)] | (f(ARG1) / 2147483647))
(f(ARG3) + -1) PTRADD f(ARG3) -1 1
[(f() + 4638744)] LOAD 433 (f() + 4638744)
4638744 PTRSUB 0 4638744
(191 & (f(ARG1) / 2147483647)) INT_AND (f(ARG1) / 2147483647) 191
(191 & (f(ARG1) / 2147483647)) INT_AND (f(ARG1) / 2147483647) 191
(f(ARG3) + -1) PTRADD f(ARG3) -1 1
(f() + 4638744) PTRADD 4638744 f() 1
f() CAST f()
(128 | (191 & (f(ARG1) / 2147483647))) INT_OR (191 & (f(ARG1) / 2147483647)) 128
 CBRANCH (f() INT_NOTEQUAL 4)
(128 | (191 & (f(ARG1) / 2147483647))) INT_OR (191 & (f(ARG1) / 2147483647)) 128
0 INT_NOTEQUAL f() 4
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
f() INT_ZEXT f()
 STORE 433 (f(ARG3) + -1) (128 | (191 & (f(ARG1) / 2147483647)))
 STORE 433 (f(ARG3) + -1) (128 | (191 & (f(ARG1) / 2147483647)))
(f(ARG3) + -1) PTRADD f(ARG3) -1 1
(f(ARG1) / 64) INT_RIGHT f(ARG1) 6
(f(ARG1) / 64) INT_RIGHT f(ARG1) 6
 CBRANCH ([f(ARG1)] INT_LESS 2048)
2 COPY 2
 CBRANCH ([f(ARG1)] INT_LESS 65536)
0 INT_LESS [f(ARG1)] 65536
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 1)
0 INT_LESS [f(ARG1)] 1114112
 BRANCH VZERO
3 COPY 3
 CBRANCH ([f(ARG1)] INT_LESS 1114112)
 CBRANCH (ARG5 INT_EQUAL 0)
 CBRANCH ([f(ARG1)] INT_LESS 128)
(f(ARG3) + f()) PTRADD f(ARG3) f() 1
0 INT_LESS 55295 [f(ARG1)]
f() INT_ZEXT f()
0 INT_LESS [f(ARG1)] 128
 CBRANCH (55295 INT_LESS [f(ARG1)])
 CBRANCH (ARG4 INT_LESS (f(ARG3) + f()))
 CBRANCH (f() INT_EQUAL 2)
0 INT_LESS 2 f()
 CBRANCH (2 INT_LESS f())
[f(ARG1)] LOAD 433 f(ARG1)
(f(ARG1) + 4) PTRADD f(ARG1) 1 4
 CBRANCH ([f(ARG1)] INT_LESS 57344)
0 INT_LESS [f(ARG1)] 57344
 STORE 433 ((f(ARG3) + f()) + -1) (128 | (191 & (f(ARG1) / 2147483647)))
((f(ARG3) + f()) + -1) PTRADD (f(ARG3) + f()) -1 1
(f(ARG1) / 64) INT_RIGHT f(ARG1) 6
(191 & (f(ARG1) / 2147483647)) INT_AND (f(ARG1) / 2147483647) 191
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(128 | (191 & (f(ARG1) / 2147483647))) INT_OR (191 & (f(ARG1) / 2147483647)) 128
1 COPY 1
0 INT_LESS [f(ARG1)] 2048
 BRANCH VZERO
0 INT_NOTEQUAL f() 3
0 INT_EQUAL f() 1
 BRANCH VZERO
3 COPY 3
65533 COPY 65533
 BRANCH VZERO
3 COPY 3
3 COPY 3
4 COPY 4
(f(ARG1) + 4) COPY (f(ARG1) + 4)
((f(ARG3) + f()) + (~(f()) + 1)) PTRADD (f(ARG3) + f()) (~(f()) + 1) 1
(~(f()) + 1) INT_2COMP f()
(f(ARG3) + f()) PTRADD f(ARG3) f() 1
2 COPY 2
f() INT_ZEXT f()
f() INT_ZEXT f()
0 INT_EQUAL f() 2
 BRANCH VZERO
ARG1 COPY ARG1
 STORE 433 ARG2 [ARG2]
[ARG2] LOAD 433 ARG2
(RSP + -40) PTRSUB RSP -40
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func (RSP + -48) (RSP + -56) (RSP + -40) ([ARG2] + 4) 0
[40] LOAD 433 40
0 COPY 0
(RSP + -56) PTRSUB RSP -56
0 INT_EQUAL f() 0
(RSP + -60) PTRSUB RSP -60
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
([ARG2] + 4) INT_ADD [ARG2] 4
 CBRANCH ([(FS_OFFSET + 40)] INT_EQUAL [40])
(RSP + -48) PTRSUB RSP -48
 RETURN 0 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
 RETURN 0 [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
 CALL func ARG1 (ARG1 + 24) ARG2 ARG3
(ARG1 + 24) INT_ADD ARG1 24
 RETURN 0
 CALL func ARG1 (ARG2 * 2) 2 (ARG2 * 2)
(ARG2 * 2) INT_MULT ARG2 2
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 STORE 433 (ARG1 + 8) ARG2
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
(ARG1 + 16) INT_ADD ARG1 16
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
 RETURN 0 [(ARG1 + 16)]
(ARG1 + 16) CAST (ARG1 + 16)
f() CALL func ARG1
f() CALL func ARG1
 RETURN 0 ((f() - f()) / 2)
((f() - f()) / 2) INT_SRIGHT (f() - f()) 1
(f() - f()) INT_SUB f() f()
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
f() CALL func ARG1
f() CALL func ARG1
(f() - f()) INT_SUB f() f()
 RETURN 0 ((f() - f()) / 2)
((f() - f()) / 2) INT_SRIGHT (f() - f()) 1
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
 CALL func ARG1 ((ARG2 * 2) + f()) ((ARG2 * 2) + f())
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1 ((ARG2 * 2) + f()) ((ARG2 * 2) + f())
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1 ARG2 ARG2
(ARG2 * 2) INT_MULT ARG2 2
0 INT_LESS f() ARG2
(ARG2 * 2) INT_MULT ARG2 2
0 INT_LESS ARG2 f()
0 INT_LESS f() ARG2
(ARG2 * 2) INT_MULT ARG2 2
(ARG2 * 2) INT_MULT ARG2 2
 RETURN 0
 CBRANCH (ARG2 INT_LESS f())
 CBRANCH (f() INT_NOTEQUAL 0)
 STORE 433 f() 0
 CBRANCH (f() INT_LESS ARG2)
((ARG2 * 2) + f()) INT_ADD f() (ARG2 * 2)
((ARG2 * 2) + f()) INT_ADD (ARG2 * 2) f()
 CBRANCH (f() INT_NOTEQUAL ((ARG2 * 2) + f()))
0 INT_NOTEQUAL f() ((ARG2 * 2) + f())
 CBRANCH (f() INT_LESS ARG2)
f() CALL func 2 f()
0 INT_NOTEQUAL f() 0
 BRANCH VZERO
(f() + 2) INT_ADD f() 2
f() CAST f()
 CALL func ((ARG2 * 2) + f()) f() f()
((ARG2 * 2) + f()) INT_ADD f() (ARG2 * 2)
((ARG2 * 2) + f()) INT_ADD (ARG2 * 2) f()
 BRANCH VZERO
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1 0
 CALL func ARG1 (f() + 2) (f() + 2)
[ARG2] LOAD 433 ARG2
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() + 2) INT_ADD f() 2
0 INT_LESSEQUAL [(ARG1 + 16)] [(ARG1 + 8)]
 STORE 433 f() [ARG2]
f() CAST f()
 RETURN 0
 CBRANCH ([(ARG1 + 16)] INT_LESSEQUAL [(ARG1 + 8)])
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
 CALL func f() f()
 STORE 433 (ARG1 + 8) [ARG1]
 RETURN 0
f() CALL func ARG1
 CALL func ARG1 (f() + -2) (f() + -2)
(f() + -2) INT_ADD f() -2
 RETURN 0
f() CALL func ARG1
f() CALL func ARG1
(ARG2 * 2) INT_MULT ARG2 2
0 INT_LESSEQUAL f() ARG2
 CBRANCH (f() INT_LESSEQUAL ARG2)
0 COPY 0
idx < size() COPY idx < size()
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 139 0
((ARG2 * 2) + f()) INT_ADD (ARG2 * 2) f()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
 RETURN 0 ((ARG2 * 2) + f())
 RETURN 1
ARG1 COPY ARG1
f() CALL func ARG3 0
 CALL func ARG3 (RSP + -70) (RSP + -70)
 CALL func ARG3 (RSP + -56) (RSP + -56)
 CALL func ARG3 (f() + 1) (f() + 1)
 CALL func ARG3
f() CALL func ARG3
 CALL func ARG3
 CALL func ARG3
 CALL func ARG3 ((f() - f()) / 2) ((f() - f()) / 2)
f() CALL func ARG3
f() CALL func ARG3 0
ARG2 COPY ARG2
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
(f() - f()) INT_SUB f() f()
0 COPY 0
1 COPY 1
((f() - f()) / 2) INT_SRIGHT (f() - f()) 1
(f() - f()) CAST (f() - f())
(RSP + -70) PTRSUB RSP -70
 BRANCH VZERO
0 COPY 0
 CBRANCH (f() INT_EQUAL 2)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
 RETURN 1
0 INT_EQUAL f() 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp
[(f() + 40)] LOAD 433 (f() + 40)
bool llvm::convertUTF8ToUTF16String(llvm::StringRef, llvm::SmallVectorImpl<short unsigned int>&) COPY bool llvm::convertUTF8ToUTF16String(llvm::StringRef, llvm::SmallVectorImpl<short unsigned int>&)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
CR != targetExhausted COPY CR != targetExhausted
(f() + 40) CAST (f() + 40)
 CALL libcall___assert_fail_thunk CR != targetExhausted /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp 158 bool llvm::convertUTF8ToUTF16String(llvm::StringRef, llvm::SmallVectorImpl<short unsigned int>&)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp
bool llvm::convertUTF8ToUTF16String(llvm::StringRef, llvm::SmallVectorImpl<short unsigned int>&) COPY bool llvm::convertUTF8ToUTF16String(llvm::StringRef, llvm::SmallVectorImpl<short unsigned int>&)
DstUTF16.empty() COPY DstUTF16.empty()
0 INT_EQUAL f() 0
 CALL libcall___assert_fail_thunk DstUTF16.empty() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp 135 bool llvm::convertUTF8ToUTF16String(llvm::StringRef, llvm::SmallVectorImpl<short unsigned int>&)
(RSP + -88) PTRSUB RSP -88
 RETURN 1
f() CALL func (RSP + -88)
 CBRANCH (f() INT_EQUAL 0)
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(RSP + -88) PTRSUB RSP -88
f() CALL func (RSP + -88)
1 COPY 1
f() CALL func (RSP + -88)
(RSP + -64) PTRSUB RSP -64
0 INT_EQUAL f() 2
(RSP + -56) PTRSUB RSP -56
((f() * 2) + f()) INT_ADD (f() * 2) f()
(RSP + -88) PTRSUB RSP -88
f() COPY f()
(A_Stack[-0x38]:8 & -65536) INT_AND A_Stack[-0x38]:8 -65536
f() CALL func (RSP + -64) f() (RSP + -56) ((f() * 2) + f()) 0
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -88)
(RSP + -88) PTRSUB RSP -88
(f() * 2) INT_MULT f() 2
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
f() COPY f()
 RETURN 0
VZERO COPY VZERO
 CALL func 1 65535
 RETURN 0
ARG1 CAST ARG1
ARG1 CAST ARG1
ARG1 CAST ARG1
ARG1 CAST ARG1
(ARG1 + 24) PTRADD ARG1 3 8
[ARG1] LOAD 433 ARG1
f(ARG1) CALL func ARG1 ARG2 ARG2
f() CALL func ARG1
ARG1 CAST ARG1
(ARG1 + 24) PTRADD ARG1 3 8
[ARG1] LOAD 433 ARG1
0 INT_EQUAL f(ARG1) ARG2
0 INT_EQUAL f(ARG1) ARG2
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (f(ARG1) INT_EQUAL ARG2)
f() CALL func
(ARG1 + 20) CAST (ARG1 + 20)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
([(ARG1 + 20)] + 4294967295) INT_ADD [(ARG1 + 20)] 4294967295
 BRANCH VZERO
(ARG1 + 24) CAST (ARG1 + 24)
(ARG1 + 20) INT_ADD ARG1 20
1 COPY 1
 STORE 433 (ARG1 + 24) ([(ARG1 + 24)] + 1)
(ARG1 + 24) CAST (ARG1 + 24)
(ARG1 + 20) INT_ADD ARG1 20
 STORE 433 (ARG1 + 20) ([(ARG1 + 20)] + 4294967295)
0 COPY 0
 STORE 433 f(ARG1) f()
([(ARG1 + 24)] + 1) INT_ADD [(ARG1 + 24)] 1
(ARG1 + 20) CAST (ARG1 + 20)
 CBRANCH (f(ARG1) INT_EQUAL ARG2)
[(([ARG1] + ([(ARG1 + 20)] * 8)) + -8)] LOAD 433 (([ARG1] + ([(ARG1 + 20)] * 8)) + -8)
 BRANCH VZERO
(ARG1 + 20) INT_ADD ARG1 20
 RETURN 0 f()
(ARG1 + 20) INT_ADD ARG1 20
(([ARG1] + ([(ARG1 + 20)] * 8)) + -8) PTRADD ([ARG1] + ([(ARG1 + 20)] * 8)) -1 8
 CBRANCH (f(ARG1) INT_NOTEQUAL ([ARG1] + ([(ARG1 + 20)] * 8)))
1 COPY 1
0 INT_NOTEQUAL f(ARG1) ([ARG1] + ([(ARG1 + 20)] * 8))
([(ARG1 + 20)] + 4294967295) INT_ADD [(ARG1 + 20)] 4294967295
 STORE 433 f(ARG1) [(([ARG1] + ([(ARG1 + 20)] * 8)) + -8)]
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
(ARG1 + 20) CAST (ARG1 + 20)
(([ARG1] + ([(ARG1 + 20)] * 8)) + -8) PTRADD ([ARG1] + ([(ARG1 + 20)] * 8)) -1 8
 RETURN 0 1
f() CALL func
(ARG1 + 20) CAST (ARG1 + 20)
 STORE 433 (ARG1 + 20) ([(ARG1 + 20)] + 4294967295)
 STORE 433 (([ARG1] + ([(ARG1 + 20)] * 8)) + -8) f()
0 COPY 0
f(ARG1) LOAD 433 f(ARG1)
 BRANCH VZERO
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
([ARG1] + ([(ARG1 + 20)] * 8)) PTRADD [ARG1] [(ARG1 + 20)] 8
(ARG1 + 20) CAST (ARG1 + 20)
f(ARG1) LOAD 433 f(ARG1)
[(ARG1 + 20)] INT_ZEXT [(ARG1 + 20)]
(ARG1 + 20) INT_ADD ARG1 20
f(ARG1) CAST f(ARG1)
(ARG1 + 24) PTRADD ARG1 3 8
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 CAST ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
ARG2 LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG3
(ARG3 + 16) INT_ADD ARG3 16
(ARG3 + 24) INT_ADD ARG3 24
(ARG3 + 16) INT_ADD ARG3 16
(ARG3 + 20) INT_ADD ARG3 20
(ARG3 + 8) INT_ADD ARG3 8
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
(ARG1 + 16) CAST (ARG1 + 16)
(ARG3 + 24) CAST (ARG3 + 24)
[(ARG3 + 20)] LOAD 433 (ARG3 + 20)
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 20) CAST (ARG1 + 20)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG3 + 20) CAST (ARG3 + 20)
 CALL libcall_memcpy_thunk [(ARG1 + 8)] [(ARG3 + 8)] ([(ARG1 + 16)] * 8)
(ARG3 + 16) CAST (ARG3 + 16)
 RETURN 0
 CALL libcall___assert_fail_thunk CurArray && "Failed to allocate memory?" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp 179 llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(const void**, const llvm::SmallPtrSetImplBase&)
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
 STORE 433 (ARG1 + 16) [(ARG3 + 16)]
[(ARG1 + 8)] CAST [(ARG1 + 8)]
 STORE 433 (ARG1 + 24) [(ARG3 + 24)]
llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(const void**, const llvm::SmallPtrSetImplBase&) COPY llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(const void**, const llvm::SmallPtrSetImplBase&)
CurArray && "Failed to allocate memory?" COPY CurArray && "Failed to allocate memory?"
([(ARG1 + 16)] * 8) INT_MULT [(ARG1 + 16)] 8
(ARG1 + 20) INT_ADD ARG1 20
(ARG3 + 8) CAST (ARG3 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG3 + 16)] LOAD 433 (ARG3 + 16)
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
[(ARG3 + 24)] LOAD 433 (ARG3 + 24)
 STORE 433 (ARG1 + 20) [(ARG3 + 20)]
(ARG1 + 24) CAST (ARG1 + 24)
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
 BRANCH VZERO
0 INT_EQUAL [(ARG1 + 8)] 0
([(ARG3 + 16)] * 8) INT_LEFT [(ARG3 + 16)] 3
 STORE 433 (ARG1 + 8) ARG2
[(ARG3 + 16)] INT_ZEXT [(ARG3 + 16)]
(ARG3 + 16) CAST (ARG3 + 16)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (ARG1 + 8) f()
f() CALL libcall_malloc_thunk ([(ARG3 + 16)] * 8)
[(ARG3 + 16)] LOAD 433 (ARG3 + 16)
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 CAST ARG1
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
ARG2 LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 ARG2
[ARG4] LOAD 433 ARG4
(ARG4 + 8) PTRADD ARG4 1 8
(ARG4 + 24) PTRADD ARG4 3 8
(ARG4 + 8) PTRADD ARG4 1 8
ARG4 CAST ARG4
[ARG4] LOAD 433 ARG4
f() CALL func ARG4
(ARG4 + 16) PTRADD ARG4 2 8
ARG4 CAST ARG4
(ARG4 + 24) PTRADD ARG4 3 8
(ARG4 + 8) PTRADD ARG4 1 8
(ARG4 + 16) PTRADD ARG4 2 8
(ARG4 + 8) PTRADD ARG4 1 8
 STORE 433 (ARG4 + 16) ARG3
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG4 + 8)] LOAD 433 (ARG4 + 8)
(ARG4 + 16) CAST (ARG4 + 16)
[(ARG4 + 16)] LOAD 433 (ARG4 + 16)
 STORE 433 (ARG1 + 24) [(ARG4 + 24)]
(ARG1 + 20) INT_ADD ARG1 20
[(ARG4 + 24)] LOAD 433 (ARG4 + 24)
 CBRANCH ([(ARG4 + 8)] INT_NOTEQUAL [ARG4])
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(ARG1 + 24) CAST (ARG1 + 24)
(ARG4 + 16) CAST (ARG4 + 16)
(ARG4 + 20) INT_ADD ARG4 20
 STORE 433 (ARG1 + 20) [(ARG4 + 20)]
0 INT_NOTEQUAL [(ARG4 + 8)] [ARG4]
(ARG4 + 24) CAST (ARG4 + 24)
(ARG1 + 20) CAST (ARG1 + 20)
[(ARG4 + 20)] LOAD 433 (ARG4 + 20)
(ARG4 + 20) CAST (ARG4 + 20)
 STORE 433 (ARG1 + 16) [(ARG4 + 16)]
(ARG4 + 20) INT_ADD ARG4 20
 STORE 433 (ARG4 + 24) 0
(ARG4 + 20) CAST (ARG4 + 20)
 RETURN 0
llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(const void**, unsigned int, llvm::SmallPtrSetImplBase&&) COPY llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(const void**, unsigned int, llvm::SmallPtrSetImplBase&&)
 STORE 433 (ARG4 + 20) 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
that.CurArray == that.SmallArray COPY that.CurArray == that.SmallArray
 RETURN 1
(ARG4 + 24) CAST (ARG4 + 24)
 CALL libcall___assert_fail_thunk that.CurArray == that.SmallArray /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp 214 llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(const void**, unsigned int, llvm::SmallPtrSetImplBase&&)
[(ARG4 + 8)] LOAD 433 (ARG4 + 8)
 BRANCH VZERO
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CALL libcall_memcpy_thunk [(ARG1 + 8)] [(ARG4 + 8)] ([(ARG1 + 16)] * 8)
 STORE 433 (ARG1 + 8) ARG2
[(ARG4 + 8)] CAST [(ARG4 + 8)]
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
 STORE 433 (ARG1 + 8) [(ARG4 + 8)]
 STORE 433 (ARG4 + 8) [ARG4]
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] CAST [(ARG1 + 8)]
([(ARG1 + 16)] * 8) INT_MULT [(ARG1 + 16)] 8
[(ARG4 + 8)] LOAD 433 (ARG4 + 8)
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
0 INT_EQUAL ARG2 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG2 + 16) PTRADD ARG2 2 8
(ARG2 + 16) PTRADD ARG2 2 8
f() CALL func ARG2
f() CALL func ARG2
(ARG2 + 24) PTRADD ARG2 3 8
ARG2 CAST ARG2
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 16) PTRADD ARG2 2 8
(ARG2 + 16) PTRADD ARG2 2 8
(ARG2 + 16) PTRADD ARG2 2 8
 CBRANCH (ARG2 INT_EQUAL ARG1)
 CBRANCH (f() INT_NOTEQUAL 1)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL libcall_free_thunk [(ARG1 + 8)]
[(ARG1 + 8)] CAST [(ARG1 + 8)]
 CBRANCH (f() INT_EQUAL 0)
[(ARG1 + 8)] CAST [(ARG1 + 8)]
 CALL libcall_free_thunk [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH f()
0 INT_EQUAL f() 0
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
 CBRANCH (f() INT_EQUAL 0)
(ARG2 + 16) CAST (ARG2 + 16)
 CBRANCH ([(ARG1 + 16)] INT_NOTEQUAL [(ARG2 + 16)])
0 INT_NOTEQUAL [(ARG1 + 16)] [(ARG2 + 16)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 0
[(ARG2 + 20)] LOAD 433 (ARG2 + 20)
[(ARG1 + 8)] CAST [(ARG1 + 8)]
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
[(ARG2 + 8)] CAST [(ARG2 + 8)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CALL libcall_memcpy_thunk [(ARG1 + 8)] [(ARG2 + 8)] ([(ARG1 + 16)] * 8)
 STORE 433 (ARG1 + 16) [(ARG2 + 16)]
 STORE 433 (ARG1 + 24) [(ARG2 + 24)]
(ARG1 + 24) CAST (ARG1 + 24)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 16) CAST (ARG1 + 16)
(ARG2 + 24) CAST (ARG2 + 24)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
0 INT_NOTEQUAL f() 1
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
([(ARG1 + 16)] * 8) INT_MULT [(ARG1 + 16)] 8
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 20) CAST (ARG1 + 20)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 BRANCH VZERO
(ARG2 + 16) CAST (ARG2 + 16)
(ARG2 + 20) CAST (ARG2 + 20)
(ARG2 + 16) CAST (ARG2 + 16)
 STORE 433 (ARG1 + 8) [ARG1]
(ARG2 + 20) INT_ADD ARG2 20
 STORE 433 (ARG1 + 20) [(ARG2 + 20)]
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_NOTEQUAL [(ARG2 + 16)])
0 INT_NOTEQUAL [(ARG1 + 16)] [(ARG2 + 16)]
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_realloc_thunk [(ARG1 + 8)] ([(ARG2 + 16)] * 8)
([(ARG2 + 16)] * 8) INT_LEFT [(ARG2 + 16)] 3
(ARG2 + 16) CAST (ARG2 + 16)
(ARG2 + 16) CAST (ARG2 + 16)
f() CALL libcall_malloc_thunk ([(ARG2 + 16)] * 8)
[(ARG2 + 16)] INT_ZEXT [(ARG2 + 16)]
([(ARG2 + 16)] * 8) INT_MULT [(ARG2 + 16)] 8
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
0 INT_EQUAL f() 0
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
[(ARG1 + 8)] CAST [(ARG1 + 8)]
[(ARG2 + 16)] INT_ZEXT [(ARG2 + 16)]
 STORE 433 (ARG1 + 8) f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
 STORE 433 (ARG1 + 8) f()
1 COPY 1
 BRANCH VZERO
 CALL libcall___assert_fail_thunk CurArraySize == RHS.CurArraySize && "Cannot assign sets with different small sizes" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp 226 void llvm::SmallPtrSetImplBase::CopyFrom(const llvm::SmallPtrSetImplBase&)
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
void llvm::SmallPtrSetImplBase::CopyFrom(const llvm::SmallPtrSetImplBase&) COPY void llvm::SmallPtrSetImplBase::CopyFrom(const llvm::SmallPtrSetImplBase&)
CurArraySize == RHS.CurArraySize && "Cannot assign sets with different small sizes" COPY CurArraySize == RHS.CurArraySize && "Cannot assign sets with different small sizes"
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
CurArray && "Failed to allocate memory?" COPY CurArray && "Failed to allocate memory?"
void llvm::SmallPtrSetImplBase::CopyFrom(const llvm::SmallPtrSetImplBase&) COPY void llvm::SmallPtrSetImplBase::CopyFrom(const llvm::SmallPtrSetImplBase&)
 RETURN 1
 CALL libcall___assert_fail_thunk CurArray && "Failed to allocate memory?" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp 244 void llvm::SmallPtrSetImplBase::CopyFrom(const llvm::SmallPtrSetImplBase&)
0 INT_EQUAL f() 0
0 INT_EQUAL [(ARG1 + 8)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL libcall___assert_fail_thunk &RHS != this && "Self-copy should be handled by the caller." /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp 222 void llvm::SmallPtrSetImplBase::CopyFrom(const llvm::SmallPtrSetImplBase&)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
0 INT_NOTEQUAL f() 0
 RETURN 1
&RHS != this && "Self-copy should be handled by the caller." COPY &RHS != this && "Self-copy should be handled by the caller."
void llvm::SmallPtrSetImplBase::CopyFrom(const llvm::SmallPtrSetImplBase&) COPY void llvm::SmallPtrSetImplBase::CopyFrom(const llvm::SmallPtrSetImplBase&)
[ARG1] LOAD 433 ARG1
(ARG1 + 24) PTRADD ARG1 3 8
ARG1 CAST ARG1
(ARG1 + 8) PTRADD ARG1 1 8
0 INT_EQUAL ARG3 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG3 + 8) PTRADD ARG3 1 8
ARG3 CAST ARG3
ARG3 CAST ARG3
(ARG3 + 8) PTRADD ARG3 1 8
(ARG3 + 24) PTRADD ARG3 3 8
(ARG3 + 16) PTRADD ARG3 2 8
(ARG3 + 16) PTRADD ARG3 2 8
f() CALL func ARG3
[ARG3] LOAD 433 ARG3
[ARG3] LOAD 433 ARG3
(ARG3 + 8) PTRADD ARG3 1 8
(ARG3 + 24) PTRADD ARG3 3 8
(ARG3 + 8) PTRADD ARG3 1 8
(ARG3 + 16) PTRADD ARG3 2 8
 STORE 433 (ARG3 + 16) ARG2
 CBRANCH (ARG3 INT_EQUAL ARG1)
 CBRANCH (f() INT_NOTEQUAL 1)
[(ARG1 + 8)] CAST [(ARG1 + 8)]
 CALL libcall_free_thunk [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (ARG1 + 20) [(ARG3 + 20)]
(ARG3 + 20) INT_ADD ARG3 20
(ARG1 + 24) CAST (ARG1 + 24)
(ARG3 + 24) CAST (ARG3 + 24)
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
[(ARG3 + 20)] LOAD 433 (ARG3 + 20)
(ARG1 + 20) CAST (ARG1 + 20)
void llvm::SmallPtrSetImplBase::MoveFrom(unsigned int, llvm::SmallPtrSetImplBase&&) COPY void llvm::SmallPtrSetImplBase::MoveFrom(unsigned int, llvm::SmallPtrSetImplBase&&)
(ARG3 + 20) CAST (ARG3 + 20)
 STORE 433 (ARG1 + 16) [(ARG3 + 16)]
&RHS != this && "Self-move should be handled by the caller." COPY &RHS != this && "Self-move should be handled by the caller."
 CALL libcall___assert_fail_thunk &RHS != this && "Self-move should be handled by the caller." /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp 259 void llvm::SmallPtrSetImplBase::MoveFrom(unsigned int, llvm::SmallPtrSetImplBase&&)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
 RETURN 1
[(ARG3 + 16)] LOAD 433 (ARG3 + 16)
 STORE 433 (ARG1 + 24) [(ARG3 + 24)]
 CBRANCH ([(ARG3 + 8)] INT_NOTEQUAL [ARG3])
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_NOTEQUAL [(ARG3 + 8)] [ARG3]
(ARG1 + 20) INT_ADD ARG1 20
0 INT_NOTEQUAL f() 1
(ARG3 + 16) CAST (ARG3 + 16)
0 INT_EQUAL f() 0
[(ARG3 + 24)] LOAD 433 (ARG3 + 24)
 CBRANCH (f() INT_EQUAL 0)
(ARG3 + 16) CAST (ARG3 + 16)
void llvm::SmallPtrSetImplBase::MoveFrom(unsigned int, llvm::SmallPtrSetImplBase&&) COPY void llvm::SmallPtrSetImplBase::MoveFrom(unsigned int, llvm::SmallPtrSetImplBase&&)
 CALL libcall___assert_fail_thunk RHS.CurArray == RHS.SmallArray /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp 280 void llvm::SmallPtrSetImplBase::MoveFrom(unsigned int, llvm::SmallPtrSetImplBase&&)
RHS.CurArray == RHS.SmallArray COPY RHS.CurArray == RHS.SmallArray
 STORE 433 (ARG3 + 24) 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
(ARG3 + 20) INT_ADD ARG3 20
 STORE 433 (ARG3 + 20) 0
 RETURN 0
(ARG3 + 24) CAST (ARG3 + 24)
 RETURN 1
(ARG3 + 20) CAST (ARG3 + 20)
 STORE 433 (ARG1 + 8) [ARG1]
[(ARG1 + 8)] CAST [(ARG1 + 8)]
(ARG3 + 16) CAST (ARG3 + 16)
 STORE 433 (ARG3 + 8) [ARG3]
[(ARG3 + 16)] INT_ZEXT [(ARG3 + 16)]
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG3 + 8)] CAST [(ARG3 + 8)]
 BRANCH VZERO
([(ARG3 + 16)] * 8) INT_MULT [(ARG3 + 16)] 8
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
 STORE 433 (ARG1 + 8) [(ARG3 + 8)]
[(ARG3 + 16)] LOAD 433 (ARG3 + 16)
 CALL libcall_memcpy_thunk [(ARG1 + 8)] [(ARG3 + 8)] ([(ARG3 + 16)] * 8)
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 [f(ARG2)]
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
 STORE 433 ARG2 [f(RSP)]
f(RSP) CAST f(RSP)
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -20) PTRSUB RSP -20
f(ARG1) CAST f(ARG1)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
40 INT_ADD 0 40
(FS_OFFSET + 40) INT_ADD 0 40
f(RSP) CALL func (RSP + -20)
[f(RSP)] LOAD 433 f(RSP)
[f(ARG1)] LOAD 433 f(ARG1)
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG2) CAST f(ARG2)
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
 STORE 433 ARG1 [f(ARG2)]
f(ARG2) CALL func ARG2
 STORE 433 ARG2 [f(RSP)]
[40] LOAD 433 40
[f(ARG2)] LOAD 433 f(ARG2)
(FS_OFFSET + 40) INT_ADD 0 40
[f(RSP)] LOAD 433 f(RSP)
(RSP + -24) PTRSUB RSP -24
f(ARG1) CAST f(ARG1)
40 CAST 40
[f(ARG1)] LOAD 433 f(ARG1)
f(RSP) CALL func (RSP + -24)
f(ARG2) CAST f(ARG2)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
f(RSP) CAST f(RSP)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
ARG1 CAST ARG1
 CALL libcall_memmove_thunk ARG3 ARG1 (((ARG2 - ARG1) / 8) * 8)
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG3 CAST ARG3
 RETURN 0 (ARG3 + (((ARG2 - ARG1) / 8) * 8))
 CBRANCH (((ARG2 - ARG1) / 8) INT_NOTEQUAL 0)
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) INT_ADD ARG3 (((ARG2 - ARG1) / 8) * 8)
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) CAST (ARG3 + (((ARG2 - ARG1) / 8) * 8))
((ARG2 - ARG1) / 8) INT_SRIGHT (ARG2 - ARG1) 3
0 INT_NOTEQUAL ((ARG2 - ARG1) / 8) 0
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 RETURN 0
 CALL func f() f() f()
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
 STORE 433 ARG1 [f(ARG2)]
 STORE 433 ARG2 [f(RSP)]
f(ARG2) CALL func ARG2
(FS_OFFSET + 40) INT_ADD 0 40
[f(ARG2)] LOAD 433 f(ARG2)
40 CAST 40
f(ARG1) CAST f(ARG1)
[f(ARG1)] LOAD 433 f(ARG1)
[40] LOAD 433 40
f(ARG2) CAST f(ARG2)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
f(RSP) CAST f(RSP)
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f(RSP) CALL func (RSP + -24)
[f(RSP)] LOAD 433 f(RSP)
(RSP + -24) PTRSUB RSP -24
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 CALL func ARG1 ARG2 ARG2
 RETURN 0
ARG1 COPY ARG1
0 INT_NOTEQUAL f(ARG1) ARG2
ARG3 COPY ARG3
f(ARG3) COPY f(ARG3)
 RETURN 0 f(ARG3)
 CBRANCH (f(ARG1) INT_NOTEQUAL ARG2)
 CALL func f(ARG1) f(ARG3) f(ARG3)
(f(ARG3) + 8) INT_ADD f(ARG3) 8
 BRANCH VZERO
(f(ARG1) + 8) INT_ADD f(ARG1) 8
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
ARG1 CAST ARG1
(ARG1 + 8) PTRADD ARG1 1 8
0 INT_EQUAL ARG1 ARG2
[ARG1] LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 24) PTRADD ARG1 3 8
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 24) PTRADD ARG1 3 8
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 CAST ARG1
f() CALL func ARG1
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 24) PTRADD ARG1 3 8
(ARG2 + 16) PTRADD ARG2 2 8
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 16) PTRADD ARG2 2 8
(ARG2 + 8) PTRADD ARG2 1 8
ARG2 CAST ARG2
ARG2 CAST ARG2
f() CALL func ARG2
(ARG2 + 24) PTRADD ARG2 3 8
(ARG2 + 24) PTRADD ARG2 3 8
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
(ARG2 + 16) PTRADD ARG2 2 8
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 16) PTRADD ARG2 2 8
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 1 8
ARG2 CAST ARG2
(ARG2 + 24) PTRADD ARG2 3 8
[ARG2] LOAD 433 ARG2
(ARG2 + 24) PTRADD ARG2 3 8
ARG2 CAST ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 16) PTRADD ARG2 2 8
f() CALL func ARG2
 CBRANCH (ARG1 INT_EQUAL ARG2)
 CBRANCH (f() INT_EQUAL 1)
 CBRANCH (f() INT_EQUAL 1)
0 COPY 0
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
this->isSmall() && RHS.isSmall() COPY this->isSmall() && RHS.isSmall()
0 INT_EQUAL f() 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
 CBRANCH (f() INT_EQUAL 1)
 CALL libcall___assert_fail_thunk this->isSmall() && RHS.isSmall() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp 328 void llvm::SmallPtrSetImplBase::swap(llvm::SmallPtrSetImplBase&)
void llvm::SmallPtrSetImplBase::swap(llvm::SmallPtrSetImplBase&) COPY void llvm::SmallPtrSetImplBase::swap(llvm::SmallPtrSetImplBase&)
 RETURN 1
 CBRANCH ([(ARG1 + 16)] INT_EQUAL [(ARG2 + 16)])
 CALL func [ARG1] ([ARG1] + ([(ARG1 + 16)] * 8)) [ARG2] ([ARG1] + ([(ARG1 + 16)] * 8))
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
([ARG1] + ([(ARG1 + 16)] * 8)) INT_ADD [ARG1] ([(ARG1 + 16)] * 8)
 CALL func (ARG1 + 20) (ARG2 + 20) (ARG2 + 20)
 RETURN 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 RETURN 0
 RETURN 0
 RETURN 0
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 16) CAST (ARG1 + 16)
(ARG2 + 20) INT_ADD ARG2 20
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
void llvm::SmallPtrSetImplBase::swap(llvm::SmallPtrSetImplBase&) COPY void llvm::SmallPtrSetImplBase::swap(llvm::SmallPtrSetImplBase&)
this->CurArraySize == RHS.CurArraySize COPY this->CurArraySize == RHS.CurArraySize
([(ARG1 + 16)] * 8) INT_MULT [(ARG1 + 16)] 8
 CALL libcall___assert_fail_thunk this->CurArraySize == RHS.CurArraySize /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp 329 void llvm::SmallPtrSetImplBase::swap(llvm::SmallPtrSetImplBase&)
 RETURN 0
 RETURN 1
1 COPY 1
 BRANCH VZERO
0 INT_EQUAL f() 1
 CBRANCH f()
0 INT_EQUAL [(ARG1 + 16)] [(ARG2 + 16)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG2 + 16) CAST (ARG2 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
 CBRANCH f()
(ARG1 + 24) CAST (ARG1 + 24)
([(ARG2 + 16)] * 8) INT_MULT [(ARG2 + 16)] 8
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
~(f()) BOOL_NEGATE f()
 STORE 433 (ARG1 + 24) 0
 STORE 433 (ARG2 + 8) [(ARG1 + 8)]
[(ARG2 + 16)] INT_ZEXT [(ARG2 + 16)]
 CALL func [ARG2] ([ARG2] + ([(ARG2 + 16)] * 8)) [ARG1] ([ARG2] + ([(ARG2 + 16)] * 8))
 CBRANCH ~(f())
(ARG1 + 24) CAST (ARG1 + 24)
0 INT_EQUAL f() 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([ARG2] + ([(ARG2 + 16)] * 8)) INT_ADD [ARG2] ([(ARG2 + 16)] * 8)
 CALL func (ARG1 + 20) (ARG2 + 20) (ARG2 + 20)
 STORE 433 (ARG1 + 8) [ARG1]
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
(ARG2 + 16) CAST (ARG2 + 16)
(ARG1 + 20) INT_ADD ARG1 20
 CALL func (ARG1 + 16) (ARG2 + 16) (ARG2 + 16)
(ARG2 + 20) INT_ADD ARG2 20
 STORE 433 (ARG2 + 24) [(ARG1 + 24)]
(ARG2 + 24) CAST (ARG2 + 24)
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
(ARG1 + 20) INT_ADD ARG1 20
0 INT_EQUAL f() 1
 CALL func (ARG1 + 24) (ARG2 + 24) (ARG2 + 24)
 CALL func (ARG1 + 16) (ARG2 + 16) (ARG2 + 16)
(ARG2 + 20) INT_ADD ARG2 20
 CALL func (ARG1 + 20) (ARG2 + 20) (ARG2 + 20)
 CALL func (ARG1 + 8) (ARG2 + 8) (ARG2 + 8)
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 16) CAST (ARG1 + 16)
 CALL func [ARG1] ([ARG1] + ([(ARG1 + 16)] * 8)) [ARG2] ([ARG1] + ([(ARG1 + 16)] * 8))
([ARG1] + ([(ARG1 + 16)] * 8)) INT_ADD [ARG1] ([(ARG1 + 16)] * 8)
 CALL func (ARG2 + 20) (ARG1 + 20) (ARG1 + 20)
(ARG2 + 20) INT_ADD ARG2 20
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 16)] * 8) INT_MULT [(ARG1 + 16)] 8
0 INT_EQUAL f() 1
(ARG2 + 24) CAST (ARG2 + 24)
 STORE 433 (ARG1 + 24) [(ARG2 + 24)]
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
(ARG2 + 24) CAST (ARG2 + 24)
 STORE 433 (ARG2 + 24) 0
 STORE 433 (ARG2 + 8) [ARG2]
 STORE 433 (ARG1 + 8) [(ARG2 + 8)]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CALL func (ARG2 + 16) (ARG1 + 16) (ARG1 + 16)
0 INT_EQUAL ARG2 0
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 0
ARG1 CAST ARG1
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 (ARG1 + 20) ARG3
 RETURN 0
 CBRANCH (ARG2 INT_EQUAL 0)
(ARG1 + 20) CAST (ARG1 + 20)
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG1 + 16) 0
(ARG1 + 12) INT_ADD ARG1 12
 BRANCH VZERO
 STORE 433 (ARG1 + 8) 0
(ARG1 + 12) CAST (ARG1 + 12)
 STORE 433 (ARG1 + 12) 0
(ARG1 + 8) CAST (ARG1 + 8)
 CALL func ARG1 ARG2 1 ARG2
 RETURN 0
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
(RSP + -72) PTRSUB RSP -72
f() CAST f()
(RSP + -72) PTRSUB RSP -72
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() CALL func (RSP + -72)
(f() + 1) INT_ADD f() 1
 RETURN 0 f()
f() CAST f()
(f() + f()) CAST (f() + f())
(RSP + -72) PTRSUB RSP -72
f() CALL func (RSP + -72)
f() CALL func (RSP + -72)
f() CALL func (RSP + -72)
f() CAST f()
(ARG1 + 8) CAST (ARG1 + 8)
(RSP + -72) PTRSUB RSP -72
 CALL libcall_memcpy_thunk f() f() f()
(ARG1 + 8) INT_ADD ARG1 8
 STORE 433 (f() + f()) 0
(f() + f()) INT_ADD f() f()
f() CALL func [(ARG1 + 8)] (f() + 1) (f() + 1)
f() COPY f()
f() CALL libcall_read_thunk A_Stack[-0x74]:4 ARG1 ARG2
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
/proc/cpuinfo COPY /proc/cpuinfo
f() CALL func
0 COPY 0
(RSP + -88) PTRSUB RSP -88
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL func (RSP + -88) (RSP + -116) (RSP + -116)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_NOTEQUAL 0 [(f() + 40)]
 CALL func (RSP + -88) /proc/cpuinfo
(f() + 40) INT_ADD f() 40
(RSP + -88) PTRSUB RSP -88
0 INT_EQUAL f() 0
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
(RSP + -116) PTRSUB RSP -116
 CBRANCH f()
(RSP + -56) PTRSUB RSP -56
4636807 PTRSUB 0 4636807
f() CALL func
(RSP + -104) PTRSUB RSP -104
f() CALL func f() (RSP + -56) f()
f() CALL func f() Unable to open /proc/cpuinfo: 
 CALL libcall_~basic_string_thunk (RSP + -56)
 CALL func f() 4636807
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) (RSP + -104) (RSP + -104)
Unable to open /proc/cpuinfo:  COPY Unable to open /proc/cpuinfo: 
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
(f() / 2147483647) INT_SEXT (f() / 2147483647)
-1 COPY -1
 CBRANCH (VZERO INT_EQUAL 0)
host-detection COPY host-detection
0 INT_EQUAL f() 0
f() CALL func host-detection
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() 0
 BRANCH VZERO
-1 COPY -1
0 INT_EQUAL VZERO 0
f() CALL libcall_close_thunk A_Stack[-0x74]:4
f() COPY f()
f() COPY f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 RETURN 1
[ARG1] LOAD 433 ARG1
 RETURN 0 [[ARG1]]
[[ARG1]] LOAD 433 [ARG1]
[[ARG1]] COPY [[ARG1]]
[ARG1] CAST [ARG1]
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 [f(ARG2)]
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
[f(ARG2)] LOAD 433 f(ARG2)
 RETURN 0
f(ARG2) CAST f(ARG2)
(ARG1 + 8) CAST (ARG1 + 8)
f(ARG3) CAST f(ARG3)
[f(ARG3)] LOAD 433 f(ARG3)
 STORE 433 (ARG1 + 8) [f(ARG3)]
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
(RSP + -56) PTRSUB RSP -56
[40] LOAD 433 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
40 CAST 40
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -56) f(ARG1) f(ARG2) f(ARG1)
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 (ARG1 + 8)
(ARG1 + 4) INT_ADD ARG1 4
 CALL func ARG1 ARG2 ARG2
f(ARG3) CALL func ARG3
 RETURN 0
[f(ARG3)] LOAD 433 f(ARG3)
 STORE 433 (ARG1 + 4) [f(ARG3)]
f(ARG3) CAST f(ARG3)
(ARG1 + 4) CAST (ARG1 + 4)
4 COPY 4
 RETURN 0 4
ARG1 COPY ARG1
ARG2 COPY ARG2
f() CALL func ARG3 (f() + 9) f() (f() + 9)
f(ARG4) CALL func ARG4
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func 8 f()
f() CALL func f()
f() CALL func
(f() + f()) CAST (f() + f())
 RETURN 0 f()
f() COPY f()
(f() + f()) INT_ADD f() f()
f() CAST f()
0 INT_NOTEQUAL f() 0
(f() + 9) INT_ADD f() 9
(RSP + -72) PTRSUB RSP -72
f() CAST f()
f() INT_ZEXT f()
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 STORE 433 (f() + f()) 0
f() CALL func (RSP + -72)
 CALL libcall_memcpy_thunk f() f() f()
f() CAST f()
f() CALL func (RSP + -72)
(RSP + -72) PTRSUB RSP -72
f() INT_ZEXT f()
 CALL func f() f() f(ARG4) f()
f(ARG1) LOAD 433 ARG1
 STORE 433 ARG1 (f(ARG1) + 8)
f(ARG1) LOAD 433 ARG1
f(ARG1) LOAD 433 ARG1
[[ARG1]] LOAD 433 f(ARG1)
 CBRANCH ([[ARG1]] INT_EQUAL 0)
0 INT_EQUAL [[ARG1]] 0
 RETURN 0
 CBRANCH ~(f())
~(f()) BOOL_NEGATE f()
[[ARG1]] LOAD 433 f(ARG1)
1 COPY 1
 BRANCH VZERO
f() CALL func
 CBRANCH ([[ARG1]] INT_EQUAL f())
0 INT_EQUAL [[ARG1]] f()
 BRANCH VZERO
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
0 COPY 0
 STORE 433 ARG1 ARG2
0 INT_NOTEQUAL ARG3 1
 CALL func ARG1
 CBRANCH (ARG3 INT_NOTEQUAL 1)
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 24) PTRADD ARG1 3 8
ARG1 CAST ARG1
f(ARG1) CALL func ARG1 A_Stack[0x8]:8 A_Stack[0x10]:8 A_Stack[0x8]:8
[ARG1] LOAD 433 ARG1
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
f(ARG1) CALL func ARG1 f(ARG1) f(ARG1)
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 CAST ARG1
[([ARG1] + (f(ARG1) * 8))] LOAD 433 ([ARG1] + (f(ARG1) * 8))
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
([ARG1] + (f(ARG1) * 8)) INT_ADD [ARG1] (f(ARG1) * 8)
f(ARG1) INT_ZEXT f(ARG1)
(f(ARG1) * 8) INT_MULT f(ARG1) 8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([([ARG1] + (f(ARG1) * 8))] INT_NOTEQUAL 0)
([ARG1] + (f(ARG1) * 8)) CAST ([ARG1] + (f(ARG1) * 8))
0 INT_NOTEQUAL [([ARG1] + (f(ARG1) * 8))] 0
 CBRANCH f()
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 CBRANCH ([f(ARG1)] INT_EQUAL f())
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG1 + 16) ([(ARG1 + 16)] + 4294967295)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
([(ARG1 + 16)] + 4294967295) INT_ADD [(ARG1 + 16)] 4294967295
0 COPY 0
0 INT_NOTEQUAL [([ARG1] + (f(ARG1) * 8))] f()
 CBRANCH ([([ARG1] + (f(ARG1) * 8))] INT_NOTEQUAL f())
f() CALL func
[([ARG1] + (f(ARG1) * 8))] LOAD 433 ([ARG1] + (f(ARG1) * 8))
 STORE 433 f(ARG1) f()
0 INT_EQUAL [f(ARG1)] f()
f(RSP) CALL func (RSP + 24)
 BRANCH VZERO
[(f() + 40)] LOAD 433 (f() + 40)
(ARG1 + 12) INT_ADD ARG1 12
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 12)] + [(ARG1 + 16)]) CAST ([(ARG1 + 12)] + [(ARG1 + 16)])
(ARG1 + 12) INT_ADD ARG1 12
(RSP + -48) PTRSUB RSP -48
0 COPY 0
 CALL func (RSP + -48) (RSP + -53) (RSP + -53)
(ARG1 + 8) CAST (ARG1 + 8)
f() CALL func
f() CALL func A_Stack[0x8]:8 A_Stack[0x10]:8 (ARG1 + 24) f(RSP)
0 INT_LESS [(ARG1 + 8)] ([(ARG1 + 12)] + [(ARG1 + 16)])
(f() + 40) CAST (f() + 40)
 CBRANCH ([(ARG1 + 8)] INT_LESS ([(ARG1 + 12)] + [(ARG1 + 16)]))
[f(ARG1)] LOAD 433 f(ARG1)
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(f(ARG1) * 8) INT_MULT f(ARG1) 8
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG1 + 12) ([(ARG1 + 12)] + 1)
f(ARG1) INT_ZEXT f(ARG1)
(ARG1 + 12) CAST (ARG1 + 12)
 CALL func (RSP + -48) ([ARG1] + (f(ARG1) * 8)) 0 ([ARG1] + (f(ARG1) * 8))
(ARG1 + 12) CAST (ARG1 + 12)
(ARG1 + 12) INT_ADD ARG1 12
(RSP + -48) PTRSUB RSP -48
(ARG1 + 12) CAST (ARG1 + 12)
([(ARG1 + 12)] + 1) INT_ADD [(ARG1 + 12)] 1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 12)] + [(ARG1 + 16)]) INT_ADD [(ARG1 + 12)] [(ARG1 + 16)]
([ARG1] + (f(ARG1) * 8)) INT_ADD [ARG1] (f(ARG1) * 8)
(RSP + -53) PTRSUB RSP -53
0 INT_NOTEQUAL f() [(f() + 40)]
(RSP + 24) PTRSUB RSP 24
(f() + 40) INT_ADD f() 40
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
1 COPY 1
 BRANCH VZERO
NumItems + NumTombstones <= NumBuckets COPY NumItems + NumTombstones <= NumBuckets
std::pair<llvm::StringMapIterator<ValueTy>, bool> llvm::StringMap<ValueTy, AllocatorTy>::insert(std::pair<llvm::StringRef, ValueTy>) [with ValueTy = bool; AllocatorTy = llvm::MallocAllocator] COPY std::pair<llvm::StringMapIterator<ValueTy>, bool> llvm::StringMap<ValueTy, AllocatorTy>::insert(std::pair<llvm::StringRef, ValueTy>) [with ValueTy = bool; AllocatorTy = llvm::MallocAllocator]
(RSP + -48) PTRSUB RSP -48
1 COPY 1
 CALL func (RSP + -48) (RSP + -53) (RSP + -53)
(RSP + -53) PTRSUB RSP -53
(RSP + -48) PTRSUB RSP -48
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringMap.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringMap.h
(f(ARG1) * 8) INT_MULT f(ARG1) 8
f(ARG1) INT_ZEXT f(ARG1)
 CALL func (RSP + -48) ([ARG1] + (f(ARG1) * 8)) 0 ([ARG1] + (f(ARG1) * 8))
([ARG1] + (f(ARG1) * 8)) INT_ADD [ARG1] (f(ARG1) * 8)
 CALL libcall___assert_fail_thunk NumItems + NumTombstones <= NumBuckets /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringMap.h 330 std::pair<llvm::StringMapIterator<ValueTy>, bool> llvm::StringMap<ValueTy, AllocatorTy>::insert(std::pair<llvm::StringRef, ValueTy>) [with ValueTy = bool; AllocatorTy = llvm::MallocAllocator]
 RETURN 1
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 [f(ARG2)]
(ARG1 + 16) PTRADD ARG1 2 8
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
[(f(ARG2) + 8)] LOAD 433 (f(ARG2) + 8)
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
 STORE 433 (ARG1 + 16) [f(ARG3)]
(ARG1 + 16) CAST (ARG1 + 16)
f(ARG3) CAST f(ARG3)
f(ARG2) CAST f(ARG2)
 STORE 433 (ARG1 + 8) [(f(ARG2) + 8)]
[f(ARG2)] LOAD 433 f(ARG2)
 RETURN 0
[f(ARG3)] LOAD 433 f(ARG3)
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
ARG1 COPY ARG1
 CALL func ARG1 f(ARG2) f(ARG3) f(ARG2)
 RETURN 0 ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
40 INT_ADD 0 40
(RSP + -104) PTRSUB RSP -104
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -56)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -57) PTRSUB RSP -57
(f() + 4) INT_ADD f() 4
0 COPY 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40) (RSP + -104) (RSP + -57) (RSP + -104)
(RSP + -40) PTRSUB RSP -40
[40] LOAD 433 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL func ARG1
40 CAST 40
 RETURN 0 (f() + 4)
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
(RSP + -64) PTRSUB RSP -64
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -20) PTRSUB RSP -20
0 INT_NOTEQUAL 0 [(f() + 40)]
 CBRANCH f()
(RSP + -28) PTRSUB RSP -28
0 COPY 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL func 0 (RSP + -64) (RSP + -28) (RSP + -20) (RSP + -24)
(f() + 40) CAST (f() + 40)
(RSP + -24) PTRSUB RSP -24
0 COPY 0
0 COPY 0
0 INT_EQUAL f() 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f() INT_SLESS 0)
0 COPY 0
 CBRANCH f()
 CBRANCH f()
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH ~(f())
0 COPY 0
0 INT_EQUAL (f() & 65536) 0
 CBRANCH ((f() & 65536) INT_EQUAL 0)
(f() & 65536) INT_AND f() 65536
 CBRANCH ((f() & 256) INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH f()
0 COPY 0
0 INT_NOTEQUAL (f() & 134217728) 0
 CBRANCH ((f() & 134217728) INT_NOTEQUAL 0)
(f() & 134217728) INT_AND f() 134217728
 CBRANCH ((f() & 16) INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH (f() INT_LESS 2147483649)
0 INT_EQUAL f() 1
(RSP + -76) PTRSUB RSP -76
(RSP + -68) PTRSUB RSP -68
 CBRANCH (f() INT_EQUAL 1)
(RSP + -80) PTRSUB RSP -80
(RSP + -72) PTRSUB RSP -72
f() CALL func 2147483649 (RSP + -80) (RSP + -76) (RSP + -72) (RSP + -68)
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH ((f() & 224) INT_NOTEQUAL 224)
(f() & 224) INT_AND f() 224
0 COPY 0
0 INT_NOTEQUAL (f() & 224) 224
4637693 PTRSUB 0 4637693
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) prfchw
(RSP + -56) PTRSUB RSP -56
f() CAST f()
avx512pf COPY avx512pf
f() CAST f()
(RSP + -56) PTRSUB RSP -56
 CBRANCH f()
 STORE 433 f() f()
0 INT_EQUAL f() 0
 CBRANCH f()
0 INT_AND 0 1
0 INT_NOTEQUAL 0 0
 CALL func (RSP + -56) 4637688
 CBRANCH (0 INT_EQUAL 0)
 STORE 433 f() 0
4637802 PTRSUB 0 4637802
 STORE 433 f() f()
(RSP + -56) PTRSUB RSP -56
 STORE 433 f() f()
 STORE 433 f() f()
 CBRANCH f()
1 COPY 1
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
popcnt COPY popcnt
f() CAST f()
4637833 PTRSUB 0 4637833
 CBRANCH f()
f() CAST f()
 CALL func (RSP + -56) ssse3
0 INT_NOTEQUAL 0 0
f() CAST f()
0 INT_AND 0 8192
 STORE 433 f() 0
f() CAST f()
 CALL func (RSP + -56) 4637825
 STORE 433 f() 0
f() CAST f()
 CBRANCH f()
4637688 PTRSUB 0 4637688
(RSP + -68) PTRSUB RSP -68
(RSP + -56) PTRSUB RSP -56
f() CAST f()
4637829 PTRSUB 0 4637829
(RSP + -72) PTRSUB RSP -72
(RSP + -56) PTRSUB RSP -56
 CBRANCH f()
 STORE 433 f() f()
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL 0 0
f() CAST f()
0 INT_AND 0 1073741824
 CALL func (RSP + -56) 4637738
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) 4637838
f() CAST f()
0 INT_EQUAL f() 0
avx512dq COPY avx512dq
 STORE 433 f() f()
 CBRANCH (f() INT_EQUAL 0)
 CALL func (RSP + -56) avx512vl
 STORE 433 f() f()
4637774 PTRSUB 0 4637774
movbe COPY movbe
0 INT_AND 0 134217728
 CALL func (RSP + -56) avx512f
0 INT_EQUAL 0 0
(RSP + -56) PTRSUB RSP -56
4637738 PTRSUB 0 4637738
f() CAST f()
 CALL func 1 (RSP + -80) (RSP + -76) (RSP + -72) (RSP + -68)
 CALL func (RSP + -56) 4637807
(RSP + -76) PTRSUB RSP -76
(RSP + -56) PTRSUB RSP -56
 STORE 433 f() f()
 CALL func (RSP + -56) avx512er
(RSP + -80) PTRSUB RSP -80
(RSP + -76) PTRSUB RSP -76
(RSP + -60) PTRSUB RSP -60
 CALL func (RSP + -56) avx512dq
0 INT_LESS f() 2147483649
4637701 PTRSUB 0 4637701
 STORE 433 f() 0
(RSP + -68) PTRSUB RSP -68
 STORE 433 f() f()
(RSP + -56) PTRSUB RSP -56
 STORE 433 f() f()
(RSP + -72) PTRSUB RSP -72
 CBRANCH f()
f() CAST f()
0 INT_NOTEQUAL 0 0
 CALL func (RSP + -56) sse4.1
lzcnt COPY lzcnt
0 INT_AND 0 Symbol
0 INT_LESS f() 7
 CALL func (RSP + -56) avx512cd
rdseed COPY rdseed
f() CAST f()
(RSP + -56) PTRSUB RSP -56
 STORE 433 f() f()
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL 0 0
0 INT_AND 0 8388608
avx512cd COPY avx512cd
 CALL func (RSP + -56) 4637829
4637756 PTRSUB 0 4637756
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) popcnt
rdrnd COPY rdrnd
 CALL func (RSP + -56) 4637798
 CALL func (RSP + -56) 4637766
f() CAST f()
f() CAST f()
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
4637807 PTRSUB 0 4637807
 CBRANCH f()
0 INT_NOTEQUAL 0 0
f() CAST f()
 CALL func (RSP + -56) rdseed
(RSP + -56) PTRSUB RSP -56
4637697 PTRSUB 0 4637697
 STORE 433 f() 0
f() CAST f()
0 INT_AND 0 32768
 CALL func (RSP + -56) movbe
 CBRANCH (f() INT_LESS 7)
 CALL func 2147483648 (RSP + -60) (RSP + -76) (RSP + -72) (RSP + -68)
f() CAST f()
0 INT_NOTEQUAL 0 0
 CALL func (RSP + -56) 4637693
4637838 PTRSUB 0 4637838
(RSP + -56) PTRSUB RSP -56
 STORE 433 f() 0
f() CAST f()
f() CAST f()
avx512er COPY avx512er
0 INT_AND 0 512
 STORE 433 f() f()
 STORE 433 f() f()
 CBRANCH f()
 CALL func (RSP + -56) 4637756
4637849 PTRSUB 0 4637849
avx512bw COPY avx512bw
(RSP + -56) PTRSUB RSP -56
 STORE 433 f() f()
 CALL func (RSP + -56) lzcnt
fsgsbase COPY fsgsbase
 STORE 433 f() 0
sse4.1 COPY sse4.1
f() CAST f()
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CAST f()
 CALL func (RSP + -56) 4637833
 STORE 433 f() f()
0 INT_EQUAL f() 0
0 INT_NOTEQUAL 0 0
(RSP + -56) PTRSUB RSP -56
0 INT_AND 0 33554432
 STORE 433 f() 0
(RSP + -56) PTRSUB RSP -56
 CBRANCH f()
 STORE 433 f() f()
 CALL func (RSP + -56) avx512bw
f() CAST f()
(RSP + -56) PTRSUB RSP -56
f() CAST f()
prfchw COPY prfchw
 STORE 433 f() f()
0 INT_AND 0 524288
sse4a COPY sse4a
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) 4637697
0 INT_NOTEQUAL 0 0
 CBRANCH f()
f() CAST f()
(RSP + -56) PTRSUB RSP -56
f() CAST f()
f() CAST f()
ssse3 COPY ssse3
 STORE 433 f() f()
4637706 PTRSUB 0 4637706
 STORE 433 f() 0
 CBRANCH f()
0 INT_AND 0 8388608
 CALL func (RSP + -56) 4637770
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL 0 0
 CALL func (RSP + -56) sse4.2
 CALL func (RSP + -56) 4637811
4637811 PTRSUB 0 4637811
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
f() CAST f()
 CBRANCH f()
 CBRANCH (f() INT_EQUAL 0)
 STORE 433 f() f()
 STORE 433 f() 0
0 INT_EQUAL f() 0
f() CAST f()
 CALL func (RSP + -56) 4637849
0 INT_NOTEQUAL 0 0
f() CAST f()
 BRANCH VZERO
 STORE 433 f() 0
 CALL func (RSP + -56) fsgsbase
(RSP + -56) PTRSUB RSP -56
f() CAST f()
(RSP + -56) PTRSUB RSP -56
4637825 PTRSUB 0 4637825
0 INT_AND 0 67108864
 CALL func (RSP + -56) sse4a
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
 CALL func (RSP + -56) rdrnd
0 INT_EQUAL f() 0
 CALL func (RSP + -56) 4637774
(RSP + -56) PTRSUB RSP -56
f() CAST f()
pclmul COPY pclmul
 STORE 433 f() f()
(RSP + -56) PTRSUB RSP -56
 STORE 433 f() 0
f() CAST f()
(RSP + -56) PTRSUB RSP -56
4637798 PTRSUB 0 4637798
 CALL func (RSP + -56) 4637706
0 INT_AND 0 2
0 INT_NOTEQUAL 0 0
 STORE 433 f() f()
 STORE 433 f() f()
 CBRANCH f()
4637770 PTRSUB 0 4637770
(RSP + -56) PTRSUB RSP -56
f() CAST f()
 STORE 433 f() f()
 CALL func (RSP + -56) 4637701
0 INT_NOTEQUAL 0 0
0 INT_AND 0 1048576
 STORE 433 f() 0
 CALL func (RSP + -56) 4637802
f() CAST f()
sse4.2 COPY sse4.2
 CALL func (RSP + -56) avx512pf
(RSP + -56) PTRSUB RSP -56
 CBRANCH f()
f() CAST f()
(RSP + -56) PTRSUB RSP -56
 CBRANCH f()
f() CAST f()
 STORE 433 f() f()
4637766 PTRSUB 0 4637766
 CBRANCH f()
f() CAST f()
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) 4637853
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL 0 0
 CALL func (RSP + -56) pclmul
f() CAST f()
 STORE 433 f() 0
avx512f COPY avx512f
 STORE 433 f() f()
4637853 PTRSUB 0 4637853
 CBRANCH f()
0 INT_AND 0 33554432
avx512vl COPY avx512vl
 CBRANCH f()
0 COPY 0
 BRANCH VZERO
1 COPY 1
0 INT_NOTEQUAL (f() & 262144) 0
 CBRANCH ((f() & 262144) INT_NOTEQUAL 0)
(f() & 262144) INT_AND f() 262144
0 COPY 0
~(f()) BOOL_NEGATE f()
(f() & 2048) INT_AND f() 2048
0 COPY 0
 CBRANCH ((f() & 2048) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (f() & 2048) 0
f() CAST f()
0 INT_SLESS f() 0
0 COPY 0
0 INT_AND 0 268435456
0 INT_EQUAL 0 0
 CBRANCH (0 INT_EQUAL 0)
 CBRANCH ((f() & 131072) INT_NOTEQUAL 0)
 CBRANCH ((f() & 256) INT_NOTEQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH ((f() & 8) INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH ((f() & 1073741824) INT_NOTEQUAL 0)
 CBRANCH ~(f())
0 COPY 0
~(f()) BOOL_NEGATE f()
1 COPY 1
 BRANCH VZERO
(f() & 4096) INT_AND f() 4096
0 COPY 0
0 INT_EQUAL (f() & 4096) 0
 CBRANCH ((f() & 4096) INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
(f() & 65536) INT_AND f() 65536
 CBRANCH ((f() & 65536) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (f() & 65536) 0
0 COPY 0
 CBRANCH f()
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH ((f() & 536870912) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (f() & 536870912) 0
0 COPY 0
(f() & 536870912) INT_AND f() 536870912
1 COPY 1
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
(f() & 2097152) INT_AND f() 2097152
0 COPY 0
 CBRANCH ((f() & 2097152) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (f() & 2097152) 0
0 COPY 0
0 INT_NOTEQUAL (f() & 524288) 0
 CBRANCH ((f() & 524288) INT_NOTEQUAL 0)
(f() & 524288) INT_AND f() 524288
 CBRANCH ((f() & 2048) INT_EQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH ((f() & 67108864) INT_NOTEQUAL 0)
0 INT_EQUAL f() 1
(RSP + -80) PTRSUB RSP -80
 CBRANCH (f() INT_EQUAL 1)
f() CALL func (RSP + -80) (RSP + -68) (RSP + -68)
(RSP + -68) PTRSUB RSP -68
(f() & 1) INT_AND f() 1
 CBRANCH ((f() & 1) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (f() & 1) 0
0 COPY 0
 CBRANCH (0 INT_NOTEQUAL 6)
0 INT_NOTEQUAL 0 6
0 INT_AND 0 6
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 RETURN 1
1 COPY 1
 BRANCH VZERO
(f() & 131072) INT_AND f() 131072
0 INT_NOTEQUAL (f() & 131072) 0
1 COPY 1
 BRANCH VZERO
(f() & 256) INT_AND f() 256
0 INT_NOTEQUAL (f() & 256) 0
0 COPY 0
(f() & 64) INT_AND f() 64
 CBRANCH ((f() & 64) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (f() & 64) 0
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 1)
0 COPY 0
 BRANCH VZERO
1 COPY 1
1 COPY 1
 BRANCH VZERO
 CBRANCH f()
 BRANCH VZERO
1 COPY 1
0 INT_EQUAL (f() & 32) 0
 CBRANCH ((f() & 32) INT_EQUAL 0)
(f() & 32) INT_AND f() 32
 BRANCH VZERO
1 COPY 1
0 COPY 0
(f() & 268435456) INT_AND f() 268435456
 CBRANCH ((f() & 268435456) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (f() & 268435456) 0
 CBRANCH ((f() & 536870912) INT_EQUAL 0)
(f() & 536870912) INT_AND f() 536870912
0 INT_EQUAL (f() & 536870912) 0
0 COPY 0
 BRANCH VZERO
1 COPY 1
(f() & 32) INT_AND f() 32
 CBRANCH ((f() & 32) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (f() & 32) 0
0 COPY 0
 CBRANCH (A_Stack[-0x40]:4 INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
0 INT_NOTEQUAL (f() & 256) 0
(f() & 256) INT_AND f() 256
 CBRANCH f()
 BRANCH VZERO
1 COPY 1
(RSP + -80) PTRSUB RSP -80
0 INT_EQUAL f() 1
(RSP + -68) PTRSUB RSP -68
(RSP + -72) PTRSUB RSP -72
(RSP + -76) PTRSUB RSP -76
f() CALL func 7 0 (RSP + -80) (RSP + -76) (RSP + -72) (RSP + -68)
0 INT_NOTEQUAL (f() & 67108864) 0
(f() & 67108864) INT_AND f() 67108864
 CBRANCH ~(f())
(f() & 2048) INT_AND f() 2048
0 INT_EQUAL (f() & 2048) 0
1 COPY 1
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
0 INT_NOTEQUAL (f() & 16) 0
(f() & 16) INT_AND f() 16
1 COPY 1
 BRANCH VZERO
 BRANCH VZERO
1 COPY 1
 CBRANCH f()
1 COPY 1
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
~(f()) BOOL_NEGATE f()
1 COPY 1
 BRANCH VZERO
(f() & 1073741824) INT_AND f() 1073741824
0 INT_NOTEQUAL (f() & 1073741824) 0
0 INT_NOTEQUAL A_Stack[-0x40]:4 0
(f() & 8) INT_AND f() 8
0 INT_NOTEQUAL (f() & 8) 0
 CALL func (RSP + -72) ARG1 ARG1
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
40 INT_ADD 0 40
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -56) (RSP + -72) 45 (RSP + -72)
 CALL func (RSP + -56) (RSP + -88) 45 (RSP + -88)
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 40
A_Stack[-0x20]:8 COPY A_Stack[-0x20]:8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -88) PTRSUB RSP -88
40 CAST 40
(RSP + -72) PTRSUB RSP -72
A_Stack[-0x28]:8 COPY A_Stack[-0x28]:8
 RETURN 0 (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) COPY (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 CALL func (RSP + -72) ARG1 ARG1
[40] LOAD 433 40
 CALL func (RSP + -56) (RSP + -72) 45 (RSP + -72)
(RSP + -72) PTRSUB RSP -72
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -72) PTRSUB RSP -72
40 CAST 40
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -56) PTRSUB RSP -56
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
(ARG1 + 44) INT_ADD ARG1 44
 RETURN 0 [(ARG1 + 44)]
[(ARG1 + 44)] COPY [(ARG1 + 44)]
(ARG1 + 44) CAST (ARG1 + 44)
[(ARG1 + 44)] LOAD 433 (ARG1 + 44)
f() CALL func ARG1
0 INT_ZEXT 0
0 INT_EQUAL (f() / 2147483647) 13
 RETURN 0 (f() & -256)
(f() & -256) INT_OR (f() & -256) 0
(f() & -256) INT_AND f() -256
(f() / 2147483647) SUBPIECE f() 0
f() CALL func ARG1
(f() & -256) INT_AND f() -256
(f() / 2147483647) SUBPIECE f() 0
(f() & -256) INT_OR (f() & -256) 0
0 INT_EQUAL (f() / 2147483647) 5
 RETURN 0 (f() & -256)
0 INT_ZEXT 0
f() CALL func ARG1
f() CALL func ARG1
 CBRANCH (f() INT_NOTEQUAL 2)
0 INT_NOTEQUAL f() 2
 CBRANCH (f() INT_NOTEQUAL 9)
 RETURN 0 0
0 COPY 0
1 COPY 1
 RETURN 0 1
0 INT_NOTEQUAL f() 9
f() CALL func ARG1
f() CALL func ARG1
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 RETURN 0 0
0 COPY 0
 RETURN 0 1
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(ARG1 + 32) INT_ADD ARG1 32
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
[(ARG1 + 32)] COPY [(ARG1 + 32)]
(ARG1 + 32) CAST (ARG1 + 32)
 RETURN 0 [(ARG1 + 32)]
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 RETURN 0 f()
 BRANCHIND f()
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
2 COPY 2
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
3 COPY 3
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
3 COPY 3
 BRANCH VZERO
2 COPY 2
 BRANCH VZERO
 BRANCH VZERO
0 INT_EQUAL f() 0
2 COPY 2
0 INT_EQUAL f() 0
 CALL func (RSP + -72) ARG1 ARG1
A_Stack[-0x20]:8 COPY A_Stack[-0x20]:8
[40] LOAD 433 40
A_Stack[-0x20]:8 COPY A_Stack[-0x20]:8
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
 CALL func (RSP + -56) (RSP + -88) 45 (RSP + -88)
(RSP + -88) PTRSUB RSP -88
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
A_Stack[-0x28]:8 COPY A_Stack[-0x28]:8
A_Stack[-0x28]:8 COPY A_Stack[-0x28]:8
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) (RSP + -72) 45 (RSP + -72)
 CALL func (RSP + -56) (RSP + -88) 45 (RSP + -88)
(RSP + -56) PTRSUB RSP -56
(RSP + -88) PTRSUB RSP -88
40 INT_ADD 0 40
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) COPY (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 CALL func (RSP + -72) ARG1 ARG1
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
A_Stack[-0x28]:8 COPY A_Stack[-0x28]:8
(RSP + -88) PTRSUB RSP -88
40 CAST 40
A_Stack[-0x28]:8 COPY A_Stack[-0x28]:8
40 INT_ADD 0 40
(RSP + -88) PTRSUB RSP -88
(RSP + -72) PTRSUB RSP -72
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -56) PTRSUB RSP -56
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
 CALL func (RSP + -56) (RSP + -88) 45 (RSP + -88)
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -56) (RSP + -72) 45 (RSP + -72)
 CALL func (RSP + -56) (RSP + -88) 45 (RSP + -88)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) INT_ADD 0 40
A_Stack[-0x20]:8 COPY A_Stack[-0x20]:8
[40] LOAD 433 40
A_Stack[-0x20]:8 COPY A_Stack[-0x20]:8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 RETURN 1
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
f() CALL func ARG1
ARG1 COPY ARG1
f() CALL libcall_memcmp_thunk ARG2 ((f() + -8) + f()) 8
 STORE 433 (ARG1 + 16) ARG3
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH f()
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL [(ARG1 + 16)] 0
 RETURN 0 ARG1
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH (7 INT_LESS f())
0 COPY 0
((f() + -8) + f()) CAST ((f() + -8) + f())
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
((f() + -8) + f()) INT_ADD f() (f() + -8)
(f() + -8) INT_ADD f() -8
(ARG1 + 16) CAST (ARG1 + 16)
 BRANCH VZERO
1 COPY 1
0 INT_LESS 7 f()
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
[ARG2] LOAD 433 ARG2
 RETURN 0 f(ARG1 , ARG2)
f(ARG1 , ARG2) COPY f(ARG1 , ARG2)
(ARG1 + 16) CAST (ARG1 + 16)
[[(ARG1 + 16)]] LOAD 433 [(ARG1 + 16)]
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 BRANCH VZERO
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 ARG2
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 (ARG1 + 8) ARG3
 STORE 433 (ARG1 + 16) 0
 RETURN 0
f(ARG1 , ARG2) CALL func ARG1 ARG2 ARG1
 CALL func (RSP + -40) ARG1 ARG2 ARG1
0 INT_EQUAL 0 [(f() + 40)]
f() CALL func (RSP + -56)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(f() + 40)] LOAD 433 (f() + 40)
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
 CBRANCH (0 INT_EQUAL [(f() + 40)])
0 INT_EQUAL f() 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
 BRANCH VZERO
f(RSP) CALL func f(RSP) kalimba4 (RSP + -68) f(RSP)
kalimba5 COPY kalimba5
(RSP + -72) PTRSUB RSP -72
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
f(Symbol) CALL func (f(ARG1 , ARG2) / 2147483647) (f(ARG1 , ARG2) / 2147483647) (f(ARG1 , ARG2) / 2147483647)
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
16 COPY 16
(RSP + -64) PTRSUB RSP -64
f(RSP) CALL func f(RSP) (RSP + -60) f(RSP)
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
(RSP + -40) PTRSUB RSP -40
0 COPY 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
kalimba4 COPY kalimba4
(RSP + -68) PTRSUB RSP -68
f(RSP) CALL func f(RSP) kalimba5 (RSP + -64) f(RSP)
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
 BRANCHIND f(Symbol)
f(RSP) CALL func (RSP + -40) kalimba3 (RSP + -72)
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
kalimba3 COPY kalimba3
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
14 COPY 14
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
(RSP + -60) PTRSUB RSP -60
(RSP + -40) PTRSUB RSP -40
15 COPY 15
 CALL libcall___stack_chk_fail_thunk
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
 RETURN 0 f(RSP)
 RETURN 1
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
 BRANCH VZERO
 BRANCH VZERO
0 COPY 0
2 COPY 2
1 COPY 1
 BRANCH VZERO
 BRANCH VZERO
4 COPY 4
5 COPY 5
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
7 COPY 7
9 COPY 9
 BRANCH VZERO
 BRANCH VZERO
0 COPY 0
12 COPY 12
 BRANCH VZERO
13 COPY 13
11 COPY 11
8 COPY 8
6 COPY 6
3 COPY 3
10 COPY 10
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 CALL func (RSP + -72) ARG1 ARG1
A_Stack[-0x20]:8 COPY A_Stack[-0x20]:8
[40] LOAD 433 40
A_Stack[-0x28]:8 COPY A_Stack[-0x28]:8
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -88) PTRSUB RSP -88
40 CAST 40
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
40 INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) (RSP + -72) 45 (RSP + -72)
 CALL func (RSP + -56) (RSP + -88) 45 (RSP + -88)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 52) INT_ADD ARG1 52
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
(ARG1 + 52) INT_ADD ARG1 52
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 36) INT_ADD ARG1 36
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 44) INT_ADD ARG1 44
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 52) INT_ADD ARG1 52
 CALL func ARG1 ARG2 ARG2
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
(f() / 2147483647) SUBPIECE f() 0
(ARG1 + 52) CAST (ARG1 + 52)
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) INT_ADD 0 40
[(f() + 40)] LOAD 433 (f() + 40)
(f() / 2147483647) INT_RIGHT f() 64
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 2147483647) INT_RIGHT f() 64
 STORE 433 (ARG1 + 36) f(RSP)
 STORE 433 (ARG1 + 52) f()
 STORE 433 (ARG1 + 44) f()
f(RSP) CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 4611686014132420609) (f() / 2147483647)
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 4611686014132420609) (f() / 2147483647)
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 4611686014132420609) (f() / 2147483647)
(f() / 2147483647) INT_RIGHT f() 64
(f() / 2147483647) INT_RIGHT f() 64
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
(ARG1 + 40) CAST (ARG1 + 40)
(ARG1 + 52) CAST (ARG1 + 52)
(f() / 2147483647) INT_RIGHT f() 64
 CBRANCH ([(ARG1 + 52)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 52)] 0
(f() / 2147483647) INT_RIGHT f() 64
[(ARG1 + 52)] LOAD 433 (ARG1 + 52)
(ARG1 + 44) CAST (ARG1 + 44)
(f() + 40) CAST (f() + 40)
(ARG1 + 32) CAST (ARG1 + 32)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
 STORE 433 (ARG1 + 48) f()
 STORE 433 (ARG1 + 40) f()
 STORE 433 (ARG1 + 32) f()
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 4611686014132420609) (f() / 2147483647)
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 4611686014132420609) (f() / 2147483647)
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 4611686014132420609) (f() / 2147483647)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(ARG1 + 36) CAST (ARG1 + 36)
(ARG1 + 48) CAST (ARG1 + 48)
(f() / 2147483647) SUBPIECE f() 0
 STORE 433 (ARG1 + 52) f()
(ARG1 + 52) CAST (ARG1 + 52)
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL libcall_~basic_string_thunk ARG1
 RETURN 0
 CALL libcall_operator=_thunk ARG1 ARG2
(ARG1 + 36) PTRADD ARG1 36 1
(ARG1 + 48) PTRADD ARG1 48 1
ARG1 COPY ARG1
(ARG1 + 32) PTRADD ARG1 32 1
(ARG1 + 44) PTRADD ARG1 44 1
(ARG1 + 52) PTRADD ARG1 52 1
(ARG1 + 40) PTRADD ARG1 40 1
(ARG2 + 52) PTRADD ARG2 52 1
(ARG2 + 36) PTRADD ARG2 36 1
(ARG2 + 48) PTRADD ARG2 48 1
(ARG2 + 44) PTRADD ARG2 44 1
(ARG2 + 32) PTRADD ARG2 32 1
(ARG2 + 40) PTRADD ARG2 40 1
 STORE 433 (ARG1 + 36) [(ARG2 + 36)]
(ARG2 + 40) CAST (ARG2 + 40)
[(ARG2 + 48)] LOAD 433 (ARG2 + 48)
(ARG1 + 52) CAST (ARG1 + 52)
(ARG1 + 36) CAST (ARG1 + 36)
 STORE 433 (ARG1 + 44) [(ARG2 + 44)]
 STORE 433 (ARG1 + 52) [(ARG2 + 52)]
[(ARG2 + 36)] LOAD 433 (ARG2 + 36)
(ARG2 + 36) CAST (ARG2 + 36)
(ARG2 + 52) CAST (ARG2 + 52)
 STORE 433 (ARG1 + 32) [(ARG2 + 32)]
(ARG1 + 32) CAST (ARG1 + 32)
(ARG1 + 48) CAST (ARG1 + 48)
[(ARG2 + 44)] LOAD 433 (ARG2 + 44)
[(ARG2 + 52)] LOAD 433 (ARG2 + 52)
 STORE 433 (ARG1 + 40) [(ARG2 + 40)]
(ARG2 + 32) CAST (ARG2 + 32)
(ARG2 + 48) CAST (ARG2 + 48)
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
(ARG1 + 44) CAST (ARG1 + 44)
[(ARG2 + 40)] LOAD 433 (ARG2 + 40)
(ARG2 + 44) CAST (ARG2 + 44)
 STORE 433 (ARG1 + 48) [(ARG2 + 48)]
 RETURN 0 ARG1
(ARG1 + 40) CAST (ARG1 + 40)
 CALL func ARG1 (RSP + -72) (RSP + -72)
 CALL func (RSP + -72) ARG2 ARG2
(RSP + -72) PTRSUB RSP -72
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (RSP + -72)
(RSP + -72) PTRSUB RSP -72
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -72) PTRSUB RSP -72
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 CALL func ARG1
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG1 COPY ARG1
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -56)
 CALL func ARG1 f() f() f()
f() CALL func (RSP + -56)
 RETURN 0 ARG1
ARG1 COPY ARG1
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
 CALL func ARG1 (RSP + -152) (RSP + -152)
f() CALL func ARG1
 CALL func (RSP + -120) ARG2 ARG3 ARG2
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -152) 4641648
 CALL func (RSP + -152) 4641648
(f() / 2147483647) INT_RIGHT f() 64
(RSP + -152) PTRSUB RSP -152
40 CAST 40
 CALL func (RSP + -120)
[40] LOAD 433 40
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -152) (RSP + -120) (RSP + -120)
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -120)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(RSP + -120) PTRSUB RSP -120
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -120) A_Stack[-0x98]:8 A_Stack[-0x90]:8 A_Stack[-0x98]:8
 CALL func (RSP + -120) A_Stack[-0x98]:8 A_Stack[-0x90]:8 A_Stack[-0x98]:8
 CALL func (RSP + -120) (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
(f() / 2147483647) INT_RIGHT f() 64
(RSP + -120) PTRSUB RSP -120
(RSP + -120) PTRSUB RSP -120
4641648 PTRSUB 0 4641648
(RSP + -120) PTRSUB RSP -120
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -120) (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -120) PTRSUB RSP -120
(RSP + -120) PTRSUB RSP -120
(f() / 2147483647) SUBPIECE f() 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(RSP + -152) PTRSUB RSP -152
40 INT_ADD 0 40
4641648 PTRSUB 0 4641648
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0
 BRANCHIND ARG1
 RETURN 0 f(Symbol , aarch64 , amdgcn , amdil , amdil64 , armeb , bpfeb , bpfel , hexagon , hsail , hsail64 , kalimba , mips64 , mips64el , mipsel , msp430 , nvptx , nvptx64 , powerpc , powerpc64 , powerpc64le , s390x , shave , sparc , sparcel , sparcv9 , spir64 , thumb , thumbeb , unknown , wasm32 , wasm64 , xcore)
 BRANCH VZERO
 BRANCH VZERO
thumb COPY thumb
kalimba COPY kalimba
mips64 COPY mips64
 BRANCH VZERO
mipsel COPY mipsel
spir64 COPY spir64
 BRANCH VZERO
 BRANCH VZERO
Symbol COPY Symbol
 BRANCH VZERO
s390x COPY s390x
hsail64 COPY hsail64
Symbol COPY Symbol
Symbol COPY Symbol
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
hsail COPY hsail
sparcel COPY sparcel
 BRANCH VZERO
powerpc64 COPY powerpc64
unknown COPY unknown
 BRANCH VZERO
aarch64 COPY aarch64
 BRANCH VZERO
 BRANCH VZERO
0 COPY 0
wasm64 COPY wasm64
 BRANCH VZERO
Symbol COPY Symbol
msp430 COPY msp430
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
wasm32 COPY wasm32
f() CAST f()
f() CALL func Invalid ArchType! /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp 67
 BRANCH VZERO
 BRANCH VZERO
thumbeb COPY thumbeb
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
mips64el COPY mips64el
shave COPY shave
nvptx64 COPY nvptx64
Symbol COPY Symbol
Symbol COPY Symbol
 BRANCH VZERO
 BRANCH VZERO
powerpc COPY powerpc
nvptx COPY nvptx
0 COPY 0
powerpc64le COPY powerpc64le
xcore COPY xcore
amdil64 COPY amdil64
hexagon COPY hexagon
amdil COPY amdil
sparcv9 COPY sparcv9
bpfeb COPY bpfeb
bpfel COPY bpfel
Symbol COPY Symbol
sparc COPY sparc
amdgcn COPY amdgcn
Symbol COPY Symbol
armeb COPY armeb
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
Invalid ArchType! COPY Invalid ArchType!
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 CALL func ARG1 A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
f(Symbol , aarch64 , amdgcn , amdil , amdil64 , armeb , bpfeb , bpfel , hexagon , hsail , hsail64 , kalimba , mips64 , mips64el , mipsel , msp430 , nvptx , nvptx64 , powerpc , powerpc64 , powerpc64le , s390x , shave , sparc , sparcel , sparcv9 , spir64 , thumb , thumbeb , unknown , wasm32 , wasm64 , xcore) CALL func ARG2
(RSP + -40) PTRSUB RSP -40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
40 INT_ADD 0 40
 CALL func (RSP + -40) f(Symbol , aarch64 , amdgcn , amdil , amdil64 , armeb , bpfeb , bpfel , hexagon , hsail , hsail64 , kalimba , mips64 , mips64el , mipsel , msp430 , nvptx , nvptx64 , powerpc , powerpc64 , powerpc64le , s390x , shave , sparc , sparcel , sparcv9 , spir64 , thumb , thumbeb , unknown , wasm32 , wasm64 , xcore) f(Symbol , aarch64 , amdgcn , amdil , amdil64 , armeb , bpfeb , bpfel , hexagon , hsail , hsail64 , kalimba , mips64 , mips64el , mipsel , msp430 , nvptx , nvptx64 , powerpc , powerpc64 , powerpc64le , s390x , shave , sparc , sparcel , sparcv9 , spir64 , thumb , thumbeb , unknown , wasm32 , wasm64 , xcore)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(ARG1 + 52) PTRADD ARG1 52 1
 CALL libcall_basic_string_thunk ARG1
(ARG1 + 36) PTRADD ARG1 36 1
(ARG1 + 48) PTRADD ARG1 48 1
(ARG1 + 44) PTRADD ARG1 44 1
(ARG1 + 32) PTRADD ARG1 32 1
(ARG1 + 40) PTRADD ARG1 40 1
(ARG2 + 40) INT_ADD ARG2 40
(ARG2 + 52) INT_ADD ARG2 52
(ARG2 + 36) INT_ADD ARG2 36
(ARG2 + 48) INT_ADD ARG2 48
(ARG2 + 44) INT_ADD ARG2 44
(ARG2 + 32) INT_ADD ARG2 32
[(ARG2 + 40)] LOAD 433 (ARG2 + 40)
(ARG2 + 44) CAST (ARG2 + 44)
 STORE 433 (ARG1 + 36) [(ARG2 + 36)]
[(ARG2 + 48)] LOAD 433 (ARG2 + 48)
(ARG1 + 40) CAST (ARG1 + 40)
(ARG2 + 40) CAST (ARG2 + 40)
 RETURN 0
[(ARG2 + 36)] LOAD 433 (ARG2 + 36)
 STORE 433 (ARG1 + 44) [(ARG2 + 44)]
(ARG1 + 36) CAST (ARG1 + 36)
(ARG1 + 52) CAST (ARG1 + 52)
(ARG2 + 36) CAST (ARG2 + 36)
(ARG2 + 52) CAST (ARG2 + 52)
 STORE 433 (ARG1 + 52) [(ARG2 + 52)]
[(ARG2 + 44)] LOAD 433 (ARG2 + 44)
(ARG1 + 32) CAST (ARG1 + 32)
(ARG1 + 48) CAST (ARG1 + 48)
 STORE 433 (ARG1 + 32) [(ARG2 + 32)]
 STORE 433 (ARG1 + 40) [(ARG2 + 40)]
(ARG2 + 48) CAST (ARG2 + 48)
(ARG2 + 32) CAST (ARG2 + 32)
[(ARG2 + 52)] LOAD 433 (ARG2 + 52)
 STORE 433 (ARG1 + 48) [(ARG2 + 48)]
(ARG1 + 44) CAST (ARG1 + 44)
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
 CALL func ARG1 36
 CALL func ARG1 30
 CALL func ARG1 8
 CALL func ARG1 34
 CALL func ARG1 28
 CALL func ARG1 25
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 18
 CALL func ARG1 13
 CALL func ARG1 0
 CALL func ARG1 9
 CALL func ARG1 32
 CALL func ARG1 40
ARG1 COPY ARG1
f() CALL func ARG2
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
(f() + 40) INT_ADD f() 40
 BRANCHIND f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
ARG1 COPY ARG1
 RETURN 0 ARG1
 BRANCHIND ARG1
 RETURN 0 f()
 BRANCH VZERO
Invalid architecture value COPY Invalid architecture value
f() CALL func Invalid architecture value /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp 1043
16 COPY 16
32 COPY 32
64 COPY 64
0 COPY 0
 BRANCH VZERO
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp
 BRANCH VZERO
 BRANCH VZERO
f() CALL func ARG1
f() CALL func f()
(f() / 2147483647) SUBPIECE f() 0
(f() & -256) INT_AND f() -256
0 INT_EQUAL (f() / 2147483647) 32
0 INT_ZEXT 0
 RETURN 0 (f() & -256)
(f() & -256) INT_OR (f() & -256) 0
 CALL func ARG1 11
 CALL func ARG1 41
ARG1 COPY ARG1
 CALL func ARG1 37
 CALL func ARG1 14
 CALL func ARG1 35
 CALL func ARG1 26
 CALL func ARG1 33
 CALL func ARG1 29
 CALL func ARG1 10
 CALL func ARG1 31
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 19
 CALL func ARG1 0
f() CALL func ARG2
 BRANCHIND f()
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
ARG1 COPY ARG1
 CALL libcall_basic_string_thunk ARG1
0 COPY 0
 CALL func (RSP + -136)
(RSP + -168) PTRSUB RSP -168
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(RSP + -136) PTRSUB RSP -136
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -184) PTRSUB RSP -184
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CALL func (RSP + -168) (RSP + -72) (RSP + -72)
(RSP + -72) PTRSUB RSP -72
(RSP + -168) PTRSUB RSP -168
f() CALL func (RSP + -136)
0 INT_NOTEQUAL 0 [(f() + 40)]
 CALL func (RSP + -184) 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -136) PTRSUB RSP -136
(f() + 40) INT_ADD f() 40
 CALL libcall_~basic_string_thunk (RSP + -72)
(RSP + -136) PTRSUB RSP -136
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -136)
[(f() + 40)] LOAD 433 (f() + 40)
 CALL func (RSP + -72) A_Stack[-0xb8]:8 A_Stack[-0xb0]:8 A_Stack[-0xb8]:8
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -136) (RSP + -168) (RSP + -168)
(RSP + -136) PTRSUB RSP -136
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func (RSP + -72) (RSP + -136) (RSP + -136)
 CALL func (RSP + -72)
(RSP + -72) PTRSUB RSP -72
(RSP + -136) PTRSUB RSP -136
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -136) (RSP + -72) (RSP + -72)
(RSP + -72) PTRSUB RSP -72
(RSP + -136) PTRSUB RSP -136
 STORE 433 ARG1 f(ARG1)
[ARG1] LOAD 433 ARG1
0 INT_LESSEQUAL ARG2 f(ARG1)
[ARG3] LOAD 433 ARG3
 STORE 433 ARG3 f(ARG3)
0 INT_LESSEQUAL ARG4 f(ARG3)
0 INT_LESSEQUAL ARG4 (f(ARG3) + 2)
0 INT_EQUAL ARG5 0
0 INT_EQUAL ARG5 0
[ARG3] COPY [ARG3]
f() COPY f()
 CBRANCH (ARG2 INT_LESSEQUAL f(ARG1))
0 COPY 0
 BRANCH VZERO
 RETURN 0 f()
[ARG1] COPY [ARG1]
 CBRANCH (ARG4 INT_LESSEQUAL (f(ARG3) + 2))
(f(ARG3) + 4) PTRADD f(ARG3) 2 2
(f(ARG3) + 2) PTRADD f(ARG3) 1 2
(([f(ARG1)] + 65536) / 2199023254528) SUBPIECE (([f(ARG1)] + 65536) / 1024) 0
((1023 & (([f(ARG1)] + 65536) / 2147483647)) + 56320) INT_ADD (1023 & (([f(ARG1)] + 65536) / 2147483647)) 56320
(([f(ARG1)] + 65536) / 2147483647) SUBPIECE ([f(ARG1)] + 65536) 0
(f(ARG1) + 4) COPY (f(ARG1) + 4)
([f(ARG1)] + 65536) INT_SUB [f(ARG1)] 65536
 BRANCH VZERO
2 COPY 2
 STORE 433 f(ARG3) ((([f(ARG1)] + 65536) / 2199023254528) + 55296)
(([f(ARG1)] + 65536) / 1024) INT_RIGHT ([f(ARG1)] + 65536) 10
(1023 & (([f(ARG1)] + 65536) / 2147483647)) INT_AND (([f(ARG1)] + 65536) / 2147483647) 1023
((([f(ARG1)] + 65536) / 2199023254528) + 55296) INT_ADD (([f(ARG1)] + 65536) / 2199023254528) 55296
 STORE 433 (f(ARG3) + 2) ((1023 & (([f(ARG1)] + 65536) / 2147483647)) + 56320)
 CBRANCH ([f(ARG1)] INT_LESS 65536)
0 INT_LESS [f(ARG1)] 55296
0 INT_LESS [f(ARG1)] 1114112
 CBRANCH ([f(ARG1)] INT_LESS 1114112)
 CBRANCH ([f(ARG1)] INT_LESS 55296)
 CBRANCH (ARG5 INT_EQUAL 0)
 STORE 433 f(ARG3) 65533
(f(ARG3) + 2) PTRADD f(ARG3) 1 2
(f(ARG1) + 4) COPY (f(ARG1) + 4)
3 COPY 3
f(ARG3) COPY f(ARG3)
(f(ARG1) + 4) COPY (f(ARG1) + 4)
 BRANCH VZERO
(f(ARG3) + 2) COPY (f(ARG3) + 2)
 BRANCH VZERO
 CBRANCH (ARG4 INT_LESSEQUAL f(ARG3))
 CBRANCH (57343 INT_LESS [f(ARG1)])
(f(ARG3) + 2) PTRADD f(ARG3) 1 2
 CBRANCH (ARG5 INT_EQUAL 0)
(f(ARG1) + 4) COPY (f(ARG1) + 4)
 STORE 433 f(ARG3) ([f(ARG1)] / 2147483647)
(f(ARG3) + 2) COPY (f(ARG3) + 2)
 BRANCH VZERO
([f(ARG1)] / 2147483647) SUBPIECE [f(ARG1)] 0
 STORE 433 f(ARG3) 65533
(f(ARG3) + 2) COPY (f(ARG3) + 2)
 BRANCH VZERO
(f(ARG3) + 2) PTRADD f(ARG3) 1 2
 BRANCH VZERO
3 COPY 3
(f(ARG1) + 4) COPY (f(ARG1) + 4)
(f(ARG3) + 2) PTRADD f(ARG3) 1 2
 BRANCH VZERO
(f(ARG1) + 4) PTRADD f(ARG1) 1 4
0 INT_LESS [f(ARG1)] 65536
2 COPY 2
[f(ARG1)] LOAD 433 f(ARG1)
0 INT_LESS 57343 [f(ARG1)]
 STORE 433 ARG1 f(ARG1)
[ARG1] LOAD 433 ARG1
0 INT_LESSEQUAL ARG2 (f(ARG1) + 2)
0 INT_LESSEQUAL ARG2 f(ARG1)
[ARG3] LOAD 433 ARG3
 STORE 433 ARG3 f(ARG3)
0 INT_LESSEQUAL ARG4 f(ARG3)
0 INT_EQUAL ARG5 0
0 INT_EQUAL ARG5 0
 CBRANCH (ARG2 INT_LESSEQUAL f(ARG1))
 RETURN 0 f()
0 COPY 0
 BRANCH VZERO
f() COPY f()
f(ARG1) COPY f(ARG1)
[ARG3] COPY [ARG3]
0 INT_LESS [f(ARG1)] 55296
[f(ARG1)] LOAD 433 f(ARG1)
(f(ARG1) + 2) PTRADD f(ARG1) 1 2
 CBRANCH ([f(ARG1)] INT_LESS 55296)
[f(ARG1)] INT_ZEXT [f(ARG1)]
 CBRANCH (ARG4 INT_LESSEQUAL f(ARG3))
2 COPY 2
(f(ARG3) + 4) COPY (f(ARG3) + 4)
 STORE 433 f(ARG3) f(ARG1)
(f(ARG3) + 4) PTRADD f(ARG3) 1 4
 BRANCH VZERO
 CBRANCH (57343 INT_LESS [(f(ARG1) + 2)])
(([f(ARG1)] + 55296) * 1024) INT_MULT ([f(ARG1)] + 55296) 1024
([(f(ARG1) + 2)] + (([f(ARG1)] + 55296) * 1024)) INT_ADD [(f(ARG1) + 2)] (([f(ARG1)] + 55296) * 1024)
(([(f(ARG1) + 2)] + (([f(ARG1)] + 55296) * 1024)) + 9216) INT_ADD ([(f(ARG1) + 2)] + (([f(ARG1)] + 55296) * 1024)) 9216
(f(ARG1) + 4) COPY (f(ARG1) + 4)
([f(ARG1)] + 55296) INT_SUB [f(ARG1)] 55296
 BRANCH VZERO
(f(ARG1) + 2) COPY (f(ARG1) + 2)
(f(ARG1) + 4) PTRADD f(ARG1) 2 2
 CBRANCH (ARG5 INT_EQUAL 0)
 CBRANCH ([(f(ARG1) + 2)] INT_LESS 56320)
0 INT_LESS 57343 [(f(ARG1) + 2)]
 CBRANCH (ARG2 INT_LESSEQUAL (f(ARG1) + 2))
 BRANCH VZERO
0 INT_LESS [(f(ARG1) + 2)] 56320
1 COPY 1
[(f(ARG1) + 2)] LOAD 433 (f(ARG1) + 2)
[(f(ARG1) + 2)] INT_ZEXT [(f(ARG1) + 2)]
 CBRANCH (56319 INT_LESS [f(ARG1)])
 CBRANCH (ARG5 INT_EQUAL 0)
(f(ARG1) + 2) COPY (f(ARG1) + 2)
0 INT_LESS 56319 [f(ARG1)]
3 COPY 3
3 COPY 3
0 INT_LESS 56319 [f(ARG1)]
 CBRANCH (56319 INT_LESS [f(ARG1)])
(f(ARG1) + 2) COPY (f(ARG1) + 2)
(f(ARG1) + 2) COPY (f(ARG1) + 2)
 BRANCH VZERO
0 INT_LESS [f(ARG1)] 57344
 CBRANCH ([f(ARG1)] INT_LESS 57344)
 BRANCH VZERO
ARG1 INT_ZEXT ARG1
ARG1 INT_SEXT ARG1
[(Symbol + ARG1)] LOAD 433 (Symbol + ARG1)
 RETURN 0 ([(Symbol + ARG1)] + 1)
[(Symbol + ARG1)] INT_SEXT [(Symbol + ARG1)]
Symbol PTRSUB 0 Symbol
(Symbol + ARG1) PTRADD Symbol ARG1 1
([(Symbol + ARG1)] + 1) INT_ADD [(Symbol + ARG1)] 1
[(Symbol + ARG1)] CAST [(Symbol + ARG1)]
ARG1 CAST ARG1
([(Symbol + ARG1)] + 1) COPY ([(Symbol + ARG1)] + 1)
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5 1
 RETURN 0
 BRANCHIND ARG1
 RETURN 0 f(Symbol , aarch64 , amdgpu , amdil , hexagon , hsail , kalimba , nvptx , shave , sparc , wasm32 , wasm64 , xcore)
 BRANCH VZERO
hexagon COPY hexagon
 BRANCH VZERO
amdgpu COPY amdgpu
Symbol COPY Symbol
 BRANCH VZERO
 BRANCH VZERO
wasm64 COPY wasm64
nvptx COPY nvptx
 BRANCH VZERO
 BRANCH VZERO
Symbol COPY Symbol
 BRANCH VZERO
nvptx COPY nvptx
wasm32 COPY wasm32
 BRANCH VZERO
Symbol COPY Symbol
shave COPY shave
 BRANCH VZERO
xcore COPY xcore
 BRANCH VZERO
Symbol COPY Symbol
 BRANCH VZERO
Symbol COPY Symbol
kalimba COPY kalimba
 BRANCH VZERO
 BRANCH VZERO
Symbol COPY Symbol
 BRANCH VZERO
Symbol COPY Symbol
0 COPY 0
 BRANCH VZERO
hsail COPY hsail
 BRANCH VZERO
sparc COPY sparc
 BRANCH VZERO
amdil COPY amdil
Symbol COPY Symbol
 BRANCH VZERO
 BRANCH VZERO
aarch64 COPY aarch64
Symbol COPY Symbol
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCHIND ARG1
 RETURN 0 f(Symbol , apple , nvidia , unknown)
Symbol COPY Symbol
 BRANCH VZERO
Symbol COPY Symbol
 BRANCH VZERO
 BRANCH VZERO
Symbol COPY Symbol
Symbol COPY Symbol
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp
nvidia COPY nvidia
 BRANCH VZERO
 BRANCH VZERO
Invalid VendorType! COPY Invalid VendorType!
f() CAST f()
f() CALL func Invalid VendorType! /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp 149
apple COPY apple
 BRANCH VZERO
Symbol COPY Symbol
unknown COPY unknown
 BRANCH VZERO
Symbol COPY Symbol
Symbol COPY Symbol
Symbol COPY Symbol
Symbol COPY Symbol
 BRANCH VZERO
 BRANCH VZERO
 BRANCHIND ARG1
 RETURN 0 f(Symbol , amdhsa , bitrig , cloudabi , darwin , dragonfly , freebsd , haiku , kfreebsd , linux , macosx , minix , netbsd , openbsd , rtems , solaris , unknown , windows)
 BRANCH VZERO
windows COPY windows
 BRANCH VZERO
Symbol COPY Symbol
amdhsa COPY amdhsa
linux COPY linux
kfreebsd COPY kfreebsd
Symbol COPY Symbol
unknown COPY unknown
Symbol COPY Symbol
Symbol COPY Symbol
solaris COPY solaris
bitrig COPY bitrig
openbsd COPY openbsd
f() CAST f()
netbsd COPY netbsd
freebsd COPY freebsd
Symbol COPY Symbol
macosx COPY macosx
Symbol COPY Symbol
dragonfly COPY dragonfly
darwin COPY darwin
rtems COPY rtems
haiku COPY haiku
cloudabi COPY cloudabi
Symbol COPY Symbol
minix COPY minix
Symbol COPY Symbol
f() CALL func Invalid OSType /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp 182
Invalid OSType COPY Invalid OSType
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCHIND ARG1
 RETURN 0 f(Symbol , android , code16 , cygnus , eabihf , gnueabi , gnueabihf , gnux32 , itanium , unknown)
Symbol COPY Symbol
unknown COPY unknown
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp
itanium COPY itanium
 BRANCH VZERO
code16 COPY code16
gnueabi COPY gnueabi
android COPY android
gnux32 COPY gnux32
eabihf COPY eabihf
Symbol COPY Symbol
f() CAST f()
Symbol COPY Symbol
cygnus COPY cygnus
gnueabihf COPY gnueabihf
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
f() CALL func Invalid EnvironmentType! /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp 201
Invalid EnvironmentType! COPY Invalid EnvironmentType!
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL libcall_memcmp_thunk ARG2 f() 10
 STORE 433 (ARG1 + 16) ARG3
 CBRANCH f()
0 INT_EQUAL [(ARG1 + 16)] 0
 RETURN 0 ARG1
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 10)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CAST f()
0 COPY 0
(ARG1 + 16) CAST (ARG1 + 16)
1 COPY 1
 BRANCH VZERO
0 INT_EQUAL f() 10
f() CALL func ARG1 ARG2 ARG1
 CALL func (RSP + -40) ARG1 ARG2 ARG1
(RSP + -64) PTRSUB RSP -64
ppc64 COPY ppc64
wasm64 COPY wasm64
(RSP + -208) PTRSUB RSP -208
f(RSP) CALL func f(RSP) xcore (RSP + -104) f(RSP)
[40] LOAD 433 40
18 COPY 18
(RSP + -104) PTRSUB RSP -104
20 COPY 20
(RSP + -144) PTRSUB RSP -144
 CALL func f(RSP) (RSP + -44) f(RSP)
(RSP + -40) PTRSUB RSP -40
wasm32 COPY wasm32
f(RSP) CALL func f(RSP) 4640467 (RSP + -212) f(RSP)
19 COPY 19
f(RSP) CALL func f(RSP) ppc32 (RSP + -164) f(RSP)
f(RSP) CALL func f(RSP) sparcel (RSP + -136) f(RSP)
(RSP + -180) PTRSUB RSP -180
f(RSP) CALL func f(RSP) hsail (RSP + -76) f(RSP)
ppc32 COPY ppc32
(RSP + -204) PTRSUB RSP -204
armeb COPY armeb
f(RSP) CALL func f(RSP) nvptx (RSP + -100) f(RSP)
40 COPY 40
4640092 PTRSUB 0 4640092
16 COPY 16
amdil COPY amdil
(RSP + -60) PTRSUB RSP -60
systemz COPY systemz
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
f(RSP) CALL func f(RSP) 4640456 (RSP + -160) f(RSP)
f(RSP) CALL func f(RSP) 4639937 (RSP + -188) f(RSP)
f(RSP) CALL func f(RSP) sparcv9 (RSP + -132) f(RSP)
(RSP + -140) PTRSUB RSP -140
41 COPY 41
17 COPY 17
(RSP + -100) PTRSUB RSP -100
7 COPY 7
(RSP + -176) PTRSUB RSP -176
arm64 COPY arm64
f(RSP) CALL func f(RSP) hsail64 (RSP + -72) f(RSP)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -40) PTRSUB RSP -40
40 INT_ADD 0 40
0 COPY 0
4640130 PTRSUB 0 4640130
3 COPY 3
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
24 COPY 24
f(RSP) CALL func f(RSP) armeb (RSP + -192) f(RSP)
f(RSP) CALL func f(RSP) 4640476 (RSP + -112) f(RSP)
4640476 PTRSUB 0 4640476
f(RSP) CALL func f(RSP) wasm32 (RSP + -52) f(RSP)
(RSP + -152) PTRSUB RSP -152
nvptx COPY nvptx
1 COPY 1
(RSP + -76) PTRSUB RSP -76
mips64el COPY mips64el
sparc COPY sparc
kalimba COPY kalimba
25 COPY 25
(RSP + -188) PTRSUB RSP -188
f(RSP) CALL func f(RSP) amdil (RSP + -84) f(RSP)
(RSP + -116) PTRSUB RSP -116
26 COPY 26
aarch64 COPY aarch64
(RSP + -108) PTRSUB RSP -108
(RSP + -68) PTRSUB RSP -68
sparcv9 COPY sparcv9
f(RSP) CALL func f(RSP) wasm64 (RSP + -48) f(RSP)
3 COPY 3
21 COPY 21
f(RSP) CALL func f(RSP) x86-64 (RSP + -108) f(RSP)
shave COPY shave
(RSP + -184) PTRSUB RSP -184
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -148) PTRSUB RSP -148
22 COPY 22
f(RSP) CALL func f(RSP) amdil64 (RSP + -80) f(RSP)
0 COPY 0
23 COPY 23
(RSP + -112) PTRSUB RSP -112
f(RSP) CALL func f(RSP) ppc64 (RSP + -168) f(RSP)
msp430 COPY msp430
sparcel COPY sparcel
nvptx64 COPY nvptx64
f(RSP) CALL func f(RSP) sparc (RSP + -140) f(RSP)
(RSP + -72) PTRSUB RSP -72
4 COPY 4
f(RSP) CALL func f(RSP) amdgcn (RSP + -148) f(RSP)
(RSP + -44) PTRSUB RSP -44
f(RSP) CALL func f(RSP) 4640097 (RSP + -88) f(RSP)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
30 COPY 30
(RSP + -192) PTRSUB RSP -192
31 COPY 31
(RSP + -124) PTRSUB RSP -124
4640456 PTRSUB 0 4640456
amdgcn COPY amdgcn
(RSP + -160) PTRSUB RSP -160
(RSP + -84) PTRSUB RSP -84
10 COPY 10
f(RSP) CALL func f(RSP) mips64el (RSP + -176) f(RSP)
f(RSP) CALL func f(RSP) arm64 (RSP + -200) f(RSP)
11 COPY 11
32 COPY 32
f(RSP) CALL func f(RSP) thumb (RSP + -120) f(RSP)
mipsel COPY mipsel
f(RSP) CALL func f(RSP) kalimba (RSP + -60) f(RSP)
hsail64 COPY hsail64
(RSP + -48) PTRSUB RSP -48
27 COPY 27
f(RSP) CALL func f(RSP) 4639907 (RSP + -196) f(RSP)
2 COPY 2
f(RSP) CALL func f(RSP) hexagon (RSP + -144) f(RSP)
f(RSP) CALL func f(RSP) msp430 (RSP + -172) f(RSP)
4639937 PTRSUB 0 4639937
f(RSP) CALL func f(RSP) thumbeb (RSP + -116) f(RSP)
xcore COPY xcore
8 COPY 8
(RSP + -80) PTRSUB RSP -80
28 COPY 28
4640467 PTRSUB 0 4640467
4640002 PTRSUB 0 4640002
(RSP + -156) PTRSUB RSP -156
spir64 COPY spir64
x86-64 COPY x86-64
40 CAST 40
f(RSP) CALL func f(RSP) shave (RSP + -56) f(RSP)
(RSP + -212) PTRSUB RSP -212
mips64 COPY mips64
(RSP + -120) PTRSUB RSP -120
29 COPY 29
9 COPY 9
hexagon COPY hexagon
f(RSP) CALL func f(RSP) nvptx64 (RSP + -96) f(RSP)
(RSP + -200) PTRSUB RSP -200
4640097 PTRSUB 0 4640097
(RSP + -132) PTRSUB RSP -132
4639907 PTRSUB 0 4639907
(RSP + -168) PTRSUB RSP -168
f(RSP) CALL func f(RSP) ppc64le (RSP + -156) f(RSP)
13 COPY 13
37 COPY 37
thumb COPY thumb
f(RSP) CALL func f(RSP) systemz (RSP + -128) f(RSP)
f(RSP) CALL func (RSP + -40) aarch64 (RSP + -208)
f(RSP) CALL func f(RSP) 4640130 (RSP + -68) f(RSP)
15 COPY 15
(RSP + -96) PTRSUB RSP -96
amdil64 COPY amdil64
38 COPY 38
f(RSP) CALL func f(RSP) mipsel (RSP + -184) f(RSP)
(RSP + -56) PTRSUB RSP -56
39 COPY 39
(RSP + -172) PTRSUB RSP -172
(RSP + -136) PTRSUB RSP -136
(RSP + -164) PTRSUB RSP -164
(RSP + -128) PTRSUB RSP -128
33 COPY 33
f(RSP) CALL func f(RSP) 4640092 (RSP + -92) f(RSP)
12 COPY 12
(RSP + -88) PTRSUB RSP -88
f(RSP) CALL func f(RSP) mips64 (RSP + -180) f(RSP)
14 COPY 14
4640042 PTRSUB 0 4640042
ppc64le COPY ppc64le
f(RSP) CALL func f(RSP) 4640002 (RSP + -152) f(RSP)
34 COPY 34
(RSP + -196) PTRSUB RSP -196
f(RSP) CALL func f(RSP) spir64 (RSP + -64) f(RSP)
35 COPY 35
f(RSP) CALL func f(RSP) 0 (RSP + -204) f(RSP)
f(RSP) CALL func f(RSP) 4640042 (RSP + -124) f(RSP)
13 COPY 13
(RSP + -92) PTRSUB RSP -92
36 COPY 36
hsail COPY hsail
(RSP + -52) PTRSUB RSP -52
thumbeb COPY thumbeb
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
(ARG1 + 16) PTRADD ARG1 16 1
(ARG1 + 17) PTRADD ARG1 17 1
 STORE 433 ARG1 ARG2
 STORE 433 (ARG1 + 16) 7
 STORE 433 (ARG1 + 17) 1
 RETURN 0
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 36) INT_ADD ARG1 36
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 44) INT_ADD ARG1 44
 CALL func ARG1 (RSP + -248) (RSP + -248)
(ARG1 + 52) INT_ADD ARG1 52
f() CALL func ARG1
(ARG1 + 52) INT_ADD ARG1 52
 CALL func (RSP + -152) ARG2 (RSP + -120) ARG2
 CALL func (RSP + -56) ARG2 ARG2
 CALL func (RSP + -56) ARG2 ARG2
 CALL func (RSP + -56) ARG3 ARG3
 CALL func (RSP + -184) (RSP + -152) ARG3 (RSP + -152)
 CALL func (RSP + -248) (RSP + -216) ARG4 (RSP + -216)
 CALL func (RSP + -56) ARG4 ARG4
(RSP + -56) PTRSUB RSP -56
(ARG1 + 52) CAST (ARG1 + 52)
(ARG1 + 40) CAST (ARG1 + 40)
 CALL libcall_~basic_string_thunk (RSP + -56)
 CALL libcall_~basic_string_thunk (RSP + -56)
 CALL libcall_~basic_string_thunk (RSP + -56)
 CALL libcall_~basic_string_thunk (RSP + -56)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -88) PTRSUB RSP -88
(FS_OFFSET + 40) INT_ADD 0 40
 STORE 433 (ARG1 + 40) f()
(ARG1 + 48) CAST (ARG1 + 48)
40 INT_ADD 0 40
 STORE 433 (ARG1 + 36) f(RSP)
 STORE 433 (ARG1 + 32) f()
 STORE 433 (ARG1 + 44) f()
(RSP + -120) PTRSUB RSP -120
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -56) PTRSUB RSP -56
(RSP + -248) PTRSUB RSP -248
(RSP + -152) PTRSUB RSP -152
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -88) 45
(ARG1 + 52) CAST (ARG1 + 52)
(RSP + -56) PTRSUB RSP -56
(RSP + -88) PTRSUB RSP -88
(RSP + -152) PTRSUB RSP -152
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 STORE 433 (ARG1 + 48) 0
(RSP + -184) PTRSUB RSP -184
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -88) (RSP + -56) (RSP + -56)
 CALL func (RSP + -88) (RSP + -56) (RSP + -56)
 CALL func (RSP + -88) (RSP + -56) (RSP + -56)
 CALL func (RSP + -88) (RSP + -56) (RSP + -56)
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -120) 45
(RSP + -56) PTRSUB RSP -56
(RSP + -184) PTRSUB RSP -184
(ARG1 + 36) CAST (ARG1 + 36)
 CALL func (RSP + -216) (RSP + -184) (RSP + -88) (RSP + -184)
(RSP + -88) PTRSUB RSP -88
40 CAST 40
(RSP + -56) PTRSUB RSP -56
 STORE 433 (ARG1 + 52) 0
(RSP + -216) PTRSUB RSP -216
(RSP + -88) PTRSUB RSP -88
f() CALL func A_Stack[-0x58]:8 A_Stack[-0x50]:8 A_Stack[-0x58]:8
(RSP + -56) PTRSUB RSP -56
f(RSP) CALL func A_Stack[-0x58]:8 A_Stack[-0x50]:8 A_Stack[-0x58]:8
f() CALL func A_Stack[-0x58]:8 A_Stack[-0x50]:8 A_Stack[-0x58]:8
f() CALL func A_Stack[-0x58]:8 A_Stack[-0x50]:8 A_Stack[-0x58]:8
[40] LOAD 433 40
(RSP + -216) PTRSUB RSP -216
(RSP + -56) PTRSUB RSP -56
(ARG1 + 44) CAST (ARG1 + 44)
(RSP + -120) PTRSUB RSP -120
(ARG1 + 32) CAST (ARG1 + 32)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
 STORE 433 (ARG1 + 52) f()
(RSP + -88) PTRSUB RSP -88
(RSP + -56) PTRSUB RSP -56
(RSP + -248) PTRSUB RSP -248
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
f() CALL func ARG1
(ARG1 + 52) INT_ADD ARG1 52
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 36) INT_ADD ARG1 36
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 44) INT_ADD ARG1 44
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 52) INT_ADD ARG1 52
(ARG1 + 52) INT_ADD ARG1 52
 CALL func ARG1 (RSP + -344) (RSP + -344)
 CALL func (RSP + -184) ARG2 (RSP + -152) ARG2
 CALL func (RSP + -56) ARG2 ARG2
 CALL func (RSP + -56) ARG2 ARG2
 CALL func (RSP + -216) (RSP + -184) ARG3 (RSP + -184)
 CALL func (RSP + -56) ARG3 ARG3
 CALL func (RSP + -280) (RSP + -248) ARG4 (RSP + -248)
 CALL func (RSP + -56) ARG4 ARG4
 CALL func (RSP + -344) (RSP + -312) ARG5 (RSP + -312)
 CALL func (RSP + -56) ARG5 ARG5
 CALL func (RSP + -56) ARG5 ARG5
(RSP + -120) PTRSUB RSP -120
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -216) PTRSUB RSP -216
(RSP + -56) PTRSUB RSP -56
 STORE 433 (ARG1 + 48) f()
 STORE 433 (ARG1 + 32) f()
 STORE 433 (ARG1 + 40) f()
(RSP + -248) PTRSUB RSP -248
(ARG1 + 44) CAST (ARG1 + 44)
(ARG1 + 32) CAST (ARG1 + 32)
(f() + 40) INT_ADD f() 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -248) (RSP + -216) (RSP + -120) (RSP + -216)
0 INT_NOTEQUAL 0 [(f() + 40)]
(RSP + -56) PTRSUB RSP -56
(RSP + -280) PTRSUB RSP -280
(RSP + -88) PTRSUB RSP -88
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -88) PTRSUB RSP -88
(RSP + -56) PTRSUB RSP -56
 CALL libcall_~basic_string_thunk (RSP + -56)
 CALL libcall_~basic_string_thunk (RSP + -56)
 CALL libcall_~basic_string_thunk (RSP + -56)
(RSP + -88) PTRSUB RSP -88
(RSP + -152) PTRSUB RSP -152
(ARG1 + 52) CAST (ARG1 + 52)
(RSP + -88) PTRSUB RSP -88
(RSP + -56) PTRSUB RSP -56
(RSP + -184) PTRSUB RSP -184
0 INT_EQUAL [(ARG1 + 52)] 0
(RSP + -56) PTRSUB RSP -56
 CBRANCH ([(ARG1 + 52)] INT_EQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -56) PTRSUB RSP -56
f() CALL func A_Stack[-0x58]:8 A_Stack[-0x50]:8 A_Stack[-0x58]:8
f() CALL func A_Stack[-0x58]:8 A_Stack[-0x50]:8 A_Stack[-0x58]:8
f() CALL func A_Stack[-0x58]:8 A_Stack[-0x50]:8 A_Stack[-0x58]:8
(RSP + -184) PTRSUB RSP -184
(f() + 40) CAST (f() + 40)
(RSP + -216) PTRSUB RSP -216
 CALL func (RSP + -88) (RSP + -56) (RSP + -56)
 CALL func (RSP + -88) (RSP + -56) (RSP + -56)
 CALL func (RSP + -88) (RSP + -56) (RSP + -56)
(RSP + -344) PTRSUB RSP -344
 STORE 433 (ARG1 + 36) f(RSP)
 STORE 433 (ARG1 + 44) f()
 STORE 433 (ARG1 + 52) f()
(RSP + -88) PTRSUB RSP -88
(RSP + -312) PTRSUB RSP -312
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -152) 45
(RSP + -152) PTRSUB RSP -152
(RSP + -56) PTRSUB RSP -56
[(ARG1 + 52)] LOAD 433 (ARG1 + 52)
(RSP + -56) PTRSUB RSP -56
(ARG1 + 52) CAST (ARG1 + 52)
(ARG1 + 40) CAST (ARG1 + 40)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -120) PTRSUB RSP -120
 CALL libcall_~basic_string_thunk (RSP + -56)
 CALL libcall_~basic_string_thunk (RSP + -56)
 CALL libcall_~basic_string_thunk (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(RSP + -88) PTRSUB RSP -88
(RSP + -56) PTRSUB RSP -56
(ARG1 + 48) CAST (ARG1 + 48)
(RSP + -56) PTRSUB RSP -56
(RSP + -312) PTRSUB RSP -312
 CALL func (RSP + -312) (RSP + -280) (RSP + -88) (RSP + -280)
 CALL func (RSP + -88) 45
(RSP + -248) PTRSUB RSP -248
(RSP + -88) PTRSUB RSP -88
f(RSP) CALL func A_Stack[-0x58]:8 A_Stack[-0x50]:8 A_Stack[-0x58]:8
(RSP + -56) PTRSUB RSP -56
f() CALL func A_Stack[-0x58]:8 A_Stack[-0x50]:8 A_Stack[-0x58]:8
f() CALL func A_Stack[-0x58]:8 A_Stack[-0x50]:8 A_Stack[-0x58]:8
(RSP + -344) PTRSUB RSP -344
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -88) (RSP + -56) (RSP + -56)
 CALL func (RSP + -88) (RSP + -56) (RSP + -56)
(ARG1 + 36) CAST (ARG1 + 36)
 CALL func (RSP + -88) (RSP + -56) (RSP + -56)
(RSP + -280) PTRSUB RSP -280
 CALL func (RSP + -120) 45
(RSP + -56) PTRSUB RSP -56
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 52) CAST (ARG1 + 52)
 STORE 433 (ARG1 + 52) f()
f() CALL func ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
f() CALL func ARG1 0
f() CALL func ARG1 1 -1
f() CALL func ARG1
f() CALL func ARG1 0
 STORE 433 ARG1 (f() / 2147483647)
f() CALL func ARG1 0
f() CALL func ARG1 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_SLESS 48)
0 INT_SLESS 57 f()
 CBRANCH (57 INT_SLESS f())
0 COPY 0
 CBRANCH f()
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
(f() / 2147483647) INT_RIGHT f() 64
(((f() * 10) + f()) + 4294967248) INT_ADD ((f() * 10) + f()) 4294967248
(f() * 10) INT_MULT f() 10
((f() * 10) + f()) INT_ADD f() (f() * 10)
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
f() INT_SEXT f()
 STORE 433 (ARG1 + 8) (f() / 4611686014132420609)
 CBRANCH (f() INT_SLESS 58)
 RETURN 0 (((f() * 10) + f()) + 4294967248)
(((f() * 10) + f()) + 4294967248) COPY (((f() * 10) + f()) + 4294967248)
!Str.empty() && Str[0] >= '0' && Str[0] <= '9' && "Not a number" COPY !Str.empty() && Str[0] >= '0' && Str[0] <= '9' && "Not a number"
unsigned int EatNumber(llvm::StringRef&) COPY unsigned int EatNumber(llvm::StringRef&)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp
 RETURN 1
 CALL libcall___assert_fail_thunk !Str.empty() && Str[0] >= '0' && Str[0] <= '9' && "Not a number" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp 810 unsigned int EatNumber(llvm::StringRef&)
0 COPY 0
0 INT_SLESS f() 48
0 INT_SLESS 47 f()
 CBRANCH (47 INT_SLESS f())
 BRANCH VZERO
1 COPY 1
0 INT_SLESS f() 58
(ARG2 # ARG1) PIECE ARG2 ARG1
 STORE 433 ARG3 0
ARG3 COPY ARG3
ARG4 COPY ARG4
0 LOAD 433 ARG4
 STORE 433 ARG4 0
 STORE 433 ARG5 0
ARG5 COPY ARG5
0 LOAD 433 ARG5
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL f() 3
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 3)
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (57 INT_SLESS f())
1 COPY 1
 BRANCH VZERO
f(ARG1 , ARG2) COPY f(ARG1 , ARG2)
f(ARG1 , ARG2) COPY f(ARG1 , ARG2)
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
0 INT_SLESS f() 48
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
f() CALL func (RSP + -104) 0
 CBRANCH (f() INT_SLESS 48)
(RSP + -104) PTRSUB RSP -104
f(ARG1 , ARG2) COPY f(ARG1 , ARG2)
 CALL libcall___stack_chk_fail_thunk
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
 RETURN 0
 RETURN 1
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
0 INT_SLESS 57 f()
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
 CBRANCH f()
f() INT_ZEXT f()
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
f(ARG1 , ARG2) COPY f(ARG1 , ARG2)
4641857 PTRSUB 0 4641857
f() CALL func (RSP + -104) f() f() f()
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
 STORE 433 [((f() * 8) + (RSP + -56))] f()
f() CALL func (RSP + -104)
(RSP + -72) PTRSUB RSP -72
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
((f() * 8) + (RSP + -56)) PTRADD (RSP + -56) f() 8
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
f(ARG1 , ARG2) COPY f(ARG1 , ARG2)
(RSP + -104) PTRSUB RSP -104
[((f() * 8) + (RSP + -56))] LOAD 433 ((f() * 8) + (RSP + -56))
(RSP + -56) PTRSUB RSP -56
(RSP + -104) PTRSUB RSP -104
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
 CALL func (RSP + -72) 4641857
f(ARG1 , ARG2) COPY f(ARG1 , ARG2)
f() CALL func (RSP + -104)
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
0 INT_EQUAL f() 0
(RSP + -104) PTRSUB RSP -104
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 0
f() CALL func (RSP + -104) 1 -1
(RSP + -104) PTRSUB RSP -104
(f(ARG1 , ARG2) / 2147483647) SUBPIECE f(ARG1 , ARG2) 8
(ARG1 + 48) INT_ADD ARG1 48
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
[(ARG1 + 48)] COPY [(ARG1 + 48)]
(ARG1 + 48) CAST (ARG1 + 48)
 RETURN 0 [(ARG1 + 48)]
f() CALL func ARG1
f() CALL func ARG1
 CALL func (f() / 2147483647) (f() / 4611686014132420609) ARG2 ARG3 ARG4
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -56) PTRSUB RSP -56
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f(Symbol , android , code16 , cygnus , eabihf , gnueabi , gnueabihf , gnux32 , itanium , unknown) CALL func f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -56) A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
(f() + 40) CAST (f() + 40)
(f() / 2147483647) INT_RIGHT f() 64
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() COPY f()
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 8
(f() + 40) INT_ADD f() 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() COPY f()
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -40) f(Symbol , android , code16 , cygnus , eabihf , gnueabi , gnueabihf , gnux32 , itanium , unknown) f(Symbol , android , code16 , cygnus , eabihf , gnueabi , gnueabihf , gnux32 , itanium , unknown)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 INT_NOTEQUAL 0 [(f() + 40)]
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -56) f() -1 f()
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -40)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -40) PTRSUB RSP -40
f() CALL func ARG1
f() CALL func ARG1
 CALL func (f() / 2147483647) (f() / 4611686014132420609) ARG2 ARG3 ARG4
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() COPY f()
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) INT_RIGHT f() 64
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() COPY f()
(f() + 40) INT_ADD f() 40
(f() / 2147483647) SUBPIECE f() 0
0 INT_NOTEQUAL 0 [(f() + 40)]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
 CALL func (RSP + -40) f(Symbol , amdhsa , bitrig , cloudabi , darwin , dragonfly , freebsd , haiku , kfreebsd , linux , macosx , minix , netbsd , openbsd , rtems , solaris , unknown , windows) f(Symbol , amdhsa , bitrig , cloudabi , darwin , dragonfly , freebsd , haiku , kfreebsd , linux , macosx , minix , netbsd , openbsd , rtems , solaris , unknown , windows)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
f(Symbol , amdhsa , bitrig , cloudabi , darwin , dragonfly , freebsd , haiku , kfreebsd , linux , macosx , minix , netbsd , openbsd , rtems , solaris , unknown , windows) CALL func f()
(f() + 40) CAST (f() + 40)
f() CALL func (RSP + -56) A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -40) PTRSUB RSP -40
 RETURN 0
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -56) f() -1 f()
(RSP + -40) PTRSUB RSP -40
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -40)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -56) PTRSUB RSP -56
(f() / 2147483647) SUBPIECE f() 0
f() CALL func ARG1
 CALL func ARG1 ARG2 ARG3 ARG4
f() LOAD 433 ARG2
f() LOAD 433 ARG2
 STORE 433 ARG2 8
 STORE 433 ARG2 10
f() LOAD 433 ARG2
 STORE 433 ARG2 10
 STORE 433 ARG2 10
f() LOAD 433 ARG2
f() LOAD 433 ARG2
 STORE 433 ARG3 (f() + 4)
 STORE 433 ARG3 4
 STORE 433 ARG3 4
 STORE 433 ARG4 0
 STORE 433 ARG4 0
 CBRANCH (f() INT_EQUAL 5)
0 INT_EQUAL f() 5
 CBRANCH (f() INT_NOTEQUAL 2)
 CALL func unexpected OS for Darwin triple /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp 870
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp
unexpected OS for Darwin triple COPY unexpected OS for Darwin triple
 BRANCH VZERO
0 INT_EQUAL f() 9
 RETURN 0 0
 CBRANCH (f() INT_EQUAL 9)
1 COPY 1
 RETURN 0 1
 RETURN 0 0
0 COPY 0
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_NOTEQUAL f() 2
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_LESS f() 4
 CBRANCH (f() INT_NOTEQUAL 10)
 CBRANCH (f() INT_LESS 4)
0 INT_NOTEQUAL f() 10
0 INT_EQUAL f() 0
(f() + 4) INT_SUB f() 4
 BRANCH VZERO
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1 ARG2 ARG3 ARG4
 STORE 433 ARG2 f()
f(ARG2) LOAD 433 ARG2
 STORE 433 ARG2 5
 STORE 433 ARG3 0
 STORE 433 ARG4 0
 CBRANCH (f() INT_EQUAL 5)
0 INT_EQUAL f() 5
 RETURN 0
 CBRANCH (f() INT_NOTEQUAL 9)
0 INT_NOTEQUAL f() 2
 CBRANCH (f() INT_NOTEQUAL 2)
0 INT_NOTEQUAL f() 9
0 INT_EQUAL f(ARG2) 0
 CBRANCH (f(ARG2) INT_EQUAL 0)
 BRANCH VZERO
 CALL func unexpected OS for Darwin triple /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp 907
unexpected OS for Darwin triple COPY unexpected OS for Darwin triple
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp
 CBRANCH (f() INT_EQUAL 3)
 BRANCH VZERO
7 COPY 7
5 COPY 5
0 INT_EQUAL f() 3
f() CALL func ARG1
 STORE 433 ARG1 ARG2
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 (ARG1 + 8) ARG3
(ARG1 + 17) INT_ADD ARG1 17
 STORE 433 (ARG1 + 16) 5
(ARG1 + 17) CAST (ARG1 + 17)
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG1 + 17) 3
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
 CALL libcall___assert_fail_thunk isValid() && "Invalid twine!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h 372 llvm::Twine::Twine(const llvm::StringRef&, const char*)
 RETURN 0
 RETURN 1
llvm::Twine::Twine(const llvm::StringRef&, const char*) COPY llvm::Twine::Twine(const llvm::StringRef&, const char*)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h
isValid() && "Invalid twine!" COPY isValid() && "Invalid twine!"
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG3 COPY ARG3
ARG1 COPY ARG1
f() CALL func ARG1
ARG2 COPY ARG2
(f() / 2147483647) SUBPIECE f() 0
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -136) PTRSUB RSP -136
(RSP + -168) PTRSUB RSP -168
(RSP + -200) PTRSUB RSP -200
 CALL func ARG1 (RSP + -40) (RSP + -40)
(RSP + -296) PTRSUB RSP -296
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -136) 4641648
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -232) (RSP + -264) 4641648 (RSP + -264)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
4641648 PTRSUB 0 4641648
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -104) PTRSUB RSP -104
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -40) PTRSUB RSP -40
(RSP + -72) PTRSUB RSP -72
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -168) (RSP + -232) (RSP + -200) (RSP + -232)
 CALL func (RSP + -200) (RSP + -296) (RSP + -296)
40 INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 0
[40] LOAD 433 40
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
4641648 PTRSUB 0 4641648
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -104) (RSP + -168) (RSP + -136) (RSP + -168)
(f() / 2147483647) SUBPIECE f() 8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -264) PTRSUB RSP -264
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -40) PTRSUB RSP -40
(RSP + -232) PTRSUB RSP -232
f() CALL func ARG1
(RSP + -136) PTRSUB RSP -136
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -232) PTRSUB RSP -232
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -72) (RSP + -248) (RSP + -248)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -40) (RSP + -104) (RSP + -72) (RSP + -104)
(RSP + -72) PTRSUB RSP -72
(f() / 2147483647) SUBPIECE f() 8
(RSP + -168) PTRSUB RSP -168
(f() / 2147483647) SUBPIECE f() 0
(RSP + -248) PTRSUB RSP -248
(f() / 2147483647) SUBPIECE f() 8
40 CAST 40
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
 CALL func ARG1 A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
f(Symbol , apple , nvidia , unknown) CALL func ARG2
[40] LOAD 433 40
40 INT_ADD 0 40
 CALL func (RSP + -40) f(Symbol , apple , nvidia , unknown) f(Symbol , apple , nvidia , unknown)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
(RSP + -40) PTRSUB RSP -40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
f() CALL func ARG1
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() / 2147483647) INT_RIGHT f() 64
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
4639877 PTRSUB 0 4639877
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) 4639877
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (f() / 2147483647) (f() / 4611686014132420609) A_Stack[-0x38]:8 A_Stack[-0x30]:8
(FS_OFFSET + 40) INT_ADD 0 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
f() CALL func ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL f() 0
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -328) (RSP + -392) (RSP + -392)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -136) PTRSUB RSP -136
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(A_Stack[-0x100]:8 # A_Stack[-0x108]:8) PIECE A_Stack[-0x100]:8 A_Stack[-0x108]:8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -72) PTRSUB RSP -72
(RSP + -168) PTRSUB RSP -168
(RSP + -104) PTRSUB RSP -104
(A_Stack[-0x170]:8 # A_Stack[-0x178]:8) PIECE A_Stack[-0x170]:8 A_Stack[-0x178]:8
f() CALL func ARG1
(f() / 2147483647) SUBPIECE f() 0
(RSP + -40) PTRSUB RSP -40
(A_Stack[-0x120]:8 # A_Stack[-0x128]:8) PIECE A_Stack[-0x120]:8 A_Stack[-0x128]:8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -104) (RSP + -168) (RSP + -136) (RSP + -168)
(f() / 2147483647) SUBPIECE f() 8
4641648 PTRSUB 0 4641648
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(A_Stack[-0x180]:8 # A_Stack[-0x188]:8) PIECE A_Stack[-0x180]:8 A_Stack[-0x188]:8
(A_Stack[-0x190]:8 # A_Stack[-0x198]:8) PIECE A_Stack[-0x190]:8 A_Stack[-0x198]:8
f() CALL func ARG1
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -104) PTRSUB RSP -104
(f() / 2147483647) SUBPIECE f() 0
(RSP + -328) PTRSUB RSP -328
(f() / 2147483647) SUBPIECE f() 8
f() CALL func ARG1
(f() / 2147483647) SUBPIECE f() 8
(RSP + -40) PTRSUB RSP -40
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) (RSP + -104) (RSP + -72) (RSP + -104)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -392) PTRSUB RSP -392
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -72) PTRSUB RSP -72
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func ARG1 (RSP + -40) (RSP + -40)
(RSP + -232) PTRSUB RSP -232
(f() / 2147483647) SUBPIECE f() 0
f() CALL func ARG1
(f() / 2147483647) SUBPIECE f() 0
4641648 PTRSUB 0 4641648
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -296) PTRSUB RSP -296
(RSP + -168) PTRSUB RSP -168
(RSP + -136) PTRSUB RSP -136
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
4641648 PTRSUB 0 4641648
 CALL func (RSP + -264) 4641648
(RSP + -232) PTRSUB RSP -232
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -264) PTRSUB RSP -264
(f() / 2147483647) SUBPIECE f() 8
(RSP + -232) PTRSUB RSP -232
(f() / 2147483647) SUBPIECE f() 8
(RSP + -168) PTRSUB RSP -168
(RSP + -104) PTRSUB RSP -104
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -200) (RSP + -264) (RSP + -264)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 0
(RSP + -136) PTRSUB RSP -136
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -168) PTRSUB RSP -168
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -440) PTRSUB RSP -440
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -168) (RSP + -232) (RSP + -200) (RSP + -232)
(RSP + -360) PTRSUB RSP -360
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -328) PTRSUB RSP -328
 CALL func (RSP + -296) (RSP + -360) (RSP + -328) (RSP + -360)
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -104) (RSP + -168) (RSP + -136) (RSP + -168)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -296) PTRSUB RSP -296
(RSP + -264) PTRSUB RSP -264
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -72) (RSP + -440) (RSP + -440)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -136) 4641648
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -40) (RSP + -104) (RSP + -72) (RSP + -104)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -232) (RSP + -296) (RSP + -264) (RSP + -296)
(RSP + -72) PTRSUB RSP -72
(RSP + -296) PTRSUB RSP -296
f() CALL func ARG1
(RSP + -376) PTRSUB RSP -376
(RSP + -264) PTRSUB RSP -264
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -200) (RSP + -440) (RSP + -440)
(RSP + -232) PTRSUB RSP -232
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -136) 4641648
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -136) PTRSUB RSP -136
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func ARG1 (RSP + -40) (RSP + -40)
(f() / 2147483647) SUBPIECE f() 8
4641648 PTRSUB 0 4641648
(RSP + -72) PTRSUB RSP -72
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -232) (RSP + -296) 4641648 (RSP + -296)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -440) PTRSUB RSP -440
4641648 PTRSUB 0 4641648
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -168) (RSP + -232) (RSP + -200) (RSP + -232)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -408) PTRSUB RSP -408
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -72) (RSP + -376) (RSP + -376)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -360) (RSP + -408) 4641648 (RSP + -408)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -360) PTRSUB RSP -360
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 RETURN 0
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func ARG1 A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
f(Symbol , amdhsa , bitrig , cloudabi , darwin , dragonfly , freebsd , haiku , kfreebsd , linux , macosx , minix , netbsd , openbsd , rtems , solaris , unknown , windows) CALL func ARG2
(RSP + -40) PTRSUB RSP -40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
40 INT_ADD 0 40
 CALL func (RSP + -40) f(Symbol , amdhsa , bitrig , cloudabi , darwin , dragonfly , freebsd , haiku , kfreebsd , linux , macosx , minix , netbsd , openbsd , rtems , solaris , unknown , windows) f(Symbol , amdhsa , bitrig , cloudabi , darwin , dragonfly , freebsd , haiku , kfreebsd , linux , macosx , minix , netbsd , openbsd , rtems , solaris , unknown , windows)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
 CALL func (RSP + -72) (RSP + -440) (RSP + -440)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -136) PTRSUB RSP -136
(RSP + -232) PTRSUB RSP -232
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -360) PTRSUB RSP -360
(RSP + -72) PTRSUB RSP -72
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -328) PTRSUB RSP -328
(RSP + -440) PTRSUB RSP -440
 CALL func (RSP + -40) (RSP + -104) (RSP + -72) (RSP + -104)
(f() / 2147483647) SUBPIECE f() 0
40 INT_ADD 0 40
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -360) (RSP + -408) 4641648 (RSP + -408)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -136) 4641648
[40] LOAD 433 40
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
4641648 PTRSUB 0 4641648
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -296) PTRSUB RSP -296
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func ARG1 (RSP + -40) (RSP + -40)
(RSP + -264) PTRSUB RSP -264
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -408) PTRSUB RSP -408
(f() / 2147483647) SUBPIECE f() 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -360) PTRSUB RSP -360
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -296) PTRSUB RSP -296
f() CALL func ARG1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -328) (RSP + -392) (RSP + -392)
(f() / 2147483647) SUBPIECE f() 0
4641648 PTRSUB 0 4641648
(f() / 2147483647) SUBPIECE f() 8
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -104) (RSP + -168) (RSP + -136) (RSP + -168)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -40) PTRSUB RSP -40
(RSP + -392) PTRSUB RSP -392
 CALL func (RSP + -264) 4641648
 CALL func (RSP + -232) (RSP + -296) (RSP + -264) (RSP + -296)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -104) PTRSUB RSP -104
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -72) PTRSUB RSP -72
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -168) (RSP + -232) (RSP + -200) (RSP + -232)
f() CALL func ARG1
(f() / 2147483647) SUBPIECE f() 8
40 CAST 40
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -328) PTRSUB RSP -328
(RSP + -200) PTRSUB RSP -200
(RSP + -376) PTRSUB RSP -376
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func ARG1
(RSP + -232) PTRSUB RSP -232
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -200) (RSP + -376) (RSP + -376)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
4641648 PTRSUB 0 4641648
(RSP + -264) PTRSUB RSP -264
(RSP + -168) PTRSUB RSP -168
(RSP + -104) PTRSUB RSP -104
(f() / 2147483647) SUBPIECE f() 0
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -296) (RSP + -360) (RSP + -328) (RSP + -360)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 RETURN 0
 RETURN 1
(ARG1 + 52) INT_ADD ARG1 52
 CALL func ARG1 A_Stack[-0xf8]:8 A_Stack[-0xf0]:8 A_Stack[-0xf8]:8
f() CALL func ARG1
(ARG1 + 52) INT_ADD ARG1 52
 CALL func ARG1 A_Stack[-0x68]:8 A_Stack[-0x60]:8 A_Stack[-0x68]:8
f(Symbol , android , code16 , cygnus , eabihf , gnueabi , gnueabihf , gnux32 , itanium , unknown) CALL func ARG2
f(Symbol , android , code16 , cygnus , eabihf , gnueabi , gnueabihf , gnux32 , itanium , unknown) CALL func ARG2
0 INT_EQUAL [(ARG1 + 52)] f()
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
(ARG1 + 52) CAST (ARG1 + 52)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
[(ARG1 + 52)] LOAD 433 (ARG1 + 52)
 CBRANCH ([(ARG1 + 52)] INT_EQUAL f())
(f() + 40) INT_ADD f() 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -168) PTRSUB RSP -168
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -104) f(Symbol , android , code16 , cygnus , eabihf , gnueabi , gnueabihf , gnux32 , itanium , unknown) f(Symbol , android , code16 , cygnus , eabihf , gnueabi , gnueabihf , gnux32 , itanium , unknown)
(RSP + -104) PTRSUB RSP -104
(RSP + -136) PTRSUB RSP -136
(ARG1 + 52) CAST (ARG1 + 52)
(RSP + -200) PTRSUB RSP -200
(RSP + -168) PTRSUB RSP -168
 BRANCH VZERO
f() CALL func [(ARG1 + 52)]
 CALL func (RSP + -232) 4641648
 CALL func (RSP + -248) (RSP + -72) (RSP + -72)
(RSP + -104) PTRSUB RSP -104
 CALL libcall_~basic_string_thunk (RSP + -72)
 CALL func (RSP + -104) (RSP + -168) (RSP + -136) (RSP + -168)
(RSP + -136) PTRSUB RSP -136
[(ARG1 + 52)] LOAD 433 (ARG1 + 52)
(RSP + -248) PTRSUB RSP -248
4641648 PTRSUB 0 4641648
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -200) f(Symbol , android , code16 , cygnus , eabihf , gnueabi , gnueabihf , gnux32 , itanium , unknown) f(Symbol , android , code16 , cygnus , eabihf , gnueabi , gnueabihf , gnux32 , itanium , unknown)
(RSP + -72) PTRSUB RSP -72
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -72) (RSP + -104) (RSP + -104)
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -168) (RSP + -200) (RSP + -232) (RSP + -200)
 CALL func (RSP + -136) f() f()
(RSP + -232) PTRSUB RSP -232
(RSP + -232) PTRSUB RSP -232
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 CALL func ARG1 A_Stack[-0xe8]:8 A_Stack[-0xe0]:8 A_Stack[-0xe8]:8
 CALL func ARG1 A_Stack[-0x58]:8 A_Stack[-0x50]:8 A_Stack[-0x58]:8
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 48) INT_ADD ARG1 48
f() CALL func ARG2
f() CALL func ARG2
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
 CBRANCH ([(ARG1 + 48)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 48)] 0
0 INT_NOTEQUAL 0 [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
(ARG1 + 48) CAST (ARG1 + 48)
(FS_OFFSET + 40) INT_ADD 0 40
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALL func (RSP + -216) 4641648
(RSP + -232) PTRSUB RSP -232
 CALL func (RSP + -232) (RSP + -56) (RSP + -56)
 CALL libcall_~basic_string_thunk (RSP + -56)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -184) f(Symbol , android , code16 , cygnus , eabihf , gnueabi , gnueabihf , gnux32 , itanium , unknown) f(Symbol , android , code16 , cygnus , eabihf , gnueabi , gnueabihf , gnux32 , itanium , unknown)
(RSP + -56) PTRSUB RSP -56
4641648 PTRSUB 0 4641648
(RSP + -184) PTRSUB RSP -184
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -56) (RSP + -88) (RSP + -88)
(RSP + -216) PTRSUB RSP -216
(RSP + -216) PTRSUB RSP -216
 CALL func (RSP + -88) f() f()
(RSP + -152) PTRSUB RSP -152
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -152) (RSP + -184) (RSP + -216) (RSP + -184)
 CALL func (RSP + -120) f() f()
 BRANCH VZERO
(RSP + -120) PTRSUB RSP -120
(RSP + -88) PTRSUB RSP -88
f(Symbol , android , code16 , cygnus , eabihf , gnueabi , gnueabihf , gnux32 , itanium , unknown) CALL func [(ARG1 + 48)]
(ARG1 + 48) CAST (ARG1 + 48)
(RSP + -152) PTRSUB RSP -152
(RSP + -184) PTRSUB RSP -184
(RSP + -88) PTRSUB RSP -88
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -88) (RSP + -152) (RSP + -120) (RSP + -152)
ARG3 COPY ARG3
ARG1 COPY ARG1
ARG2 COPY ARG2
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -136) 4641648
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
4641648 PTRSUB 0 4641648
(RSP + -168) PTRSUB RSP -168
(RSP + -136) PTRSUB RSP -136
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
4641648 PTRSUB 0 4641648
40 CAST 40
 CALL func (RSP + -104) (RSP + -168) (RSP + -136) (RSP + -168)
(f() / 2147483647) SUBPIECE f() 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -248) PTRSUB RSP -248
(RSP + -104) PTRSUB RSP -104
(f() / 2147483647) SUBPIECE f() 8
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -232) (RSP + -264) 4641648 (RSP + -264)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -40) (RSP + -104) (RSP + -72) (RSP + -104)
(f() / 2147483647) SUBPIECE f() 8
f() CALL func ARG1
(RSP + -232) PTRSUB RSP -232
(RSP + -72) PTRSUB RSP -72
(RSP + -104) PTRSUB RSP -104
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -168) (RSP + -232) (RSP + -200) (RSP + -232)
 CALL func (RSP + -200) (RSP + -248) (RSP + -248)
40 INT_ADD 0 40
(RSP + -40) PTRSUB RSP -40
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 40
(RSP + -168) PTRSUB RSP -168
(RSP + -200) PTRSUB RSP -200
 CALL func ARG1 (RSP + -40) (RSP + -40)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -72) PTRSUB RSP -72
(f() / 2147483647) SUBPIECE f() 8
(RSP + -264) PTRSUB RSP -264
(RSP + -296) PTRSUB RSP -296
f() CALL func ARG1
(RSP + -232) PTRSUB RSP -232
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -72) (RSP + -296) (RSP + -296)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -40) PTRSUB RSP -40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
 RETURN 0
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func ARG1
(f() / 2147483647) SUBPIECE f() 0
(f() & -256) INT_AND f() -256
0 INT_EQUAL (f() / 2147483647) 64
 RETURN 0 (f() & -256)
0 INT_ZEXT 0
(f() & -256) INT_OR (f() & -256) 0
f() CALL func f()
f() CALL func ARG1
(f() / 2147483647) SUBPIECE f() 0
(f() & -256) INT_AND f() -256
0 INT_EQUAL (f() / 2147483647) 16
 RETURN 0 (f() & -256)
0 INT_ZEXT 0
(f() & -256) INT_OR (f() & -256) 0
f() CALL func f()
 CALL func ARG1 6
ARG1 COPY ARG1
 CALL func ARG1 8
 CALL func ARG1 0
 CALL func ARG1 14
 CALL func ARG1 10
 CALL func ARG1 18
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 4
f() CALL func ARG2
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 BRANCHIND f()
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 CALL func ARG1 11
 CALL func ARG1 20
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 3
 CALL func ARG1 5
ARG1 COPY ARG1
 CALL func ARG1 9
 CALL func ARG1 0
 CALL func ARG1 15
f() CALL func ARG2
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 BRANCHIND f()
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
f(Symbol) CALL func ARG1 ARG2 ARG1
0 INT_NOTEQUAL f(Symbol) 0
 CBRANCH (f(Symbol) INT_NOTEQUAL 0)
0 COPY 0
 RETURN 0 [f(Symbol)]
[f(Symbol)] COPY [f(Symbol)]
0 INT_NOTEQUAL f(Symbol) 6882064
 RETURN 0 0
Symbol PTRSUB 0 Symbol
 CBRANCH (f(Symbol) INT_NOTEQUAL 6882064)
 CBRANCH (([(f(Symbol) + 8)] / 2147483647) INT_EQUAL f(Symbol))
 BRANCH VZERO
([(f(Symbol) + 8)] / 4611686014132420609) SUBPIECE ([(f(Symbol) + 8)] / 2147483647) 0
([(f(Symbol) + 8)] / 2147483647) INT_RIGHT [(f(Symbol) + 8)] 32
(f(Symbol) + 16) PTRADD f(Symbol) 2 8
[(f(Symbol) + 8)] CAST [(f(Symbol) + 8)]
 CBRANCH (([(f(Symbol) + 8)] / 4611686014132420609) INT_NOTEQUAL 0)
0 INT_NOTEQUAL ([(f(Symbol) + 8)] / 4611686014132420609) 0
(f(Symbol) + 8) PTRADD f(Symbol) 1 8
([(f(Symbol) + 8)] / 2147483647) SUBPIECE [(f(Symbol) + 8)] 0
[(f(Symbol) + 8)] LOAD 433 (f(Symbol) + 8)
0 INT_EQUAL ([(f(Symbol) + 8)] / 2147483647) f(Symbol)
[f(Symbol)] LOAD 433 f(Symbol)
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
0 INT_EQUAL f() [(f() + 40)]
(f(ARG2 , ARG3) / 2147483647) SUBPIECE f(ARG2 , ARG3) 8
(f() + 40) INT_ADD f() 40
f() CALL func f(ARG1)
(RSP + -104) PTRSUB RSP -104
(f(ARG2 , ARG3) / 2147483647) SUBPIECE f(ARG2 , ARG3) 0
[(f() + 40)] LOAD 433 (f() + 40)
(f(ARG2 , ARG3) / 2147483647) INT_RIGHT f(ARG2 , ARG3) 64
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f(ARG2 , ARG3) / 2147483647) SUBPIECE f(ARG2 , ARG3) 8
(f(ARG2 , ARG3) / 4611686014132420609) SUBPIECE (f(ARG2 , ARG3) / 2147483647) 0
(FS_OFFSET + 40) INT_ADD 0 40
(ARG3 # ARG2) PIECE ARG3 ARG2
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
f(ARG2 , ARG3) CALL func (f(ARG2 , ARG3) / 2147483647) (f(ARG2 , ARG3) / 4611686014132420609) (f(ARG2 , ARG3) / 2147483647)
(f(ARG2 , ARG3) / 2147483647) SUBPIECE f(ARG2 , ARG3) 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f(ARG2 , ARG3) / 2147483647) SUBPIECE f(ARG2 , ARG3) 0
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
 CBRANCH (f() INT_EQUAL 10)
f(ARG2 , ARG3) COPY f(ARG2 , ARG3)
0 INT_EQUAL f() 10
f() CALL func (RSP + -104)
 CBRANCH (3 INT_SLESS f())
 CBRANCH (1 INT_LESS (f() + 6))
f() COPY f()
(f() + 6) INT_SUB f() 6
 BRANCH VZERO
0 INT_LESS 1 (f() + 6)
arm926ej-s COPY arm926ej-s
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 BRANCH VZERO
strongarm COPY strongarm
f() COPY f()
 CBRANCH (f() INT_EQUAL 0)
f() CALL func (f(ARG2 , ARG3) / 2147483647) (f(ARG2 , ARG3) / 2147483647) (f(ARG2 , ARG3) / 2147483647)
f() CAST f()
(f(ARG2 , ARG3) / 2147483647) SUBPIECE f(ARG2 , ARG3) 8
f() COPY f()
0 COPY 0
0 INT_EQUAL f() 0
(f(ARG2 , ARG3) / 2147483647) SUBPIECE f(ARG2 , ARG3) 0
 CBRANCH (f() INT_EQUAL 0)
f() COPY f()
 BRANCH VZERO
f() CALL func ARG1
 CBRANCH (f() INT_EQUAL 10)
f() CALL func f(ARG1)
 CBRANCH (f() INT_SLESS 2)
(f(ARG2 , ARG3) / 2147483647) SUBPIECE f(ARG2 , ARG3) 8
(f(ARG2 , ARG3) / 2147483647) SUBPIECE f(ARG2 , ARG3) 0
 CBRANCH (f() INT_EQUAL 17)
0 INT_EQUAL f() 17
0 INT_SLESS f() 2
 CBRANCH (f() INT_EQUAL 7)
arm7tdmi COPY arm7tdmi
 BRANCH VZERO
f() COPY f()
arm1176jzf-s COPY arm1176jzf-s
f() COPY f()
 CBRANCH (f() INT_EQUAL 13)
f() COPY f()
 BRANCH VZERO
0 INT_EQUAL f() 4
cortex-a9 COPY cortex-a9
 CBRANCH (f() INT_EQUAL 4)
0 INT_SLESS 3 f()
(f(ARG2 , ARG3) / 2147483647) SUBPIECE f(ARG2 , ARG3) 8
 RETURN 0 f(arm1176jzf-s , arm7tdmi , arm926ej-s , cortex-a8 , cortex-a9 , strongarm)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(f(ARG2 , ARG3) / 2147483647) SUBPIECE f(ARG2 , ARG3) 0
(f(ARG2 , ARG3) / 2147483647) SUBPIECE f(ARG2 , ARG3) 8
0 INT_EQUAL f() 13
(f(ARG2 , ARG3) / 2147483647) SUBPIECE f(ARG2 , ARG3) 0
(RSP + -104) PTRSUB RSP -104
 CBRANCH f()
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
f() CALL func (RSP + -104)
f() COPY f()
(f(ARG2 , ARG3) / 2147483647) SUBPIECE f(ARG2 , ARG3) 8
 BRANCH VZERO
0 INT_EQUAL f() 3
cortex-a8 COPY cortex-a8
 CBRANCH (f() INT_EQUAL 3)
f() CALL func f(ARG1)
(f(ARG2 , ARG3) / 2147483647) SUBPIECE f(ARG2 , ARG3) 0
f() CALL func (RSP + -104)
 BRANCH VZERO
0 INT_EQUAL f() 0
f() COPY f()
(RSP + -104) PTRSUB RSP -104
arm1176jzf-s COPY arm1176jzf-s
(f(ARG2 , ARG3) / 2147483647) SUBPIECE f(ARG2 , ARG3) 8
(f(ARG2 , ARG3) / 2147483647) SUBPIECE f(ARG2 , ARG3) 0
0 INT_EQUAL f() 7
0 INT_EQUAL f() 0
 CALL func (RSP + -56) 4642764
(f(ARG2 , ARG3) / 2147483647) SUBPIECE f(ARG2 , ARG3) 8
4642764 PTRSUB 0 4642764
(f(ARG2 , ARG3) / 2147483647) SUBPIECE f(ARG2 , ARG3) 0
(f(ARG2 , ARG3) / 2147483647) SUBPIECE f(ARG2 , ARG3) 8
f() CALL func (f(ARG2 , ARG3) / 2147483647) (f(ARG2 , ARG3) / 2147483647) f() f()
(RSP + -56) PTRSUB RSP -56
(f(ARG2 , ARG3) / 2147483647) SUBPIECE f(ARG2 , ARG3) 0
f() CALL func f(ARG1)
(f(ARG2 , ARG3) / 2147483647) SUBPIECE f(ARG2 , ARG3) 8
(f(ARG2 , ARG3) / 2147483647) SUBPIECE f(ARG2 , ARG3) 0
0 INT_EQUAL f() 10
0 INT_LESS ARG1 22
ARG1 INT_ZEXT ARG1
 CBRANCH (ARG1 INT_LESS 22)
 RETURN 0 f(ARG1 , Symbol)
(ARG1 * 3) INT_MULT ARG1 3
0 COPY 0
Symbol PTRSUB 0 Symbol
(Symbol + (ARG1 * 24)) PTRADD Symbol (ARG1 * 3) 8
[(Symbol + (ARG1 * 24))] LOAD 433 (Symbol + (ARG1 * 24))
 BRANCH VZERO
ARG1 INT_ZEXT ARG1
0 INT_LESS ARG1 22
 CBRANCH (ARG1 INT_LESS 22)
 RETURN 0 f(ARG1)
((ARG1 * 24) + 6878604) CAST ((ARG1 * 24) + 6878604)
((ARG1 * 24) + 4) INT_ADD (ARG1 * 24) 4
(ARG1 * 24) INT_MULT ARG1 24
0 COPY 0
6878600 PTRSUB 0 6878600
6878600 CAST 6878600
 BRANCH VZERO
((ARG1 * 24) + 6878604) INT_ADD 6878600 ((ARG1 * 24) + 4)
[((ARG1 * 24) + 6878604)] LOAD 433 ((ARG1 * 24) + 6878604)
0 INT_LESS ARG1 22
ARG1 INT_ZEXT ARG1
 CBRANCH (ARG1 INT_LESS 22)
 RETURN 0 f(ARG1 , Symbol)
Symbol PTRSUB 0 Symbol
(Symbol + (ARG1 * 24)) PTRADD Symbol (ARG1 * 3) 8
(Symbol + (ARG1 * 24)) CAST (Symbol + (ARG1 * 24))
[(Symbol + (ARG1 * 24))] LOAD 433 (Symbol + (ARG1 * 24))
(ARG1 * 3) INT_MULT ARG1 3
 BRANCH VZERO
0 COPY 0
0 INT_LESS ARG1 22
ARG1 INT_ZEXT ARG1
 RETURN 0 f(ARG1)
 CBRANCH (ARG1 INT_LESS 22)
0 COPY 0
6878608 PTRSUB 0 6878608
6878608 CAST 6878608
((ARG1 * 24) + 6878612) INT_ADD 6878608 ((ARG1 * 24) + 4)
[((ARG1 * 24) + 6878612)] LOAD 433 ((ARG1 * 24) + 6878612)
 BRANCH VZERO
((ARG1 * 24) + 6878612) CAST ((ARG1 * 24) + 6878612)
((ARG1 * 24) + 4) INT_ADD (ARG1 * 24) 4
(ARG1 * 24) INT_MULT ARG1 24
f(ARG3) CALL func ARG3
f(ARG2) CALL func 8 ARG2
f(ARG3) CAST f(ARG3)
 RETURN 0
[f(ARG3)] LOAD 433 f(ARG3)
f(ARG2) CAST f(ARG2)
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG2) 0
 STORE 433 f(ARG2) [f(ARG3)]
 CALL func ARG1 ARG2 f(ARG3) ARG2
f(ARG3) CALL func ARG3
 RETURN 0
f(ARG2) CALL func ARG2
 CALL func ARG1 ((f() * 8) + f()) f(ARG2) ((f() * 8) + f())
f(ARG1) CALL func ARG1
f(ARG1) CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 f()
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
f() CALL func ARG1 f(RSP) f(RSP)
(ARG1 + 16) PTRADD ARG1 2 8
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 8) [ARG1]
f(RSP) CALL func ARG1 1 0
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
 STORE 433 (ARG1 + 16) ((f(RSP) * 8) + f())
(f(RSP) * 8) INT_MULT f(RSP) 8
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
((f(RSP) * 8) + f()) INT_ADD (f(RSP) * 8) f()
(([(ARG1 + 16)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 3
((f() * 8) + f()) INT_ADD (f() * 8) f()
(f() + 8) INT_ADD f() 8
(f() * 8) INT_MULT f() 8
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
0 COPY 0
 RETURN 0
f() CALL func [ARG1] [(ARG1 + 8)] f() f(ARG1)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (ARG1 + 8) (f() + 8)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1 [(ARG1 + 8)] f(ARG2) [(ARG1 + 8)]
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1 f(ARG2) f(ARG2)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
f(ARG2) CALL func ARG2
f(ARG2) CALL func ARG2
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL [(ARG1 + 16)])
0 INT_EQUAL [(ARG1 + 8)] [(ARG1 + 16)]
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 8)
([(ARG1 + 8)] + 8) INT_ADD [(ARG1 + 8)] 8
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1 f(ARG2) f(ARG2)
f(ARG2) CALL func ARG2
 RETURN 0
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
0 INT_NOTEQUAL ARG1 0
ARG1 INT_ZEXT ARG1
ARG1 INT_ZEXT ARG1
ARG1 INT_ZEXT ARG1
0 INT_LESS ARG1 22
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
 CBRANCH (ARG1 INT_LESS 22)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 BRANCH VZERO
 CBRANCH (ARG1 INT_NOTEQUAL 0)
0 COPY 0
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(ARG1 * 24) INT_MULT ARG1 24
((ARG1 * 24) + 4) INT_ADD (ARG1 * 24) 4
0 INT_EQUAL [(Symbol + (ARG1 * 24))] 1
6878608 PTRSUB 0 6878608
((ARG1 * 24) + 6878604) INT_ADD 6878600 ((ARG1 * 24) + 4)
1 COPY 1
 BRANCHIND [((ARG1 * 24) + 6878604)]
Symbol PTRSUB 0 Symbol
 CBRANCH ([(Symbol + (ARG1 * 24))] INT_EQUAL 1)
(ARG1 * 3) INT_MULT ARG1 3
((ARG1 * 24) + 6878612) INT_ADD 6878608 ((ARG1 * 24) + 4)
(Symbol + (ARG1 * 24)) CAST (Symbol + (ARG1 * 24))
[((ARG1 * 24) + 6878604)] LOAD 433 ((ARG1 * 24) + 6878604)
 CBRANCH ([((ARG1 * 24) + 6878612)] INT_EQUAL 1)
0 INT_EQUAL [((ARG1 * 24) + 6878612)] 1
((ARG1 * 24) + 6878612) CAST ((ARG1 * 24) + 6878612)
6878608 CAST 6878608
[(Symbol + (ARG1 * 24))] LOAD 433 (Symbol + (ARG1 * 24))
6878600 PTRSUB 0 6878600
[((ARG1 * 24) + 6878612)] LOAD 433 ((ARG1 * 24) + 6878612)
(Symbol + (ARG1 * 24)) PTRADD Symbol (ARG1 * 3) 8
(ARG1 * 24) INT_MULT ARG1 24
6878600 CAST 6878600
((ARG1 * 24) + 6878604) CAST ((ARG1 * 24) + 6878604)
((ARG1 * 24) + 4) INT_ADD (ARG1 * 24) 4
 CBRANCH ([(Symbol + (ARG1 * 24))] INT_EQUAL 2)
(RSP + -24) PTRSUB RSP -24
+crypto COPY +crypto
 BRANCH VZERO
0 INT_EQUAL [(Symbol + (ARG1 * 24))] 0
 CBRANCH ([(Symbol + (ARG1 * 24))] INT_EQUAL 0)
(RSP + -24) PTRSUB RSP -24
-crypto COPY -crypto
(RSP + -24) PTRSUB RSP -24
-neon COPY -neon
 CBRANCH ([((ARG1 * 24) + 6878612)] INT_EQUAL 2)
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
Symbol COPY Symbol
0 INT_EQUAL [((ARG1 * 24) + 6878612)] 0
+fp-only-sp COPY +fp-only-sp
 BRANCH VZERO
 CBRANCH ([((ARG1 * 24) + 6878612)] INT_EQUAL 0)
Symbol COPY Symbol
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
-fp-only-sp COPY -fp-only-sp
 BRANCH VZERO
0 INT_EQUAL [((ARG1 * 24) + 6878612)] 2
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
-crypto COPY -crypto
+neon COPY +neon
 BRANCH VZERO
0 INT_EQUAL [(Symbol + (ARG1 * 24))] 2
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
Symbol COPY Symbol
-fp-only-sp COPY -fp-only-sp
+fp16 COPY +fp16
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
-fp-armv8 COPY -fp-armv8
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
-vfp2 COPY -vfp2
 BRANCH VZERO
(RSP + -24) PTRSUB RSP -24
-fp-armv8 COPY -fp-armv8
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
-vfp4 COPY -vfp4
-fp16 COPY -fp16
(RSP + -24) PTRSUB RSP -24
-vfp4 COPY -vfp4
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
-vfp4 COPY -vfp4
+vfp3 COPY +vfp3
-fp-armv8 COPY -fp-armv8
 BRANCH VZERO
(RSP + -24) PTRSUB RSP -24
 BRANCH VZERO
+vfp4 COPY +vfp4
-fp16 COPY -fp16
(RSP + -24) PTRSUB RSP -24
-vfp3 COPY -vfp3
 BRANCH VZERO
-fp-armv8 COPY -fp-armv8
-fp16 COPY -fp16
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
+vfp3 COPY +vfp3
+vfp2 COPY +vfp2
+fp-armv8 COPY +fp-armv8
(RSP + -24) PTRSUB RSP -24
 BRANCH VZERO
-vfp4 COPY -vfp4
(RSP + -24) PTRSUB RSP -24
-fp-armv8 COPY -fp-armv8
-vfp3 COPY -vfp3
0 INT_LESS ARG1 34
ARG1 INT_ZEXT ARG1
 CBRANCH (ARG1 INT_LESS 34)
 RETURN 0 f(ARG1 , Symbol)
Symbol PTRSUB 0 Symbol
0 COPY 0
(Symbol + (ARG1 * 40)) PTRADD Symbol (ARG1 * 5) 8
[(Symbol + (ARG1 * 40))] LOAD 433 (Symbol + (ARG1 * 40))
 BRANCH VZERO
(ARG1 * 5) INT_MULT ARG1 5
0 INT_LESS ARG1 34
ARG1 INT_ZEXT ARG1
 CBRANCH (ARG1 INT_LESS 34)
 RETURN 0 f(ARG1 , Symbol)
Symbol PTRSUB 0 Symbol
0 COPY 0
(Symbol + (ARG1 * 40)) PTRADD Symbol (ARG1 * 5) 8
(ARG1 * 5) INT_MULT ARG1 5
 BRANCH VZERO
[(Symbol + (ARG1 * 40))] LOAD 433 (Symbol + (ARG1 * 40))
0 INT_LESS ARG1 34
ARG1 INT_ZEXT ARG1
 RETURN 0 f(ARG1 , Symbol)
 CBRANCH (ARG1 INT_LESS 34)
[(Symbol + (ARG1 * 40))] LOAD 433 (Symbol + (ARG1 * 40))
 BRANCH VZERO
(ARG1 * 5) INT_MULT ARG1 5
Symbol PTRSUB 0 Symbol
0 COPY 0
(Symbol + (ARG1 * 40)) PTRADD Symbol (ARG1 * 5) 8
ARG1 INT_ZEXT ARG1
0 INT_LESS ARG1 34
 CBRANCH (ARG1 INT_LESS 34)
 RETURN 0 f(ARG1 , Symbol)
(ARG1 * 5) INT_MULT ARG1 5
0 COPY 0
 BRANCH VZERO
[(Symbol + (ARG1 * 40))] LOAD 433 (Symbol + (ARG1 * 40))
Symbol PTRSUB 0 Symbol
(Symbol + (ARG1 * 40)) PTRADD Symbol (ARG1 * 5) 8
(Symbol + (ARG1 * 40)) CAST (Symbol + (ARG1 * 40))
0 INT_LESS ARG1 14
ARG1 INT_ZEXT ARG1
 RETURN 0 f(ARG1 , Symbol)
 CBRANCH (ARG1 INT_LESS 14)
[(Symbol + (ARG1 * 16))] LOAD 433 (Symbol + (ARG1 * 16))
Symbol PTRSUB 0 Symbol
0 COPY 0
(Symbol + (ARG1 * 16)) PTRADD Symbol (ARG1 * 2) 8
(ARG1 * 2) INT_MULT ARG1 2
 BRANCH VZERO
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL libcall_memcmp_thunk ARG2 f() 8
 STORE 433 (ARG1 + 16) ARG3
 CBRANCH f()
0 INT_EQUAL [(ARG1 + 16)] 0
 RETURN 0 ARG1
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 8)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CAST f()
0 COPY 0
(ARG1 + 16) CAST (ARG1 + 16)
1 COPY 1
 BRANCH VZERO
0 INT_EQUAL f() 8
f(ARG1) CALL func ARG1 ARG2 ARG6 ARG2
f(ARG1) CALL func f(ARG1) ARG3 ARG6 f(ARG1)
f(ARG1) CALL func f(ARG1) ARG4 ARG6 f(ARG1)
 CALL func f(ARG1) ARG5 ARG6 f(ARG1)
 RETURN 0
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL libcall_memcmp_thunk ARG2 f() 10
 STORE 433 (ARG1 + 16) ARG3
 RETURN 0 ARG1
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH f()
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
0 INT_EQUAL f() 10
 CBRANCH (f() INT_EQUAL 10)
f() CAST f()
0 INT_EQUAL f() 0
(ARG1 + 16) CAST (ARG1 + 16)
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL libcall_memcmp_thunk ARG2 f() 12
 STORE 433 (ARG1 + 16) ARG3
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH f()
 RETURN 0 ARG1
0 INT_EQUAL [(ARG1 + 16)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL f() 12
0 COPY 0
 CBRANCH (f() INT_EQUAL 12)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CAST f()
(ARG1 + 16) CAST (ARG1 + 16)
 BRANCH VZERO
1 COPY 1
f(ARG1) CALL func ARG1 ARG2 ARG4 ARG2
 CALL func f(ARG1) ARG3 ARG4 f(ARG1)
 RETURN 0
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL libcall_memcmp_thunk ARG2 f() 11
 STORE 433 (ARG1 + 16) ARG3
 CBRANCH f()
0 INT_EQUAL [(ARG1 + 16)] 0
 RETURN 0 ARG1
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 11)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CAST f()
0 COPY 0
(ARG1 + 16) CAST (ARG1 + 16)
1 COPY 1
 BRANCH VZERO
0 INT_EQUAL f() 11
f(ARG1) CALL func ARG1 ARG2 ARG4 ARG2
 CALL func f(ARG1) ARG3 ARG4 f(ARG1)
 RETURN 0
ARG1 COPY ARG1
ARG2 COPY ARG2
(RSP + -104) PTRSUB RSP -104
(RSP + -200) PTRSUB RSP -200
f() CALL func f() neon-vfpv3 (RSP + -56) f()
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -120) fpv4-sp-d16
vfpv4 COPY vfpv4
(RSP + -200) PTRSUB RSP -200
fp5-sp-d16 COPY fp5-sp-d16
(RSP + -136) PTRSUB RSP -136
4646094 PTRSUB 0 4646094
f() CALL func f() fp4-sp-d16 vfpv4-sp-d16 (RSP + -120)
 CALL func (RSP + -184) vfpv3
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -184) PTRSUB RSP -184
fpv4-dp-d16 COPY fpv4-dp-d16
fp4-dp-d16 COPY fp4-dp-d16
(RSP + -72) PTRSUB RSP -72
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -104) vfpv4-d16
vfpv3-d16 COPY vfpv3-d16
fpv5-dp-d16 COPY fpv5-dp-d16
 CALL func f() (RSP + -232) f()
(RSP + -232) PTRSUB RSP -232
 CALL func (RSP + -136) vfpv4-d16
(RSP + -184) PTRSUB RSP -184
fp5-dp-d16 COPY fp5-dp-d16
fpv5-sp-d16 COPY fpv5-sp-d16
f() CALL func (RSP + -40) 4646090 4646085 4646080 maverick (RSP + -216)
4646099 PTRSUB 0 4646099
(RSP + -216) PTRSUB RSP -216
vfpv3 COPY vfpv3
 CALL func (RSP + -56) 4644731
maverick COPY maverick
f() CALL func f() fp4-dp-d16 fpv4-dp-d16 (RSP + -104)
(RSP + -120) PTRSUB RSP -120
vfp3-d16 COPY vfp3-d16
fpv5-d16 COPY fpv5-d16
 CALL func (RSP + -200) vfpv2
(RSP + -120) PTRSUB RSP -120
f() CALL func f() 4646104 (RSP + -168) f()
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
invalid COPY invalid
4644731 PTRSUB 0 4644731
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -72) fpv5-d16
40 CAST 40
neon-vfpv3 COPY neon-vfpv3
(RSP + -168) PTRSUB RSP -168
f() CALL func f() fp5-sp-d16 (RSP + -88) f()
f() CALL func f() 4646094 (RSP + -200) f()
40 INT_ADD 0 40
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -152) vfpv3-d16
(RSP + -40) PTRSUB RSP -40
vfpv4-d16 COPY vfpv4-d16
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -216) invalid
4646104 PTRSUB 0 4646104
(RSP + -136) PTRSUB RSP -136
f() CALL func f() vfp3-d16 (RSP + -152) f()
[40] LOAD 433 40
vfpv2 COPY vfpv2
vfp4-d16 COPY vfp4-d16
4646090 PTRSUB 0 4646090
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func f() fp5-dp-d16 fpv5-dp-d16 (RSP + -72)
f() CALL func f() 4646099 (RSP + -184) f()
 CALL func (RSP + -168) vfpv4
vfpv4-d16 COPY vfpv4-d16
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -40) ARG1 ARG2 ARG1
(RSP + -72) PTRSUB RSP -72
4646080 PTRSUB 0 4646080
4646085 PTRSUB 0 4646085
 CALL func (RSP + -88) fpv5-sp-d16
(RSP + -168) PTRSUB RSP -168
f() CALL func f() vfp4-d16 (RSP + -136) f()
(RSP + -40) PTRSUB RSP -40
vfpv4-sp-d16 COPY vfpv4-sp-d16
fpv4-sp-d16 COPY fpv4-sp-d16
(RSP + -88) PTRSUB RSP -88
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
fp4-sp-d16 COPY fp4-sp-d16
(RSP + -216) PTRSUB RSP -216
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
f() CALL func ARG1 ARG2 ARG1
 CBRANCH (f(Symbol) INT_EQUAL 6879120)
0 INT_EQUAL f(Symbol) 6879120
(f() + 40) CAST (f() + 40)
(f() / 2147483647) INT_RIGHT f() 64
Symbol PTRSUB 0 Symbol
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
6879120 PTRSUB 0 6879120
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
6879120 CAST 6879120
(FS_OFFSET + 40) INT_ADD 0 40
[(f() + 40)] LOAD 433 (f() + 40)
(f(Symbol) + 8) PTRADD f(Symbol) 1 8
[(f(Symbol) + 8)] LOAD 433 (f(Symbol) + 8)
[(f(Symbol) + 16)] LOAD 433 (f(Symbol) + 16)
0 COPY 0
[f(Symbol)] LOAD 433 f(Symbol)
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) f() f()
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CALL func (RSP + -56) [f(Symbol)] [f(Symbol)]
(f(Symbol) + 16) PTRADD f(Symbol) 2 8
 BRANCH VZERO
([(f(Symbol) + 8)] & 4294967295) INT_AND [(f(Symbol) + 8)] 4294967295
 BRANCH VZERO
[(f(Symbol) + 8)] CAST [(f(Symbol) + 8)]
(f(Symbol) + 24) PTRADD f(Symbol) 3 8
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(Symbol)
 RETURN 1
f() CALL func ARG1 ARG2 f() f()
 CBRANCH (f(Symbol) INT_EQUAL 6880736)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f(Symbol) 6880736
Symbol PTRSUB 0 Symbol
6880736 PTRSUB 0 6880736
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 CALL func (RSP + -40) [f(Symbol)] [f(Symbol)]
[f(Symbol)] LOAD 433 f(Symbol)
0 COPY 0
(f(Symbol) + 8) PTRADD f(Symbol) 1 8
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
[(f(Symbol) + 8)] LOAD 433 (f(Symbol) + 8)
(RSP + -40) PTRSUB RSP -40
([(f(Symbol) + 8)] & 4294967295) INT_AND [(f(Symbol) + 8)] 4294967295
 BRANCH VZERO
 BRANCH VZERO
[(f(Symbol) + 8)] CAST [(f(Symbol) + 8)]
(f(Symbol) + 16) PTRADD f(Symbol) 2 8
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(Symbol)
 RETURN 1
f() CALL func ARG1 ARG2 f() f()
 CBRANCH (f(Symbol) INT_EQUAL 6882064)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f(Symbol) 6882064
Symbol PTRSUB 0 Symbol
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
(f(Symbol) + 8) PTRADD f(Symbol) 1 8
 CALL func (RSP + -40) [f(Symbol)] [f(Symbol)]
[f(Symbol)] LOAD 433 f(Symbol)
0 COPY 0
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
[(f(Symbol) + 8)] LOAD 433 (f(Symbol) + 8)
(RSP + -40) PTRSUB RSP -40
([(f(Symbol) + 8)] & 4294967295) INT_AND [(f(Symbol) + 8)] 4294967295
 BRANCH VZERO
[(f(Symbol) + 8)] CAST [(f(Symbol) + 8)]
 BRANCH VZERO
(f(Symbol) + 16) PTRADD f(Symbol) 2 8
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(Symbol)
 RETURN 1
 RETURN 0

 RETURN 0
 CALL libcall___gmon_start___thunk
 RETURN 1
0 CAST 0
 CALLIND 0
ARG2 COPY ARG2
 RETURN 0 ARG2
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
(ARG1 + 32) INT_ADD ARG1 32
ARG1 COPY ARG1
([(ARG1 + 32)] & 1) INT_AND [(ARG1 + 32)] 1
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(ARG1 + 32) CAST (ARG1 + 32)
0 INT_NOTEQUAL ([(ARG1 + 32)] & 1) 0
 CBRANCH (([(ARG1 + 32)] & 1) INT_NOTEQUAL 0)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ErrorOr.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ErrorOr.h
 RETURN 0 ARG1
 RETURN 1
 CALL libcall___assert_fail_thunk !HasError && "Cannot get value when an error exists!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ErrorOr.h 263 0
0 COPY 0
!HasError && "Cannot get value when an error exists!" COPY !HasError && "Cannot get value when an error exists!"
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 32) INT_ADD ARG1 32
f(ARG1) CALL func ARG1
 CALL func ARG2
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(ARG1 + 32) CAST (ARG1 + 32)
 STORE 433 (ARG1 + 32) ([(ARG1 + 32)] & 254)
([(ARG1 + 32)] & 254) INT_AND [(ARG1 + 32)] 254
f(ARG1) CALL func 32 f(ARG1)
 RETURN 0
f(ARG1) CAST f(ARG1)
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
(ARG1 + 32) CAST (ARG1 + 32)
0 INT_NOTEQUAL f(ARG1) 0
 CALL libcall_basic_string_thunk f(ARG1)
(ARG1 + 24) PTRADD ARG1 3 8
[ARG1] LOAD 433 ARG1
([ARG1] & -256) INT_AND [ARG1] -256
([ARG1] & -256) INT_OR ([ARG1] & -256) 0
0 INT_EQUAL [ARG1] (ARG1 + 24)
 RETURN 0 ([ARG1] & -256)
[ARG1] CAST [ARG1]
[ARG1] CAST [ARG1]
0 INT_ZEXT 0
 RETURN 0
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func [ARG1] [(ARG1 + 8)] [(ARG1 + 8)]
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 CALL libcall_free_thunk [ARG1]
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 CALL libcall_basic_string_thunk ARG1 [ARG2] [(ARG2 + 8)]
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 1 8
 CBRANCH ([ARG2] INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_EQUAL [ARG2] 0
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
[(ARG2 + 8)] CAST [(ARG2 + 8)]
 CALL libcall_~allocator_thunk (RSP + -17)
(RSP + -17) PTRSUB RSP -17
 CALL libcall_allocator_thunk
 BRANCH VZERO
 CALL libcall_basic_string_thunk
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
 CBRANCH ([ARG1] INT_EQUAL 0)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_EQUAL [ARG1] 0
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (([(ARG1 + 8)] - [ARG1]) INT_NOTEQUAL 0)
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
0 COPY 0
[40] LOAD 433 40
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
(([(ARG1 + 8)] - [ARG1]) # [ARG1]) PIECE ([(ARG1 + 8)] - [ARG1]) [ARG1]
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
0 INT_NOTEQUAL ([(ARG1 + 8)] - [ARG1]) 0
 RETURN 1
 RETURN 0 (([(ARG1 + 8)] - [ARG1]) # [ARG1])
(([(ARG1 + 8)] - [ARG1]) # [ARG1]) COPY (([(ARG1 + 8)] - [ARG1]) # [ARG1])
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 32) INT_ADD ARG1 32
ARG1 COPY ARG1
 CBRANCH (([(ARG1 + 32)] & 1) INT_EQUAL 0)
0 INT_EQUAL ([(ARG1 + 32)] & 1) 0
([(ARG1 + 32)] & 1) INT_AND [(ARG1 + 32)] 1
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(ARG1 + 32) CAST (ARG1 + 32)
0 COPY 0
HasError && "Cannot get error when a value exists!" COPY HasError && "Cannot get error when a value exists!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ErrorOr.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ErrorOr.h
 RETURN 0 ARG1
 RETURN 1
 CALL libcall___assert_fail_thunk HasError && "Cannot get error when a value exists!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ErrorOr.h 273 0
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 2 4
 STORE 433 (ARG1 + 8) ARG3
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
 CALL func (RSP + -56) ARG1 f() ARG1
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
f() CALL libcall_generic_category_thunk
40 CAST 40
(RSP + -56) PTRSUB RSP -56
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) INT_AND (A_Stack[-0x30]:8 # A_Stack[-0x38]:8) -1
 RETURN 1
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 32) INT_ADD ARG1 32
f(ARG1) CALL func ARG1
f() CALL func ARG2
(ARG1 + 32) CAST (ARG1 + 32)
f(ARG1) CAST f(ARG1)
([(ARG1 + 32)] | 1) INT_OR [(ARG1 + 32)] 1
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
f(ARG1) CALL func 16 f(ARG1)
 STORE 433 (ARG1 + 32) ([(ARG1 + 32)] | 1)
 RETURN 0
0 INT_NOTEQUAL f(ARG1) 0
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
(ARG1 + 32) CAST (ARG1 + 32)
(f(ARG1) + 8) CAST (f(ARG1) + 8)
 STORE 433 (f(ARG1) + 8) 0
(f(ARG1) + 8) PTRADD f(ARG1) 2 4
 STORE 433 f(ARG1) f()
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0 ([(ARG1 + 8)] + [ARG1])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + [ARG1]) INT_ADD [(ARG1 + 8)] [ARG1]
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
(ARG2 + ARG3) INT_ADD ARG2 ARG3
 STORE 433 (ARG1 + 8) ARG2
 RETURN 0
 STORE 433 (ARG1 + 16) (ARG2 + ARG3)
(ARG1 + 24) INT_ADD ARG1 24
 CALL func ARG1 (ARG1 + 24) ARG2 (ARG1 + 24)
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 0 [(ARG1 + 16)]
 CALL libcall_memcpy_thunk ARG3 ARG1 (ARG2 - ARG1)
0 INT_NOTEQUAL ARG1 ARG2
ARG1 CAST ARG1
ARG2 CAST ARG2
 CBRANCH (ARG1 INT_NOTEQUAL ARG2)
 RETURN 0
(ARG2 - ARG1) INT_SUB ARG2 ARG1
(ARG2 - ARG1) CAST (ARG2 - ARG1)
(ARG1 + 8) INT_ADD ARG1 8
 STORE 433 (ARG1 + 8) ARG2
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
 RETURN 0
(ARG2 - ARG1) INT_SUB ARG2 ARG1
 RETURN 0 (ARG2 - ARG1)
(ARG2 - ARG1) COPY (ARG2 - ARG1)
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -48) PTRSUB RSP -48
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -48)
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0 ([(ARG1 + 8)] - [ARG1])
([(ARG1 + 8)] - [ARG1]) COPY ([(ARG1 + 8)] - [ARG1])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
[ARG1] LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
 RETURN 0 ([(ARG1 + 16)] - [ARG1])
([(ARG1 + 16)] - [ARG1]) COPY ([(ARG1 + 16)] - [ARG1])
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
f(ARG1) LOAD 433 ARG1
 STORE 433 ARG1 f()
f() CALL func ARG1
f(ARG1) LOAD 433 ARG1
f(ARG1) LOAD 433 ARG1
f(ARG1) LOAD 433 ARG1
0 INT_EQUAL f(ARG1) ARG2
0 INT_LESS (ARG4 + (f() * 2)) ARG3
ARG3 COPY ARG3
(ARG4 + (f() * 2)) INT_ADD ARG4 (f() * 2)
 CBRANCH (f() INT_EQUAL 0)
(f() * 2) INT_MULT f() 2
0 INT_EQUAL f() 0
 CBRANCH (f(ARG1) INT_EQUAL ARG2)
 CBRANCH ((ARG4 + (f() * 2)) INT_LESS ARG3)
f(ARG1) CAST f(ARG1)
 RETURN 0
(f(ARG1) + f(ARG3 , ARG4)) CAST (f(ARG1) + f(ARG3 , ARG4))
(f() + f()) CAST (f() + f())
f() CAST f()
NewElts && "Out of memory" COPY NewElts && "Out of memory"
 STORE 433 (ARG1 + 16) (f(ARG1) + f(ARG3 , ARG4))
 STORE 433 (ARG1 + 8) (f() + f())
0 COPY 0
(f() + f()) INT_ADD f() f()
(f(ARG1) + f(ARG3 , ARG4)) INT_ADD f(ARG1) f(ARG3 , ARG4)
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallVector.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallVector.cpp
 CALL libcall___assert_fail_thunk NewElts && "Out of memory" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallVector.cpp 36 0
f() CALL libcall_realloc_thunk f(ARG1) f(ARG3 , ARG4)
 BRANCH VZERO
f() CALL libcall_malloc_thunk f(ARG3 , ARG4)
 CALL libcall_memcpy_thunk f() f(ARG1) f()
(ARG1 + 24) INT_ADD ARG1 24
 CALL func ARG1 (ARG1 + 24) ARG2 ARG3
 RETURN 0
 CALL func ARG1 ARG2 1 ARG2
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
 CALL func ARG1 ([(ARG1 + 8)] + f()) ([(ARG1 + 8)] + f())
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 (([(ARG1 + 8)] - [ARG1]) + f()) (([(ARG1 + 8)] - [ARG1]) + f())
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
f() CALL func ARG2 ARG3 ARG3
 CALL func ARG2 ARG3 [(ARG1 + 8)] 0
(f() - [(ARG1 + 8)]) CAST (f() - [(ARG1 + 8)])
0 INT_LESS (f() - [(ARG1 + 8)]) f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() - [(ARG1 + 8)]) INT_SUB f() [(ARG1 + 8)]
 CBRANCH ((f() - [(ARG1 + 8)]) INT_LESS f())
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + f()) INT_ADD [(ARG1 + 8)] f()
 RETURN 0
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
(([(ARG1 + 8)] - [ARG1]) + f()) INT_ADD ([(ARG1 + 8)] - [ARG1]) f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func ARG1 128
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
 RETURN 0
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -56)
 CALL func ARG1 f() f() f()
f() CALL func (RSP + -56)
 CALL func ARG1 ([(ARG1 + 8)] + -1) ([(ARG1 + 8)] + -1)
(ARG1 + 8) INT_ADD ARG1 8
([(ARG1 + 8)] + -1) INT_ADD [(ARG1 + 8)] -1
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func ARG1 0
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1 ([(ARG1 + 8)] + 1) ([(ARG1 + 8)] + 1)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
[ARG2] LOAD 433 ARG2
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + 1) INT_ADD [(ARG1 + 8)] 1
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_LESSEQUAL [(ARG1 + 16)] [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 [(ARG1 + 8)] [ARG2]
 CBRANCH ([(ARG1 + 16)] INT_LESSEQUAL [(ARG1 + 8)])
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
 CALL func ARG1
 CALL func ARG1
 CALL func ARG1 (RSP + -17) (RSP + -17)
40 CAST 40
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -17) PTRSUB RSP -17
0 COPY 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
(ARG1 + 8) INT_ADD ARG1 8
([(ARG1 + 8)] & -256) INT_AND [(ARG1 + 8)] -256
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_EQUAL [(ARG1 + 8)] 0
 RETURN 0 ([(ARG1 + 8)] & -256)
([(ARG1 + 8)] & -256) INT_OR ([(ARG1 + 8)] & -256) 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_ZEXT 0
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 RETURN 0 (([(ARG1 + 8)] * 16) + [ARG1])
([(ARG1 + 8)] * 16) INT_MULT [(ARG1 + 8)] 16
(([(ARG1 + 8)] * 16) + [ARG1]) INT_ADD ([(ARG1 + 8)] * 16) [ARG1]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[ARG1] LOAD 433 ARG1
ARG2 COPY ARG2
[ARG2] LOAD 433 ARG2
 CBRANCH ([ARG2] INT_LESS [ARG1])
0 INT_LESS [ARG2] [ARG1]
 RETURN 0 f(ARG1 , ARG2)
 BRANCH VZERO
(ARG1 + 16) INT_ADD ARG1 16
 RETURN 0 [(ARG1 + 16)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
(ARG1 + 16) CAST (ARG1 + 16)
f() CALL func ARG1
(f() / 2147483647) SUBPIECE f() 0
(f() & -256) INT_AND f() -256
 RETURN 0 (f() & -256)
0 INT_EQUAL (f() / 2147483647) 1
0 INT_ZEXT 0
(f() & -256) INT_OR (f() & -256) 0
f() CALL func ARG1
(f() & -256) INT_OR (f() & -256) 0
(f() / 2147483647) SUBPIECE f() 0
(f() & -256) INT_AND f() -256
 RETURN 0 (f() & -256)
0 INT_EQUAL (f() / 2147483647) 0
0 INT_ZEXT 0
f() CALL func ARG1
f() CALL func ARG1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 RETURN 0 1
0 COPY 0
 RETURN 0 0
0 INT_EQUAL f() 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1 (ARG1 + 24) ARG2 (ARG1 + 24)
(ARG1 + 24) INT_ADD ARG1 24
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
ARG2 INT_ZEXT ARG2
 CALL func ARG1 (ARG2 * 16) (ARG2 * 16)
 RETURN 0
(ARG2 * 16) INT_LEFT ARG2 4
 CALL func ARG1 4
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG3 COPY ARG3
ARG2 COPY ARG2
ARG1 COPY ARG1
(ARG1 + 8) PTRADD ARG1 1 8
0 INT_EQUAL f(ARG1 , RSP) [(ARG1 + 8)]
(RSP + -48) PTRSUB RSP -48
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f(ARG1 , RSP) CAST f(ARG1 , RSP)
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1 , RSP) CALL func (RSP + -48) (ARG1 + 8) (ARG1 + 8)
 CBRANCH (f(ARG1 , RSP) INT_EQUAL [(ARG1 + 8)])
 CBRANCH ([(f(ARG1 , RSP) + [ARG1])] INT_NOTEQUAL ARG2)
 RETURN 0 -1
(f(ARG1 , RSP) + 1) INT_ADD f(ARG1 , RSP) 1
-1 COPY -1
 RETURN 0 f(ARG1 , RSP)
 BRANCH VZERO
f(ARG1 , RSP) COPY f(ARG1 , RSP)
[(f(ARG1 , RSP) + [ARG1])] LOAD 433 (f(ARG1 , RSP) + [ARG1])
(f(ARG1 , RSP) + [ARG1]) INT_ADD f(ARG1 , RSP) [ARG1]
[ARG1] LOAD 433 ARG1
0 INT_NOTEQUAL [(f(ARG1 , RSP) + [ARG1])] ARG2
(f(ARG1 , RSP) + [ARG1]) CAST (f(ARG1 , RSP) + [ARG1])
(ARG1 + 17) INT_ADD ARG1 17
 RETURN 0 [(ARG1 + 17)]
[(ARG1 + 17)] LOAD 433 (ARG1 + 17)
[(ARG1 + 17)] COPY [(ARG1 + 17)]
(ARG1 + 17) CAST (ARG1 + 17)
f() CALL func ARG1
f() CALL func ARG1
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 1)
 RETURN 0 0
 RETURN 0 1
0 COPY 0
1 COPY 1
0 INT_NOTEQUAL f() 1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
f() CALL func ARG1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH f()
 CBRANCH (f() INT_EQUAL 2)
0 COPY 0
f() CALL func [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
1 COPY 1
 BRANCH VZERO
0 COPY 0
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 0)
 RETURN 0 0
0 COPY 0
0 COPY 0
 RETURN 0 0
0 COPY 0
0 COPY 0
 RETURN 0 ~(f())
 RETURN 0 0
~(f()) COPY ~(f())
~(f()) BOOL_NEGATE f()
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
 CBRANCH ~(f())
 RETURN 0 0
 CBRANCH (f() INT_NOTEQUAL 1)
0 COPY 0
1 COPY 1
 BRANCH VZERO
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH (f() INT_EQUAL 2)
f() CALL func [ARG1]
0 INT_NOTEQUAL f() 1
 BRANCH VZERO
1 COPY 1
~(f()) BOOL_NEGATE f()
0 INT_EQUAL f() 2
~(f()) BOOL_NEGATE f()
 CBRANCH ~(f())
0 INT_EQUAL f() 2
(ARG1 + 16) PTRADD ARG1 2 8
ARG1 CAST ARG1
f() CALL func ARG1
 STORE 433 ARG1 ARG2
 STORE 433 (ARG1 + 17) 1
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 17) INT_ADD ARG1 17
(ARG1 + 17) CAST (ARG1 + 17)
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 STORE 433 (ARG1 + 16) 5
 RETURN 1
 RETURN 0
 CALL libcall___assert_fail_thunk isValid() && "Invalid twine!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h 288 llvm::Twine::Twine(const llvm::StringRef&)
llvm::Twine::Twine(const llvm::StringRef&) COPY llvm::Twine::Twine(const llvm::StringRef&)
isValid() && "Invalid twine!" COPY isValid() && "Invalid twine!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h
0 INT_EQUAL ARG1 47
 RETURN 0 0
0 COPY 0
f() CALL func ARG1
f() CALL func ARG1
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
 RETURN 0 f()
0 COPY 0
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_LESS (f() + 3) 4
0 COPY 0
(f() + 3) INT_SUB f() 3
 CBRANCH ((f() + 3) INT_LESS 4)
 BRANCH VZERO
0 INT_NOTEQUAL f() 0
1 COPY 1
f() INT_ZEXT f()
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 24) PTRADD ARG1 3 8
 STORE 433 ARG1 Symbol
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 32) PTRADD ARG1 4 8
 CBRANCH ([(ARG1 + 24)] INT_EQUAL [(ARG1 + 8)])
Symbol PTRSUB 0 Symbol
0 INT_EQUAL [(ARG1 + 24)] [(ARG1 + 8)]
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 32)] INT_EQUAL 1)
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(ARG1 + 8)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] CAST [(ARG1 + 8)]
 CALL libcall_operator.delete[]_thunk [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 1
 CALL libcall___assert_fail_thunk 0 0 70 0
0 INT_EQUAL [(ARG1 + 32)] 1
 RETURN 0
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
0 COPY 0
0 COPY 0
(ARG1 + 32) CAST (ARG1 + 32)
0 COPY 0
 STORE 433 ARG1 Symbol
 CALL func ARG1
Symbol PTRSUB 0 Symbol
 RETURN 0
 CALL func ARG1
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 24) PTRADD ARG1 3 8
 STORE 433 ARG1 Symbol
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 8) PTRADD ARG1 1 8
0 INT_EQUAL ARG2 0
 STORE 433 (ARG1 + 24) 0
 STORE 433 (ARG1 + 16) [(ARG1 + 24)]
 STORE 433 (ARG1 + 8) [(ARG1 + 16)]
 STORE 433 (ARG1 + 32) 0
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
 RETURN 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
0 INT_ZEXT 0
Symbol PTRSUB 0 Symbol
(ARG1 + 32) CAST (ARG1 + 32)
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol PTRSUB 0 Symbol
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 CALLIND [([ARG1] + 56)] ARG1 [(ARG1 + 8)] ([(ARG1 + 24)] - [(ARG1 + 8)]) ARG1
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
0 INT_LESSEQUAL [(ARG1 + 24)] [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 24)] INT_LESSEQUAL [(ARG1 + 8)])
[(ARG1 + 8)] CAST [(ARG1 + 8)]
[(ARG1 + 24)] CAST [(ARG1 + 24)]
 STORE 433 (ARG1 + 24) [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
 RETURN 1
([ARG1] + 56) CAST ([ARG1] + 56)
([ARG1] + 56) INT_ADD [ARG1] 56
 CALL libcall___assert_fail_thunk 0 0 274 0
0 COPY 0
0 COPY 0
0 COPY 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 24)] - [(ARG1 + 8)]) INT_SUB [(ARG1 + 24)] [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[([ARG1] + 56)] LOAD 433 ([ARG1] + 56)
 RETURN 0
 CALL func ARG1
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0
(ARG1 + 24) CAST (ARG1 + 24)
 CBRANCH ([(ARG1 + 24)] INT_NOTEQUAL [(ARG1 + 8)])
0 INT_NOTEQUAL [(ARG1 + 24)] [(ARG1 + 8)]
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0 ([(ARG1 + 24)] - [(ARG1 + 8)])
([(ARG1 + 24)] - [(ARG1 + 8)]) COPY ([(ARG1 + 24)] - [(ARG1 + 8)])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
([(ARG1 + 24)] - [(ARG1 + 8)]) INT_SUB [(ARG1 + 24)] [(ARG1 + 8)]
(ARG1 + 24) CAST (ARG1 + 24)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 8) INT_ADD ARG1 8
0 INT_EQUAL ARG2 0
0 INT_NOTEQUAL ARG2 0
 STORE 433 (ARG1 + 8) ARG2
([(ARG1 + 8)] + ARG3) INT_ADD [(ARG1 + 8)] ARG3
0 INT_NOTEQUAL ARG3 0
0 INT_EQUAL ARG3 0
0 INT_NOTEQUAL ARG4 0
0 INT_EQUAL ARG4 0
 STORE 433 (ARG1 + 32) ARG4
 CBRANCH (ARG4 INT_NOTEQUAL 0)
 CBRANCH (ARG4 INT_EQUAL 0)
 CBRANCH (ARG2 INT_NOTEQUAL 0)
((Mode == Unbuffered && !BufferStart && Size == 0) || (Mode != Unbuffered && BufferStart && Size != 0)) && "stream must be unbuffered or have at least one byte" COPY ((Mode == Unbuffered && !BufferStart && Size == 0) || (Mode != Unbuffered && BufferStart && Size != 0)) && "stream must be unbuffered or have at least one byte"
 CALL libcall___assert_fail_thunk ((Mode == Unbuffered && !BufferStart && Size == 0) || (Mode != Unbuffered && BufferStart && Size != 0)) && "stream must be unbuffered or have at least one byte" 0 97 0
0 COPY 0
 CBRANCH (ARG2 INT_EQUAL 0)
 RETURN 1
0 COPY 0
 CBRANCH (ARG3 INT_NOTEQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (ARG3 INT_EQUAL 0)
 CBRANCH ([(ARG1 + 32)] INT_EQUAL 1)
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(ARG1 + 8)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL libcall_operator.delete[]_thunk [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 24) CAST (ARG1 + 24)
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 1
0 INT_LESS [(ARG1 + 16)] [(ARG1 + 8)]
 CALL libcall___assert_fail_thunk GetNumBytesInBuffer() == 0 && "Current buffer is non-empty!" 0 100 0
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_LESS [(ARG1 + 8)])
(ARG1 + 32) CAST (ARG1 + 32)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (ARG1 + 24) [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 16) CAST (ARG1 + 16)
0 COPY 0
GetNumBytesInBuffer() == 0 && "Current buffer is non-empty!" COPY GetNumBytesInBuffer() == 0 && "Current buffer is non-empty!"
0 COPY 0
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
0 INT_EQUAL [(ARG1 + 32)] 1
(ARG1 + 32) CAST (ARG1 + 32)
 STORE 433 (ARG1 + 16) ([(ARG1 + 8)] + ARG3)
0 COPY 0
OutBufStart <= OutBufEnd && "Invalid size!" COPY OutBufStart <= OutBufEnd && "Invalid size!"
 RETURN 1
0 COPY 0
 RETURN 0
 CALL libcall___assert_fail_thunk OutBufStart <= OutBufEnd && "Invalid size!" 0 109 0
 CALL func ARG1 0 0 0
 CALL func ARG1
 RETURN 0
(ARG1 + 40) PTRADD ARG1 5 8
 CALL func ARG1
 CALL func ARG1 0
 STORE 433 ARG1 Symbol
 STORE 433 (ARG1 + 40) ARG2
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 24) INT_ADD ARG1 24
(ARG2 + 1) PTRADD ARG2 1 1
(ARG2 + 2) PTRADD ARG2 2 1
(ARG2 + 3) PTRADD ARG2 3 1
[ARG2] LOAD 433 ARG2
 CALL libcall_memcpy_thunk [(ARG1 + 24)] ARG2 ARG3
 BRANCHIND ARG3
0 INT_LESS ([(ARG1 + 16)] - [(ARG1 + 24)]) ARG3
([(ARG1 + 24)] + ARG3) INT_ADD [(ARG1 + 24)] ARG3
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH (([(ARG1 + 16)] - [(ARG1 + 24)]) INT_LESS ARG3)
(ARG1 + 16) CAST (ARG1 + 16)
([(ARG1 + 16)] - [(ARG1 + 24)]) INT_SUB [(ARG1 + 16)] [(ARG1 + 24)]
(ARG1 + 24) CAST (ARG1 + 24)
([(ARG1 + 16)] - [(ARG1 + 24)]) CAST ([(ARG1 + 16)] - [(ARG1 + 24)])
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
0 COPY 0
0 COPY 0
0 COPY 0
 RETURN 0
 RETURN 1
 CALL libcall___assert_fail_thunk 0 0 344 0
(ARG1 + 24) CAST (ARG1 + 24)
 STORE 433 (ARG1 + 24) ([(ARG1 + 24)] + ARG3)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
([(ARG1 + 24)] + 3) INT_ADD [(ARG1 + 24)] 3
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
 STORE 433 ([(ARG1 + 24)] + 1) [(ARG2 + 1)]
([(ARG1 + 24)] + 1) CAST ([(ARG1 + 24)] + 1)
[(ARG2 + 1)] LOAD 433 (ARG2 + 1)
(ARG1 + 24) CAST (ARG1 + 24)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
 BRANCH VZERO
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
 STORE 433 [(ARG1 + 24)] [ARG2]
 STORE 433 ([(ARG1 + 24)] + 3) [(ARG2 + 3)]
[(ARG2 + 3)] LOAD 433 (ARG2 + 3)
([(ARG1 + 24)] + 3) CAST ([(ARG1 + 24)] + 3)
([(ARG1 + 24)] + 2) CAST ([(ARG1 + 24)] + 2)
([(ARG1 + 24)] + 2) INT_ADD [(ARG1 + 24)] 2
 STORE 433 ([(ARG1 + 24)] + 2) [(ARG2 + 2)]
[(ARG2 + 2)] LOAD 433 (ARG2 + 2)
 BRANCH VZERO
([(ARG1 + 24)] + 1) INT_ADD [(ARG1 + 24)] 1
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
 CALL func ARG1
 CALL func ARG1 f() ARG2 1
f() CALL libcall_operator.new[]_thunk ARG2
 RETURN 0
[ARG1] LOAD 433 ARG1
 CALL func ARG1 VZERO VZERO
 CALL func ARG1
VZERO CALLIND [([ARG1] + 80)] ARG1 ARG2 ARG1
 CBRANCH (VZERO INT_EQUAL 0)
[([ARG1] + 80)] LOAD 433 ([ARG1] + 80)
([ARG1] + 80) CAST ([ARG1] + 80)
0 INT_EQUAL VZERO 0
 RETURN 0
([ARG1] + 80) INT_ADD [ARG1] 80
 BRANCH VZERO
(ARG1 + 24) PTRADD ARG1 3 8
f() CALL func ARG1 (ARG2 + (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)])))) (ARG3 - (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)])))) (ARG2 + (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)]))))
 CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 (ARG2 + (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)])))) (ARG3 - (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)])))) (ARG2 + (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)]))))
[ARG1] LOAD 433 ARG1
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 16) PTRADD ARG1 2 8
f() CALL func ARG1 ARG2 ARG3 ARG2
(ARG1 + 24) PTRADD ARG1 3 8
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1
 CALLIND [([ARG1] + 56)] ARG1 ARG2 ARG3 ARG1
 CALL func ARG1 ARG2 ARG3 ARG2
(ARG1 + 32) PTRADD ARG1 4 8
 CALLIND [([ARG1] + 56)] ARG1 ARG2 (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)]))) ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 24) PTRADD ARG1 3 8
 CALL func ARG1 ARG2 ([(ARG1 + 16)] - [(ARG1 + 24)]) ARG2
f() CALL func ARG1 (ARG2 + ([(ARG1 + 16)] - [(ARG1 + 24)])) (ARG3 - ([(ARG1 + 16)] - [(ARG1 + 24)])) (ARG2 + ([(ARG1 + 16)] - [(ARG1 + 24)]))
(ARG2 + (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)])))) INT_ADD ARG2 (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)])))
(ARG2 + (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)])))) INT_ADD ARG2 (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)])))
(ARG2 + ([(ARG1 + 16)] - [(ARG1 + 24)])) INT_ADD ARG2 ([(ARG1 + 16)] - [(ARG1 + 24)])
0 INT_LESS ([(ARG1 + 16)] - [(ARG1 + 24)]) ARG3
(ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)])) INT_REM ARG3 ([(ARG1 + 16)] - [(ARG1 + 24)])
(ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)]))) INT_SUB ARG3 (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)]))
(ARG3 - ([(ARG1 + 16)] - [(ARG1 + 24)])) INT_SUB ARG3 ([(ARG1 + 16)] - [(ARG1 + 24)])
(ARG3 - (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)])))) INT_SUB ARG3 (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)])))
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
 CBRANCH (([(ARG1 + 16)] - [(ARG1 + 24)]) INT_LESS ARG3)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 16)] - [(ARG1 + 24)]) INT_SUB [(ARG1 + 16)] [(ARG1 + 24)]
([(ARG1 + 16)] - [(ARG1 + 24)]) CAST ([(ARG1 + 16)] - [(ARG1 + 24)])
 CBRANCH ([(ARG1 + 24)] INT_EQUAL [(ARG1 + 8)])
 RETURN 0 f(ARG1)
f() CAST f()
 CBRANCH (([(ARG1 + 16)] - [(ARG1 + 24)]) INT_EQUAL 0)
 BRANCH VZERO
0 INT_EQUAL ([(ARG1 + 16)] - [(ARG1 + 24)]) 0
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
0 INT_EQUAL [(ARG1 + 24)] [(ARG1 + 8)]
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(ARG1 + 32) CAST (ARG1 + 32)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
([(ARG1 + 16)] - [(ARG1 + 24)]) INT_SUB [(ARG1 + 16)] [(ARG1 + 24)]
 CBRANCH ([(ARG1 + 32)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 32)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
([ARG1] + 56) INT_ADD [ARG1] 56
[([ARG1] + 56)] LOAD 433 ([ARG1] + 56)
 BRANCH VZERO
([ARG1] + 56) CAST ([ARG1] + 56)
f() CAST f()
[([ARG1] + 56)] LOAD 433 ([ARG1] + 56)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
0 COPY 0
NumBytes != 0 && "undefined behavior" COPY NumBytes != 0 && "undefined behavior"
0 COPY 0
([(ARG1 + 16)] - [(ARG1 + 24)]) INT_SUB [(ARG1 + 16)] [(ARG1 + 24)]
 RETURN 1
 CALL libcall___assert_fail_thunk NumBytes != 0 && "undefined behavior" 0 319 0
([ARG1] + 56) CAST ([ARG1] + 56)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 16)] - [(ARG1 + 24)]) CAST ([(ARG1 + 16)] - [(ARG1 + 24)])
 CBRANCH f(ARG1 , ARG3)
([ARG1] + 56) INT_ADD [ARG1] 56
0 INT_LESS ([(ARG1 + 16)] - [(ARG1 + 24)]) (ARG3 - (ARG3 - (ARG3 % ([(ARG1 + 16)] - [(ARG1 + 24)]))))
0 INT_EQUAL [(ARG1 + 8)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
 BRANCH VZERO
f() CAST f()
 CALL func ARG1 f() ([(ARG2 + 8)] - [ARG2]) f()
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 1 8
f() CALL func ARG2 ARG2 ([(ARG2 + 8)] - [ARG2])
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 RETURN 0
([(ARG2 + 8)] - [ARG2]) INT_SUB [(ARG2 + 8)] [ARG2]
ARG2 COPY ARG2
(ARG1 + 16) PTRADD ARG1 2 8
ARG1 COPY ARG1
(ARG1 + 32) PTRADD ARG1 4 8
[ARG1] LOAD 433 ARG1
 CALL func ARG1
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 8) PTRADD ARG1 1 8
 CALLIND [([ARG1] + 56)] ARG1 (RSP + -20) 1 ARG1
 CALL func ARG1
0 INT_LESSEQUAL [(ARG1 + 16)] [(ARG1 + 24)]
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_LESSEQUAL [(ARG1 + 24)])
[(ARG1 + 24)] CAST [(ARG1 + 24)]
[(ARG1 + 16)] CAST [(ARG1 + 16)]
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
f() COPY f()
[(f(ARG1) + 24)] CAST [(f(ARG1) + 24)]
(f(ARG1) + 24) PTRADD f(ARG1) 3 8
(ARG1 + 32) CAST (ARG1 + 32)
 STORE 433 (f(ARG1) + 24) ([(f(ARG1) + 24)] + 1)
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(f(ARG1) + 24) PTRADD f(ARG1) 3 8
f(ARG1) COPY f(ARG1)
 RETURN 0 ARG1
([(f(ARG1) + 24)] + 1) CAST ([(f(ARG1) + 24)] + 1)
 RETURN 0 f()
([(f(ARG1) + 24)] + 1) PTRADD [(f(ARG1) + 24)] 1 1
 STORE 433 [(f(ARG1) + 24)] f(ARG2)
 CBRANCH ([(ARG1 + 32)] INT_EQUAL 0)
[(f(ARG1) + 24)] LOAD 433 (f(ARG1) + 24)
 RETURN 0 f(ARG1)
0 INT_EQUAL [(ARG1 + 32)] 0
ARG1 COPY ARG1
[([ARG1] + 56)] LOAD 433 ([ARG1] + 56)
([ARG1] + 56) CAST ([ARG1] + 56)
f() CALL func ARG1 ARG2 ARG2
f() CAST f()
(RSP + -20) PTRSUB RSP -20
([ARG1] + 56) INT_ADD [ARG1] 56
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_EQUAL [(ARG1 + 8)] 0
(ARG1 + 24) INT_ADD ARG1 24
f(ARG1) CALL func ARG1 ARG2 ARG2
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 24) INT_ADD ARG1 24
 STORE 433 [(ARG1 + 24)] ARG2
 RETURN 0 f(ARG1)
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ([(ARG1 + 24)] INT_LESS [(ARG1 + 16)])
0 INT_LESS [(ARG1 + 24)] [(ARG1 + 16)]
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 24) CAST (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
 BRANCH VZERO
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
 STORE 433 (ARG1 + 24) ([(ARG1 + 24)] + 1)
([(ARG1 + 24)] + 1) PTRADD [(ARG1 + 24)] 1 1
 CALL func ARG1 f(RSP) ((~(f(RSP)) + 1) + (RSP + -20)) f(RSP)
 CALL func ARG1 48
ARG2 COPY ARG2
0 INT_EQUAL ARG2 0
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
 CBRANCH (ARG2 INT_EQUAL 0)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -21) PTRSUB RSP -21
(RSP + -20) PTRADD (RSP + -21) 1 1
(RSP + -20) COPY (RSP + -20)
f(RSP) CAST f(RSP)
((~(f(RSP)) + 1) + (RSP + -20)) PTRADD (RSP + -20) (~(f(RSP)) + 1) 1
(~(f(RSP)) + 1) INT_2COMP f(RSP)
 BRANCH VZERO
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG2) 0
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(f(ARG2) / 21474836470) SUBPIECE (f(ARG2) / 10) 0
(((f(ARG2) / 10) * 4) / 2147483647) SUBPIECE ((f(ARG2) / 10) * 4) 0
((f(ARG2) / 2147483647) + (((((f(ARG2) / 10) * 4) / 2147483647) + (f(ARG2) / 21474836470)) * 254)) INT_ADD (f(ARG2) / 2147483647) (((((f(ARG2) / 10) * 4) / 2147483647) + (f(ARG2) / 21474836470)) * 254)
(f(ARG2) / 10) INT_DIV f(ARG2) 10
(f(ARG2) / 10) INT_DIV f(ARG2) 10
(f(ARG2) / 2147483647) SUBPIECE f(ARG2) 0
 STORE 433 (f(RSP) + -1) f(ARG2)
(((((f(ARG2) / 10) * 4) / 2147483647) + (f(ARG2) / 21474836470)) * 254) INT_MULT ((((f(ARG2) / 10) * 4) / 2147483647) + (f(ARG2) / 21474836470)) 254
f(ARG2) INT_ADD ((f(ARG2) / 2147483647) + (((((f(ARG2) / 10) * 4) / 2147483647) + (f(ARG2) / 21474836470)) * 254)) 48
 BRANCH VZERO
(f(RSP) + -1) PTRADD f(RSP) -1 1
((f(ARG2) / 10) * 4) INT_LEFT (f(ARG2) / 10) 2
((((f(ARG2) / 10) * 4) / 2147483647) + (f(ARG2) / 21474836470)) INT_ADD (((f(ARG2) / 10) * 4) / 2147483647) (f(ARG2) / 21474836470)
 CALL func ARG1 f(ARG2) f(ARG2)
 CALL func ARG1 45
0 INT_SLESS ARG2 0
(~(ARG2) + 1) INT_2COMP ARG2
ARG2 COPY ARG2
 CBRANCH (ARG2 INT_SLESS 0)
 RETURN 0
 CALL func ARG1 ARG2 ARG2
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
40 CAST 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0
 CALL func ARG1 f(ARG2) f(ARG2)
 CALL func ARG1 45
0 INT_SLESS ARG2 0
(~(ARG2) + 1) INT_2COMP ARG2
ARG2 COPY ARG2
 CBRANCH (ARG2 INT_SLESS 0)
 RETURN 0
 CALL func ARG1 48
 CALL func ARG1 f(RSP) ((~(f(RSP)) + 1) + (RSP + -20)) f(RSP)
0 INT_EQUAL ARG2 0
ARG2 COPY ARG2
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
 CBRANCH (ARG2 INT_EQUAL 0)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
 CBRANCH ((15 & (f(ARG2) / 2147483647)) INT_LESS 10)
((15 & (f(ARG2) / 2147483647)) / 2147483647) SUBPIECE (15 & (f(ARG2) / 2147483647)) 0
 STORE 433 (f(RSP) + -1) f(ARG2)
(15 & (f(ARG2) / 2147483647)) INT_AND (f(ARG2) / 2147483647) 15
(f(ARG2) / 2147483647) SUBPIECE f(ARG2) 0
 BRANCH VZERO
(f(RSP) + -1) PTRADD f(RSP) -1 1
0 INT_LESS (15 & (f(ARG2) / 2147483647)) 10
0 INT_NOTEQUAL f(ARG2) 0
(f(ARG2) / 16) INT_RIGHT f(ARG2) 4
 BRANCH VZERO
(~(f(RSP)) + 1) INT_2COMP f(RSP)
f(RSP) CAST f(RSP)
(RSP + -21) PTRSUB RSP -21
(RSP + -20) PTRADD (RSP + -21) 1 1
((~(f(RSP)) + 1) + (RSP + -20)) PTRADD (RSP + -20) (~(f(RSP)) + 1) 1
(RSP + -20) COPY (RSP + -20)
(((15 & (f(ARG2) / 2147483647)) / 2147483647) + 48) INT_ADD ((15 & (f(ARG2) / 2147483647)) / 2147483647) 48
(((15 & (f(ARG2) / 2147483647)) / 2147483647) + 87) INT_ADD ((15 & (f(ARG2) / 2147483647)) / 2147483647) 87
 BRANCH VZERO
 CALL func ARG1 f() f() f() ARG5 ARG6 ARG2
f() CALL libcall_length_thunk
f() CALL libcall_data_thunk
 RETURN 0
 CALL func ARG1 ARG2 ARG2
ARG2 INT_SEXT ARG2
 RETURN 0
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
0 INT_EQUAL ARG2 0
f() CALL libcall_strlen_thunk ARG2
 CBRANCH (ARG2 INT_EQUAL 0)
llvm::StringRef::StringRef(const char*) COPY llvm::StringRef::StringRef(const char*)
Str && "StringRef cannot be built from a NULL argument" COPY Str && "StringRef cannot be built from a NULL argument"
 CALL libcall___assert_fail_thunk Str && "StringRef cannot be built from a NULL argument" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 73 llvm::StringRef::StringRef(const char*)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
f() CAST f()
 RETURN 0
 RETURN 1
 STORE 433 (ARG1 + 8) f()
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 24) INT_ADD ARG1 24
f(ARG1) CALL func ARG1 ARG2 ARG3 ARG2
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 24) INT_ADD ARG1 24
 CALL libcall_memcpy_thunk [(ARG1 + 24)] ARG2 ARG3
0 INT_LESS ([(ARG1 + 16)] - [(ARG1 + 24)]) ARG3
([(ARG1 + 24)] + ARG3) INT_ADD [(ARG1 + 24)] ARG3
0 INT_NOTEQUAL ARG3 0
([(ARG1 + 16)] - [(ARG1 + 24)]) CAST ([(ARG1 + 16)] - [(ARG1 + 24)])
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 24) CAST (ARG1 + 24)
 RETURN 0 f(ARG1)
 CBRANCH (([(ARG1 + 16)] - [(ARG1 + 24)]) INT_LESS ARG3)
([(ARG1 + 16)] - [(ARG1 + 24)]) INT_SUB [(ARG1 + 16)] [(ARG1 + 24)]
 CBRANCH (ARG3 INT_NOTEQUAL 0)
(ARG1 + 24) CAST (ARG1 + 24)
 STORE 433 (ARG1 + 24) ([(ARG1 + 24)] + ARG3)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
 BRANCH VZERO
 CALL func ARG1 A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
 CALL func (RSP + -40) ARG2 ARG2
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -40) PTRSUB RSP -40
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
40 CAST 40
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 BRANCHIND ARG4
 CALL func ARG2 [ARG3] [ARG3]
 CALL func ARG2 ARG3 ARG3
 CALL func ARG2 [ARG3] [ARG3]
 CALL func ARG2 ARG3 ARG3
 CALL func ARG2 (ARG3 & 4294967295) (ARG3 & 4294967295)
 CALL func ARG2 [ARG3] [ARG3]
 CALL func ARG2 ARG3 ARG3
 CALL func ARG2 [ARG3] [(ARG3 + 8)] [ARG3]
 CALL func ARG2 (ARG3 & 4294967295) (ARG3 & 4294967295)
 CALL func ARG2 [ARG3] [ARG3]
 CALL func ARG2 [ARG3] [ARG3]
 CALL func ARG2 (ARG3 / 2147483647) (ARG3 / 2147483647)
 CALL func ARG3 ARG2 ARG2
[ARG3] LOAD 433 ARG3
[ARG3] LOAD 433 ARG3
ARG3 CAST ARG3
(ARG3 / 2147483647) SUBPIECE ARG3 0
ARG3 CAST ARG3
[ARG3] LOAD 433 ARG3
ARG3 CAST ARG3
[ARG3] LOAD 433 ARG3
[ARG3] LOAD 433 ARG3
ARG3 CAST ARG3
(ARG3 + 8) PTRADD ARG3 1 8
[ARG3] LOAD 433 ARG3
 RETURN 0
 BRANCH VZERO
 BRANCH VZERO
(ARG3 & 4294967295) INT_AND ARG3 4294967295
 BRANCH VZERO
(ARG3 & 4294967295) INT_AND ARG3 4294967295
(ARG3 & 4294967295) INT_AND ARG3 4294967295
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
 BRANCH VZERO
 BRANCH VZERO
(ARG3 & 4294967295) INT_AND ARG3 4294967295
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
(ARG3 / 2147483647) INT_SEXT (ARG3 / 2147483647)
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
 CALL func ARG1 ARG2 [ARG1] f()
 CALL func ARG1 ARG2 [(ARG1 + 8)] f()
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func ARG1 (RSP + -72) (RSP + -72)
 CALL func (RSP + -72) ARG2 ARG2
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
[40] LOAD 433 40
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -72) PTRSUB RSP -72
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (RSP + -72)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
f() CALL libcall_close_thunk ARG1
(RSP + -296) CAST (RSP + -296)
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -296) PTRSUB RSP -296
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
f() CALL libcall_sigfillset_thunk (RSP + -296)
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_SLESS 0)
0 INT_SLESS f() 0
 CBRANCH (f() INT_EQUAL 0)
(RSP + -168) CAST (RSP + -168)
0 INT_EQUAL f() 0
(RSP + -312) PTRSUB RSP -312
(RSP + -296) PTRSUB RSP -296
(RSP + -168) PTRADD (RSP + -296) 128 1
 CALL func (RSP + -312) f() f() f()
0 COPY 0
f() CALL libcall_pthread_sigmask_thunk 2 (RSP + -168) 0
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_generic_category_thunk
0 INT_SLESS f() 0
 BRANCH VZERO
 CBRANCH (f() INT_SLESS 0)
f() CALL libcall_generic_category_thunk
 BRANCH VZERO
(RSP + -312) PTRSUB RSP -312
(RSP + -312) PTRSUB RSP -312
 CALL func (RSP + -312) f() f() f()
f() CALL libcall_generic_category_thunk
 CALL func (RSP + -312) f() f() f()
f() CALL libcall_pthread_sigmask_thunk 2 (RSP + -296) (RSP + -168)
0 INT_EQUAL f() 0
(RSP + -312) PTRSUB RSP -312
[f()] LOAD 433 f()
 CALL func (RSP + -312) [f()] f() [f()]
(RSP + -296) CAST (RSP + -296)
f() CALL libcall___errno_location_thunk
 BRANCH VZERO
(RSP + -168) CAST (RSP + -168)
(RSP + -296) PTRSUB RSP -296
f() CALL libcall_generic_category_thunk
(RSP + -296) PTRSUB RSP -296
(RSP + -168) PTRADD (RSP + -296) 128 1
(f() # f()) PIECE f() f()
 RETURN 1
 RETURN 0 (f() # f())
 CALL libcall___stack_chk_fail_thunk
(f() # f()) INT_AND (f() # f()) -1
f() CALL libcall___errno_location_thunk
[f()] LOAD 433 f()
(ARG1 + 41) INT_ADD ARG1 41
[(ARG1 + 41)] LOAD 433 (ARG1 + 41)
[(ARG1 + 41)] COPY [(ARG1 + 41)]
(ARG1 + 41) CAST (ARG1 + 41)
 RETURN 0 [(ARG1 + 41)]
(ARG1 + 41) INT_ADD ARG1 41
 RETURN 0
 STORE 433 (ARG1 + 41) 1
(ARG1 + 41) CAST (ARG1 + 41)
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 ARG2
f() CALL func ARG1
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
[ARG2] LOAD 433 ARG2
 CBRANCH ([ARG2] INT_EQUAL 0)
 STORE 433 (ARG1 + 17) 1
0 INT_EQUAL [ARG2] 0
(ARG1 + 17) INT_ADD ARG1 17
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
(ARG1 + 17) CAST (ARG1 + 17)
 STORE 433 (ARG1 + 16) 3
 STORE 433 (ARG1 + 16) 1
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 BRANCH VZERO
 RETURN 0
isValid() && "Invalid twine!" COPY isValid() && "Invalid twine!"
 CALL libcall___assert_fail_thunk isValid() && "Invalid twine!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h 274 llvm::Twine::Twine(const char*)
llvm::Twine::Twine(const char*) COPY llvm::Twine::Twine(const char*)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h
 RETURN 1
ARG1 COPY ARG1
 CALL func ARG2 ARG1 ARG1
 RETURN 0 ARG1
 RETURN 0
 RETURN 0 1
1 COPY 1
[ARG1] LOAD 433 ARG1
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
llvm::sys::MutexImpl::~MutexImpl() COPY llvm::sys::MutexImpl::~MutexImpl()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp
 RETURN 0
 CALL libcall_free_thunk [ARG1]
mutex != nullptr COPY mutex != nullptr
 RETURN 1
 CALL libcall_pthread_mutex_destroy_thunk [ARG1]
 CALL libcall___assert_fail_thunk mutex != nullptr /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp 78 llvm::sys::MutexImpl::~MutexImpl()
 CALL func ARG1
 RETURN 0
 STORE 433 ARG1 0
 STORE 433 ARG1 f()
0 INT_NOTEQUAL ARG2 0
0 INT_NOTEQUAL f() 0
f() CALL libcall_malloc_thunk 40
(RSP + -20) PTRSUB RSP -20
f() CAST f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL libcall_pthread_mutexattr_init_thunk (RSP + -20)
 CBRANCH (f() INT_NOTEQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL 0)
40 INT_ADD 0 40
 CALL libcall___assert_fail_thunk errorcode == 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp 68 llvm::sys::MutexImpl::MutexImpl(bool)
errorcode == 0 COPY errorcode == 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp
 RETURN 1
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
llvm::sys::MutexImpl::MutexImpl(bool) COPY llvm::sys::MutexImpl::MutexImpl(bool)
[40] LOAD 433 40
 CBRANCH (f() INT_NOTEQUAL 0)
llvm::sys::MutexImpl::MutexImpl(bool) COPY llvm::sys::MutexImpl::MutexImpl(bool)
f() CALL libcall_pthread_mutexattr_destroy_thunk (RSP + -20)
errorcode == 0 COPY errorcode == 0
 CALL libcall___assert_fail_thunk errorcode == 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp 64 llvm::sys::MutexImpl::MutexImpl(bool)
0 INT_NOTEQUAL f() 0
(RSP + -20) PTRSUB RSP -20
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp
 RETURN 1
 CBRANCH (f() INT_NOTEQUAL 0)
errorcode == 0 COPY errorcode == 0
 CALL libcall___assert_fail_thunk errorcode == 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp 60 llvm::sys::MutexImpl::MutexImpl(bool)
(RSP + -20) PTRSUB RSP -20
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp
f() CALL libcall_pthread_mutex_init_thunk f() (RSP + -20)
0 INT_NOTEQUAL f() 0
llvm::sys::MutexImpl::MutexImpl(bool) COPY llvm::sys::MutexImpl::MutexImpl(bool)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
0 INT_ZEXT 0
errorcode == 0 COPY errorcode == 0
f() CALL libcall_pthread_mutexattr_settype_thunk (RSP + -20) 0
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp
(RSP + -20) PTRSUB RSP -20
0 INT_NOTEQUAL f() 0
 CALL libcall___assert_fail_thunk errorcode == 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp 54 llvm::sys::MutexImpl::MutexImpl(bool)
llvm::sys::MutexImpl::MutexImpl(bool) COPY llvm::sys::MutexImpl::MutexImpl(bool)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 12) INT_ADD ARG1 12
 CALL func ARG1 ARG2 ARG2
 STORE 433 (ARG1 + 12) ARG2
(ARG1 + 12) CAST (ARG1 + 12)
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) 0
 RETURN 0
 RETURN 0 Symbol
Symbol PTRSUB 0 Symbol
f() COPY f()
 CBRANCH (VZERO INT_EQUAL 0)
0 INT_EQUAL VZERO 0
6960840 PTRSUB 0 6960840
f() CALL libcall___cxa_guard_acquire_thunk 6960840
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
6960848 PTRSUB 0 6960848
4286722 PTRSUB 0 4286722
6960440 PTRSUB 0 6960440
 CALL libcall___cxa_guard_release_thunk 6960840
 CALL libcall___cxa_atexit_thunk 4286722 6960848 6960440
 CALL func 6960848 1
6960848 PTRSUB 0 6960848
6960840 PTRSUB 0 6960840
[ARG1] LOAD 433 ARG1
0 INT_EQUAL [ARG1] 0
 CBRANCH ([ARG1] INT_EQUAL 0)
 RETURN 1
f() CALL libcall_pthread_mutex_lock_thunk [ARG1]
0 INT_ZEXT 0
(0 # f()) PIECE 0 f()
 CALL libcall___assert_fail_thunk mutex != nullptr /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp 87 bool llvm::sys::MutexImpl::acquire()
 RETURN 0 (-256 & (0 # f()))
0 INT_EQUAL f() 0
(-256 & (0 # f())) INT_OR (-256 & (0 # f())) 0
bool llvm::sys::MutexImpl::acquire() COPY bool llvm::sys::MutexImpl::acquire()
(-256 & (0 # f())) INT_AND (0 # f()) -256
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp
mutex != nullptr COPY mutex != nullptr
 CALL func ARG1
 RETURN 0
 STORE 433 ARG1 ARG2
ARG2 LOAD 433 ARG1
 CALL func ARG2
 RETURN 0
[ARG1] LOAD 433 ARG1
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
 CALL libcall___assert_fail_thunk mutex != nullptr /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp 97 bool llvm::sys::MutexImpl::release()
 RETURN 0 (-256 & (0 # f()))
0 INT_EQUAL f() 0
bool llvm::sys::MutexImpl::release() COPY bool llvm::sys::MutexImpl::release()
(-256 & (0 # f())) INT_OR (-256 & (0 # f())) 0
(-256 & (0 # f())) INT_AND (0 # f()) -256
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp
mutex != nullptr COPY mutex != nullptr
 RETURN 1
f() CALL libcall_pthread_mutex_unlock_thunk [ARG1]
(0 # f()) PIECE 0 f()
0 INT_ZEXT 0
 CALL func ARG1
 RETURN 0
[ARG1] LOAD 433 ARG1
 RETURN 0
 CALL func [ARG1]
f(ARG1) LOAD 433 ARG1
 STORE 433 ARG1 VZERO
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 COPY ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 VZERO
ARG1 COPY ARG1
f(ARG1) LOAD 433 ARG1
VZERO CALLIND ARG2
0 INT_EQUAL ARG2 0
VZERO CALLIND ARG2
 STORE 433 (ARG1 + 8) ARG3
 STORE 433 (ARG1 + 8) ARG3
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG2 INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
f(ARG1) COPY f(ARG1)
 RETURN 1
 RETURN 0
f(ARG1) COPY f(ARG1)
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp
 RETURN 1
 CALL libcall___assert_fail_thunk !Ptr && !DeleterFn && !Next && "Partially initialized ManagedStatic!?" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp 59 void llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(ARG1 + 8)] 0
VZERO COPY VZERO
void llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const COPY void llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const
!Ptr && !DeleterFn && !Next && "Partially initialized ManagedStatic!?" COPY !Ptr && !DeleterFn && !Next && "Partially initialized ManagedStatic!?"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp
 CALL libcall___assert_fail_thunk Creator /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp 35 void llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const
f() CALL func
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
void llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const COPY void llvm::ManagedStaticBase::RegisterManagedStatic(void* (*)(), void (*)(void*)) const
 RETURN 1
VZERO COPY VZERO
Creator COPY Creator
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
0 INT_NOTEQUAL [(ARG1 + 16)] 0
 CBRANCH ([(ARG1 + 16)] INT_NOTEQUAL 0)
 BRANCH VZERO
 CALL func (RSP + -32)
(RSP + -32) PTRSUB RSP -32
(RSP + -32) PTRSUB RSP -32
0 INT_NOTEQUAL f(ARG1) 0
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) CAST (f() + 40)
f() CALL func
 CALL func (RSP + -32) f() f()
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f(ARG1) INT_EQUAL 0)
0 INT_EQUAL f(ARG1) 0
 CALL func
 STORE 433 (ARG1 + 16) VZERO
VZERO CAST VZERO
 STORE 433 (ARG1 + 16) VZERO
VZERO CAST VZERO
 RETURN 0 f()
f() COPY f()
 CALL func f() 1
f() CALL libcall_operator.new_thunk 16
 CALL libcall_operator.delete_thunk ARG1
0 INT_NOTEQUAL ARG1 0
 CALL func ARG1
 RETURN 0
 CBRANCH (ARG1 INT_NOTEQUAL 0)
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 CALL func ARG1 4286795 4286749 4286795
f() CALL func
 RETURN 0 [ARG1]
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH ([ARG1] INT_EQUAL 0)
[ARG1] COPY [ARG1]
0 INT_EQUAL [ARG1] 0
 CALL func
4286795 PTRSUB 0 4286795
4286795 PTRSUB 0 4286795
4286749 PTRSUB 0 4286749
 CALL func ARG1 64
 RETURN 0
 CALL func ARG1
 RETURN 0
[ARG1] LOAD 433 ARG1
([ARG1] & -256) INT_AND [ARG1] -256
([ARG1] & -256) INT_OR ([ARG1] & -256) 0
0 INT_NOTEQUAL [ARG1] 0
 RETURN 0 ([ARG1] & -256)
0 INT_ZEXT 0
[ARG1] LOAD 433 ARG1
(ARG2 * 32) INT_MULT ARG2 32
([ARG1] + (ARG2 * 32)) INT_ADD [ARG1] (ARG2 * 32)
 RETURN 0 ([ARG1] + (ARG2 * 32))
 CALL libcall___xstat_thunk 1 ARG1 ARG2
 RETURN 0
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(([(ARG1 + 8)] - [ARG1]) / 32) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 5
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
 RETURN 0 (([(ARG1 + 8)] - [ARG1]) / 32)
 RETURN 0
 CALL func ARG1
 RETURN 0
(ARG1 + 16) PTRADD ARG1 2 8
 CALL func ARG1
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0
 STORE 433 (ARG1 + 8) 0
 STORE 433 (ARG1 + 16) 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
f() CALL libcall_operator.new_thunk 24
f() COPY f()
 CALL func f()
 RETURN 0 f()
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL libcall_operator.delete_thunk ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
0 INT_NOTEQUAL ARG2 0
 CBRANCH (ARG2 INT_NOTEQUAL 0)
 RETURN 0
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 32) [ARG1]
 CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
(([(ARG1 + 16)] - [ARG1]) / 32) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 5
 RETURN 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL libcall_~basic_string_thunk ARG1
 RETURN 0
ARG1 COPY ARG1
0 INT_NOTEQUAL f(ARG1) ARG2
 CBRANCH (f(ARG1) INT_NOTEQUAL ARG2)
 RETURN 0
 CALL func f(ARG1)
(f(ARG1) + 32) INT_ADD f(ARG1) 32
 BRANCH VZERO
f(ARG1) CALL func f(ARG1)
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1
f(ARG1) CALL func ARG1
[ARG1] LOAD 433 ARG1
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
 CALL func ARG1
 CALL libcall_operator.delete_thunk ARG1
0 INT_NOTEQUAL ARG1 0
 RETURN 0
 CBRANCH (ARG1 INT_NOTEQUAL 0)
[ARG1] LOAD 433 ARG1
 CALL func ARG1 4335768 4335722 4335768
[ARG1] LOAD 433 ARG1
0 INT_EQUAL [ARG1] 0
[ARG1] COPY [ARG1]
f() CALL func
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 RETURN 0 [ARG1]
4335722 PTRSUB 0 4335722
4335768 PTRSUB 0 4335768
4335768 PTRSUB 0 4335768
 CALL func
0 INT_EQUAL f() 1
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL 1)
6960976 PTRSUB 0 6960976
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
f() CALL func 6960976
0 INT_EQUAL 0 [(f() + 40)]
 CBRANCH ((f() & 61440) INT_EQUAL 32768)
 CALL libcall_unlink_thunk f()
 BRANCH VZERO
0 COPY 0
f() CALL func f()
 CBRANCH (f() INT_NOTEQUAL f())
0 INT_NOTEQUAL f() f()
f() CALL func 6960976
6960976 PTRSUB 0 6960976
 CALL func f() f() f()
f() CALL func f() (RSP + -168) (RSP + -168)
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_c_str_thunk
f() CAST f()
 BRANCH VZERO
(RSP + -168) PTRSUB RSP -168
(f() + 1) INT_ADD f() 1
0 INT_EQUAL f() 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
(f() & 61440) INT_AND f() 61440
0 INT_EQUAL (f() & 61440) 32768
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH ([(ARG1 + 12)] INT_NOTEQUAL 1)
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 1)
1 COPY 1
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_NOTEQUAL [(ARG1 + 8)] 0
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 0)
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + 1) INT_ADD [(ARG1 + 8)] 1
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0 f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(ARG1 + 12) CAST (ARG1 + 12)
0 INT_NOTEQUAL [(ARG1 + 12)] 1
 CALL libcall___assert_fail_thunk (recursive || acquired == 0) && "Lock already acquired!!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Mutex.h 106 0
0 COPY 0
(recursive || acquired == 0) && "Lock already acquired!!" COPY (recursive || acquired == 0) && "Lock already acquired!!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Mutex.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Mutex.h
 RETURN 1
ARG2 LOAD 433 ARG1
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func ARG2
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 12) INT_ADD ARG1 12
 CALL func ARG1 ARG2 ARG2
 STORE 433 (ARG1 + 12) ARG2
 STORE 433 (ARG1 + 8) 0
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 12) CAST (ARG1 + 12)
 RETURN 0
 RETURN 0 f()
 CALL func f() 1
f() COPY f()
f() CALL libcall_operator.new_thunk 16
 CALL func ARG1
 RETURN 0
 CALL libcall_operator.delete_thunk ARG1
0 INT_NOTEQUAL ARG1 0
 CALL func ARG1
 RETURN 0
 CBRANCH (ARG1 INT_NOTEQUAL 0)
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 CALL func ARG1 4335677 4335631 4335677
[ARG1] COPY [ARG1]
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 RETURN 0 [ARG1]
f() CALL func
4335677 PTRSUB 0 4335677
4335677 PTRSUB 0 4335677
4335631 PTRSUB 0 4335631
 CALL func
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
0 INT_EQUAL f() 0
f() CALL func
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
 RETURN 0 f()
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 1)
0 INT_NOTEQUAL [(ARG1 + 8)] 1
([(ARG1 + 8)] + 4294967295) INT_ADD [(ARG1 + 8)] 4294967295
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 4294967295)
1 COPY 1
(ARG1 + 8) CAST (ARG1 + 8)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Mutex.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Mutex.h
0 COPY 0
((recursive && acquired) || (acquired == 1)) && "Lock not acquired before release!" COPY ((recursive && acquired) || (acquired == 1)) && "Lock not acquired before release!"
 RETURN 1
 CALL libcall___assert_fail_thunk ((recursive && acquired) || (acquired == 1)) && "Lock not acquired before release!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Mutex.h 120 0
(ARG1 + 12) CAST (ARG1 + 12)
 BRANCH VZERO
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
 CBRANCH ([(ARG1 + 12)] INT_NOTEQUAL 1)
0 INT_NOTEQUAL [(ARG1 + 12)] 1
0 INT_EQUAL [(ARG1 + 8)] 0
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[ARG1] LOAD 433 ARG1
 RETURN 0
 CALL func [ARG1]
(RSP + -24) PTRSUB RSP -24
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (RSP + -24)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -24) PTRSUB RSP -24
 CALL func
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
f() CALL func 6960944
6960944 PTRSUB 0 6960944
 CALL func (RSP + -24) f() f()
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALL func ARG1 256
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1 (RSP + -312) (RSP + -312)
 CALL libcall_basic_string_thunk ARG1
ARG1 COPY ARG1
f() CALL func ARG2 (RSP + -296) (RSP + -296)
(ARG2 + 16) INT_ADD ARG2 16
(ARG2 + 17) INT_ADD ARG2 17
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(ARG2 + 16) CAST (ARG2 + 16)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
 CBRANCH ([(ARG2 + 16)] INT_EQUAL 4)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL [(ARG2 + 16)] 4
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
(RSP + -296) PTRSUB RSP -296
(RSP + -296) PTRSUB RSP -296
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -296)
(f() / 2147483647) SUBPIECE f() 0
[(ARG2 + 17)] LOAD 433 (ARG2 + 17)
(RSP + -312) PTRSUB RSP -312
(RSP + -296) PTRSUB RSP -296
(ARG2 + 17) CAST (ARG2 + 17)
 CBRANCH ([(ARG2 + 17)] INT_EQUAL 1)
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -296)
0 INT_EQUAL [(ARG2 + 17)] 1
(f() / 2147483647) SUBPIECE f() 0
(A_Stack[-0x130]:8 # A_Stack[-0x138]:8) PIECE A_Stack[-0x130]:8 A_Stack[-0x138]:8
 BRANCH VZERO
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(ARG1 + 40) CAST (ARG1 + 40)
 CBRANCH (f() INT_EQUAL 0)
f() CALL func [(ARG1 + 40)]
0 INT_EQUAL f() 0
(ARG1 + 40) CAST (ARG1 + 40)
(FS_OFFSET + 40) INT_ADD 0 40
([(ARG1 + 40)] + 8) PTRADD [(ARG1 + 40)] 1 8
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
[([(ARG1 + 40)] + 8)] LOAD 433 ([(ARG1 + 40)] + 8)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[[(ARG1 + 40)]] LOAD 433 [(ARG1 + 40)]
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
([([(ARG1 + 40)] + 8)] - [[(ARG1 + 40)]]) INT_SUB [([(ARG1 + 40)] + 8)] [[(ARG1 + 40)]]
 CBRANCH (([([(ARG1 + 40)] + 8)] - [[(ARG1 + 40)]]) INT_NOTEQUAL 0)
[40] LOAD 433 40
(([([(ARG1 + 40)] + 8)] - [[(ARG1 + 40)]]) # f()) PIECE ([([(ARG1 + 40)] + 8)] - [[(ARG1 + 40)]]) f()
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
0 COPY 0
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
0 INT_NOTEQUAL ([([(ARG1 + 40)] + 8)] - [[(ARG1 + 40)]]) 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (([([(ARG1 + 40)] + 8)] - [[(ARG1 + 40)]]) # f())
(([([(ARG1 + 40)] + 8)] - [[(ARG1 + 40)]]) # f()) COPY (([([(ARG1 + 40)] + 8)] - [[(ARG1 + 40)]]) # f())
 CALLIND VZERO VZERO (RSP + -120) ARG2 VZERO
f() CALL func f() ARG1 f()
 CALL func (RSP + -120) ARG1 ARG1
f() CALL func 6960800
VZERO COPY VZERO
f() COPY f()
 CALL func (RSP + -168) f() f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
VZERO COPY VZERO
6960800 PTRSUB 0 6960800
 CALL func (RSP + -168)
 CALL func
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() COPY f()
(RSP + -168) PTRSUB RSP -168
 CBRANCH (VZERO INT_EQUAL 0)
0 INT_EQUAL VZERO 0
 RETURN 1
(FS_OFFSET + 40) INT_ADD 0 40
 CALL libcall_exit_thunk 1
(RSP + -168) PTRSUB RSP -168
(f() / 2147483647) INT_RIGHT f() 64
f() CALL func (RSP + -168)
(RSP + -120) PTRSUB RSP -120
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -120)
 CALL libcall_write_thunk 2 (f() / 2147483647) (f() / 4611686014132420609)
f() CALL func (RSP + -168) LLVM ERROR: 
(RSP + -120) PTRSUB RSP -120
(RSP + -120) PTRSUB RSP -120
 CALL func f() 4678196
 CALL func (RSP + -120)
LLVM ERROR:  COPY LLVM ERROR: 
(RSP + -168) PTRSUB RSP -168
(RSP + -168) PTRSUB RSP -168
 BRANCH VZERO
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -168) (RSP + -120) (RSP + -120)
 CALL libcall_~basic_string_thunk (RSP + -120)
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
 CALL func (RSP + -168)
(RSP + -120) PTRSUB RSP -120
(RSP + -168) PTRSUB RSP -168
4678196 PTRSUB 0 4678196
(RSP + -120) PTRSUB RSP -120
ARG2 INT_ZEXT ARG2
ARG2 COPY ARG2
ARG1 COPY ARG1
(RSP + -128) PTRSUB RSP -128
40 INT_ADD 0 40
ARG2 INT_ZEXT ARG2
(RSP + -56) PTRSUB RSP -56
40 CAST 40
 CALL func (RSP + -200) (RSP + -216) (RSP + -216)
[40] LOAD 433 40
(RSP + -80) CAST (RSP + -80)
 CALL func
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func
(RSP + -200) PTRSUB RSP -200
4299529 PTRSUB 0 4299529
40 INT_ADD 0 40
(RSP + -80) COPY (RSP + -80)
4299459 PTRSUB 0 4299459
(FS_OFFSET + 40) INT_ADD 0 40
ARG2 INT_ZEXT ARG2
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -128)
(RSP + -80) PTRSUB RSP -80
(RSP + -216) PTRSUB RSP -216
(RSP + -8) CAST (RSP + -8)
[40] LOAD 433 40
 CALL func (RSP + -56)
(RSP + -128) PTRSUB RSP -128
(RSP + -8) COPY (RSP + -8)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
4299515 COPY 4299515
ARG2 COPY ARG2
(RSP + -8) PTRSUB RSP -8
 RETURN 0
40 CAST 40
4299445 COPY 4299445
 CALL func (RSP + -200) 0
(RSP + -56) PTRSUB RSP -56
[ARG1] LOAD 433 ARG1
([ARG1] & 4294967040) INT_OR ([ARG1] & 4294967040) 0
([ARG1] & 4294967040) INT_AND [ARG1] 4294967040
([ARG1] & 4294967040) COPY ([ARG1] & 4294967040)
0 INT_NOTEQUAL [ARG1] 0
0 INT_ZEXT 0
 RETURN 0 ([ARG1] & 4294967040)
 CALL func ARG1
 CALL func ARG1
 STORE 433 ARG1 Symbol
ARG1 CAST ARG1
 CALL func ARG1
ARG1 CAST ARG1
(ARG1 + 40) PTRADD ARG1 5 8
f() CALL func ARG1
(ARG1 + 36) CAST (ARG1 + 36)
 CBRANCH ([(ARG1 + 36)] INT_SLESS 0)
0 INT_SLESS [(ARG1 + 36)] 0
[(f() + 40)] LOAD 433 (f() + 40)
(ARG1 + 36) INT_ADD ARG1 36
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
[(ARG1 + 36)] LOAD 433 (ARG1 + 36)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f() [(f() + 40)]
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CBRANCH f()
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
 CBRANCH ([(ARG1 + 40)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 40)] 0
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
(RSP + -56) PTRSUB RSP -56
f() CALL func [(ARG1 + 36)]
(ARG1 + 36) INT_ADD ARG1 36
[(ARG1 + 36)] LOAD 433 (ARG1 + 36)
(ARG1 + 36) CAST (ARG1 + 36)
f() CALL func (RSP + -56)
0 INT_EQUAL f() 0
0 COPY 0
 CALL func IO failure on output stream. 0
IO failure on output stream. COPY IO failure on output stream.
 STORE 433 (ARG1 + 40) ARG3
 CALL func ARG1 ARG4 ARG4
 STORE 433 (ARG1 + 36) ARG2
ARG1 CAST ARG1
(ARG1 + 40) PTRADD ARG1 5 8
ARG1 CAST ARG1
(ARG1 + 56) PTRADD ARG1 7 8
 STORE 433 ARG1 Symbol
(ARG1 + 48) PTRADD ARG1 6 8
(ARG1 + 56) PTRADD ARG1 7 8
(ARG1 + 48) PTRADD ARG1 6 8
ARG1 CAST ARG1
(ARG1 + 40) PTRADD ARG1 5 8
ARG1 CAST ARG1
(ARG1 + 36) INT_ADD ARG1 36
Symbol PTRSUB 0 Symbol
(ARG1 + 40) CAST (ARG1 + 40)
 RETURN 0
(ARG1 + 41) INT_ADD ARG1 41
(ARG1 + 36) CAST (ARG1 + 36)
[(ARG1 + 36)] LOAD 433 (ARG1 + 36)
(ARG1 + 36) CAST (ARG1 + 36)
(ARG1 + 36) INT_ADD ARG1 36
(ARG1 + 41) CAST (ARG1 + 41)
Symbol CAST Symbol
 CBRANCH ([(ARG1 + 36)] INT_SLESS 0)
0 INT_SLESS [(ARG1 + 36)] 0
 STORE 433 (ARG1 + 41) 0
 CBRANCH ([(ARG1 + 56)] INT_EQUAL 1)
 STORE 433 (ARG1 + 48) 0
 STORE 433 (ARG1 + 48) f()
 BRANCH VZERO
(ARG1 + 40) CAST (ARG1 + 40)
f() CALL libcall_lseek_thunk [(ARG1 + 36)] 0 1
0 INT_NOTEQUAL f() -1
f() CAST f()
0 INT_EQUAL [(ARG1 + 56)] 1
[(ARG1 + 56)] LOAD 433 (ARG1 + 56)
(ARG1 + 56) CAST (ARG1 + 56)
 BRANCH VZERO
(ARG1 + 36) INT_ADD ARG1 36
 STORE 433 (ARG1 + 40) 0
(ARG1 + 56) CAST (ARG1 + 56)
 STORE 433 (ARG1 + 56) 0
(ARG1 + 36) CAST (ARG1 + 36)
[(ARG1 + 36)] LOAD 433 (ARG1 + 36)
0 INT_EQUAL VZERO 0
 RETURN 0 Symbol
f() COPY f()
Symbol PTRSUB 0 Symbol
 CBRANCH (VZERO INT_EQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 0)
6960576 PTRSUB 0 6960576
6960440 PTRSUB 0 6960440
4219012 PTRSUB 0 4219012
6960576 PTRSUB 0 6960576
 CALL libcall___cxa_atexit_thunk 4219012 6960576 6960440
6960496 PTRSUB 0 6960496
 CALL func 6960576 2 0 1
 CALL libcall___cxa_guard_release_thunk 6960496
0 INT_NOTEQUAL f() 0
f() CALL libcall___cxa_guard_acquire_thunk 6960496
6960496 PTRSUB 0 6960496
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 [f(ARG2)]
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
f(ARG3) CAST f(ARG3)
 RETURN 0
[f(ARG3)] LOAD 433 f(ARG3)
f(ARG2) CAST f(ARG2)
 STORE 433 (ARG1 + 8) [f(ARG3)]
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
40 CAST 40
(RSP + -56) PTRSUB RSP -56
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CALL func (RSP + -56) f(ARG1) f(ARG2) f(ARG1)
[40] LOAD 433 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 RETURN 1
 RETURN 0 16
16 COPY 16
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
[f(ARG1)] LOAD 433 f(ARG1)
f(ARG1) CAST f(ARG1)
f(ARG2) CAST f(ARG2)
([f(ARG2)] & -256) INT_OR ([f(ARG2)] & -256) 0
0 INT_ZEXT 0
[f(ARG2)] LOAD 433 f(ARG2)
0 INT_NOTEQUAL [f(ARG1)] [f(ARG2)]
 RETURN 0 ([f(ARG2)] & -256)
([f(ARG2)] & -256) INT_AND [f(ARG2)] -256
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
(RSP + -24) PTRSUB RSP -24
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
40 INT_ADD 0 40
 CALL func (RSP + -24) (ARG1 + 8) (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
ARG1 COPY ARG1
 STORE 433 ARG1 ([ARG1] + 16)
[ARG1] LOAD 433 ARG1
 RETURN 0 ARG1
([ARG1] + 16) INT_ADD [ARG1] 16
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 8) INT_ADD ARG1 8
f(ARG1) CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG2 [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
 STORE 433 (ARG1 + 8) ARG2
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[ARG1] LOAD 433 ARG1
 CALL func ARG1 [ARG1] [ARG1]
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
(RSP + -24) PTRSUB RSP -24
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 CALL libcall_operator.delete_thunk ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
0 INT_NOTEQUAL ARG2 0
 RETURN 0
 CBRANCH (ARG2 INT_NOTEQUAL 0)
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
[ARG1] LOAD 433 ARG1
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 16) [ARG1]
 CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
 RETURN 0
(([(ARG1 + 16)] - [ARG1]) / 16) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 4
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
 CALL func ARG1
f(ARG1) CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_NOTEQUAL ARG1 0
 CALL func ARG1
 CALL libcall_operator.delete_thunk ARG1
 CBRANCH (ARG1 INT_NOTEQUAL 0)
 RETURN 0
 RETURN 0
 CALL func ARG1
 RETURN 0
(ARG1 + 16) PTRADD ARG1 2 8
 CALL func ARG1
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0
 STORE 433 (ARG1 + 8) 0
 STORE 433 (ARG1 + 16) 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 RETURN 0 f()
 CALL func f()
f() CALL libcall_operator.new_thunk 24
f() COPY f()
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 CALL func ARG1 4333683 4333637 4333683
[ARG1] COPY [ARG1]
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 RETURN 0 [ARG1]
f() CALL func
4333683 PTRSUB 0 4333683
4333683 PTRSUB 0 4333683
4333637 PTRSUB 0 4333637
 CALL func
 CALL func ARG1 4333683 4333637 4333683
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
0 INT_EQUAL [ARG1] 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 RETURN 0 [ARG1]
f() CALL func
[ARG1] COPY [ARG1]
 CBRANCH ([ARG1] INT_EQUAL 0)
 CALL func
4333637 PTRSUB 0 4333637
4333683 PTRSUB 0 4333683
4333683 PTRSUB 0 4333683
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
6960912 PTRSUB 0 6960912
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func 6960912
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
6960912 PTRSUB 0 6960912
f() CALL func 6960912
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(RSP + -48) PTRSUB RSP -48
f() CALL func 6960912
f() CALL func f()
(RSP + -40) PTRSUB RSP -40
f() CALL func (RSP + -48) (RSP + -40) (RSP + -40)
f() CALL func f()
 BRANCH VZERO
 CALL func f()
6960912 PTRSUB 0 6960912
[f()] LOAD 433 f()
 CALLIND [f()] [(f() + 8)]
f() CAST f()
(RSP + -48) PTRSUB RSP -48
 BRANCH VZERO
f() CALL func (RSP + -48)
(RSP + -48) PTRSUB RSP -48
 CALL func (RSP + -48)
[(f() + 8)] LOAD 433 (f() + 8)
(f() + 8) PTRADD f() 1 8
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 24) INT_ADD ARG1 24
 RETURN 0 (ARG1 + 24)
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0 [(ARG1 + 8)]
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 RETURN 0
 CALL func [ARG1]
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 8)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_EQUAL [ARG1] 0
locked && "unlocking a mutex that isn't locked!" COPY locked && "unlocking a mutex that isn't locked!"
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/UniqueLock.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/UniqueLock.h
 RETURN 1
 CALL libcall___assert_fail_thunk locked && "unlocking a mutex that isn't locked!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/UniqueLock.h 57 0
 CBRANCH ([ARG1] INT_EQUAL 0)
 RETURN 0
 CALL func [ARG1]
M && "no associated mutex!" COPY M && "no associated mutex!"
0 COPY 0
 RETURN 1
 STORE 433 (ARG1 + 8) 0
 CALL libcall___assert_fail_thunk M && "no associated mutex!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/UniqueLock.h 58 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/UniqueLock.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/UniqueLock.h
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
ARG2 LOAD 433 ARG1
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) 1
 RETURN 0
 CALL func ARG2
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -24) PTRSUB RSP -24
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
40 CAST 40
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0
[ARG1] LOAD 433 ARG1
[ARG2] LOAD 433 ARG2
([[ARG1]] & 4294967040) INT_OR ([[ARG1]] & 4294967040) 0
([[ARG1]] & 4294967040) INT_AND [[ARG1]] 4294967040
 RETURN 0 ([[ARG1]] & 4294967040)
[[ARG1]] LOAD 433 [ARG1]
0 INT_EQUAL [ARG2] [[ARG1]]
([[ARG1]] & 4294967040) COPY ([[ARG1]] & 4294967040)
0 INT_ZEXT 0
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG1 COPY ARG1
((ARG2 - ARG1) / 16) INT_SRIGHT (ARG2 - ARG1) 4
0 INT_SLESS 0 f(ARG1 , ARG2)
 CBRANCH (0 INT_SLESS f(ARG1 , ARG2))
 CBRANCH (f() INT_NOTEQUAL 0)
(f(ARG1) + 4) INT_ADD f(ARG1) 4
 RETURN 0 (f(ARG1) + 4)
 RETURN 0 f(ARG1)
f(ARG2) COPY f(ARG2)
f() CALL func (RSP + -48) f(ARG1) f(ARG1)
 RETURN 0 (f(ARG1) + 12)
 RETURN 0 (f(ARG1) + 8)
f(ARG1) COPY f(ARG1)
 RETURN 0 f(ARG1)
 RETURN 0 f(ARG1)
(f(ARG1) + 4) COPY (f(ARG1) + 4)
f(ARG1) COPY f(ARG1)
f(ARG2) COPY f(ARG2)
(f(ARG1) + 12) COPY (f(ARG1) + 12)
(f(ARG1) + 8) COPY (f(ARG1) + 8)
f(ARG1) COPY f(ARG1)
 RETURN 0 f(ARG2)
f(ARG1) COPY f(ARG1)
(RSP + -48) PTRSUB RSP -48
 RETURN 0 f(ARG2)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 RETURN 0 f(ARG1)
 CBRANCH (f() INT_NOTEQUAL 0)
(f(ARG1) + 16) INT_ADD (f(ARG1) + 12) 4
(f(ARG1 , ARG2) + -1) INT_ADD f(ARG1 , ARG2) -1
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -48) PTRSUB RSP -48
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
(f(ARG1) + 4) INT_ADD f(ARG1) 4
f() CALL func (RSP + -48) (f(ARG1) + 4) (f(ARG1) + 4)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(f(ARG1) + 4) INT_ADD f(ARG1) 4
f() CALL func (RSP + -48) f(ARG1) f(ARG1)
(RSP + -48) PTRSUB RSP -48
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(RSP + -48) PTRSUB RSP -48
(f(ARG1) + 12) INT_ADD (f(ARG1) + 8) 4
f() CALL func (RSP + -48) (f(ARG1) + 12) (f(ARG1) + 12)
0 INT_NOTEQUAL f() 0
(RSP + -48) PTRSUB RSP -48
((f(ARG2) - f(ARG1)) / 4) INT_SRIGHT (f(ARG2) - f(ARG1)) 2
(f(ARG2) - f(ARG1)) INT_SUB f(ARG2) f(ARG1)
0 INT_NOTEQUAL ((f(ARG2) - f(ARG1)) / 4) 2
f() CALL func (RSP + -48) f(ARG1) f(ARG1)
 CBRANCH (((f(ARG2) - f(ARG1)) / 4) INT_NOTEQUAL 2)
(f(ARG1) + 8) INT_ADD (f(ARG1) + 4) 4
f() CALL func (RSP + -48) (f(ARG1) + 8) (f(ARG1) + 8)
(RSP + -48) PTRSUB RSP -48
0 INT_NOTEQUAL f() 0
 CBRANCH (((f(ARG2) - f(ARG1)) / 4) INT_NOTEQUAL 3)
f() CALL func (RSP + -48) f(ARG1) f(ARG1)
0 INT_NOTEQUAL f() 0
(RSP + -48) PTRSUB RSP -48
0 INT_NOTEQUAL ((f(ARG2) - f(ARG1)) / 4) 1
 CBRANCH (((f(ARG2) - f(ARG1)) / 4) INT_NOTEQUAL 1)
0 INT_NOTEQUAL ((f(ARG2) - f(ARG1)) / 4) 3
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG3 ARG2
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -48)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
(RSP + -48) PTRSUB RSP -48
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 ARG2 f() ARG2
f() CALL func ARG3
 RETURN 0
0 INT_NOTEQUAL f() VZERO
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL VZERO)
0 COPY 0
VZERO COPY VZERO
 RETURN 0
(f() * 160) INT_MULT f() 160
f() INT_ZEXT f()
((f() * 160) + 6961024) CAST ((f() * 160) + 6961024)
(Symbol + (f() * 160)) CAST (Symbol + (f() * 160))
f() INT_ZEXT f()
6961024 PTRSUB 0 6961024
Symbol PTRSUB 0 Symbol
[(Symbol + (f() * 160))] LOAD 433 (Symbol + (f() * 160))
((f() * 160) + 6961024) PTRADD 6961024 (f() * 160) 1
 CALL libcall_sigaction_thunk [(Symbol + (f() * 160))] ((f() * 160) + 6961024) 0
(Symbol + (f() * 160)) PTRADD Symbol (f() * 160) 1
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(f() * 160) INT_MULT f() 160
ARG1 COPY ARG1
 CBRANCH f()
0 INT_EQUAL f() f()
 CALL libcall_sigfillset_thunk (RSP + -168)
(RSP + -184) PTRSUB RSP -184
f() CALL func 4685264
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL func 6960944
 CALL func (RSP + -184)
(f() + 40) CAST (f() + 40)
(RSP + -204) PTRSUB RSP -204
6960944 PTRSUB 0 6960944
f() CALL func 4685264
 CALL func
f() CALL func 4685264
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
4685264 PTRSUB 0 4685264
 CALL libcall_sigprocmask_thunk 1 (RSP + -168) 0
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
f() CALL func f() f() (RSP + -204) f()
 CALL func
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -168) CAST (RSP + -168)
4685264 PTRSUB 0 4685264
(RSP + -168) PTRSUB RSP -168
[(f() + 40)] LOAD 433 (f() + 40)
 CALL func (RSP + -184) f() f()
 CBRANCH (f() INT_EQUAL f())
4685264 PTRSUB 0 4685264
(RSP + -184) PTRSUB RSP -184
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -168) CAST (RSP + -168)
(RSP + -168) PTRSUB RSP -168
 CALL func
 CBRANCH (VZERO INT_EQUAL 0)
1 COPY 1
0 INT_EQUAL VZERO 0
 CALL func
 BRANCH VZERO
0 COPY 0
VZERO COPY VZERO
(RSP + -184) PTRSUB RSP -184
0 COPY 0
 CALL func (RSP + -184)
 BRANCH VZERO
 CALLIND VZERO
0 COPY 0
 CALL libcall_raise_thunk ARG1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
f() COPY f()
f() COPY f()
 RETURN 1
 CALL libcall_sigaction_thunk ARG1 (RSP + -184) 6961024
 STORE 433 Symbol ARG1
VZERO INT_ZEXT VZERO
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
6961024 PTRSUB 0 6961024
 CBRANCH (f() INT_LESSEQUAL VZERO)
f() CALL func 6961024
0 INT_LESSEQUAL f() VZERO
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
1 COPY 1
1 COPY 1
 RETURN 1
VZERO COPY VZERO
 RETURN 1
 CALL libcall_sigemptyset_thunk (RSP + -176)
 CALL libcall___assert_fail_thunk 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Signals.inc 94 void RegisterHandler(int)
Symbol PTRSUB 0 Symbol
6961024 PTRSUB 0 6961024
6961024 PTRADD 6961024 0 1
void RegisterHandler(int) COPY void RegisterHandler(int)
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Signals.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Signals.inc
Symbol PTRADD Symbol 0 1
40 INT_ADD 0 40
0 INT_MULT VZERO 160
VZERO INT_ZEXT VZERO
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
VZERO INT_ZEXT VZERO
40 CAST 40
(RSP + -176) CAST (RSP + -176)
(RSP + -184) PTRSUB RSP -184
(RSP + -176) PTRADD (RSP + -184) 8 1
[40] LOAD 433 40
3221225472 COPY 3221225472
1 INT_ADD VZERO 1
(RSP + -184) CAST (RSP + -184)
0 INT_MULT VZERO 160
Symbol PTRSUB 0 Symbol
6961024 CAST 6961024
(RSP + -184) PTRSUB RSP -184
Symbol CAST Symbol
0 INT_EQUAL VZERO 0
 CALL func 6960944
f() COPY f()
6960944 PTRSUB 0 6960944
 RETURN 0
 CBRANCH (VZERO INT_EQUAL 0)
 CBRANCH f(/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Signals.inc , Symbol)
(f(Symbol) + 4) PTRADD f(Symbol) 1 4
 CALL func [f(Symbol)]
[f(Symbol)] LOAD 433 f(Symbol)
 BRANCH VZERO
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Signals.inc CAST /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Signals.inc
0 INT_NOTEQUAL f(Symbol) /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Signals.inc
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Signals.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Signals.inc
 CBRANCH (f(Symbol) INT_NOTEQUAL 4685288)
4685288 PTRSUB 0 4685288
[f(Symbol)] LOAD 433 f(Symbol)
(f(Symbol) + 4) PTRADD f(Symbol) 1 4
 CALL func [f(Symbol)]
0 INT_NOTEQUAL f(Symbol) 4685288
 BRANCH VZERO
4685288 CAST 4685288
Symbol PTRSUB 0 Symbol
Symbol PTRSUB 0 Symbol
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
 RETURN 0 1152921504606846975
1152921504606846975 COPY 1152921504606846975
f() CALL func ARG1
0 INT_LESS f() ARG2
(ARG2 * 16) INT_LEFT ARG2 4
 CBRANCH (f() INT_LESS ARG2)
 CALL libcall_operator.new_thunk (ARG2 * 16)
 RETURN 0
 CALL libcall___throw_bad_alloc_thunk
 CALL func ARG1 ARG2 0 ARG2
 RETURN 0
f() CALL func ARG1 ARG2 ARG2
0 INT_EQUAL ARG2 0
 RETURN 0 f()
 CBRANCH (ARG2 INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
(RSP + -24) PTRSUB RSP -24
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
f(ARG1) CALL func 16 ARG1
f(ARG2) CALL func ARG2
f(ARG2) CAST f(ARG2)
f(ARG1) CAST f(ARG1)
 RETURN 0
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG1) 0
 STORE 433 f(ARG1) [f(ARG2)]
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
 STORE 433 (f(ARG1) + 8) [(f(ARG2) + 8)]
[(f(ARG2) + 8)] LOAD 433 (f(ARG2) + 8)
[f(ARG2)] LOAD 433 f(ARG2)
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
f() CALL func ARG1
f() CALL func ARG2
0 INT_EQUAL f() f()
 RETURN 0 (f() & -256)
(f() & -256) INT_OR (f() & -256) 0
(f() & -256) INT_AND f() -256
0 INT_ZEXT 0
f() CALL func ARG1 ARG2 ARG2
 RETURN 0 0
0 INT_XOR f() 1
0 COPY 0
[ARG1] LOAD 433 ARG1
ARG1 COPY ARG1
 STORE 433 ARG1 ([ARG1] + 16)
 RETURN 0 ARG1
([ARG1] + 16) INT_ADD [ARG1] 16
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
0 INT_EQUAL f() 0
(RSP + -56) PTRSUB RSP -56
 RETURN 0 f(ARG3)
f(ARG3) COPY f(ARG3)
(RSP + -48) PTRSUB RSP -48
f() CALL func (RSP + -48) (RSP + -56) (RSP + -56)
 CBRANCH (f() INT_EQUAL 0)
f(ARG3) CALL func f(ARG3)
 CALL func (RSP + -48)
 BRANCH VZERO
(f(ARG3) + 16) INT_ADD f(ARG3) 16
(RSP + -48) PTRSUB RSP -48
 CALL func f(ARG3) f()
(RSP + -48) PTRSUB RSP -48
f() CALL func (RSP + -48)
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG4
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 ARG4
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
 RETURN 0 (([(ARG1 + 8)] - [ARG1]) / 16)
(([(ARG1 + 8)] - [ARG1]) / 16) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 4
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f(ARG2) CALL func 16 ARG2
f(ARG3) CALL func ARG3
 RETURN 0
f(ARG2) CAST f(ARG2)
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
f(ARG3) CAST f(ARG3)
0 INT_NOTEQUAL f(ARG2) 0
 STORE 433 (f(ARG2) + 8) [(f(ARG3) + 8)]
(f(ARG3) + 8) PTRADD f(ARG3) 1 8
[(f(ARG3) + 8)] LOAD 433 (f(ARG3) + 8)
[f(ARG3)] LOAD 433 f(ARG3)
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
 STORE 433 f(ARG2) [f(ARG3)]
 CALL func ARG1 ARG2 f(ARG3) ARG2
f(ARG3) CALL func ARG3
 RETURN 0
[ARG1] LOAD 433 ARG1
[ARG2] LOAD 433 ARG2
ARG2 COPY ARG2
 RETURN 0 f(ARG1 , ARG2)
 CBRANCH ([ARG1] INT_LESS [ARG2])
0 INT_LESS [ARG1] [ARG2]
 BRANCH VZERO
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
f(ARG1) CALL func ARG1
 RETURN 0
 CALL func f(ARG1)
f() CALL func ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
 CALL libcall___throw_length_error_thunk ARG3
(FS_OFFSET + 40) INT_ADD 0 40
f(RSP) CAST f(RSP)
(f() - f()) CAST (f() - f())
f() CALL func f(ARG1)
f() CALL func ARG1
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(RSP + -48) PTRSUB RSP -48
 CBRANCH ((f() - f()) INT_LESS ARG2)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func f(ARG1)
0 INT_EQUAL f() [(f() + 40)]
([f(RSP)] + f()) INT_ADD [f(RSP)] f()
(RSP + -72) PTRSUB RSP -72
(f() + 40) INT_ADD f() 40
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_LESS (f() - f()) ARG2
0 INT_LESS ([f(RSP)] + f()) f()
f() CALL func f(ARG1)
 CBRANCH (([f(RSP)] + f()) INT_LESS f())
[f(RSP)] LOAD 433 f(RSP)
(f() + 40) CAST (f() + 40)
(f() - f()) INT_SUB f() f()
f(RSP) CALL func (RSP + -48) (RSP + -72) (RSP + -72)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(RSP)
f() CALL func f(ARG1)
0 INT_LESS f() ([f(RSP)] + f())
f() COPY f()
([f(RSP)] + f()) COPY ([f(RSP)] + f())
 BRANCH VZERO
 CBRANCH (f() INT_LESS ([f(RSP)] + f()))
f() CALL func f(ARG1)
 CALL func ARG1 ((f() * 16) + f()) f(ARG2) ((f() * 16) + f())
f(ARG1) CALL func ARG1
f(ARG1) CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 f()
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
f() CALL func ARG1 f(RSP) f(RSP)
[ARG1] LOAD 433 ARG1
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 16) [ARG1]
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
f(RSP) CALL func ARG1 1 0
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG2) CALL func ARG2
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
((f(RSP) * 16) + f()) INT_ADD (f(RSP) * 16) f()
 STORE 433 (ARG1 + 16) ((f(RSP) * 16) + f())
f() CALL func [ARG1] [(ARG1 + 8)] f() f(ARG1)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() * 16) INT_MULT f() 16
 STORE 433 (ARG1 + 8) (f() + 16)
 RETURN 0
0 COPY 0
(([(ARG1 + 16)] - [ARG1]) / 16) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 4
(f(RSP) * 16) INT_MULT f(RSP) 16
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
((f() * 16) + f()) INT_ADD (f() * 16) f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() + 16) INT_ADD f() 16
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1 [(ARG1 + 8)] f(ARG2) [(ARG1 + 8)]
 CALL func ARG1 f(ARG2) f(ARG2)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
f(ARG2) CALL func ARG2
f(ARG2) CALL func ARG2
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL [(ARG1 + 16)])
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 0
0 INT_EQUAL [(ARG1 + 8)] [(ARG1 + 16)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + 16) INT_ADD [(ARG1 + 8)] 16
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 16)
(ARG1 + 8) CAST (ARG1 + 8)
 CALL func ARG1 f(ARG2) f(ARG2)
f(ARG2) CALL func ARG2
 RETURN 0
ARG1 COPY ARG1
ARG2 COPY ARG2
(f() / 2147483647) SUBPIECE f() 8
(RSP + -48) PTRSUB RSP -48
(f() / 2147483647) SUBPIECE f() 0
40 CAST 40
[40] LOAD 433 40
6960912 PTRSUB 0 6960912
(RSP + -56) PTRSUB RSP -56
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
f() CALL func (RSP + -48) (RSP + -56) (RSP + -56)
 CALL func
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
f() CALL func 6960912
 CALL func f() (RSP + -40) f()
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -40) PTRSUB RSP -40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 72) INT_ADD ARG1 72
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 80) INT_ADD ARG1 80
(ARG1 + 72) INT_ADD ARG1 72
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 56) INT_ADD ARG1 56
(ARG1 + 72) INT_ADD ARG1 72
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 72) INT_ADD ARG1 72
(ARG1 + 80) INT_ADD ARG1 80
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 64) CAST (ARG1 + 64)
 STORE 433 (ARG1 + 72) [(ARG1 + 64)]
[(ARG1 + 80)] LOAD 433 (ARG1 + 80)
([(ARG1 + 72)] - [(ARG1 + 64)]) INT_SUB [(ARG1 + 72)] [(ARG1 + 64)]
(ARG1 + 80) CAST (ARG1 + 80)
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(ARG1 + 64) CAST (ARG1 + 64)
 CALL func [(ARG1 + 40)] [(ARG1 + 64)] ([(ARG1 + 72)] - [(ARG1 + 64)]) [(ARG1 + 64)]
 RETURN 0
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(ARG1 + 72) CAST (ARG1 + 72)
(ARG1 + 72) CAST (ARG1 + 72)
(ARG1 + 64) CAST (ARG1 + 64)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
 STORE 433 (ARG1 + 80) 0
 CBRANCH ([(ARG1 + 80)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(ARG1 + 80)] 0
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
(ARG1 + 80) CAST (ARG1 + 80)
(ARG1 + 40) CAST (ARG1 + 40)
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
([(ARG1 + 56)] + [(ARG1 + 64)]) INT_ADD [(ARG1 + 56)] [(ARG1 + 64)]
(ARG1 + 64) CAST (ARG1 + 64)
(([(ARG1 + 56)] + [(ARG1 + 64)]) - [(ARG1 + 72)]) INT_SUB ([(ARG1 + 56)] + [(ARG1 + 64)]) [(ARG1 + 72)]
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(ARG1 + 72) CAST (ARG1 + 72)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
 CALL func [(ARG1 + 40)] [(ARG1 + 72)] (([(ARG1 + 56)] + [(ARG1 + 64)]) - [(ARG1 + 72)]) [(ARG1 + 72)]
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
(ARG1 + 56) CAST (ARG1 + 56)
(ARG1 + 72) CAST (ARG1 + 72)
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
[(ARG1 + 56)] LOAD 433 (ARG1 + 56)
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 56) INT_ADD ARG1 56
 CALL func ARG1
(ARG1 + 56) CAST (ARG1 + 56)
0 INT_NOTEQUAL [(ARG1 + 56)] 0
 CBRANCH ([(ARG1 + 56)] INT_NOTEQUAL 0)
[(ARG1 + 56)] LOAD 433 (ARG1 + 56)
 RETURN 0
[(ARG1 + 88)] LOAD 433 (ARG1 + 88)
[(ARG1 + 88)] LOAD 433 (ARG1 + 88)
(ARG1 + 88) CAST (ARG1 + 88)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 88) CAST (ARG1 + 88)
 CALL func [(ARG1 + 40)] [(ARG1 + 88)] f() [(ARG1 + 88)]
f() CALL libcall_strlen_thunk [(ARG1 + 88)]
(ARG1 + 40) CAST (ARG1 + 40)
f() CALL func
 RETURN 0
 CALL func f()
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
 CALL func ARG1
 RETURN 0
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
 CALLIND [([[(ARG1 + 40)]] + 8)] [(ARG1 + 40)] ARG2 [(ARG1 + 40)]
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
 RETURN 0
(ARG1 + 40) CAST (ARG1 + 40)
0 INT_NOTEQUAL [(ARG1 + 40)] 0
 CBRANCH ([(ARG1 + 40)] INT_NOTEQUAL 0)
 CBRANCH ([(ARG1 + 48)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(ARG1 + 40)] 0
 CBRANCH ([(ARG1 + 40)] INT_NOTEQUAL 0)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
([[(ARG1 + 40)]] + 8) CAST ([[(ARG1 + 40)]] + 8)
 BRANCH VZERO
[[(ARG1 + 40)]] LOAD 433 [(ARG1 + 40)]
[([[(ARG1 + 40)]] + 8)] LOAD 433 ([[(ARG1 + 40)]] + 8)
(ARG1 + 40) CAST (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
([[(ARG1 + 40)]] + 8) INT_ADD [[(ARG1 + 40)]] 8
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
0 INT_NOTEQUAL [(ARG1 + 48)] 0
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
(ARG1 + 48) CAST (ARG1 + 48)
 STORE 433 (ARG1 + 48) ARG3
 CALL func ARG1
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 48) INT_ADD ARG1 48
 STORE 433 (ARG1 + 40) ARG2
(ARG1 + 48) CAST (ARG1 + 48)
 RETURN 0
(ARG1 + 40) CAST (ARG1 + 40)
(ARG1 + 64) PTRADD ARG1 8 8
(ARG1 + 40) PTRADD ARG1 5 8
(ARG1 + 88) PTRADD ARG1 11 8
(ARG1 + 56) PTRADD ARG1 7 8
(ARG1 + 72) PTRADD ARG1 9 8
 CALL func ARG1 1
(ARG1 + 64) PTRADD ARG1 8 8
(ARG1 + 56) PTRADD ARG1 7 8
 CALL func ARG1 ARG2 ARG5 ARG2
(ARG1 + 48) PTRADD ARG1 6 8
 STORE 433 ARG1 Symbol
(ARG1 + 80) PTRADD ARG1 10 8
(ARG1 + 56) PTRADD ARG1 7 8
(ARG1 + 64) PTRADD ARG1 8 8
 STORE 433 (ARG1 + 88) ARG3
 STORE 433 (ARG1 + 56) ARG4
 STORE 433 (ARG1 + 48) ARG5
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
(ARG1 + 80) CAST (ARG1 + 80)
 STORE 433 (ARG1 + 80) 0
 STORE 433 (ARG1 + 72) [(ARG1 + 64)]
 RETURN 0
0 INT_NOTEQUAL [(ARG1 + 56)] 0
 CBRANCH ([(ARG1 + 56)] INT_NOTEQUAL 0)
 STORE 433 (ARG1 + 40) 0
(ARG1 + 48) CAST (ARG1 + 48)
 STORE 433 (ARG1 + 64) 0
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
[(ARG1 + 56)] LOAD 433 (ARG1 + 56)
[(ARG1 + 56)] CAST [(ARG1 + 56)]
f() CAST f()
f() CALL libcall_operator.new[]_thunk [(ARG1 + 56)]
 STORE 433 (ARG1 + 64) f()
[(ARG1 + 56)] LOAD 433 (ARG1 + 56)
 CALL func ARG1 f() *** Debug Log Output ***  f() 0
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
*** Debug Log Output ***  COPY *** Debug Log Output *** 
f() COPY f()
0 INT_EQUAL VZERO 0
f() CALL func
 RETURN 0
 CBRANCH (VZERO INT_EQUAL 0)
 CBRANCH f()
f() COPY f()
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
6965944 PTRSUB 0 6965944
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
f() CALL func 6965944
 BRANCH VZERO
1 COPY 1
0 INT_EQUAL VZERO 0
 CBRANCH (VZERO INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
f() CALL func 6965944
6965944 PTRSUB 0 6965944
f() INT_SEXT f()
4404644 PTRSUB 0 4404644
 CALL func 4404644 0
 CALL func ARG1
(ARG1 + 64) PTRADD ARG1 8 8
 CALL func ARG1
(ARG1 + 64) PTRADD ARG1 8 8
 CALL func ARG1
 STORE 433 ARG1 Symbol
 CALL func ARG1
0 INT_NOTEQUAL [(ARG1 + 64)] 0
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
Symbol CAST Symbol
 CBRANCH ([(ARG1 + 64)] INT_NOTEQUAL 0)
 RETURN 0
Symbol PTRSUB 0 Symbol
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
 CALL libcall_operator.delete[]_thunk [(ARG1 + 64)]
 CALL func ARG1
 RETURN 0
f() COPY f()
 RETURN 0 Symbol
0 INT_EQUAL VZERO 0
Symbol PTRSUB 0 Symbol
 CBRANCH (VZERO INT_EQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 0)
 CALL libcall___cxa_atexit_thunk 4404864 6966112 6960440
 CALL func 6966112
6966112 PTRSUB 0 6966112
 CALL libcall___cxa_guard_release_thunk 6966096
6966096 PTRSUB 0 6966096
6966112 PTRSUB 0 6966112
4404864 PTRSUB 0 4404864
6960440 PTRSUB 0 6960440
6966096 PTRSUB 0 6966096
0 INT_NOTEQUAL f() 0
f() CALL libcall___cxa_guard_acquire_thunk 6966096
f() CALL func f() ARG2 f()
0 INT_NOTEQUAL ARG2 0
 CALL func f() ARG3 f()
0 INT_NOTEQUAL ARG1 0
f() CALL func f() ARG1 f()
f() CALL func
 CALL func f() 4678226
4678226 PTRSUB 0 4678226
 CBRANCH (ARG2 INT_NOTEQUAL 0)
UNREACHABLE executed COPY UNREACHABLE executed
f() CALL func
 RETURN 1
 CALL libcall_abort_thunk
 CALL func f() UNREACHABLE executed
 CBRANCH (ARG1 INT_NOTEQUAL 0)
f() CALL func f() 4678219
4678224 PTRSUB 0 4678224
f() CALL func f() 4678224
4678219 PTRSUB 0 4678219
f() CALL func
f() CALL func
 CALL func f() 4678196
4678196 PTRSUB 0 4678196
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 0
 RETURN 0
 STORE 433 (ARG1 + 8) 0
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
isSingleStringRef() &&"This cannot be had as a single stringref!" COPY isSingleStringRef() &&"This cannot be had as a single stringref!"
 CALL libcall___assert_fail_thunk isSingleStringRef() &&"This cannot be had as a single stringref!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h 437 llvm::StringRef llvm::Twine::getSingleStringRef() const
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h
 BRANCHIND f()
llvm::StringRef llvm::Twine::getSingleStringRef() const COPY llvm::StringRef llvm::Twine::getSingleStringRef() const
 RETURN 1
 CBRANCH (([([ARG1] + 8)] - [[ARG1]]) INT_NOTEQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
 RETURN 1
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
0 COPY 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (f(ARG1) # f(ARG1))
(f(ARG1) # f(ARG1)) PIECE f(ARG1) f(ARG1)
 BRANCH VZERO
([([ARG1] + 8)] - [[ARG1]]) INT_SUB [([ARG1] + 8)] [[ARG1]]
[[ARG1]] LOAD 433 [ARG1]
[([ARG1] + 8)] LOAD 433 ([ARG1] + 8)
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
f() COPY f()
f() CALL libcall_data_thunk
 CALL func (RSP + -56) [ARG1] [ARG1]
(RSP + -56) PTRSUB RSP -56
f() COPY f()
0 INT_NOTEQUAL ([([ARG1] + 8)] - [[ARG1]]) 0
f() COPY f()
A_Stack[-0x30]:8 COPY A_Stack[-0x30]:8
f() COPY f()
A_Stack[-0x30]:8 COPY A_Stack[-0x30]:8
 BRANCH VZERO
A_Stack[-0x38]:8 COPY A_Stack[-0x38]:8
f() CALL func [ARG1]
A_Stack[-0x30]:8 COPY A_Stack[-0x30]:8
f() CALL libcall_length_thunk
[[ARG1]] LOAD 433 [ARG1]
A_Stack[-0x38]:8 COPY A_Stack[-0x38]:8
([ARG1] + 8) PTRADD [ARG1] 1 8
[([ARG1] + 8)] LOAD 433 ([ARG1] + 8)
 BRANCH VZERO
f() COPY f()
Out of sync with isSingleStringRef COPY Out of sync with isSingleStringRef
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h
([ARG1] + 8) PTRADD [ARG1] 1 8
 BRANCH VZERO
 CALL func Out of sync with isSingleStringRef /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h 439
[([ARG1] + 8)] COPY [([ARG1] + 8)]
f() COPY f()
[[ARG1]] COPY [[ARG1]]
A_Stack[-0x38]:8 COPY A_Stack[-0x38]:8
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
f() COPY f()
([([ARG1] + 8)] - [[ARG1]]) COPY ([([ARG1] + 8)] - [[ARG1]])
f() COPY f()
f() COPY f()
 CALL func ARG1 ARG2 ARG2
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 1 8
[ARG2] LOAD 433 ARG2
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_NOTEQUAL [(ARG2 + 8)] [ARG2]
 CBRANCH ([(FS_OFFSET + 40)] INT_EQUAL [(f() + 40)])
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH ([(ARG2 + 8)] INT_NOTEQUAL [ARG2])
(f() + 40) INT_ADD f() 40
0 INT_EQUAL [(FS_OFFSET + 40)] [(f() + 40)]
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 RETURN 1
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
0 COPY 0
 BRANCH VZERO
0 INT_EQUAL f() 0
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG1 + 16) INT_ADD ARG1 16
 RETURN 0 (ARG1 + 16)
f() CALL func ARG1
(ARG1 + 32) INT_ADD ARG1 32
(ARG2 + 32) INT_ADD ARG2 32
f() CALL func ARG2
 CBRANCH (f() INT_EQUAL f())
0 INT_EQUAL f() f()
 RETURN 0 f()
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
0 COPY 0
(ARG2 + 32) CAST (ARG2 + 32)
 CBRANCH ([(ARG1 + 32)] INT_EQUAL [(ARG2 + 32)])
0 INT_EQUAL [(ARG1 + 32)] [(ARG2 + 32)]
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(ARG1 + 32) CAST (ARG1 + 32)
 BRANCH VZERO
1 COPY 1
f() CALL func ARG1 ARG2 ARG2
0 COPY 0
 RETURN 0 0
0 INT_XOR f() 1
(ARG1 + 16) INT_ADD ARG1 16
 RETURN 0 (ARG1 + 16)
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG2 + [ARG1]) INT_ADD ARG2 [ARG1]
0 INT_LESSEQUAL [(ARG1 + 8)] ARG2
[(ARG1 + 8)] CAST [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_LESSEQUAL ARG2)
(ARG2 + [ARG1]) CAST (ARG2 + [ARG1])
[(ARG2 + [ARG1])] COPY [(ARG2 + [ARG1])]
[(ARG2 + [ARG1])] LOAD 433 (ARG2 + [ARG1])
 RETURN 1
 CALL libcall___assert_fail_thunk Index < Length && "Invalid index!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 207 0
0 COPY 0
Index < Length && "Invalid index!" COPY Index < Length && "Invalid index!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 RETURN 0 [(ARG2 + [ARG1])]
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1
 CALL func ARG1
 CALL func (ARG1 + 16)
 RETURN 0
ARG1 COPY ARG1
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1
(ARG1 + 32) PTRADD ARG1 4 8
 STORE 433 (ARG1 + 32) ARG3
 STORE 433 (ARG1 + 8) ARG3
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
ARG3 COPY ARG3
ARG2 INT_SEXT ARG2
ARG1 COPY ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f(ARG1 , RSP) CAST f(ARG1 , RSP)
 CBRANCH ([f(ARG1 , RSP)] INT_LESS [(ARG1 + 8)])
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_NOTEQUAL 0 [(f() + 40)]
0 INT_LESS [f(ARG1 , RSP)] [(ARG1 + 8)]
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) INT_ADD 0 40
[(ARG1 + 8)] CAST [(ARG1 + 8)]
(RSP + -48) PTRSUB RSP -48
(f() + 40) CAST (f() + 40)
f(ARG1 , RSP) CALL func (RSP + -48) (ARG1 + 8) (ARG1 + 8)
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
(ARG1 + 8) PTRADD ARG1 1 8
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
-1 COPY -1
[ARG1] LOAD 433 ARG1
0 INT_NOTEQUAL f() 0
([f(ARG1 , RSP)] + [ARG1]) INT_ADD [f(ARG1 , RSP)] [ARG1]
([f(ARG1 , RSP)] + [ARG1]) CAST ([f(ARG1 , RSP)] + [ARG1])
(ARG1 + 8) PTRADD ARG1 1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() CALL libcall_memchr_thunk ([f(ARG1 , RSP)] + [ARG1]) ARG2 ([(ARG1 + 8)] - [f(ARG1 , RSP)])
([(ARG1 + 8)] - [f(ARG1 , RSP)]) INT_SUB [(ARG1 + 8)] [f(ARG1 , RSP)]
 CBRANCH (f() INT_NOTEQUAL 0)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(ARG1)
[ARG1] LOAD 433 ARG1
f() CAST f()
(f() - [ARG1]) CAST (f() - [ARG1])
(f() - [ARG1]) INT_SUB f() [ARG1]
 BRANCH VZERO
ARG1 COPY ARG1
0 INT_LESS ARG2 3
0 INT_EQUAL ARG2 0
ARG2 COPY ARG2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG2 INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
 RETURN 1
0 INT_EQUAL 0 [(f() + 40)]
(f() + 40) CAST (f() + 40)
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
 CBRANCH (0 INT_EQUAL [(f() + 40)])
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
 CBRANCH (f() INT_EQUAL 1)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
(RSP + -200) PTRSUB RSP -200
f() CALL func (RSP + -200) 0
(RSP + -200) PTRSUB RSP -200
f() CALL func (RSP + -200) 1
 CBRANCH (f() INT_NOTEQUAL f())
0 INT_NOTEQUAL f() f()
 CBRANCH f()
(RSP + -128) PTRSUB RSP -128
(RSP + -200) PTRSUB RSP -200
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -176) (RSP + -192) (RSP + -192)
[f(RSP)] COPY [f(RSP)]
 CBRANCH ((f(ARG1) + [f(RSP)]) INT_EQUAL 0)
f() CALL func f()
f() INT_SEXT f()
0 COPY 0
0 INT_EQUAL (f(ARG1) + [f(RSP)]) 0
(f(ARG2) - [f(RSP)]) INT_SUB f(ARG2) [f(RSP)]
(f(ARG1) + [f(RSP)]) COPY (f(ARG1) + [f(RSP)])
f(RSP) CALL func (RSP + -200) 47 2
f(RSP) COPY f(RSP)
f() CALL func (RSP + -200) 0
[f(RSP)] COPY [f(RSP)]
(f(ARG1) + [f(RSP)]) COPY (f(ARG1) + [f(RSP)])
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -168) (RSP + -128) (RSP + -128)
f(RSP) CAST f(RSP)
f(RSP) CAST f(RSP)
(RSP + -200) PTRSUB RSP -200
(RSP + -176) PTRSUB RSP -176
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(RSP + -192) PTRSUB RSP -192
(RSP + -168) PTRSUB RSP -168
(f(ARG1) + [f(RSP)]) INT_ADD [f(RSP)] f(ARG1)
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
0 COPY 0
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 RETURN 1
f() CALL func (RSP + -200) 2
(RSP + -200) PTRSUB RSP -200
0 INT_EQUAL f() 1
f() INT_SEXT f()
f() CALL func f()
(RSP + -192) PTRSUB RSP -192
(f(ARG2) - [f(RSP)]) INT_SUB f(ARG2) [f(RSP)]
(RSP + -152) PTRSUB RSP -152
0 INT_EQUAL (f(ARG1) + [f(RSP)]) 0
f(RSP) CALL func (RSP + -200) 47 0
(RSP + -128) PTRSUB RSP -128
(RSP + -200) PTRSUB RSP -200
(RSP + -144) PTRSUB RSP -144
f(RSP) CAST f(RSP)
[f(RSP)] COPY [f(RSP)]
(RSP + -192) PTRSUB RSP -192
(RSP + -136) PTRSUB RSP -136
(RSP + -128) PTRSUB RSP -128
(f(ARG1) + [f(RSP)]) COPY (f(ARG1) + [f(RSP)])
f(RSP) CAST f(RSP)
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -152) (RSP + -128) (RSP + -128)
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -136) (RSP + -128) (RSP + -128)
[f(RSP)] COPY [f(RSP)]
1 COPY 1
(f(ARG1) + [f(RSP)]) COPY (f(ARG1) + [f(RSP)])
[f(RSP)] COPY [f(RSP)]
(f(ARG1) + [f(RSP)]) INT_ADD [f(RSP)] f(ARG1)
[f(RSP)] LOAD 433 f(RSP)
(f(ARG1) + [f(RSP)]) COPY (f(ARG1) + [f(RSP)])
f(RSP) CALL func (RSP + -160) (RSP + -192) (RSP + -192)
f(RSP) COPY f(RSP)
 CBRANCH ((f(ARG1) + [f(RSP)]) INT_EQUAL 0)
(f(ARG1) + [f(RSP)]) INT_ADD [f(RSP)] f(ARG1)
0 COPY 0
f(RSP) CAST f(RSP)
[f(RSP)] LOAD 433 f(RSP)
[f(RSP)] COPY [f(RSP)]
f(RSP) CALL func (RSP + -144) (RSP + -192) (RSP + -192)
0 INT_EQUAL (f(ARG1) + [f(RSP)]) 0
0 COPY 0
(RSP + -160) PTRSUB RSP -160
(f(ARG1) + [f(RSP)]) COPY (f(ARG1) + [f(RSP)])
(f(ARG2) - [f(RSP)]) INT_SUB f(ARG2) [f(RSP)]
 CBRANCH ((f(ARG1) + [f(RSP)]) INT_EQUAL 0)
f(RSP) CAST f(RSP)
 CBRANCH (ARG2 INT_LESS 3)
f() INT_SEXT f()
f() CALL func f()
f() CALL func (RSP + -200) 0
(RSP + -200) PTRSUB RSP -200
0 INT_EQUAL f() 0
 RETURN 1
 RETURN 0 (f(ARG2 , RSP) # f(ARG1 , RSP))
(f(ARG2 , RSP) # f(ARG1 , RSP)) PIECE f(ARG2 , RSP) f(ARG1 , RSP)
 CALL libcall___stack_chk_fail_thunk
0 INT_NOTEQUAL [f(RSP)] 0
0 INT_NOTEQUAL [f(RSP)] 0
0 INT_NOTEQUAL [f(RSP)] 0
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 COPY ARG1
 STORE 433 ARG1 ARG2
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 32) PTRADD ARG1 4 8
 CALL func ARG1
f() CALL func ARG2 ARG3 ARG2
 STORE 433 (ARG1 + 8) ARG3
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(f() / 2147483647) SUBPIECE f() 0
 STORE 433 (ARG1 + 16) (f() / 2147483647)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
 STORE 433 (ARG1 + 32) 0
[40] LOAD 433 40
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() / 2147483647) INT_RIGHT f() 64
 STORE 433 (ARG1 + 24) (f() / 4611686014132420609)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 CALL func (RSP + -120) ARG1 ARG2 ARG1
 CALL func (RSP + -72) ARG1 ARG2 ARG1
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func (RSP + -120) (RSP + -72) (RSP + -72)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -120) PTRSUB RSP -120
(RSP + -120) PTRSUB RSP -120
(RSP + -72) PTRSUB RSP -72
(f() + 40) CAST (f() + 40)
(RSP + -72) PTRSUB RSP -72
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH f()
(RSP + -136) PTRSUB RSP -136
[f()] LOAD 433 f()
 CALL func (RSP + -136)
(RSP + -120) PTRSUB RSP -120
[(f() + 8)] LOAD 433 (f() + 8)
(f() + 8) PTRADD f() 1 8
f() CALL func (RSP + -120)
 BRANCH VZERO
f() CAST f()
 CBRANCH (f() INT_EQUAL 0)
0 INT_NOTEQUAL f() f()
f() CALL func (RSP + -120)
(RSP + -120) PTRSUB RSP -120
f() CALL func f() 1
f() CALL func (RSP + -120)
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL f())
(RSP + -120) PTRSUB RSP -120
f() CALL func f() 0
 RETURN 1
 RETURN 0 (f() # f())
 CALL libcall___stack_chk_fail_thunk
(f() # f()) PIECE f() f()
 CBRANCH ([(f() + 8)] INT_LESS 3)
(RSP + -120) PTRSUB RSP -120
f() CALL func f()
f() INT_SEXT f()
f() CALL func f() 0
0 INT_EQUAL f() 0
f() CALL func (RSP + -120)
1 COPY 1
 BRANCH VZERO
0 INT_LESS [(f() + 8)] 3
(f() + 8) INT_ADD f() 8
[(f() + 8)] LOAD 433 (f() + 8)
f() CALL func (RSP + -120)
(f() + 8) CAST (f() + 8)
(RSP + -120) PTRSUB RSP -120
 CALL func ARG1 128
 RETURN 0
 CALL func ARG1
 RETURN 0
f() CALL func ARG1 (RSP + -184) (RSP + -184)
40 CAST 40
(f() / 2147483647) INT_RIGHT f() 64
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -184) PTRSUB RSP -184
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_AND 0 4294967040
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
0 INT_ZEXT 0
1 COPY 1
0 INT_EQUAL 0 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -184)
[40] LOAD 433 40
0 INT_OR 0 0
0 SUBPIECE 0 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -184)
1 INT_XOR 0 1
(RSP + -184) PTRSUB RSP -184
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
([(ARG1 + 8)] & -256) INT_AND [(ARG1 + 8)] -256
0 INT_EQUAL [ARG1] [(ARG1 + 8)]
 RETURN 0 ([(ARG1 + 8)] & -256)
([(ARG1 + 8)] & -256) INT_OR ([(ARG1 + 8)] & -256) 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_ZEXT 0
(ARG1 + 24) INT_ADD ARG1 24
 CALL func ARG1 (ARG1 + 24) ARG2 ARG3
 RETURN 0
 CALL func ARG1 (ARG2 * 16) 16 (ARG2 * 16)
(ARG2 * 16) INT_LEFT ARG2 4
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 STORE 433 (ARG1 + 8) ARG2
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1 ([(ARG1 + 8)] + 16) ([(ARG1 + 8)] + 16)
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1 0
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
(ARG2 + 8) PTRADD ARG2 1 8
[ARG2] LOAD 433 ARG2
(ARG1 + 16) CAST (ARG1 + 16)
([(ARG1 + 8)] + 8) PTRADD [(ARG1 + 8)] 1 8
 CBRANCH ([(ARG1 + 16)] INT_LESSEQUAL [(ARG1 + 8)])
([(ARG1 + 8)] + 16) INT_ADD [(ARG1 + 8)] 16
 RETURN 0
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 ([(ARG1 + 8)] + 8) [(ARG2 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 [(ARG1 + 8)] [ARG2]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_LESSEQUAL [(ARG1 + 16)] [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0
[ARG1] LOAD 433 ARG1
(ARG1 + 24) PTRADD ARG1 3 8
[ARG1] CAST [ARG1]
[ARG1] CAST [ARG1]
0 INT_ZEXT 0
([ARG1] & -256) INT_AND [ARG1] -256
0 INT_EQUAL [ARG1] (ARG1 + 24)
 RETURN 0 ([ARG1] & -256)
([ARG1] & -256) INT_OR ([ARG1] & -256) 0
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 CALL func [ARG1] [(ARG1 + 8)] [(ARG1 + 8)]
 CALL libcall_free_thunk [ARG1]
 CALL func ARG1
 RETURN 0
 CALL func ARG1 32
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
ARG1 COPY ARG1
ARG1 COPY ARG1
ARG1 COPY ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
 CALL func ARG1 f() f() f()
 CALL func ARG1 f() f() f()
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 4669145
ARG1 COPY ARG1
ARG1 COPY ARG1
ARG1 COPY ARG1
ARG1 COPY ARG1
f() CALL func ARG2
f() CALL func ARG2 (RSP + -376) (RSP + -376)
f() CALL func ARG3
f() CALL func ARG3 (RSP + -312) (RSP + -312)
f() CALL func ARG4
f() CALL func ARG4 (RSP + -248) (RSP + -248)
f() CALL func ARG5
f() CALL func ARG5 (RSP + -184) (RSP + -184)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -120) PTRSUB RSP -120
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
(RSP + -248) PTRSUB RSP -248
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 CALL func (RSP + -376)
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -184)
 CBRANCH (f() INT_EQUAL f())
(A_Stack[-0x190]:8 # A_Stack[-0x198]:8) PIECE A_Stack[-0x190]:8 A_Stack[-0x198]:8
(RSP + -312) PTRSUB RSP -312
0 INT_EQUAL f() f()
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -248)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -376) PTRSUB RSP -376
(RSP + -120) PTRSUB RSP -120
(RSP + -120) COPY (RSP + -120)
(RSP + -120) COPY (RSP + -120)
(f() / 2147483647) SUBPIECE f() 0
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() COPY f()
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(RSP + -184) PTRSUB RSP -184
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -312)
 CALL func (RSP + -120)
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 CBRANCH ([(f() + 8)] INT_EQUAL 0)
0 COPY 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() CALL func f()
f() INT_SEXT f()
f() CALL func f() 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
1 COPY 1
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -120) (RSP + -408) (RSP + -408)
(f() / 2147483647) SUBPIECE f() 8
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
(RSP + -408) PTRSUB RSP -408
(f() / 2147483647) SUBPIECE f() 0
(RSP + -312) PTRSUB RSP -312
(RSP + -120) PTRSUB RSP -120
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
(f() + 16) PTRADD f() 2 8
 RETURN 1
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
f() CALL func (RSP + -408)
 BRANCH VZERO
f() CALL func (RSP + -408)
([f(RSP)] # ([f(RSP)] + [f()])) PIECE [f(RSP)] ([f(RSP)] + [f()])
(RSP + -408) PTRSUB RSP -408
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 BRANCH VZERO
(RSP + -408) PTRSUB RSP -408
 CBRANCH f()
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_EQUAL 1)
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() 1
0 COPY 0
 CBRANCH (f() INT_EQUAL 1)
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(RSP + -408) PTRSUB RSP -408
f() COPY f()
(([(ARG1 + 8)] - [ARG1]) + -1) INT_SUB ([(ARG1 + 8)] - [ARG1]) -1
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 CALL func (RSP + -408) f() f()
(f() + 8) PTRADD f() 1 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
0 INT_EQUAL [(f() + 8)] 0
([(ARG1 + 8)] - [ARG1]) CAST ([(ARG1 + 8)] - [ARG1])
 CBRANCH (([(ARG1 + 8)] - [ARG1]) INT_LESSEQUAL (([(ARG1 + 8)] - [ARG1]) + -1))
(RSP + -408) PTRSUB RSP -408
[(f() + 8)] LOAD 433 (f() + 8)
0 INT_LESSEQUAL ([(ARG1 + 8)] - [ARG1]) (([(ARG1 + 8)] - [ARG1]) + -1)
f() CALL func (RSP + -408)
(RSP + -376) PTRSUB RSP -376
(RSP + -120) PTRSUB RSP -120
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -120) (RSP + -408) (RSP + -408)
(RSP + -408) PTRSUB RSP -408
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_NOTEQUAL [40])
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 CBRANCH (f() INT_EQUAL 1)
1 COPY 1
 BRANCH VZERO
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(RSP + -312) PTRSUB RSP -312
f() COPY f()
[40] LOAD 433 (f() + 40)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
0 INT_EQUAL f() 1
 CALL func (RSP + -184)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 CALL func (RSP + -376)
(RSP + -248) PTRSUB RSP -248
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -120)
 CALL func (RSP + -312)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(RSP + -120) PTRSUB RSP -120
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(RSP + -376) PTRSUB RSP -376
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [40]
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 CALL func (RSP + -248)
(f() + 40) CAST (f() + 40)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
f() CALL func f()
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -592) (f() + 8) (f() + 8)
([(f() + 8)] - [f(RSP)]) INT_SUB [(f() + 8)] [f(RSP)]
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
[f()] LOAD 433 f()
(f() + 8) PTRADD f() 1 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
f() COPY f()
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (([f(RSP)] + [f()]) INT_EQUAL 0)
f(RSP) CALL func (RSP + -584) (RSP + -576) (RSP + -576)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
0 INT_EQUAL ([f(RSP)] + [f()]) 0
f() CALL func f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
[(f() + 8)] LOAD 433 (f() + 8)
([f(RSP)] + [f()]) INT_ADD [f(RSP)] [f()]
[f(RSP)] COPY [f(RSP)]
([f(RSP)] + [f()]) COPY ([f(RSP)] + [f()])
f(RSP) CALL func f() 47 0
(RSP + -584) PTRSUB RSP -584
 CBRANCH f()
f(RSP) CAST f(RSP)
(RSP + -592) PTRSUB RSP -592
(RSP + -576) PTRSUB RSP -576
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f(RSP) CAST f(RSP)
-1 COPY -1
(f() + 8) PTRADD f() 1 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -120) (RSP + -408) (RSP + -408)
(RSP + -184) PTRSUB RSP -184
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -408) PTRSUB RSP -408
f() COPY f()
4669145 PTRSUB 0 4669145
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
0 INT_EQUAL f() 1
(f() / 2147483647) SUBPIECE f() 0
(RSP + -408) PTRSUB RSP -408
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
(RSP + -248) PTRSUB RSP -248
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -120) (RSP + -408) (RSP + -408)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
0 COPY 0
idx < size() COPY idx < size()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
((([(ARG1 + 8)] - [ARG1]) + -1) + [ARG1]) INT_ADD (([(ARG1 + 8)] - [ARG1]) + -1) [ARG1]
[((([(ARG1 + 8)] - [ARG1]) + -1) + [ARG1])] LOAD 433 ((([(ARG1 + 8)] - [ARG1]) + -1) + [ARG1])
((([(ARG1 + 8)] - [ARG1]) + -1) + [ARG1]) CAST ((([(ARG1 + 8)] - [ARG1]) + -1) + [ARG1])
0 INT_EQUAL f() 0
f() CALL func [((([(ARG1 + 8)] - [ARG1]) + -1) + [ARG1])]
[((([(ARG1 + 8)] - [ARG1]) + -1) + [ARG1])] INT_SEXT [((([(ARG1 + 8)] - [ARG1]) + -1) + [ARG1])]
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
0 INT_NOTEQUAL [f(RSP)] 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 2 4
 RETURN 0
f() CALL libcall_system_category_thunk
 STORE 433 (ARG1 + 8) f()
(ARG1 + 8) CAST (ARG1 + 8)
f() CALL func ARG1
f() CALL func ARG1
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
 CBRANCH (f() INT_NOTEQUAL 1)
0 COPY 0
1 COPY 1
 RETURN 0 0
 RETURN 0 1
0 INT_NOTEQUAL f() 1
f() CALL func ARG1
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
 CALL func ARG1 ARG2 ARG2
[ARG2] LOAD 433 ARG2
 CALL func ARG2
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 1 8
 CALL func ARG2 (RSP + -56) (RSP + -56)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
 RETURN 1
0 INT_EQUAL 0 [(f() + 40)]
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
(f() + 40) CAST (f() + 40)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 CBRANCH (0 INT_EQUAL [(f() + 40)])
 CBRANCH (([(ARG2 + 8)] - [ARG2]) INT_NOTEQUAL 0)
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 RETURN 1
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_NOTEQUAL ([(ARG2 + 8)] - [ARG2]) 0
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CBRANCH (f() INT_EQUAL 3)
([(ARG2 + 8)] - [ARG2]) INT_SUB [(ARG2 + 8)] [ARG2]
(RSP + -56) PTRSUB RSP -56
0 INT_EQUAL f() 3
(f() & -256) INT_AND f() -256
0 INT_EQUAL f() 0
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 4)
0 INT_EQUAL f() 4
 CALL func (RSP + -56) [ARG1] [ARG1]
f() CALL libcall_c_str_thunk
0 INT_EQUAL f() 0
f() CALL libcall_size_thunk
(f(ARG2) # f()) PIECE f(ARG2) f()
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (f(ARG2) # f())
0 INT_EQUAL ARG1 1
0 INT_EQUAL ARG1 2
0 INT_EQUAL ARG1 0
 CBRANCH (ARG1 INT_EQUAL 1)
 RETURN 0 f()
2 COPY 2
 CBRANCH (ARG1 INT_EQUAL 2)
 BRANCH VZERO
 BRANCH VZERO
 CBRANCH (ARG1 INT_EQUAL 0)
5 COPY 5
0 COPY 0
invalid enum COPY invalid enum
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc
f() CALL func invalid enum /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc 306
 BRANCH VZERO
(ARG1 + 8) PTRADD ARG1 2 4
 STORE 433 ARG1 f()
f() CALL func ARG2
 RETURN 0
 STORE 433 (ARG1 + 8) 0
(ARG1 + 8) CAST (ARG1 + 8)
f() CALL func ARG2
0 INT_EQUAL ARG2 2
f() CALL func ARG1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL f() 4294967295
 CALL func (RSP + -200)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL libcall_access_thunk f() f()
(f() / 2147483647) SUBPIECE f() 8
f() CAST f()
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -200)
f() CALL func (RSP + -376)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -376) PTRSUB RSP -376
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(RSP + -200) PTRSUB RSP -200
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL 4294967295)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
 RETURN 0 (f() # f())
(f() # f()) INT_AND (f() # f()) -1
(f() / 2147483647) SUBPIECE f() 8
(f() # f()) PIECE f() f()
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -360) [f()] f() [f()]
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
f() CALL libcall_generic_category_thunk
(f() / 2147483647) SUBPIECE f() 8
(RSP + -360) PTRSUB RSP -360
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (ARG2 INT_EQUAL 2)
 CBRANCH (f() INT_NOTEQUAL 0)
 CALL func (RSP + -360) 13
0 INT_NOTEQUAL (A_Stack[-0x140]:4 & 61440) 32768
(A_Stack[-0x140]:4 & 61440) INT_AND A_Stack[-0x140]:4 61440
(RSP + -360) PTRSUB RSP -360
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH ((A_Stack[-0x140]:4 & 61440) INT_NOTEQUAL 32768)
 CALL func (RSP + -360) 13
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -360)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -360) PTRSUB RSP -360
 BRANCH VZERO
(RSP + -360) PTRSUB RSP -360
(f() / 2147483647) SUBPIECE f() 0
(RSP + -376) PTRSUB RSP -376
f() CALL func (RSP + -376)
f() CALL func f() (RSP + -344) f()
(f() / 2147483647) SUBPIECE f() 0
(RSP + -344) PTRSUB RSP -344
(f() / 2147483647) SUBPIECE f() 8
0 INT_NOTEQUAL f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func ARG1 2
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
f() CALL func (RSP + -40)
0 INT_XOR f() 1
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
0 COPY 0
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 COPY 0
 RETURN 0 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
 STORE 433 ARG1 f()
(ARG1 + 8) PTRADD ARG1 1 8
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 1 8
 RETURN 0
([(ARG2 + 8)] - [ARG2]) INT_SUB [(ARG2 + 8)] [ARG2]
 STORE 433 (ARG1 + 8) (([(ARG2 + 8)] - [ARG2]) / 16)
(([(ARG2 + 8)] - [ARG2]) / 16) INT_SRIGHT ([(ARG2 + 8)] - [ARG2]) 4
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CALL func ARG1
 RETURN 0
 CALL libcall___throw_out_of_range_fmt_thunk 0 ARG3 ARG2 256
0 INT_LESS 255 ARG2
 CBRANCH (255 INT_LESS ARG2)
 RETURN 0
0 COPY 0
(ARG1 & 63) INT_AND ARG1 63
 RETURN 0 (ARG1 & 63)
(ARG1 & 63) COPY (ARG1 & 63)
f() CALL func ARG1
(1 << (f() & 63)) COPY (1 << (f() & 63))
(1 << (f() & 63)) INT_LEFT 1 (f() & 63)
(f() & 63) INT_AND f() 63
 RETURN 0 (1 << (f() & 63))
(ARG1 / 64) INT_RIGHT ARG1 6
 RETURN 0 (ARG1 / 64)
f() CALL func ARG2
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
 RETURN 0 (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
0 INT_EQUAL ARG3 0
ARG1 COPY ARG1
f() CALL func ARG1 ARG2 ARG2
f() CALL func ARG1 ARG2 ARG2
f() CALL func ARG2
f() CALL func ARG2
 RETURN 0 ARG1
 CBRANCH (ARG3 INT_EQUAL 0)
 BRANCH VZERO
 STORE 433 f() (~(f()) & f())
~(f()) INT_NEGATE f()
f() CAST f()
 STORE 433 f() (f() | f())
f() CAST f()
(~(f()) & f()) INT_AND f() ~(f())
f() LOAD 433 f()
f() LOAD 433 f()
(f() | f()) INT_OR f() f()
 CALL func ARG1 ARG2 ARG3 ARG2
 CALL func ARG1 ARG2 bitset::set ARG2
bitset::set COPY bitset::set
 RETURN 0
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
f() CALL func ARG2
 RETURN 0 [(ARG1 + (f() * 8))]
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
[(ARG1 + (f() * 8))] COPY [(ARG1 + (f() * 8))]
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
f() CALL func ARG1 ARG2 ARG2
f() CALL func ARG2
(f() & -256) INT_OR (f() & -256) 0
0 INT_NOTEQUAL f() 0
 RETURN 0 (f() & -256)
f() INT_AND f() f()
(f() & -256) INT_AND f() -256
0 INT_ZEXT 0
 CALL func ARG1 ARG2 bitset::test ARG2
 CALL func ARG1 ARG2 ARG2
 RETURN 0
bitset::test COPY bitset::test
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
(FS_OFFSET + 40) INT_ADD 0 40
[(f(ARG1) + 8)] LOAD 433 (f(ARG1) + 8)
0 COPY 0
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
0 COPY 0
 CBRANCH (f(ARG3) INT_NOTEQUAL f())
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f(ARG1 , RSP) CAST f(ARG1 , RSP)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
f(ARG1 , RSP) CALL func (RSP + -104) (f(ARG1) + 8) (f(ARG1) + 8)
 CBRANCH (f(ARG1 , RSP) INT_NOTEQUAL f(ARG1))
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f(ARG1 , RSP) f(ARG1)
0 COPY 0
0 INT_EQUAL f() [(f() + 40)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL f(ARG3) f()
0 COPY 0
(RSP + -104) PTRSUB RSP -104
[(f() + 40)] LOAD 433 (f() + 40)
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
0 COPY 0
(f() + 40) CAST (f() + 40)
 RETURN 1
 RETURN 0 f(ARG1 , RSP)
 CALL libcall___stack_chk_fail_thunk
(f(ARG1 , RSP) + [f(ARG1)]) CAST (f(ARG1 , RSP) + [f(ARG1)])
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
[(f(ARG1 , RSP) + [f(ARG1)])] LOAD 433 (f(ARG1 , RSP) + [f(ARG1)])
f() CALL func (RSP + -56) [(f(ARG1 , RSP) + [f(ARG1)])] [(f(ARG1 , RSP) + [f(ARG1)])]
-1 COPY -1
f(ARG1 , RSP) COPY f(ARG1 , RSP)
(f(ARG1 , RSP) + [f(ARG1)]) INT_ADD f(ARG1 , RSP) [f(ARG1)]
-1 COPY -1
[f(ARG1)] LOAD 433 f(ARG1)
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(RSP + -56) PTRSUB RSP -56
(RSP + -120) PTRSUB RSP -120
f() CALL func (RSP + -120) f() f()
 CALL func (RSP + -56) f() 1 f()
 BRANCH VZERO
(f(ARG1 , RSP) + 1) INT_ADD f(ARG1 , RSP) 1
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
 CBRANCH (f() INT_EQUAL [(f() + 40)])
 CBRANCH (f(ARG3) INT_NOTEQUAL f())
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 COPY 0
(RSP + -104) PTRSUB RSP -104
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() [(f() + 40)]
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
(f() + 40) CAST (f() + 40)
f(ARG1 , RSP) CALL func (RSP + -104) (f(ARG1) + 8) (f(ARG1) + 8)
 CBRANCH (f(ARG1 , RSP) INT_NOTEQUAL f(ARG1))
0 INT_NOTEQUAL f(ARG1 , RSP) f(ARG1)
0 COPY 0
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_NOTEQUAL f(ARG3) f()
0 COPY 0
0 COPY 0
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
f(ARG1 , RSP) CAST f(ARG1 , RSP)
(FS_OFFSET + 40) INT_ADD 0 40
[(f(ARG1) + 8)] LOAD 433 (f(ARG1) + 8)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 COPY 0
[(f(ARG1 , RSP) + [f(ARG1)])] LOAD 433 (f(ARG1 , RSP) + [f(ARG1)])
f() CALL func (RSP + -56) [(f(ARG1 , RSP) + [f(ARG1)])] [(f(ARG1 , RSP) + [f(ARG1)])]
(f(ARG1 , RSP) + [f(ARG1)]) CAST (f(ARG1 , RSP) + [f(ARG1)])
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(f(ARG1 , RSP) + [f(ARG1)]) INT_ADD f(ARG1 , RSP) [f(ARG1)]
-1 COPY -1
[f(ARG1)] LOAD 433 f(ARG1)
f(ARG1 , RSP) COPY f(ARG1 , RSP)
-1 COPY -1
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(ARG1 , RSP)
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() CALL func (RSP + -120) f() f()
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) f() 1 f()
(RSP + -120) PTRSUB RSP -120
(f(ARG1 , RSP) + 1) INT_ADD f(ARG1 , RSP) 1
 BRANCH VZERO
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 24) PTRADD ARG1 3 8
 STORE 433 ARG1 [f(ARG2)]
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
 STORE 433 (ARG1 + 16) [f(ARG3)]
[(f(ARG2) + 8)] LOAD 433 (f(ARG2) + 8)
 RETURN 0
[f(ARG3)] LOAD 433 f(ARG3)
 STORE 433 (ARG1 + 8) [(f(ARG2) + 8)]
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
[(f(ARG3) + 8)] LOAD 433 (f(ARG3) + 8)
(f(ARG3) + 8) PTRADD f(ARG3) 1 8
f(ARG2) CAST f(ARG2)
f(ARG3) CAST f(ARG3)
 STORE 433 (ARG1 + 24) [(f(ARG3) + 8)]
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
ARG1 COPY ARG1
 CALL func ARG1 f(ARG2) f(ARG3) f(ARG2)
 RETURN 0 ARG1
ARG3 COPY ARG3
f(RSP) CALL func (RSP + -184) ARG4 ARG5 0
f(RSP) CALL func (RSP + -184) ARG4 ARG5 f(RSP)
ARG1 COPY ARG1
ARG2 COPY ARG2
[f(RSP)] LOAD 433 f(RSP)
-1 COPY -1
f(RSP) CAST f(RSP)
f(RSP) COPY f(RSP)
f(RSP) CALL func (RSP + -128) (RSP + -72) (RSP + -72)
(RSP + -184) PTRSUB RSP -184
(FS_OFFSET + 40) INT_ADD 0 40
[f(RSP)] LOAD 433 f(RSP)
[f(RSP)] COPY [f(RSP)]
f(RSP) CALL func (RSP + -136) (RSP + -176) (RSP + -176)
([f(RSP)] + ARG2) COPY ([f(RSP)] + ARG2)
([f(RSP)] + ARG2) INT_ADD [f(RSP)] ARG2
(RSP + -136) PTRSUB RSP -136
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -176) PTRSUB RSP -176
 CBRANCH (([f(RSP)] + ARG2) INT_EQUAL 0)
(ARG3 - [f(RSP)]) INT_SUB ARG3 [f(RSP)]
0 INT_EQUAL ([f(RSP)] + ARG2) 0
(RSP + -128) PTRSUB RSP -128
(RSP + -72) PTRSUB RSP -72
f(RSP) CAST f(RSP)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -184) PTRSUB RSP -184
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
([f(RSP)] + ARG2) COPY ([f(RSP)] + ARG2)
[f(RSP)] COPY [f(RSP)]
f(RSP) CALL func (RSP + -152) (RSP + -176) (RSP + -176)
f(RSP) CALL func (RSP + -152) (RSP + -144) (RSP + -144)
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
0 COPY 0
(RSP + -152) PTRSUB RSP -152
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
([f(RSP)] + ARG2) INT_ADD [f(RSP)] ARG2
(RSP + -176) PTRSUB RSP -176
 CBRANCH (([f(RSP)] + ARG2) INT_EQUAL 0)
(RSP + -152) PTRSUB RSP -152
0 INT_EQUAL ([f(RSP)] + ARG2) 0
 RETURN 1
([f(RSP)] - [f(RSP)]) COPY ([f(RSP)] - [f(RSP)])
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
([f(RSP)] + ARG2) COPY ([f(RSP)] + ARG2)
(RSP + -144) PTRSUB RSP -144
f(RSP) CAST f(RSP)
(RSP + -176) PTRSUB RSP -176
f(RSP) COPY f(RSP)
f(RSP) CALL func f(RSP) (RSP + -176)
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CAST f(RSP)
([f(RSP)] - [f(RSP)]) INT_SUB [f(RSP)] [f(RSP)]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CBRANCH (([f(RSP)] - [f(RSP)]) INT_NOTEQUAL 0)
ARG1 COPY ARG1
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CALL func ARG1 (RSP + -56) (RSP + -72) (RSP + -56)
 RETURN 1
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
40 CAST 40
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
[40] LOAD 433 40
(RSP + -56) PTRSUB RSP -56
(RSP + -72) PTRSUB RSP -72
0 INT_NOTEQUAL ([f(RSP)] - [f(RSP)]) 0
0 INT_NOTEQUAL [f(RSP)] 0
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 [f(ARG2)]
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 16) PTRADD ARG1 2 8
ARG1 COPY ARG1
f(ARG2) CALL func ARG2
(ARG2 + 16) INT_ADD ARG2 16
[f(ARG2)] LOAD 433 f(ARG2)
[f(ARG2)] LOAD 433 f(ARG2)
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
[(f(ARG2) + 8)] LOAD 433 (f(ARG2) + 8)
[(f(ARG2) + 8)] LOAD 433 (f(ARG2) + 8)
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
f(ARG2) CAST f(ARG2)
f(ARG2) CALL func (ARG2 + 16)
f(ARG2) CAST f(ARG2)
 STORE 433 (ARG1 + 24) [(f(ARG2) + 8)]
 STORE 433 (ARG1 + 8) [(f(ARG2) + 8)]
 RETURN 0 ARG1
 STORE 433 (ARG1 + 16) [f(ARG2)]
 CALL func (RSP + -88) ARG1 ARG2 ARG4 ARG5
 CALL func ARG3 (RSP + -88) (RSP + -88)
 CALL func (RSP + -56) f() f() ARG4 ARG5
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [40])
(f() + 40) CAST (f() + 40)
(RSP + -88) PTRSUB RSP -88
[40] LOAD 433 (f() + 40)
0 INT_NOTEQUAL 0 [40]
(f() + 40) INT_ADD f() 40
(RSP + -88) PTRSUB RSP -88
(RSP + -88) PTRSUB RSP -88
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -88) (RSP + -56) (RSP + -56)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 CALL func ARG1 16
 RETURN 0
ARG1 COPY ARG1
ARG2 COPY ARG2
0 INT_EQUAL ARG3 0
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG5 COPY ARG5
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG3 INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL 0)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -504) PTRSUB RSP -504
 CALL func f(ARG1) (RSP + -504) (RSP + -504)
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -504) (RSP + -536) (RSP + -536)
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -504) PTRSUB RSP -504
 CALL libcall_~basic_string_thunk (RSP + -504)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -536) PTRSUB RSP -536
f() COPY f()
(f() / 2147483647) SUBPIECE f() 8
(RSP + -472) PTRSUB RSP -472
(RSP + -504) PTRSUB RSP -504
f() CALL func (RSP + -472)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_getenv_thunk 4675613
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
4675613 COPY 4675613
 CBRANCH (f(ARG2) INT_EQUAL -1)
 CALL func (RSP + -312) (RSP + -744) (RSP + -744)
f() CAST f()
(RSP + -312) PTRSUB RSP -312
(f() # f()) PIECE f() f()
 CALL func (RSP + -312)
 BRANCH VZERO
 CALL libcall_~basic_string_thunk (RSP + -312)
 CALL func (RSP + -312)
(RSP + -760) PTRSUB RSP -760
f() CALL func (RSP + -760)
(f() # f()) PIECE f() f()
(RSP + -760) PTRSUB RSP -760
(RSP + -312) PTRSUB RSP -312
 CALL func f(ARG1) (RSP + -312) (RSP + -312)
0 INT_NOTEQUAL f() 0
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_NOTEQUAL f())
0 INT_NOTEQUAL f() f()
(RSP + -312) PTRSUB RSP -312
(RSP + -312) PTRSUB RSP -312
f() CAST f()
(RSP + -744) PTRSUB RSP -744
f() CALL func (RSP + -760)
f() CALL func (RSP + -760)
(RSP + -312) PTRSUB RSP -312
(f() / 2147483647) SUBPIECE f() 8
[f()] LOAD 433 f()
0 INT_NOTEQUAL [(f() + 8)] 0
 CALL func f(ARG1) 2 0
(f() / 2147483647) SUBPIECE f() 0
[(f() + 8)] LOAD 433 (f() + 8)
(f() + 8) PTRADD f() 1 8
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH ([(f() + 8)] INT_NOTEQUAL 0)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
 RETURN 0 f(ARG1)
 CBRANCH ([f(RSP)] INT_LESS ARG3)
0 INT_NOTEQUAL f() 0
([f(RSP)] + ARG2) CAST ([f(RSP)] + ARG2)
([f(RSP)] + ARG2) INT_ADD [f(RSP)] ARG2
47 INT_SEXT 47
(ARG3 - [f(RSP)]) INT_SUB ARG3 [f(RSP)]
-1 COPY -1
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memchr_thunk ([f(RSP)] + ARG2) 47 (ARG3 - [f(RSP)])
 CBRANCH (f() INT_NOTEQUAL 0)
(f() + 16) PTRADD f() 2 8
 BRANCH VZERO
 CALL func (RSP + -536) (RSP + -312) (RSP + -312)
(RSP + -312) PTRSUB RSP -312
f() COPY f()
4675618 PTRSUB 0 4675618
 CALL func f() f() (RSP + -312) f() f()
(RSP + -312) PTRSUB RSP -312
(RSP + -536) PTRSUB RSP -536
(RSP + -568) PTRSUB RSP -568
(RSP + -536) PTRSUB RSP -536
 CALL func (RSP + -568) f() f()
 CALL func (RSP + -536) 4675618
f() COPY f()
(f() - ARG2) INT_SUB f() ARG2
(f() - ARG2) CAST (f() - ARG2)
f() CAST f()
 BRANCH VZERO
(RSP + -568) PTRSUB RSP -568
 CALL func (RSP + -536) 4675620
(RSP + -536) PTRSUB RSP -536
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
0 INT_NOTEQUAL f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -632) PTRSUB RSP -632
 CALL func (RSP + -472) [f()] [(f() + 8)] [f()]
 CALL func (RSP + -568) 4675620
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -472) (RSP + -632) (RSP + -600) (RSP + -568) (RSP + -536)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -536) PTRSUB RSP -536
(RSP + -472) PTRSUB RSP -472
4675620 PTRSUB 0 4675620
 CALL func (RSP + -472)
(RSP + -632) PTRSUB RSP -632
(RSP + -600) PTRSUB RSP -600
(f() / 2147483647) SUBPIECE f() 8
(RSP + -472) PTRSUB RSP -472
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -536) PTRSUB RSP -536
 CALL func (RSP + -600) 4675620
(f() / 2147483647) SUBPIECE f() 0
(RSP + -568) PTRSUB RSP -568
f() CALL func (RSP + -472)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -472) PTRSUB RSP -472
4675620 PTRSUB 0 4675620
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -536)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -744) PTRSUB RSP -744
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -632) (RSP + -744) (RSP + -744)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -472) PTRSUB RSP -472
(RSP + -536) PTRSUB RSP -536
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -536) f() f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -600) PTRSUB RSP -600
4675620 PTRSUB 0 4675620
f(RSP) CAST f(RSP)
f(RSP) CALL func (RSP + -704) (RSP + -736) (RSP + -736)
0 COPY 0
47 COPY 47
 RETURN 1
 CALL libcall___assert_fail_thunk !Name.empty() && "Must have a name!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Program.inc 73 0
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Program.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Program.inc
!Name.empty() && "Must have a name!" COPY !Name.empty() && "Must have a name!"
0 INT_EQUAL f(ARG2) -1
(RSP + -704) PTRSUB RSP -704
(RSP + -736) PTRSUB RSP -736
[f(RSP)] LOAD 433 f(RSP)
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
f(ARG1) COPY f(ARG1)
0 INT_EQUAL f() [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_LESS [f(RSP)] ARG3
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
(ARG1 + 32) INT_ADD ARG1 32
([(ARG1 + 32)] & 1) INT_AND [(ARG1 + 32)] 1
 CBRANCH (([(ARG1 + 32)] & 1) INT_EQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL ([(ARG1 + 32)] & 1) 0
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(ARG1 + 32) CAST (ARG1 + 32)
(f() # f()) PIECE f() f()
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
(f() # f()) INT_AND (f() # f()) -1
 RETURN 1
 RETURN 0 (f() # f())
 CALL libcall___stack_chk_fail_thunk
f() CAST f()
[(f() + 8)] LOAD 433 (f() + 8)
 CALL func (RSP + -56)
 BRANCH VZERO
[f()] LOAD 433 f()
(RSP + -56) PTRSUB RSP -56
(f() + 8) PTRADD f() 1 8
(ARG1 + 32) INT_ADD ARG1 32
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
([(ARG1 + 32)] & 1) INT_AND [(ARG1 + 32)] 1
 RETURN 0 0
0 COPY 0
(ARG1 + 32) CAST (ARG1 + 32)
0 INT_XOR ([(ARG1 + 32)] & 1) 1
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
f() CALL func ARG2
f() CALL func ARG2
 CALLIND [([f()] + 32)] ARG1 f() f()
ARG1 COPY ARG1
f() CAST f()
([f()] + 32) INT_ADD [f()] 32
[40] LOAD 433 40
[([f()] + 32)] LOAD 433 ([f()] + 32)
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
([f()] + 32) CAST ([f()] + 32)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[f()] LOAD 433 f()
(FS_OFFSET + 40) INT_ADD 0 40
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 (ARG1 + 8) 0
 RETURN 0
 CALL func ARG1
 RETURN 0
f(ARG1) CALL func ARG1
(ARG1 + 32) INT_ADD ARG1 32
([(ARG1 + 32)] & 1) INT_AND [(ARG1 + 32)] 1
(ARG1 + 32) CAST (ARG1 + 32)
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
 CBRANCH (([(ARG1 + 32)] & 1) INT_NOTEQUAL 1)
0 INT_NOTEQUAL ([(ARG1 + 32)] & 1) 1
 RETURN 0
f(ARG1) CAST f(ARG1)
 CALL libcall_~basic_string_thunk f(ARG1)
(ARG1 + 4) PTRADD ARG1 1 4
 STORE 433 ARG1 0
 RETURN 0
 STORE 433 (ARG1 + 4) 0
 RETURN 0
ARG1 COPY ARG1
 CALL libcall_basic_string_thunk ARG1
ARG1 CAST ARG1
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL libcall_append_thunk ARG1
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
f() CALL libcall_strerror_r_thunk ARG2 (RSP + -2024) 1999
0 INT_NOTEQUAL ARG2 0
 CALL libcall_operator=_thunk ARG1 f()
ARG1 COPY ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG2 INT_NOTEQUAL 0)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CALL libcall_basic_string_thunk
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
0 COPY 0
(RSP + -2024) PTRSUB RSP -2024
 BRANCH VZERO
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
 CALL libcall_basic_string_thunk ARG1
f() CALL libcall_append_thunk ARG2
f() CALL libcall_insert_thunk ARG3 0
(f() + f()) INT_ADD f() f()
f() CALL libcall_size_thunk
 CBRANCH (f() INT_LESS (f() + f()))
(f() + f()) CAST (f() + f())
 CBRANCH f()
f() CALL libcall_size_thunk
f() CALL libcall_capacity_thunk
0 INT_LESS f() (f() + f())
 RETURN 0 ARG1
 CBRANCH ((f() + f()) INT_LESSEQUAL f())
1 COPY 1
0 COPY 0
 BRANCH VZERO
(f() + f()) CAST (f() + f())
f() CALL libcall_capacity_thunk
0 INT_LESSEQUAL (f() + f()) f()
 CALL func f()
 BRANCH VZERO
 CALL func f()
ARG3 COPY ARG3
0 INT_EQUAL ARG3 4294967295
0 INT_NOTEQUAL ARG1 0
 CALL libcall_operator=_thunk ARG1 (RSP + -56)
 CALL func (RSP + -120) ARG2 4675337 ARG2
 CBRANCH (ARG1 INT_NOTEQUAL 0)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
1 COPY 1
 CALL func (RSP + -88) f(ARG3) f(ARG3)
(RSP + -56) PTRSUB RSP -56
(RSP + -120) PTRSUB RSP -120
4675337 PTRSUB 0 4675337
 CALL libcall_~basic_string_thunk (RSP + -88)
 CALL libcall_~basic_string_thunk (RSP + -56)
(RSP + -56) CAST (RSP + -56)
(RSP + -88) PTRSUB RSP -88
(RSP + -56) PTRSUB RSP -56
(RSP + -120) PTRSUB RSP -120
 CBRANCH (ARG3 INT_EQUAL 4294967295)
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -56) (RSP + -120) (RSP + -88) (RSP + -120)
 CALL libcall_~basic_string_thunk (RSP + -120)
(RSP + -120) PTRSUB RSP -120
(RSP + -88) PTRSUB RSP -88
(RSP + -56) PTRSUB RSP -56
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 1
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
0 INT_NOTEQUAL ARG3 1
0 INT_NOTEQUAL ARG3 1
0 INT_EQUAL ARG3 0
 CALL libcall_operator=_thunk ARG4 Program could not be executed
 CALL func ARG4 (RSP + -360) 4294967295 (RSP + -360)
 CALL libcall_operator=_thunk ARG4 (RSP + -360)
 CALL libcall_operator=_thunk ARG4 f()
0 INT_NOTEQUAL ARG4 0
 CALL func ARG4 (RSP + -360) 0 (RSP + -360)
 CALL func ARG4 (RSP + -360) 4294967295 (RSP + -360)
0 INT_NOTEQUAL ARG4 0
0 INT_NOTEQUAL ARG4 0
 CALL libcall_operator+=_thunk ARG4 (core dumped)
 CALL libcall_alarm_thunk ARG2
0 INT_EQUAL ARG2 0
ARG2 COPY ARG2
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
 CBRANCH ((f() & 127) INT_EQUAL 0)
(f() # f()) PIECE f() f()
(f() / 2147483647) SUBPIECE f() 0
((f() & 65280) / 256) INT_SRIGHT (f() & 65280) 8
0 INT_SLESS 0 (((127 & (f() / 2147483647)) + 1) / 2)
((f() & 65280) / 256) COPY ((f() & 65280) / 256)
((127 & (f() / 2147483647)) + 1) INT_ADD (127 & (f() / 2147483647)) 1
((127 & (f() / 2147483647)) + 1) CAST ((127 & (f() / 2147483647)) + 1)
 CBRANCH (((f() & 65280) / 256) INT_EQUAL 127)
 CBRANCH (0 INT_SLESS (((127 & (f() / 2147483647)) + 1) / 2))
(127 & (f() / 2147483647)) INT_AND (f() / 2147483647) 127
0 INT_EQUAL ((f() & 65280) / 256) 127
(f() & 65280) CAST (f() & 65280)
(f() & 65280) INT_AND f() 65280
(((127 & (f() / 2147483647)) + 1) / 2) INT_SRIGHT ((127 & (f() / 2147483647)) + 1) 1
 CBRANCH (ARG3 INT_NOTEQUAL 1)
 CALL libcall_sigaction_thunk 14 (RSP + -168) 0
 CALL libcall_alarm_thunk 0
(RSP + -168) CAST (RSP + -168)
(RSP + -328) PTRSUB RSP -328
(RSP + -168) PTRADD (RSP + -328) 160 1
 CBRANCH (f() INT_EQUAL f(ARG1))
Child timed out but wouldn't die COPY Child timed out but wouldn't die
(RSP + -360) PTRSUB RSP -360
Child timed out but wouldn't die CAST Child timed out but wouldn't die
(RSP + -360) CAST (RSP + -360)
(RSP + -360) PTRSUB RSP -360
 CALL libcall_allocator_thunk
(RSP + -385) PTRSUB RSP -385
 CALL libcall_basic_string_thunk (RSP + -360) Child timed out
 BRANCH VZERO
 CALL libcall_~basic_string_thunk (RSP + -360)
Child timed out COPY Child timed out
(RSP + -360) PTRSUB RSP -360
 CALL libcall_~allocator_thunk (RSP + -385)
Child timed out CAST Child timed out
(RSP + -360) PTRSUB RSP -360
(RSP + -360) CAST (RSP + -360)
 CALL libcall_basic_string_thunk (RSP + -360) Child timed out but wouldn't die
 CALL libcall_~basic_string_thunk (RSP + -360)
(RSP + -360) PTRSUB RSP -360
 CALL libcall_allocator_thunk
(RSP + -385) PTRSUB RSP -385
 CALL libcall_~allocator_thunk (RSP + -385)
(RSP + -360) PTRSUB RSP -360
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
 CBRANCH ([f()] INT_NOTEQUAL 4)
(RSP + -385) PTRSUB RSP -385
0 INT_EQUAL (f() & 127) 0
(f() & 127) INT_AND f() 127
 BRANCH VZERO
(RSP + -360) PTRSUB RSP -360
Error waiting for child process COPY Error waiting for child process
Error waiting for child process CAST Error waiting for child process
0 INT_NOTEQUAL f(ARG2) 0
(RSP + -360) PTRSUB RSP -360
 CALL libcall_basic_string_thunk (RSP + -360) Error waiting for child process
(RSP + -360) PTRSUB RSP -360
(RSP + -360) CAST (RSP + -360)
0 COPY 0
 CALL libcall_~basic_string_thunk (RSP + -360)
 CALL libcall_allocator_thunk
4294967295 COPY 4294967295
(4294967295 # f()) PIECE 4294967295 f()
 CALL libcall_~allocator_thunk (RSP + -385)
 CBRANCH (((f() & 65280) / 256) INT_EQUAL 126)
(4294967295 # f()) PIECE 4294967295 f()
 BRANCH VZERO
4294967295 COPY 4294967295
 CBRANCH (ARG4 INT_NOTEQUAL 0)
 CBRANCH (ARG4 INT_NOTEQUAL 0)
4294967294 COPY 4294967294
 CBRANCH ((f() & 128) INT_NOTEQUAL 0)
(core dumped) COPY (core dumped)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
Program could not be executed COPY Program could not be executed
 CBRANCH (f() INT_NOTEQUAL [ARG1])
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
f() CALL libcall___errno_location_thunk
 CBRANCH ([f()] INT_EQUAL 4)
0 INT_EQUAL [f()] 4
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
0 INT_NOTEQUAL [f()] 4
[f()] LOAD 433 f()
 CBRANCH (ARG3 INT_NOTEQUAL 1)
 CBRANCH (f() INT_NOTEQUAL 4294967295)
0 INT_NOTEQUAL f() 4294967295
 CALL libcall_alarm_thunk 0
(RSP + -168) CAST (RSP + -168)
4294967294 COPY 4294967294
f() CALL libcall_wait_thunk (RSP + -384)
(4294967294 # f()) PIECE 4294967294 f()
 CALL libcall_kill_thunk [ARG1] 9
 BRANCH VZERO
(RSP + -328) PTRSUB RSP -328
(RSP + -168) PTRADD (RSP + -328) 160 1
(RSP + -384) PTRSUB RSP -384
0 INT_EQUAL f() f(ARG1)
 CALL libcall_sigaction_thunk 14 (RSP + -168) 0
 CBRANCH (ARG4 INT_NOTEQUAL 0)
 CALL libcall_~basic_string_thunk (RSP + -360)
(RSP + -360) PTRSUB RSP -360
(RSP + -360) PTRSUB RSP -360
(RSP + -360) CAST (RSP + -360)
 CALL func (RSP + -360) 2
(RSP + -360) PTRSUB RSP -360
f() CALL libcall_strsignal_thunk (f() & 127)
0 INT_NOTEQUAL (f() & 128) 0
(f() & 127) INT_AND f() 127
(f() & 128) INT_AND f() 128
(f() * 2147483647) INT_LEFT f() 32
0 INT_NOTEQUAL f(ARG2) 0
 BRANCH VZERO
f() INT_ZEXT f()
 CBRANCH (ARG3 INT_EQUAL 0)
 CBRANCH (ARG2 INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
f() CALL libcall___errno_location_thunk
[f()] LOAD 433 f()
 CBRANCH ([f()] INT_EQUAL 4)
0 INT_EQUAL [f()] 4
(RSP + -384) CAST (RSP + -384)
f() CALL libcall_waitpid_thunk f(ARG1) (RSP + -384) f()
(RSP + -384) PTRSUB RSP -384
[(f() + 40)] LOAD 433 (f() + 40)
0 COPY 0
0 INT_NOTEQUAL f() [ARG1]
 RETURN 1
 CALL func
0 COPY 0
(f() + 40) INT_ADD f() 40
PI.Pid && "invalid pid to wait on, process not started?" COPY PI.Pid && "invalid pid to wait on, process not started?"
0 INT_NOTEQUAL f() [(f() + 40)]
 CALL libcall___assert_fail_thunk PI.Pid && "invalid pid to wait on, process not started?" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Program.inc 327 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Program.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Program.inc
(f() + 40) CAST (f() + 40)
(RSP + -328) PTRSUB RSP -328
(4294967295 # f()) PIECE 4294967295 f()
 CALL libcall_sigemptyset_thunk (RSP + -320)
(RSP + -320) CAST (RSP + -320)
 BRANCH VZERO
4294967295 COPY 4294967295
 CALL libcall_memset_thunk (RSP + -328) 0 152
0 INT_EQUAL ((f() & 65280) / 256) 126
1 COPY 1
(RSP + -328) CAST (RSP + -328)
(RSP + -328) PTRSUB RSP -328
(RSP + -328) PTRSUB RSP -328
(RSP + -320) PTRADD (RSP + -328) 8 1
 CALL libcall_sigaction_thunk 14 (RSP + -328) (RSP + -168)
(RSP + -168) CAST (RSP + -168)
Symbol PTRSUB 0 Symbol
(RSP + -168) PTRADD (RSP + -328) 160 1
 BRANCH VZERO
(RSP + -328) PTRSUB RSP -328
0 INT_EQUAL ARG2 0
f() CALL libcall_posix_spawn_file_actions_addopen_thunk ARG4 ARG2 f(/dev/null) f() 438
0 INT_EQUAL ARG1 0
f() CALL func ARG3 (RSP + -72) f() (RSP + -72)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CBRANCH (ARG1 INT_EQUAL 0)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() COPY f()
 CBRANCH (ARG2 INT_EQUAL 0)
65 COPY 65
 BRANCH VZERO
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
 CALL libcall_allocator_thunk
 CALL libcall_basic_string_thunk (RSP + -72) Cannot dup2
0 COPY 0
(RSP + -72) PTRSUB RSP -72
 CALL libcall_~basic_string_thunk (RSP + -72)
(RSP + -85) PTRSUB RSP -85
(RSP + -72) PTRSUB RSP -72
Cannot dup2 CAST Cannot dup2
 BRANCH VZERO
(RSP + -72) CAST (RSP + -72)
(RSP + -72) PTRSUB RSP -72
 CALL libcall_~allocator_thunk (RSP + -85)
Cannot dup2 COPY Cannot dup2
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_c_str_thunk
 BRANCH VZERO
f() CAST f()
/dev/null COPY /dev/null
0 COPY 0
 BRANCH VZERO
0 INT_EQUAL f() 0
f() CALL libcall_empty_thunk
0 INT_EQUAL f() 0
ARG1 INT_ZEXT ARG1
(RSP + -40) PTRSUB RSP -40
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
(ARG1 * 1048576) COPY (ARG1 * 1048576)
 CALL libcall_setrlimit_thunk 2 (RSP + -40)
 CALL libcall_setrlimit_thunk 5 (RSP + -40)
(FS_OFFSET + 40) INT_ADD 0 40
 CALL libcall_setrlimit_thunk 9 (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(ARG1 * 1048576) INT_LEFT ARG1 20
(ARG1 * 1048576) COPY (ARG1 * 1048576)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
(RSP + -40) PTRSUB RSP -40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL libcall_getrlimit_thunk 2 (RSP + -40)
 CALL libcall_getrlimit_thunk 5 (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(ARG1 * 1048576) COPY (ARG1 * 1048576)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CALL libcall_getrlimit_thunk 9 (RSP + -40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
f() CALL func ARG1 0
0 COPY 0
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 COPY 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(RSP + -40) PTRSUB RSP -40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func (RSP + -40)
0 INT_XOR f() 1
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 0
ARG1 COPY ARG1
0 INT_NOTEQUAL [f(ARG1)] 0
 RETURN 0 (~(f()) + -1)
 CBRANCH ([f(ARG1)] INT_NOTEQUAL 0)
(f(ARG1) + 1) COPY (f(ARG1) + 1)
~(f()) INT_NEGATE f()
(f() + 1) INT_SUB f() 1
(~(f()) + -1) INT_SUB ~(f()) -1
[f(ARG1)] LOAD 433 f(ARG1)
0 INT_EQUAL f() 0
-1 COPY -1
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
 CBRANCH (f() INT_EQUAL 0)
 CALL libcall_append_thunk ARG1 ARG2
ARG1 CAST ARG1
(ARG1 / 2147483647) SUBPIECE ARG1 0
ARG1 CAST ARG1
ARG2 CAST ARG2
 CALL func ARG2
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CALL libcall_append_thunk ARG1
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL libcall_reserve_thunk ARG1
 CALL libcall_basic_string_thunk
[40] LOAD 433 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL libcall_size_thunk
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
 RETURN 1
 RETURN 0 (ARG1 / 2147483647)
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
 CALL libcall_basic_string_thunk ARG1
f() CALL libcall_append_thunk ARG2
 CALL func f()
 RETURN 0 ARG1
f() CALL libcall_dup2_thunk f() ARG2
0 INT_EQUAL ARG2 0
0 INT_EQUAL ARG2 0
 CALL func (RSP + -72) ARG1 ARG1
0 INT_EQUAL ARG1 0
(ARG1 + 8) INT_ADD ARG1 8
ARG1 COPY ARG1
 CALL func ARG3 (RSP + -72) 4294967295 (RSP + -72)
 CALL func ARG3 (RSP + -72) 4294967295 (RSP + -72)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH (ARG1 INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
f() COPY f()
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_EQUAL 4294967295)
 CALL libcall_~basic_string_thunk (RSP + -72)
(RSP + -72) PTRSUB RSP -72
(RSP + -181) PTRSUB RSP -181
Cannot dup2 COPY Cannot dup2
Cannot dup2 CAST Cannot dup2
(RSP + -72) CAST (RSP + -72)
 BRANCH VZERO
(RSP + -72) CAST (RSP + -72)
 CALL libcall_~allocator_thunk (RSP + -181)
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
0 COPY 0
 CALL libcall_close_thunk f()
 CALL libcall_close_thunk f()
1 COPY 1
 CALL libcall_basic_string_thunk (RSP + -72) Cannot dup2
 CALL libcall_allocator_thunk
 CALL libcall_~basic_string_thunk (RSP + -168)
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
f() CAST f()
 BRANCH VZERO
 CALL libcall_basic_string_thunk
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(RSP + -168) PTRSUB RSP -168
0 COPY 0
f() CALL libcall_c_str_thunk
0 INT_EQUAL [(ARG1 + 8)] 0
 CBRANCH (ARG2 INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 4294967295)
f() CALL libcall_open_thunk f() f() 438
0 INT_EQUAL f() 4294967295
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 f()
65 COPY 65
 BRANCH VZERO
0 COPY 0
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -72) (RSP + -104) f(input , output) (RSP + -104)
 CALL libcall_operator+ (RSP + -136) Cannot open file '
Cannot open file ' CAST Cannot open file '
(RSP + -136) CAST (RSP + -136)
 CALL libcall_~basic_string_thunk (RSP + -72)
(RSP + -72) PTRSUB RSP -72
' for  COPY ' for 
(RSP + -136) PTRSUB RSP -136
(RSP + -104) PTRSUB RSP -104
 BRANCH VZERO
0 INT_EQUAL f() 4294967295
 CALL func (RSP + -104) (RSP + -136) ' for  (RSP + -136)
1 COPY 1
(RSP + -72) PTRSUB RSP -72
 CALL libcall_~basic_string_thunk (RSP + -136)
Cannot open file ' COPY Cannot open file '
(RSP + -136) PTRSUB RSP -136
(RSP + -136) PTRSUB RSP -136
(RSP + -104) PTRSUB RSP -104
 CALL libcall_~basic_string_thunk (RSP + -104)
(RSP + -72) CAST (RSP + -72)
 CBRANCH (ARG2 INT_EQUAL 0)
(RSP + -104) PTRSUB RSP -104
output COPY output
 BRANCH VZERO
input COPY input
(RSP + -72) PTRSUB RSP -72
 CALL libcall_~basic_string_thunk (RSP + -72)
(RSP + -72) CAST (RSP + -72)
(RSP + -72) PTRSUB RSP -72
/dev/null COPY /dev/null
(RSP + -72) PTRSUB RSP -72
(RSP + -168) PTRSUB RSP -168
 BRANCH VZERO
 CALL libcall_operator=_thunk (RSP + -168) /dev/null
(RSP + -168) PTRSUB RSP -168
 CALL libcall_operator=_thunk (RSP + -168) (RSP + -72)
(ARG6 + 16) PTRADD ARG6 2 8
(ARG6 + 16) PTRADD ARG6 2 8
(ARG6 + 16) PTRADD ARG6 2 8
0 INT_EQUAL ARG6 0
(ARG6 + (f() * 8)) PTRADD ARG6 f() 8
(ARG6 + 16) PTRADD ARG6 2 8
(ARG6 + 8) PTRADD ARG6 1 8
(ARG6 + 8) PTRADD ARG6 1 8
0 INT_EQUAL ARG6 0
(ARG6 + 8) PTRADD ARG6 1 8
(ARG6 + (f() * 8)) PTRADD ARG6 f() 8
(ARG6 + 8) PTRADD ARG6 1 8
(ARG6 + 8) PTRADD ARG6 1 8
(ARG6 + 16) PTRADD ARG6 2 8
[ARG6] LOAD 433 ARG6
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
 CALL func ARG8 (RSP + -136) 4294967295 (RSP + -136)
f() CALL func ARG8 (RSP + -248) f() (RSP + -248)
f() CALL func f() 1 ARG8 (RSP + -216)
f() CALL func ARG8 (RSP + -248) f() (RSP + -248)
f() CALL func f() 2 ARG8 f(RSP)
f() CALL func f() 0 ARG8 (RSP + -216)
 CALL func ARG8 (RSP + -136) 4294967295 (RSP + -136)
f() CALL func [(ARG6 + 16)] 2 ARG8
 CALL libcall_operator=_thunk ARG8 (RSP + -136)
f() CALL func [(ARG6 + 8)] 1 ARG8
f() CALL func [ARG6] 0 ARG8
0 INT_NOTEQUAL ARG8 0
ARG4 COPY ARG4
0 INT_EQUAL ARG5 0
 CALL libcall_execve_thunk f() f(ARG4) ARG5
0 INT_EQUAL ARG5 0
ARG5 COPY ARG5
0 INT_NOTEQUAL ARG7 0
0 INT_NOTEQUAL ARG7 0
 CALL func ARG7
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -344) (RSP + -568) (RSP + -568)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -344) PTRSUB RSP -344
f() CALL func (RSP + -344)
(RSP + -568) PTRSUB RSP -568
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(RSP + -344) PTRSUB RSP -344
 CBRANCH ([(ARG6 + 8)] INT_EQUAL 0)
 CBRANCH ([(ARG6 + 16)] INT_EQUAL 0)
0 INT_EQUAL [(ARG6 + 16)] 0
[(ARG6 + 16)] LOAD 433 (ARG6 + 16)
0 COPY 0
 CBRANCH ([(ARG6 + (f() * 8))] INT_NOTEQUAL 0)
(f() * 32) INT_MULT f() 32
(RSP + -216) PTRSUB RSP -216
 STORE 433 ((f() * 8) + (RSP + -280)) ((f() * 32) + (RSP + -136))
(RSP + -136) PTRSUB RSP -136
((f() * 32) + (RSP + -136)) PTRADD (RSP + -136) (f() * 32) 1
f() INT_SEXT f()
(RSP + -216) PTRSUB RSP -216
(f() * 32) INT_MULT f() 32
((f() * 8) + (RSP + -280)) PTRADD (RSP + -280) f() 8
(RSP + -216) CAST (RSP + -216)
(RSP + -280) PTRSUB RSP -280
 CALL libcall_operator=_thunk ((f() * 32) + (RSP + -136)) (RSP + -216)
[(ARG6 + (f() * 8))] LOAD 433 (ARG6 + (f() * 8))
 CALL func (RSP + -216) [(ARG6 + (f() * 8))] [(ARG6 + (f() * 8))]
f() INT_SEXT f()
(RSP + -216) PTRSUB RSP -216
f() INT_SEXT f()
(RSP + -136) PTRSUB RSP -136
((f() * 32) + (RSP + -136)) PTRADD (RSP + -136) (f() * 32) 1
f() INT_SEXT f()
((f() * 32) + (RSP + -136)) CAST ((f() * 32) + (RSP + -136))
 CALL libcall_~basic_string_thunk (RSP + -216)
(RSP + -216) CAST (RSP + -216)
 CBRANCH (f() INT_EQUAL 4294967295)
(RSP + -136) PTRSUB RSP -136
(RSP + -344) PTRSUB RSP -344
 CALL libcall_basic_string_thunk (RSP + -136) Couldn't fork
[(f() + 40)] LOAD 433 (f() + 40)
 CALL libcall_allocator_thunk
(RSP + -136) PTRSUB RSP -136
f() COPY f()
Couldn't fork CAST Couldn't fork
(RSP + -136) PTRSUB RSP -136
 BRANCH VZERO
 CALL libcall_~basic_string_thunk (RSP + -136)
Couldn't fork COPY Couldn't fork
(RSP + -136) CAST (RSP + -136)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(RSP + -136) CAST (RSP + -136)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 COPY 0
(RSP + -344) CAST (RSP + -344)
 CALL libcall_~allocator_thunk (RSP + -344)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
 CBRANCH f()
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_posix_spawn_file_actions_adddup2_thunk f(RSP) 1 2
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH f()
0 INT_NOTEQUAL f() 4294967295
 CBRANCH (f() INT_NOTEQUAL 4294967295)
f() CALL libcall_dup2_thunk 1 2
[(ARG6 + 16)] LOAD 433 (ARG6 + 16)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(RSP + -344) CAST (RSP + -344)
 CBRANCH (ARG5 INT_EQUAL 0)
(f() & -4294967296) CAST (f() & -4294967296)
 CBRANCH (f(RSP) INT_NOTEQUAL 0)
f() CAST f()
f() CALL libcall_c_str_thunk
0 INT_NOTEQUAL f(RSP) 0
(f() & -4294967296) INT_AND f() -4294967296
0 COPY 0
(RSP + -568) PTRSUB RSP -568
(RSP + -248) PTRSUB RSP -248
f() CAST f()
(RSP + -344) PTRSUB RSP -344
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
(RSP + -248) PTRSUB RSP -248
 CALL func (RSP + -248) (RSP + -568) (RSP + -568)
f() CALL libcall_posix_spawn_thunk (RSP + -344) f() f(RSP) 0 f(ARG4) f(ARG5)
 CALL libcall_~basic_string_thunk (RSP + -248)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH (f() INT_SLESS 3)
0 INT_SLESS f() 3
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
0 INT_NOTEQUAL [(ARG6 + (f() * 8))] 0
[(ARG6 + (f() * 8))] LOAD 433 (ARG6 + (f() * 8))
f() INT_SEXT f()
 CBRANCH (ARG6 INT_EQUAL 0)
(RSP + -568) PTRSUB RSP -568
f() COPY f()
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -136) (RSP + -568) (RSP + -568)
f() CALL libcall___errno_location_thunk
[f()] LOAD 433 f()
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (ARG5 INT_EQUAL 0)
 CBRANCH ([f()] INT_EQUAL 2)
 RETURN 1
 CBRANCH (ARG7 INT_NOTEQUAL 0)
0 INT_EQUAL [f()] 2
 CALL libcall__exit_thunk f()
 BRANCH VZERO
0 COPY 0
(RSP + -248) PTRSUB RSP -248
(RSP + -248) PTRSUB RSP -248
0 INT_XOR f() 1
(RSP + -344) CAST (RSP + -344)
(RSP + -248) CAST (RSP + -248)
Can't redirect stderr to stdout CAST Can't redirect stderr to stdout
 CALL libcall_basic_string_thunk (RSP + -248) Can't redirect stderr to stdout
Can't redirect stderr to stdout COPY Can't redirect stderr to stdout
(RSP + -248) PTRSUB RSP -248
 BRANCH VZERO
 CALL libcall_~allocator_thunk (RSP + -344)
(RSP + -344) PTRSUB RSP -344
 CALL libcall_allocator_thunk
 CALL libcall_~basic_string_thunk (RSP + -248)
 BRANCH VZERO
[(ARG6 + 8)] LOAD 433 (ARG6 + 8)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
0 COPY 0
(RSP + -136) PTRSUB RSP -136
0 COPY 0
(RSP + -392) PTRSUB RSP -392
 CALL libcall_~allocator_thunk (RSP + -392)
(RSP + -136) PTRSUB RSP -136
(RSP + -136) CAST (RSP + -136)
 CALL libcall_basic_string_thunk (RSP + -136) Can't redirect stderr to stdout
 CALL libcall_~basic_string_thunk (RSP + -136)
(RSP + -136) PTRSUB RSP -136
Can't redirect stderr to stdout CAST Can't redirect stderr to stdout
(RSP + -136) CAST (RSP + -136)
 CALL libcall_allocator_thunk
(RSP + -392) CAST (RSP + -392)
Can't redirect stderr to stdout COPY Can't redirect stderr to stdout
 BRANCH VZERO
 CBRANCH (ARG7 INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() -1
0 INT_EQUAL f() 4294967295
f() CALL libcall_fork_thunk
0 COPY 0
(RSP + -136) PTRSUB RSP -136
(RSP + -136) CAST (RSP + -136)
(RSP + -40) PTRSUB RSP -40
2 COPY 2
0 INT_NOTEQUAL f(RSP) (RSP + -136)
 CBRANCH (f(RSP) INT_NOTEQUAL (RSP + -136))
 CBRANCH (ARG6 INT_EQUAL 0)
 CBRANCH (f() INT_NOTEQUAL -1)
 BRANCH VZERO
0 COPY 0
 CBRANCH (ARG8 INT_NOTEQUAL 0)
 CBRANCH ~(f())
[(ARG6 + 16)] CAST [(ARG6 + 16)]
[([(ARG6 + 16)] + 8)] COPY [([(ARG6 + 16)] + 8)]
[[(ARG6 + 16)]] COPY [[(ARG6 + 16)]]
 CBRANCH ([([(ARG6 + 8)] + 8)] INT_EQUAL [([(ARG6 + 16)] + 8)])
0 INT_EQUAL [([(ARG6 + 8)] + 8)] [([(ARG6 + 16)] + 8)]
[[(ARG6 + 8)]] LOAD 433 [(ARG6 + 8)]
([(ARG6 + 8)] + 8) PTRADD [(ARG6 + 8)] 1 8
[([(ARG6 + 16)] + 8)] LOAD 433 ([(ARG6 + 16)] + 8)
[([(ARG6 + 8)] + 8)] LOAD 433 ([(ARG6 + 8)] + 8)
[(ARG6 + 16)] LOAD 433 (ARG6 + 16)
[(ARG6 + 8)] CAST [(ARG6 + 8)]
[[(ARG6 + 16)]] LOAD 433 [(ARG6 + 16)]
~(f()) BOOL_NEGATE f()
([(ARG6 + 16)] + 8) PTRADD [(ARG6 + 16)] 1 8
[(ARG6 + 8)] LOAD 433 (ARG6 + 8)
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 BRANCH VZERO
0 COPY 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 RETURN 1
f() COPY f()
f() COPY f()
(f(RSP) + -32) PTRADD f(RSP) -32 1
 BRANCH VZERO
 CALL libcall_~basic_string_thunk (f(RSP) + -32)
 CBRANCH ([(ARG6 + 8)] INT_EQUAL 0)
0 INT_EQUAL [(ARG6 + 16)] 0
[(ARG6 + 16)] LOAD 433 (ARG6 + 16)
1 COPY 1
 BRANCH VZERO
 CBRANCH ([(ARG6 + 16)] INT_EQUAL 0)
0 COPY 0
 CALL libcall_posix_spawn_file_actions_init_thunk (RSP + -216)
0 INT_EQUAL f() 0
0 COPY 0
(RSP + -216) PTRSUB RSP -216
0 COPY 0
 CBRANCH f()
0 COPY 0
 CALL libcall_basic_string_thunk
(f() + -1) INT_ADD f() -1
 BRANCH VZERO
 BRANCH VZERO
1 COPY 1
 CALL libcall_posix_spawn_file_actions_destroy_thunk f(RSP)
[[(ARG6 + 8)]] COPY [[(ARG6 + 8)]]
[([(ARG6 + 16)] + 8)] COPY [([(ARG6 + 16)] + 8)]
0 INT_XOR f() 1
[[(ARG6 + 16)]] COPY [[(ARG6 + 16)]]
([(ARG6 + 8)] + 8) PTRADD [(ARG6 + 8)] 1 8
[([(ARG6 + 16)] + 8)] LOAD 433 ([(ARG6 + 16)] + 8)
[(ARG6 + 16)] LOAD 433 (ARG6 + 16)
[[(ARG6 + 16)]] LOAD 433 [(ARG6 + 16)]
 CBRANCH ([([(ARG6 + 8)] + 8)] INT_EQUAL [([(ARG6 + 16)] + 8)])
0 INT_EQUAL [([(ARG6 + 8)] + 8)] [([(ARG6 + 16)] + 8)]
 CBRANCH 0
0 CAST 0
[[(ARG6 + 8)]] LOAD 433 [(ARG6 + 8)]
[(ARG6 + 8)] CAST [(ARG6 + 8)]
[([(ARG6 + 8)] + 8)] LOAD 433 ([(ARG6 + 8)] + 8)
([(ARG6 + 16)] + 8) PTRADD [(ARG6 + 16)] 1 8
[(ARG6 + 8)] LOAD 433 (ARG6 + 8)
[([(ARG6 + 16)] + 8)] COPY [([(ARG6 + 16)] + 8)]
[[(ARG6 + 16)]] COPY [[(ARG6 + 16)]]
[(ARG6 + 16)] CAST [(ARG6 + 16)]
[([(ARG6 + 8)] + 8)] COPY [([(ARG6 + 8)] + 8)]
f() CAST f()
 BRANCH VZERO
f() CALL libcall_c_str_thunk
 CALL libcall_execv_thunk f() f(ARG4)
f() CAST f()
f() CALL libcall_c_str_thunk
127 COPY 127
126 COPY 126
 BRANCH VZERO
 BRANCH VZERO
1 COPY 1
 STORE 433 ARG1 f()
(RSP + -360) PTRSUB RSP -360
(f() / 2147483647) SUBPIECE f() 0
 CALL libcall_allocator_thunk
 CALL libcall_~basic_string_thunk (RSP + -248)
(RSP + -248) PTRSUB RSP -248
(RSP + -248) PTRSUB RSP -248
(RSP + -248) PTRSUB RSP -248
 BRANCH VZERO
1 COPY 1
0 COPY 0
0 INT_XOR f() 1
 CALL libcall_~allocator_thunk (RSP + -360)
(RSP + -360) CAST (RSP + -360)
(RSP + -248) CAST (RSP + -248)
0 CAST 0
 STORE 433 f(ARG1) (f() / 2147483647)
 CALL libcall_basic_string_thunk (RSP + -248) 0
(RSP + -280) PTRSUB RSP -280
(RSP + -312) PTRSUB RSP -312
(RSP + -344) PTRSUB RSP -344
 CALL libcall_~basic_string_thunk (RSP + -280)
 CALL libcall_~basic_string_thunk (RSP + -248)
 CALL libcall_allocator_thunk
(RSP + -248) PTRSUB RSP -248
(RSP + -280) CAST (RSP + -280)
Executable " COPY Executable "
 CALL func (RSP + -136) (RSP + -248) (RSP + -216) (RSP + -248)
(RSP + -136) CAST (RSP + -136)
(RSP + -216) PTRSUB RSP -216
" doesn't exist! COPY " doesn't exist!
(RSP + -312) PTRSUB RSP -312
(RSP + -248) PTRSUB RSP -248
(RSP + -216) PTRSUB RSP -216
(RSP + -136) PTRSUB RSP -136
 CALL libcall_~basic_string_thunk (RSP + -136)
 CALL func (RSP + -280) (RSP + -568) (RSP + -568)
(RSP + -360) CAST (RSP + -360)
(RSP + -216) PTRSUB RSP -216
 CALL libcall_~allocator_thunk (RSP + -344)
 CALL libcall_~allocator_thunk (RSP + -360)
(RSP + -136) PTRSUB RSP -136
 CALL libcall_basic_string_thunk (RSP + -312) Executable "
 CALL libcall_allocator_thunk
(RSP + -280) PTRSUB RSP -280
Executable " CAST Executable "
(RSP + -344) CAST (RSP + -344)
(RSP + -312) PTRSUB RSP -312
(RSP + -312) CAST (RSP + -312)
 CALL libcall_~basic_string_thunk (RSP + -312)
(RSP + -216) CAST (RSP + -216)
" doesn't exist! CAST " doesn't exist!
(RSP + -280) PTRSUB RSP -280
 CALL libcall_~basic_string_thunk (RSP + -216)
 CALL func (RSP + -248) (RSP + -312) (RSP + -280) (RSP + -312)
(RSP + -360) PTRSUB RSP -360
(RSP + -136) PTRSUB RSP -136
(RSP + -216) CAST (RSP + -216)
(RSP + -568) PTRSUB RSP -568
(RSP + -248) PTRSUB RSP -248
 CALL libcall_basic_string_thunk (RSP + -216) " doesn't exist!
0 INT_EQUAL [(ARG6 + 8)] 0
0 COPY 0
 BRANCH VZERO
[(ARG6 + 8)] LOAD 433 (ARG6 + 8)
[(ARG6 + 8)] LOAD 433 (ARG6 + 8)
 BRANCH VZERO
0 COPY 0
0 INT_EQUAL [(ARG6 + 8)] 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
f() COPY f()
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk [[(ARG6 + 8)]] [[(ARG6 + 16)]] [([(ARG6 + 16)] + 8)]
0 COPY 0
 BRANCH VZERO
 CBRANCH ([([(ARG6 + 16)] + 8)] INT_EQUAL 0)
0 INT_EQUAL [([(ARG6 + 16)] + 8)] 0
[[(ARG6 + 16)]] COPY [[(ARG6 + 16)]]
[([(ARG6 + 16)] + 8)] COPY [([(ARG6 + 16)] + 8)]
[[(ARG6 + 8)]] COPY [[(ARG6 + 8)]]
[([(ARG6 + 16)] + 8)] CAST [([(ARG6 + 16)] + 8)]
[([(ARG6 + 16)] + 8)] CAST [([(ARG6 + 16)] + 8)]
[[(ARG6 + 16)]] COPY [[(ARG6 + 16)]]
[([(ARG6 + 16)] + 8)] COPY [([(ARG6 + 16)] + 8)]
[[(ARG6 + 8)]] COPY [[(ARG6 + 8)]]
 CBRANCH ([([(ARG6 + 16)] + 8)] INT_EQUAL 0)
0 INT_EQUAL [([(ARG6 + 16)] + 8)] 0
 BRANCH VZERO
0 COPY 0
0 COPY 0
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk [[(ARG6 + 8)]] [[(ARG6 + 16)]] [([(ARG6 + 16)] + 8)]
f() CALL func (RSP + -32) ARG1 ARG2 ARG3 ARG4 ARG5 ARG7 ARG8
f() CALL func (RSP + -32) ARG6 0 ARG8
0 INT_EQUAL ARG6 0
0 INT_NOTEQUAL ARG9 0
 STORE 433 ARG9 1
0 INT_NOTEQUAL ARG9 0
 STORE 433 ARG9 0
 CALL func
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(RSP + -32) PTRSUB RSP -32
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CBRANCH (ARG9 INT_NOTEQUAL 0)
 CBRANCH (ARG9 INT_NOTEQUAL 0)
 BRANCH VZERO
f() CAST f()
(RSP + -32) PTRSUB RSP -32
4294967295 COPY 4294967295
(f() / 2147483647) INT_RIGHT f() 32
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
(ARG2 + 8) INT_ADD ARG2 8
(ARG2 + 16) INT_ADD ARG2 16
(ARG1 + 4294967294) INT_ADD ARG1 4294967294
(ARG1 + 4294967295) INT_ADD ARG1 4294967295
 CBRANCH f()
f() COPY f()
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(ARG2 + 8) CAST (ARG2 + 8)
0 INT_SLESS 0 (ARG1 + 4294967295)
 CBRANCH (f(ARG1) INT_EQUAL 0)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) CAST (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_SLESS (ARG1 + 4294967295))
0 INT_EQUAL f(ARG1) 0
[(f() + 40)] LOAD 433 (f() + 40)
(ARG2 + 16) CAST (ARG2 + 16)
A_Stack[-0xc8]:8 COPY A_Stack[-0xc8]:8
0 COPY 0
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
A_Stack[-0xc8]:8 COPY A_Stack[-0xc8]:8
 CALL func (RSP + -216) [(ARG2 + 8)] [(ARG2 + 8)]
A_Stack[-0xd8]:8 COPY A_Stack[-0xd8]:8
--crash COPY --crash
(RSP + -216) PTRSUB RSP -216
 CALL func (RSP + -200) --crash
 CBRANCH f()
(RSP + -200) PTRSUB RSP -200
 CBRANCH (A_Stack[-0xd0]:8 INT_EQUAL A_Stack[-0xc0]:8)
A_Stack[-0xc0]:8 COPY A_Stack[-0xc0]:8
0 INT_EQUAL A_Stack[-0xd0]:8 A_Stack[-0xc0]:8
A_Stack[-0xc0]:8 COPY A_Stack[-0xc0]:8
A_Stack[-0xd0]:8 COPY A_Stack[-0xd0]:8
1 COPY 1
 BRANCH VZERO
0 INT_NOTEQUAL f() 0
0 COPY 0
 CBRANCH (A_Stack[-0xc0]:8 INT_EQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_EQUAL A_Stack[-0xc0]:8 0
f() CALL libcall_memcmp_thunk A_Stack[-0xd8]:8 A_Stack[-0xc8]:8 A_Stack[-0xc0]:8
0 COPY 0
 BRANCH VZERO
f() COPY f()
 CALL libcall___stack_chk_fail_thunk
f() COPY f()
 RETURN 0 f()
 RETURN 1
 CBRANCH f()
 BRANCH VZERO
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH f()
0 INT_EQUAL f() 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_SLESS 0)
f() CALL func f() Error: 
 CALL func f() 4664797
f() CALL func
(RSP + -104) PTRSUB RSP -104
f() CALL func f() (RSP + -104) f()
4664797 PTRSUB 0 4664797
Error:  COPY Error: 
 CBRANCH (f() INT_EQUAL 1)
0 INT_SLESS f() 0
Error: Unable to find ` COPY Error: Unable to find `
(RSP + -72) PTRSUB RSP -72
4664797 PTRSUB 0 4664797
 BRANCH VZERO
1 COPY 1
f() CALL func
0 COPY 0
f() CALL func f() ' in PATH: 
 CALL libcall_~basic_string_thunk (RSP + -104)
(RSP + -72) PTRSUB RSP -72
((f() / 2147483647) # f()) PIECE (f() / 2147483647) f()
(RSP + -104) PTRSUB RSP -104
[f(ARG2)] LOAD 433 f(ARG2)
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -72)
 CALL func (RSP + -72)
f() CALL libcall_length_thunk
 CALL func (RSP + -104) (RSP + -168) (RSP + -168)
 CALL libcall_~basic_string_thunk (RSP + -104)
(RSP + -168) PTRSUB RSP -168
4212096 COPY 4212096
 CALL func f() 4664797
f() CALL func f() [f(ARG2)]
(RSP + -104) PTRSUB RSP -104
' in PATH:  COPY ' in PATH: 
 CALL libcall_basic_string_thunk
f() CALL func f() f() f(ARG2) 0 0 0 0 (RSP + -104) 0 4212096
f() CALL func f() Error: Unable to find `
(RSP + -104) PTRSUB RSP -104
f() CALL func f() (RSP + -104) f()
(RSP + -104) PTRSUB RSP -104
f() CALL libcall_data_thunk
 CALL func (RSP + -168) f() f()
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
f() CALL func (RSP + -72)
0 INT_EQUAL f() 1
(f() / 2147483647) SUBPIECE f() 4
[f(ARG2)] LOAD 433 f(ARG2)
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -184) [f(ARG2)] [f(ARG2)]
 CALL func (RSP + -72) f() f() f() f()
(RSP + -184) PTRSUB RSP -184
(RSP + -72) PTRSUB RSP -72
1 COPY 1
 CALL func (RSP + -72)
 BRANCH VZERO
1 COPY 1
 RETURN 0
 RETURN 0
VZERO COPY VZERO
 CALL func 1 65535
 RETURN 0
VZERO COPY VZERO
 RETURN 0
 CALLIND [((f() * 8) + 6949024)] ARG1 ARG2 ARG3
[((f() * 8) + 6949024)] LOAD 433 ((f() * 8) + 6949024)
 RETURN 0
0 INT_NOTEQUAL (f() + 1) 14
 CBRANCH ((f() + 1) INT_NOTEQUAL 14)
0 COPY 0
 CALL libcall__DT_INIT
(f() + 1) INT_ADD f() 1
6949024 PTRSUB 0 6949024
((f() * 8) + 6949024) PTRADD 6949024 f() 8
[((f() * 8) + 6949024)] CAST [((f() * 8) + 6949024)]
 CALL libcall___libc_start_main_thunk 4211350 A_Stack[0x0]:8 (RSP + 8) 4664032 4664144 ARG3 (RSP + -8)
4664032 PTRSUB 0 4664032
4211350 PTRSUB 0 4211350
(RSP + -8) PTRSUB RSP -8
(RSP + 8) PTRSUB RSP 8
 BRANCH VZERO
4664144 PTRSUB 0 4664144
 RETURN 0
0 INT_EQUAL VZERO 0
f() COPY f()
 RETURN 0
 CBRANCH (VZERO INT_EQUAL 0)
1 COPY 1
 CALL func
0 INT_EQUAL ARG2 0
(ARG1 + f()) INT_ADD f() ARG1
(ARG1 + 48) INT_ADD ARG1 48
0 INT_LESS ARG1 10
 RETURN 0 f(ARG1)
 CBRANCH (ARG1 INT_LESS 10)
f(ARG1) COPY f(ARG1)
 CBRANCH (ARG2 INT_EQUAL 0)
((ARG1 + f()) + 4294967286) INT_ADD (ARG1 + f()) 4294967286
f() INT_ZEXT f()
 BRANCH VZERO
97 COPY 97
 BRANCH VZERO
65 COPY 65
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
 RETURN 0
 RETURN 0 8192
8192 COPY 8192
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 24) INT_ADD ARG1 24
f(ARG1) CALL func ARG1 ARG2 ARG2
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 16) INT_ADD ARG1 16
 STORE 433 [(ARG1 + 24)] ARG2
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ([(ARG1 + 24)] INT_LESS [(ARG1 + 16)])
(ARG1 + 24) CAST (ARG1 + 24)
 RETURN 0 f(ARG1)
0 INT_LESS [(ARG1 + 24)] [(ARG1 + 16)]
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 24) CAST (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
 STORE 433 (ARG1 + 24) ([(ARG1 + 24)] + 1)
([(ARG1 + 24)] + 1) PTRADD [(ARG1 + 24)] 1 1
 BRANCH VZERO
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
ARG1 COPY ARG1
ARG2 COPY ARG2
(ARG3 / 2147483647) SUBPIECE ARG3 0
ARG3 COPY ARG3
ARG4 COPY ARG4
 CBRANCH (f() INT_EQUAL f(ARG3))
0 COPY 0
 RETURN 0 f(ARG1)
0 INT_EQUAL f() f(ARG3)
f(ARG1) COPY f(ARG1)
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
 CALL func f(ARG1) f() f()
 CBRANCH (f(ARG4) INT_EQUAL 0)
0 INT_EQUAL f(ARG4) 0
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() CALL func (RSP + -56) f() f()
 CBRANCH (f() INT_EQUAL 10)
(RSP + -56) PTRSUB RSP -56
0 INT_EQUAL f() 10
 CBRANCH (f() INT_LESS 11)
 CBRANCH (f() INT_EQUAL 9)
0 INT_EQUAL f() 9
 CBRANCH (f() INT_EQUAL 34)
0 INT_EQUAL f() 34
f() CALL libcall_isprint_thunk f()
f() INT_ZEXT f()
0 INT_EQUAL f() 0
 BRANCH VZERO
 CALL func f(ARG1) 116
f(ARG1) CALL func f(ARG1) 92
 BRANCH VZERO
 CALL func f(ARG1) 110
f(ARG1) CALL func f(ARG1) 92
0 INT_LESS f() 11
f(ARG1) CALL func f(ARG1) 92
(f() & 15) INT_AND f() 15
((7 & (f() / 17179869176)) + 48) INT_ADD (7 & (f() / 17179869176)) 48
 BRANCH VZERO
(f() / 64) INT_RIGHT f() 6
(f() / 16) INT_RIGHT f() 4
 CALL func f(ARG1) f() f()
(7 & (f() / 17179869176)) INT_AND (f() / 17179869176) 7
 CALL func f(ARG1) f() f()
((f() & 7) + 48) INT_ADD (f() & 7) 48
(f() & 7) INT_AND f() 7
f() INT_SEXT f()
 CALL func f(ARG1) ((f() / 64) + 48) ((f() / 64) + 48)
f() INT_SEXT f()
f() INT_ZEXT f()
((f() / 64) + 48) INT_ADD (f() / 64) 48
f() CALL func (f() & 15) 0
f() CALL func (f() / 16) 0
(f() / 8) INT_SRIGHT f() 3
 CALL func f(ARG1) 92
 CALL func f(ARG1) 120
 CALL func f(ARG1) ((7 & (f() / 17179869176)) + 48) ((7 & (f() / 17179869176)) + 48)
 CALL func f(ARG1) ((f() & 7) + 48) ((f() & 7) + 48)
(f() / 17179869176) SUBPIECE (f() / 8) 0
f() CAST f()
 CBRANCH (f() INT_NOTEQUAL 92)
 BRANCH VZERO
 CALL func f(ARG1) 92
f(ARG1) CALL func f(ARG1) 92
 BRANCH VZERO
 CALL func f(ARG1) 34
f(ARG1) CALL func f(ARG1) 92
0 INT_NOTEQUAL f() 92
f(ARG1) CALL func ARG1 48
 CALL func ARG1 ARG2 ARG2
 CALL func f(ARG1) 120
 RETURN 0
VZERO CALLIND [([ARG1] + 8)] ARG1 ARG2 ARG3 ARG1
0 INT_LESSEQUAL ARG3 VZERO
0 INT_NOTEQUAL ARG3 0
(ARG3 * 2) INT_MULT ARG3 2
[ARG1] LOAD 433 ARG1
 CBRANCH (ARG3 INT_NOTEQUAL 0)
([ARG1] + 8) CAST ([ARG1] + 8)
[([ARG1] + 8)] LOAD 433 ([ARG1] + 8)
 CBRANCH (VZERO INT_SLESS 0)
VZERO CAST VZERO
0 INT_SLESS VZERO 0
 RETURN 0 f(ARG3)
0 COPY 0
BufferSize && "Invalid buffer size!" COPY BufferSize && "Invalid buffer size!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Format.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Format.h
 RETURN 1
([ARG1] + 8) INT_ADD [ARG1] 8
 CALL libcall___assert_fail_thunk BufferSize && "Invalid buffer size!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Format.h 54 0
 CBRANCH (ARG3 INT_LESSEQUAL VZERO)
 BRANCH VZERO
1 INT_ADD VZERO 1
 BRANCH VZERO
(ARG1 + 16) INT_ADD ARG1 16
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 0 [(ARG1 + 16)]
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
(f() - [ARG1]) COPY (f() - [ARG1])
(f() - [ARG1]) INT_SUB f() [ARG1]
 RETURN 0 (f() - [ARG1])
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 ([ARG1] + ARG2) ([ARG1] + ARG2)
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 ARG2 ARG2
f() CALL func ARG1
 CALL func ARG1 ([ARG1] + ARG2) ([ARG1] + ARG2)
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
(ARG2 + [ARG1]) INT_ADD ARG2 [ARG1]
0 INT_LESS ([(ARG1 + 8)] - [ARG1]) ARG2
(ARG2 + [ARG1]) INT_ADD ARG2 [ARG1]
0 INT_LESS ARG2 ([(ARG1 + 8)] - [ARG1])
([ARG1] + ARG2) INT_ADD [ARG1] ARG2
0 INT_LESS f() ARG2
([ARG1] + ARG2) INT_ADD [ARG1] ARG2
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (ARG2 INT_LESS ([(ARG1 + 8)] - [ARG1]))
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
([(ARG1 + 8)] - [ARG1]) CAST ([(ARG1 + 8)] - [ARG1])
 RETURN 0
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
 STORE 433 f(ARG1) 0
 CBRANCH (([(ARG1 + 8)] - [ARG1]) INT_LESS ARG2)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (f(ARG1) INT_NOTEQUAL (ARG2 + [ARG1]))
 CBRANCH (f() INT_LESS ARG2)
0 INT_NOTEQUAL f(ARG1) (ARG2 + [ARG1])
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
 BRANCH VZERO
([(ARG1 + 8)] - [ARG1]) CAST ([(ARG1 + 8)] - [ARG1])
 CALL func (ARG2 + [ARG1]) [(ARG1 + 8)] (ARG2 + [ARG1]) [ARG1]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f(ARG1) CAST f(ARG1)
f(ARG1) CALL func 1 f(ARG1)
0 INT_NOTEQUAL f(ARG1) 0
 BRANCH VZERO
(f(ARG1) + 1) INT_ADD f(ARG1) 1
(ARG1 + 24) INT_ADD ARG1 24
f(ARG1) CALL func ARG1 f() f(ARG1) f()
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 24) INT_ADD ARG1 24
f(ARG1) CALL func ARG2 [(ARG1 + 24)] (4294967295 & ([(ARG1 + 16)] - [(ARG1 + 24)])) [(ARG1 + 24)]
f(ARG1) CALL func ARG2 f() f(ARG1) f()
(ARG1 + 24) CAST (ARG1 + 24)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_LESS 3 ([(ARG1 + 16)] - [(ARG1 + 24)])
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(ARG1 + 16) CAST (ARG1 + 16)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
([(ARG1 + 16)] - [(ARG1 + 24)]) INT_SUB [(ARG1 + 16)] [(ARG1 + 24)]
 CBRANCH (3 INT_LESS ([(ARG1 + 16)] - [(ARG1 + 24)]))
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
127 COPY 127
 CBRANCH (0 INT_EQUAL [(f() + 40)])
 RETURN 1
 RETURN 0 f(ARG1)
 CALL libcall___stack_chk_fail_thunk
(RSP + -184) PTRSUB RSP -184
0 INT_LESSEQUAL f(ARG1) f(ARG1)
f(ARG1) COPY f(ARG1)
f(ARG1) INT_ZEXT f(ARG1)
 CBRANCH (f(ARG1) INT_LESSEQUAL ([(ARG1 + 16)] - [(ARG1 + 24)]))
0 INT_LESSEQUAL f(ARG1) ([(ARG1 + 16)] - [(ARG1 + 24)])
f() CALL func (RSP + -184)
 CALL func (RSP + -184) f(ARG1) f(ARG1)
(RSP + -184) PTRSUB RSP -184
(ARG1 + 24) CAST (ARG1 + 24)
 CALL func (RSP + -184)
 CBRANCH (f(ARG1) INT_LESSEQUAL f(ARG1))
(4294967295 & ([(ARG1 + 16)] - [(ARG1 + 24)])) INT_AND ([(ARG1 + 16)] - [(ARG1 + 24)]) 4294967295
f(ARG1) INT_ZEXT f(ARG1)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(RSP + -184) PTRSUB RSP -184
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
 BRANCH VZERO
 CALL func (RSP + -184)
(RSP + -184) PTRSUB RSP -184
f(ARG1) COPY f(ARG1)
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_LESSEQUAL f(ARG1) f(ARG1)
 CBRANCH (f(ARG1) INT_LESSEQUAL f(ARG1))
f(ARG1) COPY f(ARG1)
0 COPY 0
BytesUsed > NextBufferSize && "Didn't grow buffer!?" COPY BytesUsed > NextBufferSize && "Didn't grow buffer!?"
0 COPY 0
 BRANCH VZERO
f() CALL func (RSP + -184)
(RSP + -184) PTRSUB RSP -184
 STORE 433 (ARG1 + 24) ([(ARG1 + 24)] + f(ARG1))
(ARG1 + 24) CAST (ARG1 + 24)
([(ARG1 + 24)] + f(ARG1)) INT_ADD [(ARG1 + 24)] f(ARG1)
0 INT_EQUAL 0 [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
 RETURN 1
 CALL libcall___assert_fail_thunk BytesUsed > NextBufferSize && "Didn't grow buffer!?" 0 398 0
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 STORE 433 ARG1 Symbol
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 (ARG1 + 8) ARG2
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func ARG1 ARG2 ARG2
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 Symbol
 CALL func (ARG1 + 16) ARG3 (ARG1 + 16)
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG2 COPY ARG2
ARG1 COPY ARG1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -40) 4666684 (RSP + -56)
(RSP + -40) PTRSUB RSP -40
 CALL func ARG2 (RSP + -40) (RSP + -40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
4666684 PTRSUB 0 4666684
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -56) PTRSUB RSP -56
[40] LOAD 433 40
(RSP + -40) PTRSUB RSP -40
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0
[ARG1] LOAD 433 ARG1
[ARG2] LOAD 433 ARG2
ARG2 COPY ARG2
 CBRANCH ([ARG2] INT_LESS [ARG1])
0 INT_LESS [ARG2] [ARG1]
 RETURN 0 f(ARG1 , ARG2)
 BRANCH VZERO
 RETURN 0 81
81 COPY 81
ARG1 COPY ARG1
ARG2 INT_ZEXT ARG2
ARG2 COPY ARG2
0 INT_EQUAL 0 [(f() + 40)]
0 INT_LESS ARG2 f()
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
f() CALL func 
 CBRANCH (ARG2 INT_LESS f())
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) INT_ADD f() 40
 COPY 
f(ARG1) CALL func ARG1  ARG2
f(ARG1) COPY f(ARG1)
 CBRANCH (f(ARG2 , RSP) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG2 , RSP) 0
f(ARG1) COPY f(ARG1)
 COPY 
 BRANCH VZERO
 RETURN 0 f(ARG1)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
f() CALL func 
 COPY 
 BRANCH VZERO
(f(ARG2 , RSP) - [f(RSP)]) INT_SUB f(ARG2 , RSP) [f(RSP)]
[f(RSP)] LOAD 433 f(RSP)
 COPY 
f(RSP) CAST f(RSP)
f(RSP) CALL func (RSP + -52) (RSP + -40) (RSP + -40)
(RSP + -52) PTRSUB RSP -52
(RSP + -40) PTRSUB RSP -40
 CALL func f(ARG1)  [f(RSP)]
(f() + 4294967295) INT_ADD f() 4294967295
 CALL func ARG1 ([(ARG2 + 16)] - ([(ARG2 + 8)] / 2147483647)) ([(ARG2 + 16)] - ([(ARG2 + 8)] / 2147483647))
 CALL func ARG1 [ARG2] [(ARG2 + 8)] [ARG2]
ARG1 COPY ARG1
 CALL func ARG1 ([(ARG2 + 16)] - ([(ARG2 + 8)] / 2147483647)) ([(ARG2 + 16)] - ([(ARG2 + 8)] / 2147483647))
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 16) PTRADD ARG2 2 8
[ARG2] LOAD 433 ARG2
ARG2 CAST ARG2
ARG2 CAST ARG2
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
[(ARG2 + 20)] LOAD 433 (ARG2 + 20)
[(ARG2 + 20)] LOAD 433 (ARG2 + 20)
([(ARG2 + 16)] - ([(ARG2 + 8)] / 2147483647)) INT_SUB [(ARG2 + 16)] ([(ARG2 + 8)] / 2147483647)
 RETURN 0 ARG1
(ARG2 + 20) CAST (ARG2 + 20)
(ARG2 + 20) CAST (ARG2 + 20)
 CBRANCH ([(ARG2 + 20)] INT_NOTEQUAL 1)
0 INT_NOTEQUAL [(ARG2 + 20)] 1
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
([(ARG2 + 8)] / 2147483647) SUBPIECE [(ARG2 + 8)] 0
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CBRANCH ([(ARG2 + 20)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(ARG2 + 20)] 0
(ARG2 + 16) CAST (ARG2 + 16)
(ARG2 + 20) INT_ADD ARG2 20
(ARG2 + 20) INT_ADD ARG2 20
0 INT_SLESS 0 ([(ARG2 + 16)] - ([(ARG2 + 8)] / 2147483647))
 CBRANCH (0 INT_SLESS ([(ARG2 + 16)] - ([(ARG2 + 8)] / 2147483647)))
 CBRANCH (0 INT_SLESS ([(ARG2 + 16)] - ([(ARG2 + 8)] / 2147483647)))
0 INT_SLESS 0 ([(ARG2 + 16)] - ([(ARG2 + 8)] / 2147483647))
[ARG1] LOAD 433 ARG1
ARG2 COPY ARG2
[ARG2] LOAD 433 ARG2
 RETURN 0 f(ARG1 , ARG2)
 CBRANCH ([ARG1] INT_LESS [ARG2])
0 INT_LESS [ARG1] [ARG2]
 BRANCH VZERO
(ARG1 >> f()) INT_RIGHT ARG1 f()
0 INT_NOTEQUAL ARG1 0
0 INT_NOTEQUAL ARG1 0
0 INT_EQUAL ARG2 0
 RETURN 0 f()
 CBRANCH (ARG2 INT_EQUAL 0)
 CBRANCH (ARG1 INT_NOTEQUAL 0)
 CBRANCH (ARG1 INT_NOTEQUAL 0)
63 COPY 63
(f() + -1) INT_ADD f() -1
 BRANCH VZERO
0 INT_EQUAL (ARG1 >> f()) 0
64 COPY 64
0 CAST 0
0 INT_SEXT 0
 BRANCH 4294967291
0 INT_XOR (f() / 2147483647) 63
 CBRANCH ((ARG1 >> f()) INT_EQUAL 0)
(f() / 2147483647) SUBPIECE f() 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ([(ARG2 + 16)] + 4294967295) ([(ARG2 + 16)] + 4294967295)
 CALL func ARG1 48
 CALL func ARG1 (RSP + -56) [f(RSP)] (RSP + -56)
 CALL func ARG1 45
 CALL func ARG1 f(ARG2 , RSP) f(ARG2 , RSP)
 CALL func ARG1 f(RSP) f(RSP) f(RSP)
(ARG2 + 16) PTRADD ARG2 2 8
[ARG2] LOAD 433 ARG2
(ARG2 + 16) PTRADD ARG2 2 8
(ARG2 + 8) PTRADD ARG2 1 8
ARG2 CAST ARG2
(ARG2 + 16) PTRADD ARG2 2 8
[ARG2] LOAD 433 ARG2
ARG2 CAST ARG2
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 8) PTRADD ARG2 1 8
ARG2 CAST ARG2
ARG2 CAST ARG2
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(ARG2 + 20)] LOAD 433 (ARG2 + 20)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
 CBRANCH ([(ARG2 + 20)] INT_EQUAL 0)
0 INT_EQUAL [(ARG2 + 20)] 0
0 INT_EQUAL 0 [(f() + 40)]
(ARG2 + 20) INT_ADD ARG2 20
(ARG2 + 20) CAST (ARG2 + 20)
(f() + 40) CAST (f() + 40)
 CBRANCH ([(ARG2 + 8)] INT_EQUAL 0)
((RSP + -24) / 2147483647) SUBPIECE (RSP + -24) 0
 BRANCH VZERO
 CBRANCH ([(ARG2 + 8)] INT_SLESS 0)
0 INT_SLESS [(ARG2 + 8)] 0
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
[(ARG2 + 8)] CAST [(ARG2 + 8)]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
f(RSP) INT_SEXT f(RSP)
(RSP + -25) PTRSUB RSP -25
(RSP + -24) PTRADD (RSP + -25) 1 1
(RSP + -24) COPY (RSP + -24)
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
[(ARG2 + 8)] CAST [(ARG2 + 8)]
 CBRANCH ([(ARG2 + 8)] INT_SLESS 0)
0 INT_SLESS [(ARG2 + 8)] 0
(((RSP + -24) / 2147483647) - (f(RSP) / 2147483647)) INT_SUB ((RSP + -24) / 2147483647) (f(RSP) / 2147483647)
[(ARG2 + 8)] CAST [(ARG2 + 8)]
0 INT_SLESS 0 f(ARG2 , RSP)
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
(ARG2 + 16) CAST (ARG2 + 16)
0 INT_NOTEQUAL f(ARG2) 0
 CBRANCH (0 INT_SLESS f(ARG2 , RSP))
 CBRANCH ([(ARG2 + 8)] INT_SLESS 0)
([(ARG2 + 16)] - (((RSP + -24) / 2147483647) - (f(RSP) / 2147483647))) INT_SUB [(ARG2 + 16)] (((RSP + -24) / 2147483647) - (f(RSP) / 2147483647))
(ARG2 + 16) CAST (ARG2 + 16)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
([(ARG2 + 16)] + 4294967295) INT_ADD [(ARG2 + 16)] 4294967295
0 INT_SLESS [(ARG2 + 8)] 0
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
(([(ARG2 + 16)] - (((RSP + -24) / 2147483647) - (f(RSP) / 2147483647))) + 4294967295) INT_ADD ([(ARG2 + 16)] - (((RSP + -24) / 2147483647) - (f(RSP) / 2147483647))) 4294967295
 STORE 433 (f(RSP) + -1) (((f(ARG2) % 10) / 2147483647) + 48)
((f(ARG2) % 10) / 2147483647) SUBPIECE (f(ARG2) % 10) 0
(((f(ARG2) % 10) / 2147483647) + 48) INT_ADD ((f(ARG2) % 10) / 2147483647) 48
(f(ARG2) % 10) INT_REM f(ARG2) 10
 BRANCH VZERO
(f(RSP) + -1) COPY (f(RSP) + -1)
(f(ARG2) / 10) INT_DIV f(ARG2) 10
(f(RSP) + -1) PTRADD f(RSP) -1 1
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
(15 & (f(ARG2) / 2147483647)) INT_AND (f(ARG2) / 2147483647) 15
(15 & (f(ARG2) / 2147483647)) INT_ZEXT (15 & (f(ARG2) / 2147483647))
(f(RSP) + -1) PTRADD f(RSP) -1 1
 STORE 433 (f(RSP) + -1) f(ARG2)
0 INT_LESS (15 & (f(ARG2) / 2147483647)) 10
0 INT_NOTEQUAL f(ARG2) 0
 BRANCH VZERO
(f(ARG2) / 2147483647) SUBPIECE f(ARG2) 0
 CBRANCH ((15 & (f(ARG2) / 2147483647)) INT_LESS 10)
(f(ARG2) / 16) INT_RIGHT f(ARG2) 4
((15 & (f(ARG2) / 2147483647)) / 2147483647) SUBPIECE (15 & (f(ARG2) / 2147483647)) 0
f(RSP) CAST f(RSP)
[(ARG2 + 22)] LOAD 433 (ARG2 + 22)
((67 - f()) / 8589934588) SUBPIECE ((67 - f()) / 4) 0
(ARG2 + 22) CAST (ARG2 + 22)
([f(RSP)] + (RSP + -56)) COPY ([f(RSP)] + (RSP + -56))
[(ARG2 + 22)] LOAD 433 (ARG2 + 22)
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
f() CALL func [ARG2] 2
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (ARG2 + 16) (RSP + -136) (ARG2 + 16)
0 INT_EQUAL [(ARG2 + 8)] 0
 CBRANCH ([(ARG2 + 21)] INT_EQUAL 0)
0 INT_EQUAL [(ARG2 + 21)] 0
[f(RSP)] INT_ZEXT [f(RSP)]
(ARG2 + 21) CAST (ARG2 + 21)
(ARG2 + 21) INT_ADD ARG2 21
((67 - f()) / 4) INT_RIGHT (67 - f()) 2
12336 COPY 12336
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(RSP + -136) PTRSUB RSP -136
3472328296227680304 COPY 3472328296227680304
 CBRANCH ([(ARG2 + 22)] INT_NOTEQUAL 1)
0 INT_NOTEQUAL [(ARG2 + 22)] 1
[(ARG2 + 21)] LOAD 433 (ARG2 + 21)
 CBRANCH ([(ARG2 + 22)] INT_EQUAL 0)
0 INT_EQUAL [(ARG2 + 22)] 0
(ARG2 + 22) INT_ADD ARG2 22
([f(RSP)] + (RSP + -56)) CAST ([f(RSP)] + (RSP + -56))
(RSP + -56) CAST (RSP + -56)
(67 - f()) INT_SUB 67 f()
(((67 - f()) / 8589934588) + f()) INT_ADD f() ((67 - f()) / 8589934588)
(ARG2 + 22) CAST (ARG2 + 22)
3472328296227698736 COPY 3472328296227698736
(RSP + -56) PTRSUB RSP -56
(ARG2 + 22) INT_ADD ARG2 22
([f(RSP)] + (RSP + -56)) INT_ADD (RSP + -56) [f(RSP)]
97 COPY 97
65 COPY 65
 BRANCH VZERO
3472328296227680304 COPY 3472328296227680304
 BRANCH VZERO
0 COPY 0
2 COPY 2
(~([(ARG2 + 8)]) + 1) INT_2COMP [(ARG2 + 8)]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 BRANCH VZERO
(((15 & (f(ARG2) / 2147483647)) / 2147483647) + 48) INT_ADD ((15 & (f(ARG2) / 2147483647)) / 2147483647) 48
 BRANCH VZERO
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
((((15 & (f(ARG2) / 2147483647)) / 2147483647) + f()) + 246) INT_ADD (((15 & (f(ARG2) / 2147483647)) / 2147483647) + f()) 246
(((15 & (f(ARG2) / 2147483647)) / 2147483647) + f()) INT_ADD f() ((15 & (f(ARG2) / 2147483647)) / 2147483647)
 RETURN 0
(RSP + -56) PTRSUB RSP -56
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
40 INT_ADD 0 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -56)
 RETURN 1
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) INT_AND (A_Stack[-0x30]:8 # A_Stack[-0x38]:8) -1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
(ARG3 & 8) INT_AND ARG3 8
(ARG3 & 1) INT_AND ARG3 1
(ARG3 & 1) INT_AND ARG3 1
(ARG3 & 2) INT_AND ARG3 2
(ARG3 & 2) INT_AND ARG3 2
ARG4 INT_ZEXT ARG4
f() CALL func ARG1
 STORE 433 ARG2 f()
f() LOAD 433 ARG2
 CBRANCH ((ARG3 & 1) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (ARG3 & 1) 0
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (4294967295 INT_SLESS f())
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -216)
 CBRANCH ([f()] INT_EQUAL 4)
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL [f()] 4
(RSP + -216) PTRSUB RSP -216
(f() / 2147483647) SUBPIECE f() 8
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH ((ARG3 & 8) INT_EQUAL 0)
66 COPY 66
65 COPY 65
 BRANCH VZERO
 CBRANCH ((ARG3 & 1) INT_NOTEQUAL 0)
(f() | 128) INT_OR f() 128
0 INT_NOTEQUAL (ARG3 & 1) 0
0 INT_SLESS 4294967295 f()
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -232)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -200) PTRSUB RSP -200
0 INT_EQUAL (ARG3 & 2) 0
 CBRANCH ((ARG3 & 2) INT_EQUAL 0)
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL (ARG3 & 8) 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -200)
f() CALL libcall_open_thunk f() f() ARG4
(f() / 2147483647) SUBPIECE f() 0
f() CAST f()
 CALL func (RSP + -200)
(RSP + -200) PTRSUB RSP -200
(f() + 40) CAST (f() + 40)
 CBRANCH ((ARG3 & 2) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (ARG3 & 2) 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -232) PTRSUB RSP -232
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -216) PTRSUB RSP -216
(f() / 2147483647) SUBPIECE f() 0
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
f() CALL libcall_generic_category_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -216) [f()] f() [f()]
(f() / 2147483647) SUBPIECE f() 0
(f() # f()) PIECE f() f()
(f() / 2147483647) SUBPIECE f() 8
(f() # f()) INT_AND (f() # f()) -1
 RETURN 0 (f() # f())
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL libcall___assert_fail_thunk 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc 523 0
0 COPY 0
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc
(f() | 1024) INT_OR f() 1024
 BRANCH VZERO
(f() | 512) INT_OR f() 512
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 CAST ARG3
 STORE 433 ARG3 f()
(ARG3 + 8) PTRADD ARG3 1 8
f() CALL func ARG3
(ARG3 + 8) PTRADD ARG3 1 8
(ARG4 & 4) INT_AND ARG4 4
f() CALL func (RSP + -56) (RSP + -132) ARG4
A_Stack[-0x38]:8 COPY A_Stack[-0x38]:8
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() [(f() + 40)]
A_Stack[-0x38]:8 COPY A_Stack[-0x38]:8
4666925 PTRSUB 0 4666925
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH f()
 CALL func (RSP + -56) 4666925
(RSP + -56) PTRSUB RSP -56
ARG2 COPY ARG2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
A_Stack[-0x30]:8 COPY A_Stack[-0x30]:8
 CBRANCH (ARG2 INT_EQUAL A_Stack[-0x30]:8)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
0 INT_EQUAL ARG2 A_Stack[-0x30]:8
ARG1 COPY ARG1
A_Stack[-0x30]:8 COPY A_Stack[-0x30]:8
 CBRANCH ((ARG4 & 4) INT_EQUAL 0)
 CALL func
ARG1 COPY ARG1
A_Stack[-0x30]:8 COPY A_Stack[-0x30]:8
 CBRANCH (A_Stack[-0x30]:8 INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
A_Stack[-0x38]:8 COPY A_Stack[-0x38]:8
0 INT_EQUAL f() 0
0 COPY 0
0 INT_EQUAL A_Stack[-0x30]:8 0
 BRANCH VZERO
f() CALL libcall_memcmp_thunk ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8
A_Stack[-0x30]:8 CAST A_Stack[-0x30]:8
0 COPY 0
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
4294967295 COPY 4294967295
(RSP + -56) PTRSUB RSP -56
(RSP + -152) PTRSUB RSP -152
(RSP + -132) PTRSUB RSP -132
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL f() 0
 CALL func (RSP + -56) (RSP + -152) (RSP + -152)
1 COPY 1
0 INT_EQUAL (ARG4 & 4) 0
 STORE 433 (ARG3 + 8) 0
 BRANCH VZERO
 STORE 433 ARG3 f()
 STORE 433 (ARG3 + 8) f()
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
 CALL func ARG1 f() 1 0
f() CALL func ARG2 ARG3 ARG4 ARG5
 RETURN 0
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
(ARG1 + 36) INT_ADD ARG1 36
(ARG1 + 36) INT_ADD ARG1 36
 CALL func ARG1
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 48) INT_ADD ARG1 48
ARG2 COPY ARG2
ARG3 COPY ARG3
([(ARG1 + 48)] + ARG3) INT_ADD [(ARG1 + 48)] ARG3
[(ARG1 + 36)] LOAD 433 (ARG1 + 36)
(ARG1 + 36) CAST (ARG1 + 36)
 CBRANCH ([(ARG1 + 36)] INT_SLESS 0)
0 INT_SLESS [(ARG1 + 36)] 0
 CBRANCH ([f()] INT_NOTEQUAL 4)
 CBRANCH (f(ARG3) INT_EQUAL 0)
 CBRANCH ([f()] INT_NOTEQUAL 11)
0 INT_NOTEQUAL [f()] 11
0 INT_EQUAL f(ARG3) 0
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
[(ARG1 + 36)] LOAD 433 (ARG1 + 36)
 RETURN 0
0 INT_SLESS f() 0
 RETURN 0
(ARG1 + 36) CAST (ARG1 + 36)
f() CALL libcall_write_thunk [(ARG1 + 36)] f(ARG2) f(ARG3)
 CBRANCH (f() INT_SLESS 0)
f() CALL libcall___errno_location_thunk
 CBRANCH ([f()] INT_NOTEQUAL 11)
0 INT_NOTEQUAL [f()] 11
[f()] LOAD 433 f()
 RETURN 1
0 COPY 0
FD >= 0 && "File already closed." COPY FD >= 0 && "File already closed."
0 COPY 0
(ARG1 + 48) CAST (ARG1 + 48)
 CALL libcall___assert_fail_thunk FD >= 0 && "File already closed." 0 571 0
(ARG1 + 48) CAST (ARG1 + 48)
 STORE 433 (ARG1 + 48) ([(ARG1 + 48)] + ARG3)
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
(f(ARG2) + f()) INT_ADD f(ARG2) f()
(f(ARG2) + f()) CAST (f(ARG2) + f())
f(ARG2) CAST f(ARG2)
0 INT_NOTEQUAL [f()] 4
(f(ARG3) - f()) INT_SUB f(ARG3) f()
 BRANCH VZERO
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
 CALL func ARG1
(ARG1 + 36) INT_ADD ARG1 36
(ARG1 + 36) INT_ADD ARG1 36
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
 CALL func ARG1
(ARG1 + 40) CAST (ARG1 + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(ARG1 + 40)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 40)] 0
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
 CBRANCH (f() INT_NOTEQUAL 0)
 CALL libcall___assert_fail_thunk ShouldClose 0 620 0
(ARG1 + 40) CAST (ARG1 + 40)
f() CALL func [(ARG1 + 36)]
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_NOTEQUAL f() 0
0 COPY 0
ShouldClose COPY ShouldClose
0 COPY 0
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
0 COPY 0
[(ARG1 + 36)] LOAD 433 (ARG1 + 36)
(RSP + -40) PTRSUB RSP -40
f() CALL func (RSP + -40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
(ARG1 + 36) CAST (ARG1 + 36)
 STORE 433 (ARG1 + 36) 4294967295
 STORE 433 (ARG1 + 40) 0
(ARG1 + 36) CAST (ARG1 + 36)
 RETURN 1
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 36) INT_ADD ARG1 36
 CALL func ARG1
f() CALL libcall_lseek_thunk [(ARG1 + 36)] ARG2 0
 STORE 433 (ARG1 + 48) f()
0 INT_EQUAL [(ARG1 + 48)] -1
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
[(ARG1 + 48)] COPY [(ARG1 + 48)]
[(ARG1 + 36)] LOAD 433 (ARG1 + 36)
 RETURN 0 [(ARG1 + 48)]
(ARG1 + 48) CAST (ARG1 + 48)
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
(ARG1 + 36) CAST (ARG1 + 36)
(ARG1 + 48) CAST (ARG1 + 48)
(ARG1 + 48) CAST (ARG1 + 48)
 CALL func
 CBRANCH ([(ARG1 + 48)] INT_EQUAL -1)
f() CALL func ARG1
VZERO CALLIND [([ARG1] + 72)] ARG1 ARG2 ARG1
[ARG1] LOAD 433 ARG1
([ARG1] + 72) INT_ADD [ARG1] 72
 RETURN 0 f()
([ARG1] + 72) CAST ([ARG1] + 72)
[([ARG1] + 72)] LOAD 433 ([ARG1] + 72)
f() INT_ADD f() VZERO
 CALL func ARG1 ARG4 ARG4
f() CALL func ARG1
 CALL func ARG1 ARG2 ARG3 ARG2
 CALL func ARG1 f() f()
 RETURN 0
 CALL libcall___fxstat_thunk 1 ARG1 ARG2
 RETURN 0
(ARG1 + 36) INT_ADD ARG1 36
(ARG1 + 36) INT_ADD ARG1 36
(ARG1 + 36) INT_ADD ARG1 36
 CBRANCH ([(ARG1 + 36)] INT_SLESS 0)
(ARG1 + 36) CAST (ARG1 + 36)
0 INT_SLESS [(ARG1 + 36)] 0
[(ARG1 + 36)] LOAD 433 (ARG1 + 36)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 CBRANCH ((A_Stack[-0x90]:4 & 61440) INT_EQUAL 8192)
0 INT_EQUAL (A_Stack[-0x90]:4 & 61440) 8192
(A_Stack[-0x90]:4 & 61440) INT_AND A_Stack[-0x90]:4 61440
 BRANCH VZERO
 CBRANCH f()
0 INT_EQUAL f() 0
(RSP + -168) PTRSUB RSP -168
(ARG1 + 36) CAST (ARG1 + 36)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
[(ARG1 + 36)] LOAD 433 (ARG1 + 36)
0 INT_EQUAL 0 [(f() + 40)]
f() CALL func [(ARG1 + 36)] (RSP + -168) (RSP + -168)
0 COPY 0
FD >= 0 && "File not yet open!" COPY FD >= 0 && "File not yet open!"
0 COPY 0
(f() + 40) CAST (f() + 40)
 RETURN 1
[(f() + 40)] LOAD 433 (f() + 40)
 CALL libcall___assert_fail_thunk FD >= 0 && "File not yet open!" 0 647 0
0 COPY 0
(ARG1 + 36) CAST (ARG1 + 36)
f() CALL libcall_isatty_thunk [(ARG1 + 36)]
[(ARG1 + 36)] LOAD 433 (ARG1 + 36)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
1 COPY 1
 BRANCH VZERO
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 f()
 BRANCH VZERO
0 COPY 0
 RETURN 0 0
0 COPY 0
 RETURN 0 Symbol
Symbol PTRSUB 0 Symbol
0 INT_NOTEQUAL ARG2 0
0 INT_NOTEQUAL ARG3 0
ARG1 INT_SEXT ARG1
0 INT_MULT 0 80
0 INT_SEXT 0
 RETURN 0 (((ARG1 & 7) * 10) + 4673248)
0 CAST 0
((ARG1 & 7) * 10) INT_ADD ((ARG1 & 7) * 10) 0
0 CAST 0
0 INT_SEXT 0
0 INT_ZEXT 0
((ARG1 & 7) * 10) INT_MULT (ARG1 & 7) 10
(ARG1 & 7) INT_SEXT (ARG1 & 7)
4673248 PTRSUB 0 4673248
0 INT_MULT 0 160
(ARG1 & 7) INT_AND ARG1 7
(ARG1 & 7) CAST (ARG1 & 7)
((ARG1 & 7) * 10) INT_ADD ((ARG1 & 7) * 10) 0
0 INT_ZEXT 0
(((ARG1 & 7) * 10) + 4673248) PTRADD 4673248 ((ARG1 & 7) * 10) 1
0 INT_EQUAL ARG2 8
(ARG2 / 2147483647) SUBPIECE ARG2 0
f() CALL func (ARG2 / 2147483647) ARG3 ARG4 ARG3
ARG1 COPY ARG1
 CALL func ARG1
 CALL func ARG1 f() f() f()
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 48) INT_ADD ARG1 48
f() CALL func ARG4
 RETURN 0 ARG1
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
0 INT_NOTEQUAL f() 0
 CBRANCH (ARG2 INT_EQUAL 8)
([(ARG1 + 48)] - f()) INT_SUB [(ARG1 + 48)] f()
f() CALL libcall_strlen_thunk f()
 STORE 433 (ARG1 + 48) ([(ARG1 + 48)] - f())
(ARG1 + 48) CAST (ARG1 + 48)
(ARG1 + 48) CAST (ARG1 + 48)
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
f() CAST f()
(ARG2 / 2147483647) INT_SEXT (ARG2 / 2147483647)
f() CAST f()
 BRANCH VZERO
Symbol PTRSUB 0 Symbol
 RETURN 0 Symbol
 CALL func ARG1 f() f() f()
 CALL func ARG1
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 48) INT_ADD ARG1 48
ARG1 COPY ARG1
 CBRANCH (f() INT_NOTEQUAL 0)
f() CAST f()
0 INT_NOTEQUAL f() 0
f() CALL func
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 RETURN 0 ARG1
f() CALL func
 STORE 433 (ARG1 + 48) ([(ARG1 + 48)] - f())
(ARG1 + 48) CAST (ARG1 + 48)
(ARG1 + 48) CAST (ARG1 + 48)
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
([(ARG1 + 48)] - f()) INT_SUB [(ARG1 + 48)] f()
f() CALL libcall_strlen_thunk f()
Symbol PTRSUB 0 Symbol
 RETURN 0 Symbol
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 48) INT_ADD ARG1 48
ARG1 COPY ARG1
 CALL func ARG1 f() f() f()
 CALL func ARG1
f() CALL func
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 RETURN 0 ARG1
f() CALL func
 CBRANCH (f() INT_NOTEQUAL 0)
f() CAST f()
0 INT_NOTEQUAL f() 0
(ARG1 + 48) CAST (ARG1 + 48)
(ARG1 + 48) CAST (ARG1 + 48)
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
([(ARG1 + 48)] - f()) INT_SUB [(ARG1 + 48)] f()
f() CALL libcall_strlen_thunk f()
 STORE 433 (ARG1 + 48) ([(ARG1 + 48)] - f())
f() CALL libcall_isatty_thunk ARG1
(-256 & (0 # f())) INT_AND (0 # f()) -256
0 INT_NOTEQUAL f() 0
 RETURN 0 (-256 & (0 # f()))
(0 # f()) PIECE 0 f()
(-256 & (0 # f())) INT_OR (-256 & (0 # f())) 0
0 INT_ZEXT 0
(ARG1 + 36) INT_ADD ARG1 36
 CALL func [(ARG1 + 36)]
 RETURN 0
[(ARG1 + 36)] LOAD 433 (ARG1 + 36)
(ARG1 + 36) CAST (ARG1 + 36)
f() CALL libcall_setupterm_thunk 0 ARG1 (RSP + -52)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -48) PTRSUB RSP -48
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func 6960704
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(RSP + -48) PTRSUB RSP -48
0 COPY 0
 CALL func (RSP + -48)
f() COPY f()
 CALL func (RSP + -48) f() f()
6960704 PTRSUB 0 6960704
(RSP + -52) PTRSUB RSP -52
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
0 INT_EQUAL f() 0
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (f() INT_SLESS 1)
1 COPY 1
0 COPY 0
 BRANCH VZERO
0 INT_SLESS f() 1
f() CALL libcall_set_curterm_thunk 0
 BRANCH VZERO
 CALL libcall_del_curterm_thunk f()
f() CALL libcall_tigetnum_thunk colors
0 COPY 0
colors COPY colors
f() CALL func ARG1
f() CALL func ARG1
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 RETURN 0 1
0 COPY 0
 RETURN 0 0
(ARG1 + 36) INT_ADD ARG1 36
(ARG1 + 36) CAST (ARG1 + 36)
 CALL func [(ARG1 + 36)]
[(ARG1 + 36)] LOAD 433 (ARG1 + 36)
 RETURN 0
 CALL func (RSP + -56)
 CBRANCH (VZERO INT_EQUAL 0)
f() CALL func (RSP + -56)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
0 INT_EQUAL VZERO 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
6960488 PTRSUB 0 6960488
f() CALL libcall___cxa_guard_acquire_thunk 6960488
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(f() + 40) CAST (f() + 40)
f() COPY f()
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
[(f() + 40)] LOAD 433 (f() + 40)
 RETURN 1
Symbol PTRSUB 0 Symbol
(f() + 40) INT_ADD f() 40
0 COPY 0
0 INT_NOTEQUAL 0 [(f() + 40)]
4667040 COPY 4667040
 CALL libcall___assert_fail_thunk 4667040 0 726 0
0 COPY 0
6960488 PTRSUB 0 6960488
 CALL libcall___cxa_atexit_thunk 4219012 6960512 6960440
6960512 PTRSUB 0 6960512
4666925 PTRSUB 0 4666925
 CALL libcall___cxa_guard_release_thunk 6960488
6960440 PTRSUB 0 6960440
 CALL func 6960512 A_Stack[-0x28]:8 A_Stack[-0x20]:8 (RSP + -56) 0
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40) 4666925
(RSP + -40) PTRSUB RSP -40
4219012 PTRSUB 0 4219012
6960512 PTRSUB 0 6960512
f() COPY f()
 RETURN 1
 RETURN 0 Symbol
 CALL libcall___stack_chk_fail_thunk
f() COPY f()
 CALL func ARG1
 CALL func ARG1
 STORE 433 ARG1 Symbol
Symbol CAST Symbol
 RETURN 0
Symbol PTRSUB 0 Symbol
 CALL func ARG1 0
 STORE 433 ARG1 Symbol
Symbol CAST Symbol
 RETURN 0
Symbol PTRSUB 0 Symbol
 RETURN 0 Symbol
Symbol PTRSUB 0 Symbol
 CBRANCH (VZERO INT_EQUAL 0)
0 INT_EQUAL VZERO 0
f() COPY f()
6960504 PTRSUB 0 6960504
f() CALL libcall___cxa_guard_acquire_thunk 6960504
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
6960504 PTRSUB 0 6960504
6960640 PTRSUB 0 6960640
6960440 PTRSUB 0 6960440
4221422 PTRSUB 0 4221422
 CALL libcall___cxa_atexit_thunk 4221422 6960640 6960440
6960640 PTRSUB 0 6960640
 CALL func 6960640
 CALL libcall___cxa_guard_release_thunk 6960504
 CALL func ARG1
 STORE 433 ARG1 Symbol
 CALL func ARG1
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
(ARG1 + 40) INT_ADD ARG1 40
 CALL libcall_append_thunk [(ARG1 + 40)] ARG2
 RETURN 0
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
(ARG1 + 40) INT_ADD ARG1 40
([([(ARG1 + 40)] + 8)] - [[(ARG1 + 40)]]) INT_SUB [([(ARG1 + 40)] + 8)] [[(ARG1 + 40)]]
 RETURN 0 ([([(ARG1 + 40)] + 8)] - [[(ARG1 + 40)]])
[([(ARG1 + 40)] + 8)] LOAD 433 ([(ARG1 + 40)] + 8)
[[(ARG1 + 40)]] LOAD 433 [(ARG1 + 40)]
([(ARG1 + 40)] + 8) PTRADD [(ARG1 + 40)] 1 8
([([(ARG1 + 40)] + 8)] - [[(ARG1 + 40)]]) COPY ([([(ARG1 + 40)] + 8)] - [[(ARG1 + 40)]])
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
(ARG1 + 40) INT_ADD ARG1 40
(ARG2 + ARG3) INT_ADD ARG2 ARG3
 CALL func [(ARG1 + 40)] ARG2 (ARG2 + ARG3) ARG2
(ARG1 + 40) CAST (ARG1 + 40)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
 RETURN 0
 CALL libcall_memcpy_thunk (ARG4 + f()) ARG2 ARG3
(ARG4 + f()) INT_ADD f() ARG4
(ARG1 + 40) INT_ADD ARG1 40
(ARG4 + f()) CAST (ARG4 + f())
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
 RETURN 0
f() CALL func [(ARG1 + 40)]
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
 RETURN 0
 RETURN 0 0
0 COPY 0
 RETURN 0
 RETURN 0
VZERO COPY VZERO
 CALL func 1 65535
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
 RETURN 0 0
0 COPY 0
 CALLIND [([ARG1] + 40)] ARG1 ARG2 ARG1
[ARG1] LOAD 433 ARG1
([ARG1] + 40) INT_ADD [ARG1] 40
 RETURN 0
[([ARG1] + 40)] LOAD 433 ([ARG1] + 40)
([ARG1] + 40) CAST ([ARG1] + 40)
(ARG1 + 48) INT_ADD ARG1 48
 RETURN 0 [(ARG1 + 48)]
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
[(ARG1 + 48)] COPY [(ARG1 + 48)]
(ARG1 + 48) CAST (ARG1 + 48)
 CALL libcall_size_thunk
 RETURN 0
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CALL libcall_snprintf_thunk [f()] ARG2 ARG3 [(ARG1 + 8)]
ARG3 INT_ZEXT ARG3
[f()] LOAD 433 f()
f() CALL func (ARG1 + 16)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
ARG3 CAST ARG3
f() CAST f()
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG5
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
[40] LOAD 433 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
ARG2 COPY ARG2
ARG1 COPY ARG1
(ARG1 + 8) PTRADD ARG1 1 8
ARG3 COPY ARG3
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
(RSP + -48) PTRSUB RSP -48
f(ARG1 , RSP) CALL func (RSP + -48) (ARG1 + 8) (ARG1 + 8)
f(ARG1 , RSP) CAST f(ARG1 , RSP)
 CBRANCH (f(ARG1 , RSP) INT_EQUAL 0)
0 INT_EQUAL f(ARG1 , RSP) 0
 CBRANCH ([((f(ARG1 , RSP) + -1) + [ARG1])] INT_NOTEQUAL ARG2)
 RETURN 0 -1
-1 COPY -1
(f(ARG1 , RSP) + -1) COPY (f(ARG1 , RSP) + -1)
 RETURN 0 (f(ARG1 , RSP) + -1)
(f(ARG1 , RSP) + -1) INT_ADD f(ARG1 , RSP) -1
[((f(ARG1 , RSP) + -1) + [ARG1])] LOAD 433 ((f(ARG1 , RSP) + -1) + [ARG1])
[ARG1] LOAD 433 ARG1
0 INT_NOTEQUAL [((f(ARG1 , RSP) + -1) + [ARG1])] ARG2
((f(ARG1 , RSP) + -1) + [ARG1]) INT_ADD (f(ARG1 , RSP) + -1) [ARG1]
((f(ARG1 , RSP) + -1) + [ARG1]) CAST ((f(ARG1 , RSP) + -1) + [ARG1])
ARG2 INT_SEXT ARG2
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
ARG1 COPY ARG1
ARG2 COPY ARG2
0 INT_EQUAL ARG2 2
 CBRANCH f()
 CBRANCH (ARG2 INT_EQUAL 2)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL f())
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (f(ARG2) INT_EQUAL 0)
f() INT_SEXT f()
f() CALL func f()
f() CALL func (RSP + -56) (f(ARG2) + -1) (f(ARG2) + -1)
0 INT_EQUAL f() 0
(f(ARG2) + -1) INT_ADD f(ARG2) -1
(RSP + -56) PTRSUB RSP -56
 CBRANCH f()
(f() + 1) INT_ADD f() 1
0 COPY 0
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
f() CALL func (RSP + -56) 1
0 INT_NOTEQUAL f() f()
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -56) 0
(RSP + -56) PTRSUB RSP -56
 CBRANCH f()
0 INT_EQUAL f() -1
0 COPY 0
 RETURN 0 0
(f(ARG2) + -1) COPY (f(ARG2) + -1)
(f(ARG2) + -1) INT_ADD f(ARG2) -1
 RETURN 0 (f(ARG2) + -1)
f() CALL func (RSP + -56) 47 (f(ARG2) + -1)
(f(ARG2) + -1) INT_ADD f(ARG2) -1
 RETURN 0 f()
 CBRANCH (f() INT_EQUAL -1)
(RSP + -56) PTRSUB RSP -56
0 INT_EQUAL f(ARG2) 0
 CBRANCH (f() INT_EQUAL 1)
f() CALL func (RSP + -56) 0
0 INT_NOTEQUAL f() 0
(RSP + -56) PTRSUB RSP -56
f() CALL func f()
f() INT_SEXT f()
0 INT_EQUAL f() 1
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -56) 0
0 INT_EQUAL f() 0
f() CALL func f()
f() INT_SEXT f()
0 INT_EQUAL ARG2 2
ARG2 COPY ARG2
ARG1 COPY ARG1
 CBRANCH f()
 CBRANCH (ARG2 INT_EQUAL 2)
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
0 COPY 0
f() CALL func f()
f() INT_SEXT f()
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func (RSP + -40) 0
0 INT_NOTEQUAL f() 0
(RSP + -40) PTRSUB RSP -40
 CBRANCH (f(ARG2) INT_LESS 4)
0 COPY 0
f() CALL func f()
f() INT_SEXT f()
 CBRANCH (f() INT_EQUAL 0)
f() CALL func (RSP + -40) 0
0 INT_EQUAL f() 0
(RSP + -40) PTRSUB RSP -40
 CBRANCH (f() INT_NOTEQUAL f())
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 1)
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
f() CALL func (RSP + -40) 0
f() CALL func (RSP + -40) 1
0 INT_NOTEQUAL f() f()
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CBRANCH f()
0 INT_LESS f(ARG2) 4
-1 COPY -1
 RETURN 0 f()
 RETURN 0 -1
f(RSP) COPY f(RSP)
 RETURN 0 f(RSP)
(RSP + -40) PTRSUB RSP -40
0 INT_NOTEQUAL f(ARG2) 0
f(RSP) CALL func (RSP + -40) 47 2
 CBRANCH f()
 CBRANCH (f() INT_NOTEQUAL f())
f() INT_SEXT f()
f() CALL func f()
f() CALL func (RSP + -40) 2
(RSP + -40) PTRSUB RSP -40
0 INT_EQUAL f() 1
 BRANCH VZERO
1 COPY 1
f() CALL func (RSP + -40) 0
f() CALL func (RSP + -40) 1
0 INT_NOTEQUAL f() f()
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
-1 COPY -1
 BRANCH VZERO
0 COPY 0
f() CALL func (RSP + -40) 0
(RSP + -40) PTRSUB RSP -40
0 INT_EQUAL f() 0
f() CALL func f()
f() INT_SEXT f()
ARG1 COPY ARG1
f() CALL func ARG1 ARG2 ARG1
ARG2 COPY ARG2
(RSP + -96) PTRSUB RSP -96
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() COPY f()
f(RSP) CAST f(RSP)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -104) (RSP + -96) (RSP + -96)
0 COPY 0
f(RSP) CAST f(RSP)
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -112) (RSP + -128) (RSP + -128)
(RSP + -112) PTRSUB RSP -112
 CBRANCH (ARG2 INT_NOTEQUAL 0)
(RSP + -128) PTRSUB RSP -128
0 INT_NOTEQUAL ARG2 0
(f(ARG1) + [f(RSP)]) INT_ADD [f(RSP)] f(ARG1)
[f(RSP)] COPY [f(RSP)]
(f(ARG1) + [f(RSP)]) COPY (f(ARG1) + [f(RSP)])
(f(ARG2) - [f(RSP)]) INT_SUB f(ARG2) [f(RSP)]
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ((f(ARG1) + [f(RSP)]) INT_EQUAL 0)
0 INT_EQUAL (f(ARG1) + [f(RSP)]) 0
(RSP + -104) PTRSUB RSP -104
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
0 INT_EQUAL f() 1
0 COPY 0
~(f()) BOOL_NEGATE f()
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 CBRANCH (f() INT_EQUAL [(f() + 40)])
 CBRANCH ~(f())
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() [(f() + 40)]
f(RSP) CALL func (f(ARG1) + [f(RSP)]) [f(RSP)] [f(RSP)] (f(ARG1) + [f(RSP)])
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
 RETURN 1
0 INT_EQUAL f() 0
[(f() + 40)] LOAD 433 (f() + 40)
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
f() COPY f()
 CBRANCH (f() INT_EQUAL 1)
(f() + -1) INT_ADD f() -1
 CBRANCH ((f() + -1) INT_EQUAL f(RSP))
0 COPY 0
0 INT_EQUAL (f() + -1) f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
-1 COPY -1
-1 COPY -1
 BRANCH VZERO
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CBRANCH (f(RSP) INT_EQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
(f() + -1) INT_ADD f() -1
f() INT_SEXT f()
f() CALL func f()
f() CALL func (RSP + -136) (f() + -1) (f() + -1)
0 INT_EQUAL f() 0
(RSP + -136) PTRSUB RSP -136
f() INT_SEXT f()
f() CALL func f()
f() CALL func (RSP + -136) f() f()
0 INT_NOTEQUAL f() 0
(RSP + -136) PTRSUB RSP -136
 BRANCH VZERO
(f() + -1) INT_ADD f() -1
0 INT_EQUAL f(RSP) 0
0 INT_NOTEQUAL [f(RSP)] 0
TEMPDIR COPY TEMPDIR
(RSP + -24) PTRSUB RSP -24
(FS_OFFSET + 40) INT_ADD 0 40
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f(RSP) INT_NOTEQUAL (RSP + -24))
0 INT_NOTEQUAL f(RSP) (RSP + -24)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
Symbol PTRSUB 0 Symbol
TMPDIR COPY TMPDIR
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(RSP + -56) PTRSUB RSP -56
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() [(f() + 40)]
Symbol PTRSUB 0 Symbol
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 CBRANCH (f() INT_NOTEQUAL 0)
(f(RSP) + 8) PTRADD f(RSP) 1 8
 BRANCH VZERO
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_getenv_thunk [f(RSP)]
0 INT_NOTEQUAL f() 0
0 COPY 0
 RETURN 0 Symbol
Symbol PTRSUB 0 Symbol
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func [ARG1] [(ARG1 + 8)] [(ARG1 + 8)]
 RETURN 0
 STORE 433 (ARG1 + 8) [ARG1]
 RETURN 0 0
0 COPY 0
f() CALL func ARG1
f() CALL func ARG1 ARG2 ARG2
0 INT_NOTEQUAL ARG1 0
 CALL func ARG2 f() (f() + f()) f()
 CALL func ARG2
 CALL func ARG2 f() (f() + f()) f()
 CBRANCH (ARG1 INT_NOTEQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_strlen_thunk f()
(f() + f()) PTRADD f() f() 1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 RETURN 0
 RETURN 0
 BRANCH VZERO
f() CALL libcall_strlen_thunk f()
f() CAST f()
(f() + f()) PTRADD f() f() 1
f() CALL func
f() CAST f()
0 INT_NOTEQUAL f() 0
(ARG2 | ARG1) INT_OR ARG2 ARG1
 RETURN 0 (ARG2 | ARG1)
(ARG2 | ARG1) COPY (ARG2 | ARG1)
(ARG2 | ARG1) INT_OR ARG1 ARG2
(ARG2 | ARG1) COPY (ARG2 | ARG1)
 RETURN 0 (ARG2 | ARG1)
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL libcall_memmove_thunk ARG3 ARG1 (ARG2 - ARG1)
ARG1 CAST ARG1
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG3 CAST ARG3
 CBRANCH ((ARG2 - ARG1) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (ARG2 - ARG1) 0
 RETURN 0 (ARG3 + (ARG2 - ARG1))
(ARG3 + (ARG2 - ARG1)) INT_ADD ARG3 (ARG2 - ARG1)
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 RETURN 0
 CALL func f() f() f()
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 CALL func ARG1 ([(ARG2 + 8)] - [ARG2]) ([(ARG2 + 8)] - [ARG2])
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 CALL func ARG1 ([ARG1] + ([(ARG2 + 8)] - [ARG2])) ([ARG1] + ([(ARG2 + 8)] - [ARG2]))
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 CALL func ARG1 f(ARG1) f(ARG1)
0 INT_NOTEQUAL ARG1 ARG2
 CALL func ARG1 [ARG1] [ARG1]
[ARG1] LOAD 433 ARG1
ARG1 COPY ARG1
f() CALL func ARG1
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 1 8
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 1 8
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
 RETURN 0 ARG1
 CBRANCH (ARG1 INT_NOTEQUAL ARG2)
 CBRANCH (([(ARG1 + 8)] - [ARG1]) INT_NOTEQUAL 0)
 CALL func [ARG2] ([ARG2] + ([(ARG1 + 8)] - [ARG1])) [ARG1] ([ARG2] + ([(ARG1 + 8)] - [ARG1]))
([ARG2] + ([(ARG1 + 8)] - [ARG1])) INT_ADD [ARG2] ([(ARG1 + 8)] - [ARG1])
 CBRANCH (([(ARG1 + 8)] - [ARG1]) INT_LESS ([(ARG2 + 8)] - [ARG2]))
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 BRANCH VZERO
([ARG2] + f(ARG1)) INT_ADD [ARG2] f(ARG1)
 CBRANCH (([(ARG2 + 8)] - [ARG2]) INT_EQUAL 0)
0 INT_LESS f() ([(ARG2 + 8)] - [ARG2])
([ARG1] + f(ARG1)) INT_ADD [ARG1] f(ARG1)
0 INT_EQUAL ([(ARG2 + 8)] - [ARG2]) 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (f() INT_LESS ([(ARG2 + 8)] - [ARG2]))
 CALL func f(ARG1) [(ARG1 + 8)] [(ARG1 + 8)]
 CALL func ([ARG2] + f(ARG1)) [(ARG2 + 8)] ([ARG1] + f(ARG1)) 0
([ARG1] + ([(ARG2 + 8)] - [ARG2])) INT_ADD [ARG1] ([(ARG2 + 8)] - [ARG2])
 BRANCH VZERO
0 COPY 0
0 INT_NOTEQUAL ([(ARG1 + 8)] - [ARG1]) 0
 CALL func [ARG1] [(ARG1 + 8)] [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([ARG2] + ([(ARG2 + 8)] - [ARG2])) INT_ADD [ARG2] ([(ARG2 + 8)] - [ARG2])
f() CALL func [ARG2] ([ARG2] + ([(ARG2 + 8)] - [ARG2])) [ARG1] ([ARG2] + ([(ARG2 + 8)] - [ARG2]))
 BRANCH VZERO
([(ARG2 + 8)] - [ARG2]) INT_SUB [(ARG2 + 8)] [ARG2]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_LESS ([(ARG1 + 8)] - [ARG1]) ([(ARG2 + 8)] - [ARG2])
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CALL libcall_memcpy_thunk ARG3 ARG1 (ARG2 - ARG1)
ARG1 CAST ARG1
0 INT_NOTEQUAL ARG1 ARG2
ARG2 CAST ARG2
 RETURN 0
 CBRANCH (ARG1 INT_NOTEQUAL ARG2)
(ARG2 - ARG1) INT_SUB ARG2 ARG1
(ARG2 - ARG1) CAST (ARG2 - ARG1)
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
 STORE 433 ARG1 [f(ARG2)]
 STORE 433 ARG2 [f(RSP)]
f(ARG2) CALL func ARG2
f(ARG2) CAST f(ARG2)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f(RSP) CAST f(RSP)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f(RSP) CALL func (RSP + -24)
(RSP + -24) PTRSUB RSP -24
[f(RSP)] LOAD 433 f(RSP)
(FS_OFFSET + 40) INT_ADD 0 40
[f(ARG2)] LOAD 433 f(ARG2)
[f(ARG1)] LOAD 433 f(ARG1)
f(ARG1) CAST f(ARG1)
40 CAST 40
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 [f(ARG2)]
f(ARG1) CALL func ARG1
 STORE 433 ARG2 [f(RSP)]
f(ARG2) CALL func ARG2
[f(RSP)] LOAD 433 f(RSP)
[f(ARG1)] LOAD 433 f(ARG1)
f(RSP) CALL func (RSP + -17)
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
[f(ARG2)] LOAD 433 f(ARG2)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f(RSP) CAST f(RSP)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
f(ARG1) CAST f(ARG1)
(RSP + -17) PTRSUB RSP -17
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
f(ARG2) CAST f(ARG2)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 ([(ARG2 + 8)] - [ARG2]) ([(ARG2 + 8)] - [ARG2])
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
0 INT_EQUAL ARG1 ARG2
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 ([ARG1] + f(ARG1 , ARG2)) ([ARG1] + f(ARG1 , ARG2))
 CALL func ARG1 ([(ARG1 + 8)] + (([(ARG2 + 8)] - [ARG2]) - ([(ARG1 + 8)] - [ARG1]))) ([(ARG1 + 8)] + (([(ARG2 + 8)] - [ARG2]) - ([(ARG1 + 8)] - [ARG1])))
[ARG1] LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 ARG2 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 16) PTRADD ARG2 2 8
 CALL func ARG2 ([(ARG1 + 8)] - [ARG1]) ([(ARG1 + 8)] - [ARG1])
(ARG2 + 8) PTRADD ARG2 1 8
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 8) PTRADD ARG2 1 8
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 8) PTRADD ARG2 1 8
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 1 8
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 8) PTRADD ARG2 1 8
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
 CALL func ARG2 ([ARG2] + f(ARG1 , ARG2)) ([ARG2] + f(ARG1 , ARG2))
f() CALL func ARG2
 CALL func ARG2 ([(ARG2 + 8)] + (([(ARG1 + 8)] - [ARG1]) - ([(ARG2 + 8)] - [ARG2]))) ([(ARG2 + 8)] + (([(ARG1 + 8)] - [ARG1]) - ([(ARG2 + 8)] - [ARG2])))
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 8) PTRADD ARG2 1 8
 CBRANCH (ARG1 INT_EQUAL ARG2)
 CBRANCH f()
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
([(ARG2 + 8)] - [ARG2]) INT_SUB [(ARG2 + 8)] [ARG2]
 RETURN 0
 CALL func (ARG1 + 8) (ARG2 + 8) (ARG2 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
 BRANCH VZERO
0 INT_LESS ([(ARG2 + 8)] - [ARG2]) ([(ARG1 + 8)] - [ARG1])
 CBRANCH (f() INT_NOTEQUAL f(ARG1 , ARG2))
 CALL func (ARG1 + 16) (ARG2 + 16) (ARG2 + 16)
 CBRANCH (f() INT_LESS ([(ARG2 + 8)] - [ARG2]))
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_LESS f() ([(ARG2 + 8)] - [ARG2])
0 INT_NOTEQUAL f() f(ARG1 , ARG2)
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
 CBRANCH (f() INT_LESS ([(ARG1 + 8)] - [ARG1]))
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
([(ARG2 + 8)] - [ARG2]) INT_SUB [(ARG2 + 8)] [ARG2]
0 INT_LESS f() ([(ARG1 + 8)] - [ARG1])
([(ARG1 + 8)] - [ARG1]) CAST ([(ARG1 + 8)] - [ARG1])
([(ARG2 + 8)] - [ARG2]) CAST ([(ARG2 + 8)] - [ARG2])
([(ARG2 + 8)] - [ARG2]) CAST ([(ARG2 + 8)] - [ARG2])
 CBRANCH (([(ARG2 + 8)] - [ARG2]) INT_LESS ([(ARG1 + 8)] - [ARG1]))
0 COPY 0
 RETURN 0
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
 CBRANCH (([(ARG1 + 8)] - [ARG1]) INT_LESS ([(ARG2 + 8)] - [ARG2]))
([ARG2] + f(ARG1 , ARG2)) INT_ADD [ARG2] f(ARG1 , ARG2)
 CALL func (f(ARG1 , ARG2) + [ARG2]) [(ARG2 + 8)] (f(ARG1 , ARG2) + [ARG2]) [ARG2]
([(ARG1 + 8)] + (([(ARG2 + 8)] - [ARG2]) - ([(ARG1 + 8)] - [ARG1]))) INT_ADD [(ARG1 + 8)] (([(ARG2 + 8)] - [ARG2]) - ([(ARG1 + 8)] - [ARG1]))
 CALL func ([ARG2] + f(ARG1 , ARG2)) [(ARG2 + 8)] [(ARG1 + 8)] 0
([ARG2] + f(ARG1 , ARG2)) INT_ADD [ARG2] f(ARG1 , ARG2)
(f(ARG1 , ARG2) + [ARG2]) INT_ADD f(ARG1 , ARG2) [ARG2]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
([(ARG2 + 8)] - [ARG2]) INT_SUB [(ARG2 + 8)] [ARG2]
(([(ARG2 + 8)] - [ARG2]) - ([(ARG1 + 8)] - [ARG1])) INT_SUB ([(ARG2 + 8)] - [ARG2]) ([(ARG1 + 8)] - [ARG1])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
 BRANCH VZERO
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (([(ARG2 + 8)] - [ARG2]) INT_LESS ([(ARG1 + 8)] - [ARG1]))
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
([ARG1] + f(ARG1 , ARG2)) INT_ADD [ARG1] f(ARG1 , ARG2)
([(ARG2 + 8)] - [ARG2]) CAST ([(ARG2 + 8)] - [ARG2])
([(ARG2 + 8)] - [ARG2]) INT_SUB [(ARG2 + 8)] [ARG2]
([(ARG2 + 8)] + (([(ARG1 + 8)] - [ARG1]) - ([(ARG2 + 8)] - [ARG2]))) INT_ADD [(ARG2 + 8)] (([(ARG1 + 8)] - [ARG1]) - ([(ARG2 + 8)] - [ARG2]))
 CALL func (f(ARG1 , ARG2) + [ARG1]) [(ARG1 + 8)] (f(ARG1 , ARG2) + [ARG1]) [ARG1]
([(ARG1 + 8)] - [ARG1]) CAST ([(ARG1 + 8)] - [ARG1])
 CALL func ([ARG1] + f(ARG1 , ARG2)) [(ARG1 + 8)] [(ARG2 + 8)] 0
([ARG1] + f(ARG1 , ARG2)) INT_ADD [ARG1] f(ARG1 , ARG2)
(f(ARG1 , ARG2) + [ARG1]) INT_ADD f(ARG1 , ARG2) [ARG1]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
(([(ARG1 + 8)] - [ARG1]) - ([(ARG2 + 8)] - [ARG2])) INT_SUB ([(ARG1 + 8)] - [ARG1]) ([(ARG2 + 8)] - [ARG2])
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
0 INT_LESS ([(ARG1 + 8)] - [ARG1]) ([(ARG2 + 8)] - [ARG2])
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
([(ARG2 + 8)] - [ARG2]) INT_SUB [(ARG2 + 8)] [ARG2]
 BRANCH VZERO
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
([(ARG2 + 8)] - [ARG2]) INT_SUB [(ARG2 + 8)] [ARG2]
0 COPY 0
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
 CBRANCH (([(ARG2 + 8)] - [ARG2]) INT_LESSEQUAL f())
([(ARG1 + 8)] - [ARG1]) CAST ([(ARG1 + 8)] - [ARG1])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (([(ARG1 + 8)] - [ARG1]) INT_LESSEQUAL f())
0 COPY 0
idx < size() COPY idx < size()
0 INT_LESSEQUAL ([(ARG1 + 8)] - [ARG1]) f()
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
([ARG2] + f()) INT_ADD [ARG2] f()
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
idx < size() COPY idx < size()
 BRANCH VZERO
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
 RETURN 1
([ARG1] + f()) INT_ADD f() [ARG1]
(f() + 1) INT_ADD f() 1
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
 CALL func ([ARG1] + f()) ([ARG2] + f()) ([ARG2] + f()) [ARG1]
0 COPY 0
 BRANCH VZERO
1 COPY 1
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
([(ARG2 + 8)] - [ARG2]) INT_SUB [(ARG2 + 8)] [ARG2]
0 INT_LESSEQUAL ([(ARG2 + 8)] - [ARG2]) f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG2 + 8)] - [ARG2]) INT_SUB [(ARG2 + 8)] [ARG2]
([(ARG2 + 8)] - [ARG2]) CAST ([(ARG2 + 8)] - [ARG2])
([(ARG2 + 8)] - [ARG2]) CAST ([(ARG2 + 8)] - [ARG2])
([(ARG1 + 8)] - [ARG1]) CAST ([(ARG1 + 8)] - [ARG1])
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
0 INT_LESS ([(ARG2 + 8)] - [ARG2]) ([(ARG1 + 8)] - [ARG1])
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
([(ARG2 + 8)] - [ARG2]) INT_SUB [(ARG2 + 8)] [ARG2]
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
[ARG1] LOAD 433 ARG1
f(ARG1 , ARG4) LOAD 433 ARG1
 STORE 433 ARG1 (f(ARG1 , ARG4) + (4 - ARG4))
f(ARG1 , ARG4) LOAD 433 ARG1
0 INT_LESSEQUAL ((4 - ARG4) + [ARG1]) ARG2
(ARG3 + ARG4) INT_ADD ARG3 ARG4
(4 - ARG4) INT_SUB 4 ARG4
((4 - ARG4) + [ARG1]) INT_ADD (4 - ARG4) [ARG1]
 CBRANCH (((4 - ARG4) + [ARG1]) INT_LESSEQUAL ARG2)
0 COPY 0
[ARG1] CAST [ARG1]
 RETURN 0 0
 CALL libcall_memcpy_thunk f(ARG1 , ARG4) (ARG3 + ARG4) (4 - ARG4)
(f(ARG1 , ARG4) + (4 - ARG4)) CAST (f(ARG1 , ARG4) + (4 - ARG4))
f(ARG1 , ARG4) CAST f(ARG1 , ARG4)
(f(ARG1 , ARG4) + (4 - ARG4)) INT_ADD f(ARG1 , ARG4) (4 - ARG4)
(ARG3 + ARG4) CAST (ARG3 + ARG4)
[ARG1] LOAD 433 ARG1
40 INT_ADD 0 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(ARG1 >> (63 & (ARG2 / 2147483647))) INT_RIGHT ARG1 (63 & (ARG2 / 2147483647))
(ARG1 << (64 - (63 & (ARG2 / 2147483647)))) INT_LEFT ARG1 (64 - (63 & (ARG2 / 2147483647)))
0 INT_NOTEQUAL ARG2 0
(ARG2 / 2147483647) SUBPIECE ARG2 0
 RETURN 0 f(ARG1 , ARG2)
 CBRANCH (ARG2 INT_NOTEQUAL 0)
(64 - (63 & (ARG2 / 2147483647))) INT_SUB 64 (63 & (ARG2 / 2147483647))
 BRANCH VZERO
((ARG1 >> (63 & (ARG2 / 2147483647))) | (ARG1 << (64 - (63 & (ARG2 / 2147483647))))) INT_OR (ARG1 >> (63 & (ARG2 / 2147483647))) (ARG1 << (64 - (63 & (ARG2 / 2147483647))))
(63 & (ARG2 / 2147483647)) INT_AND (ARG2 / 2147483647) 63
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
 STORE 433 ARG1 [f(ARG2)]
 STORE 433 ARG2 [f(RSP)]
f(ARG2) CALL func ARG2
f(ARG2) CAST f(ARG2)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f(RSP) CAST f(RSP)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f(RSP) CALL func (RSP + -24)
(RSP + -24) PTRSUB RSP -24
[f(RSP)] LOAD 433 f(RSP)
(FS_OFFSET + 40) INT_ADD 0 40
[f(ARG2)] LOAD 433 f(ARG2)
[f(ARG1)] LOAD 433 f(ARG1)
f(ARG1) CAST f(ARG1)
40 CAST 40
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 24) INT_ADD ARG1 24
f() CALL func ARG1
f(ARG2) LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
 STORE 433 ARG2 (f(ARG2) + f())
 STORE 433 ARG2 (f(ARG2) + (f() + f()))
 STORE 433 ARG2 ([ARG2] + f())
f(ARG2) LOAD 433 ARG2
f(ARG2) LOAD 433 ARG2
f(ARG2) LOAD 433 ARG2
f(ARG2) LOAD 433 ARG2
[ARG3] LOAD 433 ARG3
f(ARG3) LOAD 433 ARG3
 STORE 433 ARG3 f(ARG3)
 STORE 433 ARG3 ((f(ARG2) + f()) + f(ARG3))
(f(ARG2) + f()) INT_ADD f(ARG2) f()
(f(ARG2) + f()) INT_ADD f() f(ARG2)
(f(ARG2) + (f() + f())) INT_ADD (f() + f()) f(ARG2)
([ARG2] + f()) INT_ADD f() [ARG2]
f() CALL func (ARG1 + 8)
f(ARG3) CALL func (([ARG3] + f(ARG2)) + f()) 21 ([ARG3] + f(ARG2))
(f() + f()) INT_ADD f() f()
 RETURN 0
(([ARG3] + f(ARG2)) + f()) INT_ADD f() ([ARG3] + f(ARG2))
f() CALL func f(ARG2) 44
f() CALL func (ARG1 + 24)
f() CALL func (ARG1 + 16)
((f(ARG2) + f()) + f(ARG3)) INT_ADD (f(ARG2) + f()) f(ARG3)
([ARG3] + f(ARG2)) INT_ADD [ARG3] f(ARG2)
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 40) PTRADD ARG1 5 8
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) LOAD 433 ARG1
(ARG1 + 40) PTRADD ARG1 5 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 48) PTRADD ARG1 6 8
(ARG1 + 40) PTRADD ARG1 5 8
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 48) PTRADD ARG1 6 8
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 (f(ARG1) * -5435081209227447693)
(ARG1 + 48) PTRADD ARG1 6 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 24) PTRADD ARG1 3 8
 STORE 433 ARG1 0
(ARG1 + 24) PTRADD ARG1 3 8
 CALL func (ARG1 + 16) ARG1 (ARG1 + 16)
f(ARG1) LOAD 433 ARG1
(ARG1 + 40) PTRADD ARG1 5 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 24) PTRADD ARG1 3 8
[ARG1] LOAD 433 ARG1
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 48) PTRADD ARG1 6 8
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG2 + 48) INT_ADD ARG2 48
f() CALL func (ARG2 + 8) ARG2 ([ARG1] + [(ARG1 + 8)])
(ARG2 + 8) INT_ADD ARG2 8
 CALL func ARG2 (ARG1 + 24) (ARG1 + 32) (ARG1 + 24)
(ARG2 + 40) INT_ADD ARG2 40
(ARG2 + 32) INT_ADD ARG2 32
(ARG2 + 16) INT_ADD ARG2 16
(f(ARG1) + [(ARG1 + 40)]) INT_ADD f(ARG1) [(ARG1 + 40)]
f(ARG1) CALL func ((([ARG1] + [(ARG1 + 8)]) + [(ARG1 + 24)]) + f()) 37
(([(ARG1 + 8)] + [(ARG1 + 32)]) + f()) INT_ADD f() ([(ARG1 + 8)] + [(ARG1 + 32)])
f(ARG1) CALL func ([(ARG1 + 40)] + [(ARG1 + 16)]) 33 [(ARG1 + 16)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
((([ARG1] + [(ARG1 + 8)]) + [(ARG1 + 24)]) + f()) INT_ADD f() (([ARG1] + [(ARG1 + 8)]) + [(ARG1 + 24)])
 CALL func (ARG2 + 32) (ARG1 + 40) (ARG1 + 48) (ARG1 + 40)
([(ARG1 + 40)] + [(ARG1 + 16)]) INT_ADD [(ARG1 + 40)] [(ARG1 + 16)]
 STORE 433 (ARG1 + 40) ([(ARG1 + 16)] + [(ARG1 + 48)])
([(ARG1 + 16)] + [(ARG1 + 48)]) INT_ADD [(ARG1 + 16)] [(ARG1 + 48)]
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
f() CALL func (ARG2 + 48)
([(ARG1 + 24)] + f()) INT_ADD [(ARG1 + 24)] f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() CALL func (ARG2 + 16)
 STORE 433 (ARG1 + 16) (f(ARG1) * -5435081209227447693)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() CALL func (ARG2 + 40)
 STORE 433 (ARG1 + 32) (f(ARG1) + [(ARG1 + 40)])
f(ARG1) CALL func (([(ARG1 + 8)] + [(ARG1 + 32)]) + f()) 42
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 STORE 433 (ARG1 + 8) (([(ARG1 + 24)] + f()) + [(ARG1 + 8)])
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
 RETURN 0
(f(ARG1) * -5435081209227447693) INT_MULT f(ARG1) -5435081209227447693
(([(ARG1 + 24)] + f()) + [(ARG1 + 8)]) INT_ADD ([(ARG1 + 24)] + f()) [(ARG1 + 8)]
([ARG1] + [(ARG1 + 8)]) INT_ADD [ARG1] [(ARG1 + 8)]
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
 STORE 433 (ARG1 + 48) ([(ARG1 + 8)] + f())
(f(ARG1) * -5435081209227447693) INT_MULT f(ARG1) -5435081209227447693
([(ARG1 + 8)] + f()) INT_ADD [(ARG1 + 8)] f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (ARG1 + 8) (f(ARG1) * -5435081209227447693)
(f(ARG1) * -5435081209227447693) INT_MULT f(ARG1) -5435081209227447693
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
0 INT_XOR f(ARG1) [(ARG1 + 48)]
([(ARG1 + 32)] * -5435081209227447693) INT_MULT [(ARG1 + 32)] -5435081209227447693
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
([(ARG1 + 8)] + [(ARG1 + 32)]) INT_ADD [(ARG1 + 8)] [(ARG1 + 32)]
 STORE 433 (ARG1 + 24) ([(ARG1 + 32)] * -5435081209227447693)
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
(([ARG1] + [(ARG1 + 8)]) + [(ARG1 + 24)]) INT_ADD ([ARG1] + [(ARG1 + 8)]) [(ARG1 + 24)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 / 2147483647) INT_RIGHT ARG1 47
0 INT_XOR (ARG1 / 2147483647) ARG1
 RETURN 0 0
0 INT_XOR ARG1 ARG2
0 INT_XOR ARG2 0
 RETURN 0 0
0 INT_RIGHT 0 47
0 COPY 0
0 INT_MULT 0 -7070675565921424023
0 INT_XOR 0 0
0 INT_MULT 0 -7070675565921424023
0 INT_MULT 0 -7070675565921424023
0 INT_XOR 0 0
0 INT_RIGHT 0 47
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 40) PTRADD ARG1 5 8
(ARG1 + 48) PTRADD ARG1 6 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 COPY ARG1
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 40) PTRADD ARG1 5 8
 CALL func ARG1 ARG2 ARG2
ARG1 COPY ARG1
(ARG3 * -5435081209227447693) INT_MULT ARG3 -5435081209227447693
f() CALL func ARG3 -5435081209227447693
 STORE 433 (ARG1 + 8) ARG3
f() CALL func ARG3
0 INT_XOR ARG3 -5435081209227447693
40 CAST 40
(f() + -1) INT_ADD f() -1
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 40
(f(ARG1) + 8) COPY (f(ARG1) + 8)
 STORE 433 (ARG1 + 16) f()
 BRANCH VZERO
f() CALL func [(ARG1 + 32)] [(ARG1 + 40)] [(ARG1 + 40)]
 STORE 433 (ARG1 + 24) f()
0 INT_NOTEQUAL f() 0
 STORE 433 f(ARG1) 0
 CBRANCH (f() INT_NOTEQUAL 0)
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func 0 49
7 COPY 7
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
 STORE 433 (ARG1 + 32) (ARG3 * -5435081209227447693)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
 STORE 433 (ARG1 + 40) f()
 STORE 433 (ARG1 + 48) f()
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
ARG3 COPY ARG3
f() CALL func (RSP + -64) ARG4 (RSP + -76) 0
ARG4 COPY ARG4
ARG5 COPY ARG5
ARG1 COPY ARG1
ARG2 COPY ARG2
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
(RSP + -64) PTRSUB RSP -64
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -76) PTRSUB RSP -76
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([ARG2] INT_EQUAL 0)
ARG1 CAST ARG1
 STORE 433 (ARG1 + 64) A_Stack[-0x98]:8
(ARG1 + 88) INT_ADD ARG1 88
 STORE 433 (ARG1 + 96) A_Stack[-0x78]:8
(ARG1 + 112) CAST (ARG1 + 112)
ARG1 CAST ARG1
(ARG1 + 64) CAST (ARG1 + 64)
ARG1 CAST ARG1
f(ARG2) LOAD 433 ARG2
 CALL func (RSP + -152) ARG1 [(ARG1 + 120)] ARG1
(ARG1 + 104) CAST (ARG1 + 104)
 STORE 433 (ARG1 + 88) A_Stack[-0x80]:8
(ARG1 + 80) INT_ADD ARG1 80
 BRANCH VZERO
ARG1 CAST ARG1
 CALL func (ARG1 + 64) ARG1 (ARG1 + 64)
(ARG1 + 112) INT_ADD ARG1 112
(ARG1 + 96) CAST (ARG1 + 96)
(ARG1 + 64) INT_ADD ARG1 64
 STORE 433 ARG2 64
ARG1 CAST ARG1
 STORE 433 (ARG1 + 80) A_Stack[-0x88]:8
(ARG1 + 72) INT_ADD ARG1 72
(ARG1 + 88) CAST (ARG1 + 88)
ARG1 CAST ARG1
 STORE 433 (ARG1 + 112) A_Stack[-0x68]:8
(ARG1 + 104) INT_ADD ARG1 104
(ARG1 + 120) INT_ADD ARG1 120
(ARG1 + 120) CAST (ARG1 + 120)
(RSP + -152) PTRSUB RSP -152
(ARG1 + 80) CAST (ARG1 + 80)
 STORE 433 (ARG1 + 72) A_Stack[-0x90]:8
ARG1 CAST ARG1
ARG1 CAST ARG1
(ARG1 + 64) INT_ADD ARG1 64
 STORE 433 (ARG1 + 104) A_Stack[-0x70]:8
(ARG1 + 96) INT_ADD ARG1 96
(f(ARG2) + 64) INT_ADD f(ARG2) 64
(ARG1 + 72) CAST (ARG1 + 72)
 STORE 433 ARG2 (f(ARG2) + 64)
[(ARG1 + 120)] LOAD 433 (ARG1 + 120)
ARG1 CAST ARG1
 CALL libcall_memcpy_thunk ARG3 (RSP + -76) (ARG4 - ARG3)
[(f() + 40)] LOAD 433 (f() + 40)
ARG3 CAST ARG3
f(ARG1) COPY f(ARG1)
(ARG4 - ARG3) INT_SUB ARG4 ARG3
0 INT_EQUAL [ARG2] 0
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
ARG1 COPY ARG1
f(ARG1 , ARG3) COPY f(ARG1 , ARG3)
(f() + 40) INT_ADD f() 40
(RSP + -64) PTRSUB RSP -64
0 INT_NOTEQUAL 0 [(f() + 40)]
[ARG2] LOAD 433 ARG2
f() CALL func (RSP + -64) f(ARG4) (RSP + -76) f(ARG3 , ARG4)
(RSP + -76) PTRSUB RSP -76
(RSP + -76) PTRSUB RSP -76
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 RETURN 1
 RETURN 0 f(ARG1 , ARG3)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL libcall_abort_thunk
 STORE 433 ARG1 ARG2
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
 STORE 433 ARG1 [f(ARG2)]
 STORE 433 ARG2 [f(RSP)]
f(ARG2) CALL func ARG2
f(ARG2) CAST f(ARG2)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f(RSP) CAST f(RSP)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f(RSP) CALL func (RSP + -24)
(RSP + -24) PTRSUB RSP -24
[f(RSP)] LOAD 433 f(RSP)
(FS_OFFSET + 40) INT_ADD 0 40
[f(ARG2)] LOAD 433 f(ARG2)
[f(ARG1)] LOAD 433 f(ARG1)
f(ARG1) CAST f(ARG1)
40 CAST 40
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 CALL func ARG1 ARG2 ARG2
 RETURN 0
ARG1 COPY ARG1
0 INT_NOTEQUAL f(ARG1) ARG2
ARG3 COPY ARG3
 RETURN 0 f(ARG3)
 CBRANCH (f(ARG1) INT_NOTEQUAL ARG2)
f(ARG3) COPY f(ARG3)
 BRANCH VZERO
 CALL func f(ARG1) f(ARG3) f(ARG3)
(f(ARG3) + 1) INT_ADD f(ARG3) 1
(f(ARG1) + 1) INT_ADD f(ARG1) 1
 CALL libcall_memmove_thunk (ARG3 - (ARG2 - ARG1)) ARG1 (ARG2 - ARG1)
ARG1 CAST ARG1
(ARG2 - ARG1) INT_SUB ARG2 ARG1
(ARG3 - (ARG2 - ARG1)) INT_SUB ARG3 (ARG2 - ARG1)
(ARG3 - (ARG2 - ARG1)) INT_SUB ARG3 (ARG2 - ARG1)
0 INT_NOTEQUAL (ARG2 - ARG1) 0
 RETURN 0 (ARG3 - (ARG2 - ARG1))
 CBRANCH ((ARG2 - ARG1) INT_NOTEQUAL 0)
(ARG3 - (ARG2 - ARG1)) CAST (ARG3 - (ARG2 - ARG1))
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 CALL func f() f() f()
 RETURN 0
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
 CALL libcall_memmove_thunk ARG3 ARG1 (ARG2 - ARG1)
ARG1 CAST ARG1
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG3 CAST ARG3
 CBRANCH ((ARG2 - ARG1) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (ARG2 - ARG1) 0
 RETURN 0 (ARG3 + (ARG2 - ARG1))
(ARG3 + (ARG2 - ARG1)) INT_ADD ARG3 (ARG2 - ARG1)
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 RETURN 0
 CALL func f() f() f()
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
(ARG1 + (ARG3 + (~(ARG2) + 1))) PTRADD ARG1 (ARG3 + (~(ARG2) + 1)) 1
ARG1 COPY ARG1
0 INT_NOTEQUAL ARG1 ARG2
ARG1 CAST ARG1
 CALL func ARG1 ARG2 ARG2 ARG2
ARG1 COPY ARG1
ARG1 CAST ARG1
(ARG2 + (~(ARG1) + 1)) PTRADD ARG2 (~(ARG1) + 1) 1
ARG2 CAST ARG2
ARG2 COPY ARG2
0 INT_NOTEQUAL ARG3 ARG2
ARG3 COPY ARG3
(ARG3 + (~(ARG1) + 1)) PTRADD ARG3 (~(ARG1) + 1) 1
(ARG3 + (~(ARG2) + 1)) PTRADD ARG3 (~(ARG2) + 1) 1
(f() + 40) INT_ADD f() 40
 CBRANCH (ARG1 INT_NOTEQUAL ARG2)
0 INT_EQUAL 0 [(f() + 40)]
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f(ARG1 , ARG2 , ARG3) INT_EQUAL 1)
 STORE 433 (f(ARG1 , ARG2 , ARG3) + (f(ARG1 , ARG2 , ARG3) + -1)) [f(RSP)]
0 INT_SLESS f() (f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1))
f(RSP) CALL func (RSP + -97)
[f(RSP)] LOAD 433 f(RSP)
0 COPY 0
 CBRANCH (f() INT_SLESS (f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1)))
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
(f(ARG1 , ARG2 , ARG3) + 1) PTRADD f(ARG1 , ARG2 , ARG3) 1 1
(~(f(ARG1 , ARG2 , ARG3)) + 1) INT_2COMP f(ARG1 , ARG2 , ARG3)
(f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1)) CAST (f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1))
f(RSP) CAST f(RSP)
(f(ARG1 , ARG2 , ARG3) + f(ARG1 , ARG2 , ARG3)) PTRADD f(ARG1 , ARG2 , ARG3) f(ARG1 , ARG2 , ARG3) 1
f(ARG1 , ARG2 , ARG3) COPY f(ARG1 , ARG2 , ARG3)
(f(ARG1 , ARG2 , ARG3) + (f(ARG1 , ARG2 , ARG3) + -1)) PTRADD f(ARG1 , ARG2 , ARG3) (f(ARG1 , ARG2 , ARG3) + -1) 1
(f(ARG1 , ARG2 , ARG3) + f(ARG1 , ARG2 , ARG3)) PTRADD f(ARG1 , ARG2 , ARG3) f(ARG1 , ARG2 , ARG3) 1
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
f(ARG1 , ARG2 , ARG3) COPY f(ARG1 , ARG2 , ARG3)
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
(f(ARG1 , ARG2 , ARG3) % f(ARG1 , ARG2 , ARG3)) CAST (f(ARG1 , ARG2 , ARG3) % f(ARG1 , ARG2 , ARG3))
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
(f(ARG1 , ARG2 , ARG3) + -1) CAST (f(ARG1 , ARG2 , ARG3) + -1)
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
f(ARG1 , ARG2 , ARG3) COPY f(ARG1 , ARG2 , ARG3)
 CBRANCH ((f(ARG1 , ARG2 , ARG3) % f(ARG1 , ARG2 , ARG3)) INT_EQUAL 0)
0 INT_EQUAL (f(ARG1 , ARG2 , ARG3) % f(ARG1 , ARG2 , ARG3)) 0
(f(ARG1 , ARG2 , ARG3) % f(ARG1 , ARG2 , ARG3)) INT_SREM f(ARG1 , ARG2 , ARG3) f(ARG1 , ARG2 , ARG3)
(f(ARG1 , ARG2 , ARG3) + -1) PTRADD f(ARG1 , ARG2 , ARG3) -1 1
f(ARG1 , ARG2 , ARG3) COPY f(ARG1 , ARG2 , ARG3)
(f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1)) PTRADD f(ARG1 , ARG2 , ARG3) (~(f(ARG1 , ARG2 , ARG3)) + 1) 1
 BRANCH VZERO
 CALL func (f(ARG1 , ARG2 , ARG3) + 1) (f(ARG1 , ARG2 , ARG3) + f(ARG1 , ARG2 , ARG3)) f(ARG1 , ARG2 , ARG3) (f(ARG1 , ARG2 , ARG3) + 1)
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
f(ARG1 , ARG2 , ARG3) CALL func f(ARG1 , ARG2 , ARG3)
[f(ARG1)] LOAD 433 f(ARG1 , ARG2 , ARG3)
(RSP + -97) PTRSUB RSP -97
 CBRANCH ((f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1)) INT_EQUAL 1)
0 INT_SLESS f() (f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1))
0 COPY 0
(f(ARG1 , ARG2 , ARG3) + (f(ARG1 , ARG2 , ARG3) + -1)) PTRADD f(ARG1 , ARG2 , ARG3) (f(ARG1 , ARG2 , ARG3) + -1) 1
 CBRANCH (f() INT_SLESS (f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1)))
(f(ARG1 , ARG2 , ARG3) + -1) CAST (f(ARG1 , ARG2 , ARG3) + -1)
(f(ARG1 , ARG2 , ARG3) + f(ARG1 , ARG2 , ARG3)) PTRADD f(ARG1 , ARG2 , ARG3) f(ARG1 , ARG2 , ARG3) 1
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
 CALL func f(ARG1 , ARG2 , ARG3) (f(ARG1 , ARG2 , ARG3) + (f(ARG1 , ARG2 , ARG3) + -1)) (f(ARG1 , ARG2 , ARG3) + f(ARG1 , ARG2 , ARG3)) (f(ARG1 , ARG2 , ARG3) + (f(ARG1 , ARG2 , ARG3) + -1))
(~(f(ARG1 , ARG2 , ARG3)) + 1) INT_2COMP f(ARG1 , ARG2 , ARG3)
(f(ARG1 , ARG2 , ARG3) + f(ARG1 , ARG2 , ARG3)) PTRADD f(ARG1 , ARG2 , ARG3) f(ARG1 , ARG2 , ARG3) 1
(f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1)) CAST (f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1))
(f(ARG1 , ARG2 , ARG3) + -1) PTRADD f(ARG1 , ARG2 , ARG3) -1 1
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
f(ARG1 , ARG2 , ARG3) PTRADD (f(ARG1 , ARG2 , ARG3) + f(ARG1 , ARG2 , ARG3)) (~((f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1))) + 1) 1
(~((f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1))) + 1) INT_2COMP (f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1))
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
(RSP + -97) PTRSUB RSP -97
(f(ARG1 , ARG2 , ARG3) % f(ARG1 , ARG2 , ARG3)) CAST (f(ARG1 , ARG2 , ARG3) % f(ARG1 , ARG2 , ARG3))
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
 BRANCH VZERO
 CBRANCH ((f(ARG1 , ARG2 , ARG3) % f(ARG1 , ARG2 , ARG3)) INT_EQUAL 0)
0 INT_EQUAL (f(ARG1 , ARG2 , ARG3) % f(ARG1 , ARG2 , ARG3)) 0
(f(ARG1 , ARG2 , ARG3) % f(ARG1 , ARG2 , ARG3)) INT_SREM f(ARG1 , ARG2 , ARG3) f(ARG1 , ARG2 , ARG3)
 STORE 433 f(ARG1 , ARG2 , ARG3) [f(RSP)]
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
[f(ARG1 , ARG3)] LOAD 433 f(ARG1 , ARG2 , ARG3)
f(RSP) CAST f(RSP)
(f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1)) PTRADD f(ARG1 , ARG2 , ARG3) (~(f(ARG1 , ARG2 , ARG3)) + 1) 1
f(ARG1 , ARG2 , ARG3) CALL func (f(ARG1 , ARG2 , ARG3) + (f(ARG1 , ARG2 , ARG3) + -1))
(f(ARG1 , ARG2 , ARG3) + (f(ARG1 , ARG2 , ARG3) + -1)) PTRADD f(ARG1 , ARG2 , ARG3) (f(ARG1 , ARG2 , ARG3) + -1) 1
f(ARG1 , ARG2 , ARG3) COPY f(ARG1 , ARG2 , ARG3)
f(ARG1 , ARG2 , ARG3) COPY f(ARG1 , ARG2 , ARG3)
(f(ARG1 , ARG2 , ARG3) + -1) CAST (f(ARG1 , ARG2 , ARG3) + -1)
f(ARG1 , ARG2 , ARG3) COPY f(ARG1 , ARG2 , ARG3)
f(RSP) CALL func (RSP + -97)
[f(RSP)] LOAD 433 f(RSP)
(f(ARG1 , ARG2 , ARG3) + -1) PTRADD f(ARG1 , ARG2 , ARG3) -1 1
f(ARG1 , ARG2 , ARG3) COPY f(ARG1 , ARG2 , ARG3)
(f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1)) CAST (f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1))
 CBRANCH (((ARG3 + (~(ARG1) + 1)) + (~((ARG2 + (~(ARG1) + 1))) + 1)) INT_EQUAL (ARG2 + (~(ARG1) + 1)))
(~(ARG2) + 1) INT_2COMP ARG2
(~(f(ARG1 , ARG2 , ARG3)) + 1) INT_2COMP f(ARG1 , ARG2 , ARG3)
0 INT_SLESS f(ARG1 , ARG2 , ARG3) (f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1))
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
 CBRANCH (f(ARG1 , ARG2 , ARG3) INT_SLESS (f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1)))
 BRANCH VZERO
(f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1)) PTRADD f(ARG1 , ARG2 , ARG3) (~(f(ARG1 , ARG2 , ARG3)) + 1) 1
(ARG3 + (~(ARG2) + 1)) CAST (ARG3 + (~(ARG2) + 1))
(f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1)) CAST (f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1))
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
 RETURN 0 f(ARG1 , ARG2 , ARG3)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1)) PTRADD f(ARG1 , ARG2 , ARG3) (~(f(ARG1 , ARG2 , ARG3)) + 1) 1
(~(f(ARG1 , ARG2 , ARG3)) + 1) INT_2COMP f(ARG1 , ARG2 , ARG3)
(f(ARG1 , ARG2 , ARG3) + -1) PTRADD f(ARG1 , ARG2 , ARG3) -1 1
(f(ARG1 , ARG2 , ARG3) + 1) PTRADD f(ARG1 , ARG2 , ARG3) 1 1
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
((f(ARG1 , ARG2 , ARG3) % f(ARG1 , ARG2 , ARG3)) + (~(f(ARG1 , ARG2 , ARG3)) + 1)) PTRADD (f(ARG1 , ARG2 , ARG3) % f(ARG1 , ARG2 , ARG3)) (~(f(ARG1 , ARG2 , ARG3)) + 1) 1
0 INT_EQUAL (f(ARG1 , ARG2 , ARG3) + (~(f(ARG1 , ARG2 , ARG3)) + 1)) 1
0 INT_EQUAL ((ARG3 + (~(ARG1) + 1)) + (~((ARG2 + (~(ARG1) + 1))) + 1)) (ARG2 + (~(ARG1) + 1))
((ARG3 + (~(ARG1) + 1)) + (~((ARG2 + (~(ARG1) + 1))) + 1)) PTRADD (ARG3 + (~(ARG1) + 1)) (~((ARG2 + (~(ARG1) + 1))) + 1) 1
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(~((ARG2 + (~(ARG1) + 1))) + 1) INT_2COMP (ARG2 + (~(ARG1) + 1))
 BRANCH VZERO
 CALL func (RSP + -96) (RSP + -88) (RSP + -88)
(RSP + -88) PTRSUB RSP -88
(RSP + -96) PTRSUB RSP -96
(~(ARG1) + 1) INT_2COMP ARG1
0 INT_EQUAL f(ARG1 , ARG2 , ARG3) 1
 BRANCH VZERO
(ARG2 + (~(ARG1) + 1)) CAST (ARG2 + (~(ARG1) + 1))
(~(ARG1) + 1) INT_2COMP ARG1
f(ARG1 , ARG2 , ARG3) CAST f(ARG1 , ARG2 , ARG3)
 CALL func f(ARG1 , ARG2 , ARG3) f(ARG1 , ARG2 , ARG3) f(ARG1 , ARG2 , ARG3)
(f(ARG1 , ARG2 , ARG3) + 1) PTRADD f(ARG1 , ARG2 , ARG3) 1 1
(~(f(ARG1 , ARG2 , ARG3)) + 1) INT_2COMP f(ARG1 , ARG2 , ARG3)
 CALL func (RSP + -96) (RSP + -88) (RSP + -88)
(RSP + -96) PTRSUB RSP -96
(RSP + -88) PTRSUB RSP -88
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(f(ARG1 , ARG2 , ARG3) + -1) PTRADD f(ARG1 , ARG2 , ARG3) -1 1
 CALL func (f(ARG1 , ARG2 , ARG3) + -1) (f(ARG1 , ARG2 , ARG3) + -1) (f(ARG1 , ARG2 , ARG3) + -1)
 CBRANCH (ARG3 INT_NOTEQUAL ARG2)
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG3 ARG2
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
(RSP + -48) PTRSUB RSP -48
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (RSP + -48)
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
[ARG1] LOAD 433 ARG1
(ARG1 + (ARG2 / 2)) PTRADD ARG1 (ARG2 / 2) 1
(ARG1 + (ARG2 + -1)) PTRADD ARG1 (ARG2 + -1) 1
(ARG2 + -1) INT_SUB ARG2 -1
(ARG2 / 2147483647) SUBPIECE ARG2 0
f() CALL func 0 ARG2 (([ARG1] + ([(ARG1 + (ARG2 / 2))] * 256)) * -7286425919675154353) ((ARG2 / 2147483647) + ([(ARG1 + (ARG2 + -1))] * 4))
(ARG2 / 2) INT_RIGHT ARG2 1
0 INT_XOR 0 ARG3
[(ARG1 + (ARG2 + -1))] INT_ZEXT [(ARG1 + (ARG2 + -1))]
[(ARG1 + (ARG2 / 2))] INT_ZEXT [(ARG1 + (ARG2 / 2))]
((ARG2 / 2147483647) + ([(ARG1 + (ARG2 + -1))] * 4)) INT_ADD (ARG2 / 2147483647) ([(ARG1 + (ARG2 + -1))] * 4)
([ARG1] + ([(ARG1 + (ARG2 / 2))] * 256)) INT_ZEXT ([ARG1] + ([(ARG1 + (ARG2 / 2))] * 256))
[(ARG1 + (ARG2 + -1))] LOAD 433 (ARG1 + (ARG2 + -1))
([(ARG1 + (ARG2 + -1))] * 4) INT_MULT [(ARG1 + (ARG2 + -1))] 4
((ARG2 / 2147483647) + ([(ARG1 + (ARG2 + -1))] * 4)) INT_ZEXT ((ARG2 / 2147483647) + ([(ARG1 + (ARG2 + -1))] * 4))
([ARG1] + ([(ARG1 + (ARG2 / 2))] * 256)) INT_ADD [ARG1] ([(ARG1 + (ARG2 / 2))] * 256)
0 INT_XOR (((ARG2 / 2147483647) + ([(ARG1 + (ARG2 + -1))] * 4)) * -3942382747735136937) (([ARG1] + ([(ARG1 + (ARG2 / 2))] * 256)) * -7286425919675154353)
(([ARG1] + ([(ARG1 + (ARG2 / 2))] * 256)) * -7286425919675154353) INT_MULT ([ARG1] + ([(ARG1 + (ARG2 / 2))] * 256)) -7286425919675154353
(f() * -7286425919675154353) INT_MULT f() -7286425919675154353
(((ARG2 / 2147483647) + ([(ARG1 + (ARG2 + -1))] * 4)) * -3942382747735136937) INT_MULT ((ARG2 / 2147483647) + ([(ARG1 + (ARG2 + -1))] * 4)) -3942382747735136937
[(ARG1 + (ARG2 / 2))] LOAD 433 (ARG1 + (ARG2 / 2))
[ARG1] INT_ZEXT [ARG1]
([(ARG1 + (ARG2 / 2))] * 256) INT_MULT [(ARG1 + (ARG2 / 2))] 256
 RETURN 0 (f() * -7286425919675154353)
[ARG1] LOAD 433 ARG1
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
[ARG1] COPY [ARG1]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 [ARG1]
(ARG1 + (ARG2 + -4)) INT_ADD ARG1 (ARG2 + -4)
f() CALL func ARG1
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
(ARG2 + -4) INT_ADD ARG2 -4
0 INT_XOR f() ARG3
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
 CALL func (ARG2 + (f() * 8)) 0 (ARG2 + (f() * 8)) (f() * 8)
 RETURN 0
f() CALL func (ARG1 + (ARG2 + -4))
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + (ARG2 + -8)) INT_ADD ARG1 (ARG2 + -8)
(ARG1 + (ARG2 + -32)) INT_ADD ARG1 (ARG2 + -32)
f() CALL func ARG1
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + (ARG2 + -16)) INT_ADD ARG1 (ARG2 + -16)
(ARG1 + (ARG2 + -24)) INT_ADD ARG1 (ARG2 + -24)
(ARG1 + (ARG2 + -16)) INT_ADD ARG1 (ARG2 + -16)
(ARG2 + -32) INT_ADD ARG2 -32
(ARG2 + -8) INT_ADD ARG2 -8
(ARG2 + f()) INT_ADD f() ARG2
(ARG2 + -16) INT_ADD ARG2 -16
(ARG2 + -16) INT_ADD ARG2 -16
(ARG2 + -24) INT_ADD ARG2 -24
0 INT_XOR (f() * -4348849565147123417) ARG3
f() CALL func f(ARG2)
((((f() + f()) + (f() + f())) + ((((f() + f()) + f()) + f()) + f())) * -4348849565147123417) INT_MULT (((f() + f()) + (f() + f())) + ((((f() + f()) + f()) + f()) + f())) -4348849565147123417
f(ARG2) INT_ADD ((((f() + f()) + (f() + f())) + ((((f() + f()) + f()) + f()) + f())) * -4348849565147123417) f(ARG2)
f() CALL func (((ARG2 + f()) * -4348849565147123417) + f()) 37
(f() + f()) INT_ADD f() f()
(f() + f()) INT_ADD f() f()
f() CALL func (ARG1 + (ARG2 + -16))
(f() + f()) INT_ADD f() f()
(f() + f()) INT_ADD f() f()
f() CALL func (f() + f()) 37
f() CALL func (ARG1 + 8)
(((f() + f()) + f()) + f()) INT_ADD ((f() + f()) + f()) f()
(((((ARG2 + f()) * -4348849565147123417) + f()) + f()) + f()) INT_ADD ((((ARG2 + f()) * -4348849565147123417) + f()) + f()) f()
f() CALL func (ARG1 + (ARG2 + -24))
f() CALL func (ARG1 + (ARG2 + -8))
 RETURN 0 (f() * -7286425919675154353)
((f() + f()) + (f() + f())) INT_ADD (f() + f()) (f() + f())
(f() * -7286425919675154353) INT_MULT f() -7286425919675154353
f() CALL func (ARG1 + (ARG2 + -16))
((f() + f()) + (f() + f())) INT_ADD (f() + f()) (f() + f())
f() CALL func (ARG1 + 16)
((((f() + f()) + f()) + f()) + f()) INT_ADD f() (((f() + f()) + f()) + f())
(f() * -4348849565147123417) INT_MULT f() -4348849565147123417
((((((ARG2 + f()) * -4348849565147123417) + f()) + f()) + f()) + f()) INT_ADD f() (((((ARG2 + f()) * -4348849565147123417) + f()) + f()) + f())
((f() + f()) + f()) INT_ADD f() (f() + f())
((((ARG2 + f()) * -4348849565147123417) + f()) + f()) INT_ADD (((ARG2 + f()) * -4348849565147123417) + f()) f()
((f() + f()) + f()) INT_ADD (f() + f()) f()
((ARG2 + f()) * -4348849565147123417) INT_MULT (ARG2 + f()) -4348849565147123417
(((ARG2 + f()) * -4348849565147123417) + f()) INT_ADD ((ARG2 + f()) * -4348849565147123417) f()
f(ARG2) INT_ADD ((((((ARG2 + f()) * -4348849565147123417) + f()) + f()) + f()) + f()) ((f() + f()) + (f() + f()))
f() CALL func (ARG1 + 24)
f() CALL func (ARG1 + 16)
(f() + f()) INT_ADD f() f()
(((f() + f()) + (f() + f())) + ((((f() + f()) + f()) + f()) + f())) INT_ADD ((((f() + f()) + f()) + f()) + f()) ((f() + f()) + (f() + f()))
f() CALL func ((f() + f()) + (f() + f()))
f() CALL func ((((ARG2 + f()) * -4348849565147123417) + f()) + f()) 52 (((ARG2 + f()) * -4348849565147123417) + f())
f() CALL func (((f() + f()) + f()) + f()) 31
((f() + f()) + (f() + f())) INT_ADD ((f() + f()) + (f() + f())) 0
f() CALL func (((((ARG2 + f()) * -4348849565147123417) + f()) + f()) + f()) 31
f() CALL func (ARG1 + (ARG2 + -32))
f(ARG2) INT_MULT f(ARG2) -7286425919675154353
f() CALL func ((((ARG2 + f()) * -4348849565147123417) + f()) + f()) 7
((((ARG2 + f()) * -4348849565147123417) + f()) + f()) INT_ADD f() (((ARG2 + f()) * -4348849565147123417) + f())
f() CALL func ((f() + f()) + f()) 7
f() CALL func ((f() + f()) + f()) 52 (f() + f())
0 INT_XOR (f() * -7286425919675154353) ARG3
((ARG2 + ((f() * 7286425919675154353) + ((f() * -5435081209227447693) + f()))) + ARG3) INT_ADD (ARG2 + ((f() * 7286425919675154353) + ((f() * -5435081209227447693) + f()))) ARG3
(ARG1 + (ARG2 + -8)) INT_ADD ARG1 (ARG2 + -8)
(ARG1 + (ARG2 + -16)) INT_ADD ARG1 (ARG2 + -16)
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
(ARG2 + -8) INT_ADD ARG2 -8
(ARG2 + -16) INT_ADD ARG2 -16
(ARG2 + ((f() * 7286425919675154353) + ((f() * -5435081209227447693) + f()))) INT_ADD ((f() * 7286425919675154353) + ((f() * -5435081209227447693) + f())) ARG2
f() CALL func 0 20
0 INT_XOR f() -3942382747735136937
(f() + f()) INT_ADD f() f()
f() CALL func ((f() * -5435081209227447693) - f()) 43 (ARG2 + ((f() * 7286425919675154353) + ((f() * -5435081209227447693) + f())))
f() CALL func (ARG1 + (ARG2 + -16))
f() CALL func (ARG1 + 8)
((f() * 7286425919675154353) + ((f() * -5435081209227447693) + f())) INT_ADD ((f() * -5435081209227447693) + f()) (f() * 7286425919675154353)
 RETURN 0
((f() * -5435081209227447693) - f()) INT_SUB (f() * -5435081209227447693) f()
f() CALL func (ARG1 + (ARG2 + -8))
f() CALL func 0 30
(f() * -4348849565147123417) INT_MULT f() -4348849565147123417
(f() * -5435081209227447693) INT_MULT f() -5435081209227447693
(f() * 7286425919675154353) INT_MULT f() 7286425919675154353
((f() * -5435081209227447693) + f()) INT_ADD (f() * -5435081209227447693) f()
(f() * -7286425919675154353) INT_MULT f() -7286425919675154353
 CALL func ((f() + f()) + (f() * -4348849565147123417)) ((ARG2 + ((f() * 7286425919675154353) + ((f() * -5435081209227447693) + f()))) + ARG3) (f() + f())
((f() + f()) + (f() * -4348849565147123417)) INT_ADD (f() * -4348849565147123417) (f() + f())
(ARG1 + (ARG2 + -8)) INT_ADD ARG1 (ARG2 + -8)
f() CALL func ARG1
(ARG2 + -8) INT_ADD ARG2 -8
f(ARG2) CALL func (ARG2 + f()) ARG2 (ARG2 + f())
(ARG2 + f()) INT_ADD f() ARG2
0 INT_XOR ARG3 f()
f() CALL func 0 f(ARG2) f(ARG2)
f() CALL func (ARG1 + (ARG2 + -8))
 RETURN 0 0
0 INT_XOR f() f()
f() CALL func ARG1 ARG2 ARG3 ARG2
f() CALL func ARG1 ARG2 ARG3 ARG2
f() CALL func ARG1 ARG2 ARG3 ARG2
f() CALL func ARG1 ARG2 ARG3 ARG2
f() CALL func ARG1 ARG2 ARG3 ARG2
0 INT_LESS ARG2 17
0 INT_LESS 16 ARG2
0 INT_LESS 32 ARG2
0 INT_LESS ARG2 33
0 INT_LESS ARG2 4
0 INT_LESS ARG2 9
0 INT_EQUAL ARG2 0
0 INT_LESS 8 ARG2
0 INT_XOR ARG3 -7286425919675154353
 RETURN 0 f()
 CBRANCH (ARG2 INT_LESS 4)
 CBRANCH (32 INT_LESS ARG2)
 CBRANCH (ARG2 INT_LESS 33)
 BRANCH VZERO
 CBRANCH (ARG2 INT_EQUAL 0)
 BRANCH VZERO
 CBRANCH (8 INT_LESS ARG2)
 BRANCH VZERO
 CBRANCH (ARG2 INT_LESS 9)
 CBRANCH (16 INT_LESS ARG2)
 BRANCH VZERO
 CBRANCH (ARG2 INT_LESS 17)
 BRANCH VZERO
f() CALL func ARG2
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 48) PTRADD ARG1 6 8
(ARG1 + 40) PTRADD ARG1 5 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 32) PTRADD ARG1 4 8
[ARG1] LOAD 433 ARG1
f() CALL func [(ARG1 + 32)] [(ARG1 + 48)] [(ARG1 + 48)]
f() CALL func [(ARG1 + 24)] [(ARG1 + 40)] [(ARG1 + 40)]
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
 CALL func ([(ARG1 + 16)] + ((f() * -5435081209227447693) + f())) ([ARG1] + ((f() * -5435081209227447693) + f())) ((f() * -5435081209227447693) + f())
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
([(ARG1 + 16)] + ((f() * -5435081209227447693) + f())) INT_ADD [(ARG1 + 16)] ((f() * -5435081209227447693) + f())
([ARG1] + ((f() * -5435081209227447693) + f())) INT_ADD ((f() * -5435081209227447693) + f()) [ARG1]
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
f() CALL func [(ARG1 + 8)]
(f() * -5435081209227447693) INT_MULT f() -5435081209227447693
(f() * -5435081209227447693) INT_MULT f() -5435081209227447693
((f() * -5435081209227447693) + f()) INT_ADD f() (f() * -5435081209227447693)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0
((f() * -5435081209227447693) + f()) INT_ADD f() (f() * -5435081209227447693)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 120) INT_ADD ARG1 120
(ARG1 + 64) INT_ADD ARG1 64
 CALL func ARG1 ARG3 ARG4 ARG3
f() CALL func ARG1 (ARG3 - ARG1) [(ARG1 + 120)] (ARG3 - ARG1)
(ARG3 - ARG1) INT_SUB ARG3 ARG1
 CALL func (ARG1 + 64) ARG1 (ARG1 + 64)
(ARG3 - ARG1) INT_SUB ARG3 ARG1
0 INT_EQUAL ARG2 0
(ARG2 + (ARG3 - ARG1)) INT_ADD ARG2 (ARG3 - ARG1)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CBRANCH (ARG2 INT_EQUAL 0)
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(ARG1 + 120)] LOAD 433 (ARG1 + 120)
(RSP + -24) PTRSUB RSP -24
(ARG1 + 120) CAST (ARG1 + 120)
 BRANCH VZERO
f() CALL func (ARG1 + 64) (ARG2 + (ARG3 - ARG1)) (ARG1 + 64)
 CALL func (RSP + -24) f() f()
 CALL func (RSP + -24) f() f()
(RSP + -24) PTRSUB RSP -24
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
ARG1 COPY ARG1
ARG2 COPY ARG2
f(ARG1 , ARG3) CALL func ARG1 (RSP + -24) ARG3 ARG4 f()
 CALL func ARG1 ARG2 f(ARG1 , ARG3) ARG4
f() CALL func ARG5
 RETURN 0
(RSP + -24) PTRSUB RSP -24
ARG2 COPY ARG2
f(ARG1 , ARG3) CALL func ARG1 (RSP + -24) ARG3 ARG4 f()
 CALL func ARG1 ARG2 f(ARG1 , ARG3) ARG4 ARG6
f() CALL func ARG5
ARG1 COPY ARG1
(RSP + -24) PTRSUB RSP -24
 RETURN 0
f(ARG1 , ARG4) LOAD 433 ARG1
f(ARG1 , ARG4) LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 (f(ARG1 , ARG4) + (8 - ARG4))
0 INT_LESSEQUAL ((8 - ARG4) + [ARG1]) ARG2
(ARG3 + ARG4) INT_ADD ARG3 ARG4
(8 - ARG4) INT_SUB 8 ARG4
 RETURN 0 0
[ARG1] CAST [ARG1]
((8 - ARG4) + [ARG1]) INT_ADD (8 - ARG4) [ARG1]
 CBRANCH (((8 - ARG4) + [ARG1]) INT_LESSEQUAL ARG2)
0 COPY 0
(ARG3 + ARG4) CAST (ARG3 + ARG4)
(f(ARG1 , ARG4) + (8 - ARG4)) INT_ADD f(ARG1 , ARG4) (8 - ARG4)
 CALL libcall_memcpy_thunk f(ARG1 , ARG4) (ARG3 + ARG4) (8 - ARG4)
f(ARG1 , ARG4) CAST f(ARG1 , ARG4)
(f(ARG1 , ARG4) + (8 - ARG4)) CAST (f(ARG1 , ARG4) + (8 - ARG4))
ARG3 COPY ARG3
ARG4 COPY ARG4
f() CALL func (RSP + -64) ARG4 (RSP + -80) 0
ARG5 COPY ARG5
ARG1 COPY ARG1
ARG2 COPY ARG2
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(RSP + -64) PTRSUB RSP -64
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -80) PTRSUB RSP -80
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL [ARG2] 0
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
ARG1 COPY ARG1
f(ARG1 , ARG3) COPY f(ARG1 , ARG3)
(f() + 40) INT_ADD f() 40
(RSP + -64) PTRSUB RSP -64
0 INT_NOTEQUAL 0 [(f() + 40)]
[ARG2] LOAD 433 ARG2
f() CALL func (RSP + -64) f(ARG4) (RSP + -80) f(ARG3 , ARG4)
(RSP + -80) PTRSUB RSP -80
(f() + 40) CAST (f() + 40)
(RSP + -80) PTRSUB RSP -80
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 CALL libcall_memcpy_thunk ARG3 (RSP + -80) (ARG4 - ARG3)
[(f() + 40)] LOAD 433 (f() + 40)
ARG3 CAST ARG3
f(ARG1) COPY f(ARG1)
(ARG4 - ARG3) INT_SUB ARG4 ARG3
 CBRANCH ([ARG2] INT_EQUAL 0)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 f(ARG1 , ARG3)
 RETURN 1
 CALL libcall_abort_thunk
 STORE 433 (ARG1 + 96) A_Stack[-0x78]:8
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 112) CAST (ARG1 + 112)
ARG1 CAST ARG1
(ARG1 + 64) CAST (ARG1 + 64)
ARG1 CAST ARG1
f(ARG2) LOAD 433 ARG2
 CALL func (RSP + -152) ARG1 [(ARG1 + 120)] ARG1
(ARG1 + 104) CAST (ARG1 + 104)
(ARG1 + 80) INT_ADD ARG1 80
 BRANCH VZERO
 STORE 433 (ARG1 + 88) A_Stack[-0x80]:8
ARG1 CAST ARG1
 CALL func (ARG1 + 64) ARG1 (ARG1 + 64)
(ARG1 + 112) INT_ADD ARG1 112
(ARG1 + 96) CAST (ARG1 + 96)
(ARG1 + 64) INT_ADD ARG1 64
ARG1 CAST ARG1
 STORE 433 ARG2 64
 STORE 433 (ARG1 + 80) A_Stack[-0x88]:8
(ARG1 + 72) INT_ADD ARG1 72
(ARG1 + 88) CAST (ARG1 + 88)
ARG1 CAST ARG1
 STORE 433 (ARG1 + 112) A_Stack[-0x68]:8
(ARG1 + 104) INT_ADD ARG1 104
(ARG1 + 120) INT_ADD ARG1 120
(ARG1 + 120) CAST (ARG1 + 120)
(RSP + -152) PTRSUB RSP -152
(ARG1 + 80) CAST (ARG1 + 80)
 STORE 433 (ARG1 + 72) A_Stack[-0x90]:8
ARG1 CAST ARG1
ARG1 CAST ARG1
(ARG1 + 64) INT_ADD ARG1 64
 STORE 433 (ARG1 + 104) A_Stack[-0x70]:8
(ARG1 + 96) INT_ADD ARG1 96
(f(ARG2) + 64) INT_ADD f(ARG2) 64
(ARG1 + 72) CAST (ARG1 + 72)
 STORE 433 ARG2 (f(ARG2) + 64)
ARG1 CAST ARG1
[(ARG1 + 120)] LOAD 433 (ARG1 + 120)
ARG1 CAST ARG1
 STORE 433 (ARG1 + 64) A_Stack[-0x98]:8
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
 CALL func ARG1 ARG2 f(ARG1 , ARG3) ARG4 ARG6 ARG7
ARG1 COPY ARG1
ARG2 COPY ARG2
f(ARG1 , ARG3) CALL func ARG1 (RSP + -24) ARG3 ARG4 f()
f() CALL func ARG5
(RSP + -24) PTRSUB RSP -24
 RETURN 0
 RETURN 0 f()
f() COPY f()
f() COPY f()
f() COPY f()
 CBRANCH (VZERO INT_EQUAL 0)
0 INT_EQUAL VZERO 0
f() COPY f()
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (VZERO INT_EQUAL 0)
VZERO COPY VZERO
0 INT_EQUAL VZERO 0
6960752 PTRSUB 0 6960752
 CALL libcall___cxa_guard_release_thunk 6960752
f() CALL libcall___cxa_guard_acquire_thunk 6960752
6960752 PTRSUB 0 6960752
0 INT_NOTEQUAL f() 0
-49064778989728563 COPY -49064778989728563
-49064778989728563 COPY -49064778989728563
(ARG1 + 120) INT_ADD ARG1 120
(ARG1 + 120) CAST (ARG1 + 120)
 RETURN 0
 STORE 433 (ARG1 + 120) f()
f() CALL func
 CALL func (RSP + -152) 0 (RSP + -152) (RSP + -88) ARG1 ARG2 ARG3 4285350
[40] LOAD 433 40
(RSP + -152) PTRSUB RSP -152
40 CAST 40
 CALL func (RSP + -152)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -88) PTRSUB RSP -88
4285350 COPY 4285350
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -152) PTRSUB RSP -152
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(RSP + -152) PTRSUB RSP -152
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 STORE 433 ARG1 (f(ARG1) + -1)
 STORE 433 ARG1 (f(ARG1) + 1)
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 (f(ARG1) + -1)
 STORE 433 ARG1 (f(ARG1) + 1)
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) LOAD 433 ARG1
f(ARG1) LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) LOAD 433 ARG1
 RETURN 0
 CBRANCH ([(ARG1 + 8)] INT_SLESS 1000000000)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_SLESS f(ARG1) 1
0 INT_SLESS [(ARG1 + 8)] 1000000000
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (f(ARG1) INT_SLESS 1)
 CBRANCH (4294967295 INT_SLESS [(ARG1 + 8)])
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 1000000000)
(f(ARG1) + -1) INT_ADD f(ARG1) -1
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + 1000000000) INT_ADD [(ARG1 + 8)] 1000000000
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (f(ARG1) INT_SLESS 0)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_SLESS f(ARG1) 0
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (999999999 INT_SLESS [(ARG1 + 8)])
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 3294967296)
(f(ARG1) + 1) INT_ADD f(ARG1) 1
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_SLESS f(ARG1) 3294967297
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + 3294967296) INT_ADD [(ARG1 + 8)] 3294967296
 CBRANCH (f(ARG1) INT_SLESS 3294967297)
0 INT_SLESS 999999999 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_SLESS 0 [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (0 INT_SLESS [(ARG1 + 8)])
(f(ARG1) + 1) INT_ADD f(ARG1) 1
([(ARG1 + 8)] + 3294967296) INT_ADD [(ARG1 + 8)] 3294967296
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 3294967296)
0 INT_SLESS 4294967295 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 1000000000)
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + 1000000000) INT_ADD [(ARG1 + 8)] 1000000000
(ARG1 + 8) CAST (ARG1 + 8)
(f(ARG1) + -1) INT_ADD f(ARG1) -1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (ARG1 + 8) ARG3
 CALL func ARG1
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
40 INT_ADD 0 40
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
 CALL func (RSP + -40) -9223372036854775808 0
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) COPY (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
0 COPY 0
f() CALL libcall_gettimeofday_thunk (RSP + -56) 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
(f() + 40) INT_ADD f() 40
0 COPY 0
0 INT_EQUAL f() 0
0 INT_NOTEQUAL 0 [(f() + 40)]
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
-946684800 INT_ADD 0 -946684800
f() CALL func
 CALL func (RSP + -40) -946684800 0 -946684800
0 SUBPIECE 0 0
(RSP + -40) PTRSUB RSP -40
0 INT_MULT 0 1000
 BRANCH VZERO
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
/dev/urandom COPY /dev/urandom
 CBRANCH (f() INT_NOTEQUAL 4294967295)
0 INT_NOTEQUAL f() 4294967295
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL libcall_open_thunk /dev/urandom 0
[(f() + 40)] LOAD 433 (f() + 40)
f() CALL libcall_read_thunk f() (RSP + -40) 4
(RSP + -72) PTRSUB RSP -72
(f() / 2147483647) SUBPIECE f() 8
(RSP + -68) PTRSUB RSP -68
 CBRANCH ((f() / 2147483647) INT_EQUAL 4)
f() CALL libcall_getpid_thunk
0 INT_EQUAL (f() / 2147483647) 4
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -40) PTRSUB RSP -40
f() CALL func (RSP + -48)
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
f() CALL func (RSP + -40)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall_close_thunk f()
(f() / 2147483647) SUBPIECE f() 8
(RSP + -48) PTRSUB RSP -48
(RSP + -40) PTRSUB RSP -40
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -56) (RSP + -72) (RSP + -68) (RSP + -72)
(RSP + -40) PTRSUB RSP -40
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -40)
(RSP + -56) PTRSUB RSP -56
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(A_Stack[-0x28]:8 & 4294967295) INT_AND A_Stack[-0x28]:8 4294967295
0 INT_EQUAL VZERO 0
f() COPY f()
f() COPY f()
 CALL libcall_rand_thunk
 RETURN 0
 CBRANCH (VZERO INT_EQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 0)
 CALL libcall___cxa_guard_release_thunk 6960728
f() CALL func
6960728 PTRSUB 0 6960728
0 COPY 0
 CALL libcall_srand_thunk f()
0 INT_NOTEQUAL f() 0
f() CALL libcall___cxa_guard_acquire_thunk
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 COPY ARG1
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1 [(ARG1 + 32)] [(ARG1 + 32)]
(ARG1 + 16) PTRADD ARG1 2 8
f() CALL func ARG1 [(ARG1 + 32)] [(ARG1 + 32)]
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 32) PTRADD ARG1 4 8
ARG1 COPY ARG1
(ARG1 + 32) PTRADD ARG1 4 8
ARG1 COPY ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 32) PTRADD ARG1 4 8
ARG1 COPY ARG1
ARG1 COPY ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 32) PTRADD ARG1 4 8
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 32) PTRADD ARG1 4 8
ARG1 COPY ARG1
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) CALL func ARG1 47 [(ARG1 + 32)]
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 16) PTRADD ARG1 2 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(ARG1 + 8)] INT_LESSEQUAL [(ARG1 + 32)])
0 INT_LESSEQUAL [(ARG1 + 8)] [(ARG1 + 32)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(ARG1 + 32)] CAST [(ARG1 + 32)]
[(ARG1 + 8)] CAST [(ARG1 + 8)]
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
 CBRANCH (f() INT_EQUAL 0)
0 INT_NOTEQUAL f() f()
0 COPY 0
f() CALL func (ARG1 + 16) 1
f() CALL func (ARG1 + 16) 0
 CBRANCH (f() INT_NOTEQUAL f())
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 CBRANCH ~(f())
0 INT_EQUAL [(ARG1 + 32)] [(ARG1 + 8)]
~(f()) BOOL_NEGATE f()
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
 BRANCH VZERO
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (ARG1 + 32) ([(ARG1 + 32)] + 1)
([(ARG1 + 32)] + 1) INT_ADD [(ARG1 + 32)] 1
 CBRANCH ([(ARG1 + 32)] INT_EQUAL [(ARG1 + 8)])
 CBRANCH (f() INT_NOTEQUAL 0)
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
f(ARG1 , RSP) CALL func f(RSP) (ARG1 + 8)
([f(ARG1 , RSP)] - [f(ARG1 , RSP)]) INT_SUB [f(ARG1 , RSP)] [f(ARG1 , RSP)]
[ARG1] LOAD 433 ARG1
(RSP + -176) PTRSUB RSP -176
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
f(ARG1 , RSP) CALL func (RSP + -176) (ARG1 + 8) (ARG1 + 8)
f(RSP) CALL func (RSP + -176) (RSP + -168) (RSP + -168)
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
([f(ARG1 , RSP)] - [f(ARG1 , RSP)]) COPY ([f(ARG1 , RSP)] - [f(ARG1 , RSP)])
f(ARG1 , RSP) CAST f(ARG1 , RSP)
 CBRANCH ~(f())
([f(ARG1 , RSP)] + [ARG1]) COPY ([f(ARG1 , RSP)] + [ARG1])
(RSP + -176) PTRSUB RSP -176
f(ARG1 , RSP) CAST f(ARG1 , RSP)
(RSP + -168) PTRSUB RSP -168
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
([f(ARG1 , RSP)] + [ARG1]) INT_ADD [f(ARG1 , RSP)] [ARG1]
(ARG1 + 8) PTRADD ARG1 1 8
~(f()) BOOL_NEGATE f()
 CBRANCH (([f(ARG1 , RSP)] + [ARG1]) INT_EQUAL 0)
f(ARG1) COPY f(ARG1)
0 INT_EQUAL ([f(ARG1 , RSP)] + [ARG1]) 0
 CBRANCH (f() INT_EQUAL 1)
 BRANCH VZERO
1 COPY 1
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
 BRANCH VZERO
0 COPY 0
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 STORE 433 (ARG1 + 24) [f(RSP)]
 RETURN 1
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
 STORE 433 (ARG1 + 16) ([f(ARG1 , RSP)] + [ARG1])
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
 CBRANCH (([f(ARG1 , RSP)] - [f(ARG1 , RSP)]) INT_NOTEQUAL 0)
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 STORE 433 (ARG1 + 24) ([f(ARG1 , RSP)] - [f(ARG1 , RSP)])
 RETURN 1
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
 STORE 433 (ARG1 + 16) ([f(ARG1 , RSP)] + [ARG1])
([f(ARG1 , RSP)] + [ARG1]) COPY ([f(ARG1 , RSP)] + [ARG1])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[ARG1] LOAD 433 ARG1
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(ARG1 + 8) PTRADD ARG1 1 8
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -184) (RSP + -168) (RSP + -168)
 CBRANCH ([(ARG1 + 32)] INT_EQUAL [(ARG1 + 8)])
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([f(ARG1 , RSP)] + [ARG1]) INT_ADD [f(ARG1 , RSP)] [ARG1]
f(ARG1 , RSP) CAST f(ARG1 , RSP)
f(RSP) CAST f(RSP)
1 COPY 1
 CBRANCH (([f(ARG1 , RSP)] + [ARG1]) INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 32)] [(ARG1 + 8)]
(RSP + -184) PTRSUB RSP -184
(RSP + -192) PTRSUB RSP -192
0 INT_EQUAL ([f(ARG1 , RSP)] + [ARG1]) 0
(RSP + -168) PTRSUB RSP -168
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
f(ARG1 , RSP) CALL func (RSP + -192) (ARG1 + 8) (ARG1 + 8)
[f(RSP)] COPY [f(RSP)]
([(ARG1 + 8)] - [f(ARG1 , RSP)]) INT_SUB [(ARG1 + 8)] [f(ARG1 , RSP)]
f() CALL func f()
f() INT_SEXT f()
f() CALL func (ARG1 + 16) 2
0 INT_EQUAL f() 1
f() INT_SEXT f()
f() CALL func f()
 CBRANCH ([(ARG1 + 32)] INT_EQUAL [(ARG1 + 8)])
0 INT_EQUAL [(ARG1 + 32)] [(ARG1 + 8)]
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
 STORE 433 (ARG1 + 16) A_Stack[-0x38]:8
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
4669449 PTRSUB 0 4669449
0 INT_NOTEQUAL f() 0
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
[(ARG1 + 24)] CAST [(ARG1 + 24)]
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 COPY 0
Position < Path.size() && "Tried to increment past end!" COPY Position < Path.size() && "Tried to increment past end!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Path.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Path.cpp
 CBRANCH ([(ARG1 + 24)] INT_LESS 3)
0 INT_LESS [(ARG1 + 24)] 3
f() INT_SEXT f()
f() CALL func f()
 BRANCH VZERO
 STORE 433 (ARG1 + 24) A_Stack[-0x30]:8
(RSP + -56) PTRSUB RSP -56
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
f() CALL func f()
0 INT_NOTEQUAL ([f(ARG1 , RSP)] - [f(ARG1 , RSP)]) 0
 STORE 433 (ARG1 + 32) ([(ARG1 + 32)] + -1)
([(ARG1 + 32)] + -1) INT_ADD [(ARG1 + 32)] -1
f() INT_SEXT f()
f() CALL func (ARG1 + 16) 0
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
0 INT_NOTEQUAL [f(RSP)] 0
 STORE 433 (ARG1 + 32) ([(ARG1 + 24)] + [(ARG1 + 32)])
([(ARG1 + 24)] + [(ARG1 + 32)]) INT_ADD [(ARG1 + 24)] [(ARG1 + 32)]
 RETURN 1
 STORE 433 (ARG1 + 16) f()
 CALL libcall___assert_fail_thunk Position < Path.size() && "Tried to increment past end!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Path.cpp 248 0
 CALL func (RSP + -56) 4669449
 BRANCH VZERO
 STORE 433 (ARG1 + 24) f()
 CALL func (RSP + -168) ARG1 ARG2 ARG1
 CALL func (RSP + -72) ARG1 ARG2 ARG1
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) CAST (f() + 40)
A_Stack[-0x98]:8 COPY A_Stack[-0x98]:8
A_Stack[-0x88]:8 COPY A_Stack[-0x88]:8
A_Stack[-0xa8]:8 COPY A_Stack[-0xa8]:8
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -168) PTRSUB RSP -168
A_Stack[-0x90]:8 COPY A_Stack[-0x90]:8
A_Stack[-0xa0]:8 COPY A_Stack[-0xa0]:8
(RSP + -168) PTRSUB RSP -168
f() CALL func (RSP + -168) (RSP + -72) (RSP + -72)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_NOTEQUAL f() f()
0 COPY 0
f() CALL func (RSP + -168)
f() CALL func f() 1
(RSP + -168) PTRSUB RSP -168
f() CALL func (RSP + -168)
(RSP + -168) PTRSUB RSP -168
 CBRANCH (f() INT_NOTEQUAL f())
f() CALL func f() 0
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
f() CALL func f()
f() INT_SEXT f()
f() CALL func f() 0
0 INT_EQUAL f() 0
f() CALL func (RSP + -120)
(RSP + -120) PTRSUB RSP -120
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH ([(f() + 8)] INT_LESS 3)
f() CALL func f() 0
0 INT_EQUAL f() 0
f() CALL func (RSP + -168)
(RSP + -168) PTRSUB RSP -168
f() CALL func f()
f() INT_SEXT f()
 CBRANCH f()
[(f() + 8)] LOAD 433 (f() + 8)
(RSP + -120) PTRSUB RSP -120
f() CALL func (RSP + -120)
f() CAST f()
 BRANCH VZERO
(f() + 8) PTRADD f() 1 8
 CBRANCH f()
 CBRANCH f()
[f()] LOAD 433 f()
 CBRANCH f()
(RSP + -120) PTRSUB RSP -120
(RSP + -72) PTRSUB RSP -72
f() CALL func f(RSP) (RSP + -72) f(RSP)
0 INT_EQUAL f() 0
f(RSP) CALL func (RSP + -120)
 CALL func (RSP + -184)
[(f() + 8)] LOAD 433 (f() + 8)
(RSP + -168) PTRSUB RSP -168
f() CALL func (RSP + -168)
f() CAST f()
(f() + 8) PTRADD f() 1 8
 BRANCH VZERO
(RSP + -184) PTRSUB RSP -184
[f()] LOAD 433 f()
 RETURN 0 (f() # f())
(f() # f()) PIECE f() f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
f() CALL func (RSP + -168)
(f() + 8) CAST (f() + 8)
(f() + 8) INT_ADD f() 8
[(f() + 8)] LOAD 433 (f() + 8)
0 INT_LESS [(f() + 8)] 3
(RSP + -168) PTRSUB RSP -168
f() CALL func f()
f() INT_SEXT f()
f() CALL func f() 0
0 INT_EQUAL f() 0
f() CALL func (RSP + -168)
(RSP + -168) PTRSUB RSP -168
1 COPY 1
 BRANCH VZERO
f() CALL func ARG1 (RSP + -184) (RSP + -184)
40 CAST 40
(f() / 2147483647) INT_RIGHT f() 64
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -184) PTRSUB RSP -184
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_AND 0 4294967040
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
0 INT_ZEXT 0
1 COPY 1
0 INT_EQUAL 0 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -184)
[40] LOAD 433 40
0 INT_OR 0 0
0 SUBPIECE 0 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -184)
1 INT_XOR 0 1
(RSP + -184) PTRSUB RSP -184
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 1
f() CALL func ARG1 (RSP + -184) (RSP + -184)
 CALL func (RSP + -216) (RSP + -232) (RSP + -232)
(RSP + -216) PTRSUB RSP -216
0 INT_NOTEQUAL f() 0
(RSP + -184) PTRSUB RSP -184
0 COPY 0
 CALL func (RSP + -184)
(RSP + -184) PTRSUB RSP -184
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -184) PTRSUB RSP -184
(RSP + -216) PTRSUB RSP -216
 CALL func (RSP + -184)
(RSP + -232) PTRSUB RSP -232
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH ([(FS_OFFSET + 40)] INT_EQUAL [40])
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
40 INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -216)
0 INT_EQUAL [(FS_OFFSET + 40)] [40]
(f() / 2147483647) SUBPIECE f() 8
40 CAST 40
(f() / 2147483647) SUBPIECE f() 0
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
 RETURN 0 0
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL ARG1 ARG2
(ARG1 & -256) INT_AND ARG1 -256
(ARG1 & -256) INT_OR (ARG1 & -256) 0
 RETURN 0 (ARG1 & -256)
0 INT_ZEXT 0
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG2
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
f() CALL func f() f()
 CBRANCH (f() INT_EQUAL f())
0 COPY 0
 RETURN 0 1
1 COPY 1
0 INT_EQUAL f() f()
 RETURN 0 0
ARG1 CAST ARG1
f() CALL func ARG1
 STORE 433 ARG1 ARG2
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 17) CAST (ARG1 + 17)
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 STORE 433 (ARG1 + 16) 6
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG1 + 17) 1
(ARG1 + 17) INT_ADD ARG1 17
 RETURN 0
 CALL libcall___assert_fail_thunk isValid() && "Invalid twine!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h 295 llvm::Twine::Twine(const llvm::SmallVectorImpl<char>&)
llvm::Twine::Twine(const llvm::SmallVectorImpl<char>&) COPY llvm::Twine::Twine(const llvm::SmallVectorImpl<char>&)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h
isValid() && "Invalid twine!" COPY isValid() && "Invalid twine!"
 RETURN 1
f() CALL libcall_mkdir_thunk f() ARG3
0 INT_NOTEQUAL ARG2 1
f() CALL func ARG1
f() CAST f()
(f() / 2147483647) SUBPIECE f() 8
(RSP + -200) PTRSUB RSP -200
(RSP + -232) PTRSUB RSP -232
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -232)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -200)
 CBRANCH (f() INT_EQUAL 4294967295)
(f() + 40) CAST (f() + 40)
 CALL func (RSP + -200)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_EQUAL f() 4294967295
(f() / 2147483647) SUBPIECE f() 8
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 0
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (ARG2 INT_NOTEQUAL 1)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL libcall_generic_category_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -216) PTRSUB RSP -216
(f() / 2147483647) SUBPIECE f() 0
(RSP + -216) PTRSUB RSP -216
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -216) [f()] f() [f()]
 CALL func (RSP + -216)
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
 CBRANCH ([f()] INT_NOTEQUAL 17)
0 INT_NOTEQUAL [f()] 17
(f() / 2147483647) SUBPIECE f() 0
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
(f() # f()) INT_AND (f() # f()) -1
(f() # f()) PIECE f() f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (f() # f())
(f() / 2147483647) SUBPIECE f() 0
0 INT_NOTEQUAL ARG6 0
0 INT_NOTEQUAL ARG6 1
0 INT_EQUAL ARG6 2
0 INT_NOTEQUAL ARG4 0
 CALL func ARG1 (RSP + -360) (RSP + -360)
f() CALL func (RSP + -392) ARG2 f()
(ARG3 + 8) PTRADD ARG3 1 8
[ARG3] LOAD 433 ARG3
 CALL func ARG3 (RSP + -360) (RSP + -360)
[ARG3] LOAD 433 ARG3
[ARG3] LOAD 433 ARG3
 CALL func ARG3 (RSP + -392) (RSP + -392)
[ARG3] LOAD 433 ARG3
[ARG3] LOAD 433 ARG3
 CALL func ARG3
0 COPY 0
(RSP + -360) PTRSUB RSP -360
(RSP + -360) PTRSUB RSP -360
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL ((f() / 2147483647) - (f() / 2147483647)))
0 INT_NOTEQUAL f() ((f() / 2147483647) - (f() / 2147483647))
((f() / 2147483647) - (f() / 2147483647)) INT_SUB (f() / 2147483647) (f() / 2147483647)
(RSP + -360) PTRSUB RSP -360
 CALL func (RSP + -360)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -392) PTRSUB RSP -392
 CBRANCH (ARG4 INT_NOTEQUAL 0)
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
 CALL func (RSP + -360)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
0 COPY 0
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(f() # f()) PIECE f() f()
(RSP + -360) PTRSUB RSP -360
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() [(f() + 40)]
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -424) PTRSUB RSP -424
(RSP + -392) PTRSUB RSP -392
 CALL func (RSP + -392)
 CBRANCH (f() INT_EQUAL 0)
(f() # f()) PIECE f() f()
0 INT_EQUAL f() 0
 BRANCH VZERO
f() COPY f()
f() CALL func (RSP + -424)
 CBRANCH (f() INT_NOTEQUAL 1)
(RSP + -200) PTRSUB RSP -200
(RSP + -392) PTRSUB RSP -392
4669146 PTRSUB 0 4669146
(RSP + -488) PTRSUB RSP -488
(RSP + -456) PTRSUB RSP -456
 CALL func 1 (RSP + -200)
(RSP + -456) PTRSUB RSP -456
(RSP + -200) PTRSUB RSP -200
4669146 PTRSUB 0 4669146
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -424) 4669146
 CALL func (RSP + -488) (RSP + -360) (RSP + -360)
(RSP + -424) PTRSUB RSP -424
 CALL func (RSP + -200) (RSP + -488) (RSP + -456) (RSP + -424) (RSP + -392)
(RSP + -392) PTRSUB RSP -392
 CALL func (RSP + -200)
(RSP + -360) PTRSUB RSP -360
(RSP + -200) PTRSUB RSP -200
(RSP + -424) PTRSUB RSP -424
4669146 PTRSUB 0 4669146
 CALL func (RSP + -200)
(RSP + -200) PTRSUB RSP -200
(RSP + -488) PTRSUB RSP -488
 CALL func (RSP + -392) 4669146
 CALL func (RSP + -360) (RSP + -200) (RSP + -200)
 CALL func (RSP + -456) 4669146
(RSP + -360) PTRSUB RSP -360
 CBRANCH (f() INT_EQUAL 0)
(RSP + -392) PTRSUB RSP -392
 CALL func (RSP + -392)
f() CALL func (RSP + -424) (RSP + -392) (RSP + -392)
(RSP + -392) PTRSUB RSP -392
 CALL func (RSP + -392) 17
 BRANCH VZERO
(f() # f()) PIECE f() f()
(RSP + -392) PTRSUB RSP -392
f() COPY f()
(RSP + -424) PTRSUB RSP -424
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (ARG6 INT_EQUAL 2)
(RSP + -392) PTRSUB RSP -392
0 INT_NOTEQUAL f() 0
 CALL func (RSP + -392) [ARG3] [ARG3]
f() CALL func (RSP + -392) 0
(RSP + -392) PTRSUB RSP -392
f() CALL func (RSP + -424) (RSP + -392) (RSP + -392)
 CALL func (RSP + -392) 2
0 COPY 0
(RSP + -392) PTRSUB RSP -392
 CBRANCH (ARG6 INT_NOTEQUAL 0)
(RSP + -424) PTRSUB RSP -424
(RSP + -392) PTRSUB RSP -392
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(f() # f()) PIECE f() f()
(RSP + -392) PTRSUB RSP -392
 CALL func (RSP + -392)
f() CALL func (RSP + -424) (RSP + -392) (RSP + -392)
 CALL func (RSP + -392) 17
(RSP + -392) PTRSUB RSP -392
f() COPY f()
 BRANCH VZERO
(RSP + -392) PTRSUB RSP -392
(RSP + -424) PTRSUB RSP -424
 CBRANCH ([(f() + f())] INT_EQUAL 37)
0 INT_LESSEQUAL ([(ARG3 + 8)] - [ARG3]) f()
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
([(ARG3 + 8)] - [ARG3]) CAST ([(ARG3 + 8)] - [ARG3])
f() INT_ZEXT f()
 CBRANCH (([(ARG3 + 8)] - [ARG3]) INT_LESSEQUAL f())
([(ARG3 + 8)] - [ARG3]) INT_SUB [(ARG3 + 8)] [ARG3]
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
 CBRANCH ((f() - f()) INT_LESSEQUAL f())
(f() - f()) INT_SUB f() f()
0 INT_LESSEQUAL (f() - f()) f()
(f() - f()) CAST (f() - f())
 CBRANCH (ARG6 INT_NOTEQUAL 1)
f() INT_ZEXT f()
0 COPY 0
(f() # f()) PIECE f() f()
 BRANCH VZERO
[(f() + f())] LOAD 433 (f() + f())
(f() + f()) CAST (f() + f())
idx < size() COPY idx < size()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
 RETURN 1
(f() + f()) INT_ADD f() f()
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
0 INT_EQUAL [(f() + f())] 37
0 COPY 0
 RETURN 0 (f() # f())
(f() # f()) PIECE f() f()
(f() # f()) INT_AND (f() # f()) -1
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
f() CALL func 448 56
 CALL func (RSP + -392) [ARG3] [ARG3]
f() CALL func (RSP + -392) 0 f()
(RSP + -392) PTRSUB RSP -392
0 INT_EQUAL f() 0
(RSP + -424) PTRSUB RSP -424
Invalid Type COPY Invalid Type
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Path.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Path.cpp
0 COPY 0
(RSP + -392) PTRSUB RSP -392
f() CALL func (RSP + -424)
 CALL func Invalid Type /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Path.cpp 225
0 INT_EQUAL f() 0
0 COPY 0
(RSP + -424) PTRSUB RSP -424
(RSP + -392) PTRSUB RSP -392
(RSP + -392) PTRSUB RSP -392
f() CALL func (RSP + -424)
f() CALL func 8 1
 CALL func (RSP + -392) [ARG3] [ARG3]
0 COPY 0
([ARG3] + f()) CAST ([ARG3] + f())
(f() & 15) INT_ZEXT (f() & 15)
idx < size() COPY idx < size()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
0123456789abcdef COPY 0123456789abcdef
 RETURN 1
 STORE 433 ([ARG3] + f()) [(0123456789abcdef + (f() & 15))]
([ARG3] + f()) INT_ADD [ARG3] f()
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
f() CALL func
(f() & 15) INT_AND f() 15
[(0123456789abcdef + (f() & 15))] LOAD 433 (0123456789abcdef + (f() & 15))
(0123456789abcdef + (f() & 15)) PTRADD 0123456789abcdef (f() & 15) 1
(RSP + -392) PTRSUB RSP -392
f() CALL func (RSP + -392)
(RSP + -392) PTRSUB RSP -392
0 INT_NOTEQUAL f() 1
 CALL func (RSP + -392) (RSP + -360) (RSP + -360)
(RSP + -360) PTRSUB RSP -360
 BRANCH VZERO
(f() # f()) PIECE f() f()
0 COPY 0
(ARG1 + 32) INT_ADD ARG1 32
(ARG2 + 32) INT_ADD ARG2 32
([(ARG1 + 32)] - [(ARG2 + 32)]) COPY ([(ARG1 + 32)] - [(ARG2 + 32)])
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
([(ARG1 + 32)] - [(ARG2 + 32)]) INT_SUB [(ARG1 + 32)] [(ARG2 + 32)]
(ARG1 + 32) CAST (ARG1 + 32)
(ARG2 + 32) CAST (ARG2 + 32)
 RETURN 0 ([(ARG1 + 32)] - [(ARG2 + 32)])
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 COPY ARG1
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 24) PTRADD ARG1 3 8
[ARG1] LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 16) PTRADD ARG1 2 8
ARG1 COPY ARG1
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1 ([(ARG1 + 32)] + -1) ([(ARG1 + 32)] + -1)
f() CALL func ARG1 (f(ARG1) + -1) (f(ARG1) + -1)
ARG1 COPY ARG1
ARG1 COPY ARG1
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0 ARG1
(FS_OFFSET + 40) INT_ADD 0 40
~(f()) BOOL_NEGATE f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 32)] INT_EQUAL [(ARG1 + 8)])
0 INT_EQUAL [(ARG1 + 32)] [(ARG1 + 8)]
f(RSP) CALL func [ARG1] [(ARG1 + 8)] [ARG1]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ~(f())
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
([f(ARG1 , RSP)] + [ARG1]) INT_ADD [f(ARG1 , RSP)] [ARG1]
(RSP + -176) PTRSUB RSP -176
([f(ARG1 , RSP)] - [f(ARG1 , RSP)]) COPY ([f(ARG1 , RSP)] - [f(ARG1 , RSP)])
f(ARG1 , RSP) CAST f(ARG1 , RSP)
([f(ARG1 , RSP)] + [ARG1]) COPY ([f(ARG1 , RSP)] + [ARG1])
 CBRANCH (([f(ARG1 , RSP)] + [ARG1]) INT_EQUAL 0)
(RSP + -152) PTRSUB RSP -152
f() CALL func ([f(ARG1 , RSP)] + [ARG1]) [f(RSP)] [f(RSP)] ([f(ARG1 , RSP)] + [ARG1])
0 INT_EQUAL ([f(ARG1 , RSP)] + [ARG1]) 0
f(ARG1 , RSP) CAST f(ARG1 , RSP)
(ARG1 + 8) PTRADD ARG1 1 8
0 COPY 0
f(ARG1) COPY f(ARG1)
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
f() COPY f()
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
f(ARG1 , RSP) CALL func f(RSP) (ARG1 + 8)
([f(ARG1 , RSP)] - [f(ARG1 , RSP)]) INT_SUB [f(ARG1 , RSP)] [f(ARG1 , RSP)]
[ARG1] LOAD 433 ARG1
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
f(ARG1 , RSP) CALL func (RSP + -176) (ARG1 + 8) (ARG1 + 8)
f(RSP) CALL func (RSP + -176) (RSP + -152) (RSP + -152)
(RSP + -176) PTRSUB RSP -176
 RETURN 1
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
f(ARG1 , RSP) CALL func (RSP + -168) (ARG1 + 8) (ARG1 + 8)
f(RSP) CAST f(RSP)
f(ARG1 , RSP) CAST f(ARG1 , RSP)
4669449 PTRSUB 0 4669449
 CBRANCH (f(ARG1) INT_EQUAL 0)
([(ARG1 + 8)] - [f(ARG1 , RSP)]) INT_SUB [(ARG1 + 8)] [f(ARG1 , RSP)]
0 COPY 0
(RSP + -56) PTRSUB RSP -56
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
0 INT_EQUAL f(ARG1) 0
(ARG1 + 8) PTRADD ARG1 1 8
[f(RSP)] COPY [f(RSP)]
[ARG1] LOAD 433 ARG1
([f(ARG1 , RSP)] + [ARG1]) COPY ([f(ARG1 , RSP)] + [ARG1])
 CALL func (RSP + -56) 4669449
~(f()) BOOL_NEGATE f()
[(f() + 40)] LOAD 433 (f() + 40)
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -160) (RSP + -152) (RSP + -152)
 BRANCH VZERO
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() + 40) CAST (f() + 40)
(RSP + -160) PTRSUB RSP -160
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(RSP + -168) PTRSUB RSP -168
f(ARG1) COPY f(ARG1)
([f(ARG1 , RSP)] + [ARG1]) INT_ADD [f(ARG1 , RSP)] [ARG1]
 STORE 433 (ARG1 + 32) ([(ARG1 + 32)] + -1)
 STORE 433 (ARG1 + 24) f()
([(ARG1 + 32)] + -1) INT_ADD [(ARG1 + 32)] -1
 CBRANCH ~(f())
(RSP + -152) PTRSUB RSP -152
 CBRANCH (([f(ARG1 , RSP)] + [ARG1]) INT_EQUAL 0)
 STORE 433 (ARG1 + 16) f()
0 INT_EQUAL ([f(ARG1 , RSP)] + [ARG1]) 0
(f(ARG1) + -1) INT_ADD f(ARG1) -1
 BRANCH VZERO
0 INT_EQUAL (f(ARG1) + -1) f(RSP)
(f(ARG1) + -1) INT_ADD f(ARG1) -1
 CBRANCH ((f(ARG1) + -1) INT_EQUAL f(RSP))
 CBRANCH (([f(ARG1 , RSP)] - [f(ARG1 , RSP)]) INT_NOTEQUAL 0)
 RETURN 1
 STORE 433 (ARG1 + 24) ([f(ARG1 , RSP)] - [f(ARG1 , RSP)])
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
0 COPY 0
 STORE 433 (ARG1 + 16) ([f(ARG1 , RSP)] + [ARG1])
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
 STORE 433 (ARG1 + 32) f()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
(f(ARG1) + -1) INT_ADD f(ARG1) -1
f() INT_SEXT f()
f() CALL func f()
0 INT_EQUAL f() 0
 CBRANCH ((f(RSP) + 1) INT_LESS [(ARG1 + 8)])
0 INT_LESS (f(RSP) + 1) [(ARG1 + 8)]
(f(RSP) + 1) INT_ADD f(RSP) 1
([(ARG1 + 32)] + -1) INT_ADD [(ARG1 + 32)] -1
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
0 INT_NOTEQUAL [f(RSP)] 0
[(ARG1 + 8)] CAST [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_NOTEQUAL ([f(ARG1 , RSP)] - [f(ARG1 , RSP)]) 0
f() INT_SEXT f()
f() CALL func f()
0 INT_EQUAL f() 0
 CALL func ARG1
 CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
 RETURN 0
 CALL func (ARG1 + 16)
(ARG1 + 24) PTRADD ARG1 3 8
 STORE 433 ARG1 [f(RSP)]
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 32) PTRADD ARG1 4 8
ARG1 COPY ARG1
(ARG1 + 16) PTRADD ARG1 2 8
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG3 COPY ARG3
(FS_OFFSET + 40) INT_ADD 0 40
f(RSP) CAST f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
40 CAST 40
 STORE 433 (ARG1 + 8) [(f(RSP) + 8)]
[40] LOAD 433 40
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
[f(RSP)] LOAD 433 f(RSP)
 STORE 433 (ARG1 + 32) [(f(RSP) + 32)]
(f(RSP) + 32) PTRADD f(RSP) 4 8
 CALL func (RSP + -56)
[(f(RSP) + 32)] LOAD 433 (f(RSP) + 32)
(f(RSP) + 24) PTRADD f(RSP) 3 8
f(RSP) CALL func (RSP + -56)
 STORE 433 (ARG1 + 24) [(f(RSP) + 24)]
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[(f(RSP) + 24)] LOAD 433 (f(RSP) + 24)
 STORE 433 (ARG1 + 16) [(f(RSP) + 16)]
(RSP + -56) PTRSUB RSP -56
40 INT_ADD 0 40
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
 CALL func ARG1
([f(RSP)] + ARG2) INT_ADD [f(RSP)] ARG2
 STORE 433 ARG1 ARG2
ARG3 COPY ARG3
f(RSP) CAST f(RSP)
0 COPY 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f(RSP) CAST f(RSP)
(RSP + -80) PTRSUB RSP -80
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -72) (RSP + -64) (RSP + -64)
0 COPY 0
(RSP + -112) PTRSUB RSP -112
(FS_OFFSET + 40) INT_ADD 0 40
 STORE 433 (ARG1 + 8) ARG3
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -80) (RSP + -112) (RSP + -112)
[f(RSP)] COPY [f(RSP)]
([f(RSP)] + ARG2) COPY ([f(RSP)] + ARG2)
(RSP + -72) PTRSUB RSP -72
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -64) PTRSUB RSP -64
(ARG1 + 8) PTRADD ARG1 1 8
(ARG3 - [f(RSP)]) INT_SUB ARG3 [f(RSP)]
 CBRANCH (([f(RSP)] + ARG2) INT_EQUAL 0)
0 INT_EQUAL ([f(RSP)] + ARG2) 0
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
 STORE 433 (ARG1 + 16) ([f(RSP)] + ARG2)
ARG1 COPY ARG1
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(ARG1 + 32) PTRADD ARG1 4 8
 STORE 433 (ARG1 + 32) 0
40 CAST 40
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
[40] LOAD 433 40
(ARG1 + 24) PTRADD ARG1 3 8
 RETURN 1
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 (ARG1 + 24) [f(RSP)]
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
0 INT_NOTEQUAL [f(RSP)] 0
(ARG1 + 24) INT_ADD ARG1 24
f() CALL func ARG1
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG2
(ARG2 + 24) INT_ADD ARG2 24
(ARG2 + 16) INT_ADD ARG2 16
(ARG2 + 32) INT_ADD ARG2 32
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL f() f()
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
 CBRANCH (f() INT_EQUAL f())
 CBRANCH f()
 CBRANCH ([(ARG1 + 32)] INT_EQUAL [(ARG2 + 32)])
(ARG2 + 32) CAST (ARG2 + 32)
0 INT_EQUAL [(ARG1 + 32)] [(ARG2 + 32)]
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
0 COPY 0
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
(ARG1 + 32) CAST (ARG1 + 32)
1 COPY 1
 BRANCH VZERO
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 RETURN 1
 CBRANCH ([(ARG1 + 24)] INT_EQUAL [(ARG2 + 24)])
0 INT_EQUAL [(ARG2 + 24)] 0
0 COPY 0
 CBRANCH ([(ARG2 + 24)] INT_EQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 BRANCH VZERO
0 COPY 0
f() CALL libcall_memcmp_thunk [(ARG1 + 16)] [(ARG2 + 16)] [(ARG2 + 24)]
 BRANCH VZERO
1 COPY 1
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
(ARG2 + 24) CAST (ARG2 + 24)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
0 INT_EQUAL [(ARG1 + 24)] [(ARG2 + 24)]
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 24) CAST (ARG1 + 24)
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG2 + 16) CAST (ARG2 + 16)
 CALL func (RSP + -168) ARG1 ARG2 ARG1
 CALL func (RSP + -72) ARG1 ARG2 ARG1
([f(RSP)] + ARG1) INT_ADD [f(RSP)] ARG1
ARG2 COPY ARG2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
A_Stack[-0x98]:8 COPY A_Stack[-0x98]:8
A_Stack[-0x88]:8 COPY A_Stack[-0x88]:8
A_Stack[-0xa8]:8 COPY A_Stack[-0xa8]:8
(RSP + -168) PTRSUB RSP -168
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -168) PTRSUB RSP -168
(RSP + -72) PTRSUB RSP -72
A_Stack[-0x90]:8 COPY A_Stack[-0x90]:8
(RSP + -72) PTRSUB RSP -72
A_Stack[-0xa0]:8 COPY A_Stack[-0xa0]:8
f() CALL func (RSP + -168) (RSP + -72) (RSP + -72)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
0 COPY 0
(f() + 40) CAST (f() + 40)
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 RETURN 1
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 CBRANCH ([(f() + 8)] INT_LESS 3)
f() CALL func f()
(RSP + -168) PTRSUB RSP -168
f() INT_SEXT f()
 CBRANCH (f() INT_EQUAL 0)
f() CALL func f() 0
0 INT_EQUAL f() 0
0 COPY 0
f() CALL func (RSP + -168)
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -72) PTRSUB RSP -72
(RSP + -168) PTRSUB RSP -168
f() CALL func f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH f()
0 INT_EQUAL f() 0
f() CALL func f()
f() INT_SEXT f()
(RSP + -120) PTRSUB RSP -120
f() CALL func (RSP + -168)
f(RSP) CALL func (RSP + -120)
f() CALL func f(RSP) (RSP + -72) f(RSP)
 BRANCH VZERO
f() COPY f()
f() COPY f()
f() COPY f()
f() CAST f()
[f()] LOAD 433 f()
(f() + 8) PTRADD f() 1 8
f() COPY f()
f() COPY f()
 CALL func (RSP + -184)
[(f() + 8)] LOAD 433 (f() + 8)
f() CALL func (RSP + -168)
f() COPY f()
f() COPY f()
f() COPY f()
f() COPY f()
(RSP + -168) PTRSUB RSP -168
[(f() + 8)] COPY [(f() + 8)]
f() COPY f()
(RSP + -184) PTRSUB RSP -184
[f()] COPY [f()]
0 COPY 0
(f() + 8) CAST (f() + 8)
0 INT_NOTEQUAL f() 0
(f() + 8) INT_ADD f() 8
f() CALL func (RSP + -168)
(RSP + -168) PTRSUB RSP -168
0 INT_LESS [(f() + 8)] 3
[(f() + 8)] LOAD 433 (f() + 8)
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL f())
 BRANCH VZERO
1 COPY 1
 RETURN 1
(f(RSP) # f(ARG1 , RSP)) PIECE f(RSP) f(ARG1 , RSP)
 RETURN 0 (f(RSP) # f(ARG1 , RSP))
 CALL libcall___stack_chk_fail_thunk
(RSP + -168) PTRSUB RSP -168
(RSP + -168) PTRSUB RSP -168
f() CALL func f() 1
f() CALL func (RSP + -168)
f() CALL func f() 0
0 INT_NOTEQUAL f() f()
f() CALL func (RSP + -168)
f() INT_SEXT f()
f() CALL func f()
f() CALL func f() 0
0 INT_EQUAL f() 0
f() CALL func (RSP + -120)
(RSP + -120) PTRSUB RSP -120
[(f() + 8)] LOAD 433 (f() + 8)
0 COPY 0
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -248) (RSP + -272) (RSP + -272)
(f() + 8) INT_ADD f() 8
f() COPY f()
(f() + 8) CAST (f() + 8)
(f(ARG2) - [f(RSP)]) INT_SUB f(ARG2) [f(RSP)]
 BRANCH VZERO
f() COPY f()
f() CAST f()
(RSP + -248) PTRSUB RSP -248
(RSP + -240) PTRSUB RSP -240
(RSP + -120) PTRSUB RSP -120
f() COPY f()
[f()] LOAD 433 f()
[(f() + 8)] LOAD 433 (f() + 8)
[f(RSP)] COPY [f(RSP)]
(RSP + -272) PTRSUB RSP -272
f() CALL func (RSP + -168)
f(RSP) CAST f(RSP)
(RSP + -232) PTRSUB RSP -232
f() COPY f()
[(f() + 8)] LOAD 433 (f() + 8)
f(RSP) CAST f(RSP)
f() CALL func (RSP + -168)
([f(RSP)] + ARG1) COPY ([f(RSP)] + ARG1)
[(f() + 8)] COPY [(f() + 8)]
[f()] COPY [f()]
[f(RSP)] COPY [f(RSP)]
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -240) (RSP + -232) (RSP + -232)
([f(RSP)] + ARG1) COPY ([f(RSP)] + ARG1)
(f() + 8) CAST (f() + 8)
 CBRANCH (([f(RSP)] + ARG1) INT_EQUAL 0)
f() CALL func (RSP + -120)
(f() + 8) PTRADD f() 1 8
(f() + 8) INT_ADD f() 8
0 INT_EQUAL ([f(RSP)] + ARG1) 0
(RSP + -168) PTRSUB RSP -168
([(f() + 8)] + [(f() + 8)]) INT_ADD [(f() + 8)] [(f() + 8)]
(RSP + -168) PTRSUB RSP -168
0 INT_NOTEQUAL [f(RSP)] 0
([f(RSP)] + ARG1) INT_ADD [f(RSP)] ARG1
f() CALL func ARG1 ARG2 ARG1
ARG2 COPY ARG2
f(RSP) CAST f(RSP)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
-1 COPY -1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -88) (RSP + -80) (RSP + -80)
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
f(RSP) CAST f(RSP)
(RSP + -96) PTRSUB RSP -96
(RSP + -112) PTRSUB RSP -112
[f(RSP)] LOAD 433 f(RSP)
(f() / 2147483647) INT_RIGHT f() 64
f(RSP) CALL func (RSP + -96) (RSP + -112) (RSP + -112)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[f(RSP)] COPY [f(RSP)]
([f(RSP)] + ARG1) COPY ([f(RSP)] + ARG1)
(RSP + -88) PTRSUB RSP -88
(f() / 2147483647) INT_RIGHT f() 64
(ARG2 - [f(RSP)]) INT_SUB ARG2 [f(RSP)]
(RSP + -80) PTRSUB RSP -80
 CBRANCH (([f(RSP)] + ARG1) INT_EQUAL 0)
0 INT_EQUAL ([f(RSP)] + ARG1) 0
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
[40] LOAD 433 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
 RETURN 1
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
([f(RSP)] # ([f(RSP)] + ARG1)) PIECE [f(RSP)] ([f(RSP)] + ARG1)
 RETURN 1
 RETURN 0 ([f(RSP)] # ([f(RSP)] + ARG1))
([f(RSP)] # ([f(RSP)] + ARG1)) COPY ([f(RSP)] # ([f(RSP)] + ARG1))
 CALL libcall___stack_chk_fail_thunk
0 INT_NOTEQUAL [f(RSP)] 0
 CALL func ARG1 (RSP + -136) (RSP + -104) (RSP + -72) (RSP + -40)
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
(RSP + 8) PTRSUB RSP 8
 CBRANCH (f() INT_EQUAL 0)
(RSP + 48) PTRSUB RSP 48
0 INT_EQUAL f() 0
 CBRANCH (0 INT_NOTEQUAL [40])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [40]
f() CALL func (RSP + 8) (RSP + 48)
(RSP + -72) PTRSUB RSP -72
4669146 PTRSUB 0 4669146
(RSP + -136) PTRSUB RSP -136
f() CALL func (RSP + 8)
 CALL func (RSP + -40) 4669146
(RSP + -40) PTRSUB RSP -40
(RSP + 8) PTRSUB RSP 8
(RSP + 8) PTRSUB RSP 8
 CALL func (RSP + -104) 4669146
4669146 PTRSUB 0 4669146
(RSP + -104) PTRSUB RSP -104
(RSP + -136) PTRSUB RSP -136
(RSP + -104) PTRSUB RSP -104
 BRANCH VZERO
 CALL func (RSP + 8)
 CALL func (RSP + -136) f() f()
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -72) 4669146
4669146 PTRSUB 0 4669146
(RSP + -40) PTRSUB RSP -40
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
f() CALL func ARG1 ARG2 ARG1
([f(RSP)] + ARG1) INT_ADD [f(RSP)] ARG1
ARG2 COPY ARG2
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL -1)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL f() -1
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(f(RSP) # f(ARG1 , RSP)) PIECE f(RSP) f(ARG1 , RSP)
 RETURN 1
 RETURN 0 (f(RSP) # f(ARG1 , RSP))
 CALL libcall___stack_chk_fail_thunk
f(RSP) CAST f(RSP)
f() COPY f()
(f() + 40) INT_ADD f() 40
(RSP + -40) PTRSUB RSP -40
0 INT_EQUAL 0 [(f() + 40)]
(ARG2 - [f(RSP)]) INT_SUB ARG2 [f(RSP)]
 CBRANCH (([f(RSP)] + ARG1) INT_EQUAL 0)
 BRANCH VZERO
0 INT_EQUAL ([f(RSP)] + ARG1) 0
f(RSP) CAST f(RSP)
(RSP + -88) PTRSUB RSP -88
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -96) PTRSUB RSP -96
 CALL func (RSP + -40)
[f(RSP)] COPY [f(RSP)]
(RSP + -80) PTRSUB RSP -80
([f(RSP)] + ARG1) COPY ([f(RSP)] + ARG1)
(RSP + -72) PTRSUB RSP -72
(f() + 40) CAST (f() + 40)
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -80) (RSP + -72) (RSP + -72)
0 COPY 0
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -88) (RSP + -96) (RSP + -96)
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
 RETURN 1
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
0 INT_NOTEQUAL [f(RSP)] 0
[ARG1] LOAD 433 ARG1
 CALL func ARG1 ([ARG1] + ARG2) ([ARG1] + ARG2)
f() CALL func ARG1
([ARG1] + ARG2) INT_ADD [ARG1] ARG2
0 INT_LESS f() ARG2
 CBRANCH (f() INT_LESS ARG2)
N <= this->capacity() COPY N <= this->capacity()
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
 RETURN 0
 RETURN 1
 CALL libcall___assert_fail_thunk N <= this->capacity() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 693 0
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 f() f()
[ARG1] LOAD 433 ARG1
0 INT_EQUAL [ARG1] 0
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([ARG1] INT_EQUAL 0)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL -1)
 CBRANCH (([(ARG1 + 8)] - [ARG1]) INT_NOTEQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
 RETURN 1
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
f() CALL func [ARG1] ([(ARG1 + 8)] - [ARG1]) [ARG1]
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
0 INT_NOTEQUAL f() -1
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0
0 INT_NOTEQUAL ([(ARG1 + 8)] - [ARG1]) 0
f() CALL func ARG2 (RSP + -88) (RSP + -88)
 CALL func ARG1 f() f()
 CALL func ARG1 f() f() f()
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 COPY ARG1
ARG1 COPY ARG1
ARG1 COPY ARG1
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -177) (RSP + -177)
[ARG1] LOAD 433 ARG1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
([(ARG1 + 8)] - [ARG1]) COPY ([(ARG1 + 8)] - [ARG1])
[ARG1] COPY [ARG1]
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
 CBRANCH (f() INT_LESS f())
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (([(ARG1 + 8)] - [ARG1]) INT_NOTEQUAL 0)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -88) PTRSUB RSP -88
 CBRANCH (f() INT_EQUAL -1)
 RETURN 1
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
0 INT_EQUAL f() -1
(f() / 2147483647) SUBPIECE f() 8
(f() + 40) CAST (f() + 40)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -88) PTRSUB RSP -88
(f() / 2147483647) INT_RIGHT f() 64
(f() / 2147483647) SUBPIECE f() 0
(f() + 40) INT_ADD f() 40
(RSP + -104) PTRSUB RSP -104
0 INT_NOTEQUAL f() [(f() + 40)]
(f() / 2147483647) SUBPIECE f() 8
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -104)
[(f() + 40)] LOAD 433 (f() + 40)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -120) PTRSUB RSP -120
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -120) 46 -1
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -88)
(RSP + -88) PTRSUB RSP -88
 CBRANCH f()
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -88)
 CBRANCH f()
f() CALL func (RSP + -104)
 CBRANCH ((f() / 4611686014132420609) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (f() / 4611686014132420609) 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_NOTEQUAL 46)
0 COPY 0
1 COPY 1
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
0 INT_LESS f() f()
f() CALL func [ARG1] ([(ARG1 + 8)] - [ARG1]) [ARG1]
(f() / 2147483647) SUBPIECE f() 8
46 COPY 46
(RSP + -177) PTRSUB RSP -177
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -104) 0
(f() / 2147483647) SUBPIECE f() 0
0 INT_NOTEQUAL f() 46
(RSP + -104) PTRSUB RSP -104
0 INT_NOTEQUAL ([(ARG1 + 8)] - [ARG1]) 0
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CBRANCH (f(ARG1) INT_LESS [(ARG1 + 8)])
 RETURN 0
0 INT_LESS f(ARG1) [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ((f(ARG1) + 1) INT_LESS [(ARG1 + 8)])
 STORE 433 f(ARG1) 47
 CBRANCH ([(f(ARG1) + 1)] INT_EQUAL 92)
0 INT_EQUAL [(f(ARG1) + 1)] 92
[(f(ARG1) + 1)] LOAD 433 (f(ARG1) + 1)
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
 CBRANCH (f(ARG1) INT_EQUAL 92)
0 INT_EQUAL f(ARG1) 92
f(ARG1) LOAD 433 f(ARG1)
 BRANCH VZERO
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
 BRANCH VZERO
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
0 INT_LESS (f(ARG1) + 1) [(ARG1 + 8)]
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1 ARG2 ARG2
f() CALL func ARG2
 CALL func ARG2
 CALL func ARG2
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL f())
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
 RETURN 1
 CALL libcall___assert_fail_thunk (!path.isSingleStringRef() || path.getSingleStringRef().data() != result.data()) && "path and result are not allowed to overlap!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Path.cpp 523 void llvm::sys::path::native(const llvm::Twine&, llvm::SmallVectorImpl<char>&)
void llvm::sys::path::native(const llvm::Twine&, llvm::SmallVectorImpl<char>&) COPY void llvm::sys::path::native(const llvm::Twine&, llvm::SmallVectorImpl<char>&)
[(f() + 40)] LOAD 433 (f() + 40)
(!path.isSingleStringRef() || path.getSingleStringRef().data() != result.data()) && "path and result are not allowed to overlap!" COPY (!path.isSingleStringRef() || path.getSingleStringRef().data() != result.data()) && "path and result are not allowed to overlap!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Path.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Path.cpp
(f() + 40) CAST (f() + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
0 INT_EQUAL f() f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
 RETURN 0 (ARG1 + 16)
 CALL func (RSP + -56) ARG1 ARG2 ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
f() CALL func (RSP + -56)
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 40
(RSP + -56) PTRSUB RSP -56
f() CAST f()
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[f()] LOAD 433 f()
40 INT_ADD 0 40
 RETURN 0 [f()]
 CALL libcall___stack_chk_fail_thunk
[f()] COPY [f()]
 RETURN 1
f() CALL func ARG1 ARG2 ARG1
 CBRANCH (f() INT_EQUAL -1)
f() CALL func (RSP + -200) 46 -1
0 INT_EQUAL f() -1
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 0
(A_Stack[-0x60]:8 # A_Stack[-0x68]:8) PIECE A_Stack[-0x60]:8 A_Stack[-0x68]:8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(A_Stack[-0x90]:8 # A_Stack[-0x98]:8) PIECE A_Stack[-0x90]:8 A_Stack[-0x98]:8
f() COPY f()
 CBRANCH f()
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
f() CALL libcall_memcmp_thunk (f() / 2147483647) f() f()
 CBRANCH (0 INT_EQUAL [(f() + 40)])
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
f(RSP) COPY f(RSP)
(f() / 2147483647) SUBPIECE f() 8
 RETURN 0 f(RSP)
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH ((f() / 4611686014132420609) INT_EQUAL 2)
f() COPY f()
 CBRANCH ((f() / 2147483647) INT_EQUAL f())
4669586 PTRSUB 0 4669586
0 INT_EQUAL (f() / 2147483647) f()
f() COPY f()
 CALL func (RSP + -168) 4669586
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
(RSP + -168) PTRSUB RSP -168
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() COPY f()
 CBRANCH ((f() / 2147483647) INT_EQUAL 1)
(f() / 2147483647) INT_RIGHT f() 64
f() COPY f()
(f() # f()) PIECE f() f()
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH ~(f())
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
 CBRANCH ((f() / 2147483647) INT_EQUAL A_Stack[-0xb0]:8)
0 INT_EQUAL (f() / 4611686014132420609) 2
(f() # f()) PIECE f() f()
A_Stack[-0xb0]:8 COPY A_Stack[-0xb0]:8
0 INT_EQUAL (f() / 2147483647) A_Stack[-0xb0]:8
4669449 PTRSUB 0 4669449
A_Stack[-0xb0]:8 COPY A_Stack[-0xb0]:8
A_Stack[-0xb8]:8 COPY A_Stack[-0xb8]:8
~(f()) BOOL_NEGATE f()
(f() / 2147483647) SUBPIECE f() 0
A_Stack[-0xb8]:8 COPY A_Stack[-0xb8]:8
 CALL func (RSP + -184) 4669449
(RSP + -184) PTRSUB RSP -184
 CBRANCH (A_Stack[-0xb0]:8 INT_EQUAL 0)
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
f() CALL libcall_memcmp_thunk (f() / 2147483647) A_Stack[-0xb8]:8 A_Stack[-0xb0]:8
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
0 INT_EQUAL ([f(RSP)] + (f() / 2147483647)) 0
([f(RSP)] + (f() / 2147483647)) INT_ADD [f(RSP)] (f() / 2147483647)
[f(RSP)] COPY [f(RSP)]
[f(RSP)] LOAD 433 f(RSP)
(f() / 2147483647) SUBPIECE f() 8
([f(RSP)] + (f() / 2147483647)) COPY ([f(RSP)] + (f() / 2147483647))
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -288) PTRSUB RSP -288
0 INT_EQUAL (f() / 2147483647) 1
0 INT_EQUAL A_Stack[-0xb0]:8 0
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [f(RSP)] 0
(f() / 2147483647) CAST (f() / 2147483647)
(f() / 2147483647) SUBPIECE f() 0
f() COPY f()
0 INT_NOTEQUAL f() 0
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) COPY (f() / 2147483647)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
(f() / 2147483647) SUBPIECE f() 0
([f(RSP)] # ([f(RSP)] + (f() / 2147483647))) COPY ([f(RSP)] # ([f(RSP)] + (f() / 2147483647)))
([f(RSP)] # ([f(RSP)] + (f() / 2147483647))) PIECE [f(RSP)] ([f(RSP)] + (f() / 2147483647))
f(RSP) CAST f(RSP)
f(RSP) CALL func (RSP + -288) (RSP + -280) (RSP + -280)
 CBRANCH (([f(RSP)] + (f() / 2147483647)) INT_EQUAL 0)
f() COPY f()
([f(RSP)] # ([f(RSP)] + (f() / 2147483647))) COPY ([f(RSP)] # ([f(RSP)] + (f() / 2147483647)))
([f(RSP)] # ([f(RSP)] + (f() / 2147483647))) PIECE [f(RSP)] ([f(RSP)] + (f() / 2147483647))
[f(RSP)] LOAD 433 f(RSP)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
A_Stack[-0xb8]:8 COPY A_Stack[-0xb8]:8
~(f()) BOOL_NEGATE f()
(f() / 2147483647) COPY (f() / 2147483647)
(RSP + -296) PTRSUB RSP -296
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -192) PTRSUB RSP -192
(RSP + -280) PTRSUB RSP -280
 CBRANCH ~(f())
f(RSP) CAST f(RSP)
f(RSP) CALL func (RSP + -296) (RSP + -192) (RSP + -192)
A_Stack[-0xb0]:8 COPY A_Stack[-0xb0]:8
(f() / 2147483647) SUBPIECE f() 8
f() COPY f()
(f() / 2147483647) SUBPIECE f() 8
((f() / 2147483647) - [f(RSP)]) INT_SUB (f() / 2147483647) [f(RSP)]
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL 0 [(f() + 40)]
(f() / 2147483647) SUBPIECE f() 0
(f() + 40) INT_ADD f() 40
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL f() 0
 RETURN 1
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
f() CALL func ARG1 ARG2 ARG1
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(A_Stack[-0x90]:8 # A_Stack[-0x98]:8) PIECE A_Stack[-0x90]:8 A_Stack[-0x98]:8
 CBRANCH (f() INT_EQUAL -1)
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -200) 46 -1
(RSP + -200) PTRSUB RSP -200
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL f() -1
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH ((f() / 4611686014132420609) INT_EQUAL 2)
 CALL func (RSP + -168) 4669586
4669586 PTRSUB 0 4669586
f() COPY f()
(f() / 2147483647) SUBPIECE f() 8
f() COPY f()
(RSP + -168) PTRSUB RSP -168
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH f()
f() COPY f()
 CBRANCH ((f() / 2147483647) INT_EQUAL f())
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() COPY f()
0 INT_EQUAL (f() / 2147483647) f()
f() COPY f()
 CBRANCH ((f() / 2147483647) INT_EQUAL 1)
f() COPY f()
(f() # f()) PIECE f() f()
 CBRANCH ((f() / 2147483647) INT_EQUAL A_Stack[-0xb0]:8)
0 INT_EQUAL (f() / 4611686014132420609) 2
A_Stack[-0xb0]:8 COPY A_Stack[-0xb0]:8
0 INT_EQUAL (f() / 2147483647) A_Stack[-0xb0]:8
(f() / 2147483647) SUBPIECE f() 0
A_Stack[-0xb0]:8 COPY A_Stack[-0xb0]:8
A_Stack[-0xb8]:8 COPY A_Stack[-0xb8]:8
(f() # f()) PIECE f() f()
4669449 PTRSUB 0 4669449
A_Stack[-0xb8]:8 COPY A_Stack[-0xb8]:8
 CALL func (RSP + -184) 4669449
(f() / 2147483647) SUBPIECE f() 8
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
~(f()) BOOL_NEGATE f()
(RSP + -184) PTRSUB RSP -184
(f() / 2147483647) INT_RIGHT f() 64
 CBRANCH ~(f())
 CBRANCH (A_Stack[-0xb0]:8 INT_EQUAL 0)
f() CALL libcall_memcmp_thunk (f() / 2147483647) A_Stack[-0xb8]:8 A_Stack[-0xb0]:8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
0 COPY 0
0 INT_EQUAL 0 [(f() + 40)]
 BRANCH VZERO
 CBRANCH f()
(f() / 2147483647) SUBPIECE f() 8
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -56) PTRSUB RSP -56
(f() + 40) CAST (f() + 40)
 CALL func (RSP + -56)
0 INT_EQUAL (f() / 2147483647) 1
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(A_Stack[-0x60]:8 # A_Stack[-0x68]:8) PIECE A_Stack[-0x60]:8 A_Stack[-0x68]:8
(A_Stack[-0x90]:8 # A_Stack[-0x98]:8) PIECE A_Stack[-0x90]:8 A_Stack[-0x98]:8
(f() / 2147483647) SUBPIECE f() 0
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (([f(RSP)] + (f() / 2147483647)) INT_EQUAL 0)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
([f(RSP)] + (f() / 2147483647)) INT_ADD [f(RSP)] (f() / 2147483647)
(f() / 2147483647) SUBPIECE f() 0
-1 COPY -1
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL ([f(RSP)] + (f() / 2147483647)) 0
(f() / 2147483647) SUBPIECE f() 0
f(RSP) CAST f(RSP)
f(RSP) CAST f(RSP)
[f(RSP)] COPY [f(RSP)]
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() COPY f()
[f(RSP)] LOAD 433 f(RSP)
(f() / 2147483647) SUBPIECE f() 0
([f(RSP)] + (f() / 2147483647)) COPY ([f(RSP)] + (f() / 2147483647))
f(RSP) CALL func (RSP + -296) (RSP + -192) (RSP + -192)
(f() / 2147483647) SUBPIECE f() 0
((f() / 2147483647) - [f(RSP)]) INT_SUB (f() / 2147483647) [f(RSP)]
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
(RSP + -296) PTRSUB RSP -296
(RSP + -288) PTRSUB RSP -288
(RSP + -192) PTRSUB RSP -192
(RSP + -280) PTRSUB RSP -280
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -56)
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -288) (RSP + -280) (RSP + -280)
(f() / 2147483647) CAST (f() / 2147483647)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f(RSP) # f(RSP)) PIECE f(RSP) f(RSP)
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 RETURN 0 (f(RSP) # f(RSP))
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_memcmp_thunk (f() / 2147483647) f() f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() 0
(f() / 2147483647) COPY (f() / 2147483647)
0 INT_NOTEQUAL [f(RSP)] 0
f() COPY f()
f() COPY f()
0 INT_NOTEQUAL f() 0
A_Stack[-0xb0]:8 COPY A_Stack[-0xb0]:8
0 INT_EQUAL A_Stack[-0xb0]:8 0
0 INT_NOTEQUAL f() 0
A_Stack[-0xb8]:8 COPY A_Stack[-0xb8]:8
(f() / 2147483647) COPY (f() / 2147483647)
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
4669589 PTRSUB 0 4669589
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
40 INT_ADD 0 40
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -40) 4669589
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) COPY (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 RETURN 1
 RETURN 0 (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 CALL libcall___stack_chk_fail_thunk
f() CALL func ARG1 (RSP + -184) (RSP + -184)
40 CAST 40
(f() / 2147483647) INT_RIGHT f() 64
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -184) PTRSUB RSP -184
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_AND 0 4294967040
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
0 INT_ZEXT 0
1 COPY 1
0 INT_EQUAL 0 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -184)
[40] LOAD 433 40
0 INT_OR 0 0
0 SUBPIECE 0 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -184)
1 INT_XOR 0 1
(RSP + -184) PTRSUB RSP -184
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 1
f() CALL func ARG1 (RSP + -184) (RSP + -184)
40 CAST 40
(f() / 2147483647) INT_RIGHT f() 64
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -184) PTRSUB RSP -184
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_AND 0 4294967040
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
0 INT_ZEXT 0
1 COPY 1
0 INT_EQUAL 0 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -184)
[40] LOAD 433 40
0 INT_OR 0 0
0 SUBPIECE 0 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -184)
1 INT_XOR 0 1
(RSP + -184) PTRSUB RSP -184
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 1
f() CALL func ARG1 (RSP + -184) (RSP + -184)
40 CAST 40
(f() / 2147483647) INT_RIGHT f() 64
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -184) PTRSUB RSP -184
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_AND 0 4294967040
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
0 INT_ZEXT 0
1 COPY 1
0 INT_EQUAL 0 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -184)
[40] LOAD 433 40
0 INT_OR 0 0
0 SUBPIECE 0 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -184)
1 INT_XOR 0 1
(RSP + -184) PTRSUB RSP -184
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 1
f() CALL func ARG1 (RSP + -184) (RSP + -184)
40 CAST 40
(f() / 2147483647) INT_RIGHT f() 64
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -184) PTRSUB RSP -184
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_AND 0 4294967040
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
0 INT_ZEXT 0
1 COPY 1
0 INT_EQUAL 0 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -184)
[40] LOAD 433 40
0 INT_OR 0 0
0 SUBPIECE 0 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -184)
1 INT_XOR 0 1
(RSP + -184) PTRSUB RSP -184
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 1
f() CALL func ARG1 (RSP + -184) (RSP + -184)
40 CAST 40
(f() / 2147483647) INT_RIGHT f() 64
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -184) PTRSUB RSP -184
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_AND 0 4294967040
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
0 INT_ZEXT 0
1 COPY 1
0 INT_EQUAL 0 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -184)
[40] LOAD 433 40
0 INT_OR 0 0
0 SUBPIECE 0 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -184)
1 INT_XOR 0 1
(RSP + -184) PTRSUB RSP -184
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 1
f() CALL func ARG1 (RSP + -184) (RSP + -184)
40 CAST 40
(f() / 2147483647) INT_RIGHT f() 64
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -184) PTRSUB RSP -184
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_AND 0 4294967040
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
0 INT_ZEXT 0
1 COPY 1
0 INT_EQUAL 0 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -184)
[40] LOAD 433 40
0 INT_OR 0 0
0 SUBPIECE 0 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -184)
1 INT_XOR 0 1
(RSP + -184) PTRSUB RSP -184
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 1
f() CALL func ARG1
0 INT_XOR f() 1
0 COPY 0
 RETURN 0 0
ARG1 COPY ARG1
ARG2 COPY ARG2
 CBRANCH (f(ARG2 , RSP) INT_LESS 3)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ~(f())
~(f()) BOOL_NEGATE f()
0 INT_LESS f(ARG2 , RSP) 3
 CBRANCH f()
-1 COPY -1
(f(ARG1 , RSP) + [f(RSP)]) INT_ADD [f(RSP)] f(ARG1 , RSP)
(RSP + -96) PTRSUB RSP -96
[f(RSP)] COPY [f(RSP)]
(f(RSP) - [f(RSP)]) INT_SUB f(RSP) [f(RSP)]
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -88) (RSP + -80) (RSP + -80)
 CBRANCH ((f(ARG1 , RSP) + [f(RSP)]) INT_EQUAL 0)
(RSP + -128) PTRSUB RSP -128
1 COPY 1
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
0 INT_EQUAL (f(ARG1 , RSP) + [f(RSP)]) 0
f(RSP) CAST f(RSP)
[f(RSP)] LOAD 433 f(RSP)
(RSP + -88) PTRSUB RSP -88
f(RSP) CALL func (RSP + -96) (RSP + -128) (RSP + -128)
(RSP + -80) PTRSUB RSP -80
f(RSP) CAST f(RSP)
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
 CBRANCH (f(RSP) INT_EQUAL 0)
0 COPY 0
f(RSP) COPY f(RSP)
0 INT_EQUAL f(RSP) 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
f(ARG1 , RSP) COPY f(ARG1 , RSP)
 RETURN 1
0 INT_NOTEQUAL f() 46
0 COPY 0
f() CALL func (RSP + -136) 0
 CBRANCH (f() INT_NOTEQUAL 46)
(RSP + -136) PTRSUB RSP -136
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
1 COPY 1
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -112) (RSP + -128) (RSP + -128)
(RSP + -128) PTRSUB RSP -128
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() [(f() + 40)]
f(RSP) CAST f(RSP)
(f(ARG2 , RSP) # f(ARG1 , RSP)) PIECE f(ARG2 , RSP) f(ARG1 , RSP)
-1 COPY -1
(f(ARG1 , RSP) + [f(RSP)]) INT_ADD [f(RSP)] f(ARG1 , RSP)
(RSP + -104) PTRSUB RSP -104
[(f() + 40)] LOAD 433 (f() + 40)
(f(ARG2 , RSP) - [f(RSP)]) INT_SUB f(ARG2 , RSP) [f(RSP)]
f(RSP) CAST f(RSP)
(RSP + -80) PTRSUB RSP -80
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH ((f(ARG1 , RSP) + [f(RSP)]) INT_EQUAL 0)
f(RSP) CALL func (RSP + -104) (RSP + -80) (RSP + -80)
2 COPY 2
0 INT_EQUAL (f(ARG1 , RSP) + [f(RSP)]) 0
[f(RSP)] COPY [f(RSP)]
(RSP + -112) PTRSUB RSP -112
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
 RETURN 1
 RETURN 0 (f(ARG2 , RSP) # f(ARG1 , RSP))
 CALL libcall___stack_chk_fail_thunk
(f(ARG2 , RSP) # f(ARG1 , RSP)) COPY (f(ARG2 , RSP) # f(ARG1 , RSP))
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
f() CALL func f()
f() INT_SEXT f()
f() CALL func (RSP + -136) 1
(RSP + -136) PTRSUB RSP -136
0 INT_EQUAL f() 0
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
 RETURN 1
0 COPY 0
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
0 INT_NOTEQUAL [f(RSP)] 0
f() CALL func (RSP + -136) 0
(RSP + -136) PTRSUB RSP -136
0 INT_EQUAL f() 0
f() CALL func f()
f() INT_SEXT f()
0 INT_NOTEQUAL [f(RSP)] 0
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 64) PTRADD ARG1 8 8
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 48) PTRADD ARG1 6 8
(ARG1 + 72) PTRADD ARG1 9 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 56) PTRADD ARG1 7 8
 STORE 433 ARG1 [f(RSP)]
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 40) PTRADD ARG1 5 8
(f(RSP) + 32) PTRADD f(RSP) 4 8
[(f(RSP) + 32)] LOAD 433 (f(RSP) + 32)
f(RSP) CALL func (RSP + 48)
 STORE 433 (ARG1 + 8) [(f(RSP) + 8)]
 STORE 433 (ARG1 + 64) [(f(RSP) + 24)]
(f(RSP) + 24) PTRADD f(RSP) 3 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 24) PTRADD f(RSP) 3 8
[(f(RSP) + 24)] LOAD 433 (f(RSP) + 24)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (ARG1 + 56) [(f(RSP) + 16)]
(f(RSP) + 16) PTRADD f(RSP) 2 8
[f(RSP)] LOAD 433 f(RSP)
 STORE 433 (ARG1 + 32) [(f(RSP) + 32)]
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) CAST f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 32)] LOAD 433 (f(RSP) + 32)
 STORE 433 (ARG1 + 48) [(f(RSP) + 8)]
f(RSP) CALL func (RSP + 8)
f(RSP) CAST f(RSP)
 RETURN 0
 STORE 433 (ARG1 + 24) [(f(RSP) + 24)]
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
[(f(RSP) + 24)] LOAD 433 (f(RSP) + 24)
 STORE 433 (ARG1 + 40) [f(RSP)]
(RSP + 48) PTRSUB RSP 48
(RSP + 8) PTRSUB RSP 8
 STORE 433 (ARG1 + 16) [(f(RSP) + 16)]
 STORE 433 (ARG1 + 72) [(f(RSP) + 32)]
[f(RSP)] LOAD 433 f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 32) PTRADD f(RSP) 4 8
 CALL func ARG1 ARG2 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func (RSP + 8)
(RSP + 8) PTRSUB RSP 8
(RSP + 48) PTRSUB RSP 48
 CALL func (RSP + 48)
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 [(ARG2 + 40)]
ARG1 COPY ARG1
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG2 + 48) INT_ADD ARG2 48
(ARG2 + 56) INT_ADD ARG2 56
(ARG2 + 64) INT_ADD ARG2 64
(ARG2 + 72) INT_ADD ARG2 72
(ARG2 + 40) INT_ADD ARG2 40
(ARG2 + 56) CAST (ARG2 + 56)
[(ARG2 + 72)] LOAD 433 (ARG2 + 72)
 STORE 433 (ARG1 + 24) [(ARG2 + 64)]
(ARG2 + 48) CAST (ARG2 + 48)
[(ARG2 + 64)] LOAD 433 (ARG2 + 64)
(ARG2 + 40) CAST (ARG2 + 40)
 STORE 433 (ARG1 + 16) [(ARG2 + 56)]
[(ARG2 + 56)] LOAD 433 (ARG2 + 56)
 RETURN 0 ARG1
 STORE 433 (ARG1 + 8) [(ARG2 + 48)]
(ARG2 + 72) CAST (ARG2 + 72)
[(ARG2 + 48)] LOAD 433 (ARG2 + 48)
(ARG2 + 64) CAST (ARG2 + 64)
 STORE 433 (ARG1 + 32) [(ARG2 + 72)]
[(ARG2 + 40)] LOAD 433 (ARG2 + 40)
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 [ARG2]
(ARG1 + 24) PTRADD ARG1 3 8
ARG1 COPY ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 32) PTRADD ARG1 4 8
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 32) PTRADD ARG2 4 8
(ARG2 + 16) PTRADD ARG2 2 8
[ARG2] LOAD 433 ARG2
(ARG2 + 24) PTRADD ARG2 3 8
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
 RETURN 0 ARG1
 STORE 433 (ARG1 + 8) [(ARG2 + 8)]
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
 STORE 433 (ARG1 + 24) [(ARG2 + 24)]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
 STORE 433 (ARG1 + 16) [(ARG2 + 16)]
 STORE 433 (ARG1 + 32) [(ARG2 + 32)]
 CALL func ARG1 ARG2 ARG3 ARG2
 CALL func ARG1 256
 RETURN 0
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -56)
 CALL func ARG1 f() f() f()
f() CALL func (RSP + -56)
 RETURN 0
 CALL func ARG1 ([(ARG1 + 8)] + -16) ([(ARG1 + 8)] + -16)
(ARG1 + 8) INT_ADD ARG1 8
([(ARG1 + 8)] + -16) INT_ADD [(ARG1 + 8)] -16
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func ARG1 (RSP + -648) (RSP + -616) (RSP + -584) (RSP + -536)
 CALL func ARG1 (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
ARG1 COPY ARG1
f() CALL func ARG2 ARG3 ARG2
f() CALL func ARG2 ARG3 ARG2
0 INT_NOTEQUAL ARG4 0
(RSP + -392) PTRSUB RSP -392
(RSP + -488) PTRSUB RSP -488
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
f() COPY f()
(RSP + -536) PTRSUB RSP -536
(RSP + -312) PTRSUB RSP -312
 CALL func (RSP + -488) (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
 CALL func (RSP + -312)
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func (RSP + -584) (RSP + -536) (RSP + -536)
 CALL func (RSP + -584) (RSP + -392) (RSP + -392)
(f() / 2147483647) INT_RIGHT f() 64
(f() / 2147483647) INT_RIGHT f() 64
 CALL func (RSP + -392)
 CALL func (RSP + -440) (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(RSP + -440) PTRSUB RSP -440
(RSP + -584) PTRSUB RSP -584
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_EQUAL [40])
(RSP + -584) PTRSUB RSP -584
 CBRANCH (f() INT_NOTEQUAL f())
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() [40]
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL f() f()
(RSP + -536) PTRSUB RSP -536
 CALL func (RSP + -312)
(RSP + -392) PTRSUB RSP -392
 CALL func (RSP + -536) (RSP + -392) (RSP + -392)
[40] LOAD 433 (f() + 40)
(RSP + -312) PTRSUB RSP -312
 CBRANCH (f() INT_EQUAL f())
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 CBRANCH ([(f() + 8)] INT_EQUAL f())
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
 RETURN 0 ARG1
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
1 COPY 1
 BRANCH VZERO
f() COPY f()
~(f()) BOOL_NEGATE f()
f() COPY f()
(RSP + -584) PTRSUB RSP -584
[(f() + 8)] COPY [(f() + 8)]
0 INT_EQUAL [(f() + 8)] f()
[f()] COPY [f()]
4669449 PTRSUB 0 4669449
(RSP + -616) PTRSUB RSP -616
[f()] LOAD 433 f()
f() COPY f()
f() CAST f()
 CBRANCH ~(f())
 BRANCH VZERO
[(f() + 8)] LOAD 433 (f() + 8)
f() CALL func (RSP + -584)
 CALL func (RSP + -584)
 CALL func (RSP + -616) 4669449
(RSP + -584) PTRSUB RSP -584
f() COPY f()
(f() + 8) PTRADD f() 1 8
1 COPY 1
 BRANCH VZERO
 CALL func (RSP + -584) 4669146
 CALL func (RSP + -648) (RSP + -760) (RSP + -760)
 CALL func (RSP + -616) 4669146
(f() + 8) PTRADD f() 1 8
(RSP + -536) PTRSUB RSP -536
4669146 PTRSUB 0 4669146
 BRANCH VZERO
(RSP + -760) PTRSUB RSP -760
(RSP + -536) PTRSUB RSP -536
(RSP + -648) PTRSUB RSP -648
4669146 PTRSUB 0 4669146
[f()] LOAD 433 f()
(RSP + -584) PTRSUB RSP -584
(RSP + -616) PTRSUB RSP -616
[(f() + 8)] LOAD 433 (f() + 8)
(f() + 16) PTRADD f() 2 8
 CALL func (RSP + -536) 4669146
(RSP + -584) PTRSUB RSP -584
4669146 PTRSUB 0 4669146
(RSP + -616) PTRSUB RSP -616
(RSP + -648) PTRSUB RSP -648
 CBRANCH f()
(RSP + -648) PTRSUB RSP -648
f() CALL func (RSP + -312)
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 CALL func (RSP + -312) (RSP + -648) (RSP + -648)
(RSP + -312) PTRSUB RSP -312
(RSP + -312) PTRSUB RSP -312
 BRANCH VZERO
(RSP + -312) PTRSUB RSP -312
 CALL func (RSP + -312)
0 COPY 0
 BRANCH VZERO
f() CALL libcall_memcmp_thunk f() f() f()
f() CAST f()
 CBRANCH (ARG4 INT_NOTEQUAL 0)
4669586 PTRSUB 0 4669586
f() COPY f()
(RSP + -616) PTRSUB RSP -616
f() COPY f()
 CALL func (RSP + -616) 4669586
f() COPY f()
f() COPY f()
0 INT_EQUAL f() f()
f() COPY f()
f() COPY f()
0 COPY 0
 BRANCH VZERO
f() CALL libcall_memcmp_thunk [f()] f() f()
f() CAST f()
ARG1 CAST ARG1
f() CALL libcall_memcmp_thunk ARG1 ARG3 (ARG2 - ARG1)
(ARG2 - ARG1) INT_SUB ARG2 ARG1
 CBRANCH ((ARG2 - ARG1) INT_EQUAL 0)
0 INT_EQUAL (ARG2 - ARG1) 0
 RETURN 0 f()
(0 # f()) PIECE 0 f()
1 COPY 1
0 INT_ZEXT 0
 BRANCH VZERO
0 INT_EQUAL f() 0
(-256 & (0 # f())) INT_OR (-256 & (0 # f())) 0
(-256 & (0 # f())) INT_AND (0 # f()) -256
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 RETURN 0
 CALL func f() f() f()
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 1 8
[ARG2] LOAD 433 ARG2
 RETURN 0 f()
 CBRANCH (([(ARG1 + 8)] - [ARG1]) INT_EQUAL ([(ARG2 + 8)] - [ARG2]))
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_EQUAL ([(ARG1 + 8)] - [ARG1]) ([(ARG2 + 8)] - [ARG2])
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
([(ARG2 + 8)] - [ARG2]) INT_SUB [(ARG2 + 8)] [ARG2]
f() CALL func [ARG1] [(ARG1 + 8)] [ARG2] [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 COPY 0
 BRANCH VZERO
[ARG1] LOAD 433 ARG1
 CALL func ARG1 (RSP + -312) (RSP + -312)
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
f() CALL func (RSP + -312) ARG1 ARG1
 CALL func (RSP + -312) f() ([(ARG1 + 8)] - [ARG1]) ARG2
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL f() 0
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -312)
0 COPY 0
(f() + 40) INT_ADD f() 40
(RSP + -312) PTRSUB RSP -312
0 INT_EQUAL 0 [(f() + 40)]
(RSP + -312) PTRSUB RSP -312
 CBRANCH (([(ARG1 + 8)] - [ARG1]) INT_NOTEQUAL 0)
(RSP + -312) PTRSUB RSP -312
0 INT_NOTEQUAL ([(ARG1 + 8)] - [ARG1]) 0
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (0 INT_EQUAL [(f() + 40)])
 RETURN 1
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
(RSP + -312) PTRSUB RSP -312
 RETURN 1
 RETURN 0 0
 CALL libcall___stack_chk_fail_thunk
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 (ARG1 + 8) ARG3
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -40) [ARG1] [(ARG1 + 8)] [ARG1]
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
[40] LOAD 433 40
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) COPY (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 RETURN 1
 RETURN 0 (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
ARG1 CAST ARG1
(ARG1 + 40) PTRADD ARG1 5 8
(ARG1 + 24) PTRADD ARG1 3 8
ARG1 CAST ARG1
 STORE 433 ARG1 0
(ARG1 + 32) PTRADD ARG1 4 8
 STORE 433 (ARG1 + 44) 65535
 STORE 433 (ARG1 + 32) 0
(ARG1 + 24) CAST (ARG1 + 24)
(ARG1 + 28) INT_ADD ARG1 28
 STORE 433 (ARG1 + 24) 0
 STORE 433 (ARG1 + 8) 0
 RETURN 0
(ARG1 + 44) INT_ADD ARG1 44
 STORE 433 (ARG1 + 40) 0
(ARG1 + 44) CAST (ARG1 + 44)
 STORE 433 (ARG1 + 28) 0
(ARG1 + 28) CAST (ARG1 + 28)
 STORE 433 (ARG1 + 16) 0
(ARG1 + 40) CAST (ARG1 + 40)
(ARG1 + 24) PTRADD ARG1 3 8
ARG1 CAST ARG1
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 40) PTRADD ARG1 5 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 0
ARG1 CAST ARG1
 STORE 433 (ARG1 + 40) ARG2
(ARG1 + 28) CAST (ARG1 + 28)
(ARG1 + 44) INT_ADD ARG1 44
(ARG1 + 40) CAST (ARG1 + 40)
 STORE 433 (ARG1 + 28) 0
 STORE 433 (ARG1 + 16) 0
(ARG1 + 24) CAST (ARG1 + 24)
 STORE 433 (ARG1 + 44) 65535
 STORE 433 (ARG1 + 32) 0
(ARG1 + 28) INT_ADD ARG1 28
 STORE 433 (ARG1 + 24) 0
(ARG1 + 44) CAST (ARG1 + 44)
 RETURN 0
 STORE 433 (ARG1 + 8) 0
 STORE 433 (ARG1 + 32) ARG9
 STORE 433 (ARG1 + 44) ARG3
ARG1 CAST ARG1
 STORE 433 ARG1 ARG4
(ARG1 + 32) PTRADD ARG1 4 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 40) PTRADD ARG1 5 8
(ARG1 + 24) PTRADD ARG1 3 8
ARG1 CAST ARG1
 STORE 433 (ARG1 + 40) ARG2
 STORE 433 (ARG1 + 8) ARG5
 STORE 433 (ARG1 + 16) ARG6
 STORE 433 (ARG1 + 24) ARG7
 STORE 433 (ARG1 + 28) ARG8
 RETURN 0
(ARG1 + 28) INT_ADD ARG1 28
(ARG1 + 44) INT_ADD ARG1 44
(ARG1 + 44) CAST (ARG1 + 44)
(ARG1 + 28) CAST (ARG1 + 28)
(ARG1 + 40) CAST (ARG1 + 40)
(ARG1 + 24) CAST (ARG1 + 24)
(ARG2 + 24) PTRADD ARG2 3 8
[ARG2] LOAD 433 ARG2
(ARG2 + 88) PTRADD ARG2 11 8
(ARG2 + 24) PTRADD ARG2 3 8
(ARG2 + 24) PTRADD ARG2 3 8
(ARG2 + 24) PTRADD ARG2 3 8
(ARG2 + 48) PTRADD ARG2 6 8
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 24) PTRADD ARG2 3 8
(ARG2 + 24) PTRADD ARG2 3 8
(ARG2 + 24) PTRADD ARG2 3 8
ARG2 CAST ARG2
(ARG2 + 32) PTRADD ARG2 4 8
 STORE 433 ARG3 A_Stack[-0x58]:8
(ARG3 + 16) PTRADD ARG3 2 8
(ARG3 + 16) PTRADD ARG3 2 8
(ARG3 + 32) PTRADD ARG3 4 8
(ARG3 + 8) PTRADD ARG3 1 8
(ARG3 + 24) PTRADD ARG3 3 8
(ARG3 + 24) PTRADD ARG3 3 8
(ARG3 + 40) PTRADD ARG3 5 8
(ARG3 + 16) PTRADD ARG3 2 8
(ARG3 + 32) PTRADD ARG3 4 8
 STORE 433 ARG3 A_Stack[-0x58]:8
(ARG3 + 32) PTRADD ARG3 4 8
 STORE 433 ARG3 A_Stack[-0x58]:8
(ARG3 + 8) PTRADD ARG3 1 8
(ARG3 + 8) PTRADD ARG3 1 8
(ARG3 + 24) PTRADD ARG3 3 8
(ARG3 + 40) PTRADD ARG3 5 8
(ARG3 + 40) PTRADD ARG3 5 8
0 INT_EQUAL ARG1 0
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
0 INT_EQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG1 INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (([(ARG2 + 24)] & 61440) INT_EQUAL 8192)
6 COPY 6
 CBRANCH (([(ARG2 + 24)] & 61440) INT_EQUAL 4096)
 BRANCH VZERO
(ARG2 + 24) CAST (ARG2 + 24)
0 INT_EQUAL ([(ARG2 + 24)] & 61440) 4096
([(ARG2 + 24)] & 61440) INT_AND [(ARG2 + 24)] 61440
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
 CBRANCH (([(ARG2 + 24)] & 61440) INT_EQUAL 16384)
([(ARG2 + 24)] & 61440) INT_AND [(ARG2 + 24)] 61440
(ARG2 + 24) CAST (ARG2 + 24)
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
3 COPY 3
 BRANCH VZERO
 CBRANCH (([(ARG2 + 24)] & 61440) INT_EQUAL 32768)
0 INT_EQUAL ([(ARG2 + 24)] & 61440) 32768
([(ARG2 + 24)] & 61440) INT_AND [(ARG2 + 24)] 61440
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
(ARG2 + 24) CAST (ARG2 + 24)
7 COPY 7
 CBRANCH (([(ARG2 + 24)] & 61440) INT_EQUAL 49152)
 BRANCH VZERO
0 INT_EQUAL ([(ARG2 + 24)] & 61440) 49152
f() CALL libcall___errno_location_thunk
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
 CALL func (RSP + -88) f() [(ARG2 + 24)] [ARG2] [(ARG2 + 8)] [(ARG2 + 88)] [(ARG2 + 28)] [(ARG2 + 32)] [(ARG2 + 48)]
 CALL func (RSP + -88)
(RSP + -88) PTRSUB RSP -88
f() CALL libcall_generic_category_thunk
[(ARG2 + 48)] LOAD 433 (ARG2 + 48)
 STORE 433 (ARG3 + 40) A_Stack[-0x30]:8
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CALL func (RSP + -104) [f()] f() [f()]
(ARG2 + 28) INT_ADD ARG2 28
(RSP + -88) PTRSUB RSP -88
[(ARG2 + 88)] LOAD 433 (ARG2 + 88)
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
[(ARG2 + 28)] LOAD 433 (ARG2 + 28)
(ARG2 + 32) CAST (ARG2 + 32)
(ARG2 + 28) CAST (ARG2 + 28)
9 COPY 9
[f()] LOAD 433 f()
 STORE 433 (ARG3 + 16) A_Stack[-0x48]:8
 CALL func (RSP + -88) 2
0 INT_EQUAL ([(ARG2 + 24)] & 61440) 16384
([(ARG2 + 24)] & 61440) INT_AND [(ARG2 + 24)] 61440
(RSP + -88) PTRSUB RSP -88
(RSP + -104) PTRSUB RSP -104
 STORE 433 (ARG3 + 8) A_Stack[-0x50]:8
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG2 + 24) CAST (ARG2 + 24)
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
(RSP + -104) PTRSUB RSP -104
 STORE 433 (ARG3 + 32) A_Stack[-0x38]:8
f() CALL func (RSP + -104) (RSP + -88) (RSP + -88)
(ARG2 + 24) CAST (ARG2 + 24)
 STORE 433 (ARG3 + 24) A_Stack[-0x40]:8
(RSP + -88) PTRSUB RSP -88
0 INT_EQUAL ([(ARG2 + 24)] & 61440) 24576
([(ARG2 + 24)] & 61440) INT_AND [(ARG2 + 24)] 61440
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
2 COPY 2
(ARG2 + 24) CAST (ARG2 + 24)
 CBRANCH (([(ARG2 + 24)] & 61440) INT_EQUAL 24576)
 BRANCH VZERO
8 COPY 8
(f() # f()) PIECE f() f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (f() # f())
(f() # f()) INT_AND (f() # f()) -1
 RETURN 1
 BRANCH VZERO
0 INT_EQUAL ([(ARG2 + 24)] & 61440) 8192
([(ARG2 + 24)] & 61440) INT_AND [(ARG2 + 24)] 61440
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
(ARG2 + 24) CAST (ARG2 + 24)
5 COPY 5
 CALL func (RSP + -88) 1
 STORE 433 (ARG3 + 8) A_Stack[-0x50]:8
 STORE 433 (ARG3 + 24) A_Stack[-0x40]:8
A_Stack[-0x68]:8 COPY A_Stack[-0x68]:8
A_Stack[-0x60]:8 COPY A_Stack[-0x60]:8
 STORE 433 (ARG3 + 40) A_Stack[-0x30]:8
A_Stack[-0x68]:8 COPY A_Stack[-0x68]:8
A_Stack[-0x60]:8 COPY A_Stack[-0x60]:8
 STORE 433 (ARG3 + 16) A_Stack[-0x48]:8
 STORE 433 (ARG3 + 32) A_Stack[-0x38]:8
 STORE 433 (ARG3 + 8) A_Stack[-0x50]:8
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -88) 0
 BRANCH VZERO
 STORE 433 (ARG3 + 24) A_Stack[-0x40]:8
 STORE 433 (ARG3 + 40) A_Stack[-0x30]:8
(RSP + -88) PTRSUB RSP -88
 STORE 433 (ARG3 + 16) A_Stack[-0x48]:8
 STORE 433 (ARG3 + 32) A_Stack[-0x38]:8
f() CALL func ARG1 (RSP + -200) (RSP + -200)
f() CALL func f() (RSP + -344) ARG2 (RSP + -344)
40 CAST 40
(RSP + -344) PTRSUB RSP -344
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f() (RSP + -344) f()
(f() / 2147483647) SUBPIECE f() 0
(RSP + -200) PTRSUB RSP -200
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 8
(RSP + -200) PTRSUB RSP -200
(RSP + -344) PTRSUB RSP -344
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func (RSP + -360)
(RSP + -360) PTRSUB RSP -360
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -200)
 CALL func (RSP + -200)
f() INT_AND f() -1
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
(f() / 2147483647) SUBPIECE f() 8
 STORE 433 ARG1 (f() / 2147483647)
(ARG1 + 8) PTRADD ARG1 1 8
0 INT_NOTEQUAL 0 [(f() + 40)]
0 INT_EQUAL f() 0
(f() + 40) CAST (f() + 40)
(RSP + -88) PTRSUB RSP -88
(FS_OFFSET + 40) INT_ADD 0 40
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -88)
f() CALL func (RSP + -120)
0 COPY 0
(RSP + 8) PTRSUB RSP 8
f() CALL func (RSP + 8) (RSP + -88)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(RSP + -88) PTRSUB RSP -88
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -120) PTRSUB RSP -120
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_EQUAL 0)
 RETURN 0 (f() # f())
 CALL libcall___stack_chk_fail_thunk
(f() # f()) INT_AND (f() # f()) -1
(f() # f()) PIECE f() f()
 RETURN 1
(RSP + -88) PTRSUB RSP -88
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
 STORE 433 (ARG1 + 8) (f() / 4611686014132420609)
(RSP + -104) PTRSUB RSP -104
 BRANCH VZERO
(A_Stack[-0x74]:4 # f()) PIECE A_Stack[-0x74]:4 f()
 CALL func (RSP + -104)
f() CALL func (RSP + -88)
A_Stack[-0x60]:8 COPY A_Stack[-0x60]:8
(f() / 2147483647) INT_RIGHT f() 64
0 COPY 0
f() CALL func ARG1 ARG2 ARG3 0 ARG4 1
 RETURN 0 f()
f() INT_AND f() -1
f() CALL func ARG1 (RSP + -36) ARG2 0 0 2
(RSP + -36) PTRSUB RSP -36
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
f() INT_AND f() -1
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
f() CALL func (RSP + -232) ARG2 ARG3 1 f() ARG4
f() CALL func ARG1 (RSP + -200) (RSP + -200)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -200) PTRSUB RSP -200
 CBRANCH (f(RSP) INT_NOTEQUAL -1)
0 INT_NOTEQUAL f(RSP) -1
 CALL func (RSP + -200)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -200) PTRSUB RSP -200
f(RSP) CALL func (RSP + -248) 47 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -248) PTRSUB RSP -248
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
f() INT_AND f() -1
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
 RETURN 0 f()
 CALL libcall___assert_fail_thunk 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Path.cpp 740 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -248) PTRSUB RSP -248
(f() / 2147483647) SUBPIECE f() 8
40 CAST 40
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -200)
f() CALL func (RSP + -248)
(RSP + -232) PTRSUB RSP -232
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
0 COPY 0
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Path.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Path.cpp
f() CALL func 256 128
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -200) PTRSUB RSP -200
[40] LOAD 433 40
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -232) f() f()
(f() / 2147483647) SUBPIECE f() 0
(RSP + -232) PTRSUB RSP -232
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 17) INT_ADD ARG1 17
f() CALL func ARG1
 STORE 433 (ARG1 + 16) ARG2
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 STORE 433 (ARG1 + 17) 1
(ARG1 + 17) CAST (ARG1 + 17)
llvm::Twine::Twine(llvm::Twine::NodeKind) COPY llvm::Twine::Twine(llvm::Twine::NodeKind)
 RETURN 1
 RETURN 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h
isNullary() && "Invalid kind!" COPY isNullary() && "Invalid kind!"
 CALL libcall___assert_fail_thunk isNullary() && "Invalid kind!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h 165 llvm::Twine::Twine(llvm::Twine::NodeKind)
 STORE 433 (ARG1 + 8) ARG4
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
ARG1 CAST ARG1
f() CALL func ARG1
 STORE 433 (ARG1 + 16) ARG3
 STORE 433 (ARG1 + 17) ARG5
(ARG1 + 17) CAST (ARG1 + 17)
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(ARG1 + 17) INT_ADD ARG1 17
(ARG1 + 16) CAST (ARG1 + 16)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h
isValid() && "Invalid twine!" COPY isValid() && "Invalid twine!"
 RETURN 1
 RETURN 0
 CALL libcall___assert_fail_thunk isValid() && "Invalid twine!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h 179 llvm::Twine::Twine(llvm::Twine::Child, llvm::Twine::NodeKind, llvm::Twine::Child, llvm::Twine::NodeKind)
llvm::Twine::Twine(llvm::Twine::Child, llvm::Twine::NodeKind, llvm::Twine::Child, llvm::Twine::NodeKind) COPY llvm::Twine::Twine(llvm::Twine::Child, llvm::Twine::NodeKind, llvm::Twine::Child, llvm::Twine::NodeKind)
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 [ARG2]
 CALL func ARG1 f(ARG2) f() f(ARG3) f()
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 0
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 [ARG3]
(ARG1 + 16) PTRADD ARG1 2 8
ARG1 COPY ARG1
f() CALL func ARG2
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 1 8
ARG2 COPY ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 16) PTRADD ARG2 2 8
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG3
(ARG3 + 16) PTRADD ARG3 2 8
f() CALL func ARG3
[ARG3] LOAD 433 ARG3
f() CALL func ARG3
ARG3 COPY ARG3
f() CALL func ARG3
(ARG3 + 8) PTRADD ARG3 1 8
[ARG3] LOAD 433 ARG3
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH f()
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 STORE 433 (ARG1 + 8) [(ARG3 + 8)]
 CBRANCH (f() INT_EQUAL 0)
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
0 INT_EQUAL f() 0
 BRANCH VZERO
 STORE 433 (ARG1 + 16) [(ARG3 + 16)]
[(ARG3 + 16)] LOAD 433 (ARG3 + 16)
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 STORE 433 (ARG1 + 8) [(ARG2 + 8)]
2 COPY 2
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 BRANCH VZERO
2 COPY 2
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 STORE 433 (ARG1 + 16) [(ARG2 + 16)]
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
 BRANCH VZERO
[ARG3] CAST [ARG3]
[ARG2] CAST [ARG2]
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG3 ARG2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
0 INT_EQUAL ARG3 0
ARG4 COPY ARG4
f() CALL func (RSP + -56) ARG4 ARG5 ARG6
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -120) ARG1 (RSP + -152) ARG1
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
(RSP + -152) PTRSUB RSP -152
 CBRANCH (ARG3 INT_EQUAL 0)
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -88) (RSP + -200) (RSP + -200)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(RSP + -88) PTRSUB RSP -88
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -56) (RSP + -120) (RSP + -88) (RSP + -120)
(RSP + -200) PTRSUB RSP -200
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -152) f(-%%%%%% , -%%%%%%.) f(-%%%%%% , -%%%%%%.)
(RSP + -152) PTRSUB RSP -152
(RSP + -120) PTRSUB RSP -120
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
f() INT_AND f() -1
 BRANCH VZERO
-%%%%%%. COPY -%%%%%%.
-%%%%%% COPY -%%%%%%
f() CALL func ARG1 ARG2 ARG3 ARG4 ARG5 1
 RETURN 0 f()
f() INT_AND f() -1
f() CALL func ARG1 ARG2 ARG3 (RSP + -36) ARG4 2
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -36) PTRSUB RSP -36
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
f() INT_AND f() -1
 RETURN 1
 CALL func (RSP + -56) ARG1 (RSP + -88) ARG1
f() CALL func (RSP + -56) (RSP + -92) ARG2 1 0 0
[40] LOAD 433 40
(RSP + -88) PTRSUB RSP -88
(RSP + -88) PTRSUB RSP -88
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -92) PTRSUB RSP -92
 CALL func (RSP + -88) -%%%%%%
-%%%%%% COPY -%%%%%%
(FS_OFFSET + 40) INT_ADD 0 40
40 CAST 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
f() INT_AND f() -1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 1 8
 RETURN 0 f()
 CBRANCH ([ARG1] INT_EQUAL [ARG2])
0 INT_EQUAL [ARG1] [ARG2]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL [(ARG2 + 8)])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_EQUAL [(ARG1 + 8)] [(ARG2 + 8)]
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CALL func ARG1 ARG2 ARG2
f() CALL func ARG1
0 INT_LESS f() ARG2
 CBRANCH (f() INT_LESS ARG2)
 RETURN 0
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1
 CALL func ARG1 f() f()
 CALL func ARG1 f() (f() + f()) f()
 CALL func ARG1 4096
f() CALL func ARG1
 CALL func ARG1 (f() * 2) (f() * 2)
f() CALL func ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
f() CALL libcall_getenv_thunk 4669866
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() [(f() + 40)]
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -168)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH f()
(A_Stack[-0x120]:8 # A_Stack[-0x128]:8) PIECE A_Stack[-0x120]:8 A_Stack[-0x128]:8
0 INT_NOTEQUAL f() 0
(f() + 40) CAST (f() + 40)
(A_Stack[-0x130]:8 # A_Stack[-0x138]:8) PIECE A_Stack[-0x130]:8 A_Stack[-0x138]:8
[(f() + 40)] LOAD 433 (f() + 40)
4669866 COPY 4669866
 CALL func (RSP + -120)
(RSP + -120) PTRSUB RSP -120
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 CBRANCH ([f()] INT_NOTEQUAL 12)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CAST f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 INT_NOTEQUAL f() 0
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -280) PTRSUB RSP -280
f() CALL libcall_generic_category_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
f() CALL libcall_getcwd_thunk f() f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -280) [f()] f() [f()]
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() * 2) INT_MULT f() 2
 CBRANCH (f() INT_NOTEQUAL 0)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_NOTEQUAL 1)
4669449 PTRSUB 0 4669449
(RSP + -200) PTRSUB RSP -200
(RSP + -200) PTRSUB RSP -200
0 COPY 0
0 COPY 0
f() CALL func (RSP + -200) (RSP + -120) (RSP + -120)
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -200) 4669449
f() CALL func (RSP + -328)
(A_Stack[-0x120]:8 # A_Stack[-0x128]:8) PIECE A_Stack[-0x120]:8 A_Stack[-0x128]:8
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(A_Stack[-0x130]:8 # A_Stack[-0x138]:8) PIECE A_Stack[-0x130]:8 A_Stack[-0x138]:8
(RSP + -328) PTRSUB RSP -328
 CBRANCH (f() INT_NOTEQUAL 0)
(A_Stack[-0x130]:8 # A_Stack[-0x138]:8) PIECE A_Stack[-0x130]:8 A_Stack[-0x138]:8
(RSP + -344) PTRSUB RSP -344
f() CALL func (RSP + -232) (RSP + -168) (RSP + -168)
f() CALL func (RSP + -344)
 CALL func (RSP + -232) f() f()
0 COPY 0
(RSP + -232) PTRSUB RSP -232
(RSP + -232) PTRSUB RSP -232
0 INT_NOTEQUAL f() 1
(RSP + -168) PTRSUB RSP -168
(A_Stack[-0x120]:8 # A_Stack[-0x128]:8) PIECE A_Stack[-0x120]:8 A_Stack[-0x128]:8
 CALL func (RSP + -264) f() f()
(RSP + -264) PTRSUB RSP -264
(A_Stack[-0x120]:8 # A_Stack[-0x128]:8) PIECE A_Stack[-0x120]:8 A_Stack[-0x128]:8
f() CALL func (RSP + -264)
0 INT_NOTEQUAL f() 0
(A_Stack[-0x130]:8 # A_Stack[-0x138]:8) PIECE A_Stack[-0x130]:8 A_Stack[-0x138]:8
(RSP + -264) PTRSUB RSP -264
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -280)
(f() + f()) PTRADD f() f() 1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL libcall_strlen_thunk f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -280) PTRSUB RSP -280
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -296) PTRSUB RSP -296
(f() / 2147483647) SUBPIECE f() 0
(RSP + -168) PTRSUB RSP -168
(RSP + -120) PTRSUB RSP -120
0 INT_NOTEQUAL f() 0
f() CALL func (RSP + -120)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -168)
f() CALL func (RSP + -312) (RSP + -296) (RSP + -296)
(RSP + -312) PTRSUB RSP -312
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -280)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -280) PTRSUB RSP -280
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
0 INT_NOTEQUAL [f()] 12
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
[f()] LOAD 433 f()
f() CALL libcall_strlen_thunk f()
f() CALL libcall___errno_location_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CAST f()
(f() # f()) INT_AND (f() # f()) -1
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
 RETURN 0 (f() # f())
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() # f()) PIECE f() f()
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1
 RETURN 0
0 INT_EQUAL ARG3 0
 CALL func ARG1 (RSP + -360) (RSP + -360)
 CALL func ARG2 (RSP + -200) (RSP + -200)
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 1 8
f() CALL func ARG2
([(ARG2 + 8)] - [ARG2]) INT_SUB [(ARG2 + 8)] [ARG2]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL f() 0
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 RETURN 0 (f() # f())
(f() # f()) PIECE f() f()
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() # f()) INT_AND (f() # f()) -1
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (ARG3 INT_EQUAL 0)
(RSP + -536) PTRSUB RSP -536
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -424) PTRSUB RSP -424
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -520) PTRSUB RSP -520
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 4611686014132420609) (f() / 2147483647)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -552) PTRSUB RSP -552
f() CALL func f() f(ARG2) f()
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -200) (RSP + -488) (RSP + -456) (RSP + -424) (RSP + -392)
(RSP + -456) PTRSUB RSP -456
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -456) (RSP + -536) (RSP + -536)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -392) PTRSUB RSP -392
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -488) (RSP + -552) (RSP + -552)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -504) PTRSUB RSP -504
f() CALL func (RSP + -360)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -360)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -392) PTRSUB RSP -392
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -392)
(f() / 2147483647) SUBPIECE f() 0
f() COPY f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -200)
(f() / 2147483647) SUBPIECE f() 0
(A_Stack[-0x1f0]:8 # A_Stack[-0x1f8]:8) PIECE A_Stack[-0x1f0]:8 A_Stack[-0x1f8]:8
 CALL func (RSP + -392) (RSP + -504) (RSP + -504)
(A_Stack[-0x200]:8 # A_Stack[-0x208]:8) PIECE A_Stack[-0x200]:8 A_Stack[-0x208]:8
(A_Stack[-0x210]:8 # A_Stack[-0x218]:8) PIECE A_Stack[-0x210]:8 A_Stack[-0x218]:8
(f() / 2147483647) SUBPIECE f() 8
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -200) PTRSUB RSP -200
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 4611686014132420609) (f() / 2147483647)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() # f()) PIECE f() f()
 CALL func (RSP + -424) (RSP + -520) (RSP + -520)
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_EQUAL 0)
(RSP + -392) PTRSUB RSP -392
0 INT_EQUAL f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -360) PTRSUB RSP -360
 CALL func (RSP + -392)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -424) PTRSUB RSP -424
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -392) PTRSUB RSP -392
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -360) PTRSUB RSP -360
(f() / 2147483647) INT_RIGHT f() 64
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -488) PTRSUB RSP -488
(f() / 2147483647) SUBPIECE f() 0
(RSP + -360) PTRSUB RSP -360
(A_Stack[-0x220]:8 # A_Stack[-0x228]:8) PIECE A_Stack[-0x220]:8 A_Stack[-0x228]:8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -360) PTRSUB RSP -360
(f() / 2147483647) INT_RIGHT f() 64
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f() f(ARG2) f()
(f() / 2147483647) SUBPIECE f() 8
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() COPY f()
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
(RSP + -488) PTRSUB RSP -488
(f() / 2147483647) SUBPIECE f() 0
(RSP + -456) PTRSUB RSP -456
f() CALL func (RSP + -360)
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -200)
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -392)
0 INT_NOTEQUAL f() 0
0 INT_NOTEQUAL ([(ARG2 + 8)] - [ARG2]) 0
(RSP + -568) PTRSUB RSP -568
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(RSP + -392) PTRSUB RSP -392
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CALL func (RSP + -392) (RSP + -568) (RSP + -568)
 CBRANCH (([(ARG2 + 8)] - [ARG2]) INT_NOTEQUAL 0)
(RSP + -392) PTRSUB RSP -392
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
(A_Stack[-0x184]:4 # f()) PIECE A_Stack[-0x184]:4 f()
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 RETURN 1
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
A_Stack[-0x180]:8 COPY A_Stack[-0x180]:8
(A_Stack[-0x1f0]:8 # A_Stack[-0x1f8]:8) PIECE A_Stack[-0x1f0]:8 A_Stack[-0x1f8]:8
(A_Stack[-0x200]:8 # A_Stack[-0x208]:8) PIECE A_Stack[-0x200]:8 A_Stack[-0x208]:8
(f() / 2147483647) SUBPIECE f() 8
(A_Stack[-0x184]:4 # A_Stack[-0x188]:4) PIECE A_Stack[-0x184]:4 A_Stack[-0x188]:4
(A_Stack[-0x210]:8 # A_Stack[-0x218]:8) PIECE A_Stack[-0x210]:8 A_Stack[-0x218]:8
(A_Stack[-0x220]:8 # A_Stack[-0x228]:8) PIECE A_Stack[-0x220]:8 A_Stack[-0x228]:8
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -392)
 CALL func (RSP + -360)
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -360)
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(RSP + -360) PTRSUB RSP -360
(f() / 2147483647) SUBPIECE f() 0
(RSP + -360) PTRSUB RSP -360
(f() / 2147483647) SUBPIECE f() 0
(RSP + -392) PTRSUB RSP -392
f() CALL func ARG1 ARG2 1 ARG2
f() INT_AND f() -1
 RETURN 0 f()
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 17) INT_ADD ARG1 17
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG1 + 16) 1
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 STORE 433 (ARG1 + 17) 1
(ARG1 + 17) CAST (ARG1 + 17)
 RETURN 0
 CALL libcall___assert_fail_thunk isValid() && "Invalid twine!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h 256 llvm::Twine::Twine()
llvm::Twine::Twine() COPY llvm::Twine::Twine()
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h
isValid() && "Invalid twine!" COPY isValid() && "Invalid twine!"
f() CALL func (RSP + -56) ARG1 0 ARG1
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -56) PTRSUB RSP -56
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -56)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 RETURN 1
f() INT_AND f() -1
f() CALL func ARG1 ARG2 ARG2
0 COPY 0
0 INT_XOR f() 1
 RETURN 0 0
f() CALL func ARG1 (RSP + -200) (RSP + -200)
f() CALL func (RSP + -232) ARG2 ARG3
f() CALL func (RSP + -232) ARG2 ARG3
f() CALL func (RSP + -232) ARG2 ARG3
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -200) PTRSUB RSP -200
(RSP + -232) PTRSUB RSP -232
 CALL func (RSP + -200)
(RSP + -232) PTRSUB RSP -232
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 8
(RSP + -280) PTRSUB RSP -280
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
 CALL func (RSP + -200)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -232) 2
(f() / 2147483647) SUBPIECE f() 0
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -264) PTRSUB RSP -264
 CBRANCH (f() INT_EQUAL 0)
(RSP + -232) PTRSUB RSP -232
0 INT_EQUAL f() 0
0 COPY 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -232) PTRSUB RSP -232
(f() / 2147483647) SUBPIECE f() 8
(A_Stack[-0xf0]:8 # A_Stack[-0xf8]:8) PIECE A_Stack[-0xf0]:8 A_Stack[-0xf8]:8
 CALL func (RSP + -232) (RSP + -280) (RSP + -280)
f() CALL func (RSP + -264) (RSP + -232) (RSP + -232)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -200) PTRSUB RSP -200
 RETURN 0 f()
f() INT_AND f() -1
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_EQUAL 0)
(RSP + -232) PTRSUB RSP -232
(RSP + -280) PTRSUB RSP -280
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(A_Stack[-0x104]:4 # f()) PIECE A_Stack[-0x104]:4 f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(0 # (A_Stack[-0x104]:4 # f())) PIECE 0 (A_Stack[-0x104]:4 # f())
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -232) (RSP + -280) (RSP + -280)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -232) PTRSUB RSP -232
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL (f() / 4611686014132420609) 0
(A_Stack[-0x104]:4 # f()) PIECE A_Stack[-0x104]:4 f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(0 # (A_Stack[-0x104]:4 # f())) PIECE 0 (A_Stack[-0x104]:4 # f())
(f() / 2147483647) INT_RIGHT f() 64
f() CALL func (f() / 2147483647) (f() / 2147483647) (f() / 2147483647)
 CBRANCH ((f() / 4611686014132420609) INT_EQUAL 0)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -232) PTRSUB RSP -232
(A_Stack[-0x104]:4 # f()) PIECE A_Stack[-0x104]:4 f()
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL f() 0
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
(0 # (A_Stack[-0x104]:4 # f())) PIECE 0 (A_Stack[-0x104]:4 # f())
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -264)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -232) PTRSUB RSP -232
 BRANCH VZERO
(RSP + -264) PTRSUB RSP -264
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -248) PTRSUB RSP -248
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -232) (RSP + -248) (RSP + -248)
(f() / 2147483647) SUBPIECE f() 0
 STORE 433 ARG2 f()
f() LOAD 433 ARG2
f() CALL func ARG1 (RSP + -200) (RSP + -200)
f() CALL libcall_open_thunk f() 0
(f() / 2147483647) SUBPIECE f() 8
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -200)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -200) PTRSUB RSP -200
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func (RSP + -232)
(RSP + -200) PTRSUB RSP -200
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(f() / 2147483647) SUBPIECE f() 0
(f() + 40) INT_ADD f() 40
(f() / 2147483647) SUBPIECE f() 8
f() CAST f()
0 INT_NOTEQUAL f() [(f() + 40)]
 CALL func (RSP + -200)
0 INT_SLESS 4294967295 f()
 CBRANCH (4294967295 INT_SLESS f())
(RSP + -200) PTRSUB RSP -200
[(f() + 40)] LOAD 433 (f() + 40)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -232) PTRSUB RSP -232
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
 CALL func (RSP + -216)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH ([f()] INT_EQUAL 4)
0 INT_EQUAL [f()] 4
(f() / 2147483647) SUBPIECE f() 8
f() CALL libcall___errno_location_thunk
[f()] LOAD 433 f()
(RSP + -216) PTRSUB RSP -216
(f() / 2147483647) SUBPIECE f() 0
 RETURN 0 (f() # f())
(f() # f()) INT_AND (f() # f()) -1
(f() # f()) PIECE f() f()
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
 CALL func (RSP + -216) [f()] f() [f()]
f() CALL libcall___errno_location_thunk
(RSP + -216) PTRSUB RSP -216
[f()] LOAD 433 f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
f() CALL libcall_generic_category_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func ARG1 (RSP + -88) (RSP + -88)
f() CALL func ARG2 (RSP + -84) 0
(RSP + -88) PTRSUB RSP -88
(RSP + -56) PTRSUB RSP -56
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (0 INT_EQUAL [(f() + 40)])
0 COPY 0
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
f() CALL func (RSP + -56)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL 0)
 CALL libcall_operator.delete[]_thunk f()
 CBRANCH (4294967295 INT_SLESS f())
(f() / 2147483647) SUBPIECE f() 0
0 INT_SLESS (f() / 2147483647) 1
f() CALL libcall_read_thunk f() f() 4096
 CBRANCH ((f() / 2147483647) INT_SLESS 1)
(f() # f()) PIECE f() f()
 RETURN 1
(f() # f()) INT_AND (f() # f()) -1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (f() # f())
 CBRANCH (f() INT_SLESS 0)
 CALL func (RSP + -56)
[f()] LOAD 433 f()
(f() # f()) PIECE f() f()
f() CALL libcall___errno_location_thunk
 BRANCH VZERO
 CALL func (RSP + -56) [f()] f() [f()]
(RSP + -56) PTRSUB RSP -56
(f() # f()) PIECE f() f()
(RSP + -56) PTRSUB RSP -56
f() CALL libcall_generic_category_thunk
 CBRANCH ((f() / 2147483647) INT_SLESS 0)
(f() - (f() / 2147483647)) INT_SUB f() (f() / 2147483647)
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 CALL libcall_close_thunk A_Stack[-0x58]:4
 CALL libcall_close_thunk f()
 CBRANCH (f() INT_SLESS 0)
0 INT_SLESS f() 0
4096 COPY 4096
0 COPY 0
0 INT_NOTEQUAL f() 0
 BRANCH VZERO
(A_Stack[-0x34]:4 # f()) PIECE A_Stack[-0x34]:4 f()
f() CALL libcall_operator.new[]_thunk 4096
 CALL libcall_close_thunk f()
f() CALL libcall_write_thunk f() f() f()
f() INT_SEXT f()
(f() / 2147483647) SUBPIECE f() 0
0 INT_SLESS (f() / 2147483647) 0
0 INT_SLESS f() 0
0 INT_SLESS 4294967295 f()
0 COPY 0
(RSP + -84) PTRSUB RSP -84
(A_Stack[-0x34]:4 # f()) PIECE A_Stack[-0x34]:4 f()
f() CALL func
0 INT_EQUAL f() 0
 BRANCH VZERO
(ARG1 + 40) INT_ADD ARG1 40
 RETURN 0 [(ARG1 + 40)]
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
[(ARG1 + 40)] COPY [(ARG1 + 40)]
(ARG1 + 40) CAST (ARG1 + 40)
0 INT_ZEXT 0
(f() & 4294967040) INT_OR (f() & 4294967040) 0
f() CALL func (RSP + 8)
0 INT_NOTEQUAL f() 0
(RSP + 8) PTRSUB RSP 8
 RETURN 0 (f() & 4294967040)
(f() & 4294967040) INT_AND f() 4294967040
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
f() CALL func
0 COPY 0
f() CALL func (RSP + 8)
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
1 COPY 1
 RETURN 0 0
 RETURN 0 1
(RSP + 8) PTRSUB RSP 8
(f() & 4294967040) INT_OR (f() & 4294967040) 0
f() CALL func (RSP + 8)
(RSP + 8) PTRSUB RSP 8
 RETURN 0 (f() & 4294967040)
(f() & 4294967040) INT_AND f() 4294967040
0 INT_EQUAL f() 3
0 INT_ZEXT 0
f() CALL func ARG1 (RSP + -88) (RSP + -88)
 STORE 433 ARG2 f()
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
f() CALL func (RSP + -104)
(RSP + -88) PTRSUB RSP -88
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -88)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
0 COPY 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -88) PTRSUB RSP -88
(RSP + -104) PTRSUB RSP -104
(f() + 40) CAST (f() + 40)
(f() # f()) PIECE f() f()
 CALL libcall___stack_chk_fail_thunk
(f() # f()) INT_AND (f() # f()) -1
 RETURN 0 (f() # f())
 RETURN 1
(RSP + -104) PTRSUB RSP -104
f() CALL func
(A_Stack[-0x64]:4 # f()) PIECE A_Stack[-0x64]:4 f()
 CALL func (RSP + -104)
 BRANCH VZERO
(A_Stack[-0x64]:4 # f()) PIECE A_Stack[-0x64]:4 f()
f() CALL func (RSP + 8)
(RSP + 8) PTRSUB RSP 8
 RETURN 0 (f() & 4294967040)
(f() & 4294967040) INT_AND f() 4294967040
0 INT_EQUAL f() 2
0 INT_ZEXT 0
(f() & 4294967040) INT_OR (f() & 4294967040) 0
f() CALL func ARG1 (RSP + -88) (RSP + -88)
 STORE 433 ARG2 f()
0 COPY 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -88) PTRSUB RSP -88
(RSP + -104) PTRSUB RSP -104
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
f() CALL func (RSP + -104)
(RSP + -88) PTRSUB RSP -88
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -88)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() # f()) INT_AND (f() # f()) -1
 RETURN 0 (f() # f())
 RETURN 1
(f() # f()) PIECE f() f()
 CALL libcall___stack_chk_fail_thunk
 CALL func (RSP + -104)
 BRANCH VZERO
(A_Stack[-0x64]:4 # f()) PIECE A_Stack[-0x64]:4 f()
(RSP + -104) PTRSUB RSP -104
f() CALL func
(A_Stack[-0x64]:4 # f()) PIECE A_Stack[-0x64]:4 f()
f() CALL func
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 1)
1 COPY 1
 RETURN 0 1
0 COPY 0
 RETURN 0 0
 CBRANCH (f() INT_NOTEQUAL 1)
f() CALL func
0 INT_NOTEQUAL f() 1
f() CALL func
0 INT_NOTEQUAL f() 1
f() CALL func ARG1 (RSP + -88) (RSP + -88)
 STORE 433 ARG2 f()
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
f() CALL func (RSP + -104)
(RSP + -88) PTRSUB RSP -88
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -88)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
0 COPY 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -88) PTRSUB RSP -88
(RSP + -104) PTRSUB RSP -104
(f() + 40) CAST (f() + 40)
(f() # f()) INT_AND (f() # f()) -1
 RETURN 0 (f() # f())
 RETURN 1
(f() # f()) PIECE f() f()
 CALL libcall___stack_chk_fail_thunk
 BRANCH VZERO
(A_Stack[-0x64]:4 # f()) PIECE A_Stack[-0x64]:4 f()
(RSP + -104) PTRSUB RSP -104
f() CALL func
(A_Stack[-0x64]:4 # f()) PIECE A_Stack[-0x64]:4 f()
 CALL func (RSP + -104)
(ARG1 + 40) PTRADD ARG1 40 1
(ARG1 + 48) PTRADD ARG1 48 1
 CALL libcall_operator=_thunk ARG1 (RSP + -216)
(ARG1 + 56) PTRADD ARG1 56 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 72) PTRADD ARG1 72 1
(ARG1 + 32) PTRADD ARG1 32 1
 CALL func (RSP + -184) ARG2 (RSP + -312) (RSP + -280) (RSP + -248)
 CALL libcall_~basic_string_thunk (RSP + -216)
[40] LOAD 433 40
f() CALL libcall_data_thunk
4669146 PTRSUB 0 4669146
(RSP + -216) PTRSUB RSP -216
 CALL func (RSP + -184)
(RSP + -312) PTRSUB RSP -312
40 CAST 40
 CALL func (RSP + -184) (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
4669146 PTRSUB 0 4669146
(f() / 2147483647) SUBPIECE f() 8
f() CALL libcall_length_thunk
 STORE 433 (ARG1 + 32) A_Stack[0x8]:8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -312) PTRSUB RSP -312
f() CALL func (RSP + -184)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -280) PTRSUB RSP -280
(f() / 2147483647) INT_RIGHT f() 64
(RSP + -216) CAST (RSP + -216)
(RSP + -216) PTRSUB RSP -216
 CALL func (RSP + -248) 4669146
(RSP + -248) PTRSUB RSP -248
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -312) 4669146
 STORE 433 (ARG1 + 56) A_Stack[0x20]:8
(ARG1 + 56) CAST (ARG1 + 56)
(RSP + -248) PTRSUB RSP -248
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(ARG1 + 48) CAST (ARG1 + 48)
(RSP + -184) PTRSUB RSP -184
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 STORE 433 (ARG1 + 48) A_Stack[0x18]:8
(ARG1 + 40) CAST (ARG1 + 40)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -184) PTRSUB RSP -184
(ARG1 + 32) CAST (ARG1 + 32)
 STORE 433 (ARG1 + 40) A_Stack[0x10]:8
 CALL func (RSP + -280) 4669146
(RSP + -184) PTRSUB RSP -184
 STORE 433 (ARG1 + 72) A_Stack[0x30]:8
(RSP + -248) PTRSUB RSP -248
(RSP + -280) PTRSUB RSP -280
(RSP + -216) PTRSUB RSP -216
(ARG1 + 72) CAST (ARG1 + 72)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -184) PTRSUB RSP -184
 STORE 433 (ARG1 + 64) A_Stack[0x28]:8
4669146 PTRSUB 0 4669146
 CALL func (RSP + -216) (RSP + -248) (RSP + -248)
(f() / 2147483647) SUBPIECE f() 8
(ARG1 + 64) CAST (ARG1 + 64)
f() CALL func f() f() f()
(FS_OFFSET + 40) INT_ADD 0 40
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
ARG1 COPY ARG1
 RETURN 0 ARG1
[ARG1] LOAD 433 ARG1
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func [ARG1]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
40 INT_ADD 0 40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
[ARG1] LOAD 433 ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func [ARG1]
[40] LOAD 433 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 STORE 433 ARG1 ARG2
 RETURN 0
ARG1 COPY ARG1
0 INT_LESS ARG2 4
ARG2 COPY ARG2
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
 CBRANCH (ARG2 INT_LESS 4)
 CBRANCH (f() INT_EQUAL 255)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH f()
 CALL func (RSP + -84) 0
 CALL func (RSP + -84) 1
(RSP + -84) PTRSUB RSP -84
(RSP + -84) PTRSUB RSP -84
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 33)
0 INT_LESS f() 34
0 INT_LESS 7 ARG2
 CBRANCH (f() INT_LESS 34)
 CBRANCH (7 INT_LESS ARG2)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH (f() INT_EQUAL 207)
 CBRANCH (f() INT_EQUAL 250)
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 1
0 INT_EQUAL f() 250
0 COPY 0
 CBRANCH (f() INT_EQUAL 144)
0 INT_LESS f() 145
(RSP + -104) PTRSUB RSP -104
 CBRANCH (f() INT_LESS 145)
f() CALL func (RSP + -104) 1
 CBRANCH (f() INT_EQUAL 2)
0 INT_EQUAL f() 2
 CBRANCH (f() INT_NOTEQUAL 70)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_EQUAL 250)
f() CALL func (RSP + -104) 3
 CBRANCH (f() INT_EQUAL 206)
0 INT_EQUAL f() 206
0 COPY 0
(RSP + -104) PTRSUB RSP -104
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH (f() INT_EQUAL 192)
f() CALL func (RSP + -104) 2
 CBRANCH (f() INT_EQUAL 23)
0 INT_EQUAL f() 23
(RSP + -104) PTRSUB RSP -104
0 COPY 0
 CBRANCH (f() INT_EQUAL 240)
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 1
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
 CBRANCH (f() INT_EQUAL 254)
0 INT_EQUAL f() 254
 CBRANCH (f() INT_EQUAL 0)
 CALL func (RSP + -84) 20
(RSP + -84) PTRSUB RSP -84
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 254)
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_LESS 78)
0 INT_EQUAL f() 33
 CBRANCH (f() INT_EQUAL 100)
0 INT_EQUAL f() 100
 CBRANCH (f() INT_LESS 203)
 CBRANCH (f() INT_EQUAL 222)
0 INT_EQUAL f() 144
0 INT_EQUAL f() 222
 CBRANCH f()
0 INT_LESS f() 223
f() CALL func (RSP + -104) 1
0 INT_EQUAL f() 192
(RSP + -104) PTRSUB RSP -104
 CBRANCH (f() INT_LESS 223)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 CBRANCH (f() INT_EQUAL 80)
 CBRANCH (f() INT_EQUAL 90)
0 INT_LESS f() ARG2
f() INT_ZEXT f()
f() CALL func (ARG1 + 60)
ARG1 CAST ARG1
(ARG1 + 60) INT_ADD ARG1 60
 CBRANCH (f() INT_LESS ARG2)
 CBRANCH f()
 CBRANCH (f() INT_EQUAL 190)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH f()
 CALL func (RSP + -84) 19
 BRANCH VZERO
(RSP + -84) PTRSUB RSP -84
 CBRANCH (f() INT_EQUAL 222)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH (f(ARG2) INT_LESS 8)
0 INT_SLESS 42 f()
 CBRANCH (42 INT_SLESS f())
f() CALL func (RSP + -104) 7
(RSP + -104) PTRSUB RSP -104
0 COPY 0
 CBRANCH f()
0 COPY 0
0 COPY 0
 CBRANCH f()
0 COPY 0
0 COPY 0
 CBRANCH (f(ARG2) INT_LESS 28)
32 COPY 32
255 COPY 255
0 COPY 0
 CBRANCH (f(ARG2) INT_LESS 9)
0 INT_LESS f(ARG2) 9
0 COPY 0
0 COPY 0
0 INT_LESS f(ARG2) 28
28 COPY 28
(RSP + -104) PTRSUB RSP -104
 CBRANCH (f() INT_EQUAL 11)
f() CALL func (RSP + -104) 3
0 INT_EQUAL f() 11
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 207)
f() CALL func (RSP + -104) 3
(RSP + -104) PTRSUB RSP -104
1 COPY 1
0 INT_EQUAL f() 207
 CBRANCH (f() INT_EQUAL 254)
0 INT_EQUAL f() 186
(RSP + -104) PTRSUB RSP -104
 CBRANCH (f() INT_EQUAL 186)
f() CALL func (RSP + -104) 2
(RSP + -84) PTRSUB RSP -84
 CALL func (RSP + -84) 23
(RSP + -104) PTRSUB RSP -104
 BRANCH VZERO
f() CALL func (RSP + -104) 1
0 INT_EQUAL f() 0
 CBRANCH (f() INT_SLESS 3)
0 INT_EQUAL f() 3
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 3)
 CBRANCH (f() INT_EQUAL 104)
 CBRANCH (f() INT_EQUAL 67)
f() CALL func (RSP + -104) 2
 CBRANCH (f() INT_EQUAL 192)
0 INT_EQUAL f() 192
(RSP + -104) PTRSUB RSP -104
 CBRANCH f()
0 CAST 0
0 INT_EQUAL f() 2
(RSP + -104) PTRSUB RSP -104
(RSP + -104) PTRSUB RSP -104
 CBRANCH 0
f() CALL func (RSP + -104) f() f()
f() CALL func (RSP + -104) 5
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 INT_EQUAL f() 66
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 66)
 CBRANCH (f() INT_EQUAL 196)
0 INT_LESS (f() + 131) 2
0 INT_EQUAL f() 196
(f() + 131) INT_SUB f() 131
 CBRANCH ((f() + 131) INT_LESS 2)
(RSP + -84) PTRSUB RSP -84
 CALL func (RSP + -84) 22
 BRANCH VZERO
 CBRANCH f()
0 INT_LESS 13 f(ARG2)
 CBRANCH (13 INT_LESS f(ARG2))
 CBRANCH f()
(RSP + -104) PTRSUB RSP -104
 BRANCHIND f()
0 COPY 0
 CBRANCH (f() INT_EQUAL 254)
f() CALL func (RSP + -104) 0
0 INT_EQUAL f() 254
 CBRANCH (15 INT_LESS f(ARG2))
(RSP + -104) PTRSUB RSP -104
f() INT_SEXT f()
((f() * 256) / 2147483647) SUBPIECE (f() * 256) 0
f() CALL func (RSP + -104) 15
(f() | ((f() * 256) / 2147483647)) INT_OR f() ((f() * 256) / 2147483647)
(RSP + -104) PTRSUB RSP -104
(f() * 256) INT_LEFT f() 8
 BRANCH VZERO
f() INT_SEXT f()
f() CALL func (RSP + -104) 14
 CBRANCH (f() INT_EQUAL 0)
!<thin>  COPY !<thin> 
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_memcmp_thunk ARG1 !<thin>  8
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 2)
0 INT_SLESS f() 3
(RSP + -84) PTRSUB RSP -84
 BRANCH VZERO
 CALL func (RSP + -84) 5
 CBRANCH (ARG2 INT_LESS 18)
 CBRANCH (f() INT_NOTEQUAL 69)
f() CALL func (RSP + -104) 1
0 INT_NOTEQUAL f() 69
(RSP + -104) PTRSUB RSP -104
 CBRANCH (f() INT_EQUAL 102)
0 INT_EQUAL f() 104
 CBRANCH f()
0 INT_LESS f(ARG2) 8
 CALL func (RSP + -84) 20
 BRANCH VZERO
(RSP + -84) PTRSUB RSP -84
0 INT_EQUAL f() 240
0 INT_LESS (f() + 206) 2
(f() + 206) INT_SUB f() 206
 CBRANCH ((f() + 206) INT_LESS 2)
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 3
0 INT_EQUAL f() 222
 CBRANCH (f() INT_LESS 2)
(RSP + -84) PTRSUB RSP -84
4668240 PTRSUB 0 4668240
 BRANCH VZERO
f() CALL libcall_memcmp_thunk (f(ARG1) + 12) 4668240 16
(f(ARG1) + 12) INT_ADD f(ARG1) 12
 CBRANCH (f() INT_EQUAL 0)
(f(ARG1) + 12) CAST (f(ARG1) + 12)
0 INT_EQUAL f() 0
f(ARG1) CAST f(ARG1)
 CALL func (RSP + -84) 21
0 COPY 0
(f() * 256) INT_LEFT f() 8
f() INT_SEXT f()
f() CALL func (RSP + -104) 13
(RSP + -104) PTRSUB RSP -104
f() INT_SEXT f()
(f() | ((f() * 256) / 2147483647)) INT_OR f() ((f() * 256) / 2147483647)
f() CALL func (RSP + -104) 12
(RSP + -104) PTRSUB RSP -104
((f() * 256) / 2147483647) SUBPIECE (f() * 256) 0
 CBRANCH (f() INT_EQUAL 127)
f() INT_ZEXT f()
0 INT_LESS ARG2 18
 CBRANCH (f() INT_LESS 128)
0 INT_LESS f() 128
 CBRANCH (f() INT_EQUAL 76)
4668228 PTRSUB 0 4668228
f() INT_ZEXT f()
ARG1 CAST ARG1
(ARG1 + f()) CAST (ARG1 + f())
f() CALL libcall_memcmp_thunk (ARG1 + f()) 4668228 4
(ARG1 + f()) INT_ADD f() ARG1
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 255)
f() CALL func (RSP + -104) 2
0 INT_EQUAL f() 255
(RSP + -104) PTRSUB RSP -104
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 2
 CBRANCH (f() INT_NOTEQUAL 76)
0 INT_NOTEQUAL f() 76
 BRANCH VZERO
(RSP + -84) PTRSUB RSP -84
 CALL func (RSP + -84) 20
 CALL func (RSP + -84) 21
 BRANCH VZERO
(RSP + -84) PTRSUB RSP -84
(RSP + -84) PTRSUB RSP -84
 CALL func (RSP + -84) 20
 BRANCH VZERO
f() CALL func (RSP + -104) 1
 CBRANCH (f() INT_EQUAL 237)
0 INT_EQUAL f() 237
(RSP + -104) PTRSUB RSP -104
(RSP + -84) PTRSUB RSP -84
 CALL func (RSP + -84) 4
 CALL func (RSP + -84) 3
 BRANCH VZERO
(RSP + -84) PTRSUB RSP -84
 BRANCH VZERO
(RSP + -104) PTRSUB RSP -104
 CBRANCH (f() INT_EQUAL 237)
f() CALL func (RSP + -104) 2
0 INT_EQUAL f() 237
0 INT_EQUAL f() 0
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 1
f() CALL func (RSP + -104) 1
0 INT_EQUAL f() 67
(RSP + -104) PTRSUB RSP -104
0 INT_EQUAL f() 76
 CBRANCH (f() INT_EQUAL 4)
 CALL func (RSP + -84) 7
(RSP + -84) PTRSUB RSP -84
 BRANCH VZERO
 CALL func (RSP + -84) 1
(RSP + -84) PTRSUB RSP -84
 BRANCH VZERO
(RSP + -104) PTRSUB RSP -104
0 INT_LESS 15 f(ARG2)
f() CALL func (RSP + -104) 0
 CBRANCH (f() INT_EQUAL 206)
0 INT_EQUAL f() 206
 CBRANCH (f() INT_LESS 101)
0 INT_EQUAL f() 80
0 INT_EQUAL f() 102
 CBRANCH (f() INT_EQUAL 77)
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 1
0 INT_EQUAL f() 90
0 INT_LESS f() 78
f() CALL func (RSP + -104) 3
0 INT_EQUAL f() 255
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 0
0 INT_EQUAL f() 207
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -84) 21
(RSP + -84) PTRSUB RSP -84
f() CALL func (f(ARG1) + 4)
 BRANCH VZERO
0 INT_LESS f() 2
(f(ARG1) + 4) INT_ADD f(ARG1) 4
f() INT_ZEXT f()
f(ARG1) CAST f(ARG1)
 CBRANCH (f() INT_EQUAL 202)
f() CALL func (RSP + -104) 1
0 INT_EQUAL f() 254
0 INT_LESS f() 203
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 3
0 INT_NOTEQUAL f() 70
(RSP + -104) PTRSUB RSP -104
f() CALL libcall_memcmp_thunk ARG1 !<arch>  8
0 INT_EQUAL f() 0
 CBRANCH f()
!<arch>  COPY !<arch> 
 CALL func (RSP + -84) 2
 BRANCH VZERO
(RSP + -84) PTRSUB RSP -84
(RSP + -84) PTRSUB RSP -84
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -84) 3
0 INT_EQUAL f() 2
 BRANCH VZERO
f() CALL func (RSP + -104) f() f()
0 INT_EQUAL f() 4
 CALL func (RSP + -84) 6
 BRANCH VZERO
(RSP + -84) PTRSUB RSP -84
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 2
0 INT_EQUAL f() 250
0 INT_EQUAL f() 254
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 3
f() CALL libcall_memcmp_thunk f(ARG1) (RSP + -41) 9
0 INT_NOTEQUAL f() 0
(RSP + -41) PTRSUB RSP -41
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 134)
 CALL func (RSP + -84) 20
(RSP + -84) PTRSUB RSP -84
 BRANCH VZERO
f() CALL func (RSP + -104) 1
0 INT_EQUAL f() 134
(RSP + -104) PTRSUB RSP -104
0 INT_LESS f() 101
 BRANCH VZERO
1 COPY 1
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 3
0 INT_EQUAL f() 190
(RSP + -84) PTRSUB RSP -84
f() CALL func (RSP + -104) 0
(RSP + -84) PTRSUB RSP -84
(RSP + -84) PTRSUB RSP -84
(RSP + -84) PTRSUB RSP -84
 BRANCH VZERO
 BRANCH VZERO
 CALL func (RSP + -84) 0
(RSP + -84) PTRSUB RSP -84
16 COPY 16
17 COPY 17
 CALL func (RSP + -84) 9
(RSP + -84) PTRSUB RSP -84
 BRANCH VZERO
 CALL func (RSP + -84) 8
(RSP + -84) PTRSUB RSP -84
0 INT_EQUAL f() 127
16 COPY 16
17 COPY 17
(RSP + -104) PTRSUB RSP -104
0 INT_EQUAL f() 77
0 INT_EQUAL f() 202
 CALL func (RSP + -84) 17
 BRANCH VZERO
 CALL func (RSP + -84) 16
 BRANCH VZERO
 CALL func (RSP + -84) 15
 BRANCH VZERO
 BRANCH VZERO
 CALL func (RSP + -84) 18
 BRANCH VZERO
 CALL func (RSP + -84) 12
(RSP + -84) PTRSUB RSP -84
 BRANCH VZERO
 CALL func (RSP + -84) 11
(RSP + -84) PTRSUB RSP -84
 BRANCH VZERO
 CALL func (RSP + -84) 10
(RSP + -84) PTRSUB RSP -84
 BRANCH VZERO
 CALL func (RSP + -84) 14
(RSP + -84) PTRSUB RSP -84
 BRANCH VZERO
 CALL func (RSP + -84) 13
(RSP + -84) PTRSUB RSP -84
 BRANCH VZERO
f() CALL func ARG1 (RSP + -112) (RSP + -112)
 STORE 433 ARG2 f()
0 COPY 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
((A_Stack[-0x58]:8 / 2147483647) # f()) PIECE (A_Stack[-0x58]:8 / 2147483647) f()
((A_Stack[-0x58]:8 / 2147483647) # f()) CAST ((A_Stack[-0x58]:8 / 2147483647) # f())
f() CALL func
(A_Stack[-0x58]:8 / 2147483647) SUBPIECE A_Stack[-0x58]:8 4
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
(RSP + -112) PTRSUB RSP -112
0 INT_EQUAL f() 0
 CBRANCH (4294967295 INT_SLESS (f() / 2147483647))
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH f()
[f()] LOAD 433 f()
 CBRANCH ((RSP + -72) INT_EQUAL 0)
f() CALL libcall___errno_location_thunk
 CALL func (RSP + -88) [f()] f() [f()]
(f() + 40) CAST (f() + 40)
0 INT_EQUAL (RSP + -72) 0
(f() / 2147483647) COPY (f() / 2147483647)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(RSP + -72) COPY (RSP + -72)
f() CALL libcall_generic_category_thunk
(f() + 40) INT_ADD f() 40
 BRANCH VZERO
0 INT_EQUAL 0 [(f() + 40)]
(RSP + -72) PTRSUB RSP -72
(RSP + -88) PTRSUB RSP -88
(f() / 2147483647) INT_SEXT (f() / 2147483647)
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_SLESS 4294967295 (f() / 2147483647)
(f() # f(RSP)) INT_AND (f() # f(RSP)) -1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (f() # f(RSP))
(f() # f(RSP)) PIECE f() f(RSP)
 RETURN 1
 CBRANCH ((f() / 2147483647) INT_NOTEQUAL 0)
 RETURN 1
 CALL func (RSP + -88)
f() CALL func (RSP + -72) (f() / 2147483647) (RSP + -72)
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
(RSP + -88) PTRSUB RSP -88
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
(f() / 2147483647) SUBPIECE f() 0
f() CALL libcall_close_thunk A_Stack[-0x70]:4
0 INT_EQUAL f() 0
(RSP + -72) PTRSUB RSP -72
f() CALL libcall_read_thunk A_Stack[-0x70]:4 (RSP + -72) 32
0 INT_NOTEQUAL (f() / 2147483647) 0
ARG1 CAST ARG1
f() CALL func ARG1
 STORE 433 ARG1 ARG2
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 17) CAST (ARG1 + 17)
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 STORE 433 (ARG1 + 16) 4
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG1 + 17) 1
(ARG1 + 17) INT_ADD ARG1 17
 RETURN 0
 CALL libcall___assert_fail_thunk isValid() && "Invalid twine!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h 281 llvm::Twine::Twine(const string&)
llvm::Twine::Twine(const string&) COPY llvm::Twine::Twine(const string&)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h
isValid() && "Invalid twine!" COPY isValid() && "Invalid twine!"
 RETURN 1
 CALL func (RSP + -56) ARG1 ARG1
f() CALL func (RSP + -56) ARG2 ARG2
[40] LOAD 433 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
f() INT_AND f() -1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
f() CALL libcall_realpath_thunk (RSP + -4120) ARG1
 CALL libcall_snprintf_thunk (RSP + -4120) 4096 %s/%s ARG2 ARG3
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() 0
(RSP + -4120) PTRSUB RSP -4120
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -4120) PTRSUB RSP -4120
 CBRANCH (f() INT_EQUAL 0)
%s/%s COPY %s/%s
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
f() CALL func (RSP + -4120) (RSP + -4264) (RSP + -4264)
(RSP + -4264) PTRSUB RSP -4264
0 INT_EQUAL f() 0
1 COPY 1
(RSP + -4120) PTRSUB RSP -4120
 BRANCH VZERO
f() CALL func ARG1 (RSP + -4120) ARG2 (RSP + -4120)
f() CALL func ARG1 4669842 ARG2
f() CALL func ARG1 f() ARG2 f()
f() CALL libcall_strchr_thunk ARG2 47
[ARG2] LOAD 433 ARG2
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
 CBRANCH ([ARG2] INT_EQUAL 47)
0 INT_EQUAL [ARG2] 47
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
0 INT_EQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 CALL libcall_free_thunk f()
 CBRANCH (f() INT_EQUAL 0)
(RSP + -4120) PTRSUB RSP -4120
 CBRANCH (f() INT_EQUAL 0)
4669844 COPY 4669844
f() CALL libcall_getcwd_thunk (RSP + -4120) 4096
f() CALL libcall_getenv_thunk 4669844
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
0 INT_EQUAL f() 0
f() CALL libcall_strdup_thunk f()
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
f() COPY f()
 RETURN 1
 RETURN 0 f(ARG1)
 CALL libcall___stack_chk_fail_thunk
 CALL libcall_free_thunk f()
 BRANCH VZERO
f() CALL libcall_strsep_thunk (RSP + -4144) 4669849
(RSP + -4144) PTRSUB RSP -4144
4669849 COPY 4669849
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
4669842 PTRSUB 0 4669842
0 INT_EQUAL f() 0
 BRANCH VZERO
0 INT_NOTEQUAL f() 0
(RSP + -4120) PTRSUB RSP -4120
0 COPY 0
 BRANCH VZERO
0 COPY 0
ARG1 COPY ARG1
 CALL libcall_basic_string_thunk ARG1 4669146
 CALL libcall_basic_string_thunk ARG1 (RSP + -4120)
 CALL libcall_basic_string_thunk ARG1 (RSP + -4120) f()
f(RSP) CALL func (RSP + -4120) ARG2 ARG2
 CALL func (RSP + -4184) (RSP + -4200) (RSP + -4200)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
 CALL func (RSP + -4200) /proc/self/exe
(RSP + -4200) PTRSUB RSP -4200
(RSP + -4184) PTRSUB RSP -4184
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL func (RSP + -4184)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -4200) PTRSUB RSP -4200
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -4184) PTRSUB RSP -4184
(f() + 40) CAST (f() + 40)
/proc/self/exe COPY /proc/self/exe
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CBRANCH (f() INT_EQUAL 0)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f() 0
 CBRANCH (-1 INT_SLESS f())
 BRANCH VZERO
 CALL libcall_~allocator_thunk (RSP + -4184)
4669146 PTRSUB 0 4669146
 CALL libcall_allocator_thunk
 CALL libcall_allocator_thunk
 CALL libcall_~allocator_thunk (RSP + -4184)
(RSP + -4120) PTRSUB RSP -4120
(RSP + -4184) PTRSUB RSP -4184
4669146 CAST 4669146
(RSP + -4120) CAST (RSP + -4120)
(RSP + -4184) PTRSUB RSP -4184
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (f(RSP) INT_NOTEQUAL 0)
(RSP + -4184) PTRSUB RSP -4184
 BRANCH VZERO
 CALL libcall_~allocator_thunk (RSP + -4184)
 CALL libcall_allocator_thunk
(RSP + -4120) PTRSUB RSP -4120
f() CALL libcall_readlink_thunk f() (RSP + -4120) 4096
 CALL libcall_~basic_string_thunk (RSP + -4152)
(RSP + -4120) PTRSUB RSP -4120
f() CALL libcall_c_str_thunk
0 INT_SLESS -1 f()
(RSP + -4120) PTRSUB RSP -4120
(RSP + -4152) PTRSUB RSP -4152
f() CAST f()
f() CAST f()
(RSP + -4200) PTRSUB RSP -4200
(RSP + -4120) CAST (RSP + -4120)
f() CAST f()
 CALL func (RSP + -4152) (RSP + -4200) (RSP + -4200)
(RSP + -4152) PTRSUB RSP -4152
0 INT_NOTEQUAL f(RSP) 0
 CALL func ARG1
 STORE 433 ARG1 (ARG2 + -946684800)
(ARG1 + 8) PTRADD ARG1 1 8
(ARG2 + -946684800) INT_ADD ARG2 -946684800
 STORE 433 (ARG1 + 8) 0
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 0
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) 0
(ARG1 + 16) INT_ADD ARG1 16
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CALL func (RSP + -40) [(ARG1 + 16)] [(ARG1 + 16)]
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -40)
[40] LOAD 433 40
(RSP + -40) PTRSUB RSP -40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
(RSP + -40) PTRSUB RSP -40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(ARG1 + 16) CAST (ARG1 + 16)
40 CAST 40
 RETURN 0 (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) COPY (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
f() CALL func ARG1 (RSP + -200) (RSP + -200)
f() CALL func ARG2 (RSP + -360) (RSP + -360)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_EQUAL 4294967295)
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -200)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() 4294967295
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -408) PTRSUB RSP -408
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -360)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -360)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() / 2147483647) SUBPIECE f() 0
f() CAST f()
(RSP + -200) PTRSUB RSP -200
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(RSP + -360) PTRSUB RSP -360
f() CALL func (RSP + -408)
(RSP + -392) PTRSUB RSP -392
 CALL func (RSP + -200)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -360) PTRSUB RSP -360
f() CAST f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -200) PTRSUB RSP -200
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
f() CALL libcall_symlink_thunk f() f()
(f() + 40) CAST (f() + 40)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -360) PTRSUB RSP -360
f() CALL func (RSP + -392)
 RETURN 0 (f() # f())
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() # f()) INT_AND (f() # f()) -1
 CALL libcall___stack_chk_fail_thunk
(f() # f()) PIECE f() f()
(RSP + -376) PTRSUB RSP -376
f() CALL libcall_generic_category_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -376)
 CALL func (RSP + -376) [f()] f() [f()]
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -376) PTRSUB RSP -376
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___lxstat_thunk 1 ARG1 ARG2
 RETURN 0
f() CALL func ARG1 (RSP + -200) (RSP + -200)
0 INT_NOTEQUAL ARG2 1
0 INT_EQUAL ARG2 1
0 INT_EQUAL f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -200)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -376) PTRSUB RSP -376
f() CALL func f() (RSP + -344) f()
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 8
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() / 2147483647) SUBPIECE f() 8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func (RSP + -376)
(f() / 2147483647) SUBPIECE f() 0
(f() + 40) CAST (f() + 40)
(f() / 2147483647) SUBPIECE f() 8
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -200)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -344) PTRSUB RSP -344
 CBRANCH ((A_Stack[-0x140]:4 & 61440) INT_EQUAL 32768)
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH ((A_Stack[-0x140]:4 & 61440) INT_EQUAL 16384)
f() CALL func (RSP + -376)
0 INT_EQUAL (A_Stack[-0x140]:4 & 61440) 16384
(A_Stack[-0x140]:4 & 61440) INT_AND A_Stack[-0x140]:4 61440
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() 4294967295
f() CAST f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL libcall_remove_thunk f()
 CBRANCH (f() INT_EQUAL 4294967295)
(RSP + -376) PTRSUB RSP -376
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH ([f()] INT_EQUAL 2)
0 INT_EQUAL (A_Stack[-0x140]:4 & 61440) 32768
(A_Stack[-0x140]:4 & 61440) INT_AND A_Stack[-0x140]:4 61440
0 INT_EQUAL [f()] 2
(f() / 2147483647) SUBPIECE f() 0
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
 CBRANCH ([f()] INT_NOTEQUAL 2)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(A_Stack[-0x160]:8 # A_Stack[-0x168]:8) PIECE A_Stack[-0x160]:8 A_Stack[-0x168]:8
 CALL func (RSP + -360) [f()] f() [f()]
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(RSP + -360) PTRSUB RSP -360
f() CALL libcall_generic_category_thunk
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (ARG2 INT_NOTEQUAL 1)
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(A_Stack[-0x160]:8 # A_Stack[-0x168]:8) PIECE A_Stack[-0x160]:8 A_Stack[-0x168]:8
f() CALL libcall_generic_category_thunk
 CBRANCH (ARG2 INT_EQUAL 1)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -360) PTRSUB RSP -360
 CALL func (RSP + -360) [f()] f() [f()]
[f()] LOAD 433 f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL libcall___errno_location_thunk
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL (A_Stack[-0x140]:4 & 61440) 40960
(A_Stack[-0x140]:4 & 61440) INT_AND A_Stack[-0x140]:4 61440
 CBRANCH ((A_Stack[-0x140]:4 & 61440) INT_EQUAL 40960)
(f() # f()) PIECE f() f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -360) PTRSUB RSP -360
 CALL func (RSP + -360)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
 RETURN 0 f()
(f() / 2147483647) SUBPIECE f() 0
f() INT_AND f() -1
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
f() CALL func 1
(f() / 2147483647) SUBPIECE f() 8
(A_Stack[-0x160]:8 # A_Stack[-0x168]:8) PIECE A_Stack[-0x160]:8 A_Stack[-0x168]:8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -360) PTRSUB RSP -360
 CALL func (RSP + -360)
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
0 INT_NOTEQUAL [f()] 2
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func ARG1 (RSP + -360) (RSP + -360)
f() CALL func ARG2 (RSP + -200) (RSP + -200)
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_EQUAL 4294967295)
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -200)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() 4294967295
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -360)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -360)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(RSP + -360) PTRSUB RSP -360
f() CALL func (RSP + -392)
(RSP + -408) PTRSUB RSP -408
 CALL func (RSP + -200)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -360) PTRSUB RSP -360
f() CAST f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -200) PTRSUB RSP -200
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -392) PTRSUB RSP -392
f() CALL libcall_rename_thunk f() f()
(f() + 40) CAST (f() + 40)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -360) PTRSUB RSP -360
f() CALL func (RSP + -408)
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
f() CAST f()
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -376)
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -376) [f()] f() [f()]
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -376) PTRSUB RSP -376
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -376) PTRSUB RSP -376
f() CALL libcall_generic_category_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() # f()) INT_AND (f() # f()) -1
 CALL libcall___stack_chk_fail_thunk
(f() # f()) PIECE f() f()
 RETURN 0 (f() # f())
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
f() CALL libcall_ftruncate_thunk ARG1 ARG2
 CBRANCH (f() INT_EQUAL 4294967295)
0 INT_EQUAL f() 4294967295
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
f() CALL libcall_generic_category_thunk
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) [f()] f() [f()]
 RETURN 1
(f() # f()) PIECE f() f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (f() # f())
(f() # f()) INT_AND (f() # f()) -1
f() CALL func
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
 CBRANCH (A_Stack[0x8]:8 INT_EQUAL A_Stack[0x38]:8)
 CBRANCH (A_Stack[0x10]:8 INT_EQUAL A_Stack[0x40]:8)
0 COPY 0
0 INT_EQUAL A_Stack[0x10]:8 A_Stack[0x40]:8
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 1)
 RETURN 1
 CALL libcall___assert_fail_thunk 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc 333 0
0 INT_EQUAL A_Stack[0x8]:8 A_Stack[0x38]:8
 RETURN 0 f()
0 COPY 0
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc
f() CALL func
0 INT_EQUAL f() 1
f() CALL func ARG1 (RSP + -136) (RSP + -136)
f() CALL func ARG2 (RSP + -88) (RSP + -88)
 STORE 433 ARG3 f()
(RSP + -88) PTRSUB RSP -88
f() CALL func (RSP + -152)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -136)
(RSP + -152) PTRSUB RSP -152
(RSP + -136) PTRSUB RSP -136
(RSP + -136) PTRSUB RSP -136
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -88)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
(A_Stack[-0x94]:4 # f()) PIECE A_Stack[-0x94]:4 f()
f() CALL func
(A_Stack[-0x94]:4 # f()) PIECE A_Stack[-0x94]:4 f()
 BRANCH VZERO
 CALL func (RSP + -152)
(RSP + -152) PTRSUB RSP -152
 RETURN 0 (f() # f())
 RETURN 1
(f() # f()) PIECE f() f()
(f() # f()) INT_AND (f() # f()) -1
 CALL libcall___stack_chk_fail_thunk
f() CALL func (RSP + -152)
0 INT_EQUAL f() 0
(RSP + -88) PTRSUB RSP -88
 BRANCH VZERO
(A_Stack[-0x94]:4 # f()) PIECE A_Stack[-0x94]:4 f()
(RSP + -152) PTRSUB RSP -152
0 COPY 0
f() CALL func ARG1 (RSP + -184) (RSP + -184)
f() CALL func f() (RSP + -184) ARG2 (RSP + -184)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
40 INT_ADD 0 40
(RSP + -184) PTRSUB RSP -184
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -184) PTRSUB RSP -184
40 CAST 40
 RETURN 1
f() INT_AND f() -1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
[ARG1] LOAD 433 ARG1
([ARG1] + 946684800) INT_ADD [ARG1] 946684800
 RETURN 0 ([ARG1] + 946684800)
([ARG1] + 946684800) COPY ([ARG1] + 946684800)
f() CALL libcall_futimens_thunk ARG1 (RSP + -72)
f() COPY f()
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func
0 INT_EQUAL f() 0
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -72) PTRSUB RSP -72
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
0 COPY 0
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() # f()) PIECE f() f()
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (f() # f())
(f() # f()) INT_AND (f() # f()) -1
f() CALL libcall_generic_category_thunk
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
 BRANCH VZERO
 CALL func (RSP + -88) [f()] f() [f()]
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -88)
(RSP + -88) PTRSUB RSP -88
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL libcall_mmap_thunk 0 [ARG1] f() f() ARG2 ARG3
0 INT_EQUAL ARG4 1
0 INT_EQUAL ARG4 0
0 INT_EQUAL [ARG1] 0
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([ARG1] INT_EQUAL 0)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL -1)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
f() CALL libcall_generic_category_thunk
[f()] LOAD 433 f()
 CALL func (RSP + -56) [f()] f() [f()]
f() CALL libcall___errno_location_thunk
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 CBRANCH (ARG4 INT_EQUAL 1)
1 COPY 1
 BRANCH VZERO
2 COPY 2
 CBRANCH (ARG4 INT_EQUAL 0)
 BRANCH VZERO
3 COPY 3
1 COPY 1
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 RETURN 1
(f() # f()) PIECE f() f()
(f() # f()) INT_AND (f() # f()) -1
 RETURN 0 (f() # f())
 CALL libcall___stack_chk_fail_thunk
(f() + 40) INT_ADD f() 40
 RETURN 1
0 INT_NOTEQUAL 0 [(f() + 40)]
 CALL libcall___assert_fail_thunk Size != 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc 422 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc
Size != 0 COPY Size != 0
0 COPY 0
f() CAST f()
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
0 INT_EQUAL [(ARG1 + 8)] -1
 STORE 433 (ARG1 + 8) f()
 RETURN 0 -1
-1 COPY -1
 STORE 433 ARG1 ARG4
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1 ARG2 ARG5
0 INT_LESS f() ARG4
 STORE 433 ARG6 f()
(ARG6 + 8) PTRADD ARG6 2 4
f() CALL func ARG6
 STORE 433 ARG6 f()
(ARG6 + 8) PTRADD ARG6 2 4
 CBRANCH (f() INT_LESS ARG4)
 STORE 433 (ARG1 + 8) 0
f() CALL func
 RETURN 0
(ARG6 + 8) CAST (ARG6 + 8)
f() CALL func 22
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 STORE 433 (ARG6 + 8) 0
 BRANCH VZERO
 STORE 433 (ARG6 + 8) 0
(ARG6 + 8) CAST (ARG6 + 8)
 STORE 433 (ARG1 + 8) 0
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
0 INT_NOTEQUAL [(ARG1 + 8)] 0
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 0)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] CAST [(ARG1 + 8)]
 CALL libcall_munmap_thunk [(ARG1 + 8)] [ARG1]
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 8)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[ARG1] COPY [ARG1]
 RETURN 1
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc
Mapping && "Mapping failed but used anyway!" COPY Mapping && "Mapping failed but used anyway!"
 CALL libcall___assert_fail_thunk Mapping && "Mapping failed but used anyway!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc 452 0
 RETURN 0 [ARG1]
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
0 INT_EQUAL [(ARG1 + 8)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
 RETURN 1
Mapping && "Mapping failed but used anyway!" COPY Mapping && "Mapping failed but used anyway!"
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc
 RETURN 0 [(ARG1 + 8)]
 CALL libcall___assert_fail_thunk Mapping && "Mapping failed but used anyway!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc 457 0
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
0 INT_EQUAL [(ARG1 + 8)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
 RETURN 1
Mapping && "Mapping failed but used anyway!" COPY Mapping && "Mapping failed but used anyway!"
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc
 RETURN 0 [(ARG1 + 8)]
 CALL libcall___assert_fail_thunk Mapping && "Mapping failed but used anyway!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Path.inc 462 0
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
 RETURN 0 f()
 CBRANCH (VZERO INT_EQUAL 0)
0 INT_EQUAL VZERO 0
f() COPY f()
f() COPY f()
f() COPY f()
6960696 PTRSUB 0 6960696
f() CALL libcall___cxa_guard_acquire_thunk 6960696
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CALL libcall___cxa_guard_release_thunk 6960696
f() CALL libcall_getpagesize_thunk
6960696 PTRSUB 0 6960696
 CALL func
 RETURN 0
 CALL libcall_~basic_string_thunk ARG1
 RETURN 0
(ARG1 + 56) INT_ADD ARG1 56
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 72) INT_ADD ARG1 72
 CALL func ARG1 ARG2 ARG2
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 40) CAST (ARG1 + 40)
 STORE 433 (ARG1 + 72) A_Stack[0x30]:8
(FS_OFFSET + 40) INT_ADD 0 40
 STORE 433 (ARG1 + 32) A_Stack[0x8]:8
(ARG1 + 32) CAST (ARG1 + 32)
 STORE 433 (ARG1 + 64) A_Stack[0x28]:8
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(ARG1 + 72) CAST (ARG1 + 72)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 STORE 433 (ARG1 + 56) A_Stack[0x20]:8
40 INT_ADD 0 40
(ARG1 + 64) CAST (ARG1 + 64)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 STORE 433 (ARG1 + 48) A_Stack[0x18]:8
(ARG1 + 56) CAST (ARG1 + 56)
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(ARG1 + 48) CAST (ARG1 + 48)
 STORE 433 (ARG1 + 40) A_Stack[0x10]:8
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 32) INT_ADD ARG1 32
 RETURN 0
 CALL libcall_basic_string_thunk
 CALL func (ARG1 + 32)
ARG1 COPY ARG1
(ARG1 + 32) PTRADD ARG1 32 1
(ARG1 + 40) PTRADD ARG1 40 1
 CALL libcall_operator=_thunk ARG1 ARG2
(ARG1 + 48) PTRADD ARG1 48 1
(ARG1 + 56) PTRADD ARG1 56 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 72) PTRADD ARG1 72 1
(ARG2 + 72) PTRADD ARG2 72 1
(ARG2 + 32) PTRADD ARG2 32 1
(ARG2 + 40) PTRADD ARG2 40 1
(ARG2 + 48) PTRADD ARG2 48 1
(ARG2 + 56) PTRADD ARG2 56 1
(ARG2 + 64) PTRADD ARG2 64 1
(ARG2 + 32) CAST (ARG2 + 32)
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
 STORE 433 (ARG1 + 64) [(ARG2 + 64)]
[(ARG2 + 64)] LOAD 433 (ARG2 + 64)
(ARG1 + 72) CAST (ARG1 + 72)
(ARG2 + 72) CAST (ARG2 + 72)
 STORE 433 (ARG1 + 56) [(ARG2 + 56)]
(ARG1 + 64) CAST (ARG1 + 64)
(ARG2 + 64) CAST (ARG2 + 64)
[(ARG2 + 56)] LOAD 433 (ARG2 + 56)
 RETURN 0 ARG1
(ARG1 + 56) CAST (ARG1 + 56)
 STORE 433 (ARG1 + 48) [(ARG2 + 48)]
(ARG2 + 56) CAST (ARG2 + 56)
[(ARG2 + 48)] LOAD 433 (ARG2 + 48)
(ARG1 + 48) CAST (ARG1 + 48)
(ARG2 + 48) CAST (ARG2 + 48)
 STORE 433 (ARG1 + 40) [(ARG2 + 40)]
(ARG1 + 40) CAST (ARG1 + 40)
[(ARG2 + 40)] LOAD 433 (ARG2 + 40)
 STORE 433 (ARG1 + 72) [(ARG2 + 72)]
(ARG2 + 40) CAST (ARG2 + 40)
 STORE 433 (ARG1 + 32) [(ARG2 + 32)]
[(ARG2 + 72)] LOAD 433 (ARG2 + 72)
(ARG1 + 32) CAST (ARG1 + 32)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -136)
(RSP + -120) PTRSUB RSP -120
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CALL func (RSP + -120)
(ARG1 + 8) CAST (ARG1 + 8)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(ARG1 + 8)] 0
0 INT_NOTEQUAL 0 [(f() + 40)]
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 0)
(f() + 40) INT_ADD f() 40
 CALL func (RSP + -120)
(RSP + -136) PTRSUB RSP -136
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -120) PTRSUB RSP -120
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func (ARG1 + 16) (RSP + -120) (ARG1 + 16)
 STORE 433 (ARG1 + 8) 0
(f() # f()) PIECE f() f()
(RSP + -120) PTRSUB RSP -120
(ARG1 + 8) CAST (ARG1 + 8)
(f() + 40) CAST (f() + 40)
(f() # f()) INT_AND (f() # f()) -1
 RETURN 1
 RETURN 0 (f() # f())
 CALL libcall___stack_chk_fail_thunk
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL libcall_closedir_thunk [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() CALL libcall_readdir_thunk [(ARG1 + 8)]
 STORE 433 f() 0
f() CALL libcall___errno_location_thunk
0 INT_EQUAL f() 0
(ARG1 + 8) CAST (ARG1 + 8)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH ((f() + 19) INT_EQUAL 0)
(f() + 19) PTRSUB f() 19
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_EQUAL (f() + 19) 0
f() CALL libcall_strlen_thunk (f() + 19)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
(f() + 19) PTRSUB f() 19
 CBRANCH ([f()] INT_NOTEQUAL 0)
f() CALL libcall_generic_category_thunk
 BRANCH VZERO
(A_Stack[-0x50]:8 # A_Stack[-0x58]:8) PIECE A_Stack[-0x50]:8 A_Stack[-0x58]:8
(RSP + -88) PTRSUB RSP -88
0 INT_EQUAL f() 0
[f()] LOAD 433 f()
 CALL func (RSP + -88) [f()] f() [f()]
f() CALL libcall___errno_location_thunk
 CBRANCH f()
 BRANCH VZERO
(RSP + -120) PTRSUB RSP -120
(RSP + -88) PTRSUB RSP -88
(RSP + -136) PTRSUB RSP -136
(RSP + -120) PTRSUB RSP -120
 BRANCH VZERO
(f() # f()) PIECE f() f()
 CALL func (RSP + -88)
 CALL func (RSP + -120) (RSP + -136) (RSP + -136)
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -88)
 CALL func (ARG1 + 16) (RSP + -120) (ARG1 + 16)
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_EQUAL 46)
(RSP + -136) PTRSUB RSP -136
0 COPY 0
 CBRANCH (f() INT_EQUAL 46)
f() CALL func (RSP + -136) 1
0 INT_EQUAL f() 46
 CBRANCH (f() INT_NOTEQUAL 46)
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 2)
1 COPY 1
0 INT_EQUAL f() 2
f() INT_AND f() -1
 RETURN 0 f()
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
0 COPY 0
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
f() CALL func (RSP + -136) 0
0 INT_NOTEQUAL f() 46
(RSP + -136) PTRSUB RSP -136
f() CALL func (RSP + -136) 0
0 INT_EQUAL f() 46
(RSP + -136) PTRSUB RSP -136
0 INT_NOTEQUAL [f()] 0
f() CALL libcall___errno_location_thunk
[f()] LOAD 433 f()
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
 CALL func (RSP + -200) ARG2 ARG3 ARG2
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_EQUAL f() 0
(f() + 40) CAST (f() + 40)
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 0
(f() + 40) INT_ADD f() 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(RSP + -200) PTRSUB RSP -200
f() CALL func (RSP + -200)
(f() / 2147483647) SUBPIECE f() 8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CALL func (RSP + -200)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -200) PTRSUB RSP -200
f() CAST f()
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_opendir_thunk f()
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
 RETURN 0 f()
f() INT_AND f() -1
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
(RSP + -424) PTRSUB RSP -424
(RSP + -360) PTRSUB RSP -360
(A_Stack[-0x180]:8 # A_Stack[-0x188]:8) PIECE A_Stack[-0x180]:8 A_Stack[-0x188]:8
(RSP + -328) PTRSUB RSP -328
(RSP + -392) PTRSUB RSP -392
f() CALL func (RSP + -200)
(RSP + -280) PTRSUB RSP -280
 CALL func (RSP + -392) 4669146
4669146 PTRSUB 0 4669146
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -392) PTRSUB RSP -392
 CALL func (RSP + -328)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -360) PTRSUB RSP -360
(f() / 2147483647) SUBPIECE f() 0
f() CALL libcall___errno_location_thunk
[f()] LOAD 433 f()
 STORE 433 (ARG1 + 8) f()
(RSP + -280) PTRSUB RSP -280
(RSP + -328) PTRSUB RSP -328
 CALL func (RSP + -424) 4669449
(RSP + -360) PTRSUB RSP -360
 CALL func (RSP + -280) (RSP + -360) (RSP + -360)
f() CALL libcall_generic_category_thunk
4669449 PTRSUB 0 4669449
(A_Stack[-0x140]:8 # A_Stack[-0x148]:8) PIECE A_Stack[-0x140]:8 A_Stack[-0x148]:8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -328) [f()] f() [f()]
(RSP + -328) PTRSUB RSP -328
 CALL func (RSP + -328) 4669146
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -360) (RSP + -392) (RSP + -392)
(RSP + -424) PTRSUB RSP -424
(RSP + -392) PTRSUB RSP -392
(RSP + -280) PTRSUB RSP -280
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -280)
(RSP + -200) PTRSUB RSP -200
4669146 PTRSUB 0 4669146
 CALL func (RSP + -360) 4669146
(RSP + -360) PTRSUB RSP -360
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -200) (RSP + -424) (RSP + -392) (RSP + -360) (RSP + -328)
(RSP + -328) PTRSUB RSP -328
(ARG1 + 8) CAST (ARG1 + 8)
 CALL func (ARG1 + 16) (RSP + -280) (ARG1 + 16)
4669146 PTRSUB 0 4669146
(ARG2 - ARG1) INT_SUB ARG2 ARG1
 RETURN 0 (ARG2 - ARG1)
(ARG2 - ARG1) COPY (ARG2 - ARG1)
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(RSP + -48) PTRSUB RSP -48
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -48)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 (([(ARG1 + 8)] - [ARG1]) + f()) (([(ARG1 + 8)] - [ARG1]) + f())
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
 CALL func ARG1 ([(ARG1 + 8)] + f()) ([(ARG1 + 8)] + f())
 CALL func ARG2 ARG3 [(ARG1 + 8)] 0
f() CALL func ARG2 ARG3 ARG3
(f() - [(ARG1 + 8)]) INT_SUB f() [(ARG1 + 8)]
 CBRANCH ((f() - [(ARG1 + 8)]) INT_LESS f())
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0
([(ARG1 + 8)] + f()) INT_ADD [(ARG1 + 8)] f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() - [(ARG1 + 8)]) CAST (f() - [(ARG1 + 8)])
0 INT_LESS (f() - [(ARG1 + 8)]) f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(([(ARG1 + 8)] - [ARG1]) + f()) INT_ADD ([(ARG1 + 8)] - [ARG1]) f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
 CALL func ARG1 f() (f() + f()) f()
 CALL func ARG1
0 INT_NOTEQUAL f() 0
4670207 COPY 4670207
0 COPY 0
 RETURN 0 0
f() CALL libcall_getenv_thunk 4670207
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_strlen_thunk f()
 BRANCH VZERO
(f() + f()) PTRADD f() f() 1
 CALL func ARG1 f() (f() + f()) f()
 CALL func ARG1
 CALL func ARG1 (RSP + -136) (RSP + -104) (RSP + -72) (RSP + -40)
f() CALL func 0 ARG1
f() CALL func ARG1
(f() + 40) CAST (f() + 40)
0 INT_EQUAL f() 0
0 COPY 0
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
f() CALL libcall_getenv_thunk 0
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
1 COPY 1
0 INT_EQUAL f() 0
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_strlen_thunk f()
(f() + f()) PTRADD f() f() 1
0 INT_EQUAL f() 0
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
4669146 PTRSUB 0 4669146
 CALL func (RSP + -40) 4669146
1 COPY 1
(RSP + -40) PTRSUB RSP -40
4669146 PTRSUB 0 4669146
 CALL func (RSP + -72) 4669146
(RSP + -104) PTRSUB RSP -104
.cache COPY .cache
 CALL func (RSP + -104) 4669146
(RSP + -136) PTRSUB RSP -136
(RSP + -40) PTRSUB RSP -40
4669146 PTRSUB 0 4669146
 CALL func (RSP + -136) .cache
(RSP + -136) PTRSUB RSP -136
0 COPY 0
 BRANCH VZERO
(RSP + -104) PTRSUB RSP -104
f() CALL func ARG1
 CALL func ARG1 ARG2 ARG3 ARG4 (RSP + -40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
0 INT_EQUAL 0 [(f() + 40)]
0 COPY 0
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(RSP + -40) PTRSUB RSP -40
 BRANCH VZERO
(RSP + -40) PTRSUB RSP -40
4669146 PTRSUB 0 4669146
 CALL func (RSP + -40) 4669146
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 0
VZERO COPY VZERO
 RETURN 0
 CALL func 1 65535
 RETURN 0
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 32) CAST (ARG1 + 32)
 RETURN 0
 STORE 433 (ARG1 + 32) 0
(ARG1 + 32) INT_ADD ARG1 32
 RETURN 0 [(ARG1 + 32)]
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
[(ARG1 + 32)] COPY [(ARG1 + 32)]
(ARG1 + 32) CAST (ARG1 + 32)
 CALL func ARG1
 RETURN 0
(ARG1 + 32) INT_ADD ARG1 32
ARG1 COPY ARG1
(ARG1 + 32) CAST (ARG1 + 32)
 CBRANCH ([(ARG1 + 32)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 32)] 0
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
 CALL libcall___assert_fail_thunk hasVal /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Optional.h 120 0
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Optional.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Optional.h
hasVal COPY hasVal
 RETURN 0 ARG1
 RETURN 1
(ARG1 + 32) INT_ADD ARG1 32
 CALL func ARG1
 CBRANCH ([(ARG1 + 32)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 32)] 0
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(ARG1 + 32) CAST (ARG1 + 32)
 RETURN 1
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Optional.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Optional.h
 RETURN 0
hasVal COPY hasVal
 CALL libcall___assert_fail_thunk hasVal /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Optional.h 122 0
(ARG1 + 32) INT_ADD ARG1 32
 CALL func ARG1
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(ARG1 + 32) CAST (ARG1 + 32)
 CBRANCH ([(ARG1 + 32)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 32)] 0
 RETURN 1
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Optional.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Optional.h
 RETURN 0
hasVal COPY hasVal
 CALL libcall___assert_fail_thunk hasVal /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Optional.h 129 0
f(ARG1) CALL func 32 ARG1
(ARG1 + 32) INT_ADD ARG1 32
f() CALL func ARG1
ARG1 COPY ARG1
(ARG1 + 32) INT_ADD ARG1 32
 CALL func ARG2
f(ARG2) CALL func ARG2
 CBRANCH ([(ARG1 + 32)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 32)] 0
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
 RETURN 0 ARG1
(ARG1 + 32) CAST (ARG1 + 32)
f(ARG1) CAST f(ARG1)
 BRANCH VZERO
(ARG1 + 32) CAST (ARG1 + 32)
 CALL libcall_operator=_thunk f() f(ARG2)
f() CAST f()
0 INT_NOTEQUAL f(ARG1) 0
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
 STORE 433 (ARG1 + 32) 1
f(ARG2) CAST f(ARG2)
 CALL libcall_basic_string_thunk f(ARG1)
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func 32 ARG1
(ARG1 + 32) INT_ADD ARG1 32
 CALL func ARG2
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
 RETURN 0
0 INT_NOTEQUAL f(ARG1) 0
 STORE 433 (ARG1 + 32) 1
f(ARG1) CAST f(ARG1)
(ARG1 + 32) CAST (ARG1 + 32)
 CALL libcall_basic_string_thunk f(ARG1)
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 32) CAST (ARG1 + 32)
 RETURN 0
 STORE 433 (ARG1 + 32) 0
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
(RSP + -88) PTRSUB RSP -88
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CALL func (RSP + -88) (RSP + -136) (RSP + -136)
f() CALL libcall_getenv_thunk f()
f(ARG1) COPY f(ARG1)
 CBRANCH (f() INT_EQUAL 0)
0 INT_NOTEQUAL 0 [(f() + 40)]
f() CAST f()
(f() + 40) INT_ADD f() 40
 CALL libcall_~basic_string_thunk (RSP + -88)
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_EQUAL f() 0
(RSP + -136) PTRSUB RSP -136
f() CALL libcall_c_str_thunk
f() CAST f()
(RSP + -88) PTRSUB RSP -88
[(f() + 40)] LOAD 433 (f() + 40)
 BRANCH VZERO
 CALL func ARG1 VZERO VZERO
 CALL libcall_~allocator_thunk (RSP + -97)
 CALL libcall_~basic_string_thunk (RSP + -56)
 CALL libcall_basic_string_thunk (RSP + -56) f()
(RSP + -56) PTRSUB RSP -56
 CALL libcall_allocator_thunk
 CALL func ARG1 (RSP + -56) (RSP + -56)
(RSP + -56) CAST (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(RSP + -97) PTRSUB RSP -97
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(ARG1)
f() COPY f()
 RETURN 1
f() COPY f()
f() CALL func ARG1
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 32) CAST (ARG1 + 32)
 CBRANCH ([(ARG1 + 32)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(ARG1 + 32)] 0
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
 RETURN 0
(ARG1 + 32) CAST (ARG1 + 32)
f() CAST f()
 CALL libcall_~basic_string_thunk f()
 STORE 433 (ARG1 + 32) 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1 8
 RETURN 0
 CALL func (RSP + -568) ARG3 ARG3
 CALL func (RSP + -472) ARG3 ARG3
 CALL func ARG1 (RSP + -440) (RSP + -440)
 CALL func ARG1
ARG1 COPY ARG1
(RSP + -472) PTRSUB RSP -472
f() CALL func (RSP + -472)
0 INT_NOTEQUAL f() 0
(RSP + -472) PTRSUB RSP -472
 CBRANCH (f() INT_NOTEQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL 0)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -440) (RSP + -472) (RSP + -472)
 BRANCH VZERO
(RSP + -472) PTRSUB RSP -472
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -200) PTRSUB RSP -200
 CALL libcall_~basic_string_thunk (RSP + -440)
(RSP + -440) PTRSUB RSP -440
f() COPY f()
(RSP + -440) PTRSUB RSP -440
(f() / 2147483647) SUBPIECE f() 8
(RSP + -440) PTRSUB RSP -440
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -200)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 CBRANCH ([(f() + 8)] INT_NOTEQUAL 0)
(RSP + -536) PTRSUB RSP -536
(f() / 2147483647) SUBPIECE f() 0
4673226 PTRSUB 0 4673226
(RSP + -472) PTRSUB RSP -472
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -200)
 CALL func (RSP + -472) 4673226
(RSP + -472) PTRSUB RSP -472
4673226 PTRSUB 0 4673226
(f() / 2147483647) SUBPIECE f() 8
(RSP + -504) PTRSUB RSP -504
(f() / 2147483647) SUBPIECE f() 0
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 0
(RSP + -568) PTRSUB RSP -568
(f() / 2147483647) SUBPIECE f() 8
(f() + 16) PTRADD f() 2 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -504) 4673226
 CALL func (RSP + -200) (RSP + -568) (RSP + -536) (RSP + -504) (RSP + -472)
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -200) PTRSUB RSP -200
(RSP + -536) PTRSUB RSP -536
0 INT_NOTEQUAL f() A_Stack[-0x160]:8
(RSP + -200) PTRSUB RSP -200
f() CALL func (RSP + -472)
(f() / 2147483647) SUBPIECE f() 8
(f() + 8) PTRADD f() 1 8
(RSP + -504) PTRSUB RSP -504
(f() / 2147483647) SUBPIECE f() 8
[(f() + 8)] LOAD 433 (f() + 8)
(RSP + -472) PTRSUB RSP -472
(f() / 2147483647) SUBPIECE f() 0
[f()] LOAD 433 f()
 CALL func (RSP + -472) (RSP + -200) (RSP + -200)
 CALL func (RSP + -536) 4673226
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(RSP + -472) PTRSUB RSP -472
4673226 PTRSUB 0 4673226
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -200) [f()] [(f() + 8)] [f()]
(RSP + -200) PTRSUB RSP -200
0 INT_NOTEQUAL f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -568) PTRSUB RSP -568
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_NOTEQUAL A_Stack[-0x160]:8)
 CBRANCH (f() INT_EQUAL 1)
 BRANCH VZERO
(RSP + -360) PTRSUB RSP -360
 CALL func (RSP + -360)
(f() # f()) PIECE f() f()
0 COPY 0
(RSP + -360) PTRSUB RSP -360
 CALL func f() f() (RSP + -360) f() f()
(RSP + -472) PTRSUB RSP -472
 CALL func (RSP + -472) (RSP + -34) (RSP + -34)
58 COPY 58
 CALL func (RSP + -360)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -34) PTRSUB RSP -34
(f() / 2147483647) SUBPIECE f() 0
(RSP + -360) PTRSUB RSP -360
(RSP + -408) PTRSUB RSP -408
f() CALL libcall_length_thunk
A_Stack[-0x168]:8 COPY A_Stack[-0x168]:8
 CALL func (RSP + -408)
f() CALL libcall_data_thunk
f() CALL libcall_data_thunk
 CALL libcall___assert_fail_thunk 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Process.cpp 32 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -408) PTRSUB RSP -408
(RSP + -408) PTRSUB RSP -408
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
f() CALL func (RSP + -408)
[(f() + 40)] LOAD 433 (f() + 40)
0 COPY 0
0 COPY 0
f() CALL libcall_length_thunk
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Process.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Process.cpp
(f() / 2147483647) SUBPIECE f() 0
(RSP + -408) PTRSUB RSP -408
(f() + 40) CAST (f() + 40)
 CALL func (RSP + -408) f() f() f()
 CALL func (RSP + -408)
(f() # f()) PIECE f() f()
0 INT_EQUAL f() 1
 RETURN 1
0 INT_NOTEQUAL [(f() + 8)] 0
(f() + 8) PTRADD f() 1 8
[(f() + 8)] LOAD 433 (f() + 8)
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 24) PTRADD ARG1 3 8
 STORE 433 ARG1 [f(ARG2)]
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
 STORE 433 (ARG1 + 24) [(f(ARG3) + 8)]
[f(ARG2)] LOAD 433 f(ARG2)
 STORE 433 (ARG1 + 16) [f(ARG3)]
[(f(ARG2) + 8)] LOAD 433 (f(ARG2) + 8)
 RETURN 0
[f(ARG3)] LOAD 433 f(ARG3)
 STORE 433 (ARG1 + 8) [(f(ARG2) + 8)]
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
[(f(ARG3) + 8)] LOAD 433 (f(ARG3) + 8)
(f(ARG3) + 8) PTRADD f(ARG3) 1 8
f(ARG2) CAST f(ARG2)
f(ARG3) CAST f(ARG3)
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
ARG1 COPY ARG1
 CALL func ARG1 f(ARG2) f(ARG3) f(ARG2)
 RETURN 0 ARG1
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -200) (RSP + -184) (RSP + -200)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(A_Stack[-0xa0]:4 * 1000) INT_MULT A_Stack[-0xa0]:4 1000
(A_Stack[-0x90]:4 * 1000) INT_MULT A_Stack[-0x90]:4 1000
(RSP + -184) PTRSUB RSP -184
(RSP + -184) PTRSUB RSP -184
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
 CALL func (RSP + -200) A_Stack[-0xa8]:8 (A_Stack[-0xa0]:4 * 1000) A_Stack[-0xa8]:8
(RSP + -168) CAST (RSP + -168)
 CALL func (RSP + -184) A_Stack[-0x98]:8 (A_Stack[-0x90]:4 * 1000) A_Stack[-0x98]:8
 CALL libcall_getrusage_thunk 0 (RSP + -168)
(RSP + -168) PTRSUB RSP -168
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -200) PTRSUB RSP -200
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -200) PTRSUB RSP -200
40 CAST 40
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
[40] LOAD 433 40
A_Stack[-0x60]:8 COPY A_Stack[-0x60]:8
A_Stack[-0x50]:8 CAST A_Stack[-0x50]:8
A_Stack[-0x50]:8 COPY A_Stack[-0x50]:8
(A_Stack[-0x50]:8 / 2147483647) INT_RIGHT A_Stack[-0x50]:8 32
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(A_Stack[-0x50]:8 / 4611686014132420609) SUBPIECE (A_Stack[-0x50]:8 / 2147483647) 0
A_Stack[-0x68]:8 COPY A_Stack[-0x68]:8
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
A_Stack[-0x58]:8 COPY A_Stack[-0x58]:8
(FS_OFFSET + 40) INT_ADD 0 40
A_Stack[-0x48]:8 COPY A_Stack[-0x48]:8
40 CAST 40
(RSP + -104) PTRSUB RSP -104
 CALL libcall_mallinfo_thunk (RSP + -104)
(A_Stack[-0x50]:8 / 4611686014132420609) INT_SEXT (A_Stack[-0x50]:8 / 4611686014132420609)
 RETURN 1
 RETURN 0 (A_Stack[-0x50]:8 / 4611686014132420609)
 CALL libcall___stack_chk_fail_thunk
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0
 CALL func (ARG1 + 8)
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
f() CALL func ARG1
 CALL func ARG1
ARG1 COPY ARG1
f() CALL func ARG1
f(ARG2) CALL func ARG2
(ARG2 + 16) INT_ADD ARG2 16
 STORE 433 (f() + 8) [(f(ARG2) + 8)]
(f() + 8) CAST (f() + 8)
[(f(ARG2) + 8)] LOAD 433 (f(ARG2) + 8)
(f(ARG2) + 8) CAST (f(ARG2) + 8)
(f() + 8) PTRADD f() 1 8
(f() + 8) CAST (f() + 8)
 STORE 433 f() [f(ARG2)]
(f(ARG2) + 8) CAST (f(ARG2) + 8)
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
(f() + 8) PTRADD f() 1 8
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
f(ARG2) CAST f(ARG2)
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG2) CAST f(ARG2)
 STORE 433 (f() + 8) [(f(ARG2) + 8)]
f() CAST f()
[(f(ARG2) + 8)] LOAD 433 (f(ARG2) + 8)
 STORE 433 f() [f(ARG2)]
f() CAST f()
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG2) CALL func (ARG2 + 16)
 RETURN 0 ARG1
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 STORE 433 ARG1 ARG2
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1 ARG3 ARG3
 CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 (f() / 2147483647)
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func (RSP + -72) ARG2 ARG3 ARG2
(f() / 2147483647) SUBPIECE f() 0
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -56) PTRSUB RSP -56
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) INT_RIGHT f() 64
(f() / 2147483647) SUBPIECE f() 8
40 INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(f() / 2147483647) SUBPIECE f() 0
(RSP + -72) PTRSUB RSP -72
[40] LOAD 433 40
(f() / 2147483647) SUBPIECE f() 8
40 CAST 40
(RSP + -56) PTRSUB RSP -56
(f() / 2147483647) SUBPIECE f() 0
(ARG1 + 8) CAST (ARG1 + 8)
 CALL func (RSP + -72) (RSP + -56) (RSP + -56)
 CALL func (RSP + -56)
f() CALL func
(f() / 2147483647) SUBPIECE f() 8
(RSP + -72) PTRSUB RSP -72
 STORE 433 (ARG1 + 8) (f() / 4611686014132420609)
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 COPY 0
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL libcall_setrlimit_thunk 4 (RSP + -40)
0 COPY 0
[40] LOAD 433 40
40 CAST 40
40 INT_ADD 0 40
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
ARG1 CAST ARG1
0 INT_NOTEQUAL ARG1 ARG2
 CALL libcall_memcpy_thunk ARG3 ARG1 (((ARG2 - ARG1) / 8) * 8)
ARG2 CAST ARG2
 RETURN 0
 CBRANCH (ARG1 INT_NOTEQUAL ARG2)
((ARG2 - ARG1) / 8) INT_SRIGHT (ARG2 - ARG1) 3
(ARG2 - ARG1) CAST (ARG2 - ARG1)
(ARG2 - ARG1) INT_SUB ARG2 ARG1
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
(ARG1 + 8) INT_ADD ARG1 8
 STORE 433 (ARG1 + 8) ARG2
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
(ARG1 + 24) INT_ADD ARG1 24
 CALL func ARG1 (ARG1 + 24) ARG2 ARG3
 RETURN 0
 CALL func ARG1 (ARG2 * 8) 8 (ARG2 * 8)
(ARG2 * 8) INT_MULT ARG2 8
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 0 [(ARG1 + 16)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
(ARG2 - ARG1) INT_SUB ARG2 ARG1
((ARG2 - ARG1) / 8) INT_SRIGHT (ARG2 - ARG1) 3
 RETURN 0 ((ARG2 - ARG1) / 8)
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(RSP + -48) PTRSUB RSP -48
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -48)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
 CALL func ARG1 ([(ARG1 + 8)] + (f() * 8)) ([(ARG1 + 8)] + (f() * 8))
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 ((([(ARG1 + 8)] - [ARG1]) / 8) + f()) ((([(ARG1 + 8)] - [ARG1]) / 8) + f())
 CALL func ARG2 ARG3 [(ARG1 + 8)] 0
f() CALL func ARG2 ARG3 ARG3
([(ARG1 + 8)] + (f() * 8)) INT_ADD (f() * 8) [(ARG1 + 8)]
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (((f() - [(ARG1 + 8)]) / 8) INT_LESS f())
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() - [(ARG1 + 8)]) INT_SUB f() [(ARG1 + 8)]
((f() - [(ARG1 + 8)]) / 8) INT_SRIGHT (f() - [(ARG1 + 8)]) 3
((f() - [(ARG1 + 8)]) / 8) CAST ((f() - [(ARG1 + 8)]) / 8)
(f() * 8) INT_MULT f() 8
0 INT_LESS ((f() - [(ARG1 + 8)]) / 8) f()
(([(ARG1 + 8)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 3
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
((([(ARG1 + 8)] - [ARG1]) / 8) + f()) INT_ADD (([(ARG1 + 8)] - [ARG1]) / 8) f()
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(([(ARG1 + 8)] * 8) + [ARG1]) INT_ADD ([(ARG1 + 8)] * 8) [ARG1]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0 (([(ARG1 + 8)] * 8) + [ARG1])
([(ARG1 + 8)] * 8) INT_MULT [(ARG1 + 8)] 8
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG1 COPY ARG1
(FS_OFFSET + 40) INT_ADD 0 40
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
f() CALL func (RSP + -88)
(RSP + -88) PTRSUB RSP -88
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CALL func ARG1 f() f() f()
f() CALL func (RSP + -88)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
(RSP + -88) PTRSUB RSP -88
[40] LOAD 433 40
 CALL func (RSP + -56)
 RETURN 1
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) INT_AND (A_Stack[-0x30]:8 # A_Stack[-0x38]:8) -1
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 ARG2
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
 STORE 433 (ARG1 + 8) 0
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0
 STORE 433 (ARG1 + 8) 1
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 1)
0 INT_NOTEQUAL [(ARG1 + 8)] 1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (4294967295 INT_SLESS [[ARG1]])
0 INT_SLESS 4294967295 [[ARG1]]
[[ARG1]] LOAD 433 [ARG1]
 CALL libcall_close_thunk [[ARG1]]
[[ARG1]] LOAD 433 [ARG1]
4294967295 COPY 4294967295
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f(RSP) INT_EQUAL f(RSP))
1 COPY 1
(RSP + -212) COPY (RSP + -212)
(RSP + -248) PTRSUB RSP -248
0 INT_EQUAL f(RSP) f(RSP)
(RSP + -280) PTRSUB RSP -280
(RSP + -200) PTRSUB RSP -200
(FS_OFFSET + 40) INT_ADD 0 40
0 COPY 0
(RSP + -212) PTRSUB RSP -212
 CALL func (RSP + -248) (RSP + -280) (RSP + -280)
2 COPY 2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_SLESS 0)
 CBRANCH ([f()] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [f()] 0
 CBRANCH ([f()] INT_EQUAL 0)
0 INT_EQUAL [f()] 0
f() CALL libcall___errno_location_thunk
[f()] LOAD 433 f()
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
 CBRANCH ([f()] INT_EQUAL 9)
 CBRANCH ([f()] INT_NOTEQUAL 4)
0 INT_NOTEQUAL [f()] 4
[f()] LOAD 433 f()
f() CALL libcall___errno_location_thunk
 CBRANCH ([f()] INT_NOTEQUAL 4)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
f() CALL libcall_open_thunk /dev/null 2
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() [(f() + 40)]
 CALL func (RSP + -232) [f()] f() [f()]
(f() + 40) CAST (f() + 40)
f() CALL libcall___errno_location_thunk
[f()] LOAD 433 f()
 CALL func (RSP + -248)
(RSP + -248) PTRSUB RSP -248
/dev/null COPY /dev/null
[(f() + 40)] LOAD 433 (f() + 40)
 BRANCH VZERO
f() CALL libcall_generic_category_thunk
(RSP + -232) PTRSUB RSP -232
0 INT_SLESS f() 0
 CBRANCH (f() INT_SLESS 0)
 RETURN 0 (f() # f())
(f() # f()) PIECE f() f()
 RETURN 1
(f() # f()) INT_AND (f() # f()) -1
 CALL libcall___stack_chk_fail_thunk
 CBRANCH ([f()] INT_NOTEQUAL 9)
 CALL libcall___assert_fail_thunk errno == EBADF && "expected errno to have EBADF at this point!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Process.inc 229 0
0 COPY 0
0 INT_SLESS f() 0
 CBRANCH (f() INT_SLESS 0)
errno == EBADF && "expected errno to have EBADF at this point!" COPY errno == EBADF && "expected errno to have EBADF at this point!"
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Process.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Process.inc
 CALL libcall___assert_fail_thunk errno && "expected errno to be set if fstat failed!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Process.inc 218 0
0 INT_EQUAL [f()] 9
errno && "expected errno to be set if fstat failed!" COPY errno && "expected errno to be set if fstat failed!"
[f()] LOAD 433 f()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Process.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/Process.inc
f() CALL libcall___errno_location_thunk
 RETURN 1
0 COPY 0
(f(RSP) + 4) PTRADD f(RSP) 1 4
0 INT_NOTEQUAL [f()] 9
[f()] LOAD 433 f()
 BRANCH VZERO
f() CALL libcall___errno_location_thunk
0 INT_SLESS f() 0
(RSP + -232) PTRSUB RSP -232
[f()] LOAD 433 f()
 CALL func (RSP + -232) [f()] f() [f()]
f() CALL libcall___errno_location_thunk
 BRANCH VZERO
f() CALL func
f() CALL libcall_generic_category_thunk
0 INT_EQUAL f() f(RSP)
 CBRANCH (f() INT_EQUAL f(RSP))
 STORE 433 f() 0
f() CALL libcall___errno_location_thunk
(RSP + -232) PTRSUB RSP -232
 CALL func (RSP + -232)
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_SLESS 0)
f() CALL libcall_generic_category_thunk
(RSP + -232) PTRSUB RSP -232
 CALL func (RSP + -232) [f()] f() [f()]
f() CALL libcall___errno_location_thunk
[f()] LOAD 433 f()
 BRANCH VZERO
f() CALL libcall_dup2_thunk f() f(RSP)
0 INT_SLESS f() 0
 BRANCH VZERO
 CALL func
0 INT_NOTEQUAL [f()] 4
f() CALL libcall___errno_location_thunk
[f()] LOAD 433 f()
 CALL func 0
 RETURN 0
 CALL func 1
 RETURN 0
 CALL func 2
 RETURN 0
f() CALL libcall_ioctl_thunk ARG1 21523 (RSP + -24)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL libcall_getenv_thunk COLUMNS
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
[(f() + 40)] LOAD 433 (f() + 40)
f() COPY f()
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
COLUMNS COPY COLUMNS
f() CALL libcall_atoi_thunk f()
0 INT_EQUAL f() 0
 CBRANCH (f() INT_SLESS 1)
f() CAST f()
 CBRANCH (f() INT_EQUAL 0)
(RSP + -24) PTRSUB RSP -24
0 INT_SLESS f() 1
0 COPY 0
f() INT_ZEXT f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 f()
f() CALL func
0 INT_EQUAL f() 1
 RETURN 0 f()
 CBRANCH (f() INT_EQUAL 1)
 BRANCH VZERO
0 COPY 0
f() CALL func 1
f() CALL func
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
 RETURN 0 f()
0 COPY 0
f() CALL func 2
 BRANCH VZERO
 CALL func 1
 RETURN 0
 CALL func 2
 RETURN 0
 RETURN 0
 RETURN 0
VZERO COPY VZERO
 CALL func 1 65535
 RETURN 0
f() CALL func (RSP + -24) ARG1 ARG2 ARG3 ARG4 ARG5 ARG6 ARG7
0 INT_NOTEQUAL ARG8 0
0 INT_NOTEQUAL ARG8 0
 STORE 433 ARG8 0
 STORE 433 ARG8 1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -24) PTRSUB RSP -24
 CBRANCH (ARG8 INT_NOTEQUAL 0)
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
40 INT_ADD 0 40
40 CAST 40
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func
 CBRANCH (ARG8 INT_NOTEQUAL 0)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CALL func (RSP + -56)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) INT_AND (A_Stack[-0x30]:8 # A_Stack[-0x38]:8) -1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL func (RSP + -120) ARG1 ARG2 (RSP + -136) 4
 CALL func (RSP + -120) ARG3 ARG4 ARG3
0 INT_EQUAL f() 0
 CBRANCH (0 INT_EQUAL [(f() + 40)])
 CBRANCH (f() INT_EQUAL 0)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -136) PTRSUB RSP -136
(RSP + -120) PTRSUB RSP -120
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
(RSP + -120) PTRSUB RSP -120
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL func (RSP + -136)
(RSP + -136) PTRSUB RSP -136
(A_Stack[-0x80]:8 # A_Stack[-0x88]:8) PIECE A_Stack[-0x80]:8 A_Stack[-0x88]:8
(FS_OFFSET + 40) INT_ADD 0 40
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -136)
 CALL func (RSP + -120)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
f() CALL func 5
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
f() INT_AND f() -1
 RETURN 1
(A_Stack[-0x80]:8 # A_Stack[-0x88]:8) PIECE A_Stack[-0x80]:8 A_Stack[-0x88]:8
0 INT_NOTEQUAL f() 0
f() CALL func (RSP + -120)
(RSP + -120) PTRSUB RSP -120
(RSP + -120) PTRSUB RSP -120
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
 CBRANCH (VZERO INT_EQUAL 0)
0 INT_EQUAL VZERO 0
 CBRANCH (f() INT_NOTEQUAL -1)
0 INT_NOTEQUAL f() -1
 CBRANCH (f() INT_NOTEQUAL 0)
 CALL libcall___cxa_guard_release_thunk 6960768
f() CALL libcall_sysconf_thunk 0
6960768 PTRSUB 0 6960768
 CBRANCH (f() INT_LESS ((f(ARG2) + f()) + 1))
 RETURN 0 1
f() COPY f()
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL f())
f() COPY f()
0 INT_NOTEQUAL f() f()
f() COPY f()
0 COPY 0
1 COPY 1
(f() + 8) PTRADD f() 1 8
f() COPY f()
 RETURN 0 0
(f(ARG2) + 1) INT_ADD f(ARG2) 1
f() CAST f()
(RSP + -72) PTRSUB RSP -72
(f() / 2) INT_SDIV f() 2
f() CALL func (RSP + -72)
f() CALL func (RSP + -72)
(RSP + -72) PTRSUB RSP -72
f() CAST f()
(f(ARG2) + f()) INT_ADD f(ARG2) f()
[f()] LOAD 433 f()
0 INT_LESS f() ((f(ARG2) + f()) + 1)
((f(ARG2) + f()) + 1) INT_ADD (f(ARG2) + f()) 1
f() CALL libcall_strlen_thunk [f()]
0 INT_NOTEQUAL f() 0
6960768 PTRSUB 0 6960768
f() CALL libcall___cxa_guard_acquire_thunk 6960768
 RETURN 0
VZERO COPY VZERO
 CALL func 1 65535
 RETURN 0
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALLIND [ARG1] [(ARG1 + 8)] ARG2 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 COPY 0
 RETURN 0 0
ARG1 COPY ARG1
ARG2 COPY ARG2
0 INT_EQUAL ARG3 0
ARG3 INT_ZEXT ARG3
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_EQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL libcall_pthread_attr_init_thunk (RSP + -72)
 CBRANCH (f() INT_EQUAL 0)
(RSP + -72) PTRSUB RSP -72
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
 CALL libcall_pthread_join_thunk f() 0
 CBRANCH (ARG3 INT_EQUAL 0)
4298061 PTRSUB 0 4298061
(RSP + -72) PTRSUB RSP -72
f() CALL libcall_pthread_create_thunk (RSP + -96) (RSP + -72) 4298061 (RSP + -88)
(RSP + -72) PTRSUB RSP -72
0 INT_EQUAL f() 0
(RSP + -88) PTRSUB RSP -88
(RSP + -96) PTRSUB RSP -96
f() CALL libcall_pthread_attr_setstacksize_thunk (RSP + -72) ARG3
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CALL libcall_pthread_attr_destroy_thunk (RSP + -72)
(RSP + -72) PTRSUB RSP -72
 BRANCH VZERO
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
f() CALL func ARG2
f() CALL func ARG2
 CALL libcall_basic_string_thunk ARG1 (RSP + -56)
ARG1 COPY ARG1
(RSP + -168) PTRSUB RSP -168
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_localtime_r_thunk (RSP + -168) (RSP + -152)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -152) PTRSUB RSP -152
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL f() 0
 CALL libcall_strftime_thunk (RSP + -88) 20 %Y-%m-%d %H:%M:%S f()
[40] LOAD 433 40
40 CAST 40
(RSP + -56) CAST (RSP + -56)
%Y-%m-%d %H:%M:%S COPY %Y-%m-%d %H:%M:%S
 CALL libcall_allocator_thunk
%s.%.9u COPY %s.%.9u
 CALL libcall_~allocator_thunk (RSP + -169)
(RSP + -169) PTRSUB RSP -169
f() INT_ZEXT f()
(RSP + -88) PTRSUB RSP -88
 RETURN 1
 CALL libcall_snprintf_thunk (RSP + -56) 30 %s.%.9u (RSP + -88) f()
 CALL libcall___assert_fail_thunk 4677244 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/TimeValue.inc 28 0
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -56) PTRSUB RSP -56
0 COPY 0
40 INT_ADD 0 40
4677244 COPY 4677244
(RSP + -88) PTRSUB RSP -88
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/TimeValue.inc COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Unix/TimeValue.inc
(RSP + -56) PTRSUB RSP -56
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
ARG2 COPY ARG2
 CALL func (RSP + -24) f() f()
6960800 PTRSUB 0 6960800
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL VZERO 0
 CBRANCH (VZERO INT_NOTEQUAL 0)
(RSP + -24) PTRSUB RSP -24
f() CALL func 6960800
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
ARG1 COPY ARG1
ARG2 COPY ARG2
 RETURN 1
ARG2 COPY ARG2
ARG1 COPY ARG1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL libcall___assert_fail_thunk !ErrorHandler && "Error handler already registered!\n" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ErrorHandling.cpp 50 0
[40] LOAD 433 40
(RSP + -24) PTRSUB RSP -24
!ErrorHandler && "Error handler already registered!\n" COPY !ErrorHandler && "Error handler already registered!\n"
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ErrorHandling.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ErrorHandling.cpp
VZERO COPY VZERO
 CALL func (RSP + -24)
VZERO COPY VZERO
40 INT_ADD 0 40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
0 COPY 0
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (RSP + -24)
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func 6960800
(RSP + -24) PTRSUB RSP -24
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -24) f() f()
0 COPY 0
(RSP + -24) PTRSUB RSP -24
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
6960800 PTRSUB 0 6960800
40 CAST 40
 CALL libcall___stack_chk_fail_thunk
0 COPY 0
0 COPY 0
 RETURN 1
0 COPY 0
 RETURN 0
0 COPY 0
ARG1 COPY ARG1
ARG2 INT_ZEXT ARG2
ARG2 INT_ZEXT ARG2
ARG2 COPY ARG2
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -128) PTRSUB RSP -128
 CALL func (RSP + -128) (RSP + -144) (RSP + -144)
(RSP + -8) CAST (RSP + -8)
[40] LOAD 433 40
 CALL func
(RSP + -8) COPY (RSP + -8)
4299529 PTRSUB 0 4299529
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -128) PTRSUB RSP -128
(RSP + -8) PTRSUB RSP -8
(RSP + -144) PTRSUB RSP -144
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
4299515 COPY 4299515
40 CAST 40
 RETURN 0
 CALL func (RSP + -128) 0
(RSP + -56) PTRSUB RSP -56
ARG1 COPY ARG1
ARG2 COPY ARG2
 CALL func (RSP + -56) ARG3
 CALL func (RSP + -56) (RSP + -72) (RSP + -72)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 RETURN 0
(RSP + -72) PTRSUB RSP -72
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALLIND ARG1 f()
 RETURN 0
f() CALL libcall_c_str_thunk
 CALL func 4300218 ARG1
 RETURN 0
4300218 PTRSUB 0 4300218
 RETURN 0
 CALL func
ARG1 COPY ARG1
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
0 INT_NOTEQUAL VZERO ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) LOAD 433 ARG1
 CALLIND [(ARG1 + 8)] f(ARG1) ARG2 f(ARG1)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 8)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (VZERO INT_NOTEQUAL ARG1)
void llvm::ManagedStaticBase::destroy() const COPY void llvm::ManagedStaticBase::destroy() const
StaticList == this && "Not destroyed in reverse order of construction?" COPY StaticList == this && "Not destroyed in reverse order of construction?"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] CAST [(ARG1 + 16)]
 STORE 433 (ARG1 + 8) 0
 RETURN 1
[(ARG1 + 8)] CAST [(ARG1 + 8)]
 STORE 433 (ARG1 + 16) 0
VZERO COPY VZERO
 RETURN 0
 CALL libcall___assert_fail_thunk StaticList == this && "Not destroyed in reverse order of construction?" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp 72 void llvm::ManagedStaticBase::destroy() const
DeleterFn && "ManagedStatic not initialized correctly!" COPY DeleterFn && "ManagedStatic not initialized correctly!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp
 CALL libcall___assert_fail_thunk DeleterFn && "ManagedStatic not initialized correctly!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ManagedStatic.cpp 70 void llvm::ManagedStaticBase::destroy() const
VZERO COPY VZERO
 RETURN 1
void llvm::ManagedStaticBase::destroy() const COPY void llvm::ManagedStaticBase::destroy() const
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL 0 [40]
0 INT_NOTEQUAL f() 0
(RSP + -24) PTRSUB RSP -24
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 (f() + 40)
f() CALL func
 CBRANCH (0 INT_NOTEQUAL [40])
 CALL func (RSP + -24)
(RSP + -24) PTRSUB RSP -24
 CALL func (RSP + -24) f() f()
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 BRANCH VZERO
 CALL func f()
f() COPY f()
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
f() COPY f()
ARG1 CAST ARG1
ARG1 INT_ZEXT ARG1
ARG1 INT_ZEXT ARG1
ARG1 CAST ARG1
 CBRANCH (ARG1 INT_SLESS 65)
 RETURN 0 f(ARG1)
0 INT_SLESS ARG1 65
(ARG1 + 32) INT_ADD ARG1 32
0 INT_SLESS 90 ARG1
 BRANCH VZERO
 CBRANCH (90 INT_SLESS ARG1)
(ARG1 + f()) INT_ADD f() ARG1
0 INT_LESSEQUAL ARG3 f()
 CBRANCH (ARG3 INT_LESSEQUAL f())
0 COPY 0
[(ARG1 + f())] INT_SEXT [(ARG1 + f())]
f(ARG1) CALL func [(ARG1 + f())]
 RETURN 0 0
4294967295 COPY 4294967295
1 COPY 1
0 INT_NOTEQUAL f(ARG1) f(ARG1)
 CBRANCH (f(ARG1) INT_NOTEQUAL f(ARG1))
f(ARG1) CALL func
0 COPY 0
[(ARG1 + f())] LOAD 433 (ARG1 + f())
 RETURN 0 4294967295
 RETURN 0 1
(ARG1 + f()) CAST (ARG1 + f())
0 INT_LESS f(ARG1) f(ARG1)
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
 CBRANCH (f(ARG1) INT_LESS f(ARG1))
ARG1 COPY ARG1
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func [ARG1] ARG2 [f(ARG1 , RSP)] ARG2
ARG3 COPY ARG3
(RSP + -48) PTRSUB RSP -48
f(ARG1 , RSP) CAST f(ARG1 , RSP)
[ARG1] LOAD 433 ARG1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 RETURN 0 f()
f(ARG1 , RSP) CALL func (ARG1 + 8) (RSP + -48) (RSP + -48)
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL ARG3)
[(ARG1 + 8)] CAST [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_LESS ARG3)
0 INT_LESS [(ARG1 + 8)] ARG3
 BRANCH VZERO
(ARG1 + 8) PTRADD ARG1 1 8
0 COPY 0
4294967295 COPY 4294967295
 BRANCH VZERO
1 COPY 1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) PTRADD ARG1 1 8
0 INT_EQUAL [(ARG1 + 8)] ARG3
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1 ARG2 ARG3 ARG2
0 INT_EQUAL [(ARG1 + 8)] ARG3
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL ARG3)
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (f() INT_EQUAL 0)
 RETURN 0 0
0 COPY 0
1 COPY 1
 RETURN 0 1
0 INT_EQUAL f() 0
([f(RSP)] + ARG1) INT_ADD [f(RSP)] ARG1
(ARG2 - ARG4) INT_SUB ARG2 ARG4
ARG2 COPY ARG2
0 INT_LESS ARG2 ARG4
ARG2 COPY ARG2
f() CALL func (RSP + -40) ARG3 ARG4 ARG3
ARG4 COPY ARG4
 CBRANCH (ARG2 INT_LESS ARG4)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
(RSP + -40) PTRSUB RSP -40
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
 RETURN 1
0 COPY 0
f() COPY f()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 CBRANCH (f() INT_NOTEQUAL f(ARG2 , ARG4))
f(RSP) CAST f(RSP)
[(f() + 40)] LOAD 433 (f() + 40)
(f(ARG2) - [f(RSP)]) INT_SUB f(ARG2) [f(RSP)]
 CBRANCH (([f(RSP)] + ARG1) INT_EQUAL 0)
-1 COPY -1
0 INT_EQUAL ([f(RSP)] + ARG1) 0
f(RSP) CAST f(RSP)
-1 COPY -1
f(ARG4) COPY f(ARG4)
(RSP + -112) PTRSUB RSP -112
[f(RSP)] COPY [f(RSP)]
(RSP + -128) PTRSUB RSP -128
([f(RSP)] + ARG1) COPY ([f(RSP)] + ARG1)
f(RSP) CALL func (RSP + -104) (RSP + -96) (RSP + -96)
[f(RSP)] LOAD 433 f(RSP)
f() COPY f()
(f() + 40) CAST (f() + 40)
(RSP + -104) PTRSUB RSP -104
[f(RSP)] LOAD 433 f(RSP)
(RSP + -96) PTRSUB RSP -96
(f() + 40) INT_ADD f() 40
f(RSP) CALL func (RSP + -112) (RSP + -128) (RSP + -128)
0 INT_EQUAL 0 [(f() + 40)]
0 COPY 0
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
-1 COPY -1
-1 COPY -1
((ARG2 - ARG4) + 1) INT_ADD (ARG2 - ARG4) 1
 BRANCH VZERO
0 INT_NOTEQUAL [f(RSP)] 0
0 INT_NOTEQUAL f() f(ARG2 , ARG4)
ARG1 INT_ZEXT ARG1
ARG1 CAST ARG1
ARG1 CAST ARG1
ARG1 INT_ZEXT ARG1
 RETURN 0 f(ARG1)
 CBRANCH (ARG1 INT_SLESS 97)
0 INT_SLESS ARG1 97
(ARG1 + 32) INT_SUB ARG1 32
0 INT_SLESS 122 ARG1
 BRANCH VZERO
 CBRANCH (122 INT_SLESS ARG1)
0 INT_SLESS ARG1 48
0 INT_SLESS 57 ARG1
 RETURN 0 f()
 CBRANCH (ARG1 INT_SLESS 48)
 CBRANCH (57 INT_SLESS ARG1)
1 COPY 1
0 COPY 0
 BRANCH VZERO
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func [ARG1] ARG2 ARG3 ARG2
0 INT_LESSEQUAL ARG3 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] CAST [(ARG1 + 8)]
 CBRANCH (ARG3 INT_LESSEQUAL [(ARG1 + 8)])
0 INT_EQUAL f() 0
0 COPY 0
 RETURN 0 0
1 COPY 1
 RETURN 0 1
 CBRANCH (f() INT_EQUAL 0)
0 INT_LESSEQUAL ARG3 [(ARG1 + 8)]
(f() - ARG3) INT_SUB f() ARG3
f() CALL func (f() - ARG3) ARG2 ARG3
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (ARG3 INT_LESSEQUAL [(ARG1 + 8)])
0 COPY 0
 RETURN 0 1
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 RETURN 0 0
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 COPY ARG1
(ARG2 + f()) INT_ADD f() ARG2
(ARG2 + f()) INT_ADD f() ARG2
(ARG2 + f()) INT_ADD f() ARG2
(ARG2 + f()) INT_ADD f() ARG2
(ARG2 + f()) INT_ADD ARG2 f()
ARG3 COPY ARG3
0 INT_EQUAL f() f(ARG1 , RSP)
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
(RSP + -96) PTRSUB RSP -96
0 COPY 0
f(ARG1 , RSP) CALL func (ARG1 + 8) (RSP + -96) (RSP + -96)
f(ARG1 , RSP) CAST f(ARG1 , RSP)
 CBRANCH (f() INT_EQUAL f(ARG1 , RSP))
 CBRANCH ((f(ARG1 , RSP) + 1) INT_EQUAL (f() + 1))
0 INT_LESS f() f(ARG3)
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
 CBRANCH (f() INT_LESS f(ARG3))
(f() - f()) INT_SUB f() f()
(ARG2 + f()) CAST (ARG2 + f())
 CBRANCH ((f() - f()) INT_EQUAL 0)
[f(ARG1)] LOAD 433 f(ARG1)
0 INT_EQUAL (f() - f()) 0
([f(ARG1)] + f()) INT_ADD f() [f(ARG1)]
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_LESS (f() + 1) [(f(ARG1) + 8)]
0 INT_NOTEQUAL f() 0
[(f(ARG1) + 8)] LOAD 433 (f(ARG1) + 8)
[(f(ARG1) + 8)] CAST [(f(ARG1) + 8)]
([f(ARG1)] + f()) CAST ([f(ARG1)] + f())
 CBRANCH (f() INT_NOTEQUAL f())
 CBRANCH ((f() + 1) INT_LESS [(f(ARG1) + 8)])
0 INT_NOTEQUAL f() f()
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
 RETURN 0 4294967295
 RETURN 0 1
 RETURN 0 4294967295
 RETURN 0 1
 RETURN 0 4294967295
4294967295 COPY 4294967295
 RETURN 0 f()
 RETURN 0 1
1 COPY 1
4294967295 COPY 4294967295
1 COPY 1
4294967295 COPY 4294967295
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
(ARG2 + f()) CAST (ARG2 + f())
f() CALL func [(ARG2 + f())]
[(ARG2 + f())] INT_SEXT [(ARG2 + f())]
0 INT_EQUAL f() 0
[(ARG2 + f())] LOAD 433 (ARG2 + f())
(ARG2 + f()) CAST (ARG2 + f())
f() CALL func [(ARG2 + f())]
[(ARG2 + f())] INT_SEXT [(ARG2 + f())]
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
[(ARG2 + f())] LOAD 433 (ARG2 + f())
1 COPY 1
 BRANCH VZERO
 CBRANCH ([(f(ARG1) + 8)] INT_LESS f(ARG3))
1 COPY 1
 BRANCH VZERO
4294967295 COPY 4294967295
0 COPY 0
 BRANCH VZERO
f() CALL libcall_memcmp_thunk ([f(ARG1)] + f()) (ARG2 + f()) (f() - f())
[f(ARG1)] LOAD 433 f(ARG1)
0 INT_EQUAL f() 0
f() CALL func [([f(ARG1)] + f())]
[([f(ARG1)] + f())] INT_SEXT [([f(ARG1)] + f())]
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
 CBRANCH ([(f(ARG1) + 8)] INT_EQUAL f(ARG3))
0 INT_EQUAL [(f(ARG1) + 8)] f(ARG3)
([f(ARG1)] + f()) INT_ADD f() [f(ARG1)]
[([f(ARG1)] + f())] LOAD 433 ([f(ARG1)] + f())
 CBRANCH f()
([f(ARG1)] + f()) CAST ([f(ARG1)] + f())
f() COPY f()
[(f(ARG1) + 8)] LOAD 433 (f(ARG1) + 8)
0 INT_SLESS f() 0
 BRANCH VZERO
 BRANCH VZERO
(f() + 1) INT_SUB f() 1
(f() + 1) INT_ADD f() 1
 CBRANCH (f() INT_SLESS 0)
 CBRANCH ([([f(ARG1)] + f())] INT_NOTEQUAL [(ARG2 + f())])
[f(ARG1)] LOAD 433 f(ARG1)
([f(ARG1)] + f()) INT_ADD f() [f(ARG1)]
[(ARG2 + f())] LOAD 433 (ARG2 + f())
([f(ARG1)] + f()) CAST ([f(ARG1)] + f())
[([f(ARG1)] + f())] LOAD 433 ([f(ARG1)] + f())
 CBRANCH ([([f(ARG1)] + f())] INT_LESS [(ARG2 + f())])
(ARG2 + f()) CAST (ARG2 + f())
0 INT_LESS [([f(ARG1)] + f())] [(ARG2 + f())]
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 BRANCH VZERO
[(f(ARG1) + 8)] LOAD 433 (f(ARG1) + 8)
0 COPY 0
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
0 INT_LESS [(f(ARG1) + 8)] f(ARG3)
[(f(ARG1) + 8)] CAST [(f(ARG1) + 8)]
f() COPY f()
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
0 INT_NOTEQUAL f() 0
(ARG2 + f()) CAST (ARG2 + f())
([f(ARG1)] + f()) CAST ([f(ARG1)] + f())
([f(ARG1)] + f()) INT_ADD f() [f(ARG1)]
(f() + 1) INT_ADD f() 1
[f(ARG1)] LOAD 433 f(ARG1)
[(ARG2 + f())] LOAD 433 (ARG2 + f())
[f(ARG1)] LOAD 433 f(ARG1)
0 INT_EQUAL (f(ARG1 , RSP) + 1) (f() + 1)
(f(ARG1 , RSP) + 1) INT_ADD f(ARG1 , RSP) 1
([f(ARG1)] + (f() + 1)) CAST ([f(ARG1)] + (f() + 1))
([f(ARG1)] + (f() + 1)) INT_ADD (f() + 1) [f(ARG1)]
0 INT_NOTEQUAL [([f(ARG1)] + f())] [(ARG2 + f())]
[([f(ARG1)] + f())] LOAD 433 ([f(ARG1)] + f())
[([f(ARG1)] + (f() + 1))] INT_SEXT [([f(ARG1)] + (f() + 1))]
[([f(ARG1)] + (f() + 1))] LOAD 433 ([f(ARG1)] + (f() + 1))
f() CALL func [([f(ARG1)] + (f() + 1))]
0 INT_NOTEQUAL f() 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL libcall_operator.delete[]_thunk ARG2
0 INT_NOTEQUAL ARG2 0
 RETURN 0
 CBRANCH (ARG2 INT_NOTEQUAL 0)
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG1
f() CAST f()
0 INT_NOTEQUAL [f()] 0
 CBRANCH ([f()] INT_NOTEQUAL 0)
 RETURN 0
[f()] LOAD 433 f()
 STORE 433 f() 0
 CALL func f() f()
f() LOAD 433 f()
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
0 INT_LESSEQUAL [(ARG1 + 8)] ARG2
(ARG2 + [ARG1]) INT_ADD ARG2 [ARG1]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_LESSEQUAL ARG2)
[(ARG1 + 8)] CAST [(ARG1 + 8)]
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/ArrayRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
0 COPY 0
 RETURN 0 (ARG2 + [ARG1])
Index < Length && "Invalid index!" COPY Index < Length && "Invalid index!"
 RETURN 1
 CALL libcall___assert_fail_thunk Index < Length && "Invalid index!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/ArrayRef.h 186 0
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
 STORE 433 ARG1 [f(ARG2)]
 STORE 433 ARG2 [f(RSP)]
f(ARG2) CALL func ARG2
f(ARG2) CAST f(ARG2)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
f(RSP) CAST f(RSP)
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f(RSP) CALL func (RSP + -24)
(RSP + -24) PTRSUB RSP -24
[f(RSP)] LOAD 433 f(RSP)
(FS_OFFSET + 40) INT_ADD 0 40
[f(ARG2)] LOAD 433 f(ARG2)
[f(ARG1)] LOAD 433 f(ARG1)
f(ARG1) CAST f(ARG1)
40 CAST 40
[40] LOAD 433 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
ARG1 COPY ARG1
f() CALL func ARG1
ARG2 COPY ARG2
(RSP + -40) PTRSUB RSP -40
 CBRANCH (ARG2 INT_NOTEQUAL 0)
ARG2 COPY ARG2
0 INT_NOTEQUAL ARG2 0
 RETURN 0
 CALL func f() (RSP + -40) f()
 CALL func f() ARG2
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0 [(ARG1 + 8)]
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
0 INT_EQUAL ARG5 0
(ARG6 + 1) INT_ADD ARG6 1
0 INT_LESS ARG6 f(RSP)
0 INT_NOTEQUAL ARG6 0
0 INT_LESS 64 (f() + 1)
(RSP + -344) PTRSUB RSP -344
 CBRANCH (64 INT_LESS (f() + 1))
f() CALL func (RSP + -392)
0 COPY 0
f(ARG6 , RSP) COPY f(ARG6 , RSP)
(f() + 1) INT_ADD f() 1
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(RSP + -408) PTRSUB RSP -408
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
64 COPY 64
1 COPY 1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL func (RSP + -408)
1 COPY 1
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_LESS f() f()
0 INT_LESSEQUAL f() f()
(RSP + -296) PTRSUB RSP -296
f() INT_ZEXT f()
(RSP + -392) PTRSUB RSP -392
 CBRANCH (f() INT_LESS f())
 CALL func (RSP + -344)
 CBRANCH (f() INT_LESSEQUAL f())
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (ARG6 INT_NOTEQUAL 0)
 CBRANCH (ARG6 INT_LESS f(RSP))
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
 CBRANCH (f() INT_LESSEQUAL f())
1 COPY 1
((f() / 2147483647) + 1) INT_SUB (f() / 2147483647) 1
(f() / 2147483647) SUBPIECE f() 0
[(f(RSP) + (f() * 4))] COPY [(f(RSP) + (f() * 4))]
0 INT_LESSEQUAL f() f()
(f(RSP) + (f() * 4)) PTRADD f(RSP) f() 4
 STORE 433 f(RSP) (f() / 2147483647)
[(f(RSP) + (f() * 4))] LOAD 433 (f(RSP) + (f() * 4))
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH ((f() + 1) INT_LESS 2287828610704211969)
((f() + 1) * 4) INT_MULT (f() + 1) 4
-1 COPY -1
 BRANCH VZERO
 CBRANCH ([f()] INT_EQUAL [f()])
 STORE 433 (f(RSP) + (f() * 4)) f(RSP)
(f() * 4) INT_MULT f() 4
(f(RSP) + ((f() + -1) * 4)) PTRADD f(RSP) (f() + -1) 4
((f() * 4) + -4) INT_ADD (f() * 4) -4
f(RSP) CAST f(RSP)
f(RSP) CALL func (f(RSP) + ((f() + -1) * 4)) (f(RSP) + (f() * 4)) (f(RSP) + (f() * 4)) ((f() * 4) + -4)
[f(RSP)] LOAD 433 f(RSP)
(f() + -1) INT_SUB f() -1
([f(RSP)] + 1) INT_ADD [f(RSP)] 1
(f(RSP) + (f() * 4)) PTRADD f(RSP) f() 4
 STORE 433 (f(RSP) + (f() * 4)) ([f(RSP)] + 1)
(f(RSP) + (f() * 4)) PTRADD f(RSP) f() 4
 BRANCH VZERO
(f(RSP) + (f() * 4)) PTRADD f(RSP) f() 4
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(ARG6 , RSP)
 RETURN 1
 CBRANCH (ARG5 INT_EQUAL 0)
(f() + 1) INT_SUB f() 1
(f() + 1) INT_SUB f() 1
((f() * 4) + -4) INT_ADD (f() * 4) -4
(f() + 1) INT_SUB f() 1
f() CAST f()
(f(RSP) + (f() * 4)) PTRADD f(RSP) f() 4
(RSP + -408) PTRSUB RSP -408
 BRANCH VZERO
([f(RSP)] + 1) INT_ADD [f(RSP)] 1
 STORE 433 (f(RSP) + (f() * 4)) [f(RSP)]
(RSP + -408) PTRSUB RSP -408
0 INT_ZEXT 0
f() CAST f()
(f(RSP) + ((f() + 1) * 4)) PTRADD f(RSP) (f() + 1) 4
f(RSP) CALL func (RSP + -372) (RSP + -368) (RSP + -368)
(RSP + -372) PTRSUB RSP -372
[f(RSP)] LOAD 433 f(RSP)
(f() * 4) INT_MULT f() 4
0 INT_NOTEQUAL [f()] [f()]
(RSP + -368) PTRSUB RSP -368
[f()] LOAD 433 f()
0 INT_EQUAL [f()] [f()]
f() CALL func (RSP + -392) (f() + 1) (f() + 1)
f() CAST f()
[f()] LOAD 433 f()
[f(RSP)] LOAD 433 f(RSP)
f() CALL func (RSP + -392) (f() + 1) (f() + 1)
f(RSP) CALL func (f(RSP) + ((f() + 1) * 4)) (f(RSP) + (f() * 4)) (f(RSP) + (f() * 4)) ((f() * 4) + -4)
(RSP + -392) PTRSUB RSP -392
(RSP + -392) PTRSUB RSP -392
f() CAST f()
f(RSP) CAST f(RSP)
(f(RSP) + (f() * 4)) PTRADD f(RSP) f() 4
f(RSP) CAST f(RSP)
(f() + 1) INT_SUB f() 1
[f()] LOAD 433 f()
(f() + 1) INT_SUB f() 1
f() CALL func (RSP + -408) (f() + 1) (f() + 1)
f() CALL func (RSP + -408) (f() + 1) (f() + 1)
[f()] LOAD 433 f()
f(RSP) INT_ADD f(RSP) 0
f() INT_ZEXT f()
 STORE 433 (f(RSP) + (f() * 4)) f()
(f(RSP) + (f() * 4)) PTRADD f(RSP) f() 4
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
0 INT_LESS (f() + 1) 2287828610704211969
(RSP + -344) PTRSUB RSP -344
f() CALL libcall_operator.new[]_thunk f()
(f() + 1) INT_ADD f() 1
f() CAST f()
 CALL func (RSP + -344) f() f()
(f() + 1) INT_ADD f() 1
f(RSP) COPY f(RSP)
[(f(RSP) + (f() * 4))] LOAD 433 (f(RSP) + (f() * 4))
(RSP + -376) PTRSUB RSP -376
(f(RSP) + (f() * 4)) PTRADD f(RSP) f() 4
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CAST f(RSP)
f(RSP) CALL func (RSP + -376) (f(RSP) + (f() * 4)) (f(RSP) + (f() * 4))
f() COPY f()
(f(RSP) + (f() * 4)) PTRADD f(RSP) f() 4
 BRANCH VZERO
 BRANCH VZERO
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 (ARG1 + 8) ARG3
 RETURN 0
 CALL func (RSP + -40) ARG1 ARG2 ARG1
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
[40] LOAD 433 40
(RSP + -40) PTRSUB RSP -40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) COPY (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647) (f() / 4611686014132420609) ARG4 ARG5
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
f() CALL func ARG2 ARG3 ARG3
(f() / 2147483647) INT_RIGHT f() 64
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() / 2147483647) INT_RIGHT f() 64
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
f() CALL func [ARG1] [(ARG1 + 8)] [(ARG1 + 8)]
 RETURN 0
f() CALL libcall_operator[]_thunk ARG1
ARG1 COPY ARG1
 CALL libcall_basic_string_thunk ARG1 ([(ARG2 + 8)] / 2147483647) 0
ARG2 COPY ARG2
ARG2 COPY ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 8) PTRADD ARG2 1 8
([(ARG2 + 8)] / 2147483647) SUBPIECE [(ARG2 + 8)] 0
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 (f() + 40)
 CALL libcall_allocator_thunk
(RSP + -65) PTRSUB RSP -65
 CBRANCH (f() INT_NOTEQUAL f(ARG2))
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL f() f(ARG2)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [40])
0 COPY 0
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CALL libcall_~allocator_thunk (RSP + -65)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL 0 [40]
(f() + 40) INT_ADD f() 40
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
([ARG2] + f()) INT_ADD f() [ARG2]
f() CAST f()
[([ARG2] + f())] LOAD 433 ([ARG2] + f())
([ARG2] + f()) CAST ([ARG2] + f())
 STORE 433 f() f(ARG2)
f(ARG2) CALL func [([ARG2] + f())]
[([ARG2] + f())] INT_SEXT [([ARG2] + f())]
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() CALL libcall_operator[]_thunk ARG1
ARG1 COPY ARG1
 CALL libcall_basic_string_thunk ARG1 ([(ARG2 + 8)] / 2147483647) 0
ARG2 COPY ARG2
ARG2 COPY ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 8) PTRADD ARG2 1 8
([(ARG2 + 8)] / 2147483647) SUBPIECE [(ARG2 + 8)] 0
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 (f() + 40)
 CALL libcall_allocator_thunk
(RSP + -65) PTRSUB RSP -65
 CBRANCH (f() INT_NOTEQUAL f(ARG2))
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL f() f(ARG2)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [40])
0 COPY 0
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CALL libcall_~allocator_thunk (RSP + -65)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL 0 [40]
(f() + 40) INT_ADD f() 40
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
([ARG2] + f()) INT_ADD f() [ARG2]
f() CAST f()
[([ARG2] + f())] LOAD 433 ([ARG2] + f())
([ARG2] + f()) CAST ([ARG2] + f())
 STORE 433 f() f(ARG2)
f(ARG2) CALL func [([ARG2] + f())]
[([ARG2] + f())] INT_SEXT [([ARG2] + f())]
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
ARG1 COPY ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
ARG2 COPY ARG2
ARG2 COPY ARG2
(([(ARG1 + 8)] - ARG4) - ARG3) INT_SUB ([(ARG1 + 8)] - ARG4) ARG3
0 INT_LESS 255 ARG3
ARG3 COPY ARG3
0 INT_NOTEQUAL ARG3 0
ARG3 COPY ARG3
0 INT_LESS ([(ARG1 + 8)] - ARG4) ARG3
(ARG3 / 2147483647) SUBPIECE ARG3 0
0 INT_LESS [(ARG1 + 8)] ARG4
ARG4 COPY ARG4
ARG4 COPY ARG4
ARG4 CAST ARG4
ARG4 CAST ARG4
[(ARG1 + 8)] CAST [(ARG1 + 8)]
0 INT_EQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) CAST (f() + 40)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_LESS ARG4)
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_EQUAL 0)
f(ARG1 , ARG4) CAST f(ARG1 , ARG4)
(f(ARG1 , ARG4) - [f(ARG1)]) CAST (f(ARG1 , ARG4) - [f(ARG1)])
(f(ARG1 , ARG4) - [f(ARG1)]) INT_SUB f(ARG1 , ARG4) [f(ARG1)]
(f(ARG1 , ARG4) + 1) CAST (f(ARG1 , ARG4) + 1)
 BRANCH VZERO
f(ARG1 , ARG4) CAST f(ARG1 , ARG4)
 CBRANCH ((f(ARG1 , ARG4) + 1) INT_LESS f(ARG1 , ARG3 , ARG4))
(f(ARG1 , ARG4) + 1) INT_ADD f(ARG1 , ARG4) 1
[f(ARG1)] LOAD 433 f(ARG1)
(f(ARG1 , ARG4) - [f(ARG1)]) COPY (f(ARG1 , ARG4) - [f(ARG1)])
0 INT_LESS (f(ARG1 , ARG4) + 1) f(ARG1 , ARG3 , ARG4)
 CBRANCH (([(ARG1 + 8)] - ARG4) INT_LESS ARG3)
0 INT_LESS ([(ARG1 + 8)] - ARG4) 16
((ARG4 + [ARG1]) + ((([(ARG1 + 8)] - ARG4) - ARG3) + 1)) INT_ADD (ARG4 + [ARG1]) ((([(ARG1 + 8)] - ARG4) - ARG3) + 1)
-1 COPY -1
 CBRANCH (([(ARG1 + 8)] - ARG4) INT_LESS 16)
(ARG4 + [ARG1]) CAST (ARG4 + [ARG1])
(ARG4 + [ARG1]) INT_ADD ARG4 [ARG1]
((ARG4 + [ARG1]) + ((([(ARG1 + 8)] - ARG4) - ARG3) + 1)) CAST ((ARG4 + [ARG1]) + ((([(ARG1 + 8)] - ARG4) - ARG3) + 1))
(ARG4 + [ARG1]) CAST (ARG4 + [ARG1])
-1 COPY -1
((([(ARG1 + 8)] - ARG4) - ARG3) + 1) INT_ADD (([(ARG1 + 8)] - ARG4) - ARG3) 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
(f(ARG1 , ARG3 , ARG4 , RSP) - [f(ARG1)]) CAST (f(ARG1 , ARG3 , ARG4 , RSP) - [f(ARG1)])
0 INT_LESS (f(ARG1 , ARG3 , ARG4 , RSP) + [([(f(ARG1 , ARG4) + (f(ARG3) + -1))] + (RSP + -280))]) f(ARG1 , ARG3 , ARG4)
[([(f(ARG1 , ARG4) + (f(ARG3) + -1))] + (RSP + -280))] LOAD 433 ([(f(ARG1 , ARG4) + (f(ARG3) + -1))] + (RSP + -280))
f(ARG1 , ARG3 , ARG4 , RSP) CAST f(ARG1 , ARG3 , ARG4 , RSP)
(f(ARG1 , ARG3 , ARG4 , RSP) + (f(ARG3) + -1)) CAST (f(ARG1 , ARG3 , ARG4 , RSP) + (f(ARG3) + -1))
f(ARG1 , ARG3 , ARG4 , RSP) CAST f(ARG1 , ARG3 , ARG4 , RSP)
f(ARG1 , ARG3 , ARG4 , RSP) CAST f(ARG1 , ARG3 , ARG4 , RSP)
(f(ARG1 , ARG3 , ARG4 , RSP) + (f(ARG3) + -1)) INT_ADD f(ARG1 , ARG3 , ARG4 , RSP) (f(ARG3) + -1)
(f(ARG1 , ARG3 , ARG4 , RSP) + [([(f(ARG1 , ARG4) + (f(ARG3) + -1))] + (RSP + -280))]) CAST (f(ARG1 , ARG3 , ARG4 , RSP) + [([(f(ARG1 , ARG4) + (f(ARG3) + -1))] + (RSP + -280))])
[f(ARG1)] LOAD 433 f(ARG1)
(f(ARG1 , ARG3 , ARG4 , RSP) - [f(ARG1)]) COPY (f(ARG1 , ARG3 , ARG4 , RSP) - [f(ARG1)])
[(f(ARG1 , ARG4) + (f(ARG3) + -1))] LOAD 433 (f(ARG1 , ARG3 , ARG4 , RSP) + (f(ARG3) + -1))
(RSP + -280) PTRSUB RSP -280
([(f(ARG1 , ARG4) + (f(ARG3) + -1))] + (RSP + -280)) PTRADD (RSP + -280) [(f(ARG1 , ARG4) + (f(ARG3) + -1))] 1
 CBRANCH f(ARG1 , ARG3 , ARG4 , RSP)
[(f(ARG1 , ARG4) + (f(ARG3) + -1))] INT_SEXT [(f(ARG1 , ARG4) + (f(ARG3) + -1))]
(f(ARG1 , ARG3 , ARG4 , RSP) - [f(ARG1)]) INT_SUB f(ARG1 , ARG3 , ARG4 , RSP) [f(ARG1)]
[(f(ARG1 , ARG4) + (f(ARG3) + -1))] CAST [(f(ARG1 , ARG4) + (f(ARG3) + -1))]
(f(ARG1 , ARG3 , ARG4 , RSP) + [([(f(ARG1 , ARG4) + (f(ARG3) + -1))] + (RSP + -280))]) INT_ADD f(ARG1 , ARG3 , ARG4 , RSP) [([(f(ARG1 , ARG4) + (f(ARG3) + -1))] + (RSP + -280))]
 BRANCH VZERO
[(f(ARG1 , ARG4) + (f(ARG3) + -1))] INT_ZEXT [(f(ARG1 , ARG4) + (f(ARG3) + -1))]
(f(ARG3) + -1) INT_SUB f(ARG3) -1
[([(f(ARG1 , ARG4) + (f(ARG3) + -1))] + (RSP + -280))] INT_ZEXT [([(f(ARG1 , ARG4) + (f(ARG3) + -1))] + (RSP + -280))]
f() CALL libcall_memcmp_thunk f(ARG1 , ARG4) f(ARG2) f(ARG3)
0 INT_EQUAL f() 0
-1 COPY -1
-1 COPY -1
 BRANCH VZERO
 CBRANCH (255 INT_LESS ARG3)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(ARG1 , ARG3 , ARG4 , RSP)
 RETURN 1
 CBRANCH (f() INT_NOTEQUAL (f(ARG3) + 1))
 BRANCH VZERO
f() INT_ZEXT f()
(((f(ARG3) / 2147483647) - (f() / 2147483647)) + -1) INT_SUB ((f(ARG3) / 2147483647) - (f() / 2147483647)) -1
 STORE 433 ((RSP + -280) + f()) (((f(ARG3) / 2147483647) - (f() / 2147483647)) + -1)
f() CALL func (RSP + -360) f() f()
(RSP + -280) PTRSUB RSP -280
((RSP + -280) + f()) PTRADD (RSP + -280) f() 1
(f() + 1) INT_ADD f() 1
f() INT_ZEXT f()
f() CAST f()
0 INT_NOTEQUAL f() (f(ARG3) + 1)
(f() / 2147483647) SUBPIECE f() 0
(f(ARG3) / 2147483647) SUBPIECE f(ARG3) 0
(f(ARG3) + 1) INT_SUB f(ARG3) 1
((f(ARG3) / 2147483647) - (f() / 2147483647)) INT_SUB (f(ARG3) / 2147483647) (f() / 2147483647)
(RSP + -360) PTRSUB RSP -360
f() INT_SEXT f()
f() CALL libcall_memcmp_thunk f(ARG1 , ARG3 , ARG4 , RSP) f(ARG2) f(ARG3)
0 INT_EQUAL f() 0
-1 COPY -1
-1 COPY -1
0 COPY 0
 CALL libcall_memset_thunk (RSP + -280) (ARG3 / 2147483647) 256
(RSP + -280) PTRSUB RSP -280
([(ARG1 + 8)] - ARG4) INT_SUB [(ARG1 + 8)] ARG4
 BRANCH VZERO
-1 COPY -1
-1 COPY -1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (ARG3 INT_NOTEQUAL 0)
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG2 COPY ARG2
f() CALL libcall_memcmp_thunk ([f(ARG1 , RSP)] + [ARG1]) ARG2 ARG3
0 INT_LESS [(ARG1 + 8)] ARG3
ARG3 COPY ARG3
([(ARG1 + 8)] - ARG3) INT_SUB [(ARG1 + 8)] ARG3
0 INT_EQUAL [f(RSP)] ARG3
ARG3 COPY ARG3
ARG3 COPY ARG3
0 INT_EQUAL ARG3 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_LESS ARG3)
[(ARG1 + 8)] CAST [(ARG1 + 8)]
 CBRANCH (f(ARG1 , ARG3) INT_EQUAL f())
f(ARG3) COPY f(ARG3)
([f(ARG1 , RSP)] + [ARG1]) INT_ADD [f(ARG1 , RSP)] [ARG1]
 CBRANCH (0 INT_EQUAL [(f() + 40)])
([f(ARG1 , RSP)] + [ARG1]) CAST ([f(ARG1 , RSP)] + [ARG1])
(f() + 40) INT_ADD f() 40
 CBRANCH (([f(ARG1 , RSP)] + [ARG1]) INT_EQUAL 0)
-1 COPY -1
(RSP + -152) PTRSUB RSP -152
0 INT_EQUAL 0 [(f() + 40)]
0 INT_EQUAL ([f(ARG1 , RSP)] + [ARG1]) 0
f(ARG1 , RSP) CALL func (RSP + -152) (ARG1 + 8) (ARG1 + 8)
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
(RSP + -144) PTRSUB RSP -144
([(ARG1 + 8)] - [f(ARG1 , RSP)]) INT_SUB [(ARG1 + 8)] [f(ARG1 , RSP)]
(RSP + -136) PTRSUB RSP -136
-1 COPY -1
[(f() + 40)] LOAD 433 (f() + 40)
f(ARG1 , RSP) CAST f(ARG1 , RSP)
f(RSP) CAST f(RSP)
[ARG1] LOAD 433 ARG1
(f() + 40) CAST (f() + 40)
(f(ARG1 , ARG3) + -1) INT_ADD f(ARG1 , ARG3) -1
(ARG1 + 8) PTRADD ARG1 1 8
[f(RSP)] COPY [f(RSP)]
([f(ARG1 , RSP)] + [ARG1]) COPY ([f(ARG1 , RSP)] + [ARG1])
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -144) (RSP + -136) (RSP + -136)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f(ARG1 , ARG3) + -1) COPY (f(ARG1 , ARG3) + -1)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 RETURN 0 f(ARG1 , ARG3)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
 RETURN 1
 CBRANCH ([f(RSP)] INT_EQUAL ARG3)
f(ARG1 , ARG3) COPY f(ARG1 , ARG3)
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
 CBRANCH ~(f())
~(f()) BOOL_NEGATE f()
 BRANCH VZERO
0 INT_EQUAL f(ARG1 , ARG3) f()
0 COPY 0
(([(ARG1 + 8)] - ARG3) + 1) INT_ADD ([(ARG1 + 8)] - ARG3) 1
-1 COPY -1
 BRANCH VZERO
 CBRANCH (ARG3 INT_EQUAL 0)
0 INT_NOTEQUAL f() 0
0 COPY 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
-1 COPY -1
0 INT_NOTEQUAL [f(RSP)] 0
([f(ARG1 , RSP)] + [ARG1]) COPY ([f(ARG1 , RSP)] + [ARG1])
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG1 COPY ARG1
(f() + 40) CAST (f() + 40)
0 COPY 0
-1 COPY -1
(f(ARG1 , RSP) + -1) INT_ADD f(ARG1 , RSP) -1
(FS_OFFSET + 40) INT_ADD 0 40
0 COPY 0
 CBRANCH (f(ARG3) INT_NOTEQUAL f())
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 COPY 0
f(ARG1 , RSP) CAST f(ARG1 , RSP)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
f(ARG1 , RSP) CALL func (RSP + -104) (f(ARG1) + 8) (f(ARG1) + 8)
 CBRANCH ((f(ARG1 , RSP) + -1) INT_EQUAL f())
0 INT_EQUAL (f(ARG1 , RSP) + -1) f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 COPY 0
0 INT_EQUAL f() [(f() + 40)]
(RSP + -104) PTRSUB RSP -104
0 INT_NOTEQUAL f(ARG3) f()
0 COPY 0
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
[(f() + 40)] LOAD 433 (f() + 40)
 BRANCH VZERO
(RSP + -120) PTRSUB RSP -120
(f() + 1) INT_ADD f() 1
f() CALL func (RSP + -120) f() f()
 CALL func (RSP + -56) f() 1 f()
(RSP + -56) PTRSUB RSP -56
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(ARG1 , RSP)
 RETURN 1
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
-1 COPY -1
(f(ARG1 , RSP) + -1) COPY (f(ARG1 , RSP) + -1)
[f(ARG1)] LOAD 433 f(ARG1)
-1 COPY -1
((f(ARG1 , RSP) + -1) + [f(ARG1)]) INT_ADD (f(ARG1 , RSP) + -1) [f(ARG1)]
((f(ARG1 , RSP) + -1) + [f(ARG1)]) CAST ((f(ARG1 , RSP) + -1) + [f(ARG1)])
(RSP + -56) PTRSUB RSP -56
[((f(ARG1 , RSP) + -1) + [f(ARG1)])] LOAD 433 ((f(ARG1 , RSP) + -1) + [f(ARG1)])
f() CALL func (RSP + -56) [((f(ARG1 , RSP) + -1) + [f(ARG1)])] [((f(ARG1 , RSP) + -1) + [f(ARG1)])]
ARG2 COPY ARG2
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 COPY ARG1
ARG3 COPY ARG3
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
f(ARG1 , RSP) CALL func (RSP + -48) (ARG1 + 8) (ARG1 + 8)
 CBRANCH ((f(ARG1 , RSP) + -1) INT_EQUAL -1)
0 INT_EQUAL (f(ARG1 , RSP) + -1) -1
(RSP + -48) PTRSUB RSP -48
(f(ARG1 , RSP) + -1) INT_ADD f(ARG1 , RSP) -1
f(ARG1 , RSP) CAST f(ARG1 , RSP)
 CBRANCH ([((f(ARG1 , RSP) + -1) + [ARG1])] INT_EQUAL ARG2)
-1 COPY -1
 RETURN 0 -1
 RETURN 0 (f(ARG1 , RSP) + -1)
(f(ARG1 , RSP) + -1) COPY (f(ARG1 , RSP) + -1)
[ARG1] LOAD 433 ARG1
((f(ARG1 , RSP) + -1) + [ARG1]) CAST ((f(ARG1 , RSP) + -1) + [ARG1])
((f(ARG1 , RSP) + -1) + [ARG1]) INT_ADD (f(ARG1 , RSP) + -1) [ARG1]
0 INT_EQUAL [((f(ARG1 , RSP) + -1) + [ARG1])] ARG2
[((f(ARG1 , RSP) + -1) + [ARG1])] LOAD 433 ((f(ARG1 , RSP) + -1) + [ARG1])
ARG4 COPY ARG4
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG3 COPY ARG3
-1 COPY -1
(FS_OFFSET + 40) INT_ADD 0 40
(f(ARG1 , RSP) + -1) INT_ADD f(ARG1 , RSP) -1
0 COPY 0
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() [(f() + 40)]
0 COPY 0
(RSP + -104) PTRSUB RSP -104
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL f(ARG3))
0 INT_NOTEQUAL f() f(ARG3)
(f() + 40) CAST (f() + 40)
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
f(ARG1 , RSP) CALL func (RSP + -104) (f(ARG1) + 8) (f(ARG1) + 8)
 CBRANCH ((f(ARG1 , RSP) + -1) INT_EQUAL f())
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL (f(ARG1 , RSP) + -1) f()
0 COPY 0
0 COPY 0
0 COPY 0
f(ARG1 , RSP) CAST f(ARG1 , RSP)
(f() + 1) INT_ADD f() 1
f() CALL func (RSP + -120) f() f()
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) f() 1 f()
(RSP + -120) PTRSUB RSP -120
 BRANCH VZERO
 RETURN 0 f(ARG1 , RSP)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
((f(ARG1 , RSP) + -1) + [f(ARG1)]) CAST ((f(ARG1 , RSP) + -1) + [f(ARG1)])
 CBRANCH (f() INT_EQUAL 1)
(RSP + -56) PTRSUB RSP -56
0 INT_EQUAL f() 1
[f(ARG1)] LOAD 433 f(ARG1)
-1 COPY -1
((f(ARG1 , RSP) + -1) + [f(ARG1)]) INT_ADD (f(ARG1 , RSP) + -1) [f(ARG1)]
(f(ARG1 , RSP) + -1) COPY (f(ARG1 , RSP) + -1)
[((f(ARG1 , RSP) + -1) + [f(ARG1)])] LOAD 433 ((f(ARG1 , RSP) + -1) + [f(ARG1)])
f() CALL func (RSP + -56) [((f(ARG1 , RSP) + -1) + [f(ARG1)])] [((f(ARG1 , RSP) + -1) + [f(ARG1)])]
-1 COPY -1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG2 (RSP + -56) (RSP + -56)
 CALL func ARG2 (RSP + -72) (RSP + -72)
f(RSP) CALL func (RSP + -72) ARG3 ARG4 0
(f(RSP) + ARG4) INT_ADD f(RSP) ARG4
ARG5 COPY ARG5
0 INT_NOTEQUAL ARG6 0
0 INT_EQUAL ARG6 0
(FS_OFFSET + 40) INT_ADD 0 40
[ARG1] COPY [ARG1]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_NOTEQUAL f(ARG5) 0
ARG5 COPY ARG5
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f(ARG1 , RSP) COPY f(ARG1 , RSP)
 CBRANCH (f(ARG5) INT_NOTEQUAL 0)
(f(ARG5) + 4294967295) INT_ADD f(ARG5) 4294967295
f(ARG1 , RSP) COPY f(ARG1 , RSP)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
 CBRANCH (f(ARG1 , RSP) INT_EQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH (ARG6 INT_EQUAL 0)
0 INT_EQUAL f(ARG1 , RSP) 0
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() [(f() + 40)]
 CBRANCH f()
(f() + 40) CAST (f() + 40)
 CBRANCH (f(RSP) INT_NOTEQUAL -1)
(RSP + -72) PTRSUB RSP -72
 CBRANCH (f() INT_EQUAL [(f() + 40)])
0 INT_NOTEQUAL f(RSP) -1
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -72) PTRSUB RSP -72
 CBRANCH (ARG6 INT_NOTEQUAL 0)
 CBRANCH (f(RSP) INT_NOTEQUAL 0)
 CBRANCH ((f(ARG1 , RSP) + [f(RSP)]) INT_EQUAL 0)
(RSP + -64) PTRSUB RSP -64
([f(RSP)] - [f(RSP)]) COPY ([f(RSP)] - [f(RSP)])
([f(RSP)] - [f(RSP)]) INT_SUB [f(RSP)] [f(RSP)]
f(RSP) CALL func (RSP + -128) (RSP + -120) (RSP + -120)
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
0 INT_EQUAL (f(ARG1 , RSP) + [f(RSP)]) 0
[f(RSP)] LOAD 433 f(RSP)
([f(RSP)] - [f(RSP)]) COPY ([f(RSP)] - [f(RSP)])
f(RSP) CALL func f(RSP) (RSP + -64)
([f(RSP)] - [f(RSP)]) COPY ([f(RSP)] - [f(RSP)])
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
[f(RSP)] LOAD 433 f(RSP)
0 COPY 0
f(RSP) CALL func (RSP + -144) (RSP + -64) (RSP + -64)
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
(RSP + -144) PTRSUB RSP -144
(f(ARG5) + 4294967295) COPY (f(ARG5) + 4294967295)
(RSP + -128) PTRSUB RSP -128
([f(RSP)] - [f(RSP)]) INT_SUB [f(RSP)] [f(RSP)]
f(RSP) CALL func (RSP + -144) (RSP + -136) (RSP + -136)
(RSP + -64) PTRSUB RSP -64
f(RSP) CAST f(RSP)
(RSP + -64) PTRSUB RSP -64
-1 COPY -1
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
(f(ARG1 , RSP) + [f(RSP)]) INT_ADD [f(RSP)] f(ARG1 , RSP)
([f(RSP)] - [f(RSP)]) COPY ([f(RSP)] - [f(RSP)])
f(RSP) CAST f(RSP)
f(RSP) CAST f(RSP)
 CBRANCH ((f(ARG1 , RSP) + [f(RSP)]) INT_EQUAL 0)
(RSP + -144) PTRSUB RSP -144
[f(RSP)] LOAD 433 f(RSP)
(RSP + -136) PTRSUB RSP -136
f(RSP) CALL func f(RSP) (RSP + -64)
0 INT_EQUAL (f(ARG1 , RSP) + [f(RSP)]) 0
[f(RSP)] LOAD 433 f(RSP)
(RSP + -128) PTRSUB RSP -128
f(RSP) CALL func (RSP + -128) (RSP + -64) (RSP + -64)
(RSP + -64) PTRSUB RSP -64
(RSP + -120) PTRSUB RSP -120
f(RSP) COPY f(RSP)
(f(ARG1 , RSP) + [f(RSP)]) INT_ADD [f(RSP)] f(ARG1 , RSP)
f(RSP) CAST f(RSP)
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CBRANCH (([f(RSP)] - [f(RSP)]) INT_NOTEQUAL 0)
 RETURN 1
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
(RSP + -56) PTRSUB RSP -56
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
0 INT_NOTEQUAL f(RSP) 0
0 INT_NOTEQUAL ([f(RSP)] - [f(RSP)]) 0
([f(RSP)] - [f(RSP)]) COPY ([f(RSP)] - [f(RSP)])
([f(RSP)] - [f(RSP)]) COPY ([f(RSP)] - [f(RSP)])
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 CBRANCH (([f(RSP)] - [f(RSP)]) INT_NOTEQUAL 0)
0 INT_NOTEQUAL ([f(RSP)] - [f(RSP)]) 0
 RETURN 1
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
ARG4 COPY ARG4
ARG3 INT_SEXT ARG3
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG2 (RSP + -72) (RSP + -72)
 CALL func ARG2 (RSP + -56) (RSP + -56)
0 INT_NOTEQUAL ARG5 0
0 INT_EQUAL ARG5 0
f(ARG1 , RSP) COPY f(ARG1 , RSP)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
(FS_OFFSET + 40) INT_ADD 0 40
(f(ARG4) + 4294967295) INT_ADD f(ARG4) 4294967295
[ARG1] COPY [ARG1]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_NOTEQUAL f(ARG4) 0
ARG4 COPY ARG4
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f(ARG1 , RSP) COPY f(ARG1 , RSP)
 CBRANCH (f(ARG4) INT_NOTEQUAL 0)
[(ARG1 + 8)] CAST [(ARG1 + 8)]
 CBRANCH (f(ARG1 , RSP) INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH (([f(RSP)] - [f(RSP)]) INT_NOTEQUAL 0)
([f(RSP)] - [f(RSP)]) INT_SUB [f(RSP)] [f(RSP)]
([f(RSP)] - [f(RSP)]) CAST ([f(RSP)] - [f(RSP)])
f(RSP) CALL func (RSP + -144) (RSP + -136) (RSP + -136)
 RETURN 1
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
(RSP + -144) PTRSUB RSP -144
f(RSP) CAST f(RSP)
(RSP + -64) PTRSUB RSP -64
f(RSP) CAST f(RSP)
(RSP + -144) PTRSUB RSP -144
(f(ARG1 , RSP) + [f(RSP)]) INT_ADD [f(RSP)] f(ARG1 , RSP)
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
([f(RSP)] - [f(RSP)]) COPY ([f(RSP)] - [f(RSP)])
(RSP + -136) PTRSUB RSP -136
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
(RSP + -64) PTRSUB RSP -64
 CBRANCH ((f(ARG1 , RSP) + [f(RSP)]) INT_EQUAL 0)
-1 COPY -1
0 INT_EQUAL (f(ARG1 , RSP) + [f(RSP)]) 0
([f(RSP)] - [f(RSP)]) COPY ([f(RSP)] - [f(RSP)])
(f(ARG1 , RSP) + 1) INT_ADD f(ARG1 , RSP) 1
f(RSP) CALL func f(RSP) (RSP + -64)
([f(RSP)] - [f(RSP)]) COPY ([f(RSP)] - [f(RSP)])
[f(RSP)] LOAD 433 f(RSP)
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
f(ARG1 , RSP) CAST f(ARG1 , RSP)
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
(f(ARG4) + 4294967295) COPY (f(ARG4) + 4294967295)
(RSP + -56) PTRSUB RSP -56
f(RSP) CALL func (RSP + -144) (RSP + -64) (RSP + -64)
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (ARG5 INT_EQUAL 0)
0 INT_EQUAL f(ARG1 , RSP) 0
 CBRANCH (f() INT_EQUAL [(f() + 40)])
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CBRANCH f()
(RSP + -72) PTRSUB RSP -72
 CBRANCH ([f(RSP)] INT_LESS f(ARG1 , RSP))
(f(ARG1 , RSP) + [f(RSP)]) INT_ADD [f(RSP)] f(ARG1 , RSP)
[f(RSP)] CAST [f(RSP)]
(f(ARG1 , RSP) - [f(RSP)]) CAST (f(ARG1 , RSP) - [f(RSP)])
(f(ARG1 , RSP) - [f(RSP)]) INT_SUB f(ARG1 , RSP) [f(RSP)]
f(ARG1 , RSP) CAST f(ARG1 , RSP)
[f(RSP)] CAST [f(RSP)]
f() CALL libcall_memchr_thunk (f(ARG1 , RSP) + [f(RSP)]) ARG3 (f(ARG1 , RSP) - [f(RSP)])
 CBRANCH (f() INT_NOTEQUAL 0)
-1 COPY -1
(f(ARG1 , RSP) + [f(RSP)]) CAST (f(ARG1 , RSP) + [f(RSP)])
0 INT_NOTEQUAL f() 0
 CBRANCH (f(ARG1 , RSP) INT_EQUAL -1)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() [(f() + 40)]
 CBRANCH (ARG5 INT_NOTEQUAL 0)
(f() + 40) CAST (f() + 40)
(f() - f(ARG1 , RSP)) INT_SUB f() f(ARG1 , RSP)
(f() - f(ARG1 , RSP)) CAST (f() - f(ARG1 , RSP))
 BRANCH VZERO
f() CAST f()
(RSP + -64) PTRSUB RSP -64
0 COPY 0
f(RSP) CAST f(RSP)
0 INT_LESS [f(RSP)] f(ARG1 , RSP)
f(RSP) CALL func (RSP + -168) (RSP + -64) (RSP + -64)
[f(RSP)] LOAD 433 f(RSP)
(RSP + -168) PTRSUB RSP -168
0 INT_EQUAL f(ARG1 , RSP) -1
 CBRANCH (f(ARG1 , RSP) INT_NOTEQUAL 0)
 CBRANCH ((f(ARG1 , RSP) + [f(RSP)]) INT_EQUAL 0)
0 INT_EQUAL (f(ARG1 , RSP) + [f(RSP)]) 0
f(RSP) CAST f(RSP)
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func f(RSP) (RSP + -64)
f(RSP) CALL func (RSP + -160) (RSP + -64) (RSP + -64)
[f(RSP)] LOAD 433 f(RSP)
f(ARG1 , RSP) COPY f(ARG1 , RSP)
(RSP + -160) PTRSUB RSP -160
(RSP + -64) PTRSUB RSP -64
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
([f(RSP)] - [f(RSP)]) COPY ([f(RSP)] - [f(RSP)])
f(RSP) CAST f(RSP)
([f(RSP)] - [f(RSP)]) INT_SUB [f(RSP)] [f(RSP)]
(RSP + -160) PTRSUB RSP -160
0 COPY 0
f(RSP) CALL func (RSP + -160) (RSP + -152) (RSP + -152)
(RSP + -152) PTRSUB RSP -152
(RSP + -64) PTRSUB RSP -64
[f(RSP)] CAST [f(RSP)]
([f(RSP)] - [f(RSP)]) CAST ([f(RSP)] - [f(RSP)])
(f(ARG1 , RSP) + [f(RSP)]) INT_ADD [f(RSP)] f(ARG1 , RSP)
0 INT_NOTEQUAL f(ARG1 , RSP) 0
([f(RSP)] - [f(RSP)]) COPY ([f(RSP)] - [f(RSP)])
([f(RSP)] - [f(RSP)]) COPY ([f(RSP)] - [f(RSP)])
0 COPY 0
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
0 INT_NOTEQUAL ([f(RSP)] - [f(RSP)]) 0
 CBRANCH (([f(RSP)] - [f(RSP)]) INT_NOTEQUAL 0)
0 INT_NOTEQUAL ([f(RSP)] - [f(RSP)]) 0
 RETURN 1
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
ARG2 COPY ARG2
ARG2 COPY ARG2
f() CALL libcall_memcmp_thunk ([f(ARG1 , RSP)] + [ARG1]) ARG2 ARG3
ARG3 COPY ARG3
0 INT_EQUAL [f(RSP)] ARG3
ARG3 COPY ARG3
ARG3 COPY ARG3
0 INT_EQUAL ARG3 0
0 INT_LESS [(ARG1 + 8)] ARG3
([(ARG1 + 8)] - ARG3) INT_SUB [(ARG1 + 8)] ARG3
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 COPY ARG1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(ARG1 + 8)] CAST [(ARG1 + 8)]
0 COPY 0
 CBRANCH ([(ARG1 + 8)] INT_LESS ARG3)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL f(ARG1 , ARG3))
f(RSP) CAST f(RSP)
f(ARG1 , RSP) CAST f(ARG1 , RSP)
f(RSP) CALL func (RSP + -152) (RSP + -144) (RSP + -144)
(f() + 40) CAST (f() + 40)
[f(RSP)] LOAD 433 f(RSP)
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
[f(RSP)] COPY [f(RSP)]
(ARG1 + 8) PTRADD ARG1 1 8
([f(ARG1 , RSP)] + [ARG1]) COPY ([f(ARG1 , RSP)] + [ARG1])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([f(ARG1 , RSP)] + [ARG1]) INT_ADD [f(ARG1 , RSP)] [ARG1]
f(ARG3) COPY f(ARG3)
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (([f(ARG1 , RSP)] + [ARG1]) INT_EQUAL 0)
0 INT_EQUAL ([f(ARG1 , RSP)] + [ARG1]) 0
f() COPY f()
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
([f(ARG1 , RSP)] + [ARG1]) CAST ([f(ARG1 , RSP)] + [ARG1])
f(ARG1 , RSP) CALL func (RSP + -160) (ARG1 + 8) (ARG1 + 8)
(RSP + -152) PTRSUB RSP -152
([(ARG1 + 8)] - [f(ARG1 , RSP)]) INT_SUB [(ARG1 + 8)] [f(ARG1 , RSP)]
(RSP + -160) PTRSUB RSP -160
(RSP + -144) PTRSUB RSP -144
[ARG1] LOAD 433 ARG1
 CBRANCH f()
(f() + 1) INT_ADD f() 1
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
 CBRANCH ([f(RSP)] INT_EQUAL ARG3)
0 INT_NOTEQUAL f() f(ARG1 , ARG3)
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
 RETURN 1
0 INT_NOTEQUAL [f(RSP)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_NOTEQUAL f() 0
0 COPY 0
0 COPY 0
(([(ARG1 + 8)] - ARG3) + 1) INT_ADD ([(ARG1 + 8)] - ARG3) 1
0 COPY 0
 CBRANCH (ARG3 INT_EQUAL 0)
([f(ARG1 , RSP)] + [ARG1]) COPY ([f(ARG1 , RSP)] + [ARG1])
 BRANCH VZERO
 BRANCH VZERO
ARG1 COPY ARG1
 STORE 433 ARG1 ([f(ARG1 , RSP)] + [ARG1])
ARG1 COPY ARG1
ARG1 COPY ARG1
f(ARG1 , RSP) LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 COPY ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1 , RSP) LOAD 433 ARG1
 STORE 433 ARG1 ([f(ARG1 , RSP)] + [ARG1])
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 COPY ARG1
f(ARG1 , RSP) LOAD 433 ARG1
ARG1 COPY ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 COPY ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 ([f(ARG1 , RSP)] + [ARG1])
f(ARG1 , RSP) LOAD 433 ARG1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(ARG1 + 8)] INT_LESS A_Stack[-0x20]:8)
0 INT_LESS [(ARG1 + 8)] A_Stack[-0x20]:8
4681359 PTRSUB 0 4681359
(RSP + -40) PTRSUB RSP -40
A_Stack[-0x20]:8 COPY A_Stack[-0x20]:8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
A_Stack[-0x28]:8 COPY A_Stack[-0x28]:8
 CALL func (RSP + -40) 4681359
 CBRANCH f()
 CBRANCH f()
f(RSP) CAST f(RSP)
(RSP + -328) PTRSUB RSP -328
(RSP + -104) PTRSUB RSP -104
f() COPY f()
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
(RSP + -56) PTRSUB RSP -56
[f(RSP)] COPY [f(RSP)]
([f(ARG1 , RSP)] + [ARG1]) COPY ([f(ARG1 , RSP)] + [ARG1])
([(ARG1 + 8)] - [f(ARG1 , RSP)]) INT_SUB [(ARG1 + 8)] [f(ARG1 , RSP)]
f(ARG1 , RSP) CALL func (RSP + -328) (ARG1 + 8) (ARG1 + 8)
2 COPY 2
 CBRANCH ([(ARG1 + 8)] INT_LESS f())
0 INT_LESS [(ARG1 + 8)] f()
[(ARG1 + 8)] CAST [(ARG1 + 8)]
([(ARG1 + 8)] - [f(ARG1 , RSP)]) CAST ([(ARG1 + 8)] - [f(ARG1 , RSP)])
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(RSP + -40) PTRSUB RSP -40
[ARG1] CAST [ARG1]
([f(ARG1 , RSP)] + [ARG1]) CAST ([f(ARG1 , RSP)] + [ARG1])
 CBRANCH f()
 CALL func (RSP + -40) 4681365
f(RSP) CALL func (RSP + -104) (RSP + -56) (RSP + -56)
[f(RSP)] LOAD 433 f(RSP)
4681365 PTRSUB 0 4681365
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (([f(ARG1 , RSP)] + [ARG1]) INT_EQUAL 0)
0 INT_EQUAL ([f(ARG1 , RSP)] + [ARG1]) 0
([f(ARG1 , RSP)] + [ARG1]) INT_ADD [f(ARG1 , RSP)] [ARG1]
f(ARG1 , RSP) CAST f(ARG1 , RSP)
-1 COPY -1
f() COPY f()
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
(f() + 40) CAST (f() + 40)
0 COPY 0
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 BRANCH VZERO
[(f() + 40)] LOAD 433 (f() + 40)
 RETURN 1
8 COPY 8
 STORE 433 (ARG1 + 8) [f(RSP)]
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH f()
10 COPY 10
 BRANCH VZERO
8 COPY 8
-1 COPY -1
0 INT_EQUAL ([f(ARG1 , RSP)] + [ARG1]) 0
(RSP + -104) PTRSUB RSP -104
f(RSP) CAST f(RSP)
f(ARG1 , RSP) CAST f(ARG1 , RSP)
f() COPY f()
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
[f(RSP)] COPY [f(RSP)]
([(ARG1 + 8)] - [f(ARG1 , RSP)]) INT_SUB [(ARG1 + 8)] [f(ARG1 , RSP)]
f(ARG1 , RSP) CALL func (RSP + -320) (ARG1 + 8) (ARG1 + 8)
2 COPY 2
([f(ARG1 , RSP)] + [ARG1]) COPY ([f(ARG1 , RSP)] + [ARG1])
f() COPY f()
(ARG1 + 8) PTRADD ARG1 1 8
 CBRANCH ([(ARG1 + 8)] INT_LESS f())
[ARG1] LOAD 433 ARG1
0 INT_LESS [(ARG1 + 8)] f()
([(ARG1 + 8)] - [f(ARG1 , RSP)]) CAST ([(ARG1 + 8)] - [f(ARG1 , RSP)])
[(ARG1 + 8)] CAST [(ARG1 + 8)]
(RSP + -104) PTRSUB RSP -104
[f(RSP)] LOAD 433 f(RSP)
[ARG1] CAST [ARG1]
([f(ARG1 , RSP)] + [ARG1]) CAST ([f(ARG1 , RSP)] + [ARG1])
f(RSP) CALL func (RSP + -312) (RSP + -104) (RSP + -104)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func (RSP + -104) 4681368
4681368 PTRSUB 0 4681368
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (([f(ARG1 , RSP)] + [ARG1]) INT_EQUAL 0)
([f(ARG1 , RSP)] + [ARG1]) INT_ADD [f(ARG1 , RSP)] [ARG1]
(RSP + -312) PTRSUB RSP -312
(RSP + -320) PTRSUB RSP -320
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
16 COPY 16
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 RETURN 1
 STORE 433 (ARG1 + 8) [f(RSP)]
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
0 COPY 0
 BRANCH VZERO
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
 CBRANCH (A_Stack[-0x20]:8 INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
f() CALL libcall_memcmp_thunk f(ARG1 , RSP) A_Stack[-0x28]:8 A_Stack[-0x20]:8
A_Stack[-0x20]:8 CAST A_Stack[-0x20]:8
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
f() CALL libcall_memcmp_thunk f(ARG1 , RSP) f() f()
 BRANCH VZERO
f() CAST f()
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_memcmp_thunk f(ARG1 , RSP) f() f()
0 COPY 0
f() CAST f()
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
 BRANCH VZERO
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 RETURN 1
2 COPY 2
 STORE 433 (ARG1 + 8) [f(RSP)]
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
0 COPY 0
f(RSP) CALL func (RSP + -336) (RSP + -56) (RSP + -56)
[f(RSP)] COPY [f(RSP)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (([f(ARG1 , RSP)] + [ARG1]) INT_EQUAL 0)
([f(ARG1 , RSP)] + [ARG1]) COPY ([f(ARG1 , RSP)] + [ARG1])
(RSP + -336) PTRSUB RSP -336
(RSP + -344) PTRSUB RSP -344
 CBRANCH ([(ARG1 + 8)] INT_LESS f())
0 INT_LESS [(ARG1 + 8)] f()
0 INT_EQUAL ([f(ARG1 , RSP)] + [ARG1]) 0
(RSP + -56) PTRSUB RSP -56
([f(ARG1 , RSP)] + [ARG1]) INT_ADD [f(ARG1 , RSP)] [ARG1]
([(ARG1 + 8)] - [f(ARG1 , RSP)]) CAST ([(ARG1 + 8)] - [f(ARG1 , RSP)])
[(ARG1 + 8)] CAST [(ARG1 + 8)]
-1 COPY -1
[ARG1] CAST [ARG1]
([f(ARG1 , RSP)] + [ARG1]) CAST ([f(ARG1 , RSP)] + [ARG1])
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
([(ARG1 + 8)] - [f(ARG1 , RSP)]) INT_SUB [(ARG1 + 8)] [f(ARG1 , RSP)]
f(ARG1 , RSP) CALL func (RSP + -344) (ARG1 + 8) (ARG1 + 8)
 CALL func (RSP + -40) 4681362
2 COPY 2
(ARG1 + 8) PTRADD ARG1 1 8
4681362 PTRSUB 0 4681362
(RSP + -40) PTRSUB RSP -40
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[ARG1] LOAD 433 ARG1
f(RSP) CAST f(RSP)
f(ARG1 , RSP) CAST f(ARG1 , RSP)
f() COPY f()
[f(RSP)] LOAD 433 f(RSP)
f() COPY f()
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
f() CAST f()
 BRANCH VZERO
0 COPY 0
f() CALL libcall_memcmp_thunk f(ARG1 , RSP) f() f()
f() COPY f()
f() COPY f()
0 INT_NOTEQUAL f() 0
0 INT_NOTEQUAL [f(RSP)] 0
0 INT_NOTEQUAL f() 0
A_Stack[-0x20]:8 COPY A_Stack[-0x20]:8
A_Stack[-0x28]:8 COPY A_Stack[-0x28]:8
0 INT_EQUAL f() 0
0 INT_NOTEQUAL [f(RSP)] 0
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
0 INT_NOTEQUAL [f(RSP)] 0
0 INT_NOTEQUAL f() 0
0 INT_EQUAL A_Stack[-0x20]:8 0
f() COPY f()
f() COPY f()
f() COPY f()
0 INT_EQUAL f() 0
f() COPY f()
 STORE 433 ARG4 0
 STORE 433 ARG4 ((f(ARG3) * f(ARG3)) + f())
f(ARG3) LOAD 433 ARG4
f(ARG3) LOAD 433 ARG4
f(ARG3) LOAD 433 ARG4
0 INT_EQUAL ARG3 0
ARG3 COPY ARG3
ARG1 COPY ARG1
ARG2 COPY ARG2
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f(ARG2) INT_EQUAL 0)
0 INT_EQUAL f(ARG2) 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG3 INT_EQUAL 0)
 CBRANCH (122 INT_SLESS f())
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH (90 INT_SLESS f())
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH (f(ARG2 , RSP) INT_EQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
0 COPY 0
(f() + 40) INT_ADD f() 40
0 INT_SLESS f() 48
0 INT_EQUAL f() [(f() + 40)]
 CBRANCH f()
 CBRANCH (f() INT_SLESS 48)
(RSP + -120) PTRSUB RSP -120
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
f() CALL func (RSP + -120) 0
 CBRANCH f()
~(f()) BOOL_NEGATE f()
f() CALL func (RSP + -120) 0
f() INT_SEXT f()
0 INT_SLESS f() 65
 CBRANCH ~(f())
 CBRANCH (f() INT_SLESS 65)
f() CALL func (RSP + -120) 0
 CBRANCH (f(ARG3) INT_LESSEQUAL f())
(RSP + -120) PTRSUB RSP -120
0 INT_LESSEQUAL f(ARG3) f()
(f() + 87) INT_SUB f() 87
(RSP + -120) PTRSUB RSP -120
 BRANCH VZERO
f() INT_SEXT f()
 BRANCH VZERO
f() CALL func (RSP + -120) 0
(f() + 55) INT_SUB f() 55
1 COPY 1
 BRANCH VZERO
(RSP + -120) PTRSUB RSP -120
(RSP + -120) PTRSUB RSP -120
f() CALL func (RSP + -120) 0
0 INT_SLESS 90 f()
 CBRANCH (f() INT_SLESS 97)
f() CALL func (RSP + -120) 0
(RSP + -120) PTRSUB RSP -120
0 INT_SLESS 122 f()
0 INT_EQUAL f(ARG2 , RSP) 0
 BRANCH VZERO
f(ARG2 , RSP) COPY f(ARG2 , RSP)
f(ARG1 , RSP) COPY f(ARG1 , RSP)
1 COPY 1
f(ARG2) COPY f(ARG2)
f(ARG1) COPY f(ARG1)
0 INT_LESS (f(ARG3) / f(ARG3)) f(ARG3)
f() INT_ZEXT f()
 BRANCH VZERO
f(ARG3) INT_ZEXT f(ARG3)
1 COPY 1
f(ARG3) INT_ZEXT f(ARG3)
(f(ARG3) / f(ARG3)) INT_DIV f(ARG3) f(ARG3)
 CBRANCH ((f(ARG3) / f(ARG3)) INT_LESS f(ARG3))
((f(ARG3) * f(ARG3)) + f()) INT_ADD (f(ARG3) * f(ARG3)) f()
(f(ARG3) * f(ARG3)) INT_MULT f(ARG3) f(ARG3)
 CBRANCH (57 INT_SLESS f())
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 RETURN 1
f() CALL func (RSP + -120) 0
(RSP + -120) PTRSUB RSP -120
(RSP + -120) PTRSUB RSP -120
f() CALL func (RSP + -120) 0
f() INT_SEXT f()
(f() + 48) INT_SUB f() 48
 BRANCH VZERO
0 INT_SLESS f() 97
f(RSP) CAST f(RSP)
-1 COPY -1
f(RSP) CALL func (RSP + -80) (RSP + -72) (RSP + -72)
[f(RSP)] LOAD 433 f(RSP)
1 COPY 1
 BRANCH VZERO
f(RSP) CAST f(RSP)
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -88) (RSP + -112) (RSP + -112)
1 COPY 1
(RSP + -88) PTRSUB RSP -88
(f(ARG1 , RSP) + [f(RSP)]) INT_ADD [f(RSP)] f(ARG1 , RSP)
(RSP + -112) PTRSUB RSP -112
[f(RSP)] COPY [f(RSP)]
(f(ARG2 , RSP) - [f(RSP)]) INT_SUB f(ARG2 , RSP) [f(RSP)]
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
 CBRANCH ((f(ARG1 , RSP) + [f(RSP)]) INT_EQUAL 0)
[f(RSP)] COPY [f(RSP)]
0 INT_EQUAL (f(ARG1 , RSP) + [f(RSP)]) 0
(RSP + -80) PTRSUB RSP -80
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
(RSP + -72) PTRSUB RSP -72
(RSP + -120) PTRSUB RSP -120
f() CALL func (RSP + -120) 0
0 INT_SLESS 57 f()
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
0 INT_NOTEQUAL [f(RSP)] 0
f() CALL func (RSP + -120)
(RSP + -120) PTRSUB RSP -120
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
0 INT_EQUAL [(ARG1 + 8)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
char llvm::StringRef::front() const COPY char llvm::StringRef::front() const
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
!empty() COPY !empty()
 RETURN 0 [[ARG1]]
[ARG1] CAST [ARG1]
[[ARG1]] LOAD 433 [ARG1]
 CALL libcall___assert_fail_thunk !empty() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 124 char llvm::StringRef::front() const
[[ARG1]] COPY [[ARG1]]
ARG1 COPY ARG1
f() CALL func f(ARG1) f(ARG2) ARG3 (RSP + -40)
f() CALL func (f(ARG1) + [f(RSP)]) [f(RSP)] ARG3 (RSP + -40) (f(ARG1) + [f(RSP)]) [f(RSP)]
ARG2 COPY ARG2
0 INT_NOTEQUAL ARG2 0
 STORE 433 ARG4 (~((f(ARG1) + [f(RSP)])) + 1)
 STORE 433 ARG4 f()
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG2 INT_NOTEQUAL 0)
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
(f() + 40) CAST (f() + 40)
0 INT_EQUAL f() 0
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 RETURN 1
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
(RSP + -40) PTRSUB RSP -40
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH f()
 CBRANCH (f() INT_EQUAL 0)
f(RSP) CAST f(RSP)
f(RSP) CALL func (RSP + -72) (RSP + -64) (RSP + -64)
(RSP + -80) PTRSUB RSP -80
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_EQUAL 0)
(RSP + -96) PTRSUB RSP -96
1 COPY 1
0 INT_EQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
(f(ARG1) + [f(RSP)]) COPY (f(ARG1) + [f(RSP)])
 CBRANCH f()
f(RSP) CALL func (RSP + -80) (RSP + -96) (RSP + -96)
[f(RSP)] COPY [f(RSP)]
(RSP + -72) PTRSUB RSP -72
(RSP + -64) PTRSUB RSP -64
(f(ARG1) + [f(RSP)]) INT_ADD [f(RSP)] f(ARG1)
(f(ARG2) - [f(RSP)]) INT_SUB f(ARG2) [f(RSP)]
 CBRANCH ((f(ARG1) + [f(RSP)]) INT_EQUAL 0)
0 INT_EQUAL (f(ARG1) + [f(RSP)]) 0
f(RSP) CAST f(RSP)
(RSP + -40) PTRSUB RSP -40
-1 COPY -1
1 COPY 1
0 COPY 0
 BRANCH VZERO
 BRANCH VZERO
0 INT_SLESS -1 f()
 BRANCH VZERO
1 COPY 1
 CBRANCH (-1 INT_SLESS f())
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CBRANCH (-1 INT_SLESS (f(ARG1) + [f(RSP)]))
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH (f() INT_EQUAL 45)
 BRANCH VZERO
0 COPY 0
1 COPY 1
0 COPY 0
0 COPY 0
(~((f(ARG1) + [f(RSP)])) + 1) INT_2COMP (f(ARG1) + [f(RSP)])
 BRANCH VZERO
1 COPY 1
0 INT_SLESS -1 (f(ARG1) + [f(RSP)])
0 INT_NOTEQUAL [f(RSP)] 0
f() CALL func (RSP + -104)
(RSP + -104) PTRSUB RSP -104
0 INT_EQUAL f() 45
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
 STORE 433 (ARG1 + 8) ARG2
 STORE 433 ARG1 ARG3
(ARG1 + 8) PTRADD ARG1 2 4
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
ARG1 INT_ZEXT ARG1
(ARG1 + 63) INT_ADD ARG1 63
 RETURN 0 ((ARG1 + 63) / 64)
((ARG1 + 63) / 64) INT_RIGHT (ARG1 + 63) 6
[ARG1] LOAD 433 ARG1
 RETURN 0
 CALL func [ARG1]
ARG1 INT_ZEXT ARG1
0 INT_LESS ARG1 1143914305352105985
0 INT_EQUAL f() 0
 CBRANCH (ARG1 INT_LESS 1143914305352105985)
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_operator.new[]_thunk f(ARG1)
 BRANCH VZERO
-1 COPY -1
(ARG1 * 8) INT_LEFT ARG1 3
 RETURN 0 f()
0 COPY 0
f() COPY f()
result && "APInt memory allocation fails!" COPY result && "APInt memory allocation fails!"
 RETURN 1
 CALL libcall___assert_fail_thunk result && "APInt memory allocation fails!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 45 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
(ARG2 + 8) INT_ADD ARG2 8
(f() * 8) CAST (f() * 8)
 RETURN 0
 STORE 433 (ARG1 + 8) f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(f() * 8) INT_LEFT f() 3
 CALL libcall_memcpy_thunk [(ARG1 + 8)] [(ARG2 + 8)] (f() * 8)
f() CALL func f()
(ARG1 + 8) CAST (ARG1 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(f() * 8) INT_ZEXT (f() * 8)
[ARG1] LOAD 433 ARG1
([ARG1] & 4294967040) COPY ([ARG1] & 4294967040)
0 INT_ZEXT 0
 RETURN 0 ([ARG1] & 4294967040)
0 INT_LESS [ARG1] 65
([ARG1] & 4294967040) INT_OR ([ARG1] & 4294967040) 0
([ARG1] & 4294967040) INT_AND [ARG1] 4294967040
f() CALL func ARG1
 CALL func ARG1 ARG2 ARG2
(ARG1 + 8) PTRADD ARG1 2 4
 STORE 433 ARG1 [ARG2]
(ARG1 + 8) PTRADD ARG1 2 4
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) 0
(ARG2 + 8) CAST (ARG2 + 8)
 BRANCH VZERO
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 STORE 433 (ARG1 + 8) [(ARG2 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
f() CALL func ARG1
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
[ARG1] LOAD 433 ARG1
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
([ARG1] & 63) INT_AND [ARG1] 63
 CBRANCH (([ARG1] & 63) INT_NOTEQUAL 0)
0 INT_NOTEQUAL ([ARG1] & 63) 0
 CBRANCH (f() INT_EQUAL 0)
([(ARG1 + 8)] + ((f() + 1) * 8)) CAST ([(ARG1 + 8)] + ((f() + 1) * 8))
[([(ARG1 + 8)] + ((f() + 1) * 8))] LOAD 433 ([(ARG1 + 8)] + ((f() + 1) * 8))
([(ARG1 + 8)] + ((f() + 1) * 8)) INT_ADD [(ARG1 + 8)] ((f() + 1) * 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
((f() + 1) * 8) INT_MULT (f() + 1) 8
(f() + 1) INT_ZEXT (f() + 1)
(f() + 1) INT_ZEXT (f() + 1)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([([(ARG1 + 8)] + ((f() + 1) * 8))] & (-1 >> (63 & (64 - (([ARG1] & 63) / 2147483647))))) INT_AND [([(ARG1 + 8)] + ((f() + 1) * 8))] (-1 >> (63 & (64 - (([ARG1] & 63) / 2147483647))))
(ARG1 + 8) CAST (ARG1 + 8)
((f() + 1) * 8) INT_MULT (f() + 1) 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 ([(ARG1 + 8)] + ((f() + 1) * 8)) ([([(ARG1 + 8)] + ((f() + 1) * 8))] & (-1 >> (63 & (64 - (([ARG1] & 63) / 2147483647)))))
([(ARG1 + 8)] + ((f() + 1) * 8)) CAST ([(ARG1 + 8)] + ((f() + 1) * 8))
(ARG1 + 8) CAST (ARG1 + 8)
(f() + 1) INT_SUB f() 1
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] & (-1 >> (63 & (64 - (([ARG1] & 63) / 2147483647)))))
([(ARG1 + 8)] + ((f() + 1) * 8)) INT_ADD ((f() + 1) * 8) [(ARG1 + 8)]
([(ARG1 + 8)] & (-1 >> (63 & (64 - (([ARG1] & 63) / 2147483647))))) INT_AND [(ARG1 + 8)] (-1 >> (63 & (64 - (([ARG1] & 63) / 2147483647))))
(f() + 1) INT_SUB f() 1
(63 & (64 - (([ARG1] & 63) / 2147483647))) INT_AND (64 - (([ARG1] & 63) / 2147483647)) 63
0 INT_EQUAL f() 0
(([ARG1] & 63) / 2147483647) SUBPIECE ([ARG1] & 63) 0
(-1 >> (63 & (64 - (([ARG1] & 63) / 2147483647)))) INT_RIGHT -1 (63 & (64 - (([ARG1] & 63) / 2147483647)))
(64 - (([ARG1] & 63) / 2147483647)) INT_SUB 64 (([ARG1] & 63) / 2147483647)
ARG1 INT_ZEXT ARG1
ARG1 INT_ZEXT ARG1
0 INT_EQUAL f() 0
0 INT_LESS ARG1 1143914305352105985
f() CALL libcall_operator.new[]_thunk f(ARG1)
 CBRANCH (ARG1 INT_LESS 1143914305352105985)
 CBRANCH (f() INT_EQUAL 0)
-1 COPY -1
 BRANCH VZERO
(ARG1 * 8) INT_LEFT ARG1 3
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
(ARG1 * 8) INT_MULT ARG1 8
 RETURN 0 f()
f() COPY f()
 CALL libcall___assert_fail_thunk result && "APInt memory allocation fails!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 36 0
0 COPY 0
result && "APInt memory allocation fails!" COPY result && "APInt memory allocation fails!"
 CALL libcall_memset_thunk f() 0 (ARG1 * 8)
0 INT_SLESS ARG3 0
 STORE 433 [(ARG1 + 8)] ARG3
0 INT_NOTEQUAL ARG4 0
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (ARG4 INT_NOTEQUAL 0)
 RETURN 0
f() CALL func f()
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (ARG3 INT_SLESS 0)
0 INT_LESSEQUAL f() f()
1 COPY 1
 CBRANCH (f() INT_LESSEQUAL f())
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 ([(ARG1 + 8)] + (f() * 8)) -1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 2 4
ARG2 LOAD 433 ARG1
f() CALL func ARG1
 CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
 CALL func ARG1 ARG2 ARG3 ARG4
 STORE 433 (ARG1 + 8) ARG3
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (ARG2 INT_EQUAL 0)
0 INT_EQUAL ARG2 0
 STORE 433 (ARG1 + 8) 0
 CALL libcall___assert_fail_thunk BitWidth && "bitwidth too small" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h 238 0
 RETURN 0
 RETURN 1
0 COPY 0
0 INT_EQUAL f() 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h
 CBRANCH (f() INT_EQUAL 0)
BitWidth && "bitwidth too small" COPY BitWidth && "bitwidth too small"
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
f() CALL func ARG1
0 COPY 0
 RETURN 0 0
0 INT_XOR f() 1
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 RETURN 0
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(ARG1 + 8)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL libcall_operator.delete[]_thunk [(ARG1 + 8)]
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
 STORE 433 ARG2 0
 STORE 433 ARG1 [ARG2]
(ARG1 + 8) PTRADD ARG1 2 4
(ARG2 + 8) CAST (ARG2 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 STORE 433 (ARG1 + 8) [(ARG2 + 8)]
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CALL func ARG1 [ARG2] 0 0
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
(ARG2 + 8) PTRADD ARG2 2 4
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
0 INT_EQUAL [ARG2] ARG3
0 INT_EQUAL ARG3 0
0 INT_LESS ARG3 64
(ARG3 / 64) INT_RIGHT ARG3 6
(ARG3 & 63) INT_AND ARG3 63
(ARG3 / 2147483647) SUBPIECE ARG3 0
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH ([ARG2] INT_EQUAL ARG3)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
 CBRANCH (ARG3 INT_EQUAL 0)
 BRANCH VZERO
 CBRANCH (f(ARG3) INT_LESS f())
(f(ARG3) - (ARG3 / 64)) INT_SUB f(ARG3) (ARG3 / 64)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
((f(ARG3) - (ARG3 / 64)) * 8) INT_MULT (f(ARG3) - (ARG3 / 64)) 8
(f(ARG3) - (ARG3 / 64)) INT_ZEXT (f(ARG3) - (ARG3 / 64))
(ARG2 + 8) CAST (ARG2 + 8)
((f(ARG3) * 8) + f()) INT_ADD (f(ARG3) * 8) f()
 STORE 433 ((f(ARG3) * 8) + f()) [(((f(ARG3) - (ARG3 / 64)) * 8) + [(ARG2 + 8)])]
(((f(ARG3) - (ARG3 / 64)) * 8) + [(ARG2 + 8)]) INT_ADD ((f(ARG3) - (ARG3 / 64)) * 8) [(ARG2 + 8)]
(f(ARG3) * 8) INT_MULT f(ARG3) 8
 BRANCH VZERO
(f(ARG3) + 1) INT_ADD f(ARG3) 1
((f(ARG3) * 8) + f()) CAST ((f(ARG3) * 8) + f())
[(((f(ARG3) - (ARG3 / 64)) * 8) + [(ARG2 + 8)])] LOAD 433 (((f(ARG3) - (ARG3 / 64)) * 8) + [(ARG2 + 8)])
f(ARG3) INT_ZEXT f(ARG3)
0 INT_LESS f(ARG3) f()
f() CAST f()
(((f(ARG3) - (ARG3 / 64)) * 8) + [(ARG2 + 8)]) CAST (((f(ARG3) - (ARG3 / 64)) * 8) + [(ARG2 + 8)])
(f(ARG3) + 1) COPY (f(ARG3) + 1)
0 INT_LESS f() 1143914305352105985
 BRANCH VZERO
f() INT_ZEXT f()
f() CALL libcall_operator.new[]_thunk f()
 CBRANCH (f() INT_LESS 1143914305352105985)
 CBRANCH (ARG3 INT_LESS 64)
 CBRANCH (f() INT_LESS (ARG3 / 64))
(f() * 8) INT_MULT f() 8
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() CAST f()
((f() * 8) + f()) CAST ((f() * 8) + f())
((f() * 8) + f()) INT_ADD f() (f() * 8)
0 INT_LESS f() (ARG3 / 64)
f() INT_ZEXT f()
 STORE 433 ((f() * 8) + f()) 0
 CBRANCH ((ARG3 & 63) INT_EQUAL 0)
 BRANCH VZERO
0 COPY 0
 CALL func (RSP + -40) f() [ARG2] f()
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
0 INT_LESSEQUAL (f() + -1) (ARG3 / 64)
(ARG3 / 64) COPY (ARG3 / 64)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
((ARG3 & 63) / 2147483647) SUBPIECE (ARG3 & 63) 0
 CALL func (RSP + -40)
(f() + -1) INT_SUB f() -1
 CALL func (RSP + -40) f() [ARG2] f()
(RSP + -40) PTRSUB RSP -40
 CBRANCH (f() INT_LESS (ARG3 / 64))
(RSP + -40) PTRSUB RSP -40
0 INT_LESS f() (ARG3 / 64)
(ARG2 + 8) CAST (ARG2 + 8)
[[(ARG2 + 8)]] LOAD 433 [(ARG2 + 8)]
(ARG3 / 64) INT_ZEXT (ARG3 / 64)
0 COPY 0
(RSP + -40) PTRSUB RSP -40
 STORE 433 (((ARG3 / 64) * 8) + f()) ([[(ARG2 + 8)]] << ((ARG3 & 63) / 2147483647))
(((ARG3 / 64) * 8) + f()) INT_ADD ((ARG3 / 64) * 8) f()
(((ARG3 / 64) * 8) + f()) CAST (((ARG3 / 64) * 8) + f())
f() CAST f()
(RSP + -40) PTRSUB RSP -40
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CALL func (RSP + -40)
((ARG3 / 64) * 8) INT_MULT (ARG3 / 64) 8
([[(ARG2 + 8)]] << ((ARG3 & 63) / 2147483647)) INT_LEFT [[(ARG2 + 8)]] ((ARG3 & 63) / 2147483647)
 CBRANCH ((f() + -1) INT_LESSEQUAL (ARG3 / 64))
(RSP + -40) PTRSUB RSP -40
-1 COPY -1
 BRANCH VZERO
(f() * 8) INT_LEFT f() 3
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
0 INT_LESS f() f()
0 INT_EQUAL (ARG3 & 63) 0
 BRANCH VZERO
0 COPY 0
 CBRANCH (f() INT_LESS f())
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) f() [ARG2] f()
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
0 COPY 0
(RSP + -40) PTRSUB RSP -40
f() INT_ZEXT f()
((f() * 8) + f()) CAST ((f() * 8) + f())
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
([([(ARG2 + 8)] + (f() * 8))] >> (63 & (64 - (ARG3 / 2147483647)))) INT_RIGHT [([(ARG2 + 8)] + (f() * 8))] (63 & (64 - (ARG3 / 2147483647)))
f() CAST f()
[([(ARG2 + 8)] + (f() * 8))] LOAD 433 ([(ARG2 + 8)] + (f() * 8))
(f(ARG2 , ARG3) | ([([(ARG2 + 8)] + (f() * 8))] << (63 & (ARG3 / 2147483647)))) INT_OR ([([(ARG2 + 8)] + (f() * 8))] << (63 & (ARG3 / 2147483647))) f(ARG2 , ARG3)
([(ARG2 + 8)] + (f() * 8)) CAST ([(ARG2 + 8)] + (f() * 8))
(63 & (64 - (ARG3 / 2147483647))) INT_AND (64 - (ARG3 / 2147483647)) 63
 STORE 433 ((f() * 8) + f()) (f(ARG2 , ARG3) | ([([(ARG2 + 8)] + (f() * 8))] << (63 & (ARG3 / 2147483647))))
(ARG2 + 8) CAST (ARG2 + 8)
(f() * 8) INT_MULT f() 8
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
([(ARG2 + 8)] + (f() * 8)) INT_ADD [(ARG2 + 8)] (f() * 8)
[([(ARG2 + 8)] + (f() * 8))] LOAD 433 ([(ARG2 + 8)] + (f() * 8))
(64 - (ARG3 / 2147483647)) INT_SUB 64 (ARG3 / 2147483647)
((f() * 8) + f()) INT_ADD (f() * 8) f()
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(f() * 8) INT_MULT f() 8
([([(ARG2 + 8)] + (f() * 8))] << (63 & (ARG3 / 2147483647))) INT_LEFT [([(ARG2 + 8)] + (f() * 8))] (63 & (ARG3 / 2147483647))
([(ARG2 + 8)] + (f() * 8)) CAST ([(ARG2 + 8)] + (f() * 8))
f() INT_ZEXT f()
(63 & (ARG3 / 2147483647)) INT_AND (ARG3 / 2147483647) 63
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
([(ARG2 + 8)] + (f() * 8)) INT_ADD [(ARG2 + 8)] (f() * 8)
(ARG2 + 8) CAST (ARG2 + 8)
(((f() + -1) - (ARG3 / 64)) + 1) INT_SUB ((f() + -1) - (ARG3 / 64)) 1
((f() + -1) - (ARG3 / 64)) INT_SUB (f() + -1) (ARG3 / 64)
(ARG2 + 8) CAST (ARG2 + 8)
(f() + 1) INT_ADD f() 1
((((f() + -1) - (ARG3 / 64)) + 1) * 8) INT_MULT (((f() + -1) - (ARG3 / 64)) + 1) 8
(((f() + -1) - (ARG3 / 64)) + 1) INT_ZEXT (((f() + -1) - (ARG3 / 64)) + 1)
(((f() + -1) * 8) + f()) CAST (((f() + -1) * 8) + f())
(((f() + -1) * 8) + f()) INT_ADD ((f() + -1) * 8) f()
f() CAST f()
([((((f() + -1) - (ARG3 / 64)) * 8) + [(ARG2 + 8)])] << ((ARG3 & 63) / 2147483647)) INT_LEFT [((((f() + -1) - (ARG3 / 64)) * 8) + [(ARG2 + 8)])] ((ARG3 & 63) / 2147483647)
[((((f() + -1) - (ARG3 / 64)) * 8) + [(ARG2 + 8)])] LOAD 433 ((((f() + -1) - (ARG3 / 64)) * 8) + [(ARG2 + 8)])
 BRANCH VZERO
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
((f() + -1) - (ARG3 / 64)) INT_ZEXT ((f() + -1) - (ARG3 / 64))
((f() + -1) - (ARG3 / 64)) INT_SUB (f() + -1) (ARG3 / 64)
(((f() + -1) - (ARG3 / 64)) * 8) INT_MULT ((f() + -1) - (ARG3 / 64)) 8
f() INT_ZEXT f()
f(ARG2 , ARG3) INT_RIGHT [(((((f() + -1) - (ARG3 / 64)) + 1) * 8) + [(ARG2 + 8)])] (63 & (64 - ((ARG3 & 63) / 2147483647)))
[(((((f() + -1) - (ARG3 / 64)) + 1) * 8) + [(ARG2 + 8)])] LOAD 433 (((((f() + -1) - (ARG3 / 64)) + 1) * 8) + [(ARG2 + 8)])
(63 & (64 - ((ARG3 & 63) / 2147483647))) INT_AND (64 - ((ARG3 & 63) / 2147483647)) 63
 BRANCH VZERO
(64 - ((ARG3 & 63) / 2147483647)) INT_SUB 64 ((ARG3 & 63) / 2147483647)
f(ARG2 , ARG3) INT_OR f(ARG2 , ARG3) ([((((f() + -1) - (ARG3 / 64)) * 8) + [(ARG2 + 8)])] << ((ARG3 & 63) / 2147483647))
((((f() + -1) - (ARG3 / 64)) * 8) + [(ARG2 + 8)]) INT_ADD (((f() + -1) - (ARG3 / 64)) * 8) [(ARG2 + 8)]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
((((f() + -1) - (ARG3 / 64)) * 8) + [(ARG2 + 8)]) CAST ((((f() + -1) - (ARG3 / 64)) * 8) + [(ARG2 + 8)])
 STORE 433 (((f() + -1) * 8) + f()) f(ARG2 , ARG3)
(((((f() + -1) - (ARG3 / 64)) + 1) * 8) + [(ARG2 + 8)]) INT_ADD ((((f() + -1) - (ARG3 / 64)) + 1) * 8) [(ARG2 + 8)]
((f() + -1) * 8) INT_MULT (f() + -1) 8
(((((f() + -1) - (ARG3 / 64)) + 1) * 8) + [(ARG2 + 8)]) CAST (((((f() + -1) - (ARG3 / 64)) + 1) * 8) + [(ARG2 + 8)])
(f() + -1) INT_ZEXT (f() + -1)
((f() * 8) + f()) CAST ((f() * 8) + f())
((f() * 8) + f()) INT_ADD f() (f() * 8)
f() CAST f()
(f() * 8) INT_MULT f() 8
 STORE 433 ((f() * 8) + f()) 0
 CALL func ARG1 [ARG2] ([(ARG2 + 8)] << (63 & (ARG3 / 2147483647))) 0
ARG1 COPY ARG1
 CALL func ARG1 [ARG2] 0 0
 CALL func ARG1 ARG2 ARG3 ARG2
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
0 INT_LESS [ARG2] ARG3
(ARG3 / 2147483647) SUBPIECE ARG3 0
0 INT_LESS ARG3 [ARG2]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([ARG2] INT_LESS ARG3)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (ARG3 INT_LESS [ARG2])
 BRANCH VZERO
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
([(ARG2 + 8)] << (63 & (ARG3 / 2147483647))) INT_LEFT [(ARG2 + 8)] (63 & (ARG3 / 2147483647))
(63 & (ARG3 / 2147483647)) INT_AND (ARG3 / 2147483647) 63
 BRANCH VZERO
(ARG2 + 8) CAST (ARG2 + 8)
 CBRANCH (f() INT_EQUAL 0)
shiftAmt <= BitWidth && "Invalid shift amount" COPY shiftAmt <= BitWidth && "Invalid shift amount"
llvm::APInt llvm::APInt::shl(unsigned int) const COPY llvm::APInt llvm::APInt::shl(unsigned int) const
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
 RETURN 1
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL f() 0
 CALL libcall___assert_fail_thunk shiftAmt <= BitWidth && "Invalid shift amount" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h 870 llvm::APInt llvm::APInt::shl(unsigned int) const
(f() + 40) CAST (f() + 40)
(ARG1 + 8) PTRADD ARG1 2 4
ARG1 COPY ARG1
0 INT_EQUAL ARG1 ARG2
ARG1 COPY ARG1
(ARG1 + 8) PTRADD ARG1 2 4
 STORE 433 ARG1 f(ARG2)
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
 STORE 433 ARG2 0
f(ARG2) LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 RETURN 0 ARG1
 RETURN 0 ARG1
 CBRANCH (ARG1 INT_EQUAL ARG2)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
 STORE 433 (ARG1 + 8) [(ARG2 + 8)]
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 0)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_NOTEQUAL [(ARG1 + 8)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL libcall_operator.delete[]_thunk [(ARG1 + 8)]
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CALL func (RSP + -40) ARG1 ARG2 ARG1
ARG1 COPY ARG1
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -40)
(FS_OFFSET + 40) INT_ADD 0 40
40 INT_ADD 0 40
(RSP + -40) PTRSUB RSP -40
40 CAST 40
[40] LOAD 433 40
(RSP + -40) PTRSUB RSP -40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -40) PTRSUB RSP -40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
(ARG1 / 64) INT_RIGHT ARG1 6
(ARG1 / 64) COPY (ARG1 / 64)
 RETURN 0 (ARG1 / 64)
(ARG4 & 4294967295) INT_AND ARG4 4294967295
(ARG4 / 2147483647) INT_RIGHT ARG4 32
(ARG4 / 2147483647) INT_RIGHT ARG4 32
0 INT_LESS f() ARG3
(ARG1 + (f() * 8)) INT_ADD (f() * 8) ARG1
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
0 COPY 0
 RETURN 0 f(ARG1 , ARG2 , ARG4)
0 COPY 0
 CBRANCH (f() INT_LESS ARG3)
f(ARG1 , ARG2 , ARG4) COPY f(ARG1 , ARG2 , ARG4)
 CBRANCH f(ARG1 , ARG2 , ARG4)
 CBRANCH f(ARG1 , ARG2 , ARG4)
0 INT_EQUAL f(ARG1 , ARG2 , ARG4) 0
 CBRANCH (f(ARG1 , ARG2 , ARG4) INT_LESSEQUAL [(ARG1 + (f() * 8))])
 CBRANCH (f() INT_EQUAL 1)
 BRANCH VZERO
4294967296 COPY 4294967296
0 COPY 0
0 COPY 0
 BRANCH VZERO
2 COPY 2
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL 2)
0 INT_EQUAL f() 1
 CBRANCH f(ARG1 , ARG2 , ARG4)
0 INT_NOTEQUAL f() 2
0 INT_EQUAL f(ARG1 , ARG2 , ARG4) 0
(f() * 8) INT_MULT f() 8
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
([(ARG1 + (f() * 8))] / 2147483647) INT_RIGHT [(ARG1 + (f() * 8))] 32
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
f(ARG1 , ARG2 , ARG4) INT_OR ([(ARG1 + (f() * 8))] & 4294967295) f(ARG1 , ARG2 , ARG4)
(([(ARG2 + (f() * 8))] / 2147483647) * (ARG4 / 2147483647)) INT_MULT ([(ARG2 + (f() * 8))] / 2147483647) (ARG4 / 2147483647)
f(ARG1 , ARG2 , ARG4) INT_ADD (([(ARG2 + (f() * 8))] / 2147483647) * (ARG4 / 2147483647)) f(ARG1 , ARG2 , ARG4)
(f() * 8) INT_MULT f() 8
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
 STORE 433 (ARG1 + (f() * 8)) f(ARG1 , ARG2 , ARG4)
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f() INT_ZEXT f()
f() INT_ZEXT f()
f(ARG1 , ARG2 , ARG4) INT_RIGHT f(ARG1 , ARG2 , ARG4) 32
(f() * 8) INT_MULT f() 8
(([(ARG1 + (f() * 8))] / 2147483647) + (([(ARG2 + (f() * 8))] / 2147483647) * (ARG4 & 4294967295))) INT_ADD ([(ARG1 + (f() * 8))] / 2147483647) (([(ARG2 + (f() * 8))] / 2147483647) * (ARG4 & 4294967295))
f() INT_ZEXT f()
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
([(ARG1 + (f() * 8))] & 4294967295) INT_AND [(ARG1 + (f() * 8))] 4294967295
0 INT_LESSEQUAL f(ARG1 , ARG2 , ARG4) [(ARG1 + (f() * 8))]
f(ARG1 , ARG2 , ARG4) INT_ADD f(ARG1 , ARG2 , ARG4) f()
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
f() INT_ZEXT f()
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
((ARG4 / 4611686014132420609) * (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647)) CAST ((ARG4 / 4611686014132420609) * (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647))
(f() * 8) INT_MULT f() 8
((ARG4 / 4611686014132420609) * (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647)) INT_ZEXT ((ARG4 / 4611686014132420609) * (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647))
((([(ARG2 + (f() * 8))] & 4294967295) * (ARG4 / 2147483647)) / 2147483647) INT_RIGHT (([(ARG2 + (f() * 8))] & 4294967295) * (ARG4 / 2147483647)) 32
(([(ARG2 + (f() * 8))] & 4294967295) * (ARG4 / 2147483647)) INT_MULT ([(ARG2 + (f() * 8))] & 4294967295) (ARG4 / 2147483647)
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f(ARG1 , ARG2 , ARG4) INT_LEFT f(ARG1 , ARG2 , ARG4) 32
(ARG4 / 4611686014132420609) SUBPIECE (ARG4 / 2147483647) 0
f() INT_ZEXT f()
 CBRANCH (f(ARG1 , ARG2 , ARG4) INT_LESSEQUAL [(ARG1 + (f() * 8))])
(([(ARG2 + (f() * 8))] & 4294967295) / 2147483647) SUBPIECE ([(ARG2 + (f() * 8))] & 4294967295) 0
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
([(ARG2 + (f() * 8))] / 2147483647) INT_RIGHT [(ARG2 + (f() * 8))] 32
0 INT_NOTEQUAL f(ARG1 , ARG2 , ARG4) 0
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
f() INT_ZEXT f()
f(ARG1 , ARG2 , ARG4) INT_ADD f(ARG1 , ARG2 , ARG4) ((ARG4 / 4611686014132420609) * (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647))
(f() * 8) INT_MULT f() 8
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
((ARG4 / 4611686014132420609) * (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647)) INT_MULT (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647) (ARG4 / 4611686014132420609)
(f() * 8) INT_MULT f() 8
f(ARG1 , ARG2 , ARG4) INT_ADD f(ARG1 , ARG2 , ARG4) ((([(ARG2 + (f() * 8))] & 4294967295) * (ARG4 / 2147483647)) / 2147483647)
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f(ARG1 , ARG2 , ARG4) INT_ADD f() (([(ARG1 + (f() * 8))] / 2147483647) + (([(ARG2 + (f() * 8))] / 2147483647) * (ARG4 & 4294967295)))
(f(ARG1 , ARG2 , ARG4) + (([(ARG2 + (f() * 8))] & 4294967295) * (ARG4 & 4294967295))) INT_ADD f(ARG1 , ARG2 , ARG4) (([(ARG2 + (f() * 8))] & 4294967295) * (ARG4 & 4294967295))
(([(ARG2 + (f() * 8))] / 2147483647) * (ARG4 & 4294967295)) INT_MULT ([(ARG2 + (f() * 8))] / 2147483647) (ARG4 & 4294967295)
 STORE 433 (ARG1 + (f() * 8)) (f(ARG1 , ARG2 , ARG4) + (([(ARG2 + (f() * 8))] & 4294967295) * (ARG4 & 4294967295)))
([(ARG2 + (f() * 8))] & 4294967295) INT_AND [(ARG2 + (f() * 8))] 4294967295
(([(ARG2 + (f() * 8))] & 4294967295) * (ARG4 & 4294967295)) INT_MULT ([(ARG2 + (f() * 8))] & 4294967295) (ARG4 & 4294967295)
f() INT_ZEXT f()
0 COPY 0
 BRANCH VZERO
4294967296 COPY 4294967296
(ARG3 + f()) INT_ADD ARG3 f()
ARG3 INT_ZEXT ARG3
0 INT_LESS f() ARG3
f(ARG1 , ARG2 , ARG4) CALL func ARG1 ARG2 ARG3
(ARG1 + ((f() + f()) * 8)) INT_ADD ARG1 ((f() + f()) * 8)
(ARG1 + ((f() + f()) * 8)) INT_ADD ARG1 ((f() + f()) * 8)
(((ARG3 + f()) * 8) + ARG1) INT_ADD ((ARG3 + f()) * 8) ARG1
(ARG1 + ((f() + f()) * 8)) INT_ADD ARG1 ((f() + f()) * 8)
((ARG3 * 8) + ARG1) INT_ADD (ARG3 * 8) ARG1
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
(ARG4 + (f() * 8)) INT_ADD ARG4 (f() * 8)
(ARG4 + (f() * 8)) INT_ADD ARG4 (f() * 8)
0 INT_LESS f() ARG5
 CBRANCH (f() INT_LESS ARG5)
1 COPY 1
 RETURN 0
(ARG3 * 8) INT_MULT ARG3 8
 STORE 433 ((ARG3 * 8) + ARG1) f(ARG1 , ARG2 , ARG4)
((ARG3 * 8) + ARG1) CAST ((ARG3 * 8) + ARG1)
 CBRANCH (f() INT_EQUAL 1)
 BRANCH VZERO
4294967296 COPY 4294967296
0 COPY 0
 CBRANCH (f() INT_LESS ARG3)
(f() + f()) INT_ZEXT (f() + f())
f() INT_ZEXT f()
(([(ARG4 + (f() * 8))] & 4294967295) * ([(ARG2 + (f() * 8))] & 4294967295)) INT_MULT ([(ARG2 + (f() * 8))] & 4294967295) ([(ARG4 + (f() * 8))] & 4294967295)
(f() + f()) INT_ADD f() f()
(f() + f()) INT_ZEXT (f() + f())
[(ARG1 + ((f() + f()) * 8))] LOAD 433 (ARG1 + ((f() + f()) * 8))
f(ARG2 , ARG4) INT_ADD f(ARG2 , ARG4) ((([(ARG4 + (f() * 8))] / 2147483647) * ([(ARG2 + (f() * 8))] & 4294967295)) / 2147483647)
((f() + f()) * 8) INT_MULT (f() + f()) 8
f(ARG2 , ARG4) INT_LEFT f(ARG2 , ARG4) 32
(([(ARG4 + (f() * 8))] / 4611686014132420609) * (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647)) CAST (([(ARG4 + (f() * 8))] / 4611686014132420609) * (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647))
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
([(ARG2 + (f() * 8))] & 4294967295) INT_AND [(ARG2 + (f() * 8))] 4294967295
f() INT_ZEXT f()
 CBRANCH f(ARG2 , ARG4)
0 INT_LESSEQUAL f(ARG2 , ARG4) (f(ARG2 , ARG4) + (([(ARG4 + (f() * 8))] & 4294967295) * ([(ARG2 + (f() * 8))] & 4294967295)))
(([(ARG2 + (f() * 8))] & 4294967295) / 2147483647) SUBPIECE ([(ARG2 + (f() * 8))] & 4294967295) 0
(([(ARG4 + (f() * 8))] / 2147483647) * ([(ARG2 + (f() * 8))] / 2147483647)) INT_MULT ([(ARG2 + (f() * 8))] / 2147483647) ([(ARG4 + (f() * 8))] / 2147483647)
f(ARG2 , ARG4) INT_ADD (([(ARG4 + (f() * 8))] / 2147483647) * ([(ARG2 + (f() * 8))] / 2147483647)) f(ARG2 , ARG4)
([(ARG4 + (f() * 8))] / 4611686014132420609) SUBPIECE ([(ARG4 + (f() * 8))] / 2147483647) 0
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
((f() + f()) * 8) INT_MULT (f() + f()) 8
(ARG1 + ((f() + f()) * 8)) CAST (ARG1 + ((f() + f()) * 8))
(f() * 8) INT_MULT f() 8
[(ARG1 + ((f() + f()) * 8))] LOAD 433 (ARG1 + ((f() + f()) * 8))
0 INT_LESS [(ARG1 + ((f() + f()) * 8))] f(ARG2 , ARG4)
(([(ARG4 + (f() * 8))] & 4294967295) * ([(ARG2 + (f() * 8))] / 2147483647)) INT_MULT ([(ARG2 + (f() * 8))] / 2147483647) ([(ARG4 + (f() * 8))] & 4294967295)
(ARG1 + ((f() + f()) * 8)) CAST (ARG1 + ((f() + f()) * 8))
((([(ARG4 + (f() * 8))] & 4294967295) * ([(ARG2 + (f() * 8))] / 2147483647)) + f()) INT_ADD (([(ARG4 + (f() * 8))] & 4294967295) * ([(ARG2 + (f() * 8))] / 2147483647)) f()
(f(ARG2 , ARG4) + (([(ARG4 + (f() * 8))] & 4294967295) * ([(ARG2 + (f() * 8))] & 4294967295))) INT_ADD f(ARG2 , ARG4) (([(ARG4 + (f() * 8))] & 4294967295) * ([(ARG2 + (f() * 8))] & 4294967295))
0 INT_EQUAL f(ARG2 , ARG4) 0
f(ARG2 , ARG4) INT_ADD f(ARG2 , ARG4) ((([(ARG4 + (f() * 8))] & 4294967295) * ([(ARG2 + (f() * 8))] / 2147483647)) + f())
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
([(ARG4 + (f() * 8))] / 2147483647) INT_RIGHT [(ARG4 + (f() * 8))] 32
(f() + f()) INT_ADD f() f()
([(ARG2 + (f() * 8))] / 2147483647) INT_RIGHT [(ARG2 + (f() * 8))] 32
f(ARG2 , ARG4) INT_AND (f(ARG2 , ARG4) + (([(ARG4 + (f() * 8))] & 4294967295) * ([(ARG2 + (f() * 8))] & 4294967295))) 4294967295
(ARG1 + ((f() + f()) * 8)) CAST (ARG1 + ((f() + f()) * 8))
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f(ARG1 , ARG2 , ARG4) INT_ADD f(ARG2 , ARG4) [(ARG1 + ((f() + f()) * 8))]
 STORE 433 (ARG1 + ((f() + f()) * 8)) f(ARG1 , ARG2 , ARG4)
f(ARG2 , ARG4) INT_ADD f(ARG2 , ARG4) 0
f(ARG2 , ARG4) INT_RIGHT f(ARG2 , ARG4) 32
f(ARG2 , ARG4) INT_RIGHT (f(ARG2 , ARG4) + (([(ARG4 + (f() * 8))] & 4294967295) * ([(ARG2 + (f() * 8))] & 4294967295))) 32
0 INT_ZEXT 0
f(ARG2 , ARG4) INT_OR f(ARG2 , ARG4) f(ARG2 , ARG4)
(f() + f()) INT_ZEXT (f() + f())
((([(ARG4 + (f() * 8))] / 2147483647) * ([(ARG2 + (f() * 8))] & 4294967295)) / 2147483647) INT_RIGHT (([(ARG4 + (f() * 8))] / 2147483647) * ([(ARG2 + (f() * 8))] & 4294967295)) 32
 CBRANCH f(ARG2 , ARG4)
(f() * 8) INT_MULT f() 8
((f() + f()) * 8) INT_MULT (f() + f()) 8
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
(f() + f()) INT_ADD f() f()
(([(ARG4 + (f() * 8))] / 4611686014132420609) * (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647)) INT_ZEXT (([(ARG4 + (f() * 8))] / 4611686014132420609) * (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647))
0 INT_NOTEQUAL f(ARG2 , ARG4) 0
f(ARG2 , ARG4) INT_ADD f(ARG2 , ARG4) (([(ARG4 + (f() * 8))] / 4611686014132420609) * (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647))
(([(ARG4 + (f() * 8))] / 2147483647) * ([(ARG2 + (f() * 8))] & 4294967295)) INT_MULT ([(ARG2 + (f() * 8))] & 4294967295) ([(ARG4 + (f() * 8))] / 2147483647)
(([(ARG4 + (f() * 8))] / 4611686014132420609) * (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647)) INT_MULT (([(ARG2 + (f() * 8))] & 4294967295) / 2147483647) ([(ARG4 + (f() * 8))] / 4611686014132420609)
f(ARG2 , ARG4) INT_ADD f() f(ARG2 , ARG4)
 CBRANCH f(ARG2 , ARG4)
 STORE 433 (((ARG3 + f()) * 8) + ARG1) f(ARG2 , ARG4)
(f() * 8) INT_MULT f() 8
((ARG3 + f()) * 8) INT_MULT (ARG3 + f()) 8
[(ARG4 + (f() * 8))] LOAD 433 (ARG4 + (f() * 8))
(ARG4 + (f() * 8)) CAST (ARG4 + (f() * 8))
[(ARG4 + (f() * 8))] LOAD 433 (ARG4 + (f() * 8))
([(ARG4 + (f() * 8))] & 4294967295) INT_AND [(ARG4 + (f() * 8))] 4294967295
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
0 COPY 0
(((ARG3 + f()) * 8) + ARG1) CAST (((ARG3 + f()) * 8) + ARG1)
(ARG3 + f()) INT_ZEXT (ARG3 + f())
([(ARG4 + (f() * 8))] / 2147483647) INT_RIGHT [(ARG4 + (f() * 8))] 32
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(ARG4 + (f() * 8)) CAST (ARG4 + (f() * 8))
f() INT_ZEXT f()
0 COPY 0
0 COPY 0
4294967296 COPY 4294967296
 BRANCH VZERO
 CBRANCH f(ARG2 , ARG4)
0 INT_EQUAL f(ARG2 , ARG4) 0
1 COPY 1
 CBRANCH f(ARG2 , ARG4)
 CBRANCH (f() INT_NOTEQUAL 2)
0 INT_EQUAL f() 1
0 COPY 0
 BRANCH VZERO
 BRANCH VZERO
2 COPY 2
0 INT_NOTEQUAL f() 2
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() * 8) INT_ZEXT (f() * 8)
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) 0
 CALL libcall_memset_thunk [(ARG1 + 8)] 0 (f() * 8)
(f() * 8) INT_LEFT f() 3
(ARG1 + 8) CAST (ARG1 + 8)
(f() * 8) CAST (f() * 8)
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(f(ARG1) & [([(ARG1 + 8)] + ((f() + -1) * 8))]) INT_AND [([(ARG1 + 8)] + ((f() + -1) * 8))] f(ARG1)
(ARG1 + 8) CAST (ARG1 + 8)
[([(ARG1 + 8)] + ((f() + -1) * 8))] LOAD 433 ([(ARG1 + 8)] + ((f() + -1) * 8))
([ARG1] & 63) INT_AND [ARG1] 63
([(ARG1 + 8)] + ((f() + -1) * 8)) CAST ([(ARG1 + 8)] + ((f() + -1) * 8))
(f() + -1) INT_SUB f() -1
 CBRANCH ((f(ARG1) & [([(ARG1 + 8)] + ((f() + -1) * 8))]) INT_EQUAL 0)
((f() + -1) * 8) INT_MULT (f() + -1) 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_EQUAL (f(ARG1) & [([(ARG1 + 8)] + ((f() + -1) * 8))]) 0
([(ARG1 + 8)] + ((f() + -1) * 8)) INT_ADD [(ARG1 + 8)] ((f() + -1) * 8)
0 INT_EQUAL ([ARG1] & 63) 0
 CBRANCH (([ARG1] & 63) INT_EQUAL 0)
(f() + -1) INT_ZEXT (f() + -1)
f(ARG1) COPY f(ARG1)
(f(ARG1) + f()) COPY (f(ARG1) + f())
(f() + 4294967295) INT_ADD f() 4294967295
 RETURN 0 (f(ARG1) + f())
((f(ARG1) + f()) + 64) INT_SUB (f(ARG1) + f()) 64
f(ARG1) COPY f(ARG1)
 BRANCH VZERO
0 INT_NOTEQUAL (f() + 4294967295) 0
 CBRANCH ((f() + 4294967295) INT_NOTEQUAL 0)
(f(ARG1) + f()) INT_ADD f(ARG1) f()
f() CALL func (f(ARG1) & [([(ARG1 + 8)] + ((f() + -1) * 8))]) 2
 RETURN 0 f(ARG1)
f() COPY f()
0 INT_NOTEQUAL [([(ARG1 + 8)] + ((f() + 2) * 8))] 0
 CBRANCH ([([(ARG1 + 8)] + ((f() + 2) * 8))] INT_NOTEQUAL 0)
(ARG1 + 8) CAST (ARG1 + 8)
((f() + 2) * 8) INT_MULT (f() + 2) 8
(f() + 2) INT_SUB f() 2
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + ((f() + 2) * 8)) INT_ADD [(ARG1 + 8)] ((f() + 2) * 8)
([(ARG1 + 8)] + ((f() + 2) * 8)) CAST ([(ARG1 + 8)] + ((f() + 2) * 8))
[([(ARG1 + 8)] + ((f() + 2) * 8))] LOAD 433 ([(ARG1 + 8)] + ((f() + 2) * 8))
(f() + 2) INT_ZEXT (f() + 2)
[([(ARG1 + 8)] + ((f() + 2) * 8))] LOAD 433 ([(ARG1 + 8)] + ((f() + 2) * 8))
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
f() CALL func [([(ARG1 + 8)] + ((f() + 2) * 8))] 2
(f(ARG1) + 64) INT_ADD f(ARG1) 64
(f() + 2) INT_SUB f() 2
(f(ARG1) + f()) INT_ADD f(ARG1) f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + ((f() + 2) * 8)) CAST ([(ARG1 + 8)] + ((f() + 2) * 8))
(f() + 2) INT_ZEXT (f() + 2)
((f() + 2) * 8) INT_MULT (f() + 2) 8
([(ARG1 + 8)] + ((f() + 2) * 8)) INT_ADD [(ARG1 + 8)] ((f() + 2) * 8)
(f() + 4294967295) COPY (f() + 4294967295)
-1 COPY -1
((1 << (([ARG1] & 63) / 2147483647)) + 1) INT_SUB (1 << (([ARG1] & 63) / 2147483647)) 1
64 COPY 64
 BRANCH VZERO
(1 << (([ARG1] & 63) / 2147483647)) INT_LEFT 1 (([ARG1] & 63) / 2147483647)
(([ARG1] & 63) / 2147483647) SUBPIECE ([ARG1] & 63) 0
(ARG1 + 8) PTRADD ARG1 2 4
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
f(ARG1) CALL func ARG1
 RETURN 0 f(ARG1)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
(64 - [ARG1]) INT_SUB 64 [ARG1]
(f() - (64 - [ARG1])) CAST (f() - (64 - [ARG1]))
f() CALL func [(ARG1 + 8)] 2
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() - (64 - [ARG1])) INT_SUB f() (64 - [ARG1])
(f() - (64 - [ARG1])) INT_ZEXT (f() - (64 - [ARG1]))
[ARG1] LOAD 433 ARG1
f(ARG1) CALL func ARG1
([ARG1] - f(ARG1)) INT_SUB [ARG1] f(ARG1)
([ARG1] - f(ARG1)) COPY ([ARG1] - f(ARG1))
 RETURN 0 ([ARG1] - f(ARG1))
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
 CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 2 4
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 2 4
 CALL func ARG1
f() CALL func ARG1
 CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
 CBRANCH ([ARG1] INT_EQUAL [ARG2])
0 INT_EQUAL [ARG1] [ARG2]
 RETURN 1
 CBRANCH (f() INT_EQUAL 0)
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be the same" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 357 llvm::APInt& llvm::APInt::operator*=(const llvm::APInt&)
llvm::APInt& llvm::APInt::operator*=(const llvm::APInt&) COPY llvm::APInt& llvm::APInt::operator*=(const llvm::APInt&)
0 INT_EQUAL f() 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
BitWidth == RHS.BitWidth && "Bit widths must be the same" COPY BitWidth == RHS.BitWidth && "Bit widths must be the same"
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_EQUAL f() 0
([(ARG2 + 8)] * [(ARG1 + 8)]) INT_MULT [(ARG1 + 8)] [(ARG2 + 8)]
 CBRANCH (f() INT_NOTEQUAL 0)
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
0 INT_NOTEQUAL f() 0
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
 STORE 433 (ARG1 + 8) ([(ARG2 + 8)] * [(ARG1 + 8)])
 CBRANCH (f() INT_EQUAL 0)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (f() INT_EQUAL 0)
(f() + f()) INT_ADD f() f()
(ARG2 + 8) CAST (ARG2 + 8)
 CBRANCH (f() INT_NOTEQUAL 0)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_NOTEQUAL f() 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() CAST f()
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
0 INT_LESSEQUAL f() (f() + f())
(ARG1 + 8) CAST (ARG1 + 8)
(f() * 8) INT_LEFT f() 3
 BRANCH VZERO
 CALL func f() [(ARG1 + 8)] f() [(ARG2 + 8)] f()
(f() * 8) INT_ZEXT (f() * 8)
 CBRANCH (f() INT_LESSEQUAL (f() + f()))
f() CALL func (f() + f())
 CALL libcall_memcpy_thunk [(ARG1 + 8)] f() (f() * 8)
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
(f() + 1) INT_ADD f() 1
f() CALL func (f() + 4294967295)
 BRANCH VZERO
(f() + 4294967295) INT_ADD f() 4294967295
(f() + 4294967295) INT_ADD f() 4294967295
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
0 COPY 0
f() CALL func (f() + 4294967295)
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
 CALL libcall_operator.delete[]_thunk f()
 BRANCH VZERO
(ARG1 + 8) PTRADD ARG1 2 4
 STORE 433 ARG1 1
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) 0
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
0 INT_LESS f() ARG4
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
(ARG3 + (f() * 8)) INT_ADD ARG3 (f() * 8)
(ARG3 + (f() * 8)) INT_ADD (f() * 8) ARG3
0 COPY 0
 RETURN 0 f()
 CBRANCH (f() INT_LESS ARG4)
f() COPY f()
0 COPY 0
 CBRANCH ([(ARG1 + (f() * 8))] INT_EQUAL [f(ARG3)])
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
0 INT_EQUAL [(ARG1 + (f() * 8))] [f(ARG3)]
f() INT_ZEXT f()
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
 CBRANCH ([(ARG1 + (f() * 8))] INT_LESS [f(ARG3)])
0 INT_NOTEQUAL f() 0
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
([(ARG2 + (f() * 8))] + [(ARG3 + (f() * 8))]) INT_ADD [(ARG2 + (f() * 8))] [(ARG3 + (f() * 8))]
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
(f() * 8) INT_MULT f() 8
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
[(ARG3 + (f() * 8))] LOAD 433 (ARG3 + (f() * 8))
[f(ARG3)] LOAD 433 f(ARG3)
f(ARG3) CALL func (ARG2 + (f() * 8)) (ARG3 + (f() * 8)) (ARG3 + (f() * 8)) (f() * 8)
(ARG3 + (f() * 8)) CAST (ARG3 + (f() * 8))
f() INT_ZEXT f()
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
(f() * 8) INT_MULT f() 8
f(ARG3) CAST f(ARG3)
f() INT_ZEXT f()
(([(ARG2 + (f() * 8))] + [(ARG3 + (f() * 8))]) + f()) INT_ADD f() ([(ARG2 + (f() * 8))] + [(ARG3 + (f() * 8))])
f() INT_ZEXT f()
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
 STORE 433 (ARG1 + (f() * 8)) (([(ARG2 + (f() * 8))] + [(ARG3 + (f() * 8))]) + f())
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
0 INT_LESS [(ARG1 + (f() * 8))] [f(ARG3)]
 CALL func ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
0 INT_NOTEQUAL [ARG1] [ARG2]
 CBRANCH ([ARG1] INT_NOTEQUAL [ARG2])
 RETURN 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
BitWidth == RHS.BitWidth && "Bit widths must be the same" COPY BitWidth == RHS.BitWidth && "Bit widths must be the same"
llvm::APInt& llvm::APInt::operator+=(const llvm::APInt&) COPY llvm::APInt& llvm::APInt::operator+=(const llvm::APInt&)
 RETURN 1
 CBRANCH (f() INT_EQUAL 0)
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be the same" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 253 llvm::APInt& llvm::APInt::operator+=(const llvm::APInt&)
0 INT_EQUAL f() 0
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 CALL func [(ARG1 + 8)] [(ARG1 + 8)] [(ARG2 + 8)] f()
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + [(ARG2 + 8)])
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + [(ARG2 + 8)]) INT_ADD [(ARG1 + 8)] [(ARG2 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
(ARG1 + 8) INT_ADD ARG1 8
ARG1 COPY ARG1
f() CALL func ARG1
 CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
([(ARG1 + 8)] | ARG2) INT_OR [(ARG1 + 8)] ARG2
([[(ARG1 + 8)]] | ARG2) INT_OR [[(ARG1 + 8)]] ARG2
 RETURN 0 ARG1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[[(ARG1 + 8)]] LOAD 433 [(ARG1 + 8)]
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] | ARG2)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 [(ARG1 + 8)] ([[(ARG1 + 8)]] | ARG2)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1
 STORE 433 (ARG1 + 8) ARG2
 STORE 433 [(ARG1 + 8)] ARG2
 RETURN 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 BRANCH VZERO
([(ARG1 + 8)] + 8) CAST ([(ARG1 + 8)] + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + 8) INT_ADD [(ARG1 + 8)] 8
(ARG1 + 8) CAST (ARG1 + 8)
((f() + 536870911) * 8) CAST ((f() + 536870911) * 8)
(f() + 536870911) INT_ADD f() 536870911
(ARG1 + 8) CAST (ARG1 + 8)
((f() + 536870911) * 8) INT_MULT (f() + 536870911) 8
((f() + 536870911) * 8) INT_ZEXT ((f() + 536870911) * 8)
 CALL libcall_memset_thunk ([(ARG1 + 8)] + 8) 0 ((f() + 536870911) * 8)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 RETURN 0 f(ARG1)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
0 INT_LESS ARG3 65
 CALL func (RSP + -56) f() ARG3
0 INT_LESSEQUAL ARG3 [ARG2]
f() CALL func ARG3
 CALL func ARG1 ARG3 [(ARG2 + 8)] 0
 CALL func ARG1 (RSP + -56) (RSP + -56)
ARG1 COPY ARG1
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f(ARG2) CALL func ARG2
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG3 INT_LESSEQUAL [ARG2])
 CBRANCH (ARG3 INT_LESS 65)
((f() * 8) + f()) INT_ADD f() (f() * 8)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
f() CALL func (RSP + -56)
0 COPY 0
 CBRANCH (f() INT_EQUAL f())
(ARG2 + 8) CAST (ARG2 + 8)
(RSP + -56) PTRSUB RSP -56
((f() - f()) * 8) INT_ZEXT ((f() - f()) * 8)
((f() - f()) * 8) INT_MULT (f() - f()) 8
(f() * 8) INT_MULT f() 8
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
((f() * 8) + f()) CAST ((f() * 8) + f())
0 INT_EQUAL f() f()
(RSP + -56) PTRSUB RSP -56
(f() - f()) INT_SUB f() f()
f() CALL func f()
 CALL libcall_memset_thunk ((f() * 8) + f()) 0 ((f() - f()) * 8)
 BRANCH VZERO
f() INT_ZEXT f()
(RSP + -56) PTRSUB RSP -56
 CALL libcall___assert_fail_thunk width > BitWidth && "Invalid APInt ZeroExtend request" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 997 llvm::APInt llvm::APInt::zext(unsigned int) const
(f() + 40) CAST (f() + 40)
llvm::APInt llvm::APInt::zext(unsigned int) const COPY llvm::APInt llvm::APInt::zext(unsigned int) const
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
width > BitWidth && "Invalid APInt ZeroExtend request" COPY width > BitWidth && "Invalid APInt ZeroExtend request"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
0 INT_NOTEQUAL 0 [(f() + 40)]
 RETURN 1
[(f() + 40)] LOAD 433 (f() + 40)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
(f() * 8) INT_MULT f() 8
((f() * 8) + f()) INT_ADD f() (f() * 8)
f() INT_ZEXT f()
((f() * 8) + f()) CAST ((f() * 8) + f())
(f(ARG2) + (f() * 8)) CAST (f(ARG2) + (f() * 8))
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
 STORE 433 ((f() * 8) + f()) [(f(ARG2) + (f() * 8))]
(f(ARG2) + (f() * 8)) INT_ADD (f() * 8) f(ARG2)
[(f(ARG2) + (f() * 8))] LOAD 433 (f(ARG2) + (f() * 8))
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG3 f() f()
 CALL func ARG3 (RSP + -88) (RSP + -88)
 CALL func ARG3 (RSP + -72) (RSP + -72)
f() CALL func ARG3
f() CALL func ARG3
 CALL func ARG3 (RSP + -56) (RSP + -56)
f() CALL func ARG3
 CALL func ARG3 f() f()
 CALL func ARG3 0
 CALL func (RSP + -56) ARG3 (f() * (f(ARG1 , ARG2 , RSP) / 2147483647)) ARG3
 CALL func ARG3 (RSP + -56) (RSP + -56)
ARG2 COPY ARG2
0 INT_EQUAL ARG2 0
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f(ARG2) INT_LESS 2)
 CBRANCH (ARG2 INT_EQUAL 0)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_LESS f(ARG2) 2
 CBRANCH ((1 << (31 & (f() / 2147483647))) INT_NOTEQUAL f(ARG2))
 CALL func (RSP + -72) f() f()
(RSP + -88) PTRSUB RSP -88
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
 BRANCH VZERO
0 INT_LESS 36 f(ARG2)
 RETURN 1
 CALL libcall___assert_fail_thunk Radix > 1 && Radix <= 36 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/StringRef.cpp 452 bool llvm::StringRef::getAsInteger(unsigned int, llvm::APInt&) const
bool llvm::StringRef::getAsInteger(unsigned int, llvm::APInt&) const COPY bool llvm::StringRef::getAsInteger(unsigned int, llvm::APInt&) const
Radix > 1 && Radix <= 36 COPY Radix > 1 && Radix <= 36
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/StringRef.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/StringRef.cpp
 CBRANCH (36 INT_LESS f(ARG2))
 CBRANCH (57 INT_SLESS f())
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH (f() INT_LESS (f() * (f(ARG1 , ARG2 , RSP) / 2147483647)))
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 f()
 CBRANCH f()
0 INT_SLESS f() 97
f() CALL func (RSP + -104) 0
f() INT_SEXT f()
 BRANCH VZERO
 CBRANCH f()
 CBRANCH (f(ARG2) INT_LESSEQUAL f())
(f() + -48) INT_SUB f() -48
f() CALL func (RSP + -104) 0
0 INT_LESSEQUAL f(ARG2) f()
 CBRANCH (f() INT_SLESS 97)
(RSP + -104) PTRSUB RSP -104
(RSP + -104) PTRSUB RSP -104
 CBRANCH (f() INT_SLESS 48)
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 0
0 INT_SLESS 57 f()
 CBRANCH (90 INT_SLESS f())
1 COPY 1
 BRANCH VZERO
0 COPY 0
f(ARG1) COPY f(ARG1)
0 INT_EQUAL f(ARG1) 0
f(ARG1) COPY f(ARG1)
 CBRANCH (f(ARG1) INT_EQUAL 0)
 CBRANCH (122 INT_SLESS f())
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH ~(f())
 CALL func (RSP + -72)
(RSP + -88) PTRSUB RSP -88
(f() + 40) CAST (f() + 40)
f() INT_SEXT f()
f() COPY f()
(f() + 40) INT_ADD f() 40
 CALL func (RSP + -88)
(RSP + -72) PTRSUB RSP -72
0 INT_EQUAL f() [(f() + 40)]
(RSP + -104) PTRSUB RSP -104
 BRANCH VZERO
f() CALL func (RSP + -104) 0
1 COPY 1
 BRANCH VZERO
[(f() + 40)] LOAD 433 (f() + 40)
(f() + -55) INT_SUB f() -55
(f(ARG1) - [f(RSP)]) INT_SUB f(ARG1) [f(RSP)]
[f(RSP)] COPY [f(RSP)]
(f(ARG1) + [f(RSP)]) COPY (f(ARG1) + [f(RSP)])
(f(ARG1) + [f(RSP)]) COPY (f(ARG1) + [f(RSP)])
(RSP + -160) PTRSUB RSP -160
f(RSP) CAST f(RSP)
(RSP + -152) PTRSUB RSP -152
(RSP + -96) PTRSUB RSP -96
f(RSP) CAST f(RSP)
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -152) (RSP + -144) (RSP + -144)
(RSP + -144) PTRSUB RSP -144
-1 COPY -1
 BRANCH VZERO
[f(RSP)] COPY [f(RSP)]
(f(ARG1) + [f(RSP)]) INT_ADD [f(RSP)] f(ARG1)
1 COPY 1
(f(ARG1) + [f(RSP)]) COPY (f(ARG1) + [f(RSP)])
1 COPY 1
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH ((f(ARG1) + [f(RSP)]) INT_EQUAL 0)
f(RSP) CALL func (RSP + -160) (RSP + -96) (RSP + -96)
[f(RSP)] COPY [f(RSP)]
0 INT_EQUAL (f(ARG1) + [f(RSP)]) 0
(f() + -87) INT_SUB f() -87
~(f()) BOOL_NEGATE f()
f() CALL func (RSP + -104) 0
f() INT_SEXT f()
(RSP + -104) PTRSUB RSP -104
(RSP + -104) PTRSUB RSP -104
0 INT_SLESS f() 65
 CBRANCH (f() INT_SLESS 65)
f() CALL func (RSP + -104) 0
 BRANCH VZERO
0 INT_SLESS 90 f()
(RSP + -104) PTRSUB RSP -104
f() CALL func (RSP + -104) 0
 CBRANCH ((1 << (31 & (f() / 2147483647))) INT_LESS f(ARG2))
(31 & (f() / 2147483647)) INT_AND (f() / 2147483647) 31
(1 << (31 & (f() / 2147483647))) CAST (1 << (31 & (f() / 2147483647)))
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
(1 << (31 & (f() / 2147483647))) INT_LEFT 1 (31 & (f() / 2147483647))
0 INT_LESS (1 << (31 & (f() / 2147483647))) f(ARG2)
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH ((1 << (31 & (f() / 2147483647))) INT_NOTEQUAL f(ARG2))
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -56) f(ARG1 , ARG2 , RSP) f(ARG2) 0
(RSP + -88) PTRSUB RSP -88
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -88) (RSP + -56) (RSP + -56)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) f(ARG1 , ARG2 , RSP) 0 0
 CALL func (RSP + -72) (RSP + -56) (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
 CBRANCH (f(ARG1 , ARG2 , RSP) INT_NOTEQUAL 0)
0 COPY 0
(RSP + -104) PTRSUB RSP -104
0 INT_SLESS f() 48
f() CALL func (RSP + -104) 0
f() CALL func (RSP + -104) 0
(RSP + -104) PTRSUB RSP -104
0 INT_SLESS 122 f()
 CBRANCH (f(ARG1 , ARG2 , RSP) INT_EQUAL 0)
(RSP + -104) PTRSUB RSP -104
0 INT_NOTEQUAL f() 48
 CBRANCH (f() INT_NOTEQUAL 48)
f() CALL func (RSP + -104)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (f(ARG1 , ARG2 , RSP) INT_EQUAL 0)
0 COPY 0
 CALL func (RSP + -56)
(1 << (31 & (f() / 2147483647))) INT_LEFT 1 (31 & (f() / 2147483647))
(f(ARG1 , ARG2 , RSP) / 2147483647) SUBPIECE f(ARG1 , ARG2 , RSP) 0
(31 & (f() / 2147483647)) INT_AND (f() / 2147483647) 31
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL f(ARG1 , ARG2 , RSP) 0
f(ARG1 , ARG2 , RSP) COPY f(ARG1 , ARG2 , RSP)
f(ARG1 , ARG2 , RSP) COPY f(ARG1 , ARG2 , RSP)
 CALL func (RSP + -72)
f(ARG1 , RSP) COPY f(ARG1 , RSP)
f(ARG1 , RSP) COPY f(ARG1 , RSP)
0 INT_NOTEQUAL (1 << (31 & (f() / 2147483647))) f(ARG2)
(RSP + -72) PTRSUB RSP -72
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -88)
(f() * (f(ARG1 , ARG2 , RSP) / 2147483647)) INT_MULT (f(ARG1 , ARG2 , RSP) / 2147483647) f()
(RSP + -88) PTRSUB RSP -88
0 INT_LESS (f() * (f(ARG1 , ARG2 , RSP) / 2147483647)) f()
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) 64 0 0
0 COPY 0
 CBRANCH ((f() * (f(ARG1 , ARG2 , RSP) / 2147483647)) INT_LESS f())
 BRANCH VZERO
0 INT_LESS f() (f() * (f(ARG1 , ARG2 , RSP) / 2147483647))
 BRANCH VZERO
0 INT_EQUAL f(ARG1 , ARG2 , RSP) 0
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
(RSP + -168) PTRSUB RSP -168
~(f()) BOOL_NEGATE f()
0 INT_EQUAL f(ARG1 , ARG2 , RSP) 0
(RSP + -176) PTRSUB RSP -176
(RSP + -96) PTRSUB RSP -96
f(ARG1 , ARG2 , RSP) COPY f(ARG1 , ARG2 , RSP)
[f(RSP)] COPY [f(RSP)]
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CAST f(RSP)
f(RSP) CALL func (RSP + -176) (RSP + -96) (RSP + -96)
f() CALL func (RSP + -104)
(f(ARG1 , ARG2 , RSP) - [f(RSP)]) INT_SUB f(ARG1 , ARG2 , RSP) [f(RSP)]
 RETURN 1
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
[f(ARG2 , RSP)] COPY [f(ARG2 , RSP)]
[f(ARG2 , RSP)] LOAD 433 f(ARG2 , RSP)
(f(ARG1 , RSP) + [f(RSP)]) INT_ADD [f(RSP)] f(ARG1 , RSP)
-1 COPY -1
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
1 COPY 1
 CBRANCH ~(f())
f(ARG2 , RSP) CAST f(ARG2 , RSP)
f(ARG2 , RSP) CALL func (RSP + -168)
(f(ARG1) + [f(RSP)]) COPY (f(ARG1) + [f(RSP)])
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [f(RSP)] 0
f(ARG1 , RSP) COPY f(ARG1 , RSP)
[f(ARG2 , RSP)] COPY [f(ARG2 , RSP)]
[f(ARG2 , RSP)] COPY [f(ARG2 , RSP)]
[f(ARG2 , RSP)] COPY [f(ARG2 , RSP)]
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
[f(ARG2 , RSP)] COPY [f(ARG2 , RSP)]
(RSP + -104) PTRSUB RSP -104
 CBRANCH ((f(ARG1 , RSP) + [f(RSP)]) INT_EQUAL 0)
0 INT_EQUAL (f(ARG1 , RSP) + [f(RSP)]) 0
(f(ARG1) + [f(RSP)]) COPY (f(ARG1) + [f(RSP)])
[f(RSP)] COPY [f(RSP)]
1 COPY 1
 BRANCH VZERO
 CBRANCH ([f(ARG2 , RSP)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [f(ARG2 , RSP)] 0
 RETURN 1
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
f() CALL func ARG1 ARG2 ARG2
ARG1 COPY ARG1
ARG2 COPY ARG2
0 INT_LESS f() 65
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_LESS 65)
f() CALL func
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CBRANCH ((f() & 63) INT_NOTEQUAL 0)
 CALL func (RSP + -72) (f(ARG2) + -64) (f(ARG2) + -64)
(f(ARG2) + -64) INT_ADD f(ARG2) -64
(RSP + -72) PTRSUB RSP -72
(f() & -64) INT_AND f() -64
 BRANCH VZERO
f() CALL func (RSP + -72) f() f()
0 INT_NOTEQUAL (f() & 63) 0
(RSP + -72) PTRSUB RSP -72
f() CALL func ARG1 f() f() f()
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -120) f() f()
 CALL func (RSP + -72) f() f()
 CALL func (RSP + -72) ARG1 f() ARG1
(ARG1 + (f() & -64)) INT_ADD ARG1 (f() & -64)
(RSP + -72) PTRSUB RSP -72
(f() & 63) INT_AND f() 63
(f(ARG1) + 64) INT_ADD f(ARG1) 64
f() COPY f()
(RSP + -72) PTRSUB RSP -72
 CBRANCH ((f(ARG1) + 64) INT_NOTEQUAL f(ARG1))
0 INT_NOTEQUAL (f(ARG1) + 64) f(ARG1)
 CALL func (RSP + -72) (f(ARG1) + 64) (f(ARG1) + 64)
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 CALL func ARG1 ARG2 ARG2
 RETURN 0
ARG1 COPY ARG1
ARG2 COPY ARG2
 CALL func f() f()
f() CALL func (RSP + -40)
 RETURN 0
f() CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 RETURN 0
VZERO COPY VZERO
 CALL func 1 65535
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
 CALL func ARG1 ARG2 [ARG1] f()
f() CALL func ARG1
 CALL func ARG1 ARG2 [(ARG1 + 8)] f()
 CALL func ARG2 4683326
 CALL func ARG2 (Twine 
 CALL func ARG2 4683324
(Twine  COPY (Twine 
 RETURN 0
4683324 PTRSUB 0 4683324
4683326 PTRSUB 0 4683326
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func ARG2 rope:
f() CALL func ARG2 char:"
 CALL func ARG3 ARG2 ARG2
f() CALL func ARG2 smallstring:"
f() CALL func ARG2 stringref:"
f() CALL func ARG2 std::string:"
f() CALL func ARG2 cstring:"
 CALL func ARG2 empty
f() CALL func ARG2 decULL:"
f() CALL func ARG2 decUI:"
f() CALL func ARG2 decLL:"
f() CALL func ARG2 decUL:"
f() CALL func ARG2 decL:"
f() CALL func ARG2 decI:"
f() CALL func ARG2 uhex:"
 CALL func ARG2 4683124
f() CALL func f() ARG3
f() CALL func f() ARG3
f() CALL func f() ARG3
f() CALL func f() ARG3
f() CALL func f() ARG3
(ARG3 / 2147483647) SUBPIECE ARG3 0
ARG3 CAST ARG3
[ARG3] LOAD 433 ARG3
[ARG3] LOAD 433 ARG3
[ARG3] LOAD 433 ARG3
[ARG3] LOAD 433 ARG3
ARG3 CAST ARG3
 BRANCHIND ARG4
 RETURN 0
stringref:" COPY stringref:"
f() CALL func f() [ARG3]
 BRANCH VZERO
f() CALL func f() (ARG3 & 4294967295)
(ARG3 & 4294967295) INT_AND ARG3 4294967295
 BRANCH VZERO
4683151 PTRSUB 0 4683151
 CALL func f() 4683151
4683151 PTRSUB 0 4683151
uhex:" COPY uhex:"
 BRANCH VZERO
 CALL func f() 4683151
f() CALL func f() [ARG3]
4683151 PTRSUB 0 4683151
 CALL func f() 4683151
f() CALL func f() (ARG3 & 4294967295)
char:" COPY char:"
decLL:" COPY decLL:"
decI:" COPY decI:"
4683151 PTRSUB 0 4683151
4683124 PTRSUB 0 4683124
4683151 PTRSUB 0 4683151
4683151 PTRSUB 0 4683151
f() CALL func f() [ARG3]
 BRANCH VZERO
decUL:" COPY decUL:"
 BRANCH VZERO
 CALL func f() 4683151
4683151 PTRSUB 0 4683151
rope: COPY rope:
 BRANCH VZERO
 BRANCH VZERO
smallstring:" COPY smallstring:"
empty COPY empty
 CALL func f() 4683151
4683151 PTRSUB 0 4683151
 CALL func f() 4683151
4683151 PTRSUB 0 4683151
decULL:" COPY decULL:"
cstring:" COPY cstring:"
4683151 PTRSUB 0 4683151
 BRANCH VZERO
4683151 PTRSUB 0 4683151
f() CALL func f() [ARG3]
 BRANCH VZERO
(ARG3 & 4294967295) INT_AND ARG3 4294967295
 BRANCH VZERO
 CALL func f() 4683151
 BRANCH VZERO
 CALL func f() 4683151
 CALL func f() 4683151
4683151 PTRSUB 0 4683151
decL:" COPY decL:"
decUI:" COPY decUI:"
(ARG3 / 2147483647) INT_SEXT (ARG3 / 2147483647)
 BRANCH VZERO
 BRANCH VZERO
 CALL func f() 4683151
f() CALL func f() (ARG3 / 2147483647)
 CALL func f() 4683151
 BRANCH VZERO
std::string:" COPY std::string:"
 CALL func f() 4683151
 CALL func ARG1 f() f()
f() CALL func
 RETURN 0
 CALL func ARG1 f() f()
f() CALL func
 RETURN 0
0 INT_EQUAL ARG3 [ARG1]
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 ARG2
f(ARG1 , ARG2) LOAD 433 ARG1
 RETURN 0 f(ARG1 , ARG2 , ARG3)
 CALLOTHER 17
 BRANCH VZERO
 CBRANCH (ARG3 INT_EQUAL [ARG1])
f(ARG1 , ARG2 , ARG3) COPY f(ARG1 , ARG2 , ARG3)
 STORE 433 ARG1 ([ARG1] + 1)
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
([ARG1] + 1) COPY ([ARG1] + 1)
([ARG1] + 1) INT_ADD [ARG1] 1
([ARG1] + 1) INT_ADD [ARG1] 1
 CALLOTHER 17
 RETURN 0 ([ARG1] + 1)
 STORE 433 ARG1 ([ARG1] + 4294967295)
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 RETURN 0 ([ARG1] + 4294967295)
([ARG1] + 4294967295) INT_ADD [ARG1] 4294967295
([ARG1] + 4294967295) INT_ADD [ARG1] 4294967295
 CALLOTHER 17
([ARG1] + 4294967295) COPY ([ARG1] + 4294967295)
 STORE 433 ARG1 ([ARG1] + ARG2)
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
([ARG1] + ARG2) INT_ADD [ARG1] ARG2
([ARG1] + ARG2) INT_ADD [ARG1] ARG2
([ARG1] + ARG2) COPY ([ARG1] + ARG2)
 RETURN 0 ([ARG1] + ARG2)
 CALLOTHER 17
[ARG1] LOAD 433 ARG1
f(ARG1 , ARG2) CALL func ARG1 ([ARG1] * ARG2) [ARG1] ([ARG1] * ARG2)
([ARG1] * ARG2) INT_MULT [ARG1] ARG2
 RETURN 0 ([ARG1] * ARG2)
 CBRANCH (f(ARG1 , ARG2) INT_NOTEQUAL [ARG1])
([ARG1] * ARG2) COPY ([ARG1] * ARG2)
0 INT_NOTEQUAL f(ARG1 , ARG2) [ARG1]
f(ARG1 , ARG2) CALL func ARG1 ([ARG1] / ARG2) [ARG1] ([ARG1] / ARG2)
[ARG1] LOAD 433 ARG1
([ARG1] / ARG2) INT_DIV [ARG1] ARG2
 RETURN 0 ([ARG1] / ARG2)
([ARG1] / ARG2) COPY ([ARG1] / ARG2)
 CBRANCH (f(ARG1 , ARG2) INT_NOTEQUAL [ARG1])
0 INT_NOTEQUAL f(ARG1 , ARG2) [ARG1]
ARG1 COPY ARG1
 CALL func ARG1 [f()] [f()]
[40] LOAD 433 40
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
f() CALL libcall___errno_location_thunk
[f()] LOAD 433 f()
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
[ARG1] LOAD 433 ARG1
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
(-256 & (0 # f())) INT_OR (-256 & (0 # f())) 0
bool llvm::sys::MutexImpl::tryacquire() COPY bool llvm::sys::MutexImpl::tryacquire()
(-256 & (0 # f())) INT_AND (0 # f()) -256
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp
mutex != nullptr COPY mutex != nullptr
f() CALL libcall_pthread_mutex_trylock_thunk [ARG1]
 RETURN 1
(0 # f()) PIECE 0 f()
0 INT_ZEXT 0
 CALL libcall___assert_fail_thunk mutex != nullptr /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Mutex.cpp 107 bool llvm::sys::MutexImpl::tryacquire()
 RETURN 0 (-256 & (0 # f()))
0 INT_EQUAL f() 0
 STORE 433 (ARG1 + 22) ARG7
ARG1 CAST ARG1
ARG1 CAST ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 ARG2
(ARG1 + 16) PTRADD ARG1 2 8
ARG1 CAST ARG1
 STORE 433 (ARG1 + 8) ARG3
 STORE 433 (ARG1 + 16) ARG4
 STORE 433 (ARG1 + 20) ARG5
 STORE 433 (ARG1 + 21) ARG6
(ARG1 + 22) INT_ADD ARG1 22
 RETURN 0
(ARG1 + 20) CAST (ARG1 + 20)
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 22) CAST (ARG1 + 22)
(ARG1 + 21) INT_ADD ARG1 21
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 21) CAST (ARG1 + 21)
 CALL func ARG1 ARG2 0 ARG3 1 ARG4 1
ARG1 COPY ARG1
0 INT_LESS 18 ARG3
 CBRANCH (18 INT_LESS ARG3)
 RETURN 0 ARG1
 RETURN 1
0 COPY 0
Width <= 18 && "hex width must be <= 18" COPY Width <= 18 && "hex width must be <= 18"
 CALL libcall___assert_fail_thunk Width <= 18 && "hex width must be <= 18" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Format.h 166 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Format.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Format.h
ARG1 COPY ARG1
 CALL func ARG1 ARG2 18 0
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 16)] - [(ARG1 + 8)]) INT_SUB [(ARG1 + 16)] [(ARG1 + 8)]
(ARG1 + 16) CAST (ARG1 + 16)
([(ARG1 + 16)] - [(ARG1 + 8)]) COPY ([(ARG1 + 16)] - [(ARG1 + 8)])
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0 ([(ARG1 + 16)] - [(ARG1 + 8)])
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 8)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (f() INT_NOTEQUAL 0)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[40] LOAD 433 40
 RETURN 1
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
(f() # [(ARG1 + 8)]) PIECE f() [(ARG1 + 8)]
40 CAST 40
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
0 COPY 0
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
0 INT_NOTEQUAL f() 0
 RETURN 1
 RETURN 0 (f() # [(ARG1 + 8)])
(f() # [(ARG1 + 8)]) COPY (f() # [(ARG1 + 8)])
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 32
 RETURN 0
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func (RSP + -56) ARG1 ARG1
(ARG1 + 152) INT_ADD ARG1 152
 CALL func ARG1
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
[(ARG1 + 152)] LOAD 433 (ARG1 + 152)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(ARG1 + 152) CAST (ARG1 + 152)
0 INT_NOTEQUAL [(ARG1 + 152)] 0
 CBRANCH ([(ARG1 + 152)] INT_NOTEQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) 1
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func ARG1 (RSP + -17) (RSP + -17)
 CALL func ARG1
 CALL func ARG1
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 40
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -17) PTRSUB RSP -17
40 INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
0 COPY 0
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
0 INT_XOR ([(ARG1 + 16)] & 1) 1
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 0 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 16)] & 1) INT_AND [(ARG1 + 16)] 1
0 COPY 0
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([ARG1] INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL [ARG1] 0
 CBRANCH (([(ARG1 + 8)] - [ARG1]) INT_NOTEQUAL 0)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
[40] LOAD 433 40
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(([(ARG1 + 8)] - [ARG1]) # [ARG1]) PIECE ([(ARG1 + 8)] - [ARG1]) [ARG1]
 RETURN 1
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
0 INT_NOTEQUAL ([(ARG1 + 8)] - [ARG1]) 0
 RETURN 1
 RETURN 0 (([(ARG1 + 8)] - [ARG1]) # [ARG1])
(([(ARG1 + 8)] - [ARG1]) # [ARG1]) COPY (([(ARG1 + 8)] - [ARG1]) # [ARG1])
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1
 RETURN 0
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG2 COPY ARG2
[ARG3] LOAD 433 ARG3
ARG1 COPY ARG1
f(ARG1) COPY f(ARG1)
0 INT_NOTEQUAL f(ARG2) 0
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
 RETURN 0 f(ARG1)
 BRANCH VZERO
 STORE 433 f(ARG1) [ARG3]
(f(ARG2) + -1) INT_ADD f(ARG2) -1
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
 CALL func f() ARG2 ARG3 f()
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG4
 RETURN 0
f() CALL func [ARG1] ARG2 ARG3 f(ARG1)
f(ARG1) CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 RETURN 0
 STORE 433 (ARG1 + 8) f()
2305843009213693951 COPY 2305843009213693951
 RETURN 0 2305843009213693951
f() CALL func ARG1
0 INT_LESS f() ARG2
(ARG2 * 8) INT_LEFT ARG2 3
 CALL libcall_operator.new_thunk (ARG2 * 8)
 RETURN 0
 CBRANCH (f() INT_LESS ARG2)
 CALL libcall___throw_bad_alloc_thunk
 CALL func ARG1 ARG2 0 ARG2
 RETURN 0
f() CALL func ARG1 ARG2 ARG2
0 INT_EQUAL ARG2 0
 RETURN 0 f()
 CBRANCH (ARG2 INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 f()
f() LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
f() CALL func ARG1 ARG2 ARG2
f() LOAD 433 ARG1
(ARG2 * 8) INT_MULT ARG2 8
 STORE 433 (ARG1 + 16) ((ARG2 * 8) + f())
((ARG2 * 8) + f()) INT_ADD (ARG2 * 8) f()
 STORE 433 (ARG1 + 8) f()
 RETURN 0
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 0
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0
 STORE 433 (ARG1 + 8) 0
 STORE 433 (ARG1 + 16) 0
 CALL func ARG1 ARG3 ARG3
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 CALL func ARG1 ARG2 ARG4 ARG2
 RETURN 0
[ARG1] LOAD 433 ARG1
(ARG2 * 8) INT_MULT ARG2 8
 RETURN 0 ([ARG1] + (ARG2 * 8))
([ARG1] + (ARG2 * 8)) INT_ADD [ARG1] (ARG2 * 8)
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
ARG2 COPY ARG2
[ARG3] LOAD 433 ARG3
ARG1 COPY ARG1
0 INT_NOTEQUAL f(ARG2) 0
f(ARG1) COPY f(ARG1)
 RETURN 0 f(ARG1)
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
(f(ARG2) + -1) INT_ADD f(ARG2) -1
 STORE 433 f(ARG1) [ARG3]
 BRANCH VZERO
f() CALL func ARG1
 CALL func f() ARG2 ARG3 f()
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG4
 RETURN 0
f() CALL func [ARG1] ARG2 ARG3 f(ARG1)
f(ARG1) CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 RETURN 0
 STORE 433 (ARG1 + 8) f()
2305843009213693951 COPY 2305843009213693951
 RETURN 0 2305843009213693951
f() CALL func ARG1
0 INT_LESS f() ARG2
(ARG2 * 8) INT_LEFT ARG2 3
 CBRANCH (f() INT_LESS ARG2)
 CALL libcall_operator.new_thunk (ARG2 * 8)
 RETURN 0
 CALL libcall___throw_bad_alloc_thunk
 CALL func ARG1 ARG2 0 ARG2
 RETURN 0
f() CALL func ARG1 ARG2 ARG2
0 INT_EQUAL ARG2 0
 RETURN 0 f()
 CBRANCH (ARG2 INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 f()
f() LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
f() CALL func ARG1 ARG2 ARG2
f() LOAD 433 ARG1
(ARG2 * 8) INT_MULT ARG2 8
 STORE 433 (ARG1 + 16) ((ARG2 * 8) + f())
((ARG2 * 8) + f()) INT_ADD (ARG2 * 8) f()
 STORE 433 (ARG1 + 8) f()
 RETURN 0
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 0
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0
 STORE 433 (ARG1 + 8) 0
 STORE 433 (ARG1 + 16) 0
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 ARG3 ARG3
 RETURN 0
 CALL func ARG1 ARG2 ARG4 ARG2
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
 CBRANCH (([(ARG1 + 16)] & 1) INT_NOTEQUAL 0)
0 INT_NOTEQUAL ([(ARG1 + 16)] & 1) 0
(ARG1 + 16) CAST (ARG1 + 16)
([(ARG1 + 16)] & 1) INT_AND [(ARG1 + 16)] 1
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
0 COPY 0
!HasError && "Cannot get value when an error exists!" COPY !HasError && "Cannot get value when an error exists!"
 RETURN 0 ARG1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ErrorOr.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ErrorOr.h
 RETURN 1
 CALL libcall___assert_fail_thunk !HasError && "Cannot get value when an error exists!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ErrorOr.h 263 0
 CALL func ARG1
 RETURN 0
 CALL libcall_operator.delete_thunk ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
0 INT_NOTEQUAL ARG2 0
 RETURN 0
 CBRANCH (ARG2 INT_NOTEQUAL 0)
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
(ARG1 + 16) PTRADD ARG1 2 8
 CALL func ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 8) [ARG1]
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
 RETURN 0
(([(ARG1 + 16)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 3
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1
f(ARG1) CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
ARG2 COPY ARG2
 RETURN 0 ARG2
[ARG1] LOAD 433 ARG1
 CALL func ARG1 [ARG1] [ARG1]
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CAST f()
 RETURN 0 [f()]
[f()] LOAD 433 f()
[f()] COPY [f()]
 CALL func ARG1
 RETURN 0
(ARG1 + 24) PTRADD ARG1 3 8
[ARG1] LOAD 433 ARG1
([ARG1] & -256) INT_AND [ARG1] -256
([ARG1] & -256) INT_OR ([ARG1] & -256) 0
 RETURN 0 ([ARG1] & -256)
0 INT_EQUAL [ARG1] (ARG1 + 24)
0 INT_ZEXT 0
[ARG1] CAST [ARG1]
[ARG1] CAST [ARG1]
 RETURN 0
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 RETURN 0
 CALL func [ARG1] [(ARG1 + 8)] [(ARG1 + 8)]
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL libcall_free_thunk [ARG1]
 CALL func ARG1
 RETURN 0
 CALL libcall_free_thunk ARG2
 RETURN 0
(ARG1 + 80) INT_ADD ARG1 80
(ARG1 + 72) INT_ADD ARG1 72
(ARG1 + 128) INT_ADD ARG1 128
[(ARG1 + 80)] LOAD 433 (ARG1 + 80)
(ARG1 + 72) CAST (ARG1 + 72)
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
 CBRANCH (f(ARG1) INT_NOTEQUAL [(ARG1 + 80)])
 RETURN 0
(ARG1 + 80) CAST (ARG1 + 80)
0 INT_NOTEQUAL f(ARG1) [(ARG1 + 80)]
[(f(ARG1) + 8)] LOAD 433 (f(ARG1) + 8)
[f(ARG1)] LOAD 433 f(ARG1)
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
 CALL func (ARG1 + 128) [f(ARG1)] [(f(ARG1) + 8)] (ARG1 + 128)
(f(ARG1) + 16) PTRADD f(ARG1) 2 8
 BRANCH VZERO
 RETURN 0
(ARG2 - ARG1) INT_SUB ARG2 ARG1
((ARG2 - ARG1) / 8) INT_SRIGHT (ARG2 - ARG1) 3
 RETURN 0 ((ARG2 - ARG1) / 8)
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
(RSP + -48) PTRSUB RSP -48
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -48)
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
(ARG1 / 128) INT_RIGHT ARG1 7
(RSP + -32) PTRSUB RSP -32
40 INT_ADD 0 40
(4096 << (63 & ([f(RSP)] / 2147483647))) COPY (4096 << (63 & ([f(RSP)] / 2147483647)))
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -24) PTRSUB RSP -24
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(4096 << (63 & ([f(RSP)] / 2147483647))) INT_LEFT 4096 (63 & ([f(RSP)] / 2147483647))
(63 & ([f(RSP)] / 2147483647)) INT_AND ([f(RSP)] / 2147483647) 63
([f(RSP)] / 2147483647) SUBPIECE [f(RSP)] 0
[40] LOAD 433 40
[f(RSP)] LOAD 433 f(RSP)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f(RSP) CALL func (RSP + -32) (RSP + -24) (RSP + -24)
f(RSP) CAST f(RSP)
40 CAST 40
(ARG1 / 128) INT_ZEXT (ARG1 / 128)
30 COPY 30
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (4096 << (63 & ([f(RSP)] / 2147483647)))
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 128) INT_ADD ARG1 128
ARG2 COPY ARG2
0 INT_NOTEQUAL f(ARG2) ARG3
 CBRANCH (f(ARG2) INT_NOTEQUAL ARG3)
 RETURN 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 BRANCH VZERO
f() CALL func [(ARG1 + 16)] f(ARG2) f(ARG2)
[f(ARG2)] LOAD 433 f(ARG2)
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
f() CALL func f()
 CALL func (ARG1 + 128) [f(ARG2)] f() (ARG1 + 128)
[ARG1] LOAD 433 ARG1
(ARG1 + 24) PTRADD ARG1 3 8
[ARG1] CAST [ARG1]
[ARG1] CAST [ARG1]
0 INT_ZEXT 0
([ARG1] & -256) INT_OR ([ARG1] & -256) 0
0 INT_EQUAL [ARG1] (ARG1 + 24)
 RETURN 0 ([ARG1] & -256)
([ARG1] & -256) INT_AND [ARG1] -256
 RETURN 0
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0
 CALL func [ARG1] [(ARG1 + 8)] [(ARG1 + 8)]
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL libcall_free_thunk [ARG1]
 CALL func ARG1
 RETURN 0
 CALL func ARG1 [(ARG1 + 16)] [(ARG1 + 24)] [(ARG1 + 16)]
 CALL func ARG1
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 72) INT_ADD ARG1 72
(ARG1 + 16) INT_ADD ARG1 16
 CALL func (ARG1 + 72)
 CALL func (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 24) CAST (ARG1 + 24)
 RETURN 0
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
ARG2 COPY ARG2
 RETURN 0 ARG2
[ARG1] LOAD 433 ARG1
 CALL func ARG1 [ARG1] [ARG1]
 RETURN 0
 STORE 433 (ARG1 + 152) ARG3
 CALL func ARG2 ARG1 ARG1
 CALL func ARG1
(ARG1 + 152) INT_ADD ARG1 152
 RETURN 0
(ARG1 + 152) CAST (ARG1 + 152)
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 24) PTRADD ARG1 3 8
[ARG1] LOAD 433 ARG1
ARG3 CAST ARG3
[ARG3] LOAD 433 ARG3
(ARG3 + 16) PTRADD ARG3 2 8
(ARG3 + 16) PTRADD ARG3 2 8
(ARG3 + 8) PTRADD ARG3 1 8
(ARG3 + 24) PTRADD ARG3 3 8
ARG3 CAST ARG3
(ARG3 + 32) PTRADD ARG3 4 8
 RETURN 0 0
(ARG3 + 12) CAST (ARG3 + 12)
0 COPY 0
(ARG3 + 12) CAST (ARG3 + 12)
0 INT_SLESS f() [(ARG1 + 24)]
[(ARG3 + 12)] LOAD 433 (ARG3 + 12)
[(ARG1 + 24)] INT_ZEXT [(ARG1 + 24)]
 STORE 433 (ARG3 + 12) 0
[(ARG1 + 24)] CAST [(ARG1 + 24)]
 CBRANCH (f() INT_SLESS [(ARG1 + 24)])
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
 CBRANCH ([(ARG3 + 12)] INT_EQUAL 0)
(ARG1 + 24) CAST (ARG1 + 24)
0 INT_EQUAL [(ARG3 + 12)] 0
(ARG3 + 12) INT_ADD ARG3 12
0 COPY 0
(ARG3 + 12) INT_ADD ARG3 12
 CBRANCH (f() INT_SLESS [(ARG3 + 8)])
(f() * 8) INT_MULT f() 8
([(ARG3 + 16)] + (f() * 8)) INT_ADD [(ARG3 + 16)] (f() * 8)
[([(ARG3 + 16)] + (f() * 8))] LOAD 433 ([(ARG3 + 16)] + (f() * 8))
[(ARG3 + 16)] LOAD 433 (ARG3 + 16)
 CBRANCH ([([(ARG3 + 16)] + (f() * 8))] INT_EQUAL 0)
0 INT_SLESS f() [(ARG3 + 8)]
f() INT_SEXT f()
0 INT_EQUAL [([(ARG3 + 16)] + (f() * 8))] 0
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
([(ARG3 + 16)] + (f() * 8)) CAST ([(ARG3 + 16)] + (f() * 8))
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
(ARG3 + 8) CAST (ARG3 + 8)
 BRANCH VZERO
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG3 + 32)] LOAD 433 (ARG3 + 32)
 CBRANCH (([(([(ARG1 + 16)] + (f() * 56)) + 16)] + [ARG1]) INT_SLESSEQUAL [([ARG3] + (f() * 8))])
0 INT_SLESS [([ARG3] + (f() * 8))] (([(([(ARG1 + 16)] + (f() * 56)) + 16)] + [ARG1]) + [(([(ARG1 + 16)] + (f() * 56)) + 40)])
 CBRANCH f(ARG1 , ARG3)
([ARG3] + (f() * 8)) CAST ([ARG3] + (f() * 8))
(f() * 8) INT_MULT f() 8
([ARG3] + (f() * 8)) INT_ADD [ARG3] (f() * 8)
f() INT_SEXT f()
[([ARG3] + (f() * 8))] LOAD 433 ([ARG3] + (f() * 8))
0 INT_SLESSEQUAL ([(([(ARG1 + 16)] + (f() * 56)) + 16)] + [ARG1]) [([ARG3] + (f() * 8))]
 CBRANCH ([([(ARG1 + 16)] + (f() * 56))] INT_EQUAL 1)
(([(ARG1 + 16)] + (f() * 56)) + 40) PTRADD ([(ARG1 + 16)] + (f() * 56)) 10 4
(([(ARG1 + 16)] + (f() * 56)) + 16) CAST (([(ARG1 + 16)] + (f() * 56)) + 16)
0 COPY 0
[(([(ARG1 + 16)] + (f() * 56)) + 40)] LOAD 433 (([(ARG1 + 16)] + (f() * 56)) + 40)
(([(([(ARG1 + 16)] + (f() * 56)) + 16)] + [ARG1]) + [(([(ARG1 + 16)] + (f() * 56)) + 40)]) INT_ADD ([(([(ARG1 + 16)] + (f() * 56)) + 16)] + [ARG1]) [(([(ARG1 + 16)] + (f() * 56)) + 40)]
[(([(ARG1 + 16)] + (f() * 56)) + 16)] LOAD 433 (([(ARG1 + 16)] + (f() * 56)) + 16)
([(([(ARG1 + 16)] + (f() * 56)) + 16)] + [ARG1]) INT_ADD [(([(ARG1 + 16)] + (f() * 56)) + 16)] [ARG1]
(([(ARG1 + 16)] + (f() * 56)) + 16) PTRADD ([(ARG1 + 16)] + (f() * 56)) 4 4
(([(ARG1 + 16)] + (f() * 56)) + 40) CAST (([(ARG1 + 16)] + (f() * 56)) + 40)
[(ARG3 + 16)] LOAD 433 (ARG3 + 16)
[(ARG3 + 24)] LOAD 433 (ARG3 + 24)
f() INT_SEXT f()
f() INT_SEXT f()
 STORE 433 ([(ARG3 + 16)] + (f() * 8)) f(ARG1 , ARG3)
([(ARG3 + 24)] + (f() * 8)) CAST ([(ARG3 + 24)] + (f() * 8))
([(ARG3 + 16)] + (f() * 8)) CAST ([(ARG3 + 16)] + (f() * 8))
(f() * 8) INT_MULT f() 8
(f() * 8) INT_MULT f() 8
 BRANCH VZERO
([(ARG3 + 16)] + (f() * 8)) INT_ADD (f() * 8) [(ARG3 + 16)]
([([ARG3] + (f() * 8))] - [ARG1]) INT_SUB [([ARG3] + (f() * 8))] [ARG1]
([(ARG3 + 24)] + (f() * 8)) INT_ADD (f() * 8) [(ARG3 + 24)]
 STORE 433 ([(ARG3 + 24)] + (f() * 8)) ([([ARG3] + (f() * 8))] - [ARG1])
f() INT_SEXT f()
(f() + 1) INT_ADD f() 1
([(ARG1 + 16)] + (f() * 56)) CAST ([(ARG1 + 16)] + (f() * 56))
([(ARG1 + 16)] + (f() * 56)) INT_ADD (f() * 56) [(ARG1 + 16)]
(f() * 56) INT_MULT f() 56
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 BRANCH VZERO
0 INT_EQUAL [([(ARG1 + 16)] + (f() * 56))] 1
[([(ARG1 + 16)] + (f() * 56))] LOAD 433 ([(ARG1 + 16)] + (f() * 56))
ARG1 COPY ARG1
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG5 COPY ARG5
ARG2 INT_ZEXT ARG2
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL libcall_dl_iterate_phdr_thunk 4327806 (RSP + -56)
1 COPY 1
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
4327806 PTRSUB 0 4327806
(FS_OFFSET + 40) INT_ADD 0 40
(ARG2 | 4294967296) INT_OR ARG2 4294967296
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
(RSP + -56) PTRSUB RSP -56
40 CAST 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 1
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
[ARG2] LOAD 433 ARG2
 CALLIND [([ARG2] + 8)] ARG2 ARG2 ARG2
0 INT_NOTEQUAL ARG2 0
 CBRANCH (ARG2 INT_NOTEQUAL 0)
 RETURN 0
[([ARG2] + 8)] LOAD 433 ([ARG2] + 8)
([ARG2] + 8) CAST ([ARG2] + 8)
([ARG2] + 8) INT_ADD [ARG2] 8
f() CALL func ARG1
f() CALL func ARG1
 STORE 433 f() 0
f() CAST f()
 RETURN 0
 CBRANCH ([f()] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [f()] 0
[f()] LOAD 433 f()
f() LOAD 433 f()
 CALL func f() f()
f(ARG1) CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
 CBRANCH (([(ARG1 + 16)] & 1) INT_NOTEQUAL 1)
0 INT_NOTEQUAL ([(ARG1 + 16)] & 1) 1
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 RETURN 0
([(ARG1 + 16)] & 1) INT_AND [(ARG1 + 16)] 1
 CALL func f(ARG1)
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 [f(ARG2)]
f(ARG2) CALL func ARG2
 RETURN 0
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG2) CAST f(ARG2)
 CALL func ARG2
 RETURN 0
 CALL func ARG1 f(ARG2) f(ARG2)
f(ARG2) CALL func ARG2
 RETURN 0
 CALL func ARG1 f(ARG2) f(ARG2)
 CALL func ARG1 f(ARG3) f(ARG3)
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
 RETURN 0
 CALL func ARG1 f(ARG2) f(ARG3) f(ARG2)
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
 RETURN 0
f() CALL func ARG1
f() CALL func ARG1
 STORE 433 f() 0
f() CAST f()
 RETURN 0 f()
f() COPY f()
 CALL func ARG1 (RSP + -40) f() (RSP + -40)
f() CALL func ARG2
f() CALL func ARG2
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
f() CALL func f()
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
f(ARG1) CALL func ARG1
f() CALL func ARG2
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_NOTEQUAL f(ARG1) 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
f(ARG1) CALL func 8 f(ARG1)
 STORE 433 (ARG1 + 16) ([(ARG1 + 16)] & 254)
([(ARG1 + 16)] & 254) INT_AND [(ARG1 + 16)] 254
 RETURN 0
 CALL func f(ARG1) f()
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
0 INT_EQUAL ([(ARG1 + 16)] & 1) 0
([(ARG1 + 16)] & 1) INT_AND [(ARG1 + 16)] 1
 CBRANCH (([(ARG1 + 16)] & 1) INT_EQUAL 0)
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 0 ARG1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ErrorOr.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ErrorOr.h
HasError && "Cannot get error when a value exists!" COPY HasError && "Cannot get error when a value exists!"
 RETURN 1
 CALL libcall___assert_fail_thunk HasError && "Cannot get error when a value exists!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/ErrorOr.h 273 0
0 COPY 0
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
f(ARG1) CALL func ARG1
(ARG2 & 4294967295) INT_AND ARG2 4294967295
 STORE 433 (f(ARG1) + 8) ARG3
 STORE 433 (ARG1 + 16) ([(ARG1 + 16)] | 1)
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG1) 0
(ARG1 + 16) CAST (ARG1 + 16)
f(ARG1) CALL func 16 f(ARG1)
f(ARG1) CAST f(ARG1)
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 RETURN 0
([(ARG1 + 16)] | 1) INT_OR [(ARG1 + 16)] 1
 STORE 433 f(ARG1) (ARG2 & 4294967295)
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
(ARG2 + ARG1) INT_ADD ARG2 ARG1
(ARG2 * ((((ARG2 + ARG1) - (ARG3 % ARG2)) + -1) / ARG2)) INT_MULT ((((ARG2 + ARG1) - (ARG3 % ARG2)) + -1) / ARG2) ARG2
(ARG3 % ARG2) INT_REM ARG3 ARG2
((((ARG2 + ARG1) - (ARG3 % ARG2)) + -1) / ARG2) INT_DIV (((ARG2 + ARG1) - (ARG3 % ARG2)) + -1) ARG2
(((ARG2 + ARG1) - (ARG3 % ARG2)) + -1) INT_SUB ((ARG2 + ARG1) - (ARG3 % ARG2)) -1
((ARG3 % ARG2) + (ARG2 * ((((ARG2 + ARG1) - (ARG3 % ARG2)) + -1) / ARG2))) INT_ADD (ARG3 % ARG2) (ARG2 * ((((ARG2 + ARG1) - (ARG3 % ARG2)) + -1) / ARG2))
 RETURN 0 ((ARG3 % ARG2) + (ARG2 * ((((ARG2 + ARG1) - (ARG3 % ARG2)) + -1) / ARG2)))
((ARG2 + ARG1) - (ARG3 % ARG2)) INT_SUB (ARG2 + ARG1) (ARG3 % ARG2)
 CALL libcall_memcpy_thunk ARG1 ARG2 ARG3
ARG1 CAST ARG1
(ARG1 + ARG3) INT_ADD ARG1 ARG3
0 INT_NOTEQUAL ARG3 0
 CBRANCH (ARG3 INT_NOTEQUAL 0)
 STORE 433 (ARG1 + ARG3) 0
 RETURN 0
(ARG1 + ARG3) CAST (ARG1 + ARG3)
 STORE 433 ARG1 0
 RETURN 0
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
 CALL func ARG1
 STORE 433 f() ARG2
 RETURN 0
f() CAST f()
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
0 INT_NOTEQUAL ARG4 0
 STORE 433 (ARG1 + 8) ARG2
 STORE 433 (ARG1 + 16) ARG3
[ARG3] LOAD 433 ARG3
 CBRANCH (ARG4 INT_NOTEQUAL 0)
 CBRANCH ([ARG3] INT_NOTEQUAL 0)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/MemoryBuffer.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/MemoryBuffer.cpp
(!RequiresNullTerminator || BufEnd[0] == 0) && "Buffer is not null terminated!" COPY (!RequiresNullTerminator || BufEnd[0] == 0) && "Buffer is not null terminated!"
void llvm::MemoryBuffer::init(const char*, const char*, bool) COPY void llvm::MemoryBuffer::init(const char*, const char*, bool)
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 1
(ARG1 + 8) CAST (ARG1 + 8)
 CALL libcall___assert_fail_thunk (!RequiresNullTerminator || BufEnd[0] == 0) && "Buffer is not null terminated!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/MemoryBuffer.cpp 48 void llvm::MemoryBuffer::init(const char*, const char*, bool)
 RETURN 0
0 INT_NOTEQUAL [ARG3] 0
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
ARG4 COPY ARG4
ARG1 COPY ARG1
 CALL func ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
 RETURN 0
 CALL func ARG1 f() f() ARG4
f() CALL func (RSP + -56)
Symbol CAST Symbol
(RSP + -56) PTRSUB RSP -56
Symbol PTRSUB 0 Symbol
 STORE 433 ARG1 Symbol
f() CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
ARG4 COPY ARG4
 CALL func ARG1 0
ARG1 COPY ARG1
 CALL func ARG1 f() f()
(ARG2 + f()) INT_ADD ARG2 f()
 CALL func f() (f() + f()) ARG2 1
(ARG2 + (f() + f())) INT_ADD ARG2 (f() + f())
0 INT_NOTEQUAL ARG2 0
f() CALL func ARG3 (RSP + -312) (RSP + -312)
(RSP + -312) PTRSUB RSP -312
6971472 CAST 6971472
6971472 PTRSUB 0 6971472
 CALL func (RSP + -312)
((f() / 4611686014132420609) + 25) INT_ADD (f() / 4611686014132420609) 25
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) INT_RIGHT f() 64
 CBRANCH (f() INT_EQUAL 0)
f() CALL func ((f() / 4611686014132420609) + 25) 16 0
(RSP + -312) PTRSUB RSP -312
f() CALL libcall_operator.new_thunk ((ARG2 + f()) + 1) 6971472
((ARG2 + f()) + 1) INT_ADD (ARG2 + f()) 1
0 INT_EQUAL f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG2 INT_NOTEQUAL 0)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
0 COPY 0
 RETURN 1
 CBRANCH (0 INT_EQUAL [(f() + 40)])
 CALL func (RSP + -312)
f() CALL func 24 f()
0 INT_EQUAL 0 [(f() + 40)]
(RSP + -312) PTRSUB RSP -312
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
 BRANCH VZERO
 CBRANCH ((f() + f()) INT_EQUAL 0)
(f() + 24) INT_ADD f() 24
(ARG2 + (f() + f())) CAST (ARG2 + (f() + f()))
 CALL func (f() + 24) (f() / 2147483647) (f() / 4611686014132420609) (f() + 24)
f() CAST f()
 BRANCH VZERO
0 INT_EQUAL (f() + f()) 0
f() CAST f()
 STORE 433 (ARG2 + (f() + f())) 0
(f() + f()) INT_ADD f() f()
 CALL func ARG1 16384
 RETURN 0
 CALL func ARG1
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (([(ARG1 + 8)] - [ARG1]) INT_NOTEQUAL 0)
40 INT_ADD 0 40
[40] LOAD 433 40
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 RETURN 1
(([(ARG1 + 8)] - [ARG1]) # [ARG1]) PIECE ([(ARG1 + 8)] - [ARG1]) [ARG1]
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
0 COPY 0
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
0 INT_NOTEQUAL ([(ARG1 + 8)] - [ARG1]) 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (([(ARG1 + 8)] - [ARG1]) # [ARG1])
(([(ARG1 + 8)] - [ARG1]) # [ARG1]) COPY (([(ARG1 + 8)] - [ARG1]) # [ARG1])
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
(f() & -256) INT_OR (f() & -256) 0
0 INT_NOTEQUAL f() 0
 RETURN 0 (f() & -256)
(f() & -256) INT_AND f() -256
0 INT_ZEXT 0
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
 CALL func ARG1 (RSP + -40) (RSP + -40)
ARG1 COPY ARG1
 CALL func ARG1 0
 CALL libcall_memcpy_thunk f() ARG2 ARG3
 CALL func (RSP + -40) ARG3 ARG4 ARG3
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
 CALL func (RSP + -40)
(f() + 40) INT_ADD f() 40
f() CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
 CBRANCH (f() INT_EQUAL 1)
(FS_OFFSET + 40) INT_ADD 0 40
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -40) PTRSUB RSP -40
0 INT_EQUAL f() 1
(RSP + -40) PTRSUB RSP -40
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 ARG1
f() CALL func f()
(RSP + -40) PTRSUB RSP -40
f() CAST f()
f() CALL func (RSP + -40)
 BRANCH VZERO
(RSP + -40) PTRSUB RSP -40
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1 f() f() f()
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -16456) (RSP + -16456)
 CALL func (RSP + -16456) (f() / 2147483647) (f() / 4611686014132420609) ARG3 (f() / 2147483647) (f() / 4611686014132420609)
f() CALL libcall_read_thunk ARG2 f() 16384
(16384 - f()) INT_SUB 16384 f()
0 INT_EQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_EQUAL -1)
((16384 - f()) + f()) INT_ADD f() (16384 - f())
 CALL func (RSP + -16440)
f() CAST f()
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL f() -1
(RSP + -16440) PTRSUB RSP -16440
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -16440) PTRSUB RSP -16440
 CALL func (RSP + -16440)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -16440) ((16384 - f()) + f()) ((16384 - f()) + f())
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(RSP + -16440) PTRSUB RSP -16440
((f() - f()) + f()) INT_ADD f() (f() - f())
0 INT_NOTEQUAL f() 0
 CALL func (RSP + -16440) ((f() - f()) + f()) ((f() - f()) + f())
(f() - f()) INT_SUB f() f()
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL [f()] 4
 CBRANCH ([f()] INT_NOTEQUAL 4)
f() CAST f()
f() CALL libcall___errno_location_thunk
(RSP + -16440) PTRSUB RSP -16440
 BRANCH VZERO
[f()] LOAD 433 f()
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
f() CALL func (RSP + -16440)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -16440) PTRSUB RSP -16440
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(RSP + -16456) PTRSUB RSP -16456
 CALL func (RSP + -16456)
(RSP + -16456) PTRSUB RSP -16456
(f() / 2147483647) INT_RIGHT f() 64
(RSP + -16456) PTRSUB RSP -16456
f() CALL libcall___errno_location_thunk
[f()] LOAD 433 f()
 CALL func (RSP + -16456) [f()] f() [f()]
 BRANCH VZERO
f() CALL libcall_generic_category_thunk
(RSP + -16456) PTRSUB RSP -16456
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 32) CAST (ARG1 + 32)
 RETURN 0 [(ARG1 + 32)]
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
[(ARG1 + 32)] COPY [(ARG1 + 32)]
0 INT_EQUAL ARG5 1
0 INT_EQUAL ARG2 -1
ARG2 COPY ARG2
0 INT_LESS ARG3 16384
(ARG3 + ARG4) INT_ADD ARG3 ARG4
0 INT_LESS ARG3 ARG6
ARG6 INT_ZEXT ARG6
(ARG6 + 1) INT_SUB ARG6 1
0 INT_EQUAL ARG7 0
f() CALL func ARG1 (RSP + -72) (RSP + -72)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG7 INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (f(ARG2) INT_LESS (ARG3 + ARG4))
0 COPY 0
0 INT_LESS f(ARG2) (ARG3 + ARG4)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
f() CALL func (RSP + -72)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
(RSP + -72) PTRSUB RSP -72
 BRANCH VZERO
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 f()
 CBRANCH (ARG5 INT_EQUAL 1)
 CBRANCH (ARG2 INT_EQUAL -1)
1 COPY 1
 BRANCH VZERO
 CBRANCH (ARG3 INT_LESS ARG6)
0 COPY 0
 BRANCH VZERO
 CBRANCH (ARG3 INT_LESS 16384)
 BRANCH VZERO
0 COPY 0
 CBRANCH ((ARG3 + ARG4) INT_EQUAL f(ARG2))
0 INT_EQUAL (f(ARG2) & (ARG6 + 1)) 0
0 COPY 0
 BRANCH VZERO
(ARG6 + 1) CAST (ARG6 + 1)
(ARG6 + 1) INT_SEXT (ARG6 + 1)
(f(ARG2) & (ARG6 + 1)) INT_AND (ARG6 + 1) f(ARG2)
 CBRANCH ((f(ARG2) & (ARG6 + 1)) INT_EQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
0 INT_NOTEQUAL f() 0
f() CALL func (RSP + -88)
(RSP + -88) PTRSUB RSP -88
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/MemoryBuffer.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/MemoryBuffer.cpp
End <= FileSize COPY End <= FileSize
0 COPY 0
0 INT_EQUAL (ARG3 + ARG4) f(ARG2)
0 COPY 0
 RETURN 1
 CALL libcall___assert_fail_thunk End <= FileSize /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/MemoryBuffer.cpp 310 0
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -72)
(RSP + -72) PTRSUB RSP -72
(ARG1 & (~(f()) + 1)) INT_AND (~(f()) + 1) ARG1
(~(f()) + 1) INT_2COMP f()
f() CALL func
 RETURN 0 (ARG1 & (~(f()) + 1))
(~(f()) + 1) INT_SEXT (~(f()) + 1)
f() CALL func ARG3
(ARG3 - f()) INT_SUB ARG3 f()
(ARG1 + 24) INT_ADD ARG1 24
f() CALL func (ARG1 + 24)
((ARG3 - f()) + f()) INT_ADD (ARG3 - f()) f()
 RETURN 0 ((ARG3 - f()) + f())
(ARG1 + (ARG2 - f())) INT_ADD ARG1 (ARG2 - f())
f() CALL func ARG2
(ARG2 - f()) INT_SUB ARG2 f()
 RETURN 0 (ARG1 + (ARG2 - f()))
 CALL func ARG1 f() (ARG4 + f()) ARG2
 CALL func ARG1
(ARG1 + 24) PTRADD ARG1 3 8
f() CALL func ARG1 ARG4 ARG5 ARG4
 STORE 433 ARG1 Symbol
f() CALL func ARG4 ARG5 ARG5
(ARG4 + f()) INT_ADD f() ARG4
f() CALL func ARG5
f() CALL func ARG6
 CALL func (ARG1 + 24) ARG3 0 f() f() ARG6
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 STORE 433 ARG1 ARG2
 RETURN 0
(ARG1 + f()) INT_ADD f() ARG1
(ARG1 + (f() / 4611686014132420609)) INT_ADD ARG1 (f() / 4611686014132420609)
[ARG2] LOAD 433 ARG2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
f() CAST f()
 CALL func (ARG1 + f()) (f() / 2147483647) (f() / 4611686014132420609) (ARG1 + f())
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CALL func (RSP + -312)
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
f() CALL libcall_operator.new_thunk ((ARG1 + (f() / 4611686014132420609)) + 1)
(RSP + -312) PTRSUB RSP -312
(RSP + -312) PTRSUB RSP -312
[40] LOAD 433 40
((ARG1 + (f() / 4611686014132420609)) + 1) INT_ADD (ARG1 + (f() / 4611686014132420609)) 1
f() CALL func [ARG2] (RSP + -312) (RSP + -312)
f() COPY f()
 CALL func (RSP + -312)
(f() / 2147483647) INT_RIGHT f() 64
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -312) PTRSUB RSP -312
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 RETURN 1
 CALL func (RSP + -104) f(ARG4 , ARG5) ARG3 f(ARG4 , ARG5)
 CALL func ARG1 ARG2 ARG3 ARG2
 CALL func (RSP + -104) ARG3 ARG3
0 INT_EQUAL ARG4 -1
ARG4 COPY ARG4
 CALL func f() ARG7 ARG2 f(ARG4 , ARG5) ARG6 (RSP + -88)
f() CALL func ARG2 f(ARG4) f(ARG4 , ARG5) ARG6 ARG7 f() ARG8
f() CALL libcall_pread_thunk ARG2 f() f(ARG4 , ARG5) (ARG6 + (f(ARG4 , ARG5) - f(ARG4 , ARG5)))
f() CALL func ARG2 (RSP + -88) (RSP + -88)
ARG5 COPY ARG5
0 INT_EQUAL ARG5 -1
(ARG6 + (f(ARG4 , ARG5) - f(ARG4 , ARG5))) INT_ADD ARG6 (f(ARG4 , ARG5) - f(ARG4 , ARG5))
 CALL func ARG1 f() f() f()
 CALL func ARG1 (RSP + -104) (RSP + -104)
 CALL func ARG1 f() 0 f()
 CALL func ARG1 (RSP + -88) (RSP + -88)
 CALL func ARG1 (4294967295 & (f() / 2147483647)) (f() / 4611686014132420609) (f() / 2147483647)
ARG1 COPY ARG1
 CBRANCH (f() INT_EQUAL [(f() + 40)])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG5 INT_EQUAL -1)
0 INT_EQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
0 INT_EQUAL VZERO 0
 CBRANCH (VZERO INT_EQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_NOTEQUAL 1)
f() CALL func (RSP + -104)
(RSP + -104) PTRSUB RSP -104
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
(RSP + -104) PTRSUB RSP -104
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -104)
 CBRANCH (f() INT_EQUAL 0)
f() CAST f()
(f(ARG4 , ARG5) - f()) INT_SUB f(ARG4 , ARG5) f()
 BRANCH VZERO
 CALL libcall_memset_thunk f() 0 f(ARG4 , ARG5)
(RSP + -88) PTRSUB RSP -88
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -88)
 BRANCH VZERO
(f() + f()) INT_ADD f() f()
 CBRANCH (f(ARG4 , ARG5) INT_EQUAL 0)
0 INT_EQUAL f(ARG4 , ARG5) 0
f(RSP) CALL func (RSP + -104)
(RSP + -104) PTRSUB RSP -104
(RSP + -88) PTRSUB RSP -88
(f() + f()) CAST (f() + f())
 CALL func (RSP + -88) f(RSP) f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func (RSP + -88)
 CBRANCH (f() INT_NOTEQUAL 2)
0 INT_NOTEQUAL f() 2
(RSP + -88) PTRSUB RSP -88
 BRANCH VZERO
 RETURN 0 ARG1
f() COPY f()
 RETURN 1
f() COPY f()
f() COPY f()
 CALL libcall___stack_chk_fail_thunk
f() COPY f()
f(ARG4) COPY f(ARG4)
0 INT_NOTEQUAL f() 5
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func
 CBRANCH (f() INT_NOTEQUAL 5)
 CBRANCH (f() INT_NOTEQUAL 0)
 CALL libcall___cxa_guard_release_thunk
f() CALL func
(f() / 2147483647) SUBPIECE f() 0
(4294967295 & (f() / 2147483647)) INT_AND (f() / 2147483647) 4294967295
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
f() CALL func
 BRANCH VZERO
f() CAST f()
(f() / 2147483647) INT_RIGHT f() 64
(RSP + -104) PTRSUB RSP -104
f(ARG4 , ARG5) COPY f(ARG4 , ARG5)
 CALL func (RSP + -104)
f() CALL func 12
(RSP + -104) PTRSUB RSP -104
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 CALL func (RSP + -136)
 CALL func (RSP + -88)
(RSP + -88) PTRSUB RSP -88
(RSP + -88) PTRSUB RSP -88
f() CALL func 40 (RSP + -104)
(RSP + -88) PTRSUB RSP -88
f() CALL func (RSP + -88)
(RSP + -136) PTRSUB RSP -136
(RSP + -104) PTRSUB RSP -104
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -136) f()
 BRANCH VZERO
 CALL func (RSP + -104)
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -104) f(RSP) f(RSP)
 BRANCH VZERO
f(RSP) CALL func (RSP + -136)
(RSP + -104) PTRSUB RSP -104
(RSP + -104) PTRSUB RSP -104
(RSP + -136) PTRSUB RSP -136
 CBRANCH (ARG4 INT_EQUAL -1)
0 INT_NOTEQUAL f() 0
(RSP + -88) PTRSUB RSP -88
0 COPY 0
f() CALL func (RSP + -104)
(RSP + -104) PTRSUB RSP -104
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -88)
(f(ARG4 , ARG5) - f(ARG4 , ARG5)) INT_SUB f(ARG4 , ARG5) f(ARG4 , ARG5)
 CBRANCH (f() INT_NOTEQUAL -1)
0 INT_NOTEQUAL f() -1
0 INT_NOTEQUAL f() 0
f() CALL libcall___cxa_guard_acquire_thunk
f() CALL libcall___errno_location_thunk
[f()] LOAD 433 f()
0 INT_EQUAL [f()] 4
 CBRANCH ([f()] INT_EQUAL 4)
0 INT_EQUAL f() 0
f() CALL libcall_generic_category_thunk
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -88) [f()] f() [f()]
f() CALL libcall___errno_location_thunk
[f()] LOAD 433 f()
 BRANCH VZERO
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
([(ARG1 + 16)] & 1) INT_AND [(ARG1 + 16)] 1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
0 INT_EQUAL ([(ARG1 + 16)] & 1) 0
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (([(ARG1 + 16)] & 1) INT_EQUAL 0)
(f() + 40) CAST (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
(f() # f()) PIECE f() f()
(FS_OFFSET + 40) INT_ADD 0 40
 RETURN 1
 RETURN 0 (f() # f())
 CALL libcall___stack_chk_fail_thunk
(f() # f()) INT_AND (f() # f()) -1
[(f() + 8)] LOAD 433 (f() + 8)
 CALL func (RSP + -56)
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
[f()] LOAD 433 f()
f() CAST f()
(f() + 8) PTRADD f() 1 8
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
f(ARG1) CALL func ARG1
f(ARG1) CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f() CALL func ARG2
f(ARG2) CALL func ARG2
(ARG2 + 16) INT_ADD ARG2 16
([(ARG2 + 16)] & 1) INT_AND [(ARG2 + 16)] 1
(ARG2 + 16) CAST (ARG2 + 16)
 RETURN 0
 CBRANCH (([(ARG2 + 16)] & 1) INT_EQUAL 1)
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
0 INT_EQUAL ([(ARG2 + 16)] & 1) 1
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
 CALL func f(ARG1) f(ARG2)
 BRANCH VZERO
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
 STORE 433 (f(ARG1) + 8) 0
(f(ARG1) + 8) PTRADD f(ARG1) 2 4
 STORE 433 f(ARG1) f()
(f(ARG1) + 8) CAST (f(ARG1) + 8)
f(ARG1) CALL func 8 f(ARG1)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
f(ARG1) CALL func 16 f(ARG1)
f(ARG1) CAST f(ARG1)
 STORE 433 (ARG1 + 16) ([(ARG1 + 16)] & 254)
([(ARG1 + 16)] | 1) INT_OR [(ARG1 + 16)] 1
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 16)] & 254) INT_AND [(ARG1 + 16)] 254
(ARG1 + 16) CAST (ARG1 + 16)
f(ARG2) CALL func f(ARG2)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_NOTEQUAL f(ARG1) 0
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG1 + 16) ([(ARG1 + 16)] | 1)
0 INT_NOTEQUAL f(ARG1) 0
(ARG1 + 16) CAST (ARG1 + 16)
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1 f(ARG2) f(ARG2)
f(ARG2) CALL func ARG2
 RETURN 0
 CALL func (RSP + -40) A_Stack[-0x3c]:4 ARG2 ARG3 ARG4 ARG5 ARG6 ARG7
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CALL func ARG1 f() 0 f()
ARG1 COPY ARG1
f() CALL func ARG2 (RSP + -60) (RSP + -60)
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
f() CALL func
0 COPY 0
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(RSP + -60) PTRSUB RSP -60
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_EQUAL 0)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -40)
 CALL libcall_close_thunk A_Stack[-0x3c]:4
 BRANCH VZERO
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 ARG2 ARG3 ARG3 0 ARG4 ARG5
ARG1 COPY ARG1
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
40 CAST 40
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 CALL libcall_operator.delete_thunk ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
0 INT_NOTEQUAL ARG2 0
 RETURN 0
 CBRANCH (ARG2 INT_NOTEQUAL 0)
 CALL func ARG1
 RETURN 0
[ARG1] LOAD 433 ARG1
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 8) [ARG1]
 CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
 RETURN 0
(([(ARG1 + 16)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 3
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1
f(ARG1) CALL func ARG1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
 RETURN 0
(ARG1 + 24) INT_ADD ARG1 24
 CALL func ARG1 (ARG1 + 24) ARG2 (ARG1 + 24)
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
ARG2 INT_ZEXT ARG2
 CALL func ARG1 (ARG2 * 16) (ARG2 * 16)
(ARG2 * 16) INT_LEFT ARG2 4
 RETURN 0
 CALL func ARG1 0
 RETURN 0
 RETURN 0
(ARG1 + 24) INT_ADD ARG1 24
 CALL func ARG1 (ARG1 + 24) ARG2 (ARG1 + 24)
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 (ARG2 * 8) (ARG2 * 8)
ARG2 INT_ZEXT ARG2
(ARG2 * 8) INT_MULT ARG2 8
 RETURN 0
 CALL func ARG1 4
 RETURN 0
 CALL func ARG1
(ARG1 + 120) PTRADD ARG1 15 8
 STORE 433 ARG1 0
(ARG1 + 72) PTRADD ARG1 9 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
 CALL func (ARG1 + 16)
 CALL func (ARG1 + 72)
 RETURN 0
 STORE 433 (ARG1 + 8) 0
 STORE 433 (ARG1 + 120) 0
[ARG1] LOAD 433 ARG1
(ARG2 * 8) INT_MULT ARG2 8
 RETURN 0 ([ARG1] + (ARG2 * 8))
([ARG1] + (ARG2 * 8)) INT_ADD [ARG1] (ARG2 * 8)
0 INT_SLESS f() ARG2
ARG2 INT_SEXT ARG2
f() CALL func ARG1 ARG2 f() f() f() (RSP + -1688)
0 INT_SLESS f() ARG2
ARG2 INT_SEXT ARG2
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
f(ARG3) CALL func ARG3 35
f(ARG3) CALL func ARG3 f() f() f()
f() CALL func ARG3 4685254
 CALL func ARG3 f() f() f()
 CALL func ARG3 4685207
f(ARG3) CALL func ARG3 35
(A_Stack[-0x640]:8 # A_Stack[-0x648]:8) PIECE A_Stack[-0x640]:8 A_Stack[-0x648]:8
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(f() / 2147483647) SUBPIECE f() 0
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -1256) PTRSUB RSP -1256
(f() / 2147483647) SUBPIECE f() 8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() COPY f()
 CALL func (RSP + -1256)
 CALL func (RSP + -1416) VZERO VZERO
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1256) PTRSUB RSP -1256
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1256) PTRSUB RSP -1256
f() CALL func (RSP + -1256)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1448) PTRSUB RSP -1448
llvm-symbolizer COPY llvm-symbolizer
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CALL func (RSP + -1448) llvm-symbolizer
 CALL func (RSP + -1256) A_Stack[-0x5a8]:8 A_Stack[-0x5a0]:8 A_Stack[-0x588]:8 A_Stack[-0x580]:8
(RSP + -1416) PTRSUB RSP -1416
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(A_Stack[-0x610]:8 # A_Stack[-0x618]:8) PIECE A_Stack[-0x610]:8 A_Stack[-0x618]:8
(A_Stack[-0x630]:8 # A_Stack[-0x638]:8) PIECE A_Stack[-0x630]:8 A_Stack[-0x638]:8
 CBRANCH ([(f() + 8)] INT_LESS f())
[f()] COPY [f()]
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
f() COPY f()
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
f() COPY f()
 CBRANCH ([f()] INT_EQUAL 0)
(f() / 2147483647) SUBPIECE f() 0
f() INT_SEXT f()
 CBRANCH (f() INT_EQUAL f())
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f(ARG3) f()
(f() + 1) INT_ADD f() 1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
0 INT_EQUAL f() f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f() (RSP + -1416) f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1416) PTRSUB RSP -1416
 CBRANCH (f() INT_SLESS ARG2)
(f() / 2147483647) SUBPIECE f() 8
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
f() COPY f()
(f() * 8) INT_MULT f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() + 1) INT_ADD f() 1
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
f() CALL func f() 32
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
 CALL func f() 10
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -1416) [(ARG1 + (f() * 8))] [(ARG1 + (f() * 8))]
(f() / 2147483647) SUBPIECE f() 0
f() COPY f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1416) PTRSUB RSP -1416
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1416) PTRSUB RSP -1416
 CBRANCH (f() INT_EQUAL 1)
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -1096)
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() 1
(RSP + -1320) PTRSUB RSP -1320
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -1320)
(RSP + -1416) PTRSUB RSP -1416
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -1320)
(RSP + -1320) PTRSUB RSP -1320
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1320) PTRSUB RSP -1320
 CALL func (RSP + -1416) f() f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() # f()) PIECE f() f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1096) PTRSUB RSP -1096
 CALL func (RSP + -1320) (RSP + -1416) -1 1 0
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() # f()) PIECE f() f()
(f() # f()) PIECE f() f()
(f() / 2147483647) SUBPIECE f() 8
(f() # f()) PIECE f() f()
0 COPY 0
(RSP + -1288) PTRSUB RSP -1288
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1288) PTRSUB RSP -1288
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CALL func (RSP + -1288) 0 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(RSP + -1256) PTRSUB RSP -1256
 CBRANCH f()
f() CALL libcall_empty_thunk
f() CALL func (RSP + -1256)
 CALL libcall_~basic_string_thunk (RSP + -1288)
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH ([(f() + 8)] INT_EQUAL 0)
0 INT_EQUAL [(f() + 8)] 0
[f()] LOAD 433 f()
(f() + 16) PTRADD f() 2 8
(f() + 8) PTRADD f() 1 8
(f() + 16) COPY (f() + 16)
0 COPY 0
[(f() + 8)] LOAD 433 (f() + 8)
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -1416) 4685207
(RSP + -1416) PTRSUB RSP -1416
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -568) PTRSUB RSP -568
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -568) PTRSUB RSP -568
f() CALL func (RSP + -1320)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -568) PTRSUB RSP -568
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -1560) (RSP + -568) f() f() 4294967295 1
 CALL func (RSP + -568)
(RSP + -1320) PTRSUB RSP -1320
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f()
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1560) PTRSUB RSP -1560
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -568)
(f() / 2147483647) SUBPIECE f() 8
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
4685207 PTRSUB 0 4685207
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_SLESS ARG2)
f() CALL func (RSP + -1480) f() f()
[f()] LOAD 433 f()
f() CAST f()
(RSP + -1480) PTRSUB RSP -1480
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() INT_SEXT f()
0 INT_NOTEQUAL [f()] 0
 CBRANCH ([f()] INT_NOTEQUAL 0)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
f() CALL libcall_memcmp_thunk [f()] f() f()
(f() / 2147483647) SUBPIECE f() 8
f() CAST f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
0 COPY 0
 CBRANCH (f() INT_EQUAL f())
[f()] LOAD 433 f()
0 INT_LESS [(f() + 8)] f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
[(f() + 8)] LOAD 433 (f() + 8)
(f() + 8) PTRADD f() 1 8
 CBRANCH 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -1416) 4685251
(f() + 16) COPY (f() + 16)
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() + 16) PTRADD f() 2 8
(f() / 2147483647) SUBPIECE f() 0
0 CAST 0
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
4685207 PTRSUB 0 4685207
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
4685251 PTRSUB 0 4685251
0 COPY 0
(RSP + -1416) PTRSUB RSP -1416
(f() / 2147483647) SUBPIECE f() 8
0 INT_XOR f() 1
(f() / 2147483647) SUBPIECE f() 8
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
llvm-symbolizer CAST llvm-symbolizer
llvm-symbolizer COPY llvm-symbolizer
(RSP + -1288) CAST (RSP + -1288)
1 COPY 1
(RSP + -1288) PTRSUB RSP -1288
 CBRANCH (f() INT_NOTEQUAL -1)
0 INT_NOTEQUAL f() -1
f() CALL libcall_find_thunk (RSP + -1288) llvm-symbolizer
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
[f()] LOAD 433 f()
f() CALL func (RSP + -1480) f() f()
(f() / 2147483647) SUBPIECE f() 8
f() CAST f()
(f() / 2147483647) SUBPIECE f() 0
f() INT_SEXT f()
0 INT_EQUAL [f()] 0
(f() / 2147483647) SUBPIECE f() 8
1 COPY 1
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1480) PTRSUB RSP -1480
 BRANCH VZERO
1 COPY 1
 CBRANCH ([(f() + 8)] INT_LESS f())
f() COPY f()
[f()] COPY [f()]
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
f() COPY f()
 CBRANCH (f() INT_EQUAL 0)
(f() / 2147483647) SUBPIECE f() 0
 RETURN 0 f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() COPY f()
f() COPY f()
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL libcall___stack_chk_fail_thunk
0 COPY 0
 CBRANCH (f() INT_EQUAL 1)
(RSP + -1416) PTRSUB RSP -1416
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CAST f()
f() CALL func (RSP + -1160)
4685169 PTRSUB 0 4685169
(RSP + -1160) PTRSUB RSP -1160
(RSP + -1208) PTRSUB RSP -1208
(RSP + -1416) PTRSUB RSP -1416
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1352) PTRSUB RSP -1352
f() COPY f()
(RSP + -1416) PTRSUB RSP -1416
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -1416)
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -1416) symbolizer-input
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) INT_RIGHT f() 64
4324009 COPY 4324009
f() CALL func (RSP + -1096)
(RSP + -1096) PTRSUB RSP -1096
(f() / 2147483647) SUBPIECE f() 0
f() CAST f()
(RSP + -1496) PTRSUB RSP -1496
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL libcall_data_thunk
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -888) (RSP + -1416) 1 (RSP + -1416)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1416) PTRSUB RSP -1416
f() CALL func (RSP + -1160)
0 INT_EQUAL f() 0
 CALL func (RSP + -888)
--inlining COPY --inlining
(RSP + -1096) PTRSUB RSP -1096
 CALL func (RSP + -1096)
(RSP + -1496) PTRSUB RSP -1496
(f() / 2147483647) SUBPIECE f() 0
(RSP + -728) PTRSUB RSP -728
 CALL func (RSP + -1160)
(RSP + -1708) PTRSUB RSP -1708
 CALL func (RSP + -1416) f() f()
(RSP + -1416) PTRSUB RSP -1416
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1160) PTRSUB RSP -1160
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
symbolizer-output COPY symbolizer-output
 CALL func (RSP + -1096)
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -1496) 4685169
(RSP + -1416) PTRSUB RSP -1416
--demangle COPY --demangle
(RSP + -1416) PTRSUB RSP -1416
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1608) CAST (RSP + -1608)
(RSP + -1160) PTRSUB RSP -1160
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -1416) symbolizer-output
symbolizer-input COPY symbolizer-input
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
0 COPY 0
--functions=linkage COPY --functions=linkage
 CALL func (RSP + -728)
 CALL func (RSP + -1416) f() f() (RSP + -1096)
(RSP + -888) PTRSUB RSP -888
(RSP + -1096) PTRSUB RSP -1096
 CALL func (RSP + -1160)
(f() / 2147483647) SUBPIECE f() 8
4685169 PTRSUB 0 4685169
(RSP + -1416) PTRSUB RSP -1416
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f() f() (RSP + -1208) 0 (RSP + -1352) 0 0 0 0 4324009
llvm-symbolizer COPY llvm-symbolizer
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1160) PTRSUB RSP -1160
0 COPY 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -1416) f() 1 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1096) PTRSUB RSP -1096
(RSP + -888) PTRSUB RSP -888
 CALL func (RSP + -1416) f() f()
(RSP + -1576) PTRSUB RSP -1576
(RSP + -1416) PTRSUB RSP -1416
(RSP + -728) PTRSUB RSP -728
f() CALL func (RSP + -1416) f() f() (RSP + -1708) (RSP + -1160)
f() CALL libcall_length_thunk
(f() # f()) PIECE f() f()
f() CALL func (RSP + -1096)
(RSP + -1576) PTRSUB RSP -1576
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -728) (RSP + -1416) 1 (RSP + -1416)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1160) PTRSUB RSP -1160
(RSP + -1416) PTRSUB RSP -1416
(RSP + -1592) PTRSUB RSP -1592
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -1496) 4685169 (f() / 4611686014132420609) (f() / 2147483647)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -1576)
(RSP + -1096) PTRSUB RSP -1096
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1608) PTRSUB RSP -1608
4685207 PTRSUB 0 4685207
(RSP + -1416) PTRSUB RSP -1416
f() INT_SEXT f()
[f()] LOAD 433 f()
f() CALL func f() [f()]
f() CAST f()
f() CALL func (RSP + -1480) f() f()
f() CAST f()
f() CALL func (RSP + -1416) [f()] [f()]
 CALL func f() 4685207
f() INT_SEXT f()
[f()] LOAD 433 f()
f() CALL func f() 4685205
f() CALL func (RSP + -1448) f() f()
(RSP + -1480) PTRSUB RSP -1480
(RSP + -1448) PTRSUB RSP -1448
4685205 PTRSUB 0 4685205
0 COPY 0
 CALL func (RSP + -1448)
(RSP + -1448) PTRSUB RSP -1448
(RSP + -1480) PTRSUB RSP -1480
f() CALL func (RSP + -1448)
0 COPY 0
(RSP + -1448) PTRSUB RSP -1448
(RSP + -1416) PTRSUB RSP -1416
 CALL func (RSP + -1496)
 CALL func (RSP + -1688) (RSP + -1032) (RSP + -1032)
(RSP + -1496) PTRSUB RSP -1496
(RSP + -1448) PTRSUB RSP -1448
0 INT_EQUAL f() 1
0 COPY 0
(f() # f()) PIECE f() f()
(f() / 2147483647) SUBPIECE f() 0
(f() # f()) PIECE f() f()
(f() # f()) PIECE f() f()
(RSP + -1416) PTRSUB RSP -1416
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1448) PTRSUB RSP -1448
f() CALL func (RSP + -1480)
(RSP + -1496) PTRSUB RSP -1496
(RSP + -1032) PTRSUB RSP -1032
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1480) PTRSUB RSP -1480
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -1480)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1448) PTRSUB RSP -1448
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -1448) ARG2 (RSP + -1416) (RSP + -1496)
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(RSP + -1448) PTRSUB RSP -1448
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -1448)
(RSP + -1480) PTRSUB RSP -1480
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1688) PTRSUB RSP -1688
(f() / 2147483647) SUBPIECE f() 0
f() CALL libcall_c_str_thunk
 CALL func (RSP + -1448)
(RSP + -1032) PTRSUB RSP -1032
 CALL func (RSP + -1032)
(RSP + -1688) PTRSUB RSP -1688
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -1032)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -1496)
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -1480) ARG2 (RSP + -1416) (RSP + -1448)
(RSP + -1032) PTRSUB RSP -1032
(RSP + -1496) PTRSUB RSP -1496
(f() / 2147483647) SUBPIECE f() 0
f() CALL libcall_memcmp_thunk [f()] f() f()
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
f() CAST f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
0 CAST 0
0 INT_XOR f() 1
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func f(ARG3) 32
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1480) PTRSUB RSP -1480
(f() / 2147483647) SUBPIECE f() 8
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
f() CAST f()
f() CALL func (RSP + -1448) f() f()
(f() / 2147483647) SUBPIECE f() 0
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f() CAST f()
f() CALL func (RSP + -1480) f() f()
(f() * 8) INT_MULT f() 8
f() INT_SEXT f()
[f()] LOAD 433 f()
f() INT_SEXT f()
(RSP + -1448) PTRSUB RSP -1448
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
4685256 PTRSUB 0 4685256
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -1416) PTRSUB RSP -1416
(f() / 2147483647) SUBPIECE f() 0
4685254 PTRSUB 0 4685254
(f() / 2147483647) SUBPIECE f() 8
f() INT_SEXT f()
[f()] LOAD 433 f()
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f() [f()]
f() CALL func f() 32
f() CALL func f(ARG3) f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() COPY f()
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -1416) [(ARG1 + (f() * 8))] [(ARG1 + (f() * 8))]
(RSP + -1416) PTRSUB RSP -1416
(RSP + -1416) PTRSUB RSP -1416
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -1416) [f()] 0 0
(f() / 2147483647) SUBPIECE f() 8
f() COPY f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f() (RSP + -1416) f()
(RSP + -1416) PTRSUB RSP -1416
f() CALL func f() 43
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -1416) 4685251
4685251 PTRSUB 0 4685251
(RSP + -1416) PTRSUB RSP -1416
(f() / 2147483647) SUBPIECE f() 8
 CALL func f() 4685256
f() CALL func f() (RSP + -1416) f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func f() 32
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
0 INT_LESS [(f() + 8)] f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
ARG1 COPY ARG1
(RSP + -24) PTRSUB RSP -24
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(RSP + -24) PTRSUB RSP -24
6960944 PTRSUB 0 6960944
 CALL func
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
f() CALL func 6960944
 CALL func (RSP + -24)
 CALL func (RSP + -24) f() f()
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
ARG1 COPY ARG1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 CALL func ARG1 4335768 4335722 4335768
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 RETURN 0 [ARG1]
0 INT_EQUAL [ARG1] 0
[ARG1] COPY [ARG1]
f() CALL func
4335722 PTRSUB 0 4335722
4335768 PTRSUB 0 4335768
4335768 PTRSUB 0 4335768
 CALL func
576460752303423487 COPY 576460752303423487
 RETURN 0 576460752303423487
f() CALL func ARG1
0 INT_LESS f() ARG2
(ARG2 * 32) INT_LEFT ARG2 5
 CBRANCH (f() INT_LESS ARG2)
 CALL libcall_operator.new_thunk (ARG2 * 32)
 RETURN 0
 CALL libcall___throw_bad_alloc_thunk
 CALL func ARG1 ARG2 0 ARG2
 RETURN 0
f() CALL func ARG1 ARG2 ARG2
0 INT_EQUAL ARG2 0
 CBRANCH (ARG2 INT_EQUAL 0)
 RETURN 0 f()
 BRANCH VZERO
0 COPY 0
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
(RSP + -24) PTRSUB RSP -24
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
f() CALL func ARG1
f() CALL func ARG2
 RETURN 0 (f() & -256)
0 INT_EQUAL f() f()
0 INT_ZEXT 0
(f() & -256) INT_OR (f() & -256) 0
(f() & -256) INT_AND f() -256
f() CALL func ARG1 ARG2 ARG2
0 INT_XOR f() 1
 RETURN 0 0
0 COPY 0
[ARG1] LOAD 433 ARG1
ARG1 COPY ARG1
 STORE 433 ARG1 ([ARG1] + 32)
 RETURN 0 ARG1
([ARG1] + 32) INT_ADD [ARG1] 32
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
f(ARG1) CALL func 32 ARG1
 CALL func ARG2
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG1) 0
 RETURN 0
f(ARG1) CAST f(ARG1)
 CALL libcall_basic_string_thunk f(ARG1)
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
 RETURN 0 f(ARG3)
f(ARG3) COPY f(ARG3)
(RSP + -48) PTRSUB RSP -48
f() CALL func (RSP + -48) (RSP + -56) (RSP + -56)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(RSP + -56) PTRSUB RSP -56
 CALL func f(ARG3) f()
(RSP + -48) PTRSUB RSP -48
f() CALL func (RSP + -48)
f(ARG3) CALL func f(ARG3)
 CALL func (RSP + -48)
 BRANCH VZERO
(f(ARG3) + 32) INT_ADD f(ARG3) 32
(RSP + -48) PTRSUB RSP -48
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG4
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 ARG4
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
 RETURN 0
 CALL func f(ARG1)
f() CALL func ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
 CALL libcall___throw_length_error_thunk ARG3
0 INT_EQUAL f() [(f() + 40)]
([f(RSP)] + f()) INT_ADD [f(RSP)] f()
0 INT_LESS (f() - f()) ARG2
0 INT_LESS ([f(RSP)] + f()) f()
[(f() + 40)] LOAD 433 (f() + 40)
f() CALL func f(ARG1)
(f() - f()) INT_SUB f() f()
f(RSP) CALL func (RSP + -48) (RSP + -72) (RSP + -72)
 CBRANCH (([f(RSP)] + f()) INT_LESS f())
[f(RSP)] LOAD 433 f(RSP)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
f(RSP) CAST f(RSP)
(f() - f()) CAST (f() - f())
f() CALL func f(ARG1)
f() CALL func ARG1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(RSP + -48) PTRSUB RSP -48
 CBRANCH ((f() - f()) INT_LESS ARG2)
(RSP + -72) PTRSUB RSP -72
(f() + 40) INT_ADD f() 40
f() CALL func f(ARG1)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(RSP)
 RETURN 1
 CBRANCH (f() INT_LESS ([f(RSP)] + f()))
f() CALL func f(ARG1)
0 INT_LESS f() ([f(RSP)] + f())
([f(RSP)] + f()) COPY ([f(RSP)] + f())
 BRANCH VZERO
f() CALL func f(ARG1)
f() COPY f()
f(ARG2) CALL func 32 ARG2
 CALL func ARG3
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG2) 0
f(ARG2) CAST f(ARG2)
 RETURN 0
 CALL libcall_basic_string_thunk f(ARG2)
 CALL func ARG1 ARG2 f(ARG3) ARG2
f(ARG3) CALL func ARG3
 RETURN 0
f(ARG1) CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 f()
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
f() CALL func ARG1 f(RSP) f(RSP)
[ARG1] LOAD 433 ARG1
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 32) [ARG1]
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
f(RSP) CALL func ARG1 1 0
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 ((f() * 32) + f()) f(ARG2) ((f() * 32) + f())
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
(([(ARG1 + 16)] - [ARG1]) / 32) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 5
(f(RSP) * 32) INT_MULT f(RSP) 32
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
((f() * 32) + f()) INT_ADD (f() * 32) f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() + 32) INT_ADD f() 32
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
((f(RSP) * 32) + f()) INT_ADD (f(RSP) * 32) f()
 STORE 433 (ARG1 + 16) ((f(RSP) * 32) + f())
f() CALL func [ARG1] [(ARG1 + 8)] f() f(ARG1)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() * 32) INT_MULT f() 32
 STORE 433 (ARG1 + 8) (f() + 32)
 RETURN 0
0 COPY 0
 CALL func ARG1 f(ARG2) f(ARG2)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1 [(ARG1 + 8)] f(ARG2) [(ARG1 + 8)]
f(ARG2) CALL func ARG2
f(ARG2) CALL func ARG2
 CBRANCH ([(ARG1 + 8)] INT_EQUAL [(ARG1 + 16)])
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 0
0 INT_EQUAL [(ARG1 + 8)] [(ARG1 + 16)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + 32) INT_ADD [(ARG1 + 8)] 32
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 32)
 CALL func ARG1 f(ARG2) f(ARG2)
f(ARG2) CALL func ARG2
 RETURN 0
ARG1 COPY ARG1
ARG2 COPY ARG2
 CALL func (RSP + -80)
f() CALL func 6960976
f() CALL func 6960944
(RSP + -72) PTRSUB RSP -72
6960944 PTRSUB 0 6960944
40 CAST 40
 CALL func (RSP + -72) (RSP + -104) (RSP + -104)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
6960976 PTRSUB 0 6960976
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL libcall_~basic_string_thunk (RSP + -72)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func f() (RSP + -72) f()
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -104) PTRSUB RSP -104
[40] LOAD 433 40
(RSP + -80) PTRSUB RSP -80
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -80) f() f()
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -72) PTRSUB RSP -72
0 COPY 0
 CALL func
(RSP + -80) PTRSUB RSP -80
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 0
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
[f(ARG2)] LOAD 433 f(ARG2)
([f(ARG1)] - [f(ARG2)]) INT_SUB [f(ARG1)] [f(ARG2)]
f(ARG2) CAST f(ARG2)
 RETURN 0 (([f(ARG1)] - [f(ARG2)]) / 32)
f(ARG1) CAST f(ARG1)
(([f(ARG1)] - [f(ARG2)]) / 32) INT_SRIGHT ([f(ARG1)] - [f(ARG2)]) 5
[f(ARG1)] LOAD 433 f(ARG1)
f() CALL func ARG1
f() CALL func ARG2
[40] LOAD 433 40
 CALL func (RSP + -32) (RSP + -24) (RSP + -24)
(RSP + -32) PTRSUB RSP -32
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -24) PTRSUB RSP -24
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 STORE 433 ARG1 [ARG2]
 CALL func ARG1
[ARG2] LOAD 433 ARG2
 RETURN 0
ARG1 COPY ARG1
 STORE 433 ARG1 ([ARG1] + -32)
[ARG1] LOAD 433 ARG1
 RETURN 0 ARG1
([ARG1] + -32) INT_ADD [ARG1] -32
 CALL func ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
[ARG1] LOAD 433 ARG1
(RSP + -24) PTRSUB RSP -24
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f(RSP) CALL func (RSP + -24)
40 CAST 40
 CALL func f(RSP)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
[ARG1] LOAD 433 ARG1
 CALL func ARG2
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[([ARG1] + 8)] LOAD 433 ([ARG1] + 8)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
f() CALL libcall_data_thunk
[[ARG1]] LOAD 433 [ARG1]
f() CAST f()
f() CALL libcall_length_thunk
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) CAST (f() + 40)
0 INT_EQUAL f() [([ARG1] + 8)]
 CBRANCH (f() INT_EQUAL [([ARG1] + 8)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
([ARG1] + 8) PTRADD [ARG1] 1 8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
f() CAST f()
[ARG1] CAST [ARG1]
 CBRANCH ([([ARG1] + 8)] INT_EQUAL 0)
[([ARG1] + 8)] CAST [([ARG1] + 8)]
0 COPY 0
f() CALL libcall_memcmp_thunk f() [[ARG1]] [([ARG1] + 8)]
 BRANCH VZERO
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
0 INT_EQUAL [([ARG1] + 8)] 0
1 COPY 1
 BRANCH VZERO
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 RETURN 1
ARG1 COPY ARG1
f() CALL func ARG3 ARG2 ARG2
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_SLESS 0 f()
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_SLESS f())
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(f() / 4) INT_SRIGHT f() 2
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f(ARG1) COPY f(ARG1)
0 INT_EQUAL f() [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
 CALL func (RSP + -32) f(ARG2) f(ARG2)
f() CALL func (RSP + -72) (RSP + -32) (RSP + -32)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 CALL func f(ARG1) f(ARG2) f(ARG2)
(RSP + -72) PTRSUB RSP -72
(RSP + -32) PTRSUB RSP -32
(RSP + -32) PTRSUB RSP -32
 CALL func f(ARG2)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CALL func f(ARG1) f(ARG2) f(ARG2)
 BRANCH VZERO
f() CALL func (RSP + -72) (RSP + -32) (RSP + -32)
(RSP + -72) PTRSUB RSP -72
 CALL func f(ARG2)
(RSP + -32) PTRSUB RSP -32
(RSP + -32) PTRSUB RSP -32
 CALL func (RSP + -32) f(ARG2) f(ARG2)
 RETURN 1
 RETURN 0 f(ARG1)
 CALL libcall___stack_chk_fail_thunk
 CALL func f(ARG1) f(ARG3) f(ARG3)
 BRANCH VZERO
 CALL func f(ARG2)
 CALL func f(ARG1) f(ARG2) f(ARG2)
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -72) PTRSUB RSP -72
 CALL func f(ARG2)
 CALL func f(ARG1) f(ARG2) f(ARG2)
 CALL func (RSP + -32) f(ARG2) f(ARG2)
 BRANCH VZERO
f() CALL func (RSP + -72) (RSP + -32) (RSP + -32)
(RSP + -32) PTRSUB RSP -32
(RSP + -32) PTRSUB RSP -32
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -72) PTRSUB RSP -72
(RSP + -32) PTRSUB RSP -32
(RSP + -32) PTRSUB RSP -32
 CALL func f(ARG2)
 BRANCH VZERO
 CALL func (RSP + -32) f(ARG2) f(ARG2)
 CALL func f(ARG1) f(ARG2) f(ARG2)
f() CALL func (RSP + -72) (RSP + -32) (RSP + -32)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -72) PTRSUB RSP -72
 CALL func f(ARG2)
 CALL func (RSP + -32) f(ARG2) f(ARG2)
(RSP + -32) PTRSUB RSP -32
(RSP + -32) PTRSUB RSP -32
f() CALL func (RSP + -72) (RSP + -32) (RSP + -32)
0 INT_NOTEQUAL f() 0
 BRANCH VZERO
 CALL func f(ARG1) f(ARG2) f(ARG2)
f() CALL func (RSP + -72) (RSP + -32) (RSP + -32)
0 INT_NOTEQUAL f() 0
(RSP + -72) PTRSUB RSP -72
(RSP + -32) PTRSUB RSP -32
(RSP + -32) PTRSUB RSP -32
0 INT_EQUAL f() 2
 CALL func (RSP + -32) f(ARG2) f(ARG2)
 CBRANCH (f() INT_EQUAL 2)
f() CALL func f(ARG3) f(ARG2) f(ARG2)
 CBRANCH (f() INT_EQUAL 1)
 CBRANCH (f() INT_EQUAL 3)
0 INT_NOTEQUAL f() 0
 CALL func (RSP + -32) f(ARG2) f(ARG2)
(RSP + -72) PTRSUB RSP -72
f() CALL func (RSP + -72) (RSP + -32) (RSP + -32)
0 INT_EQUAL f() 1
(RSP + -32) PTRSUB RSP -32
(RSP + -32) PTRSUB RSP -32
0 INT_EQUAL f() 3
 CALL func f(ARG1) f(ARG2) f(ARG2)
 CALL func f(ARG2)
 BRANCH VZERO
(f() + -1) INT_ADD f() -1
 BRANCH VZERO
 RETURN 0
 CALL func ARG1 (RSP + -48) (RSP + -40) ARG4
ARG1 COPY ARG1
 CALL func ARG2
 CALL func (RSP + -48) ARG2 ARG2
 CALL func (RSP + -40) ARG3 ARG3
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(RSP + -40) PTRSUB RSP -40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(RSP + -48) PTRSUB RSP -48
40 CAST 40
(RSP + -48) PTRSUB RSP -48
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -40) PTRSUB RSP -40
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
(RSP + -24) PTRSUB RSP -24
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 CALL func (RSP + -40) ARG3 ARG3
f() CALL func ARG4
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -48) (RSP + -40) f()
 CALL func (RSP + -48) ARG2 ARG2
[40] LOAD 433 40
(RSP + -48) PTRSUB RSP -48
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -48) PTRSUB RSP -48
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -40) PTRSUB RSP -40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -40) PTRSUB RSP -40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 STORE 433 ARG1 [f(ARG2)]
f(ARG2) CALL func ARG2
[f(ARG2)] LOAD 433 f(ARG2)
 RETURN 0
f(ARG2) CAST f(ARG2)
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
[ARG1] LOAD 433 ARG1
(ARG2 * -32) INT_MULT ARG2 -32
(RSP + -32) PTRSUB RSP -32
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
([ARG1] + (ARG2 * -32)) INT_ADD [ARG1] (ARG2 * -32)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (RSP + -24) (RSP + -32) (RSP + -32)
40 INT_ADD 0 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -24) PTRSUB RSP -24
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
 RETURN 1
 CALL func ARG1
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
(RSP + -24) PTRSUB RSP -24
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
 CALL func ARG1 f() f()
f() CALL func ARG2
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
([f(ARG2)] & -256) INT_AND [f(ARG2)] -256
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG2) CAST f(ARG2)
f(ARG1) CAST f(ARG1)
[f(ARG1)] LOAD 433 f(ARG1)
0 INT_EQUAL [f(ARG1)] [f(ARG2)]
 RETURN 0 ([f(ARG2)] & -256)
0 INT_ZEXT 0
([f(ARG2)] & -256) INT_OR ([f(ARG2)] & -256) 0
f() CALL func ARG1
f() CALL func ARG2
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -32) PTRSUB RSP -32
 CALL func (RSP + -32) (RSP + -24) (RSP + -24)
(RSP + -24) PTRSUB RSP -24
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
f() CALL func ARG1 ARG2 ARG2
0 INT_XOR f() 1
 RETURN 0 0
0 COPY 0
ARG1 COPY ARG1
(RSP + -16) PTRSUB RSP -16
[f(RSP)] LOAD 433 f(RSP)
[f(RSP)] COPY [f(RSP)]
f(RSP) CALL func (RSP + -16)
f(RSP) CAST f(RSP)
 RETURN 0 [f(RSP)]
 CALL func ARG1
 RETURN 0
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG1 COPY ARG1
ARG3 COPY ARG3
f(ARG3) COPY f(ARG3)
 CBRANCH (0 INT_SLESS f(ARG1 , ARG2))
((ARG2 - ARG1) / 32) INT_SRIGHT (ARG2 - ARG1) 5
0 INT_SLESS 0 f(ARG1 , ARG2)
 RETURN 0 f(ARG3)
 BRANCH VZERO
f(ARG1) CALL func f(ARG1)
f(ARG1) CAST f(ARG1)
(f(ARG1) + 32) INT_ADD f(ARG1) 32
(f(ARG1 , ARG2) + -1) INT_ADD f(ARG1 , ARG2) -1
 CALL libcall_operator=_thunk f(ARG3) f(ARG1)
(f(ARG3) + 32) PTRADD f(ARG3) 32 1
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
A_Stack[-0x28]:8 COPY A_Stack[-0x28]:8
f() CALL func f() f() f()
40 INT_ADD 0 40
 CALL func (RSP + -40) (RSP + -48) (RSP + -48)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -40) PTRSUB RSP -40
[40] LOAD 433 40
(RSP + -48) PTRSUB RSP -48
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 RETURN 0 A_Stack[-0x28]:8
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
0 INT_ZEXT 0
[f(ARG1)] LOAD 433 f(ARG1)
f(ARG2) CAST f(ARG2)
f(ARG1) CAST f(ARG1)
 RETURN 0 ([f(ARG2)] & -256)
0 INT_NOTEQUAL [f(ARG1)] [f(ARG2)]
([f(ARG2)] & -256) INT_OR ([f(ARG2)] & -256) 0
([f(ARG2)] & -256) INT_AND [f(ARG2)] -256
[f(ARG2)] LOAD 433 f(ARG2)
(ARG2 * 32) INT_MULT ARG2 32
[ARG1] LOAD 433 ARG1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(RSP + -24) PTRSUB RSP -24
(RSP + -32) PTRSUB RSP -32
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
40 CAST 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
([ARG1] + (ARG2 * 32)) INT_ADD [ARG1] (ARG2 * 32)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CALL func (RSP + -24) (RSP + -32) (RSP + -32)
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 CALL libcall_~basic_string_thunk ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 CALL func (RSP + -24) (ARG1 + 8) (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -24) PTRSUB RSP -24
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
f() CALL func ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
(f(ARG1) + 8) CAST (f(ARG1) + 8)
 CALL func f(ARG1) [(f(ARG1) + 8)] [(f(ARG1) + 8)]
f(ARG2) COPY f(ARG2)
[(f(ARG1) + 8)] LOAD 433 (f(ARG1) + 8)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) CAST (f() + 40)
(RSP + -48) PTRSUB RSP -48
f() CALL func (RSP + -72) 1
(f(ARG1) + 8) INT_ADD f(ARG1) 8
(RSP + -40) PTRSUB RSP -40
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f(ARG1) + 8)] LOAD 433 (f(ARG1) + 8)
(f(ARG1) + 8) INT_ADD f(ARG1) 8
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(RSP + -72) PTRSUB RSP -72
(f(ARG1) + 8) CAST (f(ARG1) + 8)
f() CALL func (RSP + -48) (RSP + -40) (RSP + -40)
 STORE 433 (f(ARG1) + 8) ([(f(ARG1) + 8)] + -32)
([(f(ARG1) + 8)] + -32) INT_ADD [(f(ARG1) + 8)] -32
(f(ARG1) + 8) CAST (f(ARG1) + 8)
[(f() + 40)] LOAD 433 (f() + 40)
(f(ARG1) + 8) INT_ADD f(ARG1) 8
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(ARG2)
f() CALL func ARG1
(RSP + -72) PTRSUB RSP -72
f() CALL func (RSP + -72) 1
 CALL func f() f() ARG2 f()
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG1) CAST f(ARG1)
 RETURN 0 (([f(ARG1)] - [f(ARG2)]) / 32)
([f(ARG1)] - [f(ARG2)]) INT_SUB [f(ARG1)] [f(ARG2)]
(([f(ARG1)] - [f(ARG2)]) / 32) INT_SRIGHT ([f(ARG1)] - [f(ARG2)]) 5
[f(ARG1)] LOAD 433 f(ARG1)
f(ARG2) CAST f(ARG2)
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
[ARG1] LOAD 433 ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -24) PTRSUB RSP -24
[40] LOAD 433 40
(RSP + -32) PTRSUB RSP -32
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
 CALL func (RSP + -24) (RSP + -32) (RSP + -32)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
f() CALL func ARG1
ARG2 COPY ARG2
[40] LOAD 433 40
(RSP + -40) PTRSUB RSP -40
f() CALL func ARG1
f() CALL func (RSP + -48) f()
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func ARG1 f() f()
40 INT_ADD 0 40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -48) PTRSUB RSP -48
(RSP + -72) PTRSUB RSP -72
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL func (RSP + -72) (RSP + -40) (RSP + -40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALL func ARG1 f() f()
ARG1 COPY ARG1
f() CALL func ARG2
 RETURN 0 ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
(RSP + -32) PTRSUB RSP -32
 CALL func (RSP + -64) f() f()
f() CALL func 6960976
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -56) (RSP + -32) (RSP + -24) (RSP + -88)
6960976 PTRSUB 0 6960976
6960944 PTRSUB 0 6960944
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 CALL func (RSP + -24) f() f()
6960976 PTRSUB 0 6960976
f() CALL func 6960976
f() CALL func 6960944
(RSP + -56) PTRSUB RSP -56
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
f() CALL func (RSP + -56) (RSP + -24) (RSP + -24)
(f() + 40) INT_ADD f() 40
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
0 INT_NOTEQUAL 0 [(f() + 40)]
(RSP + -32) PTRSUB RSP -32
(RSP + -24) PTRSUB RSP -24
(RSP + -64) PTRSUB RSP -64
(RSP + -88) PTRSUB RSP -88
f() CALL func f()
 CALL func (RSP + -32) f() f()
[(f() + 40)] LOAD 433 (f() + 40)
6960976 PTRSUB 0 6960976
(RSP + -24) PTRSUB RSP -24
f() CALL func 6960976
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -24) f() f()
f() CALL func 6960976
 CALL func (RSP + -64)
(RSP + -64) PTRSUB RSP -64
6960976 PTRSUB 0 6960976
f() CALL func f() A_Stack[-0x18]:8 f()
(RSP + -40) PTRSUB RSP -40
6960976 PTRSUB 0 6960976
f() CALL func (RSP + -40) 1
(RSP + -56) PTRSUB RSP -56
(RSP + -24) PTRSUB RSP -24
f() CALL func (RSP + -56)
f() CALL func 6960976
 CALL func (RSP + -24) (RSP + -32) (RSP + -32)
(RSP + -32) PTRSUB RSP -32
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
(ARG1 + 16) PTRADD ARG1 2 8
 CALL func (ARG1 + 16) ARG3 (ARG1 + 16)
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
 RETURN 0 ARG1
 RETURN 0 256
256 COPY 256
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG3 ARG3
(ARG1 + 8) INT_ADD ARG1 8
 CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
 CALL func (ARG1 + 16) ARG3 ARG4 (ARG1 + 16)
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG3 ARG4
 RETURN 0 ARG1
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
(ARG1 + 16) PTRADD ARG1 2 8
 CALL func (ARG1 + 16) ARG3 (ARG1 + 16)
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG3 ARG3
(ARG1 + 8) INT_ADD ARG1 8
 CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
 CALL func (ARG1 + 16) ARG3 ARG4 (ARG1 + 16)
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func ARG1 ARG2 ARG3 ARG4
ARG1 COPY ARG1
 RETURN 0 ARG1
f() CALL func 6963584 f() ARG1
 CALL func ARG1 (RSP + -56) (RSP + -56)
 CALL func ARG1 (RSP + -56) (RSP + -56)
 CALL func ARG1 (RSP + -56) (RSP + -56)
 CALL func ARG1 f() f()
 CALL func ARG1 f() f()
 CALL func ARG1 10
 CALL func ARG1 (RSP + -56) (RSP + -56)
 CALL func ARG1 (RSP + -56) (RSP + -56)
 CALL func ARG1 32
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL func 6963584
6963584 PTRSUB 0 6963584
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
f() CALL libcall_backtrace_thunk 6963584 f()
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() 0
6963584 PTRSUB 0 6963584
0 INT_NOTEQUAL 0 [(f() + 40)]
6963584 PTRSUB 0 6963584
(FS_OFFSET + 40) INT_ADD 0 40
0 COPY 0
 CBRANCH (f() INT_SLESS f())
0 INT_SLESS f() f()
0 INT_SLESS f() f()
0 COPY 0
 CBRANCH (f() INT_SLESS f())
0 COPY 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
(f() * 8) INT_MULT f() 8
 BRANCH VZERO
(f() * 8) INT_MULT f() 8
[(Symbol + (f() * 8))] LOAD 433 (Symbol + (f() * 8))
(f() + 1) INT_ADD f() 1
(RSP + -56) PTRSUB RSP -56
(Symbol + (f() * 8)) PTRADD Symbol (f() * 8) 1
 CALL func (RSP + -56) 4685555 (RSP + -140)
(RSP + -56) PTRSUB RSP -56
[(Symbol + (f() * 8))] LOAD 433 (Symbol + (f() * 8))
(Symbol + (f() * 8)) PTRADD Symbol (f() * 8) 1
f() INT_SEXT f()
Symbol PTRSUB 0 Symbol
f() INT_SEXT f()
f() CALL libcall_strrchr_thunk f() 47
4685555 PTRSUB 0 4685555
18 COPY 18
(RSP + -136) PTRSUB RSP -136
(RSP + -140) PTRSUB RSP -140
(RSP + -120) PTRSUB RSP -120
(Symbol + (f() * 8)) CAST (Symbol + (f() * 8))
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
%#0*lx COPY %#0*lx
 CALL func (RSP + -56) %#0*lx (RSP + -136) (RSP + -120)
 CALL libcall_dladdr_thunk [(Symbol + (f() * 8))] (RSP + -88) (RSP + -88)
 CBRANCH (f() INT_EQUAL 0)
(RSP + -88) PTRSUB RSP -88
(Symbol + (f() * 8)) CAST (Symbol + (f() * 8))
Symbol PTRSUB 0 Symbol
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
(RSP + -144) PTRSUB RSP -144
(RSP + -120) PTRSUB RSP -120
%-*s COPY %-*s
%-*s COPY %-*s
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) %-*s (RSP + -144) (RSP + -88)
(f() + 1) PTRADD f() 1 1
 BRANCH VZERO
(RSP + -144) PTRSUB RSP -144
(RSP + -56) PTRSUB RSP -56
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -56) %-*s (RSP + -144) (RSP + -120)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_SLESS f())
f() COPY f()
 CBRANCH (f() INT_EQUAL 0)
(f() / 2147483647) SUBPIECE f() 0
f() CALL libcall_strlen_thunk f()
(f() / 2147483647) SUBPIECE f() 0
((f() / 2147483647) + 4294967295) INT_ADD (f() / 2147483647) 4294967295
 BRANCH VZERO
f() CALL libcall_strlen_thunk f()
f() INT_SEXT f()
f() CALL libcall_strrchr_thunk f() 47
0 INT_EQUAL f() 0
(f() * 8) INT_MULT f() 8
0 INT_SLESS f() f()
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(RSP + -56) PTRSUB RSP -56
[(Symbol + (f() * 8))] LOAD 433 (Symbol + (f() * 8))
Symbol PTRSUB 0 Symbol
 CALL libcall_dladdr_thunk [(Symbol + (f() * 8))] (RSP + -56) (RSP + -56)
(Symbol + (f() * 8)) PTRADD Symbol (f() * 8) 1
(Symbol + (f() * 8)) CAST (Symbol + (f() * 8))
((f(Symbol) & -4294967296) | (([(Symbol + (f() * 8))] / 2147483647) - (f() / 2147483647))) CAST ((f(Symbol) & -4294967296) | (([(Symbol + (f() * 8))] / 2147483647) - (f() / 2147483647)))
(RSP + -120) PTRSUB RSP -120
(([(Symbol + (f() * 8))] / 2147483647) - (f() / 2147483647)) CAST (([(Symbol + (f() * 8))] / 2147483647) - (f() / 2147483647))
(([(Symbol + (f() * 8))] / 2147483647) - (f() / 2147483647)) INT_SUB ([(Symbol + (f() * 8))] / 2147483647) (f() / 2147483647)
f(Symbol) CAST f(Symbol)
 CALL libcall_free_thunk f()
(RSP + -56) PTRSUB RSP -56
(RSP + -136) PTRSUB RSP -136
(f(Symbol) & -4294967296) INT_AND f(Symbol) -4294967296
+ %u COPY + %u
(Symbol + (f() * 8)) CAST (Symbol + (f() * 8))
0 INT_EQUAL f() 0
(f() * 8) INT_MULT f() 8
(([(Symbol + (f() * 8))] / 2147483647) - (f() / 2147483647)) INT_ZEXT (([(Symbol + (f() * 8))] / 2147483647) - (f() / 2147483647))
 CALL func (RSP + -56) + %u (RSP + -120)
(f() / 2147483647) SUBPIECE f() 0
((f(Symbol) & -4294967296) | (([(Symbol + (f() * 8))] / 2147483647) - (f() / 2147483647))) INT_OR (f(Symbol) & -4294967296) (([(Symbol + (f() * 8))] / 2147483647) - (f() / 2147483647))
(Symbol + (f() * 8)) PTRADD Symbol (f() * 8) 1
[(Symbol + (f() * 8))] LOAD 433 (Symbol + (f() * 8))
([(Symbol + (f() * 8))] / 2147483647) SUBPIECE [(Symbol + (f() * 8))] 0
f() INT_SEXT f()
(RSP + -56) PTRSUB RSP -56
Symbol PTRSUB 0 Symbol
f() CALL libcall___cxa_demangle_thunk f() 0 0 (RSP + -136)
f() CAST f()
f() CALL func
 CALL func f()
 RETURN 0
 RETURN 0
 RETURN 0
 CALL func 4329254 0
4329254 PTRSUB 0 4329254
VZERO COPY VZERO
 RETURN 0
 RETURN 0
 CALL func 1 65535
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG3 INT_ZEXT ARG3
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CALL libcall_snprintf_thunk ARG2 ARG3 [(ARG1 + 8)] [f()]
f() CAST f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[f()] INT_ZEXT [f()]
[f()] LOAD 433 f()
f() CALL func (ARG1 + 16)
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG5
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
40 CAST 40
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 8) INT_ADD ARG1 8
 CALL func (ARG1 + 8)
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG3 INT_ZEXT ARG3
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
 CALL libcall_snprintf_thunk ARG2 ARG3 [(ARG1 + 8)] [f()] [f()]
f() CALL func (ARG1 + 16)
f() CAST f()
(ARG1 + 8) CAST (ARG1 + 8)
[f()] LOAD 433 f()
[f()] LOAD 433 f()
f() CALL func (ARG1 + 16)
f() CAST f()
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[f()] INT_ZEXT [f()]
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG5
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
40 CAST 40
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0
 CALL func (ARG1 + 8)
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG3 INT_ZEXT ARG3
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CALL libcall_snprintf_thunk ARG2 ARG3 [(ARG1 + 8)] [f()] [f()]
f() CAST f()
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[f()] INT_ZEXT [f()]
(ARG1 + 8) CAST (ARG1 + 8)
f() CAST f()
[f()] LOAD 433 f()
f() CALL func (ARG1 + 16)
[f()] LOAD 433 f()
f() CALL func (ARG1 + 16)
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG5
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
40 CAST 40
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG3 INT_ZEXT ARG3
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CALL libcall_snprintf_thunk ARG2 ARG3 [(ARG1 + 8)] [f()]
[f()] LOAD 433 f()
f() CALL func (ARG1 + 16)
 RETURN 0
f() CAST f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[f()] INT_ZEXT [f()]
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG5
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
40 CAST 40
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
ARG2 INT_ZEXT ARG2
ARG2 COPY ARG2
0 INT_EQUAL ARG2 36
0 INT_EQUAL ARG2 16
ARG2 INT_ZEXT ARG2
ARG1 INT_SEXT ARG1
ARG1 INT_SEXT ARG1
ARG1 INT_SEXT ARG1
ARG1 INT_SEXT ARG1
 CBRANCH (ARG2 INT_EQUAL 16)
 CBRANCH (f(ARG2) INT_LESSEQUAL (ARG1 + -48))
4294967295 COPY 4294967295
 CBRANCH ((ARG1 + -48) INT_LESS 10)
(ARG1 + -48) COPY (ARG1 + -48)
(ARG1 + 87) COPY (ARG1 + 87)
 CBRANCH ((ARG1 + 65) INT_LESSEQUAL (ARG2 + 11))
 RETURN 0 f(ARG1)
0 INT_LESSEQUAL (ARG1 + 65) (ARG2 + 11)
 RETURN 0 (ARG1 + 55)
(ARG1 + 65) INT_SUB ARG1 65
 RETURN 0 (ARG1 + -48)
 RETURN 0 (ARG1 + 87)
(ARG2 + 11) INT_SUB ARG2 11
(ARG1 + 55) COPY (ARG1 + 55)
 CBRANCH (ARG2 INT_EQUAL 36)
(ARG1 + -48) INT_SUB ARG1 -48
0 INT_LESS (ARG1 + -48) 10
 CBRANCH ((ARG1 + 97) INT_LESSEQUAL (ARG2 + 11))
0 INT_LESSEQUAL f(ARG2) (ARG1 + -48)
f(ARG2) INT_ZEXT f(ARG2)
(ARG1 + 87) INT_SUB ARG1 87
(ARG1 + -48) INT_SUB ARG1 -48
10 COPY 10
(ARG2 + 11) INT_SUB ARG2 11
(ARG1 + 55) INT_SUB ARG1 55
0 INT_LESSEQUAL (ARG1 + 97) (ARG2 + 11)
(ARG1 + 97) INT_SUB ARG1 97
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
0 INT_LESSEQUAL [(ARG1 + 8)] ARG2
(ARG2 * 8) INT_MULT ARG2 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_LESSEQUAL ARG2)
[(ARG1 + 8)] CAST [(ARG1 + 8)]
 RETURN 1
 CALL libcall___assert_fail_thunk Index < Length && "Invalid index!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/ArrayRef.h 186 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/ArrayRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/ArrayRef.h
Index < Length && "Invalid index!" COPY Index < Length && "Invalid index!"
0 COPY 0
 RETURN 0 ([ARG1] + (ARG2 * 8))
([ARG1] + (ARG2 * 8)) INT_ADD [ARG1] (ARG2 * 8)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
ARG1 COPY ARG1
[ARG1] LOAD 433 ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
f() CALL func ARG1
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
f() CALL func (RSP + -88)
(RSP + -44) PTRSUB RSP -44
 STORE 433 (ARG1 + 8) [f()]
([f(RSP)] * 8) INT_ZEXT ([f(RSP)] * 8)
(RSP + -40) PTRSUB RSP -40
(ARG1 + 8) CAST (ARG1 + 8)
f() CAST f()
f() CALL func ARG1
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -44) (RSP + -40) (RSP + -40)
(ARG1 + 8) PTRADD ARG1 2 4
f() CAST f()
(ARG1 + 8) PTRADD ARG1 2 4
[f()] LOAD 433 f()
f() CALL func (RSP + -88) 0
(RSP + -88) PTRSUB RSP -88
 CALL libcall_memcpy_thunk [(ARG1 + 8)] f() ([f(RSP)] * 8)
([f(RSP)] * 8) INT_LEFT [f(RSP)] 3
 STORE 433 (ARG1 + 8) f()
(ARG1 + 8) CAST (ARG1 + 8)
(RSP + -88) PTRSUB RSP -88
(RSP + -88) PTRSUB RSP -88
f() CALL func f()
(ARG1 + 8) PTRADD ARG1 2 4
f(RSP) CAST f(RSP)
f() CALL func (RSP + -88)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (f() INT_EQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
bigVal.data() && "Null pointer detected!" COPY bigVal.data() && "Null pointer detected!"
void llvm::APInt::initFromArray(llvm::ArrayRef<long unsigned int>) COPY void llvm::APInt::initFromArray(llvm::ArrayRef<long unsigned int>)
 RETURN 1
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CALL func f(ARG1)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
0 INT_EQUAL f() 0
 CALL libcall___assert_fail_thunk bigVal.data() && "Null pointer detected!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 92 void llvm::APInt::initFromArray(llvm::ArrayRef<long unsigned int>)
f() CALL func ARG1
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
BitWidth && "Bitwidth too small" COPY BitWidth && "Bitwidth too small"
void llvm::APInt::initFromArray(llvm::ArrayRef<long unsigned int>) COPY void llvm::APInt::initFromArray(llvm::ArrayRef<long unsigned int>)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
f() CALL func (RSP + -88)
(RSP + -88) PTRSUB RSP -88
 RETURN 1
 CALL libcall___assert_fail_thunk BitWidth && "Bitwidth too small" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 91 void llvm::APInt::initFromArray(llvm::ArrayRef<long unsigned int>)
0 INT_EQUAL f() 0
 CALL func ARG1 ARG3 ARG4 ARG3
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) 0
 RETURN 0
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 (ARG1 + 8) ARG3
 RETURN 0
 CALL func (RSP + -40) ARG1 ARG2 ARG1
(RSP + -40) PTRSUB RSP -40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
 RETURN 0 (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) COPY (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
(ARG1 + 8) PTRADD ARG1 2 4
 STORE 433 ARG1 ARG2
 CALL func ARG1 (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
f() CALL func ARG4 ARG3 ARG3
 STORE 433 (ARG1 + 8) 0
(f() / 2147483647) SUBPIECE f() 0
(ARG1 + 8) CAST (ARG1 + 8)
(f() / 2147483647) INT_RIGHT f() 64
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
 RETURN 0
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD (f() * 8) ARG1
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
0 INT_LESSEQUAL ARG2 f()
ARG3 COPY ARG3
(f(ARG3) & -256) INT_AND f(ARG3) -256
f() COPY f()
0 INT_NOTEQUAL f(ARG3) 0
 RETURN 0 (f(ARG3) & -256)
 CBRANCH (ARG2 INT_LESSEQUAL f())
0 INT_ZEXT 0
(f(ARG3) & -256) INT_OR (f(ARG3) & -256) 0
f() INT_ZEXT f()
0 COPY 0
f(ARG3) COPY f(ARG3)
 CBRANCH (f(ARG3) INT_LESSEQUAL [(ARG1 + (f() * 8))])
f(ARG3) COPY f(ARG3)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() INT_ZEXT f()
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
0 INT_LESSEQUAL f(ARG3) [(ARG1 + (f() * 8))]
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
([(ARG1 + (f() * 8))] - f(ARG3)) INT_SUB [(ARG1 + (f() * 8))] f(ARG3)
 STORE 433 (ARG1 + (f() * 8)) ([(ARG1 + (f() * 8))] - f(ARG3))
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
 RETURN 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 CALL func [(ARG1 + 8)] f() 1 f()
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + -1)
([(ARG1 + 8)] + -1) INT_ADD [(ARG1 + 8)] -1
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
 CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 RETURN 0
 STORE 433 (ARG1 + 8) ~([(ARG1 + 8)])
 CBRANCH (f() INT_LESSEQUAL f())
0 COPY 0
~([(ARG1 + 8)]) INT_NEGATE [(ARG1 + 8)]
0 INT_LESSEQUAL f() f()
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
(f() * 8) INT_MULT f() 8
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
~([([(ARG1 + 8)] + (f() * 8))]) INT_NEGATE [([(ARG1 + 8)] + (f() * 8))]
([(ARG1 + 8)] + (f() * 8)) INT_ADD (f() * 8) [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() INT_ZEXT f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
 STORE 433 ([(ARG1 + 8)] + (f() * 8)) ~([([(ARG1 + 8)] + (f() * 8))])
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
0 INT_NOTEQUAL ARG5 10
0 INT_NOTEQUAL ARG5 36
0 INT_NOTEQUAL ARG5 2
0 INT_NOTEQUAL ARG5 16
ARG5 COPY ARG5
0 INT_NOTEQUAL ARG5 8
ARG4 COPY ARG4
0 INT_EQUAL ARG4 0
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (ARG4 INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG2 INT_LESS ((f(ARG4) * 4) + -4))
0 INT_EQUAL ARG5 16
((f(ARG4) * 64) + -64) INT_SUB (f(ARG4) * 64) -64
(((f(ARG4) * 64) + -64) / 22) INT_DIV ((f(ARG4) * 64) + -64) 22
ARG2 INT_ZEXT ARG2
 CBRANCH (ARG2 INT_LESS (((f(ARG4) * 64) + -64) / 22))
0 INT_LESS ARG2 (((f(ARG4) * 64) + -64) / 22)
 CBRANCH (ARG5 INT_EQUAL 16)
(f(ARG4) * 64) INT_MULT f(ARG4) 64
 CBRANCH (1 INT_LESS f(ARG4))
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f(ARG5) INT_LESSEQUAL f())
(RSP + -72) PTRSUB RSP -72
0 COPY 0
 CALL func
f() CALL func (RSP + -72)
 BRANCH VZERO
digit < radix && "Invalid character in digit string" COPY digit < radix && "Invalid character in digit string"
 CBRANCH (f() INT_NOTEQUAL f())
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 RETURN 1
0 INT_NOTEQUAL f() f()
0 INT_LESS 1 f(ARG4)
 CBRANCH (f() INT_EQUAL 0)
(f() + 1) PTRADD f() 1 1
0 INT_EQUAL f() 0
 CALL libcall___assert_fail_thunk digit < radix && "Invalid character in digit string" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2119 0
 CBRANCH (f(ARG5) INT_EQUAL 16)
4 COPY 4
0 INT_EQUAL f(ARG5) 8
 CBRANCH (f(ARG5) INT_EQUAL 8)
 CBRANCH (ARG2 INT_LESS f(ARG4))
0 INT_LESS ARG2 ((f(ARG4) * 3) + -3)
 CBRANCH (ARG5 INT_EQUAL 2)
((f(ARG4) * 3) + -3) INT_SUB (f(ARG4) * 3) -3
0 INT_EQUAL ARG5 2
(f(ARG4) * 3) INT_MULT f(ARG4) 3
ARG2 INT_ZEXT ARG2
 CBRANCH (ARG2 INT_LESS ((f(ARG4) * 3) + -3))
 CBRANCH (f() INT_NOTEQUAL 1)
f() CALL func ARG1
f() CALL func f()
(ARG1 + 8) INT_ADD ARG1 8
 STORE 433 (ARG1 + 8) f()
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH ((ARG4 + -1) INT_EQUAL 0)
0 INT_LESS ARG2 f(ARG4)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
0 COPY 0
 RETURN 1
slen && "String is only a sign, needs a value." COPY slen && "String is only a sign, needs a value."
 CALL libcall___assert_fail_thunk slen && "String is only a sign, needs a value." /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2096 0
ARG2 INT_ZEXT ARG2
 CBRANCH (ARG5 INT_NOTEQUAL 10)
[f()] LOAD 433 f()
f() CALL func (RSP + -152)
[f()] LOAD 433 f()
f() CAST f()
 CBRANCH (ARG5 INT_NOTEQUAL 8)
(RSP + -152) PTRSUB RSP -152
0 INT_EQUAL [f()] 45
ARG4 COPY ARG4
 CBRANCH ([f()] INT_EQUAL 45)
0 INT_EQUAL [f()] 45
ARG2 INT_ZEXT ARG2
0 INT_LESS ARG2 ((f(ARG4) * 4) + -4)
 CBRANCH (ARG5 INT_EQUAL 8)
(f(ARG4) * 4) INT_MULT f(ARG4) 4
((f(ARG4) * 4) + -4) INT_SUB (f(ARG4) * 4) -4
0 INT_EQUAL ARG5 8
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -56) PTRSUB RSP -56
f() CALL func [f()] f(ARG5) f(ARG5)
f(ARG5) INT_ZEXT f(ARG5)
[(f() + 40)] LOAD 433 (f() + 40)
[f()] INT_SEXT [f()]
 CALL func (RSP + -56)
(f() + 40) CAST (f() + 40)
 CALL func (RSP + -72)
0 INT_LESSEQUAL f(ARG5) f()
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(RSP + -72) PTRSUB RSP -72
0 INT_NOTEQUAL f() [(f() + 40)]
[f()] LOAD 433 f()
(f() + 40) INT_ADD f() 40
 CBRANCH (ARG5 INT_NOTEQUAL 2)
 CBRANCH (ARG5 INT_NOTEQUAL 36)
 CBRANCH ([f()] INT_EQUAL 43)
(ARG4 + -1) INT_SUB ARG4 -1
0 INT_EQUAL (ARG4 + -1) 0
(f() + 1) PTRADD f() 1 1
f() INT_ZEXT f()
f() CAST f()
 BRANCH VZERO
 STORE 433 f() f()
f() INT_ZEXT f()
 CBRANCH (f(ARG5) INT_EQUAL 2)
 BRANCH VZERO
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (ARG5 INT_EQUAL 10)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
f(ARG5) COPY f(ARG5)
0 INT_EQUAL f(ARG5) 16
f() CALL func f(ARG1)
f() CALL func ARG1
 CALL func (RSP + -72) f() 0 0
f() CALL func f(ARG1)
 CALL func (RSP + -56) f() f(ARG5) 0
0 INT_NOTEQUAL f() 1
(RSP + -56) PTRSUB RSP -56
0 COPY 0
f() CALL func (RSP + -152)
f() CAST f()
 RETURN 1
(RSP + -72) PTRSUB RSP -72
 CALL libcall___assert_fail_thunk (((slen-1)*64)/22 <= numbits || radix != 10) && "Insufficient bit width" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2102 0
(((slen-1)*64)/22 <= numbits || radix != 10) && "Insufficient bit width" COPY (((slen-1)*64)/22 <= numbits || radix != 10) && "Insufficient bit width"
(RSP + -152) PTRSUB RSP -152
 CALL func f(ARG1)
 CALL func f(ARG1)
 CBRANCH (ARG5 INT_NOTEQUAL 16)
((slen-1)*4 <= numbits || radix != 16) && "Insufficient bit width" COPY ((slen-1)*4 <= numbits || radix != 16) && "Insufficient bit width"
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
0 COPY 0
 CALL libcall___assert_fail_thunk ((slen-1)*4 <= numbits || radix != 16) && "Insufficient bit width" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2100 0
 CALL func f(ARG1) f() f()
(RSP + -56) PTRSUB RSP -56
 CALL func f(ARG1) (RSP + -56) (RSP + -56)
 BRANCH VZERO
0 INT_EQUAL [f()] 43
[f()] LOAD 433 f()
3 COPY 3
0 INT_EQUAL f(ARG5) 2
 BRANCH VZERO
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0
0 INT_EQUAL ARG5 10
 CALL libcall___assert_fail_thunk (slen <= numbits || radix != 2) && "Insufficient bit width" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2098 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
0 COPY 0
 RETURN 1
(slen <= numbits || radix != 2) && "Insufficient bit width" COPY (slen <= numbits || radix != 2) && "Insufficient bit width"
 CALL libcall___assert_fail_thunk ((slen-1)*3 <= numbits || radix != 8) && "Insufficient bit width" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2099 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
0 COPY 0
 RETURN 1
((slen-1)*3 <= numbits || radix != 8) && "Insufficient bit width" COPY ((slen-1)*3 <= numbits || radix != 8) && "Insufficient bit width"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 RETURN 1
0 COPY 0
 CALL libcall___assert_fail_thunk (radix == 10 || radix == 8 || radix == 16 || radix == 2 || radix == 36) && "Radix should be 2, 8, 10, 16, or 36!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2088 0
(radix == 10 || radix == 8 || radix == 16 || radix == 2 || radix == 36) && "Radix should be 2, 8, 10, 16, or 36!" COPY (radix == 10 || radix == 8 || radix == 16 || radix == 2 || radix == 36) && "Radix should be 2, 8, 10, 16, or 36!"
 RETURN 1
 CALL libcall___assert_fail_thunk !str.empty() && "Invalid string length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2085 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
0 COPY 0
!str.empty() && "Invalid string length" COPY !str.empty() && "Invalid string length"
(ARG1 + 8) PTRADD ARG1 2 4
 STORE 433 ARG1 ARG2
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5
ARG2 LOAD 433 ARG1
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (ARG2 INT_EQUAL 0)
 STORE 433 (ARG1 + 8) 0
0 INT_EQUAL ARG2 0
 RETURN 1
 CALL libcall___assert_fail_thunk BitWidth && "Bitwidth too small" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 119 0
 RETURN 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
0 COPY 0
BitWidth && "Bitwidth too small" COPY BitWidth && "Bitwidth too small"
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
 STORE 433 ARG1 [ARG2]
f(ARG1 , ARG2) LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
f(ARG1) CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
0 INT_NOTEQUAL ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
 CBRANCH (ARG1 INT_NOTEQUAL ARG2)
0 INT_EQUAL f(ARG1 , ARG2) f()
 CBRANCH (f(ARG1 , ARG2) INT_EQUAL f())
 RETURN 0 f(ARG1)
 CBRANCH (f() INT_NOTEQUAL 0)
(f() * 8) CAST (f() * 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f(ARG1) CAST f(ARG1)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 STORE 433 (ARG1 + 8) 0
!RHS.isSingleWord() COPY !RHS.isSingleWord()
llvm::APInt& llvm::APInt::AssignSlowCase(const llvm::APInt&) COPY llvm::APInt& llvm::APInt::AssignSlowCase(const llvm::APInt&)
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 STORE 433 (ARG1 + 8) f()
 CALL libcall___assert_fail_thunk !RHS.isSingleWord() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 137 llvm::APInt& llvm::APInt::AssignSlowCase(const llvm::APInt&)
(ARG1 + 8) CAST (ARG1 + 8)
(f() * 8) INT_LEFT f() 3
(f() * 8) INT_ZEXT (f() * 8)
 CALL libcall_memcpy_thunk [(ARG1 + 8)] [(ARG2 + 8)] (f() * 8)
(ARG2 + 8) CAST (ARG2 + 8)
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
f() CALL func f()
 CBRANCH (f() INT_EQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_EQUAL f())
0 INT_EQUAL f() f()
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 0)
(ARG1 + 8) CAST (ARG1 + 8)
 CALL libcall_operator.delete[]_thunk [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 0)
 CALL libcall_operator.delete[]_thunk [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() * 8) INT_LEFT f() 3
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(ARG2 + 8) CAST (ARG2 + 8)
 BRANCH VZERO
(f() * 8) CAST (f() * 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CALL libcall_memcpy_thunk [(ARG1 + 8)] [(ARG2 + 8)] (f() * 8)
(f() * 8) INT_ZEXT (f() * 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 STORE 433 (ARG1 + 8) f()
(f() * 8) CAST (f() * 8)
0 INT_NOTEQUAL [(ARG1 + 8)] 0
(f() * 8) INT_LEFT f() 3
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 CALL libcall_memcpy_thunk [(ARG1 + 8)] [(ARG2 + 8)] (f() * 8)
f() CALL func f()
(ARG2 + 8) CAST (ARG2 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_NOTEQUAL [(ARG1 + 8)] 0
(f() * 8) INT_ZEXT (f() * 8)
 BRANCH VZERO
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (ARG1 + 8) [(ARG2 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (f() INT_NOTEQUAL 0)
(f() * 8) CAST (f() * 8)
(f() * 8) INT_LEFT f() 3
 CALL libcall_memcpy_thunk [(ARG1 + 8)] [(ARG2 + 8)] (f() * 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 RETURN 1
 CALL libcall___assert_fail_thunk !isSingleWord() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 130 llvm::APInt& llvm::APInt::AssignSlowCase(const llvm::APInt&)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
!isSingleWord() COPY !isSingleWord()
(ARG2 + 8) CAST (ARG2 + 8)
(f() * 8) INT_ZEXT (f() * 8)
llvm::APInt& llvm::APInt::AssignSlowCase(const llvm::APInt&) COPY llvm::APInt& llvm::APInt::AssignSlowCase(const llvm::APInt&)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
 CALL func ARG1 (ARG1 + 24) ARG2 ARG3
(ARG1 + 24) INT_ADD ARG1 24
 RETURN 0
 CALL func ARG1 (ARG2 * 4) 4 (ARG2 * 4)
(ARG2 * 4) INT_MULT ARG2 4
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 STORE 433 (ARG1 + 8) ARG2
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
 CALL func ARG1 ([(ARG1 + 8)] + 4) ([(ARG1 + 8)] + 4)
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1 0
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
[ARG2] LOAD 433 ARG2
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 8)] + 4) INT_ADD [(ARG1 + 8)] 4
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_LESSEQUAL [(ARG1 + 16)] [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 16)] INT_LESSEQUAL [(ARG1 + 8)])
 STORE 433 [(ARG1 + 8)] [ARG2]
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -20) (RSP + -20)
ARG2 COPY ARG2
 RETURN 0
(RSP + -20) PTRSUB RSP -20
 CALL func ARG1 (ARG2 & 4294967295) (ARG2 & 4294967295)
 CALL func ARG1 (RSP + -20) (RSP + -20)
(ARG2 & 4294967295) INT_AND ARG2 4294967295
(ARG2 / 2147483647) INT_RIGHT ARG2 32
0 INT_NOTEQUAL (ARG2 & 4294967295) ARG2
(ARG2 & 4294967295) INT_AND ARG2 4294967295
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
 CBRANCH ((ARG2 & 4294967295) INT_NOTEQUAL ARG2)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(ARG2 / 4611686014132420609) SUBPIECE (ARG2 / 2147483647) 0
(RSP + -20) PTRSUB RSP -20
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
 CALL func ARG2 [(ARG1 + 8)] [(ARG1 + 8)]
 CALL func ARG2 [([(ARG1 + 8)] + (f() * 8))] [([(ARG1 + 8)] + (f() * 8))]
 CALL func ARG2 [ARG1] [ARG1]
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 RETURN 0
0 COPY 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
0 INT_LESS f() f()
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (f() INT_LESS f())
f() INT_ZEXT f()
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(f() * 8) INT_MULT f() 8
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
0 INT_LESSEQUAL ARG3 f()
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
ARG4 COPY ARG4
 CBRANCH (ARG3 INT_LESSEQUAL f())
(f(ARG1) & -256) INT_OR (f(ARG1) & -256) 0
0 INT_ZEXT 0
0 COPY 0
 RETURN 0 (f(ARG1) & -256)
(f(ARG1) & -256) INT_AND f(ARG1) -256
0 INT_NOTEQUAL f(ARG4) 0
f() INT_ZEXT f()
 STORE 433 (ARG1 + (f() * 8)) (f(ARG4) + [(ARG2 + (f() * 8))])
0 INT_LESSEQUAL f(ARG4) [(ARG1 + (f() * 8))]
f() INT_ZEXT f()
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f() INT_ZEXT f()
f() INT_ZEXT f()
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
(f(ARG4) + [(ARG2 + (f() * 8))]) INT_ADD f(ARG4) [(ARG2 + (f() * 8))]
(f() * 8) INT_MULT f() 8
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
 CBRANCH (f(ARG4) INT_LESSEQUAL [(ARG1 + (f() * 8))])
(f() * 8) INT_MULT f() 8
 BRANCH VZERO
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
0 COPY 0
1 COPY 1
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
 CALL func [(ARG1 + 8)] [(ARG1 + 8)] f() 1
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
([(ARG1 + 8)] + 1) INT_ADD [(ARG1 + 8)] 1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 1)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
(ARG3 + (f() * 8)) INT_ADD ARG3 (f() * 8)
(ARG3 + (f() * 8)) INT_ADD ARG3 (f() * 8)
0 INT_LESS f() ARG4
0 COPY 0
 CBRANCH (f() INT_LESS ARG4)
0 COPY 0
 RETURN 0 f()
f() COPY f()
 STORE 433 (ARG1 + (f() * 8)) (f(ARG2) - [(ARG3 + (f() * 8))])
(ARG3 + (f() * 8)) CAST (ARG3 + (f() * 8))
(f() * 8) INT_MULT f() 8
0 INT_LESS f(ARG2) [(ARG3 + (f() * 8))]
(f(ARG2) - [(ARG3 + (f() * 8))]) INT_SUB f(ARG2) [(ARG3 + (f() * 8))]
[(ARG3 + (f() * 8))] LOAD 433 (ARG3 + (f() * 8))
0 INT_EQUAL f() 0
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
(f() * 8) INT_MULT f() 8
(ARG3 + (f() * 8)) CAST (ARG3 + (f() * 8))
[(ARG3 + (f() * 8))] LOAD 433 (ARG3 + (f() * 8))
 CBRANCH (f(ARG2) INT_LESS [(ARG3 + (f() * 8))])
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f() INT_ZEXT f()
f() INT_ZEXT f()
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 0)
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
0 INT_EQUAL [(ARG2 + (f() * 8))] 0
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
0 COPY 0
 CBRANCH ([(ARG2 + (f() * 8))] INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 INT_NOTEQUAL f() 0
f() INT_ZEXT f()
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
([(ARG2 + (f() * 8))] + 1) INT_SUB [(ARG2 + (f() * 8))] 1
 BRANCH VZERO
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
(f() * 8) INT_MULT f() 8
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
 CALL func ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG2 + 8) PTRADD ARG2 2 4
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
 CBRANCH ([ARG1] INT_NOTEQUAL [ARG2])
0 INT_NOTEQUAL [ARG1] [ARG2]
 CBRANCH (f() INT_EQUAL 0)
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func [(ARG1 + 8)] [(ARG1 + 8)] [(ARG2 + 8)] f()
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] - [(ARG2 + 8)])
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] - [(ARG2 + 8)]) INT_SUB [(ARG1 + 8)] [(ARG2 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
0 INT_EQUAL f() 0
 RETURN 1
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be the same" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 280 llvm::APInt& llvm::APInt::operator-=(const llvm::APInt&)
llvm::APInt& llvm::APInt::operator-=(const llvm::APInt&) COPY llvm::APInt& llvm::APInt::operator-=(const llvm::APInt&)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 RETURN 0
BitWidth == RHS.BitWidth && "Bit widths must be the same" COPY BitWidth == RHS.BitWidth && "Bit widths must be the same"
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
ARG1 COPY ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
 CBRANCH ([ARG1] INT_EQUAL [ARG2])
0 INT_EQUAL [ARG1] [ARG2]
 CBRANCH (f() INT_LESS f())
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
f() INT_ZEXT f()
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
[([(ARG2 + 8)] + (f() * 8))] LOAD 433 ([(ARG2 + 8)] + (f() * 8))
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) INT_ADD (f() * 8) [(ARG1 + 8)]
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
(f() * 8) INT_MULT f() 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
([([(ARG2 + 8)] + (f() * 8))] & [([(ARG1 + 8)] + (f() * 8))]) INT_AND [([(ARG2 + 8)] + (f() * 8))] [([(ARG1 + 8)] + (f() * 8))]
(f() * 8) INT_MULT f() 8
0 INT_LESS f() f()
([(ARG2 + 8)] + (f() * 8)) CAST ([(ARG2 + 8)] + (f() * 8))
(f() * 8) INT_MULT f() 8
 STORE 433 ([(ARG1 + 8)] + (f() * 8)) ([([(ARG2 + 8)] + (f() * 8))] & [([(ARG1 + 8)] + (f() * 8))])
f() INT_ZEXT f()
f() INT_ZEXT f()
(ARG2 + 8) CAST (ARG2 + 8)
([(ARG2 + 8)] + (f() * 8)) INT_ADD [(ARG2 + 8)] (f() * 8)
 RETURN 0 ARG1
llvm::APInt& llvm::APInt::operator&=(const llvm::APInt&) COPY llvm::APInt& llvm::APInt::operator&=(const llvm::APInt&)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
BitWidth == RHS.BitWidth && "Bit widths must be the same" COPY BitWidth == RHS.BitWidth && "Bit widths must be the same"
 RETURN 1
 CBRANCH (f() INT_EQUAL 0)
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be the same" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 399 llvm::APInt& llvm::APInt::operator&=(const llvm::APInt&)
0 INT_EQUAL f() 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 COPY 0
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
([(ARG2 + 8)] & [(ARG1 + 8)]) INT_AND [(ARG1 + 8)] [(ARG2 + 8)]
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 STORE 433 (ARG1 + 8) ([(ARG2 + 8)] & [(ARG1 + 8)])
(ARG1 + 8) CAST (ARG1 + 8)
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
ARG1 COPY ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG2 + 8) PTRADD ARG2 2 4
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
 CBRANCH ([ARG1] INT_EQUAL [ARG2])
0 INT_EQUAL [ARG1] [ARG2]
 CBRANCH (f() INT_LESS f())
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([([(ARG2 + 8)] + (f() * 8))] | [([(ARG1 + 8)] + (f() * 8))]) INT_OR [([(ARG2 + 8)] + (f() * 8))] [([(ARG1 + 8)] + (f() * 8))]
(ARG1 + 8) CAST (ARG1 + 8)
(f() * 8) INT_MULT f() 8
0 INT_LESS f() f()
([(ARG2 + 8)] + (f() * 8)) CAST ([(ARG2 + 8)] + (f() * 8))
(f() * 8) INT_MULT f() 8
 STORE 433 ([(ARG1 + 8)] + (f() * 8)) ([([(ARG2 + 8)] + (f() * 8))] | [([(ARG1 + 8)] + (f() * 8))])
f() INT_ZEXT f()
f() INT_ZEXT f()
(ARG2 + 8) CAST (ARG2 + 8)
([(ARG2 + 8)] + (f() * 8)) INT_ADD [(ARG2 + 8)] (f() * 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
f() INT_ZEXT f()
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
[([(ARG2 + 8)] + (f() * 8))] LOAD 433 ([(ARG2 + 8)] + (f() * 8))
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) INT_ADD (f() * 8) [(ARG1 + 8)]
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
(f() * 8) INT_MULT f() 8
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be the same" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 411 llvm::APInt& llvm::APInt::operator|=(const llvm::APInt&)
0 INT_EQUAL f() 0
 RETURN 0 ARG1
llvm::APInt& llvm::APInt::operator|=(const llvm::APInt&) COPY llvm::APInt& llvm::APInt::operator|=(const llvm::APInt&)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
BitWidth == RHS.BitWidth && "Bit widths must be the same" COPY BitWidth == RHS.BitWidth && "Bit widths must be the same"
 RETURN 1
 CBRANCH (f() INT_EQUAL 0)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 COPY 0
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
([(ARG2 + 8)] | [(ARG1 + 8)]) INT_OR [(ARG1 + 8)] [(ARG2 + 8)]
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 STORE 433 (ARG1 + 8) ([(ARG2 + 8)] | [(ARG1 + 8)])
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
[ARG1] LOAD 433 ARG1
 CALL func ARG1
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
f(ARG1) CALL func ARG1
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
0 INT_NOTEQUAL [ARG1] [ARG2]
 CBRANCH ([ARG1] INT_NOTEQUAL [ARG2])
 CBRANCH (f() INT_EQUAL 0)
(ARG2 + 8) CAST (ARG2 + 8)
0 COPY 0
0 INT_LESS f() f()
 STORE 433 (ARG1 + 8) 0
 BRANCH VZERO
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (f() INT_LESS f())
0 INT_XOR [(ARG1 + 8)] [(ARG2 + 8)]
f(ARG1) CAST f(ARG1)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 RETURN 1
llvm::APInt& llvm::APInt::operator^=(const llvm::APInt&) COPY llvm::APInt& llvm::APInt::operator^=(const llvm::APInt&)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 RETURN 0 f(ARG1)
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be the same" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 423 llvm::APInt& llvm::APInt::operator^=(const llvm::APInt&)
0 INT_EQUAL f() 0
BitWidth == RHS.BitWidth && "Bit widths must be the same" COPY BitWidth == RHS.BitWidth && "Bit widths must be the same"
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) INT_ADD (f() * 8) [(ARG1 + 8)]
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
(f() * 8) INT_MULT f() 8
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_XOR [([(ARG2 + 8)] + (f() * 8))] [([(ARG1 + 8)] + (f() * 8))]
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
f() INT_ZEXT f()
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
 STORE 433 ([(ARG1 + 8)] + (f() * 8)) 0
(f() * 8) INT_MULT f() 8
(ARG1 + 8) CAST (ARG1 + 8)
f() INT_ZEXT f()
([(ARG2 + 8)] + (f() * 8)) INT_ADD [(ARG2 + 8)] (f() * 8)
([(ARG2 + 8)] + (f() * 8)) CAST ([(ARG2 + 8)] + (f() * 8))
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
[([(ARG2 + 8)] + (f() * 8))] LOAD 433 ([(ARG2 + 8)] + (f() * 8))
(ARG2 + 8) CAST (ARG2 + 8)
(ARG3 + 8) INT_ADD ARG3 8
ARG1 COPY ARG1
 CALL func ARG1 f() f() f()
f() CALL func ARG2
(ARG2 + 8) INT_ADD ARG2 8
f() CALL func ARG2
 CBRANCH (f() INT_LESS f())
f() CALL func f()
0 COPY 0
0 INT_LESS f() f()
 RETURN 0 ARG1
 STORE 433 ((f() * 8) + f()) ([([(ARG3 + 8)] + (f() * 8))] & [([(ARG2 + 8)] + (f() * 8))])
((f() * 8) + f()) CAST ((f() * 8) + f())
([(ARG3 + 8)] + (f() * 8)) INT_ADD [(ARG3 + 8)] (f() * 8)
([(ARG3 + 8)] + (f() * 8)) CAST ([(ARG3 + 8)] + (f() * 8))
[([(ARG3 + 8)] + (f() * 8))] LOAD 433 ([(ARG3 + 8)] + (f() * 8))
f() INT_ZEXT f()
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
([(ARG2 + 8)] + (f() * 8)) INT_ADD [(ARG2 + 8)] (f() * 8)
(ARG3 + 8) CAST (ARG3 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
[([(ARG2 + 8)] + (f() * 8))] LOAD 433 ([(ARG2 + 8)] + (f() * 8))
(f() * 8) INT_MULT f() 8
((f() * 8) + f()) INT_ADD (f() * 8) f()
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(f() * 8) INT_MULT f() 8
([(ARG2 + 8)] + (f() * 8)) CAST ([(ARG2 + 8)] + (f() * 8))
f() INT_ZEXT f()
([([(ARG3 + 8)] + (f() * 8))] & [([(ARG2 + 8)] + (f() * 8))]) INT_AND [([(ARG3 + 8)] + (f() * 8))] [([(ARG2 + 8)] + (f() * 8))]
(f() * 8) INT_MULT f() 8
(ARG2 + 8) CAST (ARG2 + 8)
f() INT_ZEXT f()
(ARG3 + 8) INT_ADD ARG3 8
ARG1 COPY ARG1
 CALL func ARG1 f() f() f()
f() CALL func ARG2
(ARG2 + 8) INT_ADD ARG2 8
f() CALL func ARG2
 CBRANCH (f() INT_LESS f())
f() CALL func f()
0 COPY 0
0 INT_LESS f() f()
 RETURN 0 ARG1
f() INT_ZEXT f()
([([(ARG3 + 8)] + (f() * 8))] | [([(ARG2 + 8)] + (f() * 8))]) INT_OR [([(ARG3 + 8)] + (f() * 8))] [([(ARG2 + 8)] + (f() * 8))]
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
(ARG2 + 8) CAST (ARG2 + 8)
 STORE 433 ((f() * 8) + f()) ([([(ARG3 + 8)] + (f() * 8))] | [([(ARG2 + 8)] + (f() * 8))])
((f() * 8) + f()) CAST ((f() * 8) + f())
([(ARG3 + 8)] + (f() * 8)) INT_ADD [(ARG3 + 8)] (f() * 8)
[([(ARG3 + 8)] + (f() * 8))] LOAD 433 ([(ARG3 + 8)] + (f() * 8))
([(ARG3 + 8)] + (f() * 8)) CAST ([(ARG3 + 8)] + (f() * 8))
f() INT_ZEXT f()
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
([(ARG2 + 8)] + (f() * 8)) INT_ADD [(ARG2 + 8)] (f() * 8)
(ARG3 + 8) CAST (ARG3 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
[([(ARG2 + 8)] + (f() * 8))] LOAD 433 ([(ARG2 + 8)] + (f() * 8))
(f() * 8) INT_MULT f() 8
((f() * 8) + f()) INT_ADD (f() * 8) f()
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(f() * 8) INT_MULT f() 8
([(ARG2 + 8)] + (f() * 8)) CAST ([(ARG2 + 8)] + (f() * 8))
 CALL func ARG1
 CALL func ARG1 f() f() f()
ARG1 COPY ARG1
f() CALL func ARG2
f() CALL func ARG2
(ARG2 + 8) INT_ADD ARG2 8
(ARG3 + 8) INT_ADD ARG3 8
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
f() CALL func f()
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
40 CAST 40
 CBRANCH (f() INT_LESS f())
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 COPY 0
0 INT_LESS f() f()
f() INT_ZEXT f()
([(ARG2 + 8)] + (f() * 8)) CAST ([(ARG2 + 8)] + (f() * 8))
 STORE 433 ((f() * 8) + f()) 0
f() INT_ZEXT f()
(ARG2 + 8) CAST (ARG2 + 8)
([(ARG3 + 8)] + (f() * 8)) INT_ADD [(ARG3 + 8)] (f() * 8)
[([(ARG3 + 8)] + (f() * 8))] LOAD 433 ([(ARG3 + 8)] + (f() * 8))
((f() * 8) + f()) CAST ((f() * 8) + f())
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
([(ARG2 + 8)] + (f() * 8)) INT_ADD [(ARG2 + 8)] (f() * 8)
[([(ARG2 + 8)] + (f() * 8))] LOAD 433 ([(ARG2 + 8)] + (f() * 8))
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() INT_ZEXT f()
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
((f() * 8) + f()) INT_ADD (f() * 8) f()
(f() * 8) INT_MULT f() 8
(f() * 8) INT_MULT f() 8
([(ARG3 + 8)] + (f() * 8)) CAST ([(ARG3 + 8)] + (f() * 8))
(f() * 8) INT_MULT f() 8
0 INT_XOR [([(ARG3 + 8)] + (f() * 8))] [([(ARG2 + 8)] + (f() * 8))]
(ARG3 + 8) CAST (ARG3 + 8)
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func ARG1 [ARG2] ([(ARG3 + 8)] * [(ARG2 + 8)]) 0
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CALL func (RSP + -40) ARG2 ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
(ARG3 + 8) PTRADD ARG3 2 4
 CALL func (RSP + -40) ARG3 ARG3
[ARG3] LOAD 433 ARG3
 CBRANCH ([ARG2] INT_NOTEQUAL [ARG3])
0 INT_NOTEQUAL [ARG2] [ARG3]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be the same" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 464 llvm::APInt llvm::APInt::operator*(const llvm::APInt&) const
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
BitWidth == RHS.BitWidth && "Bit widths must be the same" COPY BitWidth == RHS.BitWidth && "Bit widths must be the same"
llvm::APInt llvm::APInt::operator*(const llvm::APInt&) const COPY llvm::APInt llvm::APInt::operator*(const llvm::APInt&) const
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL f() 0
 RETURN 1
 CBRANCH (f() INT_EQUAL 0)
(RSP + -40) PTRSUB RSP -40
([(ARG3 + 8)] * [(ARG2 + 8)]) INT_MULT [(ARG2 + 8)] [(ARG3 + 8)]
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
(RSP + -40) PTRSUB RSP -40
(ARG2 + 8) CAST (ARG2 + 8)
 CALL func (RSP + -40)
 BRANCH VZERO
(RSP + -40) PTRSUB RSP -40
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(RSP + -40) PTRSUB RSP -40
(ARG3 + 8) CAST (ARG3 + 8)
 CALL func ARG1 [ARG2] ([(ARG2 + 8)] + [(ARG3 + 8)]) 0
 CALL func ARG1 (RSP + -40) (RSP + -40)
ARG1 COPY ARG1
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
(ARG3 + 8) PTRADD ARG3 2 4
(ARG3 + 8) PTRADD ARG3 2 4
[ARG3] LOAD 433 ARG3
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [ARG2] [ARG3]
 CBRANCH ([ARG2] INT_NOTEQUAL [ARG3])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 RETURN 1
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be the same" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 473 llvm::APInt llvm::APInt::operator+(const llvm::APInt&) const
0 INT_NOTEQUAL 0 [(f() + 40)]
0 INT_EQUAL f() 0
llvm::APInt llvm::APInt::operator+(const llvm::APInt&) const COPY llvm::APInt llvm::APInt::operator+(const llvm::APInt&) const
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
BitWidth == RHS.BitWidth && "Bit widths must be the same" COPY BitWidth == RHS.BitWidth && "Bit widths must be the same"
[(f() + 40)] LOAD 433 (f() + 40)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
([(ARG2 + 8)] + [(ARG3 + 8)]) INT_ADD [(ARG2 + 8)] [(ARG3 + 8)]
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(ARG3 + 8) CAST (ARG3 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
 CALL func (RSP + -40)
 CALL func A_Stack[-0x20]:8 [(ARG2 + 8)] [(ARG3 + 8)] f()
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) [ARG2] 0 0
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
 BRANCH VZERO
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
(ARG3 + 8) CAST (ARG3 + 8)
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CALL func ARG1 [ARG2] ([(ARG2 + 8)] - [(ARG3 + 8)]) 0
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
[ARG3] LOAD 433 ARG3
(ARG3 + 8) PTRADD ARG3 2 4
(ARG3 + 8) PTRADD ARG3 2 4
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [ARG2] [ARG3]
 CBRANCH ([ARG2] INT_NOTEQUAL [ARG3])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
(RSP + -40) PTRSUB RSP -40
 BRANCH VZERO
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
(ARG3 + 8) CAST (ARG3 + 8)
 CALL func (RSP + -40)
([(ARG2 + 8)] - [(ARG3 + 8)]) INT_SUB [(ARG2 + 8)] [(ARG3 + 8)]
(ARG3 + 8) CAST (ARG3 + 8)
(RSP + -40) PTRSUB RSP -40
(ARG2 + 8) CAST (ARG2 + 8)
 CALL func (RSP + -40)
 CALL func A_Stack[-0x20]:8 [(ARG2 + 8)] [(ARG3 + 8)] f()
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
 CALL func (RSP + -40) [ARG2] 0 0
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_EQUAL f() 0
0 INT_NOTEQUAL 0 [(f() + 40)]
 RETURN 1
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
llvm::APInt llvm::APInt::operator-(const llvm::APInt&) const COPY llvm::APInt llvm::APInt::operator-(const llvm::APInt&) const
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be the same" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 483 llvm::APInt llvm::APInt::operator-(const llvm::APInt&) const
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
BitWidth == RHS.BitWidth && "Bit widths must be the same" COPY BitWidth == RHS.BitWidth && "Bit widths must be the same"
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
(ARG2 + 8) INT_ADD ARG2 8
f() CALL func ARG2
(ARG2 + 8) INT_ADD ARG2 8
0 INT_EQUAL f() f()
 CBRANCH (f() INT_EQUAL f())
0 INT_LESS f() 65
0 COPY 0
 RETURN 0 f(ARG2)
0 COPY 0
 RETURN 0 0
 CBRANCH (f() INT_LESS 65)
 BRANCH VZERO
 CBRANCH ([([(ARG1 + 8)] + (f() * 8))] INT_NOTEQUAL [([(ARG2 + 8)] + (f() * 8))])
 BRANCH VZERO
(f() + 4294967295) INT_ADD f() 4294967295
0 INT_SLESS 4294967295 f()
 CBRANCH (4294967295 INT_SLESS f())
([(ARG2 + 8)] + (f() * 8)) CAST ([(ARG2 + 8)] + (f() * 8))
([(ARG2 + 8)] + (f() * 8)) INT_ADD [(ARG2 + 8)] (f() * 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() INT_SEXT f()
(ARG1 + 8) CAST (ARG1 + 8)
[([(ARG2 + 8)] + (f() * 8))] LOAD 433 ([(ARG2 + 8)] + (f() * 8))
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(f() * 8) INT_MULT f() 8
f() INT_SEXT f()
(ARG2 + 8) CAST (ARG2 + 8)
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
1 COPY 1
0 INT_NOTEQUAL [([(ARG1 + 8)] + (f() * 8))] [([(ARG2 + 8)] + (f() * 8))]
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
(f() * 8) INT_MULT f() 8
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
f() CALL func (f() + 1)
 BRANCH VZERO
([[(ARG2 + 8)]] & -256) INT_AND [[(ARG2 + 8)]] -256
(f() + 1) INT_SUB f() 1
0 INT_EQUAL [[(ARG1 + 8)]] [[(ARG2 + 8)]]
[[(ARG1 + 8)]] LOAD 433 [(ARG1 + 8)]
(ARG2 + 8) CAST (ARG2 + 8)
0 INT_ZEXT 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[[(ARG2 + 8)]] LOAD 433 [(ARG2 + 8)]
([[(ARG2 + 8)]] & -256) INT_OR ([[(ARG2 + 8)]] & -256) 0
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
0 INT_EQUAL [[(ARG1 + 8)]] ARG2
0 INT_LESS f() 65
 RETURN 0 f(ARG1)
 CBRANCH (f() INT_LESS 65)
 BRANCH VZERO
([[(ARG1 + 8)]] & -256) INT_AND [[(ARG1 + 8)]] -256
([[(ARG1 + 8)]] & -256) INT_OR ([[(ARG1 + 8)]] & -256) 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_ZEXT 0
[[(ARG1 + 8)]] LOAD 433 [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
0 COPY 0
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
(ARG2 + 8) PTRADD ARG2 2 4
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [ARG1] [ARG2]
 CBRANCH ([ARG1] INT_NOTEQUAL [ARG2])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_LESS f())
1 COPY 1
 CBRANCH (f() INT_LESS f())
 BRANCH VZERO
0 INT_LESS f() f()
 CBRANCH (4294967295 INT_SLESS f())
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CBRANCH ([([(ARG2 + 8)] + (f() * 8))] INT_LESS [([(ARG1 + 8)] + (f() * 8))])
(f() * 8) INT_MULT f() 8
0 COPY 0
f() INT_SEXT f()
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
([(ARG2 + 8)] + (f() * 8)) CAST ([(ARG2 + 8)] + (f() * 8))
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
(f() * 8) INT_MULT f() 8
([(ARG2 + 8)] + (f() * 8)) INT_ADD [(ARG2 + 8)] (f() * 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() INT_SEXT f()
(ARG1 + 8) CAST (ARG1 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
0 INT_LESS [([(ARG2 + 8)] + (f() * 8))] [([(ARG1 + 8)] + (f() * 8))]
[([(ARG2 + 8)] + (f() * 8))] LOAD 433 ([(ARG2 + 8)] + (f() * 8))
 CBRANCH (f() INT_LESS 65)
0 INT_SLESS 4294967295 f()
(RSP + -32) PTRSUB RSP -32
f(RSP) CAST f(RSP)
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -32) (RSP + -28) (RSP + -28)
(RSP + -28) PTRSUB RSP -28
0 INT_LESS f() 65
f() COPY f()
f() CALL func ([f(RSP)] + 4294967295)
 CBRANCH (f() INT_LESS 65)
([f(RSP)] + 4294967295) INT_ADD [f(RSP)] 4294967295
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be same for comparison" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 521 bool llvm::APInt::ult(const llvm::APInt&) const
bool llvm::APInt::ult(const llvm::APInt&) const COPY bool llvm::APInt::ult(const llvm::APInt&) const
BitWidth == RHS.BitWidth && "Bit widths must be same for comparison" COPY BitWidth == RHS.BitWidth && "Bit widths must be same for comparison"
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) CAST (f() + 40)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
(f() + 40) INT_ADD f() 40
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 RETURN 1
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
f() INT_SEXT f()
(f() * 8) INT_MULT f() 8
0 INT_LESS [([(ARG1 + 8)] + (f() * 8))] [([(ARG2 + 8)] + (f() * 8))]
 CBRANCH ([([(ARG1 + 8)] + (f() * 8))] INT_LESS [([(ARG2 + 8)] + (f() * 8))])
0 COPY 0
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
([(ARG2 + 8)] + (f() * 8)) CAST ([(ARG2 + 8)] + (f() * 8))
(f() * 8) INT_MULT f() 8
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
([(ARG2 + 8)] + (f() * 8)) INT_ADD [(ARG2 + 8)] (f() * 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
f() INT_SEXT f()
(ARG2 + 8) CAST (ARG2 + 8)
 BRANCH VZERO
[([(ARG2 + 8)] + (f() * 8))] LOAD 433 ([(ARG2 + 8)] + (f() * 8))
 BRANCH VZERO
0 COPY 0
0 INT_LESS f() 65
 BRANCH VZERO
 BRANCH VZERO
(f() + 4294967295) INT_ADD f() 4294967295
1 COPY 1
0 INT_ZEXT 0
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
([[(ARG2 + 8)]] & -256) INT_OR ([[(ARG2 + 8)]] & -256) 0
0 INT_LESS [[(ARG1 + 8)]] [[(ARG2 + 8)]]
[[(ARG1 + 8)]] LOAD 433 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
([[(ARG2 + 8)]] & -256) INT_AND [[(ARG2 + 8)]] -256
[[(ARG2 + 8)]] LOAD 433 [(ARG2 + 8)]
([(ARG2 + 8)] & -256) INT_AND [(ARG2 + 8)] -256
0 INT_LESS f() f()
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
0 INT_ZEXT 0
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_LESS [(ARG1 + 8)] [(ARG2 + 8)]
([(ARG2 + 8)] & -256) INT_OR ([(ARG2 + 8)] & -256) 0
 RETURN 1
 RETURN 0 f(ARG2)
 CALL libcall___stack_chk_fail_thunk
(ARG1 & 63) INT_AND ARG1 63
(ARG1 & 63) COPY (ARG1 & 63)
 RETURN 0 (ARG1 & 63)
f() CALL func ARG1
(f() & 63) INT_AND f() 63
 RETURN 0 (1 << (f() & 63))
(1 << (f() & 63)) COPY (1 << (f() & 63))
(1 << (f() & 63)) INT_LEFT 1 (f() & 63)
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
f() CALL func ARG2
0 INT_LESSEQUAL f() ARG2
f() CALL func ARG2
 CBRANCH (f() INT_LESSEQUAL ARG2)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h
bitPosition < getBitWidth() && "Bit position out of bounds!" COPY bitPosition < getBitWidth() && "Bit position out of bounds!"
 RETURN 0 (-256 & (f(ARG1) & f()))
bool llvm::APInt::operator[](unsigned int) const COPY bool llvm::APInt::operator[](unsigned int) const
(-256 & (f(ARG1) & f())) INT_AND (f(ARG1) & f()) -256
0 INT_NOTEQUAL (f(ARG1) & f()) 0
(f(ARG1) & f()) INT_AND f(ARG1) f()
 RETURN 1
 CALL libcall___assert_fail_thunk bitPosition < getBitWidth() && "Bit position out of bounds!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h 963 bool llvm::APInt::operator[](unsigned int) const
0 INT_ZEXT 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(-256 & (f(ARG1) & f())) INT_OR (-256 & (f(ARG1) & f())) 0
 BRANCH VZERO
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() INT_ZEXT f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() * 8) INT_MULT f() 8
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) INT_ADD (f() * 8) [(ARG1 + 8)]
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
(ARG1 + 8) CAST (ARG1 + 8)
[ARG1] LOAD 433 ARG1
 CALL func ARG1 ([ARG1] + 4294967295) ([ARG1] + 4294967295)
([ARG1] + 4294967295) INT_ADD [ARG1] 4294967295
 RETURN 0
(ARG1 + 8) PTRADD ARG1 2 4
[ARG1] LOAD 433 ARG1
f(ARG2) CALL func ARG1 ARG2 ARG2
f() CALL func ARG1
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
0 INT_NOTEQUAL [ARG1] [ARG2]
 CBRANCH ([ARG1] INT_NOTEQUAL [ARG2])
0 INT_EQUAL f() 0
 RETURN 0 f(ARG2)
 CBRANCH (f() INT_EQUAL 0)
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h
BitWidth == RHS.BitWidth && "Comparison requires equal bit widths" COPY BitWidth == RHS.BitWidth && "Comparison requires equal bit widths"
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Comparison requires equal bit widths" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h 978 bool llvm::APInt::operator==(const llvm::APInt&) const
bool llvm::APInt::operator==(const llvm::APInt&) const COPY bool llvm::APInt::operator==(const llvm::APInt&) const
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_EQUAL [(ARG1 + 8)] [(ARG2 + 8)]
([(ARG2 + 8)] & -256) INT_OR ([(ARG2 + 8)] & -256) 0
([(ARG2 + 8)] & -256) INT_AND [(ARG2 + 8)] -256
 BRANCH VZERO
(ARG2 + 8) CAST (ARG2 + 8)
0 INT_ZEXT 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
f(ARG2) CALL func ARG1 ARG2 ARG2
f() CALL func ARG1 ARG2 ARG2
0 INT_NOTEQUAL f(ARG2) 1
 CBRANCH (f(ARG2) INT_NOTEQUAL 1)
 CBRANCH (f() INT_NOTEQUAL 1)
 RETURN 0 0
0 COPY 0
1 COPY 1
 RETURN 0 1
0 INT_NOTEQUAL f() 1
[ARG1] LOAD 433 ARG1
 CALL func (RSP + -72) ARG1 ARG1
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 2 4
[ARG1] LOAD 433 ARG1
(ARG2 + 8) PTRADD ARG2 2 4
 CALL func (RSP + -56) ARG2 ARG2
[ARG2] LOAD 433 ARG2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [ARG1] [ARG2]
 CBRANCH ([ARG1] INT_NOTEQUAL [ARG2])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(RSP)
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
(RSP + -72) PTRSUB RSP -72
f() CALL func (RSP + -72) (RSP + -56) (RSP + -56)
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -72)
 CALL func (RSP + -72)
(RSP + -72) PTRSUB RSP -72
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f(RSP) CALL func (RSP + -72) (RSP + -56) (RSP + -56)
(RSP + -72) PTRSUB RSP -72
0 COPY 0
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be same for comparison" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 553 bool llvm::APInt::slt(const llvm::APInt&) const
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
BitWidth == RHS.BitWidth && "Bit widths must be same for comparison" COPY BitWidth == RHS.BitWidth && "Bit widths must be same for comparison"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
bool llvm::APInt::slt(const llvm::APInt&) const COPY bool llvm::APInt::slt(const llvm::APInt&) const
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
f(RSP) COPY f(RSP)
 RETURN 1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(ARG1 + 8) CAST (ARG1 + 8)
(64 - ([ARG1] / 2147483647)) INT_SUB 64 ([ARG1] / 2147483647)
0 INT_NOTEQUAL f() 0
(ARG2 + 8) CAST (ARG2 + 8)
0 INT_OR VZERO 0
VZERO INT_AND VZERO 4294967040
(64 - ([ARG1] / 2147483647)) INT_SUB 64 ([ARG1] / 2147483647)
(RSP + -72) PTRSUB RSP -72
([ARG1] / 2147483647) SUBPIECE [ARG1] 0
0 INT_NOTEQUAL f() 0
([ARG1] / 2147483647) SUBPIECE [ARG1] 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_ZEXT 0
(([(ARG1 + 8)] << (63 & (64 - ([ARG1] / 2147483647)))) >> (63 & (64 - ([ARG1] / 2147483647)))) INT_SRIGHT ([(ARG1 + 8)] << (63 & (64 - ([ARG1] / 2147483647)))) (63 & (64 - ([ARG1] / 2147483647)))
 CALL func (RSP + -72)
0 INT_EQUAL f() 0
(RSP + -56) PTRSUB RSP -56
(63 & (64 - ([ARG1] / 2147483647))) INT_AND (64 - ([ARG1] / 2147483647)) 63
f() CALL func (RSP + -56)
(([(ARG2 + 8)] << (63 & (64 - ([ARG1] / 2147483647)))) >> (63 & (64 - ([ARG1] / 2147483647)))) INT_SRIGHT ([(ARG2 + 8)] << (63 & (64 - ([ARG1] / 2147483647)))) (63 & (64 - ([ARG1] / 2147483647)))
(63 & (64 - ([ARG1] / 2147483647))) INT_AND (64 - ([ARG1] / 2147483647)) 63
([(ARG1 + 8)] << (63 & (64 - ([ARG1] / 2147483647)))) INT_LEFT [(ARG1 + 8)] (63 & (64 - ([ARG1] / 2147483647)))
 CALL func (RSP + -56)
([ARG1] / 2147483647) SUBPIECE [ARG1] 0
(63 & (64 - ([ARG1] / 2147483647))) INT_AND (64 - ([ARG1] / 2147483647)) 63
([ARG1] / 2147483647) SUBPIECE [ARG1] 0
(RSP + -72) PTRSUB RSP -72
0 INT_SLESS (([(ARG1 + 8)] << (63 & (64 - ([ARG1] / 2147483647)))) >> (63 & (64 - ([ARG1] / 2147483647)))) (([(ARG2 + 8)] << (63 & (64 - ([ARG1] / 2147483647)))) >> (63 & (64 - ([ARG1] / 2147483647))))
 BRANCH VZERO
([(ARG2 + 8)] << (63 & (64 - ([ARG1] / 2147483647)))) INT_LEFT [(ARG2 + 8)] (63 & (64 - ([ARG1] / 2147483647)))
(64 - ([ARG1] / 2147483647)) INT_SUB 64 ([ARG1] / 2147483647)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(63 & (64 - ([ARG1] / 2147483647))) INT_AND (64 - ([ARG1] / 2147483647)) 63
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(64 - ([ARG1] / 2147483647)) INT_SUB 64 ([ARG1] / 2147483647)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG2
 RETURN 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 STORE 433 (ARG1 + 8) (f() | [(ARG1 + 8)])
(f() * 8) INT_MULT f() 8
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
(f() | [([(ARG1 + 8)] + (f() * 8))]) INT_OR [([(ARG1 + 8)] + (f() * 8))] f()
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 ([(ARG1 + 8)] + (f() * 8)) (f() | [([(ARG1 + 8)] + (f() * 8))])
(ARG1 + 8) CAST (ARG1 + 8)
f() INT_ZEXT f()
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
(f() | [(ARG1 + 8)]) INT_OR f() [(ARG1 + 8)]
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG2
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 RETURN 0
 STORE 433 ([(ARG1 + 8)] + (f() * 8)) (~(f()) & [([(ARG1 + 8)] + (f() * 8))])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() INT_ZEXT f()
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
~(f()) INT_NEGATE f()
 BRANCH VZERO
(~(f()) & [(ARG1 + 8)]) INT_AND ~(f()) [(ARG1 + 8)]
 STORE 433 (ARG1 + 8) (~(f()) & [(ARG1 + 8)])
(f() * 8) INT_MULT f() 8
(ARG1 + 8) CAST (ARG1 + 8)
f() INT_ZEXT f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() * 8) INT_MULT f() 8
(~(f()) & [([(ARG1 + 8)] + (f() * 8))]) INT_AND [([(ARG1 + 8)] + (f() * 8))] ~(f())
~(f()) INT_NEGATE f()
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
f() CALL func ARG1 ARG2 ARG2
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 ARG2 ARG2
0 INT_LESSEQUAL [ARG1] ARG2
[ARG1] LOAD 433 ARG1
 CBRANCH ([ARG1] INT_LESSEQUAL ARG2)
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
 RETURN 0
 CALL libcall___assert_fail_thunk bitPosition < BitWidth && "Out of the bit-width range!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 610 void llvm::APInt::flipBit(unsigned int)
bitPosition < BitWidth && "Out of the bit-width range!" COPY bitPosition < BitWidth && "Out of the bit-width range!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
0 INT_EQUAL f() 0
 RETURN 1
void llvm::APInt::flipBit(unsigned int) COPY void llvm::APInt::flipBit(unsigned int)
[ARG1] LOAD 433 ARG1
f(ARG1) CALL func ARG1
 RETURN 0 (([ARG1] - f(ARG1)) + 4294967295)
(([ARG1] - f(ARG1)) + 4294967295) COPY (([ARG1] - f(ARG1)) + 4294967295)
(([ARG1] - f(ARG1)) + 4294967295) INT_ADD ([ARG1] - f(ARG1)) 4294967295
([ARG1] - f(ARG1)) INT_SUB [ARG1] f(ARG1)
ARG1 COPY ARG1
0 INT_NOTEQUAL ARG3 16
0 INT_NOTEQUAL ARG3 10
0 INT_EQUAL ARG3 2
0 INT_EQUAL ARG3 16
0 INT_NOTEQUAL ARG3 36
0 INT_EQUAL ARG3 8
0 INT_EQUAL ARG3 10
0 INT_NOTEQUAL ARG3 2
0 INT_NOTEQUAL ARG3 8
 CALL func (RSP + -72) f(ARG2) f() f(ARG2) ARG3
ARG2 COPY ARG2
0 INT_EQUAL ARG2 0
ARG2 COPY ARG2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG2 INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (ARG3 INT_EQUAL 10)
0 INT_EQUAL f(ARG2) 1
 CBRANCH (f(ARG2) INT_EQUAL 1)
 CBRANCH (f(ARG2) INT_EQUAL 1)
0 INT_EQUAL f(ARG2) 1
 CBRANCH (ARG3 INT_EQUAL 16)
f(ARG2) COPY f(ARG2)
f(ARG2) COPY f(ARG2)
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
0 INT_EQUAL f() 0
0 INT_EQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
f() COPY f()
(f() + 40) CAST (f() + 40)
((f(ARG2) / 2147483647) * 4) INT_ADD ((f(ARG2) / 2147483647) * 4) 0
f() COPY f()
f(ARG2) COPY f(ARG2)
((f(ARG2) / 2147483647) * 4) INT_MULT (f(ARG2) / 2147483647) 4
[(f() + 40)] LOAD 433 (f() + 40)
 BRANCH VZERO
 CBRANCH (ARG3 INT_NOTEQUAL 8)
0 INT_ZEXT 0
[f()] LOAD 433 f()
(RSP + -136) PTRSUB RSP -136
0 INT_EQUAL [f()] 45
f() CAST f()
f() CALL func (RSP + -136)
[f()] LOAD 433 f()
 CBRANCH ([f()] INT_EQUAL 45)
0 INT_EQUAL [f()] 45
 CBRANCH (ARG3 INT_NOTEQUAL 16)
 CALL func (RSP + -72)
0 COPY 0
(RSP + -72) PTRSUB RSP -72
f() CALL func (RSP + -72)
(RSP + -72) PTRSUB RSP -72
0 INT_NOTEQUAL f() 4294967295
(f() + 1) INT_ADD f() 1
 CBRANCH (f() INT_NOTEQUAL 4294967295)
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
(RSP + -72) PTRSUB RSP -72
0 INT_NOTEQUAL f(ARG2) 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(ARG2)
 RETURN 1
((f(ARG2) * 16) / 6442450941) SUBPIECE ((f(ARG2) * 16) / 3) 0
(f(ARG2) * 16) INT_LEFT f(ARG2) 4
(f(ARG2) * 16) CAST (f(ARG2) * 16)
7 COPY 7
 BRANCH VZERO
((f(ARG2) * 16) / 3) INT_DIV (f(ARG2) * 16) 3
(f(ARG2) * 64) CAST (f(ARG2) * 64)
((f(ARG2) * 64) / 18) INT_DIV (f(ARG2) * 64) 18
((f(ARG2) * 64) / 38654705646) SUBPIECE ((f(ARG2) * 64) / 18) 0
 BRANCH VZERO
(f(ARG2) * 64) INT_LEFT f(ARG2) 6
4 COPY 4
 BRANCH VZERO
 CBRANCH ([f()] INT_EQUAL 43)
 CBRANCH ((ARG2 + -1) INT_EQUAL 0)
[f()] LOAD 433 f()
0 INT_EQUAL [f()] 43
(ARG2 + -1) INT_ADD ARG2 -1
0 INT_EQUAL (ARG2 + -1) 0
(f() + 1) PTRADD f() 1 1
 CBRANCH (ARG3 INT_NOTEQUAL 2)
 CBRANCH (ARG3 INT_EQUAL 2)
(f(ARG2) / 2147483647) SUBPIECE f(ARG2) 0
 CBRANCH (ARG3 INT_EQUAL 8)
((f(ARG2) / 2147483647) * 3) INT_ADD ((f(ARG2) / 2147483647) * 3) 0
((f(ARG2) / 2147483647) * 3) INT_MULT (f(ARG2) / 2147483647) 3
 BRANCH VZERO
0 COPY 0
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
slen && "String is only a sign, needs a value." COPY slen && "String is only a sign, needs a value."
 CALL libcall___assert_fail_thunk slen && "String is only a sign, needs a value." /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 629 0
 CBRANCH (ARG3 INT_NOTEQUAL 36)
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
 CBRANCH (ARG3 INT_NOTEQUAL 10)
0 COPY 0
(radix == 10 || radix == 8 || radix == 16 || radix == 2 || radix == 36) && "Radix should be 2, 8, 10, 16, or 36!" COPY (radix == 10 || radix == 8 || radix == 16 || radix == 2 || radix == 36) && "Radix should be 2, 8, 10, 16, or 36!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 RETURN 1
 CALL libcall___assert_fail_thunk (radix == 10 || radix == 8 || radix == 16 || radix == 2 || radix == 36) && "Radix should be 2, 8, 10, 16, or 36!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 619 0
0 COPY 0
!str.empty() && "Invalid string length" COPY !str.empty() && "Invalid string length"
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 CALL libcall___assert_fail_thunk !str.empty() && "Invalid string length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 616 0
(f(ARG2) / 2147483647) INT_ADD (f(ARG2) / 2147483647) 0
 BRANCH VZERO
f() INT_ADD f() 0
f() COPY f()
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
[ARG1] LOAD 433 ARG1
f(ARG1 , ARG4) LOAD 433 ARG1
 STORE 433 ARG1 (f(ARG1 , ARG4) + (8 - ARG4))
f(ARG1 , ARG4) LOAD 433 ARG1
0 INT_LESSEQUAL ((8 - ARG4) + [ARG1]) ARG2
(ARG3 + ARG4) INT_ADD ARG3 ARG4
(8 - ARG4) INT_SUB 8 ARG4
 CBRANCH (((8 - ARG4) + [ARG1]) INT_LESSEQUAL ARG2)
((8 - ARG4) + [ARG1]) INT_ADD (8 - ARG4) [ARG1]
0 COPY 0
[ARG1] CAST [ARG1]
 RETURN 0 0
f(ARG1 , ARG4) CAST f(ARG1 , ARG4)
(f(ARG1 , ARG4) + (8 - ARG4)) CAST (f(ARG1 , ARG4) + (8 - ARG4))
(f(ARG1 , ARG4) + (8 - ARG4)) INT_ADD f(ARG1 , ARG4) (8 - ARG4)
(ARG3 + ARG4) CAST (ARG3 + ARG4)
 CALL libcall_memcpy_thunk f(ARG1 , ARG4) (ARG3 + ARG4) (8 - ARG4)
ARG3 COPY ARG3
ARG4 COPY ARG4
f() CALL func (RSP + -64) ARG4 (RSP + -80) 0
ARG5 COPY ARG5
ARG1 COPY ARG1
ARG2 COPY ARG2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
(RSP + -64) PTRSUB RSP -64
(RSP + -80) PTRSUB RSP -80
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -80) PTRSUB RSP -80
(f() + 40) CAST (f() + 40)
(RSP + -80) PTRSUB RSP -80
[ARG2] LOAD 433 ARG2
f() CALL func (RSP + -64) f(ARG4) (RSP + -80) f(ARG3 , ARG4)
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
f(ARG1) COPY f(ARG1)
(ARG4 - ARG3) INT_SUB ARG4 ARG3
[(f() + 40)] LOAD 433 (f() + 40)
 CALL libcall_memcpy_thunk ARG3 (RSP + -80) (ARG4 - ARG3)
ARG3 CAST ARG3
0 INT_EQUAL [ARG2] 0
 CBRANCH ([ARG2] INT_EQUAL 0)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
ARG1 COPY ARG1
(f() + 40) INT_ADD f() 40
(RSP + -64) PTRSUB RSP -64
f(ARG1 , ARG3) COPY f(ARG1 , ARG3)
0 INT_NOTEQUAL 0 [(f() + 40)]
 RETURN 0 f(ARG1 , ARG3)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL libcall_abort_thunk
(ARG1 + 72) CAST (ARG1 + 72)
 STORE 433 ARG2 (f(ARG2) + 64)
(ARG1 + 96) INT_ADD ARG1 96
 STORE 433 (ARG1 + 104) A_Stack[-0x70]:8
(f(ARG2) + 64) INT_ADD f(ARG2) 64
[(ARG1 + 120)] LOAD 433 (ARG1 + 120)
ARG1 CAST ARG1
 STORE 433 (ARG1 + 64) A_Stack[-0x98]:8
ARG1 CAST ARG1
 STORE 433 (ARG1 + 96) A_Stack[-0x78]:8
(ARG1 + 88) INT_ADD ARG1 88
ARG1 CAST ARG1
ARG1 CAST ARG1
(ARG1 + 112) CAST (ARG1 + 112)
(ARG1 + 64) CAST (ARG1 + 64)
f(ARG2) LOAD 433 ARG2
(ARG1 + 104) CAST (ARG1 + 104)
 CALL func (RSP + -152) ARG1 [(ARG1 + 120)] ARG1
 CALL func (ARG1 + 64) ARG1 (ARG1 + 64)
 BRANCH VZERO
 STORE 433 (ARG1 + 88) A_Stack[-0x80]:8
(ARG1 + 80) INT_ADD ARG1 80
ARG1 CAST ARG1
(ARG1 + 64) INT_ADD ARG1 64
ARG1 CAST ARG1
 STORE 433 ARG2 64
(ARG1 + 96) CAST (ARG1 + 96)
(ARG1 + 112) INT_ADD ARG1 112
 STORE 433 (ARG1 + 80) A_Stack[-0x88]:8
(ARG1 + 72) INT_ADD ARG1 72
(ARG1 + 88) CAST (ARG1 + 88)
 STORE 433 (ARG1 + 112) A_Stack[-0x68]:8
(ARG1 + 104) INT_ADD ARG1 104
ARG1 CAST ARG1
(ARG1 + 120) CAST (ARG1 + 120)
(RSP + -152) PTRSUB RSP -152
(ARG1 + 120) INT_ADD ARG1 120
ARG1 CAST ARG1
(ARG1 + 80) CAST (ARG1 + 80)
 STORE 433 (ARG1 + 72) A_Stack[-0x90]:8
ARG1 CAST ARG1
(ARG1 + 64) INT_ADD ARG1 64
 CALL func ARG1 ARG2 f(ARG1 , ARG3) ARG4
f(ARG1 , ARG3) CALL func ARG1 (RSP + -24) ARG3 ARG4 f()
f() CALL func ARG5
ARG1 COPY ARG1
ARG2 COPY ARG2
 RETURN 0
(RSP + -24) PTRSUB RSP -24
 CALL func (RSP + -152) 0 (RSP + -152) (RSP + -88) ARG1
40 INT_ADD 0 40
(RSP + -152) PTRSUB RSP -152
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -152)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -152) PTRSUB RSP -152
(RSP + -152) PTRSUB RSP -152
[40] LOAD 433 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -88) PTRSUB RSP -88
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
f() CALL func ARG1 ARG2 ARG2
ARG1 COPY ARG1
ARG2 COPY ARG2
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_LESS f() 65
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_LESS 65)
f() CALL func
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 CBRANCH ((f(ARG1) + 64) INT_NOTEQUAL f(ARG1))
0 INT_NOTEQUAL (f(ARG1) + 64) f(ARG1)
 CALL func (RSP + -72) (f(ARG1) + 64) (f(ARG1) + 64)
(f(ARG1) + 64) INT_ADD f(ARG1) 64
(RSP + -72) PTRSUB RSP -72
 BRANCH VZERO
 CBRANCH ((f() & 63) INT_NOTEQUAL 0)
(RSP + -72) PTRSUB RSP -72
(f(ARG2) + -64) INT_ADD f(ARG2) -64
 CALL func (RSP + -72) (f(ARG2) + -64) (f(ARG2) + -64)
(f() & -64) INT_AND f() -64
 BRANCH VZERO
f() CALL func ARG1 f() f() f()
f() CALL func (RSP + -72) f() f()
0 INT_NOTEQUAL (f() & 63) 0
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -120) f() f()
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -72) ARG1 f() ARG1
 CALL func (RSP + -72) f() f()
(ARG1 + (f() & -64)) INT_ADD ARG1 (f() & -64)
(RSP + -72) PTRSUB RSP -72
(f() & 63) INT_AND f() 63
(RSP + -72) PTRSUB RSP -72
f() COPY f()
 CALL func ARG1 ARG2 ARG2
 RETURN 0
f() CALL func ARG1
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
0 INT_EQUAL f() 0
 RETURN 0
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
 CALL func [(ARG1 + 8)] ([(ARG1 + 8)] + (f() * 8)) ([(ARG1 + 8)] + (f() * 8))
 CALL func (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG2 + (f(ARG3) * 8)) INT_ADD ARG2 (f(ARG3) * 8)
(ARG3 + 4294967295) INT_ADD ARG3 4294967295
(ARG4 & 63) INT_AND ARG4 63
(64 - ARG4) INT_SUB 64 ARG4
((f(ARG3) * 8) + ARG1) INT_ADD (f(ARG3) * 8) ARG1
 RETURN 0
0 COPY 0
0 INT_SLESS 4294967295 f(ARG3)
 CBRANCH (4294967295 INT_SLESS f(ARG3))
f(ARG3) INT_SEXT f(ARG3)
(f(ARG2 , ARG3 , ARG4) | ([(ARG2 + (f(ARG3) * 8))] >> (ARG4 & 63))) INT_OR ([(ARG2 + (f(ARG3) * 8))] >> (ARG4 & 63)) f(ARG2 , ARG3 , ARG4)
 BRANCH VZERO
(f(ARG3) + 4294967295) INT_ADD f(ARG3) 4294967295
([(ARG2 + (f(ARG3) * 8))] << (63 & (64 - ARG4))) INT_LEFT [(ARG2 + (f(ARG3) * 8))] (63 & (64 - ARG4))
f(ARG3) INT_SEXT f(ARG3)
([(ARG2 + (f(ARG3) * 8))] >> (ARG4 & 63)) INT_RIGHT [(ARG2 + (f(ARG3) * 8))] (ARG4 & 63)
(63 & (64 - ARG4)) INT_AND (64 - ARG4) 63
[(ARG2 + (f(ARG3) * 8))] LOAD 433 (ARG2 + (f(ARG3) * 8))
 STORE 433 ((f(ARG3) * 8) + ARG1) (f(ARG2 , ARG3 , ARG4) | ([(ARG2 + (f(ARG3) * 8))] >> (ARG4 & 63)))
(f(ARG3) * 8) INT_MULT f(ARG3) 8
(ARG2 + (f(ARG3) * 8)) CAST (ARG2 + (f(ARG3) * 8))
((f(ARG3) * 8) + ARG1) CAST ((f(ARG3) * 8) + ARG1)
(f(ARG3) * 8) INT_MULT f(ARG3) 8
(ARG3 / 64) INT_RIGHT ARG3 6
 CALL func f() [(ARG2 + 8)] f() ARG3
0 INT_EQUAL ARG3 0
(ARG3 & 63) INT_AND ARG3 63
0 INT_LESS ARG3 64
0 INT_LESS ARG3 [ARG2]
(ARG3 / 2147483647) SUBPIECE ARG3 0
0 INT_LESS ARG3 [ARG2]
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CALL func ARG1 [ARG2] 0 0
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CALL func ARG1 [ARG2] ([(ARG2 + 8)] >> (63 & (ARG3 / 2147483647))) 0
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CALL func ARG1 [ARG2] 0 0
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
f() CALL func ARG2
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CBRANCH (ARG3 INT_LESS [ARG2])
 CBRANCH (ARG3 INT_LESS [ARG2])
 CBRANCH (f() INT_LESSEQUAL f(ARG3))
((f(ARG3) * 8) + f()) CAST ((f(ARG3) * 8) + f())
f(ARG3) INT_ZEXT f(ARG3)
f() CAST f()
0 INT_LESSEQUAL f() f(ARG3)
((f(ARG3) * 8) + f()) INT_ADD f() (f(ARG3) * 8)
(f(ARG3) * 8) INT_MULT f(ARG3) 8
 BRANCH VZERO
(f(ARG3) + 1) INT_ADD f(ARG3) 1
 STORE 433 ((f(ARG3) * 8) + f()) 0
 CBRANCH (ARG3 INT_EQUAL 0)
0 INT_LESS f() 1143914305352105985
 BRANCH VZERO
f() CALL libcall_operator.new[]_thunk f()
 CBRANCH (f() INT_LESS 1143914305352105985)
f() INT_ZEXT f()
 CBRANCH (ARG3 INT_LESS 64)
(63 & (ARG3 / 2147483647)) INT_AND (ARG3 / 2147483647) 63
 BRANCH VZERO
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 BRANCH VZERO
([(ARG2 + 8)] >> (63 & (ARG3 / 2147483647))) INT_RIGHT [(ARG2 + 8)] (63 & (ARG3 / 2147483647))
 CBRANCH ((ARG3 & 63) INT_EQUAL 0)
(ARG2 + 8) CAST (ARG2 + 8)
(RSP + -40) PTRSUB RSP -40
((((f() - (ARG3 / 64)) + 1) * 8) + f()) CAST ((((f() - (ARG3 / 64)) + 1) * 8) + f())
f() CAST f()
 CBRANCH (f() INT_LESS ((f() - (ARG3 / 64)) + 1))
((f() - (ARG3 / 64)) + 1) INT_ZEXT ((f() - (ARG3 / 64)) + 1)
0 INT_LESS f() ((f() - (ARG3 / 64)) + 1)
((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1)) INT_ADD (ARG3 / 64) ((f() - (ARG3 / 64)) + 1)
(RSP + -40) PTRSUB RSP -40
([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1)) * 8)) INT_ADD [(ARG2 + 8)] (((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1)) * 8)
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) f() [ARG2] f()
(RSP + -40) PTRSUB RSP -40
[([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1)) * 8))] LOAD 433 ([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1)) * 8))
((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1)) INT_ZEXT ((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1))
0 INT_LESSEQUAL f() f(ARG3)
(RSP + -40) PTRSUB RSP -40
 BRANCH VZERO
([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1)) * 8)) CAST ([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1)) * 8))
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1)) * 8) INT_MULT ((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1)) 8
0 COPY 0
(RSP + -40) PTRSUB RSP -40
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(f() - (ARG3 / 64)) INT_SUB f() (ARG3 / 64)
((((f() - (ARG3 / 64)) + 1) * 8) + f()) INT_ADD (((f() - (ARG3 / 64)) + 1) * 8) f()
(f() - (ARG3 / 64)) INT_SUB f() (ARG3 / 64)
(((f() - (ARG3 / 64)) + 1) * 8) INT_MULT ((f() - (ARG3 / 64)) + 1) 8
(RSP + -40) PTRSUB RSP -40
 CBRANCH (f() INT_LESSEQUAL f(ARG3))
 CALL func (RSP + -40)
(f() - (ARG3 / 64)) INT_SUB f() (ARG3 / 64)
((ARG3 & 63) / 2147483647) SUBPIECE (ARG3 & 63) 0
 CALL func (RSP + -40)
 CBRANCH ((f() - (ARG3 / 64)) INT_LESSEQUAL f())
 STORE 433 ((((f() - (ARG3 / 64)) + 1) * 8) + f()) ([([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1)) * 8))] >> ((ARG3 & 63) / 2147483647))
 CALL func (RSP + -40)
0 INT_LESSEQUAL (f() - (ARG3 / 64)) f()
0 COPY 0
((f() - (ARG3 / 64)) + 1) INT_SUB (f() - (ARG3 / 64)) 1
 CALL func (RSP + -40) f() [ARG2] f()
([([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1)) * 8))] >> ((ARG3 & 63) / 2147483647)) INT_RIGHT [([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + 1)) * 8))] ((ARG3 & 63) / 2147483647)
 BRANCH VZERO
(f(ARG3) * 8) INT_MULT f(ARG3) 8
 BRANCH VZERO
(f(ARG3) + 1) INT_ADD f(ARG3) 1
f(ARG3) INT_ZEXT f(ARG3)
 STORE 433 ((f(ARG3) * 8) + f()) 0
f() CAST f()
((f(ARG3) * 8) + f()) INT_ADD f() (f(ARG3) * 8)
((f(ARG3) * 8) + f()) CAST ((f(ARG3) * 8) + f())
([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8)) CAST ([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))
((f() * 8) + f()) INT_ADD (f() * 8) f()
[([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))] LOAD 433 ([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))
(f() * 8) INT_MULT f() 8
((ARG3 / 64) + f()) INT_ZEXT ((ARG3 / 64) + f())
f() INT_ZEXT f()
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(ARG2 + 8) CAST (ARG2 + 8)
(((ARG3 / 64) + f()) * 8) INT_MULT ((ARG3 / 64) + f()) 8
((ARG3 / 64) + f()) INT_ADD (ARG3 / 64) f()
f() CAST f()
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 STORE 433 ((f() * 8) + f()) [([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))]
([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8)) INT_ADD [(ARG2 + 8)] (((ARG3 / 64) + f()) * 8)
((f() * 8) + f()) CAST ((f() * 8) + f())
 BRANCH VZERO
(f() * 8) INT_LEFT f() 3
-1 COPY -1
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
0 INT_EQUAL (ARG3 & 63) 0
(RSP + -40) PTRSUB RSP -40
(ARG2 + 8) CAST (ARG2 + 8)
 BRANCH VZERO
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) f() [ARG2] f()
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CALL func (RSP + -40)
([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8)) INT_ADD [(ARG2 + 8)] (((ARG3 / 64) + f()) * 8)
(((ARG3 / 64) + f()) * 8) INT_MULT ((ARG3 / 64) + f()) 8
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 STORE 433 ((f() * 8) + f()) f(ARG2 , ARG3)
((f() * 8) + f()) CAST ((f() * 8) + f())
f(ARG2 , ARG3) INT_OR ([([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8))] << (63 & (64 - ((ARG3 & 63) / 2147483647)))) ([([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))] >> ((ARG3 & 63) / 2147483647))
f() INT_ZEXT f()
(f() + 1) INT_ADD f() 1
[([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))] LOAD 433 ([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))
([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8)) CAST ([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))
 BRANCH VZERO
(ARG2 + 8) CAST (ARG2 + 8)
((f() * 8) + f()) INT_ADD (f() * 8) f()
f() CAST f()
([([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8))] << (63 & (64 - ((ARG3 & 63) / 2147483647)))) INT_LEFT [([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8))] (63 & (64 - ((ARG3 & 63) / 2147483647)))
([([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))] >> ((ARG3 & 63) / 2147483647)) INT_RIGHT [([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))] ((ARG3 & 63) / 2147483647)
(64 - ((ARG3 & 63) / 2147483647)) INT_SUB 64 ((ARG3 & 63) / 2147483647)
(((ARG3 / 64) + f()) + 1) INT_ZEXT (((ARG3 / 64) + f()) + 1)
(((ARG3 / 64) + f()) + 1) INT_ADD ((ARG3 / 64) + f()) 1
([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8)) INT_ADD [(ARG2 + 8)] ((((ARG3 / 64) + f()) + 1) * 8)
((((ARG3 / 64) + f()) + 1) * 8) INT_MULT (((ARG3 / 64) + f()) + 1) 8
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
((ARG3 / 64) + f()) INT_ZEXT ((ARG3 / 64) + f())
[([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8))] LOAD 433 ([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8))
(63 & (64 - ((ARG3 & 63) / 2147483647))) INT_AND (64 - ((ARG3 & 63) / 2147483647)) 63
((ARG3 / 64) + f()) INT_ADD (ARG3 / 64) f()
((ARG3 / 64) + f()) INT_ADD (ARG3 / 64) f()
([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8)) CAST ([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8))
(f() * 8) INT_MULT f() 8
(ARG2 + 8) CAST (ARG2 + 8)
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG3 ARG2
 CALL func ARG1 f() ([(ARG3 + 8)] | [(ARG2 + 8)]) 0
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
f() CALL func ARG2
[ARG3] LOAD 433 ARG3
(ARG3 + 8) PTRADD ARG3 2 4
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([ARG2] INT_NOTEQUAL [ARG3])
0 INT_NOTEQUAL [ARG2] [ARG3]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
(f() + 40) INT_ADD f() 40
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h
BitWidth == RHS.BitWidth && "Bit widths must be the same" COPY BitWidth == RHS.BitWidth && "Bit widths must be the same"
llvm::APInt llvm::APInt::operator|(const llvm::APInt&) const COPY llvm::APInt llvm::APInt::operator|(const llvm::APInt&) const
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
 RETURN 1
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be the same" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h 791 llvm::APInt llvm::APInt::operator|(const llvm::APInt&) const
(f() + 40) CAST (f() + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
0 INT_EQUAL f() 0
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
(ARG3 + 8) CAST (ARG3 + 8)
 BRANCH VZERO
([(ARG3 + 8)] | [(ARG2 + 8)]) INT_OR [(ARG2 + 8)] [(ARG3 + 8)]
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
(ARG3 % [ARG2]) INT_REM ARG3 [ARG2]
 CALL func ARG1 ARG2 ARG2
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -56) (RSP + -40) (RSP + -56)
 CALL func (RSP + -56) ARG2 (ARG3 % [ARG2]) ARG2
 CALL func (RSP + -40) ARG2 ([ARG2] - (ARG3 % [ARG2])) ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
 CBRANCH ((ARG3 % [ARG2]) INT_EQUAL 0)
0 INT_EQUAL (ARG3 % [ARG2]) 0
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_NOTEQUAL 0 [(f() + 40)]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
([ARG2] - (ARG3 % [ARG2])) INT_SUB [ARG2] (ARG3 % [ARG2])
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 ARG1
ARG2 INT_ZEXT ARG2
 CALL func (RSP + -56) ARG1 ARG2 ARG1
f(RSP) CALL func ARG1 (RSP + -56) (RSP + -56)
f() CALL func ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() & 4294967295) INT_AND f() 4294967295
((f() & 4294967295) % ARG2) INT_REM (f() & 4294967295) ARG2
(((f() & 4294967295) % ARG2) / 2147483647) SUBPIECE ((f() & 4294967295) % ARG2) 0
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ((((f() & 4294967295) % ARG2) / 2147483647) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (((f() & 4294967295) % ARG2) / 2147483647) 0
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(RSP)
 CALL func (RSP + -56)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -56) PTRSUB RSP -56
40 CAST 40
bool llvm::APInt::isSplat(unsigned int) const COPY bool llvm::APInt::isSplat(unsigned int) const
[40] LOAD 433 40
getBitWidth() % SplatSizeInBits == 0 && "SplatSizeInBits must divide width!" COPY getBitWidth() % SplatSizeInBits == 0 && "SplatSizeInBits must divide width!"
(RSP + -56) PTRSUB RSP -56
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 RETURN 1
f(RSP) COPY f(RSP)
 CALL libcall___assert_fail_thunk getBitWidth() % SplatSizeInBits == 0 && "SplatSizeInBits must divide width!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 677 bool llvm::APInt::isSplat(unsigned int) const
(RSP + -56) PTRSUB RSP -56
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ([ARG2] - ARG3) ARG2
[ARG2] LOAD 433 ARG2
([ARG2] - ARG3) INT_SUB [ARG2] ARG3
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
40 INT_ADD 0 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 ARG1
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -56) ([ARG2] - ARG3) (RSP + -56)
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
 CALL func (RSP + -56) ARG2 ([ARG2] - ARG3) ARG2
([ARG2] - ARG3) INT_SUB [ARG2] ARG3
([ARG2] - ARG3) INT_SUB [ARG2] ARG3
(RSP + -56) PTRSUB RSP -56
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(RSP + -56) PTRSUB RSP -56
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) INT_ADD 0 40
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
 CALL func (RSP + -56)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 CALL func ~(ARG1) ARG2 ~(ARG1)
~(ARG1) INT_NEGATE ARG1
 RETURN 0
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 RETURN 0 f()
 CBRANCH ([([(ARG1 + 8)] + (f() * 8))] INT_NOTEQUAL -1)
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (4294967295 INT_SLESS f())
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
(f() + 64) INT_ADD f() 64
0 INT_SLESS 4294967295 f()
 BRANCH VZERO
(f() + 4294967295) INT_ADD f() 4294967295
f() INT_SEXT f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
f() CALL func [([(ARG1 + 8)] + (f() * 8))] 2
(f() * 8) INT_MULT f() 8
(f() + f()) INT_ADD f() f()
 BRANCH VZERO
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
f() INT_SEXT f()
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
0 INT_NOTEQUAL [([(ARG1 + 8)] + (f() * 8))] -1
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() * 8) INT_MULT f() 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (f() INT_EQUAL f(ARG1))
(f() + 4294967295) INT_ADD f() 4294967295
0 INT_EQUAL f() f(ARG1)
(64 - [ARG1]) INT_SUB 64 [ARG1]
 BRANCH VZERO
((f() + 4294967295) * 8) INT_MULT (f() + 4294967295) 8
([([(ARG1 + 8)] + ((f() + 4294967295) * 8))] << (63 & (f(ARG1) / 2147483647))) INT_LEFT [([(ARG1 + 8)] + ((f() + 4294967295) * 8))] (63 & (f(ARG1) / 2147483647))
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (([ARG1] & 63) INT_EQUAL 0)
f() CALL func ([(ARG1 + 8)] << (63 & ((64 - [ARG1]) / 2147483647))) 2 ([(ARG1 + 8)] << (63 & ((64 - [ARG1]) / 2147483647))) (64 - [ARG1])
(63 & (f(ARG1) / 2147483647)) INT_AND (f(ARG1) / 2147483647) 63
0 INT_EQUAL ([ARG1] & 63) 0
([(ARG1 + 8)] + ((f() + 4294967295) * 8)) CAST ([(ARG1 + 8)] + ((f() + 4294967295) * 8))
([ARG1] & 63) INT_AND [ARG1] 63
(f() + 4294967295) INT_SEXT (f() + 4294967295)
((64 - [ARG1]) / 2147483647) SUBPIECE (64 - [ARG1]) 0
(ARG1 + 8) CAST (ARG1 + 8)
f() CALL func ([([(ARG1 + 8)] + ((f() + 4294967295) * 8))] << (63 & (f(ARG1) / 2147483647))) 2 ([([(ARG1 + 8)] + ((f() + 4294967295) * 8))] << (63 & (f(ARG1) / 2147483647))) f(ARG1)
f() INT_ZEXT f()
([(ARG1 + 8)] + ((f() + 4294967295) * 8)) INT_ADD [(ARG1 + 8)] ((f() + 4294967295) * 8)
([(ARG1 + 8)] << (63 & ((64 - [ARG1]) / 2147483647))) INT_LEFT [(ARG1 + 8)] (63 & ((64 - [ARG1]) / 2147483647))
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(63 & ((64 - [ARG1]) / 2147483647)) INT_AND ((64 - [ARG1]) / 2147483647) 63
[([(ARG1 + 8)] + ((f() + 4294967295) * 8))] LOAD 433 ([(ARG1 + 8)] + ((f() + 4294967295) * 8))
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
64 COPY 64
(64 - ([ARG1] & 63)) INT_SUB 64 ([ARG1] & 63)
0 COPY 0
 BRANCH VZERO
(f() + 4294967294) INT_ADD f() 4294967294
0 INT_EQUAL ARG2 0
0 INT_NOTEQUAL ARG1 0
 RETURN 0 f()
 CBRANCH (ARG2 INT_EQUAL 0)
 CBRANCH (ARG1 INT_NOTEQUAL 0)
 BRANCH 4294967290
(f(ARG1) & 1) INT_AND f(ARG1) 1
0 INT_EQUAL (f(ARG1) & 1) 0
 BRANCH VZERO
 CBRANCH ((f(ARG1) & 1) INT_EQUAL 0)
0 COPY 0
(f() + 1) INT_ADD f() 1
(-9223372036854775808 | (f(ARG1) / 2)) INT_OR (f(ARG1) / 2) -9223372036854775808
(f(ARG1) / 2) INT_RIGHT f(ARG1) 1
f() INT_SEXT f()
64 COPY 64
 CALL func ARG1 ARG2 ARG2
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
f(ARG1 , RSP) CALL func (RSP + -40) ARG1
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
f(ARG1 , RSP) CALL func (RSP + -40) ARG1 ARG1
f() CALL func ARG1
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
f(ARG1 , RSP) COPY f(ARG1 , RSP)
0 INT_EQUAL f() 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ~(f())
0 INT_LESS f() f()
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(f() + 64) INT_ADD f() 64
~(f()) BOOL_NEGATE f()
 CBRANCH (f() INT_LESS f())
 CBRANCH (f() INT_LESS f())
(f() * 8) INT_MULT f() 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
f() INT_ZEXT f()
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
f() CALL func [([(ARG1 + 8)] + (f() * 8))] 2
(f() + f()) INT_ADD f() f()
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
(RSP + -40) PTRSUB RSP -40
0 COPY 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
(RSP + -40) PTRSUB RSP -40
0 INT_LESS f() f()
f() CALL func [(ARG1 + 8)] 2
(ARG1 + 8) CAST (ARG1 + 8)
f(ARG1 , RSP) CAST f(ARG1 , RSP)
f(ARG1 , RSP) CAST f(ARG1 , RSP)
0 COPY 0
 RETURN 1
 RETURN 0 f(ARG1 , RSP)
 CALL libcall___stack_chk_fail_thunk
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
0 COPY 0
0 INT_EQUAL [([(ARG1 + 8)] + (f() * 8))] 0
(f() * 8) INT_MULT f() 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
f() INT_ZEXT f()
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
 CBRANCH ([([(ARG1 + 8)] + (f() * 8))] INT_EQUAL 0)
 BRANCH VZERO
1 COPY 1
 CALL func ~(ARG1) ARG2 ~(ARG1)
~(ARG1) INT_NEGATE ARG1
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
f(ARG1 , RSP) CALL func (RSP + -24) ARG1 ARG1
(RSP + -24) PTRSUB RSP -24
0 INT_LESS f() f()
(FS_OFFSET + 40) INT_ADD 0 40
~(f()) BOOL_NEGATE f()
0 COPY 0
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_LESS f() f()
 CBRANCH (f() INT_LESS f())
[f(ARG1 , RSP)] COPY [f(ARG1 , RSP)]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f(ARG1 , RSP) CAST f(ARG1 , RSP)
0 COPY 0
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
 CBRANCH (f() INT_LESS f())
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
 CBRANCH ~(f())
f() INT_ZEXT f()
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
(f() * 8) INT_MULT f() 8
f() CALL func [([(ARG1 + 8)] + (f() * 8))] 2
(f() + f()) INT_ADD f() f()
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH ([([(ARG1 + 8)] + (f() * 8))] INT_EQUAL -1)
 BRANCH VZERO
0 COPY 0
1 COPY 1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
0 INT_EQUAL [([(ARG1 + 8)] + (f() * 8))] -1
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0 [f(ARG1 , RSP)]
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(f() + 64) INT_ADD f() 64
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
 CALL libcall___popcountdi2_thunk ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
0 COPY 0
f() COPY f()
0 INT_LESSEQUAL f() f()
 CBRANCH (f() INT_LESSEQUAL f())
0 COPY 0
 RETURN 0 f()
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() CALL func [([(ARG1 + 8)] + (f() * 8))]
(ARG1 + 8) CAST (ARG1 + 8)
(f() * 8) INT_MULT f() 8
(f() + f()) INT_ADD f() f()
f() INT_ZEXT f()
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
(ARG1 & 71776119061217280) INT_AND ARG1 71776119061217280
(ARG1 / 2147483647) INT_RIGHT ARG1 56
(ARG1 & 280375465082880) INT_AND ARG1 280375465082880
(ARG1 & 16711680) INT_AND ARG1 16711680
(ARG1 & 65280) INT_AND ARG1 65280
(ARG1 & 4278190080) INT_AND ARG1 4278190080
(ARG1 * 2147483647) INT_LEFT ARG1 56
(ARG1 & 1095216660480) INT_AND ARG1 1095216660480
((ARG1 / 2147483647) | ((ARG1 & 71776119061217280) / 2147483647)) INT_OR (ARG1 / 2147483647) ((ARG1 & 71776119061217280) / 2147483647)
f(ARG1) INT_OR f(ARG1) (ARG1 * 2147483647)
((ARG1 & 65280) * 2147483647) INT_LEFT (ARG1 & 65280) 40
f(ARG1) INT_OR f(ARG1) ((ARG1 & 65280) * 2147483647)
 RETURN 0 f(ARG1)
((ARG1 & 4278190080) * 256) INT_LEFT (ARG1 & 4278190080) 8
f(ARG1) INT_OR f(ARG1) ((ARG1 & 4278190080) * 256)
((ARG1 & 16711680) * 16777216) INT_LEFT (ARG1 & 16711680) 24
f(ARG1) INT_OR f(ARG1) ((ARG1 & 16711680) * 16777216)
f(ARG1) INT_OR f(ARG1) ((ARG1 & 1095216660480) / 256)
((ARG1 & 1095216660480) / 256) INT_RIGHT (ARG1 & 1095216660480) 8
((ARG1 & 71776119061217280) / 2147483647) INT_RIGHT (ARG1 & 71776119061217280) 40
f(ARG1) INT_OR ((ARG1 / 2147483647) | ((ARG1 & 71776119061217280) / 2147483647)) ((ARG1 & 280375465082880) / 16777216)
((ARG1 & 280375465082880) / 16777216) INT_RIGHT (ARG1 & 280375465082880) 24
 CALL func ARG1
 RETURN 0
(ARG1 * 256) INT_LEFT ARG1 8
ARG1 INT_ZEXT ARG1
(ARG1 / 256) INT_RIGHT ARG1 8
((ARG1 / 549755813632) | (ARG1 * 256)) COPY ((ARG1 / 549755813632) | (ARG1 * 256))
((ARG1 / 549755813632) | (ARG1 * 256)) INT_OR (ARG1 * 256) (ARG1 / 549755813632)
 RETURN 0 ((ARG1 / 549755813632) | (ARG1 * 256))
(ARG1 / 549755813632) SUBPIECE (ARG1 / 256) 0
 CALL func ARG1
 RETURN 0
(ARG1 & 16711680) INT_AND ARG1 16711680
(ARG1 / 16777216) INT_RIGHT ARG1 24
(ARG1 * 16777216) INT_LEFT ARG1 24
(ARG1 & 65280) INT_AND ARG1 65280
 RETURN 0 ((ARG1 * 16777216) | (((ARG1 / 16777216) | ((ARG1 & 16711680) / 256)) | ((ARG1 & 65280) * 256)))
((ARG1 * 16777216) | (((ARG1 / 16777216) | ((ARG1 & 16711680) / 256)) | ((ARG1 & 65280) * 256))) INT_OR (((ARG1 / 16777216) | ((ARG1 & 16711680) / 256)) | ((ARG1 & 65280) * 256)) (ARG1 * 16777216)
((ARG1 / 16777216) | ((ARG1 & 16711680) / 256)) INT_OR (ARG1 / 16777216) ((ARG1 & 16711680) / 256)
((ARG1 & 16711680) / 256) INT_RIGHT (ARG1 & 16711680) 8
((ARG1 * 16777216) | (((ARG1 / 16777216) | ((ARG1 & 16711680) / 256)) | ((ARG1 & 65280) * 256))) COPY ((ARG1 * 16777216) | (((ARG1 / 16777216) | ((ARG1 & 16711680) / 256)) | ((ARG1 & 65280) * 256)))
((ARG1 & 65280) * 256) INT_LEFT (ARG1 & 65280) 8
(((ARG1 / 16777216) | ((ARG1 & 16711680) / 256)) | ((ARG1 & 65280) * 256)) INT_OR ((ARG1 / 16777216) | ((ARG1 & 16711680) / 256)) ((ARG1 & 65280) * 256)
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 [ARG2] f() 0
 CALL func ARG1 [ARG2] f() 0
 CALL func ARG1 [ARG2] f() 0
 CALL func ARG1 (RSP + -56) (RSP + -56)
 CALL func ARG1 [ARG2] (f() # f()) 0
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
 CBRANCH ([ARG2] INT_LESS 16)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_LESS [ARG2] 16
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
llvm::APInt llvm::APInt::byteSwap() const COPY llvm::APInt llvm::APInt::byteSwap() const
BitWidth >= 16 && BitWidth % 16 == 0 && "Cannot byteswap!" COPY BitWidth >= 16 && BitWidth % 16 == 0 && "Cannot byteswap!"
 CALL libcall___assert_fail_thunk BitWidth >= 16 && BitWidth % 16 == 0 && "Cannot byteswap!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 791 llvm::APInt llvm::APInt::byteSwap() const
0 INT_NOTEQUAL ([ARG2] & 15) 0
 CBRANCH (([ARG2] & 15) INT_NOTEQUAL 0)
([ARG2] & 15) INT_AND [ARG2] 15
 CBRANCH ([ARG2] INT_EQUAL 48)
f() CALL func ([(ARG2 + 8)] & 65535)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
([(ARG2 + 8)] & 65535) INT_AND [(ARG2 + 8)] 65535
([(ARG2 + 8)] / 140737488289792) SUBPIECE ([(ARG2 + 8)] / 65536) 0
(f() # f()) INT_ZEXT (f() # f())
0 INT_EQUAL [ARG2] 64
 CBRANCH ([ARG2] INT_EQUAL 64)
 BRANCH VZERO
f() CALL func ([(ARG2 + 8)] / 140737488289792)
[(ARG2 + 8)] CAST [(ARG2 + 8)]
(f() # f()) PIECE f() f()
(ARG2 + 8) CAST (ARG2 + 8)
([(ARG2 + 8)] / 65536) INT_RIGHT [(ARG2 + 8)] 16
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
 CBRANCH ([ARG2] INT_EQUAL 32)
 BRANCH VZERO
0 INT_EQUAL [ARG2] 48
([(ARG2 + 8)] & 4294967295) INT_AND [(ARG2 + 8)] 4294967295
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
f() CALL func ([(ARG2 + 8)] & 4294967295)
 CBRANCH (f() INT_NOTEQUAL f())
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
((f() - f()) + -1) INT_ZEXT ((f() - f()) + -1)
(ARG2 + 8) CAST (ARG2 + 8)
 STORE 433 ((f() * 8) + f()) f()
0 INT_NOTEQUAL f() f()
f() CALL func [([(ARG2 + 8)] + (((f() - f()) + -1) * 8))]
((f() * 8) + f()) CAST ((f() * 8) + f())
(((f() - f()) + -1) * 8) INT_MULT ((f() - f()) + -1) 8
((f() - f()) + -1) INT_SUB (f() - f()) -1
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
([(ARG2 + 8)] + (((f() - f()) + -1) * 8)) CAST ([(ARG2 + 8)] + (((f() - f()) + -1) * 8))
([(ARG2 + 8)] + (((f() - f()) + -1) * 8)) INT_ADD (((f() - f()) + -1) * 8) [(ARG2 + 8)]
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
[([(ARG2 + 8)] + (((f() - f()) + -1) * 8))] LOAD 433 ([(ARG2 + 8)] + (((f() - f()) + -1) * 8))
((f() * 8) + f()) INT_ADD f() (f() * 8)
(f() - f()) INT_SUB f() f()
 CBRANCH ([ARG2] INT_EQUAL 16)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
([(ARG2 + 8)] & 65535) INT_AND [(ARG2 + 8)] 65535
f() CALL func ([(ARG2 + 8)] & 65535)
(ARG2 + 8) CAST (ARG2 + 8)
0 INT_EQUAL [ARG2] 32
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL [ARG2])
(f() - [ARG2]) INT_SUB f() [ARG2]
 CALL func f() f() f() (f() - [ARG2])
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL [ARG2] 16
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) (f() * 64) 0 0
 BRANCH VZERO
0 COPY 0
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
0 INT_NOTEQUAL f() [ARG2]
(RSP + -56) PTRSUB RSP -56
(f() * 64) INT_LEFT f() 6
f() CALL func [(ARG2 + 8)]
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
ARG1 COPY ARG1
 STORE 433 ARG1 ([ARG1] + 32)
[ARG1] LOAD 433 ARG1
([ARG1] + 32) INT_ADD [ARG1] 32
 RETURN 0 ARG1
[ARG1] LOAD 433 ARG1
(RSP + -32) PTRSUB RSP -32
(FS_OFFSET + 40) INT_ADD 0 40
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -24) (RSP + -32) (RSP + -32)
40 INT_ADD 0 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -24) PTRSUB RSP -24
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
 RETURN 1
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[40] LOAD 433 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -24) PTRSUB RSP -24
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -32) PTRSUB RSP -32
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
(FS_OFFSET + 40) INT_ADD 0 40
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CALL func (RSP + -24) (RSP + -32) (RSP + -32)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
f(ARG2) CAST f(ARG2)
f(ARG1) CAST f(ARG1)
[f(ARG1)] LOAD 433 f(ARG1)
0 INT_EQUAL [f(ARG1)] [f(ARG2)]
 RETURN 0 ([f(ARG2)] & -256)
([f(ARG2)] & -256) INT_OR ([f(ARG2)] & -256) 0
0 INT_ZEXT 0
([f(ARG2)] & -256) INT_AND [f(ARG2)] -256
[f(ARG2)] LOAD 433 f(ARG2)
f() CALL func ARG1
f() CALL func ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (RSP + -32) (RSP + -24) (RSP + -24)
(RSP + -32) PTRSUB RSP -32
(RSP + -24) PTRSUB RSP -24
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
f() CALL libcall_compare_thunk ARG1
0 INT_ZEXT 0
 RETURN 0 (f() & -256)
0 INT_EQUAL (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
(f() & -256) INT_AND f() -256
(f() & -256) INT_OR (f() & -256) 0
f() CALL func f() ARG1 ARG1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func f()
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func 6965680
0 INT_EQUAL f() 0
6965680 PTRSUB 0 6965680
 CBRANCH (f() INT_EQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
 BRANCH VZERO
f() CALL func f()
0 INT_EQUAL f() 0
f() CALL func 6965680
1 COPY 1
f() CALL func f()
(RSP + -48) PTRSUB RSP -48
6965680 PTRSUB 0 6965680
 CBRANCH (f() INT_EQUAL 0)
f() CALL func (RSP + -48) (RSP + -40) (RSP + -40)
(RSP + -40) PTRSUB RSP -40
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
 CALL func (RSP + -48)
(RSP + -48) PTRSUB RSP -48
1 COPY 1
 BRANCH VZERO
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 RETURN 1
(RSP + -48) PTRSUB RSP -48
0 INT_NOTEQUAL f() 0
f() CALL func (RSP + -48)
0 COPY 0
(ARG1 >> f()) INT_RIGHT ARG1 f()
0 INT_NOTEQUAL ARG1 0
0 INT_NOTEQUAL ARG1 0
0 INT_EQUAL ARG2 0
 RETURN 0 f()
 CBRANCH (ARG2 INT_EQUAL 0)
 CBRANCH (ARG1 INT_NOTEQUAL 0)
0 CAST 0
 BRANCH VZERO
0 INT_SEXT 0
32 COPY 32
0 INT_EQUAL (ARG1 >> f()) 0
0 INT_XOR f() 31
 CBRANCH ((ARG1 >> f()) INT_EQUAL 0)
 BRANCH 4294967291
 CBRANCH (ARG1 INT_NOTEQUAL 0)
31 COPY 31
(f() + 1) INT_SUB f() 1
 CALL func ARG1 ARG2 ARG2
 RETURN 0
((f(ARG6) * 4) + ARG4) INT_ADD (f(ARG6) * 4) ARG4
(ARG4 + (f(ARG6) * 4)) INT_ADD ARG4 (f(ARG6) * 4)
((f(ARG6) * 4) + ARG4) INT_ADD (f(ARG6) * 4) ARG4
0 INT_NOTEQUAL ARG4 0
(ARG6 + ARG5) INT_ADD ARG6 ARG5
ARG5 COPY ARG5
(ARG6 + ARG5) INT_ADD ARG6 ARG5
(ARG6 + ARG5) INT_ADD ARG6 ARG5
(ARG6 + ARG5) INT_ADD ARG6 ARG5
ARG5 COPY ARG5
f() CALL func f() ARG5 f()
(ARG6 + ARG5) INT_ADD ARG6 ARG5
(ARG6 + ARG5) INT_ADD ARG6 ARG5
(ARG6 + f(ARG5)) INT_ADD ARG6 f(ARG5)
0 INT_LESS 1 ARG6
(ARG6 + f(ARG5)) INT_ADD ARG6 f(ARG5)
(ARG6 + -1) INT_SUB ARG6 -1
(ARG6 + -1) INT_SUB ARG6 -1
(ARG6 + -1) INT_SUB ARG6 -1
0 INT_LESS f() ARG6
(ARG6 + f(ARG5)) INT_ADD ARG6 f(ARG5)
(ARG6 + f(ARG5)) INT_ADD ARG6 f(ARG5)
(ARG6 + f(ARG5)) INT_ADD ARG6 f(ARG5)
ARG6 COPY ARG6
f() CALL func f() ARG6 f()
(ARG6 + 2) INT_SUB ARG6 2
(ARG6 + -1) INT_SUB ARG6 -1
(ARG6 + -1) INT_SUB ARG6 -1
(ARG6 + f(ARG5)) INT_ADD ARG6 f(ARG5)
ARG6 COPY ARG6
0 INT_LESS f() ARG6
0 INT_LESS f() ARG6
(ARG6 + 1) INT_SUB ARG6 1
(ARG6 + 2) INT_SUB ARG6 2
(ARG6 + f(ARG5)) INT_ADD ARG6 f(ARG5)
(ARG6 + f(ARG5)) INT_ADD ARG6 f(ARG5)
(ARG6 + f(ARG5)) INT_ADD ARG6 f(ARG5)
(ARG1 + ((f(ARG5) + f()) * 4)) INT_ADD ARG1 ((f(ARG5) + f()) * 4)
(ARG1 + (f() * 4)) INT_ADD (f() * 4) ARG1
(ARG1 + (f(ARG5 , ARG6) * 4)) INT_ADD ARG1 (f(ARG5 , ARG6) * 4)
(ARG1 + (f(ARG6) * 4)) INT_ADD ARG1 (f(ARG6) * 4)
(((ARG6 + ARG5) * 4) + ARG1) INT_ADD ((ARG6 + ARG5) * 4) ARG1
(ARG1 + ((f(ARG5) + f()) * 4)) INT_ADD ARG1 ((f(ARG5) + f()) * 4)
(ARG1 + (((ARG6 + f(ARG5)) + -1) * 4)) INT_ADD ARG1 (((ARG6 + f(ARG5)) + -1) * 4)
(ARG1 + ((ARG6 + f(ARG5)) * 4)) INT_ADD ARG1 ((ARG6 + f(ARG5)) * 4)
(ARG1 + ((ARG6 + f(ARG5)) * 4)) INT_ADD ARG1 ((ARG6 + f(ARG5)) * 4)
(ARG1 + ((ARG6 + f(ARG5)) * 4)) INT_ADD ARG1 ((ARG6 + f(ARG5)) * 4)
(ARG1 + (f() * 4)) INT_ADD ARG1 (f() * 4)
(ARG1 + ((ARG6 + f(ARG5)) * 4)) INT_ADD ARG1 ((ARG6 + f(ARG5)) * 4)
0 INT_NOTEQUAL ARG1 ARG2
(ARG1 + (f(ARG6) * 4)) INT_ADD ARG1 (f(ARG6) * 4)
(ARG1 + (((ARG6 + f(ARG5)) + 2) * 4)) INT_ADD ARG1 (((ARG6 + f(ARG5)) + 2) * 4)
(ARG1 + ((f(ARG5) + f()) * 4)) INT_ADD ARG1 ((f(ARG5) + f()) * 4)
(ARG1 + (f(ARG6) * 4)) INT_ADD ARG1 (f(ARG6) * 4)
0 INT_EQUAL ARG1 0
(ARG1 + ((f(ARG5) + f()) * 4)) INT_ADD ARG1 ((f(ARG5) + f()) * 4)
(ARG1 + ((f(ARG5) + f()) * 4)) INT_ADD ARG1 ((f(ARG5) + f()) * 4)
(ARG1 + ((f(ARG5) + f()) * 4)) INT_ADD ARG1 ((f(ARG5) + f()) * 4)
(ARG1 + ((ARG6 + f(ARG5)) * 4)) INT_ADD ARG1 ((ARG6 + f(ARG5)) * 4)
(ARG1 + ((ARG6 + f(ARG5)) * 4)) INT_ADD ARG1 ((ARG6 + f(ARG5)) * 4)
(ARG1 + ((f(ARG5) + f()) * 4)) INT_ADD ARG1 ((f(ARG5) + f()) * 4)
0 INT_NOTEQUAL ARG1 ARG3
(ARG1 + (((ARG6 + f(ARG5)) + 2) * 4)) INT_ADD ARG1 (((ARG6 + f(ARG5)) + 2) * 4)
(ARG1 + ((f(ARG5) + f()) * 4)) INT_ADD ARG1 ((f(ARG5) + f()) * 4)
(ARG1 + (f() * 4)) INT_ADD ARG1 (f() * 4)
(ARG2 + ((ARG6 + -1) * 4)) INT_ADD ARG2 ((ARG6 + -1) * 4)
(ARG2 + ((ARG6 + -1) * 4)) INT_ADD ARG2 ((ARG6 + -1) * 4)
(ARG2 + (f() * 4)) INT_ADD (f() * 4) ARG2
(ARG2 + (f() * 4)) INT_ADD (f() * 4) ARG2
(ARG2 + ((ARG6 + -1) * 4)) INT_ADD ARG2 ((ARG6 + -1) * 4)
(ARG2 + ((ARG6 + -1) * 4)) INT_ADD ARG2 ((ARG6 + -1) * 4)
0 INT_EQUAL ARG2 0
(ARG2 + (f() * 4)) INT_ADD ARG2 (f() * 4)
(ARG2 + ((f(ARG6) * 4) + -4)) INT_ADD ARG2 ((f(ARG6) * 4) + -4)
(ARG2 + (f() * 4)) INT_ADD ARG2 (f() * 4)
(ARG2 + ((ARG6 + 2) * 4)) INT_ADD ARG2 ((ARG6 + 2) * 4)
0 INT_NOTEQUAL ARG2 ARG3
(ARG2 + (f() * 4)) INT_ADD ARG2 (f() * 4)
(ARG2 + (f() * 4)) INT_ADD ARG2 (f() * 4)
(ARG2 + ((ARG6 + 2) * 4)) INT_ADD ARG2 ((ARG6 + 2) * 4)
(ARG3 + (f(ARG5) * 4)) INT_ADD ARG3 (f(ARG5) * 4)
(ARG3 + (f(ARG5) * 4)) INT_ADD ARG3 (f(ARG5) * 4)
(ARG3 + (f(ARG5) * 4)) INT_ADD ARG3 (f(ARG5) * 4)
0 INT_EQUAL ARG3 0
 CBRANCH (ARG1 INT_EQUAL 0)
 CBRANCH f()
KnuthDiv: m= COPY KnuthDiv: m=
f() CALL func f() 4689604
 CALL func f() 10
f() CALL func f() KnuthDiv: m=
4689604 PTRSUB 0 4689604
f() CALL func
 CBRANCH (4294967295 INT_SLESS f(ARG5))
0 INT_SLESS 4294967295 f(ARG5)
f() CALL func f()
 CALL func f()
f() CALL func
 BRANCH VZERO
(f(ARG5) + 4294967295) INT_ADD f(ARG5) 4294967295
 CBRANCH (4294967295 INT_SLESS f(ARG5 , ARG6))
 CALL func f()
f() CALL func f()
f() CALL func
0 INT_SLESS 4294967295 f(ARG5 , ARG6)
(f(ARG5 , ARG6) + 4294967295) INT_ADD f(ARG5 , ARG6) 4294967295
 BRANCH VZERO
 CBRANCH (ARG4 INT_NOTEQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH f()
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
apint COPY apint
f() CALL func apint
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH (ARG1 INT_NOTEQUAL ARG2)
 CBRANCH (ARG1 INT_NOTEQUAL ARG3)
u != v && u != q && v != q && "Must use different memory" COPY u != v && u != q && v != q && "Must use different memory"
void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int) COPY void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int)
 RETURN 1
VZERO COPY VZERO
 CALL libcall___assert_fail_thunk u != v && u != q && v != q && "Must use different memory" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1514 void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 CBRANCH (4294967295 INT_SLESS f(ARG5 , ARG6))
f() CALL func
 BRANCH VZERO
(f(ARG5 , ARG6) + 4294967295) INT_ADD f(ARG5 , ARG6) 4294967295
0 INT_SLESS 4294967295 f(ARG5 , ARG6)
f() CALL func f()
 CALL func f()
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH f()
 CALL func f() 10
f() CALL func
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 CBRANCH (ARG2 INT_EQUAL 0)
 RETURN 1
u && "Must provide dividend" COPY u && "Must provide dividend"
void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int) COPY void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int)
VZERO COPY VZERO
 CALL libcall___assert_fail_thunk u && "Must provide dividend" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1511 void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int)
 CBRANCH ([(ARG1 + ((ARG6 + f(ARG5)) * 4))] INT_SLESS f(ARG1 , ARG2 , ARG5 , ARG6))
 STORE 433 (ARG1 + ((ARG6 + f(ARG5)) * 4)) ([(ARG1 + ((ARG6 + f(ARG5)) * 4))] + f())
(ARG1 + ((ARG6 + f(ARG5)) * 4)) CAST (ARG1 + ((ARG6 + f(ARG5)) * 4))
f(ARG5) INT_SEXT f(ARG5)
(ARG6 + f(ARG5)) INT_ZEXT (ARG6 + f(ARG5))
(ARG6 + f(ARG5)) INT_ZEXT (ARG6 + f(ARG5))
0 COPY 0
(f(ARG3 , ARG5) + 4294967295) INT_ADD f(ARG3 , ARG5) 4294967295
0 COPY 0
((ARG6 + f(ARG5)) * 4) INT_MULT (ARG6 + f(ARG5)) 4
(ARG1 + ((ARG6 + f(ARG5)) * 4)) CAST (ARG1 + ((ARG6 + f(ARG5)) * 4))
[(ARG1 + ((ARG6 + f(ARG5)) * 4))] LOAD 433 (ARG1 + ((ARG6 + f(ARG5)) * 4))
 STORE 433 (ARG3 + (f(ARG5) * 4)) (f(ARG3 , ARG5) + 4294967295)
((ARG6 + f(ARG5)) * 4) INT_MULT (ARG6 + f(ARG5)) 4
 CBRANCH (f() INT_LESS ARG6)
f() INT_ZEXT f()
(ARG3 + (f(ARG5) * 4)) CAST (ARG3 + (f(ARG5) * 4))
f(ARG3 , ARG5) LOAD 433 (ARG3 + (f(ARG5) * 4))
([(ARG1 + ((ARG6 + f(ARG5)) * 4))] + f()) INT_ADD f() [(ARG1 + ((ARG6 + f(ARG5)) * 4))]
(f(ARG5) * 4) INT_MULT f(ARG5) 4
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
f() CALL func apint
0 COPY 0
apint COPY apint
 CBRANCH (f() INT_EQUAL 0)
apint COPY apint
f() CALL func apint
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
f() CALL func apint
 CBRANCH (f() INT_EQUAL 0)
apint COPY apint
0 INT_EQUAL f() 0
 BRANCH VZERO
1 COPY 1
 CBRANCH f()
f() CALL func
f() CALL func f() , borrow = 
(f(ARG5) + f()) INT_ADD f() f(ARG5)
f() CALL func f() KnuthDiv: u[j+i] = 
[(ARG1 + ((f(ARG5) + f()) * 4))] LOAD 433 (ARG1 + ((f(ARG5) + f()) * 4))
f() CALL func f() f(ARG1 , ARG2 , ARG5 , ARG6) f()
(ARG1 + ((f(ARG5) + f()) * 4)) CAST (ARG1 + ((f(ARG5) + f()) * 4))
((f(ARG5) + f()) * 4) INT_MULT (f(ARG5) + f()) 4
KnuthDiv: u[j+i] =  COPY KnuthDiv: u[j+i] = 
, borrow =  COPY , borrow = 
f() CALL func f() [(ARG1 + ((f(ARG5) + f()) * 4))]
(f(ARG5) + f()) INT_ZEXT (f(ARG5) + f())
 CALL func f()
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 INT_SLESS 4294967295 f(ARG6)
 CBRANCH (4294967295 INT_SLESS f(ARG6))
0 COPY 0
 CBRANCH f()
0 INT_SLESS 4294967295 f(ARG6)
 CBRANCH (4294967295 INT_SLESS f(ARG6))
 CBRANCH (4294967295 INT_SLESS (f(ARG5) + 4294967295))
(ARG1 + (((ARG6 + f(ARG5)) + -1) * 4)) CAST (ARG1 + (((ARG6 + f(ARG5)) + -1) * 4))
0 INT_EQUAL f(ARG1 , ARG2 , ARG5 , ARG6) 4294967296
 STORE 433 (ARG3 + (f(ARG5) * 4)) (f(ARG1 , ARG2 , ARG5 , ARG6) / 2147483647)
 CBRANCH (f() INT_EQUAL 0)
[(ARG2 + ((ARG6 + -1) * 4))] INT_ZEXT [(ARG2 + ((ARG6 + -1) * 4))]
 CBRANCH (f() INT_EQUAL 0)
(ARG6 + f(ARG5)) INT_ZEXT (ARG6 + f(ARG5))
0 INT_EQUAL f() 0
f(ARG1 , ARG2 , ARG5 , ARG6) INT_REM ([(ARG1 + ((ARG6 + f(ARG5)) * 4))] # [(ARG1 + (((ARG6 + f(ARG5)) + -1) * 4))]) [(ARG2 + ((ARG6 + -1) * 4))]
[(ARG1 + ((ARG6 + f(ARG5)) * 4))] CAST [(ARG1 + ((ARG6 + f(ARG5)) * 4))]
0 INT_EQUAL f() 0
(f(ARG5) * 4) INT_MULT f(ARG5) 4
([(ARG1 + ((ARG6 + f(ARG5)) * 4))] - (f(ARG1 , ARG2 , ARG5 , ARG6) / 2147483647)) INT_SUB [(ARG1 + ((ARG6 + f(ARG5)) * 4))] (f(ARG1 , ARG2 , ARG5 , ARG6) / 2147483647)
(ARG1 + ((ARG6 + f(ARG5)) * 4)) CAST (ARG1 + ((ARG6 + f(ARG5)) * 4))
 STORE 433 (ARG1 + ((ARG6 + f(ARG5)) * 4)) ([(ARG1 + ((ARG6 + f(ARG5)) * 4))] - (f(ARG1 , ARG2 , ARG5 , ARG6) / 2147483647))
[(ARG2 + ((ARG6 + -1) * 4))] INT_ZEXT [(ARG2 + ((ARG6 + -1) * 4))]
f(ARG5) INT_SEXT f(ARG5)
(f(ARG1 , ARG2 , ARG5 , ARG6) / 2147483647) SUBPIECE f(ARG1 , ARG2 , ARG5 , ARG6) 0
((ARG6 + f(ARG5)) * 4) INT_MULT (ARG6 + f(ARG5)) 4
0 INT_EQUAL f() 0
(ARG1 + ((ARG6 + f(ARG5)) * 4)) CAST (ARG1 + ((ARG6 + f(ARG5)) * 4))
(ARG6 + -1) INT_ZEXT (ARG6 + -1)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH f()
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
f(ARG1 , ARG2 , ARG5 , ARG6) INT_DIV ([(ARG1 + ((ARG6 + f(ARG5)) * 4))] # [(ARG1 + (((ARG6 + f(ARG5)) + -1) * 4))]) [(ARG2 + ((ARG6 + -1) * 4))]
0 INT_SLESS 4294967295 (f(ARG5) + 4294967295)
0 INT_EQUAL f() 0
0 COPY 0
(ARG2 + ((ARG6 + -1) * 4)) CAST (ARG2 + ((ARG6 + -1) * 4))
0 INT_EQUAL f() 0
((ARG6 + f(ARG5)) + -1) INT_ZEXT ((ARG6 + f(ARG5)) + -1)
((ARG6 + f(ARG5)) * 4) INT_MULT (ARG6 + f(ARG5)) 4
0 INT_EQUAL f() 0
 CBRANCH f(ARG1 , ARG2 , ARG5 , ARG6)
 CBRANCH (f() INT_EQUAL 0)
(ARG6 + f(ARG5)) INT_ZEXT (ARG6 + f(ARG5))
 CBRANCH f()
(ARG2 + ((ARG6 + -1) * 4)) CAST (ARG2 + ((ARG6 + -1) * 4))
[(ARG2 + ((ARG6 + -1) * 4))] LOAD 433 (ARG2 + ((ARG6 + -1) * 4))
 CBRANCH (f() INT_LESS ARG6)
(ARG1 + ((ARG6 + f(ARG5)) * 4)) CAST (ARG1 + ((ARG6 + f(ARG5)) * 4))
((ARG6 + -1) * 4) INT_MULT (ARG6 + -1) 4
 CBRANCH f()
 CBRANCH f()
(f(ARG1 , ARG2 , ARG5 , ARG6) / 2147483647) SUBPIECE f(ARG1 , ARG2 , ARG5 , ARG6) 0
([(ARG1 + ((ARG6 + f(ARG5)) * 4))] # [(ARG1 + (((ARG6 + f(ARG5)) + -1) * 4))]) PIECE [(ARG1 + ((ARG6 + f(ARG5)) * 4))] [(ARG1 + (((ARG6 + f(ARG5)) + -1) * 4))]
[(ARG1 + ((ARG6 + f(ARG5)) * 4))] LOAD 433 (ARG1 + ((ARG6 + f(ARG5)) * 4))
(ARG3 + (f(ARG5) * 4)) CAST (ARG3 + (f(ARG5) * 4))
(((ARG6 + f(ARG5)) + -1) * 4) INT_MULT ((ARG6 + f(ARG5)) + -1) 4
[(ARG1 + (((ARG6 + f(ARG5)) + -1) * 4))] LOAD 433 (ARG1 + (((ARG6 + f(ARG5)) + -1) * 4))
((ARG6 + f(ARG5)) * 4) INT_MULT (ARG6 + f(ARG5)) 4
[(ARG1 + ((ARG6 + f(ARG5)) * 4))] LOAD 433 (ARG1 + ((ARG6 + f(ARG5)) * 4))
0 INT_EQUAL f() 0
[(ARG2 + ((ARG6 + -1) * 4))] LOAD 433 (ARG2 + ((ARG6 + -1) * 4))
 CBRANCH f()
[(ARG1 + ((ARG6 + f(ARG5)) * 4))] INT_ZEXT [(ARG1 + ((ARG6 + f(ARG5)) * 4))]
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH f()
 CBRANCH f()
(ARG6 + -1) INT_ZEXT (ARG6 + -1)
(ARG1 + ((ARG6 + f(ARG5)) * 4)) CAST (ARG1 + ((ARG6 + f(ARG5)) * 4))
((ARG6 + -1) * 4) INT_MULT (ARG6 + -1) 4
(f(ARG5) + 4294967295) INT_ADD f(ARG5) 4294967295
(ARG6 + f(ARG5)) INT_ZEXT (ARG6 + f(ARG5))
(ARG6 + f(ARG5)) INT_ZEXT (ARG6 + f(ARG5))
 CBRANCH f()
((ARG6 + f(ARG5)) * 4) INT_MULT (ARG6 + f(ARG5)) 4
[(ARG1 + ((ARG6 + f(ARG5)) * 4))] LOAD 433 (ARG1 + ((ARG6 + f(ARG5)) * 4))
0 INT_SLESS [(ARG1 + ((ARG6 + f(ARG5)) * 4))] f(ARG1 , ARG2 , ARG5 , ARG6)
 CBRANCH f()
((ARG6 + f(ARG5)) + -1) INT_SUB (ARG6 + f(ARG5)) -1
0 INT_EQUAL f() 0
f() CALL func apint
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
apint COPY apint
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
f() CALL func apint
apint COPY apint
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
f() CALL func apint
apint COPY apint
0 COPY 0
 CBRANCH f()
(ARG4 + (f(ARG6) * 4)) CAST (ARG4 + (f(ARG6) * 4))
f() CALL func f() 4689628
[(ARG4 + (f(ARG6) * 4))] LOAD 433 (ARG4 + (f(ARG6) * 4))
 CALL func f() [(ARG4 + (f(ARG6) * 4))]
f(ARG6) INT_SEXT f(ARG6)
f() CALL func
4689628 PTRSUB 0 4689628
(f(ARG6) * 4) INT_MULT f(ARG6) 4
 CBRANCH (ARG2 INT_NOTEQUAL ARG3)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
f() CALL func apint
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
apint COPY apint
 CBRANCH f(ARG1 , ARG2 , ARG5 , ARG6)
 CBRANCH f(ARG1 , ARG2 , ARG5 , ARG6)
0 INT_EQUAL f(ARG1 , ARG2 , ARG5 , ARG6) 4294967296
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
0 INT_EQUAL f() 0
apint COPY apint
f() CALL func apint
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
0 INT_EQUAL f() 0
f() CALL func apint
apint COPY apint
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 COPY 0
apint COPY apint
f() CALL func apint
 CBRANCH (f() INT_EQUAL 0)
 CALL func f() 10
f() CALL func
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH f()
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
f() CALL func
 CALL func f()
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
f() CALL func apint
apint COPY apint
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 COPY 0
 CBRANCH ([(ARG1 + ((f(ARG5) + f()) * 4))] INT_EQUAL [f(ARG1 , ARG2 , ARG5)])
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
apint COPY apint
f() CALL func apint
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
f() CALL func apint
apint COPY apint
0 INT_EQUAL f() 0
 CALL func f()
f() CALL func
 CBRANCH (f() INT_EQUAL 0)
apint COPY apint
0 INT_EQUAL f() 0
f() CALL func apint
 CALL func f()
f() CALL func f() KnuthDiv: quotient digit #
f() CALL func
f() CALL func f() f(ARG5) f()
KnuthDiv: quotient digit # COPY KnuthDiv: quotient digit #
 CBRANCH f()
 CALL func f() KnuthDiv: original:
f() CALL func
KnuthDiv: original: COPY KnuthDiv: original:
 CBRANCH f()
f() CALL func
 CALL func f()
 CBRANCH (f() INT_LESS (ARG6 + ARG5))
(f(ARG1) | ([(ARG1 + (f() * 4))] << (31 & (f() / 2147483647)))) INT_OR ([(ARG1 + (f() * 4))] << (31 & (f() / 2147483647))) f(ARG1)
[(ARG1 + (f() * 4))] LOAD 433 (ARG1 + (f() * 4))
f() INT_ZEXT f()
([(ARG1 + (f() * 4))] >> (31 & (32 - (f() / 2147483647)))) INT_RIGHT [(ARG1 + (f() * 4))] (31 & (32 - (f() / 2147483647)))
(f() * 4) INT_MULT f() 4
(f() * 4) INT_MULT f() 4
(31 & (32 - (f() / 2147483647))) INT_AND (32 - (f() / 2147483647)) 31
 STORE 433 (ARG1 + (f() * 4)) (f(ARG1) | ([(ARG1 + (f() * 4))] << (31 & (f() / 2147483647))))
(ARG1 + (f() * 4)) CAST (ARG1 + (f() * 4))
f() INT_ZEXT f()
([(ARG1 + (f() * 4))] >> (31 & (32 - (f() / 2147483647)))) COPY ([(ARG1 + (f() * 4))] >> (31 & (32 - (f() / 2147483647))))
(f() * 4) INT_MULT f() 4
(32 - (f() / 2147483647)) INT_SUB 32 (f() / 2147483647)
[(ARG1 + (f() * 4))] LOAD 433 (ARG1 + (f() * 4))
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
0 INT_LESS f() (ARG6 + ARG5)
([(ARG1 + (f() * 4))] << (31 & (f() / 2147483647))) INT_LEFT [(ARG1 + (f() * 4))] (31 & (f() / 2147483647))
(31 & (f() / 2147483647)) INT_AND (f() / 2147483647) 31
(ARG1 + (f() * 4)) CAST (ARG1 + (f() * 4))
f() INT_ZEXT f()
(ARG1 + (f() * 4)) CAST (ARG1 + (f() * 4))
 CBRANCH f()
 CALL func f()
f() CALL func
1 COPY 1
 BRANCH VZERO
 CBRANCH f()
(ARG1 + (f(ARG6) * 4)) CAST (ARG1 + (f(ARG6) * 4))
(f(ARG1 , ARG6) | ([(ARG1 + (f(ARG6) * 4))] >> (31 & (f() / 2147483647)))) INT_OR ([(ARG1 + (f(ARG6) * 4))] >> (31 & (f() / 2147483647))) f(ARG1 , ARG6)
(32 - (f() / 2147483647)) INT_SUB 32 (f() / 2147483647)
(f(ARG6) * 4) INT_MULT f(ARG6) 4
 BRANCH VZERO
(f(ARG6) + 4294967295) INT_ADD f(ARG6) 4294967295
 STORE 433 ((f(ARG6) * 4) + ARG4) (f(ARG1 , ARG6) | ([(ARG1 + (f(ARG6) * 4))] >> (31 & (f() / 2147483647))))
((f(ARG6) * 4) + ARG4) CAST ((f(ARG6) * 4) + ARG4)
(ARG1 + (f(ARG6) * 4)) CAST (ARG1 + (f(ARG6) * 4))
f(ARG6) INT_SEXT f(ARG6)
(f(ARG6) * 4) INT_MULT f(ARG6) 4
[(ARG1 + (f(ARG6) * 4))] LOAD 433 (ARG1 + (f(ARG6) * 4))
[(ARG1 + (f(ARG6) * 4))] LOAD 433 (ARG1 + (f(ARG6) * 4))
([(ARG1 + (f(ARG6) * 4))] << (31 & (32 - (f() / 2147483647)))) INT_LEFT [(ARG1 + (f(ARG6) * 4))] (31 & (32 - (f() / 2147483647)))
(f(ARG6) * 4) INT_MULT f(ARG6) 4
(31 & (32 - (f() / 2147483647))) INT_AND (32 - (f() / 2147483647)) 31
([(ARG1 + (f(ARG6) * 4))] >> (31 & (f() / 2147483647))) INT_RIGHT [(ARG1 + (f(ARG6) * 4))] (31 & (f() / 2147483647))
f(ARG6) INT_SEXT f(ARG6)
(31 & (f() / 2147483647)) INT_AND (f() / 2147483647) 31
0 INT_EQUAL f() 0
f(ARG6) INT_SEXT f(ARG6)
 CBRANCH (VZERO INT_EQUAL 0)
0 INT_EQUAL f() 0
apint COPY apint
f() CALL func apint
0 COPY 0
apint COPY apint
0 INT_EQUAL f() 0
f() CALL func apint
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
0 COPY 0
apint COPY apint
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
f() CALL func apint
f() CALL func
 CALL func f()
 CBRANCH (1 INT_LESS ARG6)
0 INT_EQUAL f() 0
 STORE 433 (((ARG6 + ARG5) * 4) + ARG1) f(ARG1)
void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int) COPY void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int)
((ARG6 + ARG5) * 4) INT_MULT (ARG6 + ARG5) 4
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
f() COPY f()
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
 CBRANCH f()
(ARG2 + ((ARG6 + -1) * 4)) CAST (ARG2 + ((ARG6 + -1) * 4))
0 INT_EQUAL VZERO 0
 CBRANCH f()
n>1 && "n must be > 1" COPY n>1 && "n must be > 1"
(((ARG6 + ARG5) * 4) + ARG1) CAST (((ARG6 + ARG5) * 4) + ARG1)
 CBRANCH f()
 RETURN 0
0 COPY 0
VZERO COPY VZERO
0 INT_EQUAL f() 0
 RETURN 1
 CBRANCH (f() INT_EQUAL 0)
 CALL libcall___assert_fail_thunk n>1 && "n must be > 1" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1515 void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(ARG6 + -1) INT_ZEXT (ARG6 + -1)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH f()
[(ARG2 + ((ARG6 + -1) * 4))] LOAD 433 (ARG2 + ((ARG6 + -1) * 4))
((ARG6 + -1) * 4) INT_MULT (ARG6 + -1) 4
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH f()
0 INT_EQUAL f() 0
0 COPY 0
 CBRANCH f()
 CBRANCH f()
(ARG6 + ARG5) INT_ZEXT (ARG6 + ARG5)
f() CALL func [(ARG2 + ((ARG6 + -1) * 4))]
 CBRANCH f()
 CBRANCH f()
 CALL func f()
f() CALL func
 CBRANCH (ARG3 INT_EQUAL 0)
 RETURN 1
q && "Must provide quotient" COPY q && "Must provide quotient"
void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int) COPY void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int)
VZERO COPY VZERO
 CALL libcall___assert_fail_thunk q && "Must provide quotient" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1513 void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
f() CALL func apint
apint COPY apint
0 INT_EQUAL f() 0
 BRANCH VZERO
1 COPY 1
f() CALL func apint
apint COPY apint
0 INT_EQUAL f() 0
apint COPY apint
f() CALL func apint
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
f() CALL func apint
apint COPY apint
, rp ==  COPY , rp == 
KnuthDiv: qp ==  COPY KnuthDiv: qp == 
f() CALL func f() KnuthDiv: qp == 
f() CALL func f() , rp == 
f() CALL func f() f(ARG1 , ARG2 , ARG5 , ARG6) f()
 CALL func f()
f() CALL func
f() CALL func f() f(ARG1 , ARG2 , ARG5 , ARG6) f()
1 COPY 1
 BRANCH VZERO
[(ARG2 + (f() * 4))] LOAD 433 (ARG2 + (f() * 4))
 CBRANCH ([(ARG1 + ((f(ARG5) + f()) * 4))] INT_LESS [f(ARG1 , ARG2 , ARG5)])
((f(ARG5) + f()) * 4) INT_MULT (f(ARG5) + f()) 4
(f() * 4) INT_MULT f() 4
0 INT_LESS [(ARG1 + ((f(ARG5) + f()) * 4))] [f(ARG1 , ARG2 , ARG5)]
(f() * 4) INT_MULT f() 4
f() INT_ZEXT f()
(f(ARG5) + f()) INT_ADD f() f(ARG5)
(f(ARG5) + f()) INT_ADD f() f(ARG5)
(f(ARG5) + f()) INT_ZEXT (f(ARG5) + f())
(ARG1 + ((f(ARG5) + f()) * 4)) CAST (ARG1 + ((f(ARG5) + f()) * 4))
([(ARG1 + ((f(ARG5) + f()) * 4))] + ([(ARG2 + (f() * 4))] + f())) INT_ADD [(ARG1 + ((f(ARG5) + f()) * 4))] ([(ARG2 + (f() * 4))] + f())
f(ARG1 , ARG2 , ARG5) CAST f(ARG1 , ARG2 , ARG5)
(ARG1 + ((f(ARG5) + f()) * 4)) CAST (ARG1 + ((f(ARG5) + f()) * 4))
((f(ARG5) + f()) * 4) INT_MULT (f(ARG5) + f()) 4
 STORE 433 (ARG1 + ((f(ARG5) + f()) * 4)) ([(ARG1 + ((f(ARG5) + f()) * 4))] + ([(ARG2 + (f() * 4))] + f()))
[(ARG1 + ((f(ARG5) + f()) * 4))] LOAD 433 (ARG1 + ((f(ARG5) + f()) * 4))
([(ARG2 + (f() * 4))] + f()) INT_ADD f() [(ARG2 + (f() * 4))]
(f(ARG5) + f()) INT_ADD f() f(ARG5)
(f(ARG5) + f()) INT_ZEXT (f(ARG5) + f())
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() INT_ZEXT f()
((f(ARG5) + f()) * 4) INT_MULT (f(ARG5) + f()) 4
[(ARG1 + ((f(ARG5) + f()) * 4))] LOAD 433 (ARG1 + ((f(ARG5) + f()) * 4))
(ARG1 + ((f(ARG5) + f()) * 4)) CAST (ARG1 + ((f(ARG5) + f()) * 4))
(f(ARG5) + f()) INT_ZEXT (f(ARG5) + f())
((f(ARG5) + f()) * 4) INT_MULT (f(ARG5) + f()) 4
(f(ARG5) + f()) INT_ZEXT (f(ARG5) + f())
f(ARG1 , ARG2 , ARG5) CALL func (ARG1 + ((f(ARG5) + f()) * 4)) (ARG2 + (f() * 4)) (ARG2 + (f() * 4))
f() INT_ZEXT f()
(f(ARG5) + f()) INT_ADD f() f(ARG5)
[f(ARG1 , ARG2 , ARG5)] LOAD 433 f(ARG1 , ARG2 , ARG5)
(ARG2 + (f() * 4)) CAST (ARG2 + (f() * 4))
f() CALL func apint
0 INT_EQUAL f() 0
apint COPY apint
f() CALL func apint
apint COPY apint
0 INT_EQUAL f() 0
f() CALL func apint
apint COPY apint
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
apint COPY apint
f() CALL func apint
 CBRANCH (4294967295 INT_SLESS f(ARG5 , ARG6))
0 INT_SLESS 4294967295 f(ARG5 , ARG6)
f() CALL func f()
 CALL func f()
f() CALL func
 BRANCH VZERO
(f(ARG5 , ARG6) + 4294967295) INT_ADD f(ARG5 , ARG6) 4294967295
f(ARG1 , ARG2 , ARG5 , ARG6) INT_LEFT f(ARG1 , ARG2 , ARG5 , ARG6) 32
(ARG2 + ((ARG6 + 2) * 4)) CAST (ARG2 + ((ARG6 + 2) * 4))
f(ARG1 , ARG2 , ARG5 , ARG6) INT_SUB f(ARG1 , ARG2 , ARG5 , ARG6) f(ARG1 , ARG2 , ARG5 , ARG6)
0 INT_LESSEQUAL f(ARG1 , ARG2 , ARG5 , ARG6) f(ARG1 , ARG2 , ARG5 , ARG6)
0 INT_NOTEQUAL f(ARG1 , ARG2 , ARG5 , ARG6) 0
((ARG6 + 2) * 4) INT_MULT (ARG6 + 2) 4
((ARG6 + f(ARG5)) + 2) INT_SUB (ARG6 + f(ARG5)) 2
[(ARG2 + ((ARG6 + 2) * 4))] LOAD 433 (ARG2 + ((ARG6 + 2) * 4))
 CBRANCH (0 BOOL_AND 0)
[(ARG2 + ((ARG6 + 2) * 4))] INT_ZEXT [(ARG2 + ((ARG6 + 2) * 4))]
(ARG1 + (((ARG6 + f(ARG5)) + 2) * 4)) CAST (ARG1 + (((ARG6 + f(ARG5)) + 2) * 4))
f(ARG1 , ARG2 , ARG5 , ARG6) INT_ADD f(ARG1 , ARG2 , ARG5 , ARG6) [(ARG2 + ((ARG6 + -1) * 4))]
((ARG6 + f(ARG5)) + 2) INT_ZEXT ((ARG6 + f(ARG5)) + 2)
f(ARG1 , ARG2 , ARG5 , ARG6) INT_ADD [(ARG1 + (((ARG6 + f(ARG5)) + 2) * 4))] f(ARG1 , ARG2 , ARG5 , ARG6)
f(ARG1 , ARG2 , ARG5 , ARG6) COPY f(ARG1 , ARG2 , ARG5 , ARG6)
f(ARG1 , ARG2 , ARG5 , ARG6) INT_MULT [(ARG2 + ((ARG6 + 2) * 4))] f(ARG1 , ARG2 , ARG5 , ARG6)
[(ARG2 + ((ARG6 + -1) * 4))] INT_ZEXT [(ARG2 + ((ARG6 + -1) * 4))]
(ARG2 + ((ARG6 + -1) * 4)) CAST (ARG2 + ((ARG6 + -1) * 4))
(ARG6 + 2) INT_ZEXT (ARG6 + 2)
0 BOOL_AND 0 0
(((ARG6 + f(ARG5)) + 2) * 4) INT_MULT ((ARG6 + f(ARG5)) + 2) 4
f(ARG1 , ARG2 , ARG5 , ARG6) INT_SUB f(ARG1 , ARG2 , ARG5 , ARG6) -1
[(ARG1 + (((ARG6 + f(ARG5)) + 2) * 4))] LOAD 433 (ARG1 + (((ARG6 + f(ARG5)) + 2) * 4))
[(ARG2 + ((ARG6 + -1) * 4))] LOAD 433 (ARG2 + ((ARG6 + -1) * 4))
0 INT_LESS f(ARG1 , ARG2 , ARG5 , ARG6) 4294967296
((ARG6 + -1) * 4) INT_MULT (ARG6 + -1) 4
(ARG6 + -1) INT_ZEXT (ARG6 + -1)
[(ARG1 + (((ARG6 + f(ARG5)) + 2) * 4))] INT_ZEXT [(ARG1 + (((ARG6 + f(ARG5)) + 2) * 4))]
 CBRANCH (4294967295 INT_SLESS f(ARG5 , ARG6))
0 INT_SLESS 4294967295 f(ARG5 , ARG6)
f(ARG5 , ARG6) INT_SEXT f(ARG5 , ARG6)
 CALL func f() [(ARG1 + (f(ARG5 , ARG6) * 4))]
f() CALL func
 BRANCH VZERO
(f(ARG5 , ARG6) + 4294967295) INT_ADD f(ARG5 , ARG6) 4294967295
4689628 PTRSUB 0 4689628
(f(ARG5 , ARG6) * 4) INT_MULT f(ARG5 , ARG6) 4
f() CALL func f() 4689628
[(ARG1 + (f(ARG5 , ARG6) * 4))] LOAD 433 (ARG1 + (f(ARG5 , ARG6) * 4))
(ARG1 + (f(ARG5 , ARG6) * 4)) CAST (ARG1 + (f(ARG5 , ARG6) * 4))
f() CALL func f()
 CALL func f()
f() CALL func
0 INT_EQUAL f() 0
f() CALL func apint
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
apint COPY apint
 CALL func f()
f() CALL func
f(ARG1 , ARG2 , ARG5 , ARG6) INT_SUB ([(ARG1 + ((f(ARG5) + f()) * 4))] - f(ARG1 , ARG2 , ARG5 , ARG6)) (4294967295 & (f(ARG1 , ARG2 , ARG5 , ARG6) * [(ARG2 + (f() * 4))]))
((f(ARG5) + f()) * 4) INT_MULT (f(ARG5) + f()) 4
[(ARG2 + (f() * 4))] INT_ZEXT [(ARG2 + (f() * 4))]
f(ARG1 , ARG2 , ARG5 , ARG6) INT_SUB ((f(ARG1 , ARG2 , ARG5 , ARG6) * [(ARG2 + (f() * 4))]) / 2147483647) f(ARG1 , ARG2 , ARG5 , ARG6)
f(ARG1 , ARG2 , ARG5 , ARG6) SUBPIECE f(ARG1 , ARG2 , ARG5 , ARG6) 0
[(ARG1 + ((f(ARG5) + f()) * 4))] INT_ZEXT [(ARG1 + ((f(ARG5) + f()) * 4))]
((f(ARG1 , ARG2 , ARG5 , ARG6) * [(ARG2 + (f() * 4))]) / 2147483647) INT_RIGHT (f(ARG1 , ARG2 , ARG5 , ARG6) * [(ARG2 + (f() * 4))]) 32
([(ARG1 + ((f(ARG5) + f()) * 4))] - f(ARG1 , ARG2 , ARG5 , ARG6)) INT_SUB [(ARG1 + ((f(ARG5) + f()) * 4))] f(ARG1 , ARG2 , ARG5 , ARG6)
(f() * 4) INT_MULT f() 4
(f(ARG5) + f()) INT_ADD f() f(ARG5)
(ARG2 + (f() * 4)) CAST (ARG2 + (f() * 4))
[(ARG2 + (f() * 4))] LOAD 433 (ARG2 + (f() * 4))
(f(ARG5) + f()) INT_ADD f() f(ARG5)
f() INT_ZEXT f()
f(ARG1 , ARG2 , ARG5 , ARG6) INT_SRIGHT f(ARG1 , ARG2 , ARG5 , ARG6) 32
0 INT_EQUAL f() 0
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(f(ARG5) + f()) INT_ZEXT (f(ARG5) + f())
(f(ARG1 , ARG2 , ARG5 , ARG6) * [(ARG2 + (f() * 4))]) INT_MULT [(ARG2 + (f() * 4))] f(ARG1 , ARG2 , ARG5 , ARG6)
(ARG1 + ((f(ARG5) + f()) * 4)) CAST (ARG1 + ((f(ARG5) + f()) * 4))
(f(ARG5) + f()) INT_ZEXT (f(ARG5) + f())
(4294967295 & (f(ARG1 , ARG2 , ARG5 , ARG6) * [(ARG2 + (f() * 4))])) INT_AND (f(ARG1 , ARG2 , ARG5 , ARG6) * [(ARG2 + (f() * 4))]) 4294967295
[(ARG1 + ((f(ARG5) + f()) * 4))] LOAD 433 (ARG1 + ((f(ARG5) + f()) * 4))
 STORE 433 (ARG1 + ((f(ARG5) + f()) * 4)) f(ARG1 , ARG2 , ARG5 , ARG6)
((f(ARG5) + f()) * 4) INT_MULT (f(ARG5) + f()) 4
(ARG1 + ((f(ARG5) + f()) * 4)) CAST (ARG1 + ((f(ARG5) + f()) * 4))
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
1 COPY 1
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
f() CALL func apint
0 COPY 0
apint COPY apint
 CALL func f() 10
f() CALL func
(((ARG6 + f(ARG5)) + 2) * 4) INT_MULT ((ARG6 + f(ARG5)) + 2) 4
(ARG1 + (((ARG6 + f(ARG5)) + 2) * 4)) CAST (ARG1 + (((ARG6 + f(ARG5)) + 2) * 4))
f(ARG1 , ARG2 , ARG5 , ARG6) INT_SUB f(ARG1 , ARG2 , ARG5 , ARG6) -2
[(ARG1 + (((ARG6 + f(ARG5)) + 2) * 4))] LOAD 433 (ARG1 + (((ARG6 + f(ARG5)) + 2) * 4))
[(ARG1 + (((ARG6 + f(ARG5)) + 2) * 4))] INT_ZEXT [(ARG1 + (((ARG6 + f(ARG5)) + 2) * 4))]
(ARG6 + 2) INT_ZEXT (ARG6 + 2)
f(ARG1 , ARG2 , ARG5 , ARG6) INT_ADD [(ARG1 + (((ARG6 + f(ARG5)) + 2) * 4))] f(ARG1 , ARG2 , ARG5 , ARG6)
f(ARG1 , ARG2 , ARG5 , ARG6) INT_MULT [(ARG2 + ((ARG6 + 2) * 4))] f(ARG1 , ARG2 , ARG5 , ARG6)
[(ARG2 + ((ARG6 + 2) * 4))] INT_ZEXT [(ARG2 + ((ARG6 + 2) * 4))]
0 BOOL_AND 0 0
f(ARG1 , ARG2 , ARG5 , ARG6) INT_SUB f(ARG1 , ARG2 , ARG5 , ARG6) f(ARG1 , ARG2 , ARG5 , ARG6)
f(ARG1 , ARG2 , ARG5 , ARG6) INT_LEFT f(ARG1 , ARG2 , ARG5 , ARG6) 32
((ARG6 + f(ARG5)) + 2) INT_ZEXT ((ARG6 + f(ARG5)) + 2)
(ARG2 + ((ARG6 + 2) * 4)) CAST (ARG2 + ((ARG6 + 2) * 4))
[(ARG2 + ((ARG6 + 2) * 4))] LOAD 433 (ARG2 + ((ARG6 + 2) * 4))
 CBRANCH (0 BOOL_AND 0)
0 INT_LESSEQUAL f(ARG1 , ARG2 , ARG5 , ARG6) f(ARG1 , ARG2 , ARG5 , ARG6)
0 INT_NOTEQUAL f(ARG1 , ARG2 , ARG5 , ARG6) 0
((ARG6 + f(ARG5)) + 2) INT_SUB (ARG6 + f(ARG5)) 2
((ARG6 + 2) * 4) INT_MULT (ARG6 + 2) 4
1 COPY 1
 BRANCH VZERO
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
1 COPY 1
v && "Must provide divisor" COPY v && "Must provide divisor"
void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int) COPY void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int)
 RETURN 1
VZERO COPY VZERO
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 CALL libcall___assert_fail_thunk v && "Must provide divisor" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1512 void KnuthDiv(unsigned int*, unsigned int*, unsigned int*, unsigned int*, unsigned int, unsigned int)
1 COPY 1
 BRANCH VZERO
f(ARG6) INT_SEXT f(ARG6)
 STORE 433 ((f(ARG6) * 4) + ARG4) [(ARG1 + (f(ARG6) * 4))]
0 INT_EQUAL f() 0
f(ARG6) INT_SEXT f(ARG6)
(f(ARG6) * 4) INT_MULT f(ARG6) 4
((f(ARG6) * 4) + ARG4) CAST ((f(ARG6) * 4) + ARG4)
[(ARG1 + (f(ARG6) * 4))] LOAD 433 (ARG1 + (f(ARG6) * 4))
(ARG1 + (f(ARG6) * 4)) CAST (ARG1 + (f(ARG6) * 4))
 BRANCH VZERO
(f(ARG6) + 4294967295) INT_ADD f(ARG6) 4294967295
(f(ARG6) * 4) INT_MULT f(ARG6) 4
apint COPY apint
f() CALL func apint
0 INT_EQUAL f() 0
 CALL func f() 4689630
4689630 PTRSUB 0 4689630
f() CALL func
KnuthDiv: dividend ==  COPY KnuthDiv: dividend == 
 CALL func f()
f() CALL func f() KnuthDiv: dividend == 
f() CALL func
f() CALL func f() ([(ARG1 + ((ARG6 + f(ARG5)) * 4))] # [(ARG1 + (((ARG6 + f(ARG5)) + -1) * 4))]) f()
((f(ARG5) + f()) * 4) INT_MULT (f(ARG5) + f()) 4
(ARG1 + ((f(ARG5) + f()) * 4)) CAST (ARG1 + ((f(ARG5) + f()) * 4))
0 INT_EQUAL [(ARG1 + ((f(ARG5) + f()) * 4))] [f(ARG1 , ARG2 , ARG5)]
[(ARG1 + ((f(ARG5) + f()) * 4))] LOAD 433 (ARG1 + ((f(ARG5) + f()) * 4))
(f(ARG5) + f()) INT_ZEXT (f(ARG5) + f())
(f(ARG5) + f()) INT_ADD f() f(ARG5)
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_LESS ARG6)
([(ARG2 + (f() * 4))] >> (31 & (32 - (f() / 2147483647)))) COPY ([(ARG2 + (f() * 4))] >> (31 & (32 - (f() / 2147483647))))
(f() * 4) INT_MULT f() 4
([(ARG2 + (f() * 4))] >> (31 & (32 - (f() / 2147483647)))) INT_RIGHT [(ARG2 + (f() * 4))] (31 & (32 - (f() / 2147483647)))
(f(ARG2) | ([(ARG2 + (f() * 4))] << (31 & (f() / 2147483647)))) INT_OR ([(ARG2 + (f() * 4))] << (31 & (f() / 2147483647))) f(ARG2)
[(ARG2 + (f() * 4))] LOAD 433 (ARG2 + (f() * 4))
(f() * 4) INT_MULT f() 4
(31 & (32 - (f() / 2147483647))) INT_AND (32 - (f() / 2147483647)) 31
 STORE 433 (ARG2 + (f() * 4)) (f(ARG2) | ([(ARG2 + (f() * 4))] << (31 & (f() / 2147483647))))
f() INT_ZEXT f()
f() INT_ZEXT f()
(ARG2 + (f() * 4)) CAST (ARG2 + (f() * 4))
[(ARG2 + (f() * 4))] LOAD 433 (ARG2 + (f() * 4))
(ARG2 + (f() * 4)) CAST (ARG2 + (f() * 4))
 BRANCH VZERO
(f() * 4) INT_MULT f() 4
(32 - (f() / 2147483647)) INT_SUB 32 (f() / 2147483647)
f() INT_ZEXT f()
(f() + 1) INT_ADD f() 1
(ARG2 + (f() * 4)) CAST (ARG2 + (f() * 4))
([(ARG2 + (f() * 4))] << (31 & (f() / 2147483647))) INT_LEFT [(ARG2 + (f() * 4))] (31 & (f() / 2147483647))
(31 & (f() / 2147483647)) INT_AND (f() / 2147483647) 31
 CALL func f()
f() CALL func
f() CALL func
 CALL func f()
(f(ARG5) * 4) INT_MULT f(ARG5) 4
f(ARG5) INT_SEXT f(ARG5)
KnuthDiv: digit result =  COPY KnuthDiv: digit result = 
(ARG3 + (f(ARG5) * 4)) CAST (ARG3 + (f(ARG5) * 4))
f() CALL func f() [(ARG3 + (f(ARG5) * 4))]
f() CALL func f() KnuthDiv: digit result = 
[(ARG3 + (f(ARG5) * 4))] LOAD 433 (ARG3 + (f(ARG5) * 4))
f(ARG6) CAST f(ARG6)
(f(ARG6) + 1) INT_SUB f(ARG6) 1
0 COPY 0
0 COPY 0
0 COPY 0
0 COPY 0
f(ARG6) CAST f(ARG6)
(f(ARG6) + 1) INT_SUB f(ARG6) 1
4689628 PTRSUB 0 4689628
f(ARG6) CAST f(ARG6)
(ARG2 + ((f(ARG6) * 4) + -4)) CAST (ARG2 + ((f(ARG6) * 4) + -4))
0 INT_SLESS 0 f(ARG6)
 CBRANCH (0 INT_SLESS f(ARG6))
 BRANCH VZERO
0 INT_SLESS 0 f(ARG6)
 CBRANCH (0 INT_SLESS f(ARG6))
 CALL func f()
f() CALL func f()
(f(ARG6) * 4) INT_MULT f(ARG6) 4
f(ARG6) INT_SEXT f(ARG6)
f() CALL func
 CALL func f() [(ARG2 + ((f(ARG6) * 4) + -4))]
f() CALL func f() 4689628
[(ARG2 + ((f(ARG6) * 4) + -4))] LOAD 433 (ARG2 + ((f(ARG6) * 4) + -4))
 CALL func f()
f() CALL func
f() CALL func
 BRANCH VZERO
((f(ARG6) * 4) + -4) INT_ADD (f(ARG6) * 4) -4
0 INT_LESS ARG2 ARG4
0 INT_LESS f() ARG2
0 INT_EQUAL ARG2 1
(ARG2 * 2) INT_MULT ARG2 2
0 INT_LESS f() ARG2
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
(ARG4 * 4294967294) INT_MULT ARG4 4294967294
0 INT_EQUAL ARG4 1
(ARG4 * 6) INT_MULT ARG4 6
0 INT_LESS f() ARG4
(ARG4 * 4) INT_MULT ARG4 4
(ARG4 * 2) INT_MULT ARG4 2
0 INT_LESS f() ARG4
[ARG3] LOAD 433 ARG3
[ARG3] LOAD 433 ARG3
f() CALL func ARG3
(ARG3 + 8) PTRADD ARG3 2 4
(ARG3 + 8) PTRADD ARG3 2 4
(ARG5 + 8) PTRADD ARG5 2 4
(ARG5 + 8) PTRADD ARG5 2 4
(ARG5 + 8) PTRADD ARG5 2 4
0 INT_NOTEQUAL ARG5 0
(ARG5 + 8) PTRADD ARG5 2 4
f() CALL func ARG5
 CALL func ARG5
f(ARG1 , ARG5) LOAD 433 ARG5
 STORE 433 ARG5 [ARG1]
(ARG5 + 8) PTRADD ARG5 2 4
(ARG5 + 8) PTRADD ARG5 2 4
f() CALL func ARG5
(ARG5 + 8) PTRADD ARG5 2 4
f() CALL func ARG5
f() CALL func ARG5
f() CALL func ARG5
0 INT_NOTEQUAL ARG6 0
(ARG6 + 8) PTRADD ARG6 2 4
(ARG6 + 8) PTRADD ARG6 2 4
0 INT_NOTEQUAL ARG6 0
0 INT_NOTEQUAL ARG6 0
(ARG6 + 8) PTRADD ARG6 2 4
(ARG6 + 8) PTRADD ARG6 2 4
f() CALL func ARG6
0 INT_NOTEQUAL ARG6 0
f() CALL func ARG6
f(ARG3 , ARG6) LOAD 433 ARG6
 STORE 433 ARG6 [ARG3]
(ARG6 + 8) PTRADD ARG6 2 4
f() CALL func ARG6
f() CALL func ARG6
(ARG6 + 8) PTRADD ARG6 2 4
(ARG6 + 8) PTRADD ARG6 2 4
0 INT_EQUAL ARG6 0
f() CALL func ARG6
 CALL func ARG6
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (ARG2 INT_LESS ARG4)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG5 INT_NOTEQUAL 0)
0 INT_EQUAL f(ARG1 , ARG5) [ARG1]
 CBRANCH (f(ARG1 , ARG5) INT_EQUAL [ARG1])
 CBRANCH (ARG6 INT_NOTEQUAL 0)
 CBRANCH (ARG2 INT_EQUAL 1)
 CBRANCH ((f(ARG2 , ARG4 , RSP) # f(ARG2 , ARG4 , RSP)) INT_LESS [f(ARG2 , ARG4 , RSP)])
 STORE 433 (f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4)) 0
(f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4)) CAST (f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4))
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
 CBRANCH ([f(ARG2 , ARG4 , RSP)] INT_EQUAL (f(ARG2 , ARG4 , RSP) # f(ARG2 , ARG4 , RSP)))
((f(ARG2 , ARG4) + 4294967295) * 4) INT_MULT (f(ARG2 , ARG4) + 4294967295) 4
 BRANCH VZERO
f(ARG2 , ARG4 , RSP) COPY f(ARG2 , ARG4 , RSP)
(f(ARG2 , ARG4) + 4294967295) INT_SEXT (f(ARG2 , ARG4) + 4294967295)
0 INT_EQUAL [f(ARG2 , ARG4 , RSP)] (f(ARG2 , ARG4 , RSP) # f(ARG2 , ARG4 , RSP))
[f(ARG2 , ARG4 , RSP)] INT_ZEXT [f(ARG2 , ARG4 , RSP)]
(f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4)) INT_ADD f(ARG2 , ARG4 , RSP) ((f(ARG2 , ARG4) + 4294967295) * 4)
 CBRANCH (f() INT_EQUAL 0)
(ARG6 + 8) CAST (ARG6 + 8)
(ARG6 + 8) CAST (ARG6 + 8)
 BRANCH VZERO
 STORE 433 [(ARG6 + 8)] [f(ARG2 , ARG4 , RSP)]
 BRANCH VZERO
 STORE 433 (ARG6 + 8) [f(ARG2 , ARG4 , RSP)]
[(ARG6 + 8)] LOAD 433 (ARG6 + 8)
 CBRANCH (ARG6 INT_NOTEQUAL 0)
((((ARG4 * 6) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) + 1) * 4) INT_MULT (((ARG4 * 6) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) + 1) 4
 BRANCH VZERO
(RSP + -536) PTRSUB RSP -536
((RSP + -536) + ((((ARG4 * 6) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) + 1) * 4)) INT_ADD (RSP + -536) ((((ARG4 * 6) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) + 1) * 4)
((ARG4 * 6) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) INT_ADD (ARG4 * 6) (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)
((RSP + -536) + ((((ARG4 * 6) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) + 1) * 4)) CAST ((RSP + -536) + ((((ARG4 * 6) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) + 1) * 4))
(((ARG2 * 2) + (ARG4 * 4294967294)) * 2) INT_MULT ((ARG2 * 2) + (ARG4 * 4294967294)) 2
(((ARG4 * 6) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) + 1) INT_ZEXT (((ARG4 * 6) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) + 1)
(RSP + -536) CAST (RSP + -536)
(((ARG4 * 6) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) + 1) INT_ADD ((ARG4 * 6) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) 1
 CBRANCH (f() INT_EQUAL 0)
[(ARG6 + 8)] LOAD 433 (ARG6 + 8)
(ARG6 + 8) CAST (ARG6 + 8)
(ARG6 + 8) CAST (ARG6 + 8)
 STORE 433 (ARG6 + 8) 0
 BRANCH VZERO
 CBRANCH ([(ARG6 + 8)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(ARG6 + 8)] 0
 CBRANCH (f() INT_LESS ARG4)
(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4)) CAST (f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4))
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
([(ARG6 + 8)] + (f() * 8)) CAST ([(ARG6 + 8)] + (f() * 8))
((f() * 2) + 1) INT_ADD (f() * 2) 1
(f() * 8) INT_MULT f() 8
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
(ARG6 + 8) CAST (ARG6 + 8)
(f() * 2) INT_ZEXT (f() * 2)
(f() * 2) INT_MULT f() 2
(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4)) INT_ADD f(ARG2 , ARG4 , RSP) (((f() * 2) + 1) * 4)
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
(f(ARG2 , ARG4 , RSP) + (f() * 8)) CAST (f(ARG2 , ARG4 , RSP) + (f() * 8))
(((f() * 2) + 1) * 4) INT_MULT ((f() * 2) + 1) 4
((f() * 2) + 1) INT_ZEXT ((f() * 2) + 1)
[(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4))] LOAD 433 (f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4))
 STORE 433 ([(ARG6 + 8)] + (f() * 8)) ([(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4))] # [(f(ARG2 , ARG4 , RSP) + (f() * 8))])
([(ARG6 + 8)] + (f() * 8)) INT_ADD [(ARG6 + 8)] (f() * 8)
(f(ARG2 , ARG4 , RSP) + (f() * 8)) INT_ADD f(ARG2 , ARG4 , RSP) (f() * 8)
f() INT_ZEXT f()
(f() * 8) INT_MULT (f() * 2) 4
[(ARG6 + 8)] LOAD 433 (ARG6 + 8)
(f() * 2) INT_MULT f() 2
[(f(ARG2 , ARG4 , RSP) + (f() * 8))] LOAD 433 (f(ARG2 , ARG4 , RSP) + (f() * 8))
([(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4))] # [(f(ARG2 , ARG4 , RSP) + (f() * 8))]) PIECE [(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4))] [(f(ARG2 , ARG4 , RSP) + (f() * 8))]
 CBRANCH (f(ARG4) INT_NOTEQUAL 0)
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
(f(ARG4) + -1) INT_ZEXT (f(ARG4) + -1)
(f(ARG2 , ARG4 , RSP) + ((f(ARG4) + -1) * 4)) CAST (f(ARG2 , ARG4 , RSP) + ((f(ARG4) + -1) * 4))
0 INT_EQUAL f(ARG2 , ARG4 , RSP) 0
(f(ARG2 , ARG4 , RSP) + ((f(ARG4) + -1) * 4)) INT_ADD f(ARG2 , ARG4 , RSP) ((f(ARG4) + -1) * 4)
((f(ARG4) + -1) * 4) INT_MULT (f(ARG4) + -1) 4
 CBRANCH (f(ARG2 , ARG4 , RSP) INT_EQUAL 0)
(f(ARG4) + -1) INT_SUB f(ARG4) -1
f(ARG2 , ARG4 , RSP) LOAD 433 (f(ARG2 , ARG4 , RSP) + ((f(ARG4) + -1) * 4))
 CBRANCH (f(ARG4) INT_EQUAL 0)
 CBRANCH (f(ARG4) INT_EQUAL 1)
static void llvm::APInt::divide(llvm::APInt, unsigned int, const llvm::APInt&, unsigned int, llvm::APInt*, llvm::APInt*) COPY static void llvm::APInt::divide(llvm::APInt, unsigned int, const llvm::APInt&, unsigned int, llvm::APInt*, llvm::APInt*)
n != 0 && "Divide by zero?" COPY n != 0 && "Divide by zero?"
0 INT_EQUAL f(ARG4) 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 RETURN 1
 CALL libcall___assert_fail_thunk n != 0 && "Divide by zero?" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1738 static void llvm::APInt::divide(llvm::APInt, unsigned int, const llvm::APInt&, unsigned int, llvm::APInt*, llvm::APInt*)
0 INT_SLESS 4294967295 (f(ARG2 , ARG4) + 4294967295)
(f(ARG2 , ARG4) + 1) INT_ADD f(ARG2 , ARG4) 1
0 INT_NOTEQUAL f(ARG2 , ARG4 , RSP) 0
0 COPY 0
0 COPY 0
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
(f(ARG2 , ARG4) + 4294967295) INT_ADD f(ARG2 , ARG4) 4294967295
[f(ARG2 , ARG4 , RSP)] LOAD 433 f(ARG2 , ARG4 , RSP)
 CBRANCH (f(ARG2 , ARG4 , RSP) INT_NOTEQUAL 0)
 CALL func f(RSP) f(ARG2 , ARG4 , RSP) f(ARG2 , ARG4 , RSP) f(ARG2 , ARG4 , RSP) f(ARG2 , ARG4) f(ARG4)
 CBRANCH (4294967295 INT_SLESS (f(ARG2 , ARG4) + 4294967295))
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (ARG6 INT_EQUAL 0)
3 COPY 3
 BRANCH VZERO
4 COPY 4
((f(ARG2 , ARG4) + 4294967295) * 4) INT_MULT (f(ARG2 , ARG4) + 4294967295) 4
[f(ARG2 , ARG4 , RSP)] INT_ZEXT [f(ARG2 , ARG4 , RSP)]
 BRANCH VZERO
(f(ARG2 , ARG4) + 4294967295) INT_SEXT (f(ARG2 , ARG4) + 4294967295)
(f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4)) CAST (f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4))
(f(ARG2 , ARG4 , RSP) - (f(ARG2 , ARG4 , RSP) * [f(ARG2 , ARG4 , RSP)])) INT_SUB f(ARG2 , ARG4 , RSP) (f(ARG2 , ARG4 , RSP) * [f(ARG2 , ARG4 , RSP)])
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
0 COPY 0
(f(ARG2 , ARG4 , RSP) * [f(ARG2 , ARG4 , RSP)]) INT_MULT f(ARG2 , ARG4 , RSP) [f(ARG2 , ARG4 , RSP)]
(((f(ARG2 , ARG4) + 4294967295) * 4) + f(ARG2 , ARG4 , RSP)) INT_ADD ((f(ARG2 , ARG4) + 4294967295) * 4) f(ARG2 , ARG4 , RSP)
(f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4)) INT_ADD f(ARG2 , ARG4 , RSP) ((f(ARG2 , ARG4) + 4294967295) * 4)
 STORE 433 (f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4)) 1
((f(ARG2 , ARG4) + 4294967295) * 4) INT_MULT (f(ARG2 , ARG4) + 4294967295) 4
((f(ARG2 , ARG4) + 4294967295) * 4) INT_MULT (f(ARG2 , ARG4) + 4294967295) 4
((f(ARG2 , ARG4 , RSP) # f(ARG2 , ARG4 , RSP)) / [f(ARG2 , ARG4 , RSP)]) INT_DIV (f(ARG2 , ARG4 , RSP) # f(ARG2 , ARG4 , RSP)) [f(ARG2 , ARG4 , RSP)]
(((f(ARG2 , ARG4 , RSP) # f(ARG2 , ARG4 , RSP)) / [f(ARG2 , ARG4 , RSP)]) / 2147483647) SUBPIECE ((f(ARG2 , ARG4 , RSP) # f(ARG2 , ARG4 , RSP)) / [f(ARG2 , ARG4 , RSP)]) 0
(((f(ARG2 , ARG4) + 4294967295) * 4) + f(ARG2 , ARG4 , RSP)) CAST (((f(ARG2 , ARG4) + 4294967295) * 4) + f(ARG2 , ARG4 , RSP))
(f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4)) CAST (f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4))
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
(f(ARG2 , ARG4) + 4294967295) INT_SEXT (f(ARG2 , ARG4) + 4294967295)
(f(ARG2 , ARG4) + 4294967295) INT_SEXT (f(ARG2 , ARG4) + 4294967295)
(f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4)) INT_ADD f(ARG2 , ARG4 , RSP) ((f(ARG2 , ARG4) + 4294967295) * 4)
f(ARG2 , ARG4 , RSP) LOAD 433 (f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4))
 STORE 433 (((f(ARG2 , ARG4) + 4294967295) * 4) + f(ARG2 , ARG4 , RSP)) (((f(ARG2 , ARG4 , RSP) # f(ARG2 , ARG4 , RSP)) / [f(ARG2 , ARG4 , RSP)]) / 2147483647)
 CBRANCH (f(ARG2 , ARG4 , RSP) INT_NOTEQUAL 0)
 CALL libcall_operator.delete[]_thunk f(ARG2 , ARG4 , RSP)
 CBRANCH ((ARG4 * 2) INT_LESS 2287828610704211969)
-1 COPY -1
 BRANCH VZERO
(ARG4 * 8) INT_LEFT (ARG4 * 2) 2
 CBRANCH ((((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) INT_LESS 2287828610704211969)
 BRANCH VZERO
((((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) * 4) INT_LEFT (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) 2
-1 COPY -1
 CBRANCH (f(RSP) INT_NOTEQUAL 0)
 CALL libcall_operator.delete[]_thunk f(RSP)
 CBRANCH (f() INT_LESS ARG2)
([(ARG5 + 8)] + (f() * 8)) INT_ADD [(ARG5 + 8)] (f() * 8)
(((f() * 2) + 1) * 4) INT_MULT ((f() * 2) + 1) 4
((f() * 2) + 1) INT_ZEXT ((f() * 2) + 1)
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
(f(ARG2 , ARG4 , RSP) + (f() * 8)) INT_ADD f(ARG2 , ARG4 , RSP) (f() * 8)
(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4)) CAST (f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4))
f() INT_ZEXT f()
([(ARG5 + 8)] + (f() * 8)) CAST ([(ARG5 + 8)] + (f() * 8))
[(ARG5 + 8)] LOAD 433 (ARG5 + 8)
[(f(ARG2 , ARG4 , RSP) + (f() * 8))] LOAD 433 (f(ARG2 , ARG4 , RSP) + (f() * 8))
([(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4))] # [(f(ARG2 , ARG4 , RSP) + (f() * 8))]) PIECE [(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4))] [(f(ARG2 , ARG4 , RSP) + (f() * 8))]
(f() * 8) INT_MULT (f() * 2) 4
(f() * 8) INT_MULT f() 8
(ARG5 + 8) CAST (ARG5 + 8)
(f() * 2) INT_MULT f() 2
((f() * 2) + 1) INT_ADD (f() * 2) 1
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(f() * 2) INT_ZEXT (f() * 2)
(f(ARG2 , ARG4 , RSP) + (f() * 8)) CAST (f(ARG2 , ARG4 , RSP) + (f() * 8))
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
(f() * 2) INT_MULT f() 2
(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4)) INT_ADD f(ARG2 , ARG4 , RSP) (((f() * 2) + 1) * 4)
[(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4))] LOAD 433 (f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4))
 STORE 433 ([(ARG5 + 8)] + (f() * 8)) ([(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4))] # [(f(ARG2 , ARG4 , RSP) + (f() * 8))])
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() [(f() + 40)]
 CBRANCH (f(ARG3 , ARG6) INT_EQUAL [ARG3])
0 INT_EQUAL f(ARG3 , ARG6) [ARG3]
(f() + 40) CAST (f() + 40)
 CBRANCH (f(RSP) INT_NOTEQUAL (RSP + -536))
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -536) PTRSUB RSP -536
0 INT_NOTEQUAL f(RSP) (RSP + -536)
 CBRANCH (ARG4 INT_EQUAL 1)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
 CBRANCH (f() INT_LESS ARG4)
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(f() * 2) INT_ZEXT (f() * 2)
((f() * 2) + 1) INT_ZEXT ((f() * 2) + 1)
(f(ARG3) / 4611686014132420609) SUBPIECE (f(ARG3) / 2147483647) 0
(f(ARG2 , ARG4 , RSP) + (f() * 8)) INT_ADD f(ARG2 , ARG4 , RSP) (f() * 8)
 STORE 433 (f(ARG2 , ARG4 , RSP) + (f() * 8)) (f(ARG3) / 2147483647)
(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4)) INT_ADD f(ARG2 , ARG4 , RSP) (((f() * 2) + 1) * 4)
(f() * 2) INT_MULT f() 2
 STORE 433 (f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4)) (f(ARG3) / 4611686014132420609)
(f(ARG3) / 2147483647) SUBPIECE f(ARG3) 0
f(ARG3) CAST f(ARG3)
(f() * 8) INT_MULT (f() * 2) 4
(f(ARG2 , ARG4 , RSP) + (f() * 8)) CAST (f(ARG2 , ARG4 , RSP) + (f() * 8))
((f() * 2) + 1) INT_ADD (f() * 2) 1
(f(ARG3) / 2147483647) INT_RIGHT f(ARG3) 32
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
(f() * 2) INT_MULT f() 2
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
(f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4)) CAST (f(ARG2 , ARG4 , RSP) + (((f() * 2) + 1) * 4))
(((f() * 2) + 1) * 4) INT_MULT ((f() * 2) + 1) 4
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
 CBRANCH (f(ARG2 , ARG4 , RSP) INT_EQUAL 0)
0 INT_NOTEQUAL f(ARG2 , ARG4) 0
(f(ARG2 , ARG4) + 4294967295) INT_ADD f(ARG2 , ARG4) 4294967295
(f(ARG2 , ARG4) + 4294967295) INT_ADD f(ARG2 , ARG4) 4294967295
 BRANCH VZERO
 CBRANCH (f(ARG2 , ARG4) INT_NOTEQUAL 0)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CALL libcall_operator.delete[]_thunk [(ARG6 + 8)]
[(ARG6 + 8)] LOAD 433 (ARG6 + 8)
(ARG6 + 8) CAST (ARG6 + 8)
[f(ARG2 , ARG4 , RSP)] LOAD 433 f(ARG2 , ARG4 , RSP)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) INT_LESS 2287828610704211969)
 BRANCH VZERO
(((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) * 4) INT_LEFT ((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) 2
-1 COPY -1
static void llvm::APInt::divide(llvm::APInt, unsigned int, const llvm::APInt&, unsigned int, llvm::APInt*, llvm::APInt*) COPY static void llvm::APInt::divide(llvm::APInt, unsigned int, const llvm::APInt&, unsigned int, llvm::APInt*, llvm::APInt*)
!Remainder->isSingleWord() && "Remainder APInt not large enough" COPY !Remainder->isSingleWord() && "Remainder APInt not large enough"
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
0 COPY 0
 CALL libcall___assert_fail_thunk !Remainder->isSingleWord() && "Remainder APInt not large enough" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1823 static void llvm::APInt::divide(llvm::APInt, unsigned int, const llvm::APInt&, unsigned int, llvm::APInt*, llvm::APInt*)
((f(ARG2 , ARG4) + 4294967295) * 4) INT_MULT (f(ARG2 , ARG4) + 4294967295) 4
f(ARG2 , ARG4 , RSP) LOAD 433 (f(RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4))
0 INT_EQUAL (f(ARG2 , ARG4 , RSP) # f(ARG2 , ARG4 , RSP)) 0
(f(RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4)) CAST (f(RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4))
f(RSP) CAST f(RSP)
(f(ARG2 , ARG4) + 4294967295) INT_SEXT (f(ARG2 , ARG4) + 4294967295)
(f(ARG2 , ARG4 , RSP) # f(ARG2 , ARG4 , RSP)) PIECE f(ARG2 , ARG4 , RSP) f(ARG2 , ARG4 , RSP)
(f(RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4)) INT_ADD f(RSP) ((f(ARG2 , ARG4) + 4294967295) * 4)
 CBRANCH ((f(ARG2 , ARG4 , RSP) # f(ARG2 , ARG4 , RSP)) INT_EQUAL 0)
 CBRANCH (f() INT_LESS ARG2)
(f(ARG1) / 2147483647) INT_RIGHT f(ARG1) 32
(f() * 2) INT_MULT f() 2
 BRANCH VZERO
f(ARG1) CAST f(ARG1)
(f(RSP) + (f() * 8)) CAST (f(RSP) + (f() * 8))
(f() * 8) INT_MULT (f() * 2) 4
(f() + 1) INT_ADD f() 1
f(RSP) CAST f(RSP)
(f(RSP) + (((f() * 2) + 1) * 4)) INT_ADD f(RSP) (((f() * 2) + 1) * 4)
(f(RSP) + (((f() * 2) + 1) * 4)) CAST (f(RSP) + (((f() * 2) + 1) * 4))
f(RSP) CAST f(RSP)
(((f() * 2) + 1) * 4) INT_MULT ((f() * 2) + 1) 4
 STORE 433 (f(RSP) + (((f() * 2) + 1) * 4)) (f(ARG1) / 4611686014132420609)
 STORE 433 (f(RSP) + (f() * 8)) (f(ARG1) / 2147483647)
(f(ARG1) / 4611686014132420609) SUBPIECE (f(ARG1) / 2147483647) 0
(f() * 2) INT_MULT f() 2
(f() * 2) INT_ZEXT (f() * 2)
((f() * 2) + 1) INT_ZEXT ((f() * 2) + 1)
((f() * 2) + 1) INT_ADD (f() * 2) 1
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
 CBRANCH (f() INT_EQUAL 1)
(f(RSP) + (f() * 8)) INT_ADD f(RSP) (f() * 8)
0 INT_EQUAL f() 1
 BRANCH VZERO
(ARG5 + 8) CAST (ARG5 + 8)
f() CALL func f()
 STORE 433 (ARG5 + 8) f()
 CBRANCH ((ARG4 * 2) INT_LESS 2287828610704211969)
 BRANCH VZERO
-1 COPY -1
(ARG4 * 8) INT_LEFT (ARG4 * 2) 2
(((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) * 4) INT_MULT ((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) 4
((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) INT_ADD (ARG4 * 2) ((ARG2 * 2) + (ARG4 * 4294967294))
 RETURN 1
 CALL libcall___assert_fail_thunk lhsWords >= rhsWords && "Fractional result" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1665 static void llvm::APInt::divide(llvm::APInt, unsigned int, const llvm::APInt&, unsigned int, llvm::APInt*, llvm::APInt*)
0 COPY 0
((f() * (ARG4 * 2)) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) INT_ADD (f() * (ARG4 * 2)) (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)
((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) INT_ZEXT ((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294)))
0 INT_NOTEQUAL f(ARG4) 0
 CALL libcall_memset_thunk f(ARG2 , ARG4 , RSP) 0 (ARG4 * 8)
(ARG4 * 2) INT_ZEXT (ARG4 * 2)
(ARG4 * 8) INT_MULT (ARG4 * 2) 4
0 INT_EQUAL f(ARG4) 0
(f(RSP) + (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) * 4)) CAST (f(RSP) + (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) * 4))
f(RSP) CAST f(RSP)
((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) INT_ADD (ARG4 * 2) ((ARG2 * 2) + (ARG4 * 4294967294))
((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) INT_ADD (ARG4 * 2) ((ARG2 * 2) + (ARG4 * 4294967294))
 CBRANCH (ARG6 INT_NOTEQUAL 0)
0 INT_LESS (((f() * (ARG4 * 2)) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) + 1) 129
static void llvm::APInt::divide(llvm::APInt, unsigned int, const llvm::APInt&, unsigned int, llvm::APInt*, llvm::APInt*) COPY static void llvm::APInt::divide(llvm::APInt, unsigned int, const llvm::APInt&, unsigned int, llvm::APInt*, llvm::APInt*)
lhsWords >= rhsWords && "Fractional result" COPY lhsWords >= rhsWords && "Fractional result"
 CBRANCH ((((f() * (ARG4 * 2)) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) + 1) INT_LESS 129)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
0 COPY 0
(((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) INT_ADD ((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) 1
 CALL libcall_memset_thunk f(ARG2 , ARG4 , RSP) 0 (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) * 4)
(((f() * (ARG4 * 2)) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) + 1) INT_ADD ((f() * (ARG4 * 2)) + (((ARG2 * 2) + (ARG4 * 4294967294)) * 2)) 1
 STORE 433 (f(RSP) + (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) * 4)) 0
(((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) * 4) INT_MULT ((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) 4
(f(ARG4) + f(ARG2 , ARG4)) INT_ADD f(ARG4) f(ARG2 , ARG4)
(ARG4 * 2) COPY (ARG4 * 2)
 CALL libcall_memset_thunk f(RSP) 0 ((((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) * 4)
0 COPY 0
((((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) * 4) INT_MULT (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) 4
(f() * (ARG4 * 2)) INT_MULT f() (ARG4 * 2)
((ARG2 * 2) + (ARG4 * 4294967294)) INT_ADD (ARG2 * 2) (ARG4 * 4294967294)
((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) INT_ZEXT ((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294)))
(((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) INT_ZEXT (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1)
(((ARG2 * 2) + (ARG4 * 4294967294)) * 2) INT_MULT ((ARG2 * 2) + (ARG4 * 4294967294)) 2
(f(RSP) + (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) * 4)) INT_ADD f(RSP) (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) * 4)
 BRANCH VZERO
 STORE 433 f(ARG2 , ARG4 , RSP) f(ARG2 , ARG4 , RSP)
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
 CBRANCH (f() INT_EQUAL 0)
 STORE 433 (ARG5 + 8) [f(ARG2 , ARG4 , RSP)]
 BRANCH VZERO
(ARG5 + 8) CAST (ARG5 + 8)
(ARG5 + 8) CAST (ARG5 + 8)
[(ARG5 + 8)] LOAD 433 (ARG5 + 8)
 BRANCH VZERO
 STORE 433 [(ARG5 + 8)] [f(ARG2 , ARG4 , RSP)]
 BRANCH VZERO
[(ARG5 + 8)] LOAD 433 (ARG5 + 8)
(ARG5 + 8) CAST (ARG5 + 8)
 CBRANCH ([(ARG5 + 8)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(ARG5 + 8)] 0
(ARG5 + 8) CAST (ARG5 + 8)
 STORE 433 (ARG5 + 8) 0
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
 CALL libcall_operator.delete[]_thunk [(ARG5 + 8)]
[(ARG5 + 8)] LOAD 433 (ARG5 + 8)
(ARG5 + 8) CAST (ARG5 + 8)
(ARG4 * 2) INT_ZEXT (ARG4 * 2)
f() CAST f()
((((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) * 4) INT_MULT (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) 4
f() CAST f()
(((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) INT_ADD ((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) 1
((RSP + -536) + ((((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) * 4)) INT_ADD (RSP + -536) ((((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) * 4)
((((ARG2 * 2) + (ARG4 * 4294967294)) + (ARG4 * 4)) + 1) INT_ADD (((ARG2 * 2) + (ARG4 * 4294967294)) + (ARG4 * 4)) 1
(RSP + -536) PTRSUB RSP -536
0 INT_LESS (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) 2287828610704211969
f() CALL libcall_operator.new[]_thunk f(ARG2 , ARG4)
((RSP + -536) + (((((ARG2 * 2) + (ARG4 * 4294967294)) + (ARG4 * 4)) + 1) * 4)) INT_ADD (RSP + -536) (((((ARG2 * 2) + (ARG4 * 4294967294)) + (ARG4 * 4)) + 1) * 4)
0 INT_LESS ((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) 2287828610704211969
f() CALL libcall_operator.new[]_thunk f(ARG2 , ARG4)
(RSP + -536) PTRSUB RSP -536
0 INT_LESS (ARG4 * 2) 2287828610704211969
(((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) INT_ZEXT (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1)
f() CALL libcall_operator.new[]_thunk f(ARG4)
(RSP + -536) PTRSUB RSP -536
((RSP + -536) + ((((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) * 4)) CAST ((RSP + -536) + ((((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) * 4))
(RSP + -536) CAST (RSP + -536)
(((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) INT_ADD ((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) 1
((((ARG2 * 2) + (ARG4 * 4294967294)) + (ARG4 * 4)) + 1) INT_ZEXT ((((ARG2 * 2) + (ARG4 * 4294967294)) + (ARG4 * 4)) + 1)
(((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1) INT_ZEXT (((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) + 1)
f() CAST f()
((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) INT_ADD (ARG4 * 2) ((ARG2 * 2) + (ARG4 * 4294967294))
((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) INT_ADD (ARG4 * 2) ((ARG2 * 2) + (ARG4 * 4294967294))
((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) INT_ADD (ARG4 * 2) ((ARG2 * 2) + (ARG4 * 4294967294))
((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294))) INT_ZEXT ((ARG4 * 2) + ((ARG2 * 2) + (ARG4 * 4294967294)))
(((ARG2 * 2) + (ARG4 * 4294967294)) + (ARG4 * 4)) INT_ADD ((ARG2 * 2) + (ARG4 * 4294967294)) (ARG4 * 4)
 CBRANCH (ARG6 INT_NOTEQUAL 0)
((RSP + -536) + (((((ARG2 * 2) + (ARG4 * 4294967294)) + (ARG4 * 4)) + 1) * 4)) CAST ((RSP + -536) + (((((ARG2 * 2) + (ARG4 * 4294967294)) + (ARG4 * 4)) + 1) * 4))
(RSP + -536) CAST (RSP + -536)
(((((ARG2 * 2) + (ARG4 * 4294967294)) + (ARG4 * 4)) + 1) * 4) INT_MULT ((((ARG2 * 2) + (ARG4 * 4294967294)) + (ARG4 * 4)) + 1) 4
 CBRANCH (f() INT_NOTEQUAL 0)
static void llvm::APInt::divide(llvm::APInt, unsigned int, const llvm::APInt&, unsigned int, llvm::APInt*, llvm::APInt*) COPY static void llvm::APInt::divide(llvm::APInt, unsigned int, const llvm::APInt&, unsigned int, llvm::APInt*, llvm::APInt*)
0 COPY 0
 RETURN 1
!Quotient->isSingleWord() && "Quotient APInt not large enough" COPY !Quotient->isSingleWord() && "Quotient APInt not large enough"
 CALL libcall___assert_fail_thunk !Quotient->isSingleWord() && "Quotient APInt not large enough" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1792 static void llvm::APInt::divide(llvm::APInt, unsigned int, const llvm::APInt&, unsigned int, llvm::APInt*, llvm::APInt*)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
f(ARG2 , ARG4 , RSP) LOAD 433 (f(RSP) + ((f(ARG2 , ARG4) + 1) * 4))
0 INT_EQUAL f(ARG2 , ARG4 , RSP) 0
(f(ARG2 , ARG4) + 1) INT_ZEXT (f(ARG2 , ARG4) + 1)
((f(ARG2 , ARG4) + 1) * 4) INT_MULT (f(ARG2 , ARG4) + 1) 4
(f(RSP) + ((f(ARG2 , ARG4) + 1) * 4)) INT_ADD f(RSP) ((f(ARG2 , ARG4) + 1) * 4)
(f(ARG2 , ARG4) + 1) INT_SUB f(ARG2 , ARG4) 1
(f(RSP) + ((f(ARG2 , ARG4) + 1) * 4)) CAST (f(RSP) + ((f(ARG2 , ARG4) + 1) * 4))
f(RSP) CAST f(RSP)
 CBRANCH (f(ARG2 , ARG4 , RSP) INT_NOTEQUAL 0)
 CALL libcall_operator.delete[]_thunk f(ARG2 , ARG4 , RSP)
0 INT_NOTEQUAL f(ARG2 , ARG4 , RSP) 0
0 INT_NOTEQUAL f(RSP) 0
0 INT_NOTEQUAL f(ARG2 , ARG4 , RSP) 0
0 INT_NOTEQUAL f(ARG2 , ARG4 , RSP) 0
 CBRANCH (f(ARG2 , ARG4 , RSP) INT_NOTEQUAL 0)
(ARG3 + 8) CAST (ARG3 + 8)
([(ARG3 + 8)] + (f() * 8)) INT_ADD [(ARG3 + 8)] (f() * 8)
 BRANCH VZERO
[([(ARG3 + 8)] + (f() * 8))] LOAD 433 ([(ARG3 + 8)] + (f() * 8))
(ARG3 + 8) CAST (ARG3 + 8)
([(ARG3 + 8)] + (f() * 8)) CAST ([(ARG3 + 8)] + (f() * 8))
f() INT_ZEXT f()
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
(f() * 8) INT_MULT f() 8
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
(f(ARG4) + -1) INT_SUB f(ARG4) -1
(f(ARG4) + -1) INT_SUB f(ARG4) -1
(f(ARG2 , ARG4) + 1) INT_ADD f(ARG2 , ARG4) 1
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
 CALL libcall_operator.delete[]_thunk f(ARG2 , ARG4 , RSP)
[f(ARG2 , ARG4 , RSP)] LOAD 433 f(ARG2 , ARG4 , RSP)
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
(ARG4 * 2) INT_ZEXT (ARG4 * 2)
f() CALL libcall_operator.new[]_thunk f(ARG4)
f() CAST f()
0 INT_LESS (ARG4 * 2) 2287828610704211969
(ARG6 + 8) CAST (ARG6 + 8)
 BRANCH VZERO
 STORE 433 (ARG6 + 8) f()
f() CALL func f()
((f(ARG2 , ARG4) + 4294967295) * 4) INT_MULT (f(ARG2 , ARG4) + 4294967295) 4
(f(ARG2 , ARG4) + 4294967295) INT_SEXT (f(ARG2 , ARG4) + 4294967295)
0 COPY 0
[f(ARG2 , ARG4 , RSP)] INT_ZEXT [f(ARG2 , ARG4 , RSP)]
0 INT_LESS (f(ARG2 , ARG4 , RSP) # f(ARG2 , ARG4 , RSP)) [f(ARG2 , ARG4 , RSP)]
 BRANCH VZERO
0 COPY 0
(f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4)) INT_ADD f(ARG2 , ARG4 , RSP) ((f(ARG2 , ARG4) + 4294967295) * 4)
 STORE 433 (f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4)) 0
(f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4)) CAST (f(ARG2 , ARG4 , RSP) + ((f(ARG2 , ARG4) + 4294967295) * 4))
f(ARG2 , ARG4 , RSP) CAST f(ARG2 , ARG4 , RSP)
(ARG4 * 2) INT_ZEXT (ARG4 * 2)
 CALL libcall_memset_thunk f(ARG2 , ARG4 , RSP) 0 (ARG4 * 8)
(ARG4 * 8) INT_MULT (ARG4 * 2) 4
 CALL func ARG1 [ARG2] ([[(ARG2 + 8)]] % [[(ARG3 + 8)]]) 0
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -56) (RSP + -56)
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 [ARG2] 0 0
 CALL func ARG1 [ARG2] ([(ARG2 + 8)] % [(ARG3 + 8)]) 0
 CALL func ARG1 [ARG2] 0 0
[ARG2] LOAD 433 ARG2
 CALL func (RSP + -40) ARG2 ARG2
f(ARG3) CALL func ARG2 ARG3 ARG3
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
f(ARG3) CALL func ARG2 ARG3 ARG3
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
[ARG3] LOAD 433 ARG3
f() CALL func ARG3
(ARG3 + 8) PTRADD ARG3 2 4
(ARG3 + 8) PTRADD ARG3 2 4
 CALL func (RSP + -40) f() ARG3 f() 0 (RSP + -56)
(ARG3 + 8) PTRADD ARG3 2 4
0 INT_NOTEQUAL [ARG2] [ARG3]
 CBRANCH ([ARG2] INT_NOTEQUAL [ARG3])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 1)
 BRANCH VZERO
 CALL func (RSP + -56)
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
([[(ARG2 + 8)]] % [[(ARG3 + 8)]]) INT_REM [[(ARG2 + 8)]] [[(ARG3 + 8)]]
[[(ARG2 + 8)]] LOAD 433 [(ARG2 + 8)]
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) 1 0 0
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
(ARG3 + 8) CAST (ARG3 + 8)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40)
(ARG2 + 8) CAST (ARG2 + 8)
[[(ARG3 + 8)]] LOAD 433 [(ARG3 + 8)]
(RSP + -40) PTRSUB RSP -40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 CBRANCH (f(ARG3) INT_EQUAL 0)
0 INT_EQUAL f() 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
(f() + 40) CAST (f() + 40)
 CALL libcall___assert_fail_thunk rhsWords && "Performing remainder operation by zero ???" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1901 llvm::APInt llvm::APInt::urem(const llvm::APInt&) const
llvm::APInt llvm::APInt::urem(const llvm::APInt&) const COPY llvm::APInt llvm::APInt::urem(const llvm::APInt&) const
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
(f() + 40) INT_ADD f() 40
rhsWords && "Performing remainder operation by zero ???" COPY rhsWords && "Performing remainder operation by zero ???"
0 INT_NOTEQUAL 0 [(f() + 40)]
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
[(f() + 40)] LOAD 433 (f() + 40)
 RETURN 1
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
 CBRANCH ([(ARG3 + 8)] INT_EQUAL 0)
0 INT_EQUAL [(ARG3 + 8)] 0
(ARG3 + 8) CAST (ARG3 + 8)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
 CALL libcall___assert_fail_thunk RHS.VAL != 0 && "Remainder by zero?" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1890 llvm::APInt llvm::APInt::urem(const llvm::APInt&) const
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
 BRANCH VZERO
(ARG3 + 8) CAST (ARG3 + 8)
([(ARG2 + 8)] % [(ARG3 + 8)]) INT_REM [(ARG2 + 8)] [(ARG3 + 8)]
llvm::APInt llvm::APInt::urem(const llvm::APInt&) const COPY llvm::APInt llvm::APInt::urem(const llvm::APInt&) const
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 RETURN 1
(ARG2 + 8) CAST (ARG2 + 8)
RHS.VAL != 0 && "Remainder by zero?" COPY RHS.VAL != 0 && "Remainder by zero?"
0 INT_LESS f() f()
 CBRANCH f()
 CBRANCH (f() INT_LESS f())
 BRANCH VZERO
 CBRANCH (f(ARG3) INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 RETURN 1
llvm::APInt llvm::APInt::urem(const llvm::APInt&) const COPY llvm::APInt llvm::APInt::urem(const llvm::APInt&) const
0 INT_NOTEQUAL f() 0
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be the same" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1888 llvm::APInt llvm::APInt::urem(const llvm::APInt&) const
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
BitWidth == RHS.BitWidth && "Bit widths must be the same" COPY BitWidth == RHS.BitWidth && "Bit widths must be the same"
 BRANCH VZERO
0 INT_EQUAL f(ARG3) 0
(f() + 1) INT_ADD f() 1
f() CALL func (f() + 4294967295)
 BRANCH VZERO
0 COPY 0
(f() + 4294967295) INT_ADD f() 4294967295
0 INT_NOTEQUAL f(ARG3) 0
0 COPY 0
(f() + 4294967295) INT_ADD f() 4294967295
(f() + 1) INT_ADD f() 1
f() CALL func (f() + 4294967295)
 BRANCH VZERO
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
f() CALL func ARG1
 CALL func ARG1
(ARG1 + 8) PTRADD ARG1 2 4
 STORE 433 ARG1 [ARG2]
 CALL func ARG1 ARG2 ARG2
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH f()
 RETURN 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
0 COPY 0
 BRANCH VZERO
1 COPY 1
(ARG1 + 8) CAST (ARG1 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
 BRANCH VZERO
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 STORE 433 (ARG1 + 8) [(ARG2 + 8)]
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL f())
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 COPY 0
([(ARG1 + 8)] & -256) INT_OR ([(ARG1 + 8)] & -256) 0
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_EQUAL [(ARG1 + 8)] 0
([(ARG1 + 8)] & -256) INT_AND [(ARG1 + 8)] -256
 RETURN 0 0
 RETURN 0 f(ARG1)
0 INT_ZEXT 0
0 INT_NOTEQUAL f() f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() INT_ZEXT f()
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
0 INT_NOTEQUAL [([(ARG1 + 8)] + (f() * 8))] 0
1 COPY 1
 CBRANCH ([([(ARG1 + 8)] + (f() * 8))] INT_NOTEQUAL 0)
(ARG1 + 8) CAST (ARG1 + 8)
(f() * 8) INT_MULT f() 8
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
 CALL func ARG1 (RSP + -56) (RSP + -56)
 CALL func ARG1 ARG2 ARG2
ARG1 COPY ARG1
 CALL func (RSP + -40) ARG1 (RSP + -72) ARG1
 CALL func (RSP + -72) ARG3 ARG3
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -72) PTRSUB RSP -72
 CBRANCH (0 INT_NOTEQUAL [40])
(f() + 40) INT_ADD f() 40
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -72)
0 INT_NOTEQUAL 0 [40]
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -72) PTRSUB RSP -72
(f() + 40) CAST (f() + 40)
f(RSP) CALL func (RSP + -72)
[40] LOAD 433 (f() + 40)
0 INT_EQUAL f(RSP) 1
 CBRANCH (f(RSP) INT_EQUAL 1)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 CALL func (RSP + -56) (RSP + -72) (RSP + -72)
 CALL func (RSP + -56)
 CALL func (RSP + -72) (RSP + -40) (RSP + -40)
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -40) ARG2 (RSP + -40)
[ARG2] LOAD 433 ARG2
(RSP + -40) PTRSUB RSP -40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CALL func (RSP + -40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
(RSP + -40) PTRSUB RSP -40
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -40) PTRSUB RSP -40
[40] LOAD 433 40
 CALL func (RSP + -40) [ARG2] 0 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 CALL func ARG2 (RSP + -72) (RSP + -72)
 CALL func ARG2 (RSP + -72) (RSP + -72)
 CALL func ARG2 ARG3 f(ARG1) 0
 CALL func ARG2 ARG3 0 0
 CALL func ARG2 (RSP + -56) (RSP + -56)
 CALL func ARG2 ARG3 0 0
ARG2 COPY ARG2
(ARG1 / 2147483647) INT_RIGHT ARG1 52
(ARG1 & 4503599627370495) INT_AND ARG1 4503599627370495
ARG1 CAST ARG1
ARG1 CAST ARG1
ARG3 INT_ZEXT ARG3
 CALL func (RSP + -56) ARG3 f(ARG1) 0
 CALL func (RSP + -72) ARG3 (4503599627370496 | (ARG1 & 4503599627370495)) 0
0 INT_EQUAL 0 [(f() + 40)]
(2047 & (ARG1 / 4611686014132420609)) INT_AND (ARG1 / 4611686014132420609) 2047
(ARG1 / 4611686014132420609) SUBPIECE (ARG1 / 2147483647) 0
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (((2047 & (ARG1 / 4611686014132420609)) + -1023) INT_SLESS 0)
(f() + 40) CAST (f() + 40)
0 INT_SLESS ((2047 & (ARG1 / 4611686014132420609)) + -1023) 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
((2047 & (ARG1 / 4611686014132420609)) + -1023) INT_SUB (2047 & (ARG1 / 4611686014132420609)) -1023
(f() + 40) INT_ADD f() 40
(2047 & (ARG1 / 4611686014132420609)) INT_ZEXT (2047 & (ARG1 / 4611686014132420609))
 CBRANCH (ARG1 INT_SLESS 0)
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
 BRANCH VZERO
0 INT_SLESS ((2047 & (ARG1 / 4611686014132420609)) + -1023) 52
 CBRANCH (((2047 & (ARG1 / 4611686014132420609)) + -1023) INT_SLESS 52)
 BRANCH VZERO
(4503599627370496 | (ARG1 & 4503599627370495)) INT_OR (ARG1 & 4503599627370495) 4503599627370496
 CBRANCH (((2047 & (ARG1 / 4611686014132420609)) + 1075) INT_SLESS ARG3)
(((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647) SUBPIECE ((2047 & (ARG1 / 4611686014132420609)) + -1023) 0
((2047 & (ARG1 / 4611686014132420609)) + 1075) INT_SUB (2047 & (ARG1 / 4611686014132420609)) 1075
0 INT_SLESS ((2047 & (ARG1 / 4611686014132420609)) + 1075) ARG3
((2047 & (ARG1 / 4611686014132420609)) + 1075) CAST ((2047 & (ARG1 / 4611686014132420609)) + 1075)
 CBRANCH (ARG1 INT_SLESS 0)
ARG3 CAST ARG3
0 INT_SLESS ARG1 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG2
 RETURN 1
(RSP + -72) PTRSUB RSP -72
(RSP + -56) PTRSUB RSP -56
(RSP + -72) PTRSUB RSP -72
(52 - (((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647)) INT_SUB 52 (((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647)
 CALL func (RSP + -56) (RSP + -72) ((((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647) + 4294967244) (RSP + -72)
((((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647) + 4294967244) INT_ADD (((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647) 4294967244
(RSP + -56) PTRSUB RSP -56
(((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647) SUBPIECE ((2047 & (ARG1 / 4611686014132420609)) + -1023) 0
(RSP + -72) PTRSUB RSP -72
(RSP + -56) PTRSUB RSP -56
f(ARG1) INT_RIGHT (4503599627370496 | (ARG1 & 4503599627370495)) (63 & (52 - (((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647)))
(63 & (52 - (((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647))) INT_AND (52 - (((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647)) 63
(52 - (((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647)) INT_SUB 52 (((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -72) (RSP + -56) (RSP + -56)
f(ARG1) INT_RIGHT (4503599627370496 | (ARG1 & 4503599627370495)) (63 & (52 - (((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647)))
(63 & (52 - (((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647))) INT_AND (52 - (((2047 & (ARG1 / 4611686014132420609)) + -1023) / 2147483647)) 63
 BRANCH VZERO
 CALL func (RSP + -56)
 CALL func (RSP + -72)
(RSP + -72) PTRSUB RSP -72
(RSP + -56) PTRSUB RSP -56
0 INT_SLESS ARG1 0
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
 BRANCH VZERO
9218868437227405312 COPY 9218868437227405312
 RETURN 0 9218868437227405312
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG2
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 RETURN 0 f(ARG1)
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() * 8) INT_MULT f() 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) INT_ADD (f() * 8) [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
f() INT_ZEXT f()
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
 CALL func (RSP + -56) ARG1 ARG1
 CALL func ARG1 0
f() CALL func ARG1
 CALL func ARG1 0
f() CALL func ARG1 ([ARG1] + 4294967295) ([ARG1] + 4294967295)
 CALL func (RSP + -56) ARG1 ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
0 INT_EQUAL ARG2 0
0 INT_EQUAL ARG2 1
0 INT_EQUAL ARG2 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH f()
0 INT_EQUAL f() 0
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_LESS 1024)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() 0
0 INT_NOTEQUAL f() [(f() + 40)]
 CALL func (RSP + -56)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
f() CALL func (f() + 1)
 CBRANCH (ARG2 INT_EQUAL 1)
(f() + 1) INT_SUB f() 1
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_EQUAL 1)
 BRANCH VZERO
 BRANCH VZERO
 CALL func
 CALL func
 CBRANCH (f() INT_EQUAL 0)
 CALL libcall___assert_fail_thunk hiWord > 0 && "huh?" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 915 double llvm::APInt::roundToDouble(bool) const
hiWord > 0 && "huh?" COPY hiWord > 0 && "huh?"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 RETURN 1
double llvm::APInt::roundToDouble(bool) const COPY double llvm::APInt::roundToDouble(bool) const
 CBRANCH (64 INT_LESS f())
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CBRANCH (ARG2 INT_EQUAL 0)
f() CALL func (RSP + -56)
0 INT_LESS f() 1024
0 INT_EQUAL f() 0
 CBRANCH (ARG2 INT_EQUAL 0)
0 INT_EQUAL f() 1
([ARG1] + 4294967295) INT_ADD [ARG1] 4294967295
0 COPY 0
 BRANCH VZERO
 BRANCH VZERO
0 INT_EQUAL f() 0
0 INT_LESS 64 f()
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
0 INT_LESS ARG3 65
 CALL func (RSP + -40) f() ARG3
(ARG3 / 64) INT_RIGHT ARG3 6
 CALL func ARG1 ARG3 [f(ARG2)] 0
(~(ARG3) + 1) INT_2COMP ARG3
f() CALL func ARG3
0 INT_LESSEQUAL [ARG2] ARG3
0 INT_EQUAL ARG3 0
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -40) (RSP + -40)
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f(ARG2) CALL func ARG2
 CBRANCH ([ARG2] INT_LESSEQUAL ARG3)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ((ARG3 / 64) INT_NOTEQUAL f())
0 INT_NOTEQUAL (ARG3 / 64) f()
(ARG2 + 8) CAST (ARG2 + 8)
(f() * 8) INT_MULT f() 8
 STORE 433 (A_Stack[-0x20]:8 + (f() * 8)) [([(ARG2 + 8)] + (f() * 8))]
([(ARG2 + 8)] + (f() * 8)) INT_ADD [(ARG2 + 8)] (f() * 8)
f() INT_ZEXT f()
(A_Stack[-0x20]:8 + (f() * 8)) CAST (A_Stack[-0x20]:8 + (f() * 8))
[([(ARG2 + 8)] + (f() * 8))] LOAD 433 ([(ARG2 + 8)] + (f() * 8))
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(A_Stack[-0x20]:8 + (f() * 8)) INT_ADD (f() * 8) A_Stack[-0x20]:8
([(ARG2 + 8)] + (f() * 8)) CAST ([(ARG2 + 8)] + (f() * 8))
 CALL libcall___assert_fail_thunk width < BitWidth && "Invalid APInt Truncate request" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 933 llvm::APInt llvm::APInt::trunc(unsigned int) const
width < BitWidth && "Invalid APInt Truncate request" COPY width < BitWidth && "Invalid APInt Truncate request"
llvm::APInt llvm::APInt::trunc(unsigned int) const COPY llvm::APInt llvm::APInt::trunc(unsigned int) const
 CBRANCH (ARG3 INT_EQUAL 0)
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 CBRANCH ((63 & (~(ARG3) + 1)) INT_NOTEQUAL 0)
(f() * 8) INT_MULT f() 8
([([(ARG2 + 8)] + (f() * 8))] << ((63 & (~(ARG3) + 1)) / 2147483647)) INT_LEFT [([(ARG2 + 8)] + (f() * 8))] ((63 & (~(ARG3) + 1)) / 2147483647)
((63 & (~(ARG3) + 1)) / 2147483647) SUBPIECE (63 & (~(ARG3) + 1)) 0
([(ARG2 + 8)] + (f() * 8)) INT_ADD [(ARG2 + 8)] (f() * 8)
([(ARG2 + 8)] + (f() * 8)) CAST ([(ARG2 + 8)] + (f() * 8))
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(f() * 8) INT_MULT f() 8
f(ARG2 , ARG3) INT_RIGHT ([([(ARG2 + 8)] + (f() * 8))] << ((63 & (~(ARG3) + 1)) / 2147483647)) ((63 & (~(ARG3) + 1)) / 2147483647)
f() INT_ZEXT f()
[([(ARG2 + 8)] + (f() * 8))] LOAD 433 ([(ARG2 + 8)] + (f() * 8))
(A_Stack[-0x20]:8 + (f() * 8)) INT_ADD (f() * 8) A_Stack[-0x20]:8
(ARG2 + 8) CAST (ARG2 + 8)
([([(ARG2 + 8)] + (f() * 8))] << ((63 & (~(ARG3) + 1)) / 2147483647)) CAST ([([(ARG2 + 8)] + (f() * 8))] << ((63 & (~(ARG3) + 1)) / 2147483647))
f() INT_ZEXT f()
(A_Stack[-0x20]:8 + (f() * 8)) CAST (A_Stack[-0x20]:8 + (f() * 8))
 STORE 433 (A_Stack[-0x20]:8 + (f() * 8)) f(ARG2 , ARG3)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CBRANCH (ARG3 INT_LESS 65)
(63 & (~(ARG3) + 1)) INT_AND (~(ARG3) + 1) 63
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
0 COPY 0
(RSP + -40) PTRSUB RSP -40
f() CALL func f()
f(ARG2) CAST f(ARG2)
 BRANCH VZERO
[f(ARG2)] LOAD 433 f(ARG2)
(RSP + -40) PTRSUB RSP -40
0 INT_NOTEQUAL (63 & (~(ARG3) + 1)) 0
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CALL libcall___assert_fail_thunk width && "Can't truncate to 0 bits" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 934 llvm::APInt llvm::APInt::trunc(unsigned int) const
[(f() + 40)] LOAD 433 (f() + 40)
llvm::APInt llvm::APInt::trunc(unsigned int) const COPY llvm::APInt llvm::APInt::trunc(unsigned int) const
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
width && "Can't truncate to 0 bits" COPY width && "Can't truncate to 0 bits"
 RETURN 1
(f() + 40) CAST (f() + 40)
(ARG3 / 64) INT_RIGHT ARG3 6
 CALL func (RSP + -40) f() ARG3
f() CALL func ARG3
(ARG3 / 2147483647) SUBPIECE ARG3 0
 CALL func ARG1 ARG3 f(ARG2 , ARG3) 0
0 INT_LESSEQUAL ARG3 [ARG2]
(~(ARG3) + 1) INT_2COMP ARG3
0 INT_LESS ARG3 65
 CALL func ARG1 (RSP + -40) (RSP + -40)
ARG1 COPY ARG1
f(ARG2) CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
f(ARG2) CALL func ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
 CBRANCH (ARG3 INT_LESSEQUAL [ARG2])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
llvm::APInt llvm::APInt::sext(unsigned int) const COPY llvm::APInt llvm::APInt::sext(unsigned int) const
width > BitWidth && "Invalid APInt SignExtend request" COPY width > BitWidth && "Invalid APInt SignExtend request"
 CBRANCH (ARG3 INT_LESS 65)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
 RETURN 1
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CALL libcall___assert_fail_thunk width > BitWidth && "Invalid APInt SignExtend request" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 956 llvm::APInt llvm::APInt::sext(unsigned int) const
 CBRANCH ((63 & (~([ARG2]) + 1)) INT_EQUAL 0)
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
(f(ARG2) + (f() * 8)) CAST (f(ARG2) + (f() * 8))
(f(ARG2) + (f() * 8)) INT_ADD (f() * 8) f(ARG2)
f(ARG2) INT_SRIGHT ([(f(ARG2) + (f() * 8))] << ((63 & (~([ARG2]) + 1)) / 2147483647)) ((63 & (~([ARG2]) + 1)) / 2147483647)
(f(ARG2) / 2147483647) INT_SRIGHT f(ARG2) 63
 BRANCH VZERO
((63 & (~([ARG2]) + 1)) / 2147483647) SUBPIECE (63 & (~([ARG2]) + 1)) 0
([(f(ARG2) + (f() * 8))] << ((63 & (~([ARG2]) + 1)) / 2147483647)) INT_LEFT [(f(ARG2) + (f() * 8))] ((63 & (~([ARG2]) + 1)) / 2147483647)
[(f(ARG2) + (f() * 8))] LOAD 433 (f(ARG2) + (f() * 8))
 CBRANCH ((ARG3 / 64) INT_NOTEQUAL f())
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
0 INT_NOTEQUAL (ARG3 / 64) f()
((f() * 8) + f()) INT_ADD (f() * 8) f()
((f() * 8) + f()) CAST ((f() * 8) + f())
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
 STORE 433 ((f() * 8) + f()) f(ARG2)
(f(ARG2) / 2147483647) INT_SRIGHT f(ARG2) 63
(64 - (ARG3 / 2147483647)) INT_SUB 64 (ARG3 / 2147483647)
0 INT_NOTEQUAL (63 & (~(ARG3) + 1)) 0
0 COPY 0
(63 & (~(ARG3) + 1)) INT_AND (~(ARG3) + 1) 63
(~([ARG2]) + 1) INT_2COMP [ARG2]
(RSP + -40) PTRSUB RSP -40
((ARG3 / 2147483647) - ([ARG2] / 2147483647)) INT_SUB (ARG3 / 2147483647) ([ARG2] / 2147483647)
([ARG2] / 2147483647) SUBPIECE [ARG2] 0
([ARG2] / 64) INT_RIGHT [ARG2] 6
([(ARG2 + 8)] << (63 & (64 - ([ARG2] / 2147483647)))) INT_LEFT [(ARG2 + 8)] (63 & (64 - ([ARG2] / 2147483647)))
0 COPY 0
(63 & (64 - ([ARG2] / 2147483647))) INT_AND (64 - ([ARG2] / 2147483647)) 63
 CALL func (RSP + -40)
f(ARG2 , ARG3) CAST f(ARG2 , ARG3)
f(ARG2 , ARG3) INT_RIGHT f(ARG2 , ARG3) (63 & (64 - (ARG3 / 2147483647)))
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(63 & (64 - (ARG3 / 2147483647))) INT_AND (64 - (ARG3 / 2147483647)) 63
(ARG2 + 8) CAST (ARG2 + 8)
([ARG2] / 2147483647) SUBPIECE [ARG2] 0
0 INT_EQUAL (63 & (~([ARG2]) + 1)) 0
 BRANCH VZERO
f(ARG2 , ARG3) INT_SRIGHT ([(ARG2 + 8)] << (63 & (64 - ([ARG2] / 2147483647)))) (63 & ((ARG3 / 2147483647) - ([ARG2] / 2147483647)))
(64 - ([ARG2] / 2147483647)) INT_SUB 64 ([ARG2] / 2147483647)
(63 & ((ARG3 / 2147483647) - ([ARG2] / 2147483647))) INT_AND ((ARG3 / 2147483647) - ([ARG2] / 2147483647)) 63
0 INT_NOTEQUAL ([ARG2] / 64) f()
f() CALL func f()
(RSP + -40) PTRSUB RSP -40
 CBRANCH (([ARG2] / 64) INT_NOTEQUAL f())
(RSP + -40) PTRSUB RSP -40
 CBRANCH ((63 & (~(ARG3) + 1)) INT_NOTEQUAL 0)
(63 & (~([ARG2]) + 1)) INT_AND (~([ARG2]) + 1) 63
[(f(ARG2) + (f() * 8))] LOAD 433 (f(ARG2) + (f() * 8))
f() INT_ZEXT f()
 STORE 433 ((f() * 8) + f()) [(f(ARG2) + (f() * 8))]
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
((f() * 8) + f()) INT_ADD (f() * 8) f()
(f(ARG2) + (f() * 8)) CAST (f(ARG2) + (f() * 8))
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
((f() * 8) + f()) CAST ((f() * 8) + f())
(f() * 8) INT_MULT f() 8
(f(ARG2) + (f() * 8)) INT_ADD (f() * 8) f(ARG2)
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
((f() * 8) + f()) CAST ((f() * 8) + f())
((f() * 8) + f()) INT_ADD (f() * 8) f()
 STORE 433 ((f() * 8) + f()) ((f(ARG2) << ((63 & (~(ARG3) + 1)) / 2147483647)) >> ((63 & (~(ARG3) + 1)) / 2147483647))
((f(ARG2) << ((63 & (~(ARG3) + 1)) / 2147483647)) >> ((63 & (~(ARG3) + 1)) / 2147483647)) INT_RIGHT (f(ARG2) << ((63 & (~(ARG3) + 1)) / 2147483647)) ((63 & (~(ARG3) + 1)) / 2147483647)
(f(ARG2) << ((63 & (~(ARG3) + 1)) / 2147483647)) CAST (f(ARG2) << ((63 & (~(ARG3) + 1)) / 2147483647))
((63 & (~(ARG3) + 1)) / 2147483647) SUBPIECE (63 & (~(ARG3) + 1)) 0
(f(ARG2) << ((63 & (~(ARG3) + 1)) / 2147483647)) INT_LEFT f(ARG2) ((63 & (~(ARG3) + 1)) / 2147483647)
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG3 ARG2
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 ARG2 ARG3 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
0 INT_LESS ARG3 [ARG2]
0 INT_LESS [ARG2] ARG3
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH ([ARG2] INT_LESS ARG3)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (ARG3 INT_LESS [ARG2])
 BRANCH VZERO
 BRANCH VZERO
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 ARG2 ARG3 ARG2
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
0 INT_LESS ARG3 [ARG2]
0 INT_LESS [ARG2] ARG3
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH ([ARG2] INT_LESS ARG3)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (ARG3 INT_LESS [ARG2])
 BRANCH VZERO
 BRANCH VZERO
 CALL func ARG1 ARG2 ARG2
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG3 ARG2
[ARG2] LOAD 433 ARG2
0 INT_LESS [ARG2] ARG3
 CBRANCH ([ARG2] INT_LESS ARG3)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
 BRANCH VZERO
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 ARG2 ARG3 ARG2
[ARG2] LOAD 433 ARG2
0 INT_LESS [ARG2] ARG3
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
 CBRANCH ([ARG2] INT_LESS ARG3)
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 BRANCH VZERO
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CALL func ARG1 [ARG2] 0 0
ARG1 COPY ARG1
 CALL func ARG1 [ARG2] -1 1
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 [ARG2] f(ARG2 , ARG3) 0
 CALL func ARG1 [ARG2] 0 0
f() CALL func ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
(ARG3 & 63) INT_AND ARG3 63
0 INT_EQUAL [ARG2] ARG3
(ARG3 / 64) INT_RIGHT ARG3 6
0 INT_EQUAL [ARG2] ARG3
0 INT_LESS [ARG2] ARG3
(ARG3 / 2147483647) SUBPIECE ARG3 0
0 INT_EQUAL ARG3 0
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([ARG2] INT_LESS ARG3)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
 BRANCH VZERO
 CBRANCH (f(ARG3) INT_LESS f())
((f(ARG3) * 8) + f()) INT_ADD (f(ARG3) * 8) f()
((f(ARG3) * 8) + f()) CAST ((f(ARG3) * 8) + f())
f() CAST f()
 STORE 433 ((f(ARG3) * 8) + f()) f()
 BRANCH VZERO
(f(ARG3) + 1) INT_ADD f(ARG3) 1
0 INT_LESS f(ARG3) f()
f(ARG3) INT_ZEXT f(ARG3)
(f(ARG3) * 8) INT_MULT f(ARG3) 8
 CBRANCH ([ARG2] INT_EQUAL ARG3)
0 INT_LESS f() 1143914305352105985
f() INT_ZEXT f()
0 INT_EQUAL f() 0
f() CALL libcall_operator.new[]_thunk f()
(f() - (ARG3 / 64)) INT_SUB f() (ARG3 / 64)
 CBRANCH (f() INT_LESS 1143914305352105985)
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
(RSP + -40) PTRSUB RSP -40
0 INT_EQUAL f() 0
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
0 INT_EQUAL f() 0
f() CALL func [ARG2]
 CBRANCH ((ARG3 & 63) INT_EQUAL 0)
0 INT_EQUAL (ARG3 & 63) 0
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
 CALL func (RSP + -40) f() [ARG2] f()
(f() / 2147483647) SUBPIECE f() 0
((f() - (ARG3 / 64)) + -1) INT_SUB (f() - (ARG3 / 64)) -1
(RSP + -40) PTRSUB RSP -40
-1 COPY -1
 BRANCH VZERO
(f() * 8) INT_LEFT f() 3
64 COPY 64
-1 COPY -1
0 COPY 0
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (f() INT_LESS (ARG3 & 63))
0 INT_LESS f() (ARG3 & 63)
 CBRANCH ([ARG2] INT_EQUAL ARG3)
(63 & (64 - ([ARG2] / 2147483647))) INT_AND (64 - ([ARG2] / 2147483647)) 63
([ARG2] / 2147483647) SUBPIECE [ARG2] 0
(63 & (ARG3 / 2147483647)) INT_AND (ARG3 / 2147483647) 63
 BRANCH VZERO
 BRANCH VZERO
(([(ARG2 + 8)] << (63 & (64 - ([ARG2] / 2147483647)))) >> (63 & (64 - ([ARG2] / 2147483647)))) INT_SRIGHT ([(ARG2 + 8)] << (63 & (64 - ([ARG2] / 2147483647)))) (63 & (64 - ([ARG2] / 2147483647)))
(63 & (64 - ([ARG2] / 2147483647))) INT_AND (64 - ([ARG2] / 2147483647)) 63
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
f(ARG2 , ARG3) INT_SRIGHT (([(ARG2 + 8)] << (63 & (64 - ([ARG2] / 2147483647)))) >> (63 & (64 - ([ARG2] / 2147483647)))) (63 & (ARG3 / 2147483647))
(64 - ([ARG2] / 2147483647)) INT_SUB 64 ([ARG2] / 2147483647)
(ARG2 + 8) CAST (ARG2 + 8)
([(ARG2 + 8)] << (63 & (64 - ([ARG2] / 2147483647)))) INT_LEFT [(ARG2 + 8)] (63 & (64 - ([ARG2] / 2147483647)))
((f() / 2147483647) - ((ARG3 & 63) / 2147483647)) INT_SUB (f() / 2147483647) ((ARG3 & 63) / 2147483647)
 STORE 433 ((((f() - (ARG3 / 64)) + -1) * 8) + f()) f(ARG3)
((((f() - (ARG3 / 64)) + -1) * 8) + f()) INT_ADD (((f() - (ARG3 / 64)) + -1) * 8) f()
(((f() - (ARG3 / 64)) + -1) * 8) INT_MULT ((f() - (ARG3 / 64)) + -1) 8
((((f() - (ARG3 / 64)) + -1) * 8) + f()) CAST ((((f() - (ARG3 / 64)) + -1) * 8) + f())
((f() - (ARG3 / 64)) + -1) INT_ZEXT ((f() - (ARG3 / 64)) + -1)
f() CAST f()
((((f() - (ARG3 / 64)) + -1) * 8) + f()) CAST ((((f() - (ARG3 / 64)) + -1) * 8) + f())
f() CAST f()
((f() - (ARG3 / 64)) + -1) INT_ZEXT ((f() - (ARG3 / 64)) + -1)
((((f() - (ARG3 / 64)) + -1) * 8) + f()) INT_ADD f() (((f() - (ARG3 / 64)) + -1) * 8)
(-1 << (63 & ((f() / 2147483647) - ((ARG3 & 63) / 2147483647)))) INT_LEFT -1 (63 & ((f() / 2147483647) - ((ARG3 & 63) / 2147483647)))
(((f() - (ARG3 / 64)) + -1) * 8) INT_MULT ((f() - (ARG3 / 64)) + -1) 8
[((((f() - (ARG3 / 64)) + -1) * 8) + f())] LOAD 433 ((((f() - (ARG3 / 64)) + -1) * 8) + f())
(63 & ((f() / 2147483647) - ((ARG3 & 63) / 2147483647))) INT_AND ((f() / 2147483647) - ((ARG3 & 63) / 2147483647)) 63
 BRANCH VZERO
f(ARG3) INT_OR (-1 << (63 & ((f() / 2147483647) - ((ARG3 & 63) / 2147483647)))) [((((f() - (ARG3 / 64)) + -1) * 8) + f())]
((((f() - (ARG3 / 64)) + -1) * 8) + f()) CAST ((((f() - (ARG3 / 64)) + -1) * 8) + f())
((((f() - (ARG3 / 64)) + -1) * 8) + f()) INT_ADD f() (((f() - (ARG3 / 64)) + -1) * 8)
((f() - (ARG3 / 64)) + -1) INT_ZEXT ((f() - (ARG3 / 64)) + -1)
(((f() - (ARG3 / 64)) + -1) * 8) INT_MULT ((f() - (ARG3 / 64)) + -1) 8
f() CAST f()
 STORE 433 ((((f() - (ARG3 / 64)) + -1) * 8) + f()) -1
0 INT_NOTEQUAL ((f() - (ARG3 / 64)) + -1) 0
 CBRANCH (((f() - (ARG3 / 64)) + -1) INT_NOTEQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
(f() + 40) INT_ADD f() 40
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
shiftAmt <= BitWidth && "Invalid shift amount" COPY shiftAmt <= BitWidth && "Invalid shift amount"
llvm::APInt llvm::APInt::ashr(unsigned int) const COPY llvm::APInt llvm::APInt::ashr(unsigned int) const
0 INT_EQUAL 0 [(f() + 40)]
 RETURN 1
[(f() + 40)] LOAD 433 (f() + 40)
 CALL libcall___assert_fail_thunk shiftAmt <= BitWidth && "Invalid shift amount" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1052 llvm::APInt llvm::APInt::ashr(unsigned int) const
(f() + 40) CAST (f() + 40)
 CBRANCH (ARG3 INT_EQUAL 0)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_LESS f() 64
 CBRANCH (f() INT_LESS 64)
0 INT_EQUAL f() 0
 BRANCH VZERO
((f() - (ARG3 / 64)) + -1) INT_ZEXT ((f() - (ARG3 / 64)) + -1)
 STORE 433 ((((f() - (ARG3 / 64)) + -1) * 8) + f()) ([((((f() - (ARG3 / 64)) + -1) * 8) + f())] | (-1 << (63 & (f() / 2147483647))))
(63 & (f() / 2147483647)) INT_AND (f() / 2147483647) 63
((((f() - (ARG3 / 64)) + -1) * 8) + f()) INT_ADD f() (((f() - (ARG3 / 64)) + -1) * 8)
((((f() - (ARG3 / 64)) + -1) * 8) + f()) INT_ADD (((f() - (ARG3 / 64)) + -1) * 8) f()
((((f() - (ARG3 / 64)) + -1) * 8) + f()) CAST ((((f() - (ARG3 / 64)) + -1) * 8) + f())
f() CAST f()
[((((f() - (ARG3 / 64)) + -1) * 8) + f())] LOAD 433 ((((f() - (ARG3 / 64)) + -1) * 8) + f())
([((((f() - (ARG3 / 64)) + -1) * 8) + f())] | (-1 << (63 & (f() / 2147483647)))) INT_OR (-1 << (63 & (f() / 2147483647))) [((((f() - (ARG3 / 64)) + -1) * 8) + f())]
(((f() - (ARG3 / 64)) + -1) * 8) INT_MULT ((f() - (ARG3 / 64)) + -1) 8
((f() - (ARG3 / 64)) + -1) INT_ZEXT ((f() - (ARG3 / 64)) + -1)
(((f() - (ARG3 / 64)) + -1) * 8) INT_MULT ((f() - (ARG3 / 64)) + -1) 8
 BRANCH VZERO
((((f() - (ARG3 / 64)) + -1) * 8) + f()) CAST ((((f() - (ARG3 / 64)) + -1) * 8) + f())
f() CAST f()
(-1 << (63 & (f() / 2147483647))) INT_LEFT -1 (63 & (f() / 2147483647))
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 STORE 433 ((((f() - (ARG3 / 64)) + 2) * 8) + f()) f(ARG3)
(((f() / 2147483647) - ((ARG3 & 63) / 2147483647)) + 64) INT_ADD ((f() / 2147483647) - ((ARG3 & 63) / 2147483647)) 64
(63 & (((f() / 2147483647) - ((ARG3 & 63) / 2147483647)) + 64)) INT_AND (((f() / 2147483647) - ((ARG3 & 63) / 2147483647)) + 64) 63
((((f() - (ARG3 / 64)) + 2) * 8) + f()) INT_ADD (((f() - (ARG3 / 64)) + 2) * 8) f()
((f() - (ARG3 / 64)) + 2) INT_SUB (f() - (ARG3 / 64)) 2
(((f() - (ARG3 / 64)) + 2) * 8) INT_MULT ((f() - (ARG3 / 64)) + 2) 8
((((f() - (ARG3 / 64)) + 2) * 8) + f()) INT_ADD f() (((f() - (ARG3 / 64)) + 2) * 8)
((f() / 2147483647) - ((ARG3 & 63) / 2147483647)) INT_SUB (f() / 2147483647) ((ARG3 & 63) / 2147483647)
((f() - (ARG3 / 64)) + 2) INT_SUB (f() - (ARG3 / 64)) 2
((((f() - (ARG3 / 64)) + 2) * 8) + f()) CAST ((((f() - (ARG3 / 64)) + 2) * 8) + f())
f() CAST f()
[((((f() - (ARG3 / 64)) + 2) * 8) + f())] LOAD 433 ((((f() - (ARG3 / 64)) + 2) * 8) + f())
((((f() - (ARG3 / 64)) + 2) * 8) + f()) CAST ((((f() - (ARG3 / 64)) + 2) * 8) + f())
((f() - (ARG3 / 64)) + 2) INT_ZEXT ((f() - (ARG3 / 64)) + 2)
(((f() - (ARG3 / 64)) + 2) * 8) INT_MULT ((f() - (ARG3 / 64)) + 2) 8
f() CAST f()
f(ARG3) INT_OR (-1 << (63 & (((f() / 2147483647) - ((ARG3 & 63) / 2147483647)) + 64))) [((((f() - (ARG3 / 64)) + 2) * 8) + f())]
((f() - (ARG3 / 64)) + 2) INT_ZEXT ((f() - (ARG3 / 64)) + 2)
(-1 << (63 & (((f() / 2147483647) - ((ARG3 & 63) / 2147483647)) + 64))) INT_LEFT -1 (63 & (((f() / 2147483647) - ((ARG3 & 63) / 2147483647)) + 64))
((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1)) INT_ADD (ARG3 / 64) ((f() - (ARG3 / 64)) + -1)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
((f() * 8) + f()) INT_ADD (f() * 8) f()
f() CAST f()
(f() * 8) INT_MULT f() 8
0 INT_LESSEQUAL f() ((f() - (ARG3 / 64)) + -1)
0 COPY 0
(f() + 1) INT_ADD f() 1
f() INT_ZEXT f()
0 COPY 0
(((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1)) * 8) INT_MULT ((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1)) 8
((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1)) INT_ZEXT ((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1))
((ARG3 / 64) + f()) INT_ZEXT ((ARG3 / 64) + f())
((ARG3 / 64) + f()) INT_ADD (ARG3 / 64) f()
 CBRANCH (f() INT_LESS ((f() - (ARG3 / 64)) + -1))
0 INT_LESS f() ((f() - (ARG3 / 64)) + -1)
f() INT_ZEXT f()
(f() + 1) INT_ADD f() 1
 CBRANCH (f() INT_LESSEQUAL ((f() - (ARG3 / 64)) + -1))
 BRANCH VZERO
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
((((f() - (ARG3 / 64)) + -1) * 8) + f()) INT_ADD (((f() - (ARG3 / 64)) + -1) * 8) f()
(((f() - (ARG3 / 64)) + -1) * 8) INT_MULT ((f() - (ARG3 / 64)) + -1) 8
f() CAST f()
((f() - (ARG3 / 64)) + -1) INT_ZEXT ((f() - (ARG3 / 64)) + -1)
(((ARG3 / 64) + f()) * 8) INT_MULT ((ARG3 / 64) + f()) 8
((ARG3 / 64) + f()) INT_ZEXT ((ARG3 / 64) + f())
([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8)) CAST ([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))
([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8)) INT_ADD [(ARG2 + 8)] (((ARG3 / 64) + f()) * 8)
 STORE 433 ((((f() - (ARG3 / 64)) + -1) * 8) + f()) ([([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1)) * 8))] >> ((ARG3 & 63) / 2147483647))
([([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1)) * 8))] >> ((ARG3 & 63) / 2147483647)) INT_RIGHT [([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1)) * 8))] ((ARG3 & 63) / 2147483647)
((((f() - (ARG3 / 64)) + -1) * 8) + f()) CAST ((((f() - (ARG3 / 64)) + -1) * 8) + f())
 BRANCH VZERO
([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8)) INT_ADD [(ARG2 + 8)] (((ARG3 / 64) + f()) * 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
0 INT_NOTEQUAL f() 0
[([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))] LOAD 433 ([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))
([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8)) CAST ([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))
0 INT_NOTEQUAL f() 0
((ARG3 & 63) / 2147483647) SUBPIECE (ARG3 & 63) 0
([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1)) * 8)) INT_ADD [(ARG2 + 8)] (((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1)) * 8)
(ARG2 + 8) CAST (ARG2 + 8)
((f() * 8) + f()) INT_ADD (f() * 8) f()
f() CAST f()
(f() * 8) INT_MULT f() 8
(((ARG3 / 64) + f()) * 8) INT_MULT ((ARG3 / 64) + f()) 8
[([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1)) * 8))] LOAD 433 ([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1)) * 8))
([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1)) * 8)) CAST ([(ARG2 + 8)] + (((ARG3 / 64) + ((f() - (ARG3 / 64)) + -1)) * 8))
((ARG3 / 64) + f()) INT_ADD (ARG3 / 64) f()
((f() * 8) + f()) CAST ((f() * 8) + f())
 STORE 433 ((f() * 8) + f()) [([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))]
[([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))] LOAD 433 ([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))
(((ARG3 / 64) + f()) + 1) INT_ZEXT (((ARG3 / 64) + f()) + 1)
(((ARG3 / 64) + f()) + 1) INT_ADD ((ARG3 / 64) + f()) 1
((ARG3 / 64) + f()) INT_ADD (ARG3 / 64) f()
((f() * 8) + f()) CAST ((f() * 8) + f())
(ARG2 + 8) CAST (ARG2 + 8)
((((ARG3 / 64) + f()) + 1) * 8) INT_MULT (((ARG3 / 64) + f()) + 1) 8
([([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))] >> ((ARG3 & 63) / 2147483647)) INT_RIGHT [([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))] ((ARG3 & 63) / 2147483647)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
([([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8))] << (63 & (64 - ((ARG3 & 63) / 2147483647)))) INT_LEFT [([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8))] (63 & (64 - ((ARG3 & 63) / 2147483647)))
(63 & (64 - ((ARG3 & 63) / 2147483647))) INT_AND (64 - ((ARG3 & 63) / 2147483647)) 63
[([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8))] LOAD 433 ([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8))
(64 - ((ARG3 & 63) / 2147483647)) INT_SUB 64 ((ARG3 & 63) / 2147483647)
f(ARG2 , ARG3) INT_OR ([([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8))] << (63 & (64 - ((ARG3 & 63) / 2147483647)))) ([([(ARG2 + 8)] + (((ARG3 / 64) + f()) * 8))] >> ((ARG3 & 63) / 2147483647))
 STORE 433 ((f() * 8) + f()) f(ARG2 , ARG3)
([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8)) INT_ADD [(ARG2 + 8)] ((((ARG3 / 64) + f()) + 1) * 8)
([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8)) CAST ([(ARG2 + 8)] + ((((ARG3 / 64) + f()) + 1) * 8))
f() CALL func ARG1
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_LESS 64 f()
 BRANCH VZERO
 RETURN 0 f(ARG1)
 CBRANCH (64 INT_LESS f())
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 1
 CALL libcall___assert_fail_thunk 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h 1331 0
[[(ARG1 + 8)]] LOAD 433 [(ARG1 + 8)]
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 COPY 0
0 COPY 0
(ARG1 + 8) CAST (ARG1 + 8)
f(ARG1) CALL func ARG1
f(ARG1) CALL func ARG1
f() CALL func ARG1
0 INT_LESSEQUAL f(ARG1) ARG2
0 INT_LESS f() 65
 RETURN 0 f(ARG1 , ARG2)
 CBRANCH (f() INT_LESS 65)
 CBRANCH (f(ARG1) INT_LESSEQUAL ARG2)
 BRANCH VZERO
 CALL func ARG1 ARG2 f(ARG2 , ARG3) ARG2
ARG1 COPY ARG1
[ARG2] LOAD 433 ARG2
f(ARG2 , ARG3) CALL func ARG3 [ARG2] [ARG2]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[40] LOAD 433 40
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
 CALL func ARG1 ARG2 f(ARG2 , ARG3) ARG2
[ARG2] LOAD 433 ARG2
f(ARG2 , ARG3) CALL func ARG3 [ARG2] [ARG2]
[40] LOAD 433 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
 CALL func ARG1 ARG2 f(ARG2 , ARG3) ARG2
[ARG2] LOAD 433 ARG2
f(ARG2 , ARG3) CALL func ARG3 [ARG2] [ARG2]
[40] LOAD 433 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 ARG2 f(ARG2 , ARG3) ARG2
ARG1 COPY ARG1
[ARG2] LOAD 433 ARG2
f(ARG2 , ARG3) CALL func ARG3 [ARG2] [ARG2]
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[40] LOAD 433 40
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
(ARG3 % [ARG2]) INT_REM ARG3 [ARG2]
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -56) (RSP + -40) (RSP + -56)
 CALL func ARG1 ARG2 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
 CALL func (RSP + -56) ARG2 (ARG3 % [ARG2]) ARG2
 CALL func (RSP + -40) ARG2 ([ARG2] - (ARG3 % [ARG2])) ARG2
0 INT_NOTEQUAL 0 [(f() + 40)]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
 CBRANCH ((ARG3 % [ARG2]) INT_EQUAL 0)
0 INT_EQUAL (ARG3 % [ARG2]) 0
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
([ARG2] - (ARG3 % [ARG2])) INT_SUB [ARG2] (ARG3 % [ARG2])
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 ARG2 f(ARG2 , ARG3) ARG2
ARG1 COPY ARG1
[ARG2] LOAD 433 ARG2
f(ARG2 , ARG3) CALL func ARG3 [ARG2] [ARG2]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[40] LOAD 433 40
40 CAST 40
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 (RSP + -56) (RSP + -56)
ARG1 COPY ARG1
 CALL func ARG1 [ARG2] ([[(ARG2 + 8)]] / [[(ARG3 + 8)]]) 0
 CALL func ARG1 [ARG2] 1 0
 CALL func ARG1 [ARG2] 0 0
 CALL func ARG1 [ARG2] ([(ARG2 + 8)] / [(ARG3 + 8)]) 0
 CALL func ARG1 [ARG2] 0 0
[ARG2] LOAD 433 ARG2
f(ARG3) CALL func ARG2 ARG3 ARG3
f(ARG3) CALL func ARG2 ARG3 ARG3
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
f() CALL func ARG2
 CALL func (RSP + -40) ARG2 ARG2
[ARG2] LOAD 433 ARG2
 CALL func (RSP + -40) f() ARG3 f() (RSP + -56) 0
[ARG3] LOAD 433 ARG3
(ARG3 + 8) PTRADD ARG3 2 4
(ARG3 + 8) PTRADD ARG3 2 4
f() CALL func ARG3
(ARG3 + 8) PTRADD ARG3 2 4
0 INT_NOTEQUAL [ARG2] [ARG3]
 CBRANCH ([ARG2] INT_NOTEQUAL [ARG3])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_EQUAL f() 0
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
0 INT_EQUAL [(ARG3 + 8)] 0
0 INT_EQUAL f() 0
(ARG3 + 8) CAST (ARG3 + 8)
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH ([(ARG3 + 8)] INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
0 INT_LESS f() f()
 CBRANCH f()
 CBRANCH (f() INT_LESS f())
 BRANCH VZERO
[(f() + 40)] LOAD 433 (f() + 40)
 RETURN 1
rhsWords && "Divided by zero???" COPY rhsWords && "Divided by zero???"
llvm::APInt llvm::APInt::udiv(const llvm::APInt&) const COPY llvm::APInt llvm::APInt::udiv(const llvm::APInt&) const
 CALL libcall___assert_fail_thunk rhsWords && "Divided by zero???" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1851 llvm::APInt llvm::APInt::udiv(const llvm::APInt&) const
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
0 INT_EQUAL f() 0
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL libcall___assert_fail_thunk RHS.VAL != 0 && "Divide by zero?" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1844 llvm::APInt llvm::APInt::udiv(const llvm::APInt&) const
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
 BRANCH VZERO
(ARG3 + 8) CAST (ARG3 + 8)
RHS.VAL != 0 && "Divide by zero?" COPY RHS.VAL != 0 && "Divide by zero?"
llvm::APInt llvm::APInt::udiv(const llvm::APInt&) const COPY llvm::APInt llvm::APInt::udiv(const llvm::APInt&) const
(ARG2 + 8) CAST (ARG2 + 8)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
([(ARG2 + 8)] / [(ARG3 + 8)]) INT_DIV [(ARG2 + 8)] [(ARG3 + 8)]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CBRANCH (f(ARG3) INT_NOTEQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) 1 0 0
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f(ARG3) 0
 CBRANCH (f(ARG3) INT_EQUAL 0)
 BRANCH VZERO
llvm::APInt llvm::APInt::udiv(const llvm::APInt&) const COPY llvm::APInt llvm::APInt::udiv(const llvm::APInt&) const
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
BitWidth == RHS.BitWidth && "Bit widths must be the same" COPY BitWidth == RHS.BitWidth && "Bit widths must be the same"
 RETURN 1
0 INT_NOTEQUAL f() 0
 CALL libcall___assert_fail_thunk BitWidth == RHS.BitWidth && "Bit widths must be the same" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1840 llvm::APInt llvm::APInt::udiv(const llvm::APInt&) const
0 INT_EQUAL f() 1
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
f() CALL func (f() + 4294967295)
0 COPY 0
(f() + 4294967295) INT_ADD f() 4294967295
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
([[(ARG2 + 8)]] / [[(ARG3 + 8)]]) INT_DIV [[(ARG2 + 8)]] [[(ARG3 + 8)]]
[[(ARG2 + 8)]] LOAD 433 [(ARG2 + 8)]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG3 + 8) CAST (ARG3 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
 BRANCH VZERO
[[(ARG3 + 8)]] LOAD 433 [(ARG3 + 8)]
(f() + 4294967295) INT_ADD f() 4294967295
(f() + 1) INT_ADD f() 1
f() CALL func (f() + 4294967295)
 BRANCH VZERO
0 COPY 0
0 INT_NOTEQUAL f(ARG3) 0
ARG1 COPY ARG1
 CALL func ARG1 ARG2 (RSP + -40) ARG2
[ARG2] LOAD 433 ARG2
 CALL func (RSP + -40) [ARG2] ARG3 0
(RSP + -40) PTRSUB RSP -40
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 40
(RSP + -40) PTRSUB RSP -40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -40)
40 INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
(RSP + -40) PTRSUB RSP -40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
f(ARG2) CALL func ARG1 ARG2 ARG2
f() CALL func ARG1 ARG2 ARG2
0 INT_EQUAL f(ARG2) 0
 CBRANCH (f(ARG2) INT_EQUAL 0)
1 COPY 1
 RETURN 0 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 RETURN 0 1
0 COPY 0
 CALL func ARG1 (RSP + -136) 1 (RSP + -136)
 CALL func ARG1 [ARG2] f() 0
 CALL func ARG1 (RSP + -136) (RSP + -136)
 CALL func ARG1 [ARG2] [(f(ARG2) + Symbol)] 0
 CALL func ARG1 (RSP + -136) (RSP + -136)
ARG1 COPY ARG1
f() CALL func ARG2
 CALL func (RSP + -72) ARG2 (RSP + -136) ARG2
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
f() CALL func ARG2 (RSP + -152) (RSP + -152)
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f(RSP) CALL func ARG2 (RSP + -88) (RSP + -88)
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2 (RSP + -72) (RSP + -72)
 CALL func (RSP + -40) ARG2 (RSP + -88) ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
 CBRANCH (f() INT_LESS 6)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_LESS f() 6
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL 1)
f(RSP) CALL func (RSP + -40) (RSP + -56) (RSP + -56)
(f() + 40) CAST (f() + 40)
 CALL func (RSP + -152)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -104) PTRSUB RSP -104
(RSP + -104) PTRSUB RSP -104
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -88)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
 CALL func (RSP + -136)
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -56) (RSP + -40) (RSP + -104) (RSP + -40)
 RETURN 1
 CALL func (RSP + -72)
(RSP + -72) PTRSUB RSP -72
 CALL libcall___assert_fail_thunk this->ule(nextSquare) && "Error in APInt::sqrt computation" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1361 llvm::APInt llvm::APInt::sqrt() const
(RSP + -88) PTRSUB RSP -88
llvm::APInt llvm::APInt::sqrt() const COPY llvm::APInt llvm::APInt::sqrt() const
(RSP + -152) PTRSUB RSP -152
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
(RSP + -88) PTRSUB RSP -88
(RSP + -72) PTRSUB RSP -72
this->ule(nextSquare) && "Error in APInt::sqrt computation" COPY this->ule(nextSquare) && "Error in APInt::sqrt computation"
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -120)
(RSP + -40) PTRSUB RSP -40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(RSP + -136) PTRSUB RSP -136
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f(RSP) INT_EQUAL 0)
(RSP + -40) PTRSUB RSP -40
0 INT_EQUAL f(RSP) 0
 CALL func (RSP + -104)
(f() + 40) INT_ADD f() 40
 CALL func (RSP + -40) (RSP + -72) (RSP + -88) (RSP + -72)
0 INT_NOTEQUAL 0 [(f() + 40)]
(RSP + -40) PTRSUB RSP -40
(RSP + -120) PTRSUB RSP -120
0 INT_LESS 51 f()
(f(ARG2) + Symbol) PTRADD Symbol f(ARG2) 1
[(f(ARG2) + Symbol)] LOAD 433 (f(ARG2) + Symbol)
 BRANCH VZERO
 CBRANCH (51 INT_LESS f())
Symbol PTRSUB 0 Symbol
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (4890909195324358656 FLOAT_LESSEQUAL f())
f() TRUNC f()
(f() + 4890909195324358656) FLOAT_SUB f() 4890909195324358656
0 INT_XOR (f() + 4890909195324358656) -9223372036854775808
(f() + 4890909195324358656) TRUNC (f() + 4890909195324358656)
 BRANCH VZERO
 CBRANCH (f(RSP) INT_EQUAL 0)
(RSP + -136) PTRSUB RSP -136
0 INT_NOTEQUAL f() 1
(RSP + -72) PTRSUB RSP -72
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
 CALL func (RSP + -40) (RSP + -56) (RSP + -104) (RSP + -56)
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL f() 0
(RSP + -120) PTRSUB RSP -120
(RSP + -136) PTRSUB RSP -136
(RSP + -40) PTRSUB RSP -40
(RSP + -120) PTRSUB RSP -120
f() CALL func (RSP + -136) (RSP + -120) (RSP + -120)
 CALL func (RSP + -40)
(RSP + -136) PTRSUB RSP -136
(RSP + -72) PTRSUB RSP -72
(RSP + -56) PTRSUB RSP -56
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -120) (RSP + -40) (RSP + -40)
 BRANCH VZERO
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -56) (RSP + -72) (RSP + -136) (RSP + -72)
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -136) (RSP + -120) (RSP + -120)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -72)
(RSP + -136) PTRSUB RSP -136
(RSP + -40) PTRSUB RSP -40
(RSP + -120) PTRSUB RSP -120
(RSP + -72) PTRSUB RSP -72
(RSP + -136) PTRSUB RSP -136
 CBRANCH (f() INT_LESS [ARG2])
 BRANCH VZERO
1 COPY 1
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -152) PTRSUB RSP -152
 CBRANCH ([[(ARG2 + 8)]] INT_SLESS 0)
(([[(ARG2 + 8)]] / 2) | (1 & ([[(ARG2 + 8)]] / 2147483647))) INT_OR ([[(ARG2 + 8)]] / 2) (1 & ([[(ARG2 + 8)]] / 2147483647))
[[(ARG2 + 8)]] INT2FLOAT [[(ARG2 + 8)]]
(1 & ([[(ARG2 + 8)]] / 2147483647)) INT_AND ([[(ARG2 + 8)]] / 2147483647) 1
f(ARG2) FLOAT_ADD (([[(ARG2 + 8)]] / 2) | (1 & ([[(ARG2 + 8)]] / 2147483647))) (([[(ARG2 + 8)]] / 2) | (1 & ([[(ARG2 + 8)]] / 2147483647)))
([[(ARG2 + 8)]] / 2) INT_RIGHT [[(ARG2 + 8)]] 1
(([[(ARG2 + 8)]] / 2) | (1 & ([[(ARG2 + 8)]] / 2147483647))) INT2FLOAT (([[(ARG2 + 8)]] / 2) | (1 & ([[(ARG2 + 8)]] / 2147483647)))
(1 & ([[(ARG2 + 8)]] / 2147483647)) INT_ZEXT (1 & ([[(ARG2 + 8)]] / 2147483647))
 BRANCH VZERO
([[(ARG2 + 8)]] / 2147483647) SUBPIECE [[(ARG2 + 8)]] 0
 CBRANCH (f() INT_EQUAL 0)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
[[(ARG2 + 8)]] CAST [[(ARG2 + 8)]]
0 INT_SLESS [(ARG2 + 8)] 0
0 INT_SLESS [[(ARG2 + 8)]] 0
 CBRANCH ([(ARG2 + 8)] INT_SLESS 0)
(ARG2 + 8) CAST (ARG2 + 8)
[[(ARG2 + 8)]] LOAD 433 [(ARG2 + 8)]
[(ARG2 + 8)] CAST [(ARG2 + 8)]
(([(ARG2 + 8)] / 2) | (1 & ([(ARG2 + 8)] / 2147483647))) INT_OR ([(ARG2 + 8)] / 2) (1 & ([(ARG2 + 8)] / 2147483647))
 BRANCH VZERO
(1 & ([(ARG2 + 8)] / 2147483647)) INT_AND ([(ARG2 + 8)] / 2147483647) 1
 BRANCH VZERO
[(ARG2 + 8)] INT2FLOAT [(ARG2 + 8)]
([(ARG2 + 8)] / 2) INT_RIGHT [(ARG2 + 8)] 1
(([(ARG2 + 8)] / 2) | (1 & ([(ARG2 + 8)] / 2147483647))) INT2FLOAT (([(ARG2 + 8)] / 2) | (1 & ([(ARG2 + 8)] / 2147483647)))
f(ARG2) FLOAT_ADD (([(ARG2 + 8)] / 2) | (1 & ([(ARG2 + 8)] / 2147483647))) (([(ARG2 + 8)] / 2) | (1 & ([(ARG2 + 8)] / 2147483647)))
(1 & ([(ARG2 + 8)] / 2147483647)) INT_ZEXT (1 & ([(ARG2 + 8)] / 2147483647))
([(ARG2 + 8)] / 2147483647) SUBPIECE [(ARG2 + 8)] 0
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 BRANCH VZERO
(RSP + -136) PTRSUB RSP -136
(RSP + -136) PTRSUB RSP -136
(RSP + -136) PTRSUB RSP -136
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -88) (RSP + -136) (RSP + -136) (RSP + -136)
f() CALL libcall_sqrt_thunk f(ARG2)
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -136) (RSP + -40) (RSP + -40)
 CALL func (RSP + -56)
4 COPY 4
0 INT_EQUAL f() 0
 BRANCH VZERO
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -72) (RSP + -56) (RSP + -40) (RSP + -56)
(RSP + -136) PTRSUB RSP -136
(RSP + -88) PTRSUB RSP -88
(RSP + -88) PTRSUB RSP -88
(RSP + -120) PTRSUB RSP -120
(RSP + -136) PTRSUB RSP -136
(RSP + -40) PTRSUB RSP -40
(RSP + -136) PTRSUB RSP -136
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40)
 BRANCH VZERO
 CALL func (RSP + -40)
 CALL func (RSP + -120) [ARG2] 0 0
f() CALL libcall_round_thunk f()
(RSP + -104) PTRSUB RSP -104
(RSP + -56) PTRSUB RSP -56
0 INT_EQUAL f(RSP) 0
0 FLOAT_LESSEQUAL 4890909195324358656 f()
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -104) [ARG2] 2 0
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -152) [ARG2] 16 0
(RSP + -40) PTRSUB RSP -40
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -40) (RSP + -136) 1 (RSP + -136)
 CBRANCH f()
 CALL func (RSP + -40) (RSP + -136) (f() / 2) (RSP + -136)
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -136) [ARG2] 1 0
(RSP + -40) PTRSUB RSP -40
0 INT_LESS f() [ARG2]
(f() / 2) INT_RIGHT f() 1
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -56) (RSP + -136) 1 (RSP + -136)
0 COPY 0
[[(ARG2 + 8)]] LOAD 433 [(ARG2 + 8)]
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 BRANCH VZERO
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
 CALL func (RSP + -40) (RSP + -152) 2 (RSP + -152)
 CALL func (RSP + -152) (RSP + -40) (RSP + -40)
(RSP + -152) PTRSUB RSP -152
(RSP + -40) PTRSUB RSP -40
(RSP + -152) PTRSUB RSP -152
(f() + 2) INT_ADD f() 2
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
 BRANCH VZERO
(RSP + -40) PTRSUB RSP -40
(ARG1 + 8) INT_ADD ARG1 8
f(ARG1) CALL func ARG1 ARG2 ARG2
f() CALL func ARG1
0 INT_EQUAL [(ARG1 + 8)] ARG2
 RETURN 0 f(ARG1)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
([(ARG1 + 8)] & -256) INT_AND [(ARG1 + 8)] -256
0 INT_ZEXT 0
([(ARG1 + 8)] & -256) INT_OR ([(ARG1 + 8)] & -256) 0
f(ARG1) CALL func ARG1 ARG2 ARG2
0 INT_XOR f(ARG1) 1
0 COPY 0
 RETURN 0 0
f(ARG2) CALL func ARG1 ARG2 ARG2
 CALL func ARG4 ARG1 ARG1
f() CALL func ARG1
f(ARG2) CALL func ARG1 ARG2 ARG2
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
 CALL func (RSP + -56) ARG1 ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
f() CALL func ARG2
 CALL func (RSP + -56) f() ARG2 f() ARG3 ARG4
(ARG2 + 8) PTRADD ARG2 2 4
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 2 4
(ARG2 + 8) PTRADD ARG2 2 4
(ARG2 + 8) PTRADD ARG2 2 4
(ARG2 + 8) PTRADD ARG2 2 4
 CALL func ARG3 (RSP + -56) (RSP + -56)
 CALL func ARG3 (RSP + -56) (RSP + -56)
 CALL func ARG3 0
 CALL func ARG3 0
 CALL func ARG3 1
 CALL func ARG4 0
 CALL func ARG4 (RSP + -56) (RSP + -56)
 CALL func ARG4 0
 CALL func ARG4 (RSP + -56) (RSP + -56)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [ARG1] [ARG2]
 CBRANCH ([ARG1] INT_NOTEQUAL [ARG2])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 1
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_EQUAL 1)
 CBRANCH (f() INT_EQUAL 0)
(f() + 1) INT_ADD f() 1
0 COPY 0
 BRANCH VZERO
f() CALL func (f() + 4294967295)
(f() + 4294967295) INT_ADD f() 4294967295
 CBRANCH (f() INT_LESS f())
 BRANCH VZERO
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
1 COPY 1
0 INT_NOTEQUAL f(ARG2) 0
 CBRANCH (f() INT_EQUAL 0)
(ARG2 + 8) CAST (ARG2 + 8)
[[(ARG2 + 8)]] LOAD 433 [(ARG2 + 8)]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 BRANCH VZERO
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CBRANCH (f() INT_EQUAL 0)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[[(ARG1 + 8)]] LOAD 433 [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (f() INT_NOTEQUAL 0)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
0 INT_EQUAL f() 0
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL [(ARG2 + 8)] 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH ([(ARG2 + 8)] INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() 0
0 INT_NOTEQUAL 0 [(f() + 40)]
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
 CALL func (RSP + -56) f() (f(ARG1) % f(ARG2)) 0
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) f() (f(ARG1) / f(ARG2)) 0
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
 BRANCH VZERO
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(f(ARG1) % f(ARG2)) INT_REM f(ARG1) f(ARG2)
(f(ARG1) / f(ARG2)) INT_DIV f(ARG1) f(ARG2)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
f() CALL func (f() + 4294967295)
0 COPY 0
(f() + 4294967295) INT_ADD f() 4294967295
(f() + 1) INT_ADD f() 1
 RETURN 1
RHS.VAL != 0 && "Divide by zero?" COPY RHS.VAL != 0 && "Divide by zero?"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 CALL func (RSP + -56)
 CALL libcall___assert_fail_thunk RHS.VAL != 0 && "Divide by zero?" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1941 static void llvm::APInt::udivrem(const llvm::APInt&, const llvm::APInt&, llvm::APInt&, llvm::APInt&)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] % [(ARG2 + 8)]) INT_REM [(ARG1 + 8)] [(ARG2 + 8)]
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(ARG2 + 8) CAST (ARG2 + 8)
 CALL func (RSP + -56) [ARG1] ([(ARG1 + 8)] % [(ARG2 + 8)]) 0
(ARG1 + 8) CAST (ARG1 + 8)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
 BRANCH VZERO
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CALL func (RSP + -56) [ARG1] ([(ARG1 + 8)] / [(ARG2 + 8)]) 0
(ARG2 + 8) CAST (ARG2 + 8)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
([(ARG1 + 8)] / [(ARG2 + 8)]) INT_DIV [(ARG1 + 8)] [(ARG2 + 8)]
static void llvm::APInt::udivrem(const llvm::APInt&, const llvm::APInt&, llvm::APInt&, llvm::APInt&) COPY static void llvm::APInt::udivrem(const llvm::APInt&, const llvm::APInt&, llvm::APInt&, llvm::APInt&)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
0 INT_LESS f() f()
 CBRANCH f()
 CALL libcall___assert_fail_thunk LHS.BitWidth == RHS.BitWidth && "Bit widths must be the same" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1937 static void llvm::APInt::udivrem(const llvm::APInt&, const llvm::APInt&, llvm::APInt&, llvm::APInt&)
static void llvm::APInt::udivrem(const llvm::APInt&, const llvm::APInt&, llvm::APInt&, llvm::APInt&) COPY static void llvm::APInt::udivrem(const llvm::APInt&, const llvm::APInt&, llvm::APInt&, llvm::APInt&)
LHS.BitWidth == RHS.BitWidth && "Bit widths must be the same" COPY LHS.BitWidth == RHS.BitWidth && "Bit widths must be the same"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
0 INT_NOTEQUAL f() 0
 RETURN 1
 CBRANCH (f(ARG2) INT_EQUAL 0)
 BRANCH VZERO
0 INT_EQUAL f() 1
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
0 COPY 0
 BRANCH VZERO
0 INT_EQUAL f(ARG2) 0
 CALL func ARG1 ((f() * 16) + (RSP + -72)) ARG3 ((f() * 16) + (RSP + -72))
 CALL func ARG1 [ARG2] 0 0
 CALL func ARG1 ((f() * 16) + (RSP + -72)) ((f() * 16) + (RSP + -72))
ARG1 COPY ARG1
[ARG2] LOAD 433 ARG2
 CALL func (RSP + -88) ARG2 (RSP + -88)
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
f(ARG3) CALL func ARG2 ARG3 ARG3
 CALL func (RSP + -104) ARG3
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL f(ARG3) 1
 CBRANCH (f(ARG3) INT_NOTEQUAL 1)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL [40])
 RETURN 0 ARG1
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
(RSP + -136) PTRSUB RSP -136
f() INT_ZEXT f()
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CALL func (RSP + -56) [ARG2] 1 0
0 INT_MULT 0 16
(RSP + -72) PTRSUB RSP -72
(RSP + -40) PTRSUB RSP -40
f() CALL func ((f() * 16) + (RSP + -104)) 1 (f() * 16)
(RSP + -88) PTRSUB RSP -88
f() CALL func (RSP + -104) 0 0
0 INT_NOTEQUAL f(RSP) (RSP + -104)
 CBRANCH (f(RSP) INT_NOTEQUAL (RSP + -104))
(RSP + -104) PTRSUB RSP -104
(RSP + -72) PTRSUB RSP -72
(RSP + -104) PTRSUB RSP -104
ult(modulo) && "This APInt must be smaller than the modulo" COPY ult(modulo) && "This APInt must be smaller than the modulo"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
(f() + 40) CAST (f() + 40)
(RSP + -72) PTRSUB RSP -72
(RSP + -104) PTRSUB RSP -104
(RSP + -104) PTRADD (RSP + -104) 0 1
 CALL func (RSP + -136)
(RSP + -104) PTRSUB RSP -104
((f() * 16) + (RSP + -104)) PTRADD (RSP + -104) (f() * 16) 1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 INT_ZEXT 0
 CALL func (RSP + -136) [ARG2] 0 0
0 COPY 0
(RSP + -136) PTRSUB RSP -136
 RETURN 1
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f(RSP) (RSP + -72)
0 INT_NOTEQUAL f() [40]
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f(RSP) INT_NOTEQUAL (RSP + -72))
 CALL libcall___assert_fail_thunk ult(modulo) && "This APInt must be smaller than the modulo" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 1375 llvm::APInt llvm::APInt::multiplicativeInverse(const llvm::APInt&) const
0 INT_XOR f() 1
[40] LOAD 433 (f() + 40)
(f() * 16) INT_MULT f() 16
 CALL func (RSP + -72) [ARG2] 0 0
llvm::APInt llvm::APInt::multiplicativeInverse(const llvm::APInt&) const COPY llvm::APInt llvm::APInt::multiplicativeInverse(const llvm::APInt&) const
(RSP + -104) PTRSUB RSP -104
(RSP + -104) PTRADD (RSP + -104) 0 1
(f() * 16) INT_MULT f() 16
 CALL func (RSP + -120)
(f() * 16) INT_MULT f() 16
0 INT_MULT 0 16
(RSP + -120) PTRSUB RSP -120
0 INT_ZEXT 0
(RSP + -72) PTRSUB RSP -72
((f() * 16) + (RSP + -72)) PTRADD (RSP + -72) (f() * 16) 1
 CALL func ((f() * 16) + (RSP + -72)) (RSP + -120) ((f() * 16) + (RSP + -72))
0 INT_MULT 0 16
(RSP + -104) PTRSUB RSP -104
((f() * 16) + (RSP + -104)) PTRADD (RSP + -104) (f() * 16) 1
(f() * 16) INT_MULT f() 16
0 INT_ZEXT 0
(RSP + -136) PTRSUB RSP -136
 CALL func ((f() * 16) + (RSP + -104)) (RSP + -104) (RSP + -136) ((f() * 16) + (RSP + -104))
0 INT_XOR f() 1
0 INT_XOR f() 1
(RSP + -104) PTRSUB RSP -104
((f() * 16) + (RSP + -104)) PTRADD (RSP + -104) (f() * 16) 1
 BRANCH VZERO
 CALL func (RSP + -120) (RSP + -72) (RSP + -136)
(RSP + -136) PTRSUB RSP -136
f() INT_ZEXT f()
(RSP + -120) PTRSUB RSP -120
f() INT_ZEXT f()
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRADD (RSP + -72) 0 1
(RSP + -120) PTRSUB RSP -120
0 INT_XOR f() 1
f() INT_ZEXT f()
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
f() CALL func ((f() * 16) + (RSP + -72))
(f() * 16) INT_MULT f() 16
f() INT_ZEXT f()
(RSP + -72) PTRSUB RSP -72
((f() * 16) + (RSP + -72)) PTRADD (RSP + -72) (f() * 16) 1
(f(RSP) + -16) PTRADD f(RSP) -16 1
 BRANCH VZERO
 CALL func (f(RSP) + -16)
(f() * 16) INT_MULT f() 16
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
((f() * 16) + (RSP + -72)) PTRADD (RSP + -72) (f() * 16) 1
(f() * 16) INT_MULT f() 16
(RSP + -72) PTRSUB RSP -72
((f() * 16) + (RSP + -72)) PTRADD (RSP + -72) (f() * 16) 1
f() INT_ZEXT f()
f() INT_ZEXT f()
 CALL func (f(RSP) + -16)
(f(RSP) + -16) PTRADD f(RSP) -16 1
 BRANCH VZERO
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
 CALL func ARG1 ARG2 (RSP + -40) ARG2
ARG1 COPY ARG1
[ARG2] LOAD 433 ARG2
 CALL func (RSP + -40) [ARG2] ARG3 0
40 CAST 40
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -40) PTRSUB RSP -40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CALL func (RSP + -40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 (ARG2 + 4294967295) (ARG2 + 4294967295)
 CALL func ARG1 ARG2 0 0
(ARG2 + 4294967295) INT_ADD ARG2 4294967295
40 INT_ADD 0 40
[40] LOAD 433 40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
f() CALL func ARG2
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 ARG2 ARG2
ARG1 COPY ARG1
(f() + 40) CAST (f() + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 BRANCH VZERO
f(ARG2) CALL func ARG1 ARG2 ARG2
0 INT_XOR f(ARG2) 1
 RETURN 0 0
0 COPY 0
f() CALL func ARG2
 CALL func (RSP + -56) ARG2 (f() + 4294967295) ARG2
f() CALL func ARG2
 CALL func (RSP + -40) ARG2 ARG2
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG2
 CALL func (RSP + -40) ARG1 ARG1
 CALL func ARG1 (RSP + -40) (RSP + -40)
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
f(RSP) CALL func (RSP + -168) (RSP + -184) (RSP + -184)
(RSP + -184) PTRSUB RSP -184
(RSP + -40) PTRSUB RSP -40
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -152)
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -56) (RSP + -104) (RSP + -216) (RSP + -104)
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -184)
 CALL func (RSP + -72) (RSP + -104) 1 (RSP + -104)
 CBRANCH (f(RSP) INT_EQUAL 0)
 CALL func (RSP + -56) (RSP + -136) (RSP + -216) (RSP + -136)
 CALL func (RSP + -216)
(RSP + -152) PTRSUB RSP -152
0 INT_EQUAL f(RSP) 0
 CALL func (RSP + -168)
(RSP + -56) PTRSUB RSP -56
(RSP + -200) PTRSUB RSP -200
(RSP + -168) PTRSUB RSP -168
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -40) (RSP + -88) (RSP + -216) (RSP + -88)
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -104)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) (RSP + -216) (RSP + -120) (RSP + -216)
(f() + 40) CAST (f() + 40)
 CALL func (RSP + -88)
 CALL func (RSP + -104) (RSP + -40) (RSP + -40)
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -136)
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -136) (RSP + -40) (RSP + -40)
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -40)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -40) PTRSUB RSP -40
(RSP + -200) PTRSUB RSP -200
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -184) (RSP + -40) (RSP + -40)
 CALL func (RSP + -120)
 CALL func (RSP + -56)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -152) PTRSUB RSP -152
(RSP + -40) PTRSUB RSP -40
(RSP + -216) PTRSUB RSP -216
(RSP + -136) PTRSUB RSP -136
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -72)
 CALL func (RSP + -136)
 CALL func (RSP + -56)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(RSP + -200) PTRSUB RSP -200
(RSP + -152) PTRSUB RSP -152
0 INT_EQUAL f() [(f() + 40)]
(RSP + -136) PTRSUB RSP -136
(f() + 40) INT_ADD f() 40
 CALL func (RSP + -40)
 CALL func (RSP + -40)
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -104)
(RSP + -40) PTRSUB RSP -40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -88) PTRSUB RSP -88
(RSP + -104) PTRSUB RSP -104
(RSP + -56) PTRSUB RSP -56
(f() + 1) INT_ADD f() 1
 CALL func (RSP + -56)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) (RSP + -120) 1 (RSP + -120)
(RSP + -120) PTRSUB RSP -120
 CBRANCH f()
 CALL func (RSP + -120)
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -184)
 CALL func (RSP + -40) (RSP + -136) 1 (RSP + -136)
 CALL func (RSP + -40) (RSP + -88) (RSP + -56) (RSP + -88)
 CALL func (RSP + -200)
 CALL func (RSP + -40) (RSP + -72) (RSP + -56) (RSP + -72)
(RSP + -88) PTRSUB RSP -88
(RSP + -216) PTRSUB RSP -216
(RSP + -200) PTRSUB RSP -200
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -200)
[(f() + 40)] LOAD 433 (f() + 40)
 CALL func (RSP + -152)
 CALL func (RSP + -40)
(RSP + -168) PTRSUB RSP -168
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -136) (RSP + -40) (RSP + -40)
 CALL func (RSP + -200) (RSP + -40) (RSP + -40)
 CALL func (RSP + -120) (RSP + -40) (RSP + -40)
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -168)
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -216)
(RSP + -40) PTRSUB RSP -40
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -168) (RSP + -40) (RSP + -40)
(RSP + -136) PTRSUB RSP -136
(RSP + -40) PTRSUB RSP -40
(RSP + -216) PTRSUB RSP -216
(RSP + -120) PTRSUB RSP -120
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(RSP + -88) PTRSUB RSP -88
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(RSP + -56) PTRSUB RSP -56
(RSP + -136) PTRSUB RSP -136
(ARG1 + 16) CAST (ARG1 + 16)
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -216) (RSP + -40) (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -216) PTRSUB RSP -216
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -40) (RSP + -152) 1 (RSP + -152)
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
(RSP + -88) PTRSUB RSP -88
(f() + 4294967295) INT_ADD f() 4294967295
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -40) (RSP + -168) 1 (RSP + -168)
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) (RSP + -136) 1 (RSP + -136)
(RSP + -152) PTRSUB RSP -152
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -120) (RSP + -40) (RSP + -40)
 CALL func (RSP + -40)
 CALL func (RSP + -40) (RSP + -88) (RSP + -200) (RSP + -88)
(RSP + -40) PTRSUB RSP -40
(RSP + -216) PTRSUB RSP -216
 CALL func (RSP + -40)
f() CALL func (RSP + -120) (RSP + -216) (RSP + -216)
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -168) (RSP + -40) (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -88) f() f()
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
(RSP + -56) PTRSUB RSP -56
(RSP + -200) PTRSUB RSP -200
(RSP + -40) PTRSUB RSP -40
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -152) (RSP + -40) (RSP + -40)
(RSP + -184) PTRSUB RSP -184
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(RSP + -104) PTRSUB RSP -104
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -56)
 STORE 433 (ARG1 + 16) ((f() + 1) - f())
(RSP + -216) PTRSUB RSP -216
((f() + 1) - f()) INT_SUB (f() + 1) f()
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -40) (RSP + -88) (RSP + -56) (RSP + -88)
 CALL func (RSP + -40)
(RSP + -168) PTRSUB RSP -168
(RSP + -216) PTRSUB RSP -216
(RSP + -136) PTRSUB RSP -136
(RSP + -88) PTRSUB RSP -88
(RSP + -88) PTRSUB RSP -88
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40)
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -56) (RSP + -168) (RSP + -200) (RSP + -168)
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -120) PTRSUB RSP -120
(RSP + -104) PTRSUB RSP -104
(RSP + -216) PTRSUB RSP -216
 CALL func (RSP + -152) (RSP + -40) (RSP + -40)
(RSP + -168) PTRSUB RSP -168
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) (RSP + -88) (RSP + -56) (RSP + -88)
(f() + 4294967295) INT_ADD f() 4294967295
f() CALL func (RSP + -152) (RSP + -200) (RSP + -200)
(RSP + -104) PTRSUB RSP -104
(RSP + -152) PTRSUB RSP -152
(RSP + -40) PTRSUB RSP -40
(RSP + -120) PTRSUB RSP -120
(RSP + -40) PTRSUB RSP -40
 CBRANCH (f(RSP) INT_EQUAL 0)
(RSP + -152) PTRSUB RSP -152
 CBRANCH (f(RSP) INT_EQUAL 0)
0 INT_EQUAL f(RSP) 0
0 COPY 0
f(RSP) CALL func (RSP + -152) 0
 BRANCH VZERO
f(RSP) CALL func (RSP + -168) (RSP + -184) (RSP + -184)
1 COPY 1
(RSP + -184) PTRSUB RSP -184
0 INT_EQUAL f(RSP) 0
(RSP + -168) PTRSUB RSP -168
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -152) PTRSUB RSP -152
(RSP + -200) PTRSUB RSP -200
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -168) (RSP + -40) (RSP + -40)
 CALL func (RSP + -40) (RSP + -168) 1 (RSP + -168)
(RSP + -40) PTRSUB RSP -40
(RSP + -168) PTRSUB RSP -168
(RSP + -40) PTRSUB RSP -40
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -40) (RSP + -152) (RSP + -200) (RSP + -152)
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -152) (RSP + -40) (RSP + -40)
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
(RSP + -40) PTRSUB RSP -40
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -136) (RSP + -40) (RSP + -40)
(RSP + -216) PTRSUB RSP -216
(RSP + -40) PTRSUB RSP -40
(RSP + -120) PTRSUB RSP -120
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) (RSP + -120) (RSP + -216) (RSP + -120)
 CALL func (RSP + -40)
 CALL func (RSP + -120) (RSP + -40) (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -40) (RSP + -136) 1 (RSP + -136)
(RSP + -136) PTRSUB RSP -136
 CALL func ARG1
 RETURN 0
 CALL func ARG1 ARG2 -1 1
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG2 + 4294967295) INT_ADD ARG2 4294967295
 CALL func ARG1 ARG2 ARG2
ARG1 COPY ARG1
 CALL func ARG1 (ARG2 + 4294967295) (ARG2 + 4294967295)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 16) INT_ADD ARG1 16
ARG1 COPY ARG1
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1 (RSP + -56) (RSP + -56)
 CALL func ARG1
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 16) INT_ADD ARG1 16
 CALL func (RSP + -72) (RSP + -168) ARG2 (RSP + -168)
 CALL func (RSP + -72) (RSP + -88) ARG2 (RSP + -88)
f() CALL func ARG2
 CALL func (RSP + -56) ARG2 (RSP + -152) ARG2
f() CALL func ARG2
 CALL func (RSP + -88) (RSP + -136) ARG2 (RSP + -136)
f() CALL func ARG2
 CALL func (RSP + -72) ARG2 1 ARG2
f() CALL func ARG2
f() CALL func ARG2
 CALL func (RSP + -56) (RSP + -104) ARG2 (RSP + -104)
 CALL func (RSP + -56) (RSP + -72) ARG2 (RSP + -72)
f() CALL func ARG2
 CALL func (RSP + -136) (RSP + -56) ARG3 (RSP + -56)
(RSP + -72) PTRSUB RSP -72
(RSP + -56) PTRSUB RSP -56
(RSP + -168) PTRSUB RSP -168
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -168)
(RSP + -72) PTRSUB RSP -72
 CBRANCH f()
 CALL func (RSP + -56)
 CALL func (RSP + -216) (RSP + -56) (RSP + -56)
f() CALL func (RSP + -72) (RSP + -56) (RSP + -56)
(f() + 40) CAST (f() + 40)
(RSP + -184) PTRSUB RSP -184
(RSP + -168) PTRSUB RSP -168
(RSP + -184) PTRSUB RSP -184
(RSP + -88) PTRSUB RSP -88
(RSP + -184) PTRSUB RSP -184
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 STORE 433 (ARG1 + 16) 0
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -152)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -72) (RSP + -200) (RSP + -232) (RSP + -200)
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -56)
 CALL func (RSP + -56) (RSP + -136) (RSP + -72) (RSP + -136)
 CALL func (RSP + -56) f() f()
 CALL func (RSP + -72)
(RSP + -232) PTRSUB RSP -232
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -184)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -72)
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -152)
 CALL func (RSP + -120)
(RSP + -56) PTRSUB RSP -56
(RSP + -232) PTRSUB RSP -232
(RSP + -200) PTRSUB RSP -200
(RSP + -216) PTRSUB RSP -216
(RSP + -72) PTRSUB RSP -72
(RSP + -104) PTRSUB RSP -104
(RSP + -232) PTRSUB RSP -232
 CALL func (RSP + -104) f() f()
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -168)
(RSP + -200) PTRSUB RSP -200
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -104)
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -56) (RSP + -232) (RSP + -184) (RSP + -232)
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -200) (RSP + -56) (RSP + -56)
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -56)
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -56)
 CALL func (RSP + -56) (RSP + -72) (RSP + -152) (RSP + -72)
(RSP + -232) PTRSUB RSP -232
 CALL func (RSP + -72) (RSP + -152) 1 (RSP + -152)
(ARG1 + 16) CAST (ARG1 + 16)
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
(RSP + -136) PTRSUB RSP -136
(RSP + -184) PTRSUB RSP -184
(RSP + -216) PTRSUB RSP -216
 CALL func (RSP + -136)
(RSP + -232) PTRSUB RSP -232
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(RSP + -72) PTRSUB RSP -72
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -56) (RSP + -120) (RSP + -232) (RSP + -120)
 CALL func (RSP + -168) (RSP + -56) (RSP + -56)
f() CALL func (RSP + -184) (RSP + -56) (RSP + -56)
 CALL func (RSP + -120) f() f()
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -72)
 CALL func (RSP + -200)
(RSP + -152) PTRSUB RSP -152
(f() + 1) INT_ADD f() 1
(RSP + -56) PTRSUB RSP -56
(RSP + -120) PTRSUB RSP -120
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
 CALL func (RSP + -88)
(RSP + -232) PTRSUB RSP -232
0 INT_EQUAL f() [(f() + 40)]
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -216)
(RSP + -136) PTRSUB RSP -136
(RSP + -168) PTRSUB RSP -168
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -72)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -72) PTRSUB RSP -72
(RSP + -56) PTRSUB RSP -56
(RSP + -184) PTRSUB RSP -184
(f() + -1) INT_SUB f() -1
 STORE 433 (ARG1 + 20) ((f() + 1) - f())
(f() * 2) CAST (f() * 2)
(RSP + -152) PTRSUB RSP -152
(RSP + -56) PTRSUB RSP -56
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -184)
((f() + 1) - f()) INT_SUB (f() + 1) f()
(RSP + -168) PTRSUB RSP -168
(RSP + -200) PTRSUB RSP -200
(RSP + -152) PTRSUB RSP -152
(RSP + -56) PTRSUB RSP -56
(RSP + -104) PTRSUB RSP -104
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -152) (RSP + -56) (RSP + -56)
 CALL func (RSP + -232) (RSP + -56) (RSP + -56)
(RSP + -216) PTRSUB RSP -216
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -56) (RSP + -120) (RSP + -72) (RSP + -120)
 CALL func (RSP + -216)
(RSP + -72) PTRSUB RSP -72
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) (RSP + -168) 1 (RSP + -168)
 CALL func (RSP + -56) (RSP + -104) (RSP + -72) (RSP + -104)
(RSP + -72) PTRSUB RSP -72
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -200)
(ARG1 + 20) CAST (ARG1 + 20)
 CALL func (RSP + -72)
(RSP + -120) PTRSUB RSP -120
(RSP + -72) PTRSUB RSP -72
(RSP + -136) PTRSUB RSP -136
(RSP + -72) PTRSUB RSP -72
0 INT_LESS (f() + 1) (f() * 2)
 CALL func (RSP + -184) (RSP + -56) (RSP + -56)
 CALL func (RSP + -232)
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -56)
 CBRANCH ((f() + 1) INT_LESS (f() * 2))
 CALL func (RSP + -56)
 CALL func (RSP + -56)
 CALL func (RSP + -232)
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
(RSP + -88) PTRSUB RSP -88
(f() * 2) INT_MULT f() 2
 CALL func (RSP + -56)
(RSP + -72) PTRSUB RSP -72
(RSP + -168) PTRSUB RSP -168
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -72)
(RSP + -56) PTRSUB RSP -56
(RSP + -72) PTRSUB RSP -72
(RSP + -168) PTRSUB RSP -168
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -168) (RSP + -56) (RSP + -56)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -152) (RSP + -56) (RSP + -56)
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(RSP + -152) PTRSUB RSP -152
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -88) (RSP + -152) (RSP + -152) (RSP + -152)
 CALL func (RSP + -56)
(RSP + -152) PTRSUB RSP -152
(RSP + -152) PTRSUB RSP -152
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(RSP + -88) PTRSUB RSP -88
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -72) (RSP + -168) (RSP + -168) (RSP + -168)
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -72)
(RSP + -72) PTRSUB RSP -72
(RSP + -88) PTRSUB RSP -88
f() CALL func (RSP + -168) (RSP + -120) (RSP + -120)
 CALL func (RSP + -152) (RSP + -56) (RSP + -56)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -88)
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
 CALL func (RSP + -56) (RSP + -72) 1 (RSP + -72)
(RSP + -72) PTRSUB RSP -72
(RSP + -88) PTRSUB RSP -88
(RSP + -56) PTRSUB RSP -56
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -72) (RSP + -152) (RSP + -152) (RSP + -152)
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -72)
(RSP + -168) PTRSUB RSP -168
(RSP + -168) PTRSUB RSP -168
(RSP + -120) PTRSUB RSP -120
(RSP + -56) PTRSUB RSP -56
(RSP + -168) PTRSUB RSP -168
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -56) PTRSUB RSP -56
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -168) (RSP + -56) (RSP + -56)
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -56) (RSP + -168) (RSP + -168) (RSP + -168)
(RSP + -72) PTRSUB RSP -72
(RSP + -168) PTRSUB RSP -168
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -168) (RSP + -104) (RSP + -104)
 CALL func (RSP + -56) (RSP + -72) 1 (RSP + -72)
 CALL func (RSP + -72) (RSP + -88) 1 (RSP + -88)
(RSP + -72) PTRSUB RSP -72
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f(RSP) INT_NOTEQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG1 + 16) 1
(RSP + -72) PTRSUB RSP -72
(RSP + -56) PTRSUB RSP -56
(RSP + -72) PTRSUB RSP -72
(RSP + -200) PTRSUB RSP -200
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
 CALL func (RSP + -56) (RSP + -72) 1 (RSP + -72)
 CALL func (RSP + -56)
 CALL func (RSP + -72)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -56) (RSP + -200) (RSP + -200) (RSP + -200)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(RSP + -232) PTRSUB RSP -232
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -184) (RSP + -56) (RSP + -56)
 CALL func (RSP + -56)
(RSP + -72) PTRSUB RSP -72
(RSP + -200) PTRSUB RSP -200
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -184) (RSP + -56) (RSP + -56)
 CALL func (RSP + -72) (RSP + -184) (RSP + -184) (RSP + -184)
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -56)
(RSP + -72) PTRSUB RSP -72
(RSP + -200) PTRSUB RSP -200
(RSP + -200) PTRSUB RSP -200
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -200) (RSP + -56) (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -72) (RSP + -200) (RSP + -200) (RSP + -200)
 CALL func (RSP + -200) (RSP + -56) (RSP + -56)
(RSP + -184) PTRSUB RSP -184
 BRANCH VZERO
(RSP + -184) PTRSUB RSP -184
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -56) (RSP + -72) (RSP + -232) (RSP + -72)
 CALL func (RSP + -72)
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -56) (RSP + -184) (RSP + -184) (RSP + -184)
(RSP + -184) PTRSUB RSP -184
(RSP + -200) PTRSUB RSP -200
(RSP + -56) PTRSUB RSP -56
 STORE 433 (ARG1 + 16) 1
(ARG1 + 16) CAST (ARG1 + 16)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
 CBRANCH (f(RSP) INT_NOTEQUAL 0)
f(RSP) CALL func (RSP + -184) 0
(RSP + -184) PTRSUB RSP -184
0 INT_NOTEQUAL f(RSP) 0
 CBRANCH (f(RSP) INT_NOTEQUAL 0)
(RSP + -216) PTRSUB RSP -216
(RSP + -200) PTRSUB RSP -200
f(RSP) CALL func (RSP + -200) (RSP + -216) (RSP + -216)
0 INT_NOTEQUAL f(RSP) 0
(RSP + -216) PTRSUB RSP -216
(RSP + -200) PTRSUB RSP -200
f(RSP) CALL func (RSP + -200) (RSP + -216) (RSP + -216)
0 INT_NOTEQUAL f(RSP) 0
 CALL func (RSP + -56) ARG2 ARG2
 CALL func (RSP + -56) ARG2 ARG2
f() CALL func ARG2
 CALL func (RSP + -40) ARG2 (RSP + -56) ARG2
 CALL func ARG1 ARG2 ARG3 ARG2
f() CALL func ARG3
 CALL func (RSP + -40) ARG3 ARG3
 CALL func (RSP + -56) ARG3 ARG3
f() CALL func ARG3
 CALL func (RSP + -40) (RSP + -56) ARG3 (RSP + -56)
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CALL func ARG1 (RSP + -56) (RSP + -40) (RSP + -56)
 CALL func ARG1 (RSP + -40) (RSP + -40)
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL f() 0
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CBRANCH (f() INT_EQUAL 0)
(RSP + -40) PTRSUB RSP -40
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40)
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40)
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -56)
(RSP + -40) PTRSUB RSP -40
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
 CALL func (RSP + -56)
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
(RSP + -40) PTRSUB RSP -40
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
 CALL func (RSP + -56)
(RSP + -40) PTRSUB RSP -40
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 ARG2 ARG3 ARG2
f() CALL func ARG2
 CALL func (RSP + -56) ARG2 ARG2
 CALL func ARG1 ARG2 (RSP + -40) ARG2
 CALL func (RSP + -72) ARG2 ARG2
f() CALL func ARG3
 CALL func (RSP + -40) (RSP + -56) ARG3 (RSP + -56)
 CALL func (RSP + -56) ARG3 ARG3
f() CALL func ARG3
 CALL func (RSP + -40) ARG3 ARG3
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL f() 0
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -56)
(RSP + -40) PTRSUB RSP -40
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
(RSP + -72) PTRSUB RSP -72
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(RSP + -72) PTRSUB RSP -72
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
(RSP + -40) PTRSUB RSP -40
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -72)
 CALL func (RSP + -40) (RSP + -72) (RSP + -56) (RSP + -72)
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 BRANCH VZERO
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
 CALL func ARG1 (RSP + -40) ARG3 ARG4
 CALL func (RSP + -56) ARG1 ARG1
 CALL func (RSP + -40) ARG1 ARG1
 CALL func ARG1 ARG2 ARG3 ARG4
f() CALL func ARG1
f() CALL func ARG2
 CALL func (RSP + -40) ARG2 ARG2
 CALL func (RSP + -40) ARG2 ARG3 ARG4
f() CALL func ARG2
 CALL func (RSP + -40) ARG2 ARG2
 CALL func (RSP + -40) ARG3 ARG3
 CALL func ARG3 (RSP + -40) (RSP + -40)
 CALL func (RSP + -56) (RSP + -40) ARG3 ARG4
 CALL func (RSP + -40) ARG3 ARG3
 CALL func ARG3 (RSP + -40) (RSP + -40)
 CALL func ARG4 (RSP + -40) (RSP + -40)
 CALL func (RSP + -40) ARG4 ARG4
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 BRANCH VZERO
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CBRANCH (f() INT_EQUAL 0)
(RSP + -40) PTRSUB RSP -40
 BRANCH VZERO
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40)
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
0 INT_EQUAL f() 0
 BRANCH VZERO
 CALL func (RSP + -40)
(RSP + -40) PTRSUB RSP -40
0 INT_EQUAL f() 0
(RSP + -40) PTRSUB RSP -40
f() CALL func ARG1
0 COPY 0
0 INT_XOR f() 1
 RETURN 0 0
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG3
 STORE 433 ARG4 f()
0 INT_EQUAL f() f()
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
(f() + 40) CAST (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL f())
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f() INT_NOTEQUAL f())
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
0 INT_NOTEQUAL f() f()
f(ARG3) CALL func ARG1 ARG3 ARG3
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
 STORE 433 ARG4 f(ARG3)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func ARG1 ARG2 ARG3 ARG2
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG3
 STORE 433 ARG4 f()
ARG1 COPY ARG1
f() CALL func ARG1
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL f())
0 INT_NOTEQUAL f() f()
 CBRANCH (f() INT_NOTEQUAL f())
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
0 INT_NOTEQUAL f() f()
f() CALL func ARG1 ARG2 ARG2
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
 STORE 433 ARG4 f()
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 2 4
 RETURN 0 f(ARG1)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 8)] (-1 >> (63 & (64 - ([ARG1] / 2147483647))))
(63 & (64 - ([ARG1] / 2147483647))) INT_AND (64 - ([ARG1] / 2147483647)) 63
0 INT_EQUAL f() [ARG1]
(-256 & (-1 >> (63 & (64 - ([ARG1] / 2147483647))))) INT_OR (-256 & (-1 >> (63 & (64 - ([ARG1] / 2147483647))))) 0
(64 - ([ARG1] / 2147483647)) INT_SUB 64 ([ARG1] / 2147483647)
([ARG1] / 2147483647) SUBPIECE [ARG1] 0
([ARG1] & 4294967040) INT_OR ([ARG1] & 4294967040) 0
([ARG1] & 4294967040) INT_AND [ARG1] 4294967040
([ARG1] & 4294967040) INT_ZEXT ([ARG1] & 4294967040)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(-256 & (-1 >> (63 & (64 - ([ARG1] / 2147483647))))) INT_AND (-1 >> (63 & (64 - ([ARG1] / 2147483647)))) -256
0 INT_ZEXT 0
(-1 >> (63 & (64 - ([ARG1] / 2147483647)))) INT_RIGHT -1 (63 & (64 - ([ARG1] / 2147483647)))
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_ZEXT 0
0 INT_EQUAL ARG1 0
(ARG1 + 1) INT_SUB ARG1 1
(ARG1 & (ARG1 + 1)) INT_AND (ARG1 + 1) ARG1
 RETURN 0 f()
 CBRANCH (ARG1 INT_EQUAL 0)
0 COPY 0
0 INT_NOTEQUAL (ARG1 & (ARG1 + 1)) 0
 CBRANCH ((ARG1 & (ARG1 + 1)) INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1
 RETURN 0 f()
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(f() & -256) INT_AND f() -256
(f() / 2147483647) SUBPIECE f() 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_EQUAL (f() / 2147483647) 1
(ARG1 + 8) CAST (ARG1 + 8)
f() CALL func [(ARG1 + 8)]
(f() & -256) INT_OR (f() & -256) 0
 BRANCH VZERO
0 INT_ZEXT 0
f() CALL func ARG1
f() CALL func ARG1
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 RETURN 0 0
1 COPY 1
 RETURN 0 1
0 COPY 0
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
f() CALL func ARG2
f(ARG3) CALL func ARG3
 STORE 433 ARG4 f()
(FS_OFFSET + 40) INT_ADD 0 40
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(f() + 40) CAST (f() + 40)
 CBRANCH (f(ARG3) INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
0 INT_NOTEQUAL f(ARG3) 0
f(ARG2) CALL func ARG1 ARG2 ARG2
0 COPY 0
 RETURN 0 0
0 INT_XOR f(ARG2) 1
 CALL func ARG1 ARG2 ARG3 ARG2
 CALL func (RSP + -56) ARG1 ARG2 ARG1
ARG1 COPY ARG1
 CALL func (RSP + -72) ARG1 ARG3 ARG1
f() CALL func (RSP + -72) ARG2 ARG2
f() CALL func ARG2 0
f() CALL func ARG3 0
f() CALL func (RSP + -56) ARG3 ARG3
 STORE 433 ARG4 0
 STORE 433 ARG4 f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
~(f()) BOOL_NEGATE f()
 CBRANCH (f() INT_EQUAL [(f() + 40)])
 CBRANCH ~(f())
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 INT_EQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 ARG1
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL f() 0
(RSP + -56) PTRSUB RSP -56
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -72)
 BRANCH VZERO
 BRANCH VZERO
0 COPY 0
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
 CBRANCH f()
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56)
 CALL func (RSP + -72) ARG1 ARG3 ARG1
 CALL func ARG1 ARG2 ARG3 ARG2
 CALL func (RSP + -56) ARG1 ARG2 ARG1
ARG1 COPY ARG1
f() CALL func ARG2 0
f() CALL func (RSP + -72) ARG2 ARG2
f() CALL func (RSP + -56) ARG3 ARG3
f() CALL func ARG3 0
 STORE 433 ARG4 f()
 STORE 433 ARG4 0
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
 CBRANCH ~(f())
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() [(f() + 40)]
0 INT_EQUAL f() 0
~(f()) BOOL_NEGATE f()
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
0 COPY 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH f()
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL f() 0
(RSP + -56) PTRSUB RSP -56
1 COPY 1
0 COPY 0
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
0 INT_EQUAL f() 0
(RSP + -72) PTRSUB RSP -72
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -72)
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG3 ARG2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
f() CALL func ARG1
0 INT_LESS f(ARG1) ARG2
0 INT_LESS f() 65
 CBRANCH (f() INT_LESS 65)
 CBRANCH (f(ARG1) INT_LESS ARG2)
0 COPY 0
1 COPY 1
 RETURN 0 1
 RETURN 0 0
f() CALL func ARG1 ARG2 ARG2
0 COPY 0
0 INT_XOR f() 1
 RETURN 0 0
f() CALL func ARG3 f(ARG2) f(ARG2)
f() CALL func ARG3 f() f()
 CALL func ARG1 ARG2 ARG3 ARG2
f() CALL func ARG3 f() f()
f() LOAD 433 ARG4
 STORE 433 ARG4 f()
 STORE 433 ARG4 f()
 STORE 433 ARG4 f()
 CALL func ARG1 [ARG2] 0 0
ARG1 COPY ARG1
f() CALL func ARG2
f() CALL func ARG2
f(ARG2) CALL func ARG2
f() CALL func ARG2
[ARG2] LOAD 433 ARG2
0 INT_EQUAL f() 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
 CBRANCH (f() INT_EQUAL 0)
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
 BRANCH VZERO
0 INT_EQUAL f() 0
f(ARG1) CALL func ARG1
f() CALL func ARG1
0 INT_LESSEQUAL f(ARG1) ARG2
0 INT_LESS f() 65
 CBRANCH (f() INT_LESS 65)
 CBRANCH (f(ARG1) INT_LESSEQUAL ARG2)
1 COPY 1
0 COPY 0
 RETURN 0 0
 RETURN 0 1
ARG1 COPY ARG1
 CALL func ARG1 [ARG2] 0 0
 CALL func ARG1 ARG2 ARG3 ARG2
f() CALL func ARG2
f(ARG2) CALL func ARG2
[ARG2] LOAD 433 ARG2
f() CALL func ARG3 f(ARG2) f(ARG2)
f() CALL func ARG3 f() f()
f() LOAD 433 ARG4
 STORE 433 ARG4 f()
 STORE 433 ARG4 f()
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 BRANCH VZERO
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
f() CALL func ARG1
 RETURN 0 (f(ARG1) + 1)
(f(ARG1) + 1) COPY (f(ARG1) + 1)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(f(ARG1) + 1) INT_ADD f(ARG1) 1
 BRANCH VZERO
([ARG1] - f()) INT_SUB [ARG1] f()
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 2 4
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 2 4
f() CALL func ARG1
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (64 INT_LESS f())
0 COPY 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0 f(ARG1)
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h
0 COPY 0
[[(ARG1 + 8)]] LOAD 433 [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
 CALL libcall___assert_fail_thunk 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/APInt.h 1344 0
 BRANCH VZERO
([(ARG1 + 8)] << (63 & (64 - ([ARG1] / 2147483647)))) INT_LEFT [(ARG1 + 8)] (63 & (64 - ([ARG1] / 2147483647)))
(64 - ([ARG1] / 2147483647)) INT_SUB 64 ([ARG1] / 2147483647)
(63 & (64 - ([ARG1] / 2147483647))) INT_AND (64 - ([ARG1] / 2147483647)) 63
(ARG1 + 8) CAST (ARG1 + 8)
(([(ARG1 + 8)] << (63 & (64 - ([ARG1] / 2147483647)))) >> (63 & (64 - ([ARG1] / 2147483647)))) INT_SRIGHT ([(ARG1 + 8)] << (63 & (64 - ([ARG1] / 2147483647)))) (63 & (64 - ([ARG1] / 2147483647)))
(64 - ([ARG1] / 2147483647)) INT_SUB 64 ([ARG1] / 2147483647)
([ARG1] / 2147483647) SUBPIECE [ARG1] 0
0 INT_LESS 64 f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(63 & (64 - ([ARG1] / 2147483647))) INT_AND (64 - ([ARG1] / 2147483647)) 63
([ARG1] / 2147483647) SUBPIECE [ARG1] 0
0 INT_NOTEQUAL ARG1 ARG2
ARG1 COPY ARG1
(ARG2 + 1) INT_SUB ARG2 1
 RETURN 0
 CBRANCH (ARG1 INT_NOTEQUAL ARG2)
0 INT_LESS f(ARG1) f(ARG2)
 CBRANCH (f(ARG1) INT_LESS f(ARG2))
 BRANCH VZERO
(f(ARG2) + 1) INT_SUB f(ARG2) 1
(f(ARG1) + 1) INT_ADD f(ARG1) 1
 CALL func f(ARG1) f(ARG2) f(ARG2)
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
40 INT_ADD 0 40
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -48) PTRSUB RSP -48
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -48)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
0 INT_NOTEQUAL ARG5 0
f(ARG1) CALL func ARG1 0
f(ARG1) CALL func ARG1
 CALL func (RSP + -184) ARG1 ARG1
f(ARG1) CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG2 f(Symbol) f(Symbol)
 CALL func ARG2 f(Symbol) f(Symbol)
[ARG2] LOAD 433 ARG2
 CALL func ARG2 f(RSP) (RSP + -39) ARG2
[ARG2] LOAD 433 ARG2
 CALL func ARG2 (f(RSP) + 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ) (f(RSP) + 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ)
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 8) PTRADD ARG2 1 8
 CALL func ARG2 (0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ + (([f(RSP)] / 2147483647) & (ARG3 + 1))) (0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ + (([f(RSP)] / 2147483647) & (ARG3 + 1)))
 CALL func ARG2 (RSP + -120) (RSP + -120)
 CALL func ARG2 (RSP + -120) (RSP + -120)
 CALL func ARG2 f(Symbol) f(Symbol)
 CALL func ARG2 (RSP + -120) (RSP + -120)
0 INT_EQUAL ARG4 1
0 INT_EQUAL ARG4 0
0 INT_NOTEQUAL ARG3 16
ARG3 INT_ZEXT ARG3
0 INT_EQUAL ARG3 16
0 INT_EQUAL ARG3 16
0 INT_EQUAL ARG3 10
0 INT_EQUAL ARG3 10
0 INT_EQUAL ARG3 8
0 INT_EQUAL ARG3 2
ARG3 INT_ZEXT ARG3
(ARG3 + 1) INT_SUB ARG3 1
0 INT_NOTEQUAL ARG3 2
0 INT_LESS ARG3 9
0 INT_EQUAL ARG3 2
0 INT_EQUAL ARG3 8
0 INT_LESSEQUAL ARG3 f(RSP)
0 INT_NOTEQUAL ARG3 10
0 INT_EQUAL ARG3 16
 CALL func (RSP + -168) f() ARG3 0
0 INT_NOTEQUAL ARG3 36
0 INT_NOTEQUAL ARG3 8
0 INT_EQUAL ARG3 8
 CBRANCH (ARG3 INT_NOTEQUAL 10)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f(ARG1) INT_EQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
48 COPY 48
0 INT_NOTEQUAL [f(Symbol)] 0
 CBRANCH ([f(Symbol)] INT_NOTEQUAL 0)
(f() + 40) CAST (f() + 40)
 CBRANCH (f(0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ , ARG1 , ARG3) INT_EQUAL [(f() + 40)])
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f(0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ , ARG1 , ARG3) [(f() + 40)]
(f() + 40) INT_ADD f() 40
(RSP + -120) PTRSUB RSP -120
 BRANCH VZERO
[f(Symbol)] LOAD 433 f(Symbol)
 CBRANCH (ARG3 INT_NOTEQUAL 16)
 CBRANCH (ARG5 INT_NOTEQUAL 0)
Symbol COPY Symbol
0 INT_EQUAL f(ARG1) 0
 CBRANCH (ARG3 INT_NOTEQUAL 2)
 CBRANCH (ARG3 INT_EQUAL 16)
 CBRANCH (ARG3 INT_EQUAL 10)
((([(ARG2 + 8)] / 2147483647) - ([ARG2] / 2147483647)) + [ARG2]) INT_ADD (([(ARG2 + 8)] / 2147483647) - ([ARG2] / 2147483647)) [ARG2]
(RSP + -184) PTRSUB RSP -184
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(([(ARG2 + 8)] / 2147483647) - ([ARG2] / 2147483647)) CAST (([(ARG2 + 8)] / 2147483647) - ([ARG2] / 2147483647))
(RSP + -184) PTRSUB RSP -184
(([(ARG2 + 8)] / 2147483647) - ([ARG2] / 2147483647)) INT_ZEXT (([(ARG2 + 8)] / 2147483647) - ([ARG2] / 2147483647))
 CBRANCH (ARG3 INT_EQUAL 16)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 CALL func (RSP + -184)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(RSP + -168) PTRSUB RSP -168
(RSP + -184) PTRSUB RSP -184
f() CALL func (RSP + -184) 0
 CALL func ((([(ARG2 + 8)] / 2147483647) - ([ARG2] / 2147483647)) + [ARG2]) [(ARG2 + 8)] ((([(ARG2 + 8)] / 2147483647) - ([ARG2] / 2147483647)) + [ARG2]) [ARG2]
f() CALL func (RSP + -184) 0
 CBRANCH (ARG3 INT_EQUAL 8)
4 COPY 4
8 COPY 8
 BRANCH VZERO
 CBRANCH (ARG3 INT_EQUAL 2)
Symbol COPY Symbol
Invalid radix! COPY Invalid radix!
 CALL func Invalid radix! /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2166
 BRANCH VZERO
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 CBRANCH ([f(Symbol)] INT_NOTEQUAL 0)
(f(Symbol) + 1) PTRADD f(Symbol) 1 1
0 INT_NOTEQUAL [f(Symbol)] 0
 BRANCH VZERO
[f(Symbol)] LOAD 433 f(Symbol)
 CBRANCH (ARG3 INT_EQUAL 10)
 CBRANCH (ARG3 INT_EQUAL 16)
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH (ARG3 INT_EQUAL 8)
3 COPY 3
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (ARG3 INT_NOTEQUAL 36)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 RETURN 1
void llvm::APInt::toString(llvm::SmallVectorImpl<char>&, unsigned int, bool, bool) const COPY void llvm::APInt::toString(llvm::SmallVectorImpl<char>&, unsigned int, bool, bool) const
 CALL libcall___assert_fail_thunk (Radix == 10 || Radix == 8 || Radix == 16 || Radix == 2 || Radix == 36) && "Radix should be 2, 8, 10, 16, or 36!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2147 void llvm::APInt::toString(llvm::SmallVectorImpl<char>&, unsigned int, bool, bool) const
(Radix == 10 || Radix == 8 || Radix == 16 || Radix == 2 || Radix == 36) && "Radix should be 2, 8, 10, 16, or 36!" COPY (Radix == 10 || Radix == 8 || Radix == 16 || Radix == 2 || Radix == 36) && "Radix should be 2, 8, 10, 16, or 36!"
 CBRANCH (ARG3 INT_EQUAL 8)
 CBRANCH (ARG3 INT_LESS 9)
 CBRANCH (ARG3 INT_NOTEQUAL 8)
4 COPY 4
 CBRANCH (ARG4 INT_EQUAL 1)
 CBRANCH (f(ARG1) INT_SLESS 0)
 BRANCH VZERO
f(ARG1) CAST f(ARG1)
0 INT_SLESS f(ARG1) 0
 BRANCH VZERO
(f(Symbol) + 1) PTRADD f(Symbol) 1 1
(([f(RSP)] / 2147483647) & (ARG3 + 1)) INT_ZEXT (([f(RSP)] / 2147483647) & (ARG3 + 1))
f(RSP) CAST f(RSP)
(RSP + -184) PTRSUB RSP -184
(([f(RSP)] / 2147483647) & (ARG3 + 1)) INT_AND ([f(RSP)] / 2147483647) (ARG3 + 1)
 CALL func (RSP + -120) (RSP + -184) f() (RSP + -184)
[f(RSP)] LOAD 433 f(RSP)
 CALL func (RSP + -184) (RSP + -120) (RSP + -120)
(RSP + -184) PTRSUB RSP -184
([f(RSP)] / 2147483647) SUBPIECE [f(RSP)] 0
f(RSP) CALL func (RSP + -184)
(RSP + -120) PTRSUB RSP -120
(RSP + -120) PTRSUB RSP -120
(RSP + -184) PTRSUB RSP -184
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ COPY 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ
(RSP + -120) PTRSUB RSP -120
 BRANCH VZERO
(0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ + (([f(RSP)] / 2147483647) & (ARG3 + 1))) PTRADD 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ (([f(RSP)] / 2147483647) & (ARG3 + 1)) 1
 CALL func (RSP + -120)
Symbol COPY Symbol
 BRANCH VZERO
 CALL func (RSP + -120) f() (RSP + -168) f() (RSP + -136) (RSP + -152)
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -152) 1 0 0
(RSP + -136) PTRSUB RSP -136
(RSP + -120) PTRSUB RSP -120
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -136) f() 0 0
f(RSP) CALL func (RSP + -152)
f() CALL func (RSP + -184)
(RSP + -168) PTRSUB RSP -168
(RSP + -184) PTRSUB RSP -184
(RSP + -120) PTRSUB RSP -120
(RSP + -184) PTRSUB RSP -184
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -120)
(RSP + -136) PTRSUB RSP -136
 BRANCH VZERO
f() CALL func (RSP + -184)
 CALL func (RSP + -168)
 CBRANCH (ARG3 INT_LESSEQUAL f(RSP))
(RSP + -152) PTRSUB RSP -152
(RSP + -168) PTRSUB RSP -168
f() CALL func (RSP + -168)
(RSP + -152) PTRSUB RSP -152
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -120) (RSP + -184) (RSP + -184)
 CBRANCH (ARG3 INT_EQUAL 2)
 CBRANCH (ARG4 INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH f()
(RSP + -184) PTRSUB RSP -184
(RSP + -184) PTRSUB RSP -184
45 COPY 45
 CALL func (RSP + -184)
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -184)
(RSP + -184) PTRSUB RSP -184
(RSP + -39) PTRSUB RSP -39
(([(ARG2 + 8)] / 2147483647) - ([ARG2] / 2147483647)) INT_SUB ([(ARG2 + 8)] / 2147483647) ([ARG2] / 2147483647)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
[f(Symbol)] LOAD 433 f(Symbol)
 BRANCH VZERO
(RSP + -39) PTRSUB RSP -39
([ARG2] / 2147483647) SUBPIECE [ARG2] 0
 CBRANCH (f(ARG1 , ARG3) INT_NOTEQUAL 0)
([(ARG2 + 8)] / 2147483647) SUBPIECE [(ARG2 + 8)] 0
0 INT_NOTEQUAL f(ARG1 , ARG3) 0
 CBRANCH ([f(Symbol)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [f(Symbol)] 0
 BRANCH VZERO
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ COPY 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ
 STORE 433 (f(RSP) + -1) [(0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ + (f(ARG1) % ARG3))]
(f(ARG1 , ARG3) % ARG3) INT_REM f(ARG1 , ARG3) ARG3
(f(ARG1 , ARG3) / ARG3) INT_DIV f(ARG1 , ARG3) ARG3
(0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ + (f(ARG1 , ARG3) % ARG3)) PTRADD 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ (f(ARG1 , ARG3) % ARG3) 1
[(0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ + (f(ARG1) % ARG3))] LOAD 433 (0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ + (f(ARG1 , ARG3) % ARG3))
(f(RSP) + -1) PTRADD f(RSP) -1 1
void llvm::APInt::toString(llvm::SmallVectorImpl<char>&, unsigned int, bool, bool) const COPY void llvm::APInt::toString(llvm::SmallVectorImpl<char>&, unsigned int, bool, bool) const
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -136)
 RETURN 1
Digit < Radix && "divide failed" COPY Digit < Radix && "divide failed"
 CALL libcall___assert_fail_thunk Digit < Radix && "divide failed" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2252 void llvm::APInt::toString(llvm::SmallVectorImpl<char>&, unsigned int, bool, bool) const
 CALL func (RSP + -152)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 BRANCH VZERO
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ COPY 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ
(RSP + -184) PTRSUB RSP -184
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -184) (RSP + -136) (RSP + -136)
(f(RSP) + 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ) PTRADD 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ f(RSP) 1
f(RSP) INT_ZEXT f(RSP)
(RSP + -136) PTRSUB RSP -136
(~(f(ARG1)) + 1) INT_2COMP f(ARG1)
(RSP + -120) PTRSUB RSP -120
45 COPY 45
 BRANCH VZERO
Symbol COPY Symbol
 BRANCH VZERO
(f(Symbol) + 1) PTRADD f(Symbol) 1 1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1 40
 RETURN 0
 CALL func ARG1
 RETURN 0
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL ([(ARG1 + 8)] - [ARG1]) 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(([(ARG1 + 8)] - [ARG1]) # [ARG1]) PIECE ([(ARG1 + 8)] - [ARG1]) [ARG1]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
 CBRANCH (([(ARG1 + 8)] - [ARG1]) INT_NOTEQUAL 0)
[40] LOAD 433 40
 RETURN 0 (([(ARG1 + 8)] - [ARG1]) # [ARG1])
(([(ARG1 + 8)] - [ARG1]) # [ARG1]) COPY (([(ARG1 + 8)] - [ARG1]) # [ARG1])
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 1
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
0 COPY 0
 CALL func ARG2 (RSP + -88) ARG3 ARG4 0
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -104) (RSP + -104)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -88) PTRSUB RSP -88
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
40 CAST 40
(RSP + -104) PTRSUB RSP -104
(f() / 2147483647) SUBPIECE f() 8
(RSP + -88) PTRSUB RSP -88
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
f() CALL func (RSP + -88)
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -88)
(RSP + -88) PTRSUB RSP -88
(RSP + -88) PTRSUB RSP -88
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
 CALL func (RSP + -88)
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
 RETURN 0 ARG1
(f() / 2147483647) SUBPIECE f() 0
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 ARG2 ARG3 1 0
 RETURN 0
 CALL func ARG1 ARG2 ARG3 0 0
 RETURN 0
 CALL func ARG1 (RSP + -168) 10 (RSP + -168)
[ARG1] LOAD 433 ARG1
 CALL func ARG1 (RSP + -104) 10 (RSP + -104)
 CALL func (RSP + -104)
(RSP + -168) PTRSUB RSP -168
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func f() 4690876
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -168) PTRSUB RSP -168
f() CALL func f() [ARG1]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (RSP + -104)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func f() 4690879
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
APInt( COPY APInt(
40 INT_ADD 0 40
(RSP + -168) PTRSUB RSP -168
f() CALL func f() (RSP + -104) f()
f() CALL func f() APInt(
4690876 PTRSUB 0 4690876
(RSP + -104) PTRSUB RSP -104
[40] LOAD 433 40
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -168)
(RSP + -104) PTRSUB RSP -104
f() CALL func f() (RSP + -168) f()
 CALL func (RSP + -168)
f() CALL func
(RSP + -104) PTRSUB RSP -104
4690879 PTRSUB 0 4690879
f() CALL func f() 4690872
4690872 PTRSUB 0 4690872
(RSP + -168) PTRSUB RSP -168
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALL func ARG1 (RSP + -88) 10 ARG3 0
 CALL func ARG2 (RSP + -88) (RSP + -88)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(RSP + -88) PTRSUB RSP -88
(RSP + -88) PTRSUB RSP -88
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (RSP + -88)
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
 CALL func (RSP + -88)
(RSP + -88) PTRSUB RSP -88
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(RSP + -88) PTRSUB RSP -88
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
(ARG1 / 2147483647) SUBPIECE ARG1 0
0 INT_NOTEQUAL ARG1 0
0 INT_LESS ARG1 65
 CBRANCH (ARG1 INT_NOTEQUAL 0)
 CBRANCH (ARG1 INT_LESS 65)
(63 & (64 - (ARG1 / 2147483647))) INT_AND (64 - (ARG1 / 2147483647)) 63
 CALL libcall___assert_fail_thunk bits != 0 && bits <= integerPartWidth /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2300 llvm::integerPart {anonymous}::lowBitMask(unsigned int)
 RETURN 0 (-1 >> (63 & (64 - (ARG1 / 2147483647))))
(64 - (ARG1 / 2147483647)) INT_SUB 64 (ARG1 / 2147483647)
(-1 >> (63 & (64 - (ARG1 / 2147483647)))) COPY (-1 >> (63 & (64 - (ARG1 / 2147483647))))
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
(-1 >> (63 & (64 - (ARG1 / 2147483647)))) INT_RIGHT -1 (63 & (64 - (ARG1 / 2147483647)))
bits != 0 && bits <= integerPartWidth COPY bits != 0 && bits <= integerPartWidth
 RETURN 1
llvm::integerPart {anonymous}::lowBitMask(unsigned int) COPY llvm::integerPart {anonymous}::lowBitMask(unsigned int)
(f() & ARG1) INT_AND f() ARG1
f() CALL func 32
 RETURN 0 (f() & ARG1)
(ARG1 / 2147483647) INT_RIGHT ARG1 32
 RETURN 0 (ARG1 / 2147483647)
f() CALL func ARG1 0
0 INT_EQUAL ARG1 0
0 INT_EQUAL ARG2 1
 RETURN 0 f()
 CBRANCH (ARG2 INT_EQUAL 1)
 CBRANCH (ARG1 INT_EQUAL 0)
f() CALL func
0 INT_XOR f() 63
 BRANCH VZERO
 CALL func ARG1 1
 RETURN 0
0 INT_EQUAL ARG2 1
0 INT_EQUAL ARG1 0
 CALL func ARG1 0
 CBRANCH (ARG2 INT_EQUAL 1)
 RETURN 0
 CBRANCH (ARG1 INT_EQUAL 0)
 CALL func
 BRANCH VZERO
 CALL func ARG1 1
 RETURN 0
 STORE 433 ARG1 ARG2
(ARG1 + (f() * 8)) PTRADD ARG1 f() 8
0 INT_LESS f() ARG3
0 INT_EQUAL ARG3 0
 CBRANCH (ARG3 INT_EQUAL 0)
 CBRANCH (f() INT_LESS ARG3)
f() INT_ZEXT f()
 STORE 433 (ARG1 + (f() * 8)) 0
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
 RETURN 1
1 COPY 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
parts > 0 COPY parts > 0
 RETURN 0
 CALL libcall___assert_fail_thunk parts > 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2343 static void llvm::APInt::tcSet(llvm::integerPart*, llvm::integerPart, unsigned int)
static void llvm::APInt::tcSet(llvm::integerPart*, llvm::integerPart, unsigned int) COPY static void llvm::APInt::tcSet(llvm::integerPart*, llvm::integerPart, unsigned int)
(ARG1 + (f() * 8)) INT_ADD (f() * 8) ARG1
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
0 INT_LESS f() ARG3
 RETURN 0
 CBRANCH (f() INT_LESS ARG3)
0 COPY 0
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
 STORE 433 (ARG1 + (f() * 8)) [(ARG2 + (f() * 8))]
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
(f() * 8) INT_MULT f() 8
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
0 INT_LESSEQUAL ARG2 f()
0 COPY 0
 CBRANCH (ARG2 INT_LESSEQUAL f())
 CBRANCH ([(ARG1 + (f() * 8))] INT_NOTEQUAL 0)
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
 RETURN 0 1
0 COPY 0
 RETURN 0 0
1 COPY 1
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f() INT_ZEXT f()
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
0 INT_NOTEQUAL [(ARG1 + (f() * 8))] 0
(ARG1 + ((ARG2 / 64) * 8)) INT_ADD ARG1 ((ARG2 / 64) * 8)
(ARG2 / 64) INT_RIGHT ARG2 6
(ARG2 / 2147483647) SUBPIECE ARG2 0
 RETURN 0 0
0 COPY 0
([(ARG1 + ((ARG2 / 64) * 8))] >> (63 & (ARG2 / 2147483647))) INT_RIGHT [(ARG1 + ((ARG2 / 64) * 8))] (63 & (ARG2 / 2147483647))
(1 & ([(ARG1 + ((ARG2 / 64) * 8))] >> (63 & (ARG2 / 2147483647)))) INT_AND ([(ARG1 + ((ARG2 / 64) * 8))] >> (63 & (ARG2 / 2147483647))) 1
0 INT_NOTEQUAL (1 & ([(ARG1 + ((ARG2 / 64) * 8))] >> (63 & (ARG2 / 2147483647)))) 0
(63 & (ARG2 / 2147483647)) INT_AND (ARG2 / 2147483647) 63
[(ARG1 + ((ARG2 / 64) * 8))] LOAD 433 (ARG1 + ((ARG2 / 64) * 8))
((ARG2 / 64) * 8) INT_MULT (ARG2 / 64) 8
(ARG2 / 64) INT_ZEXT (ARG2 / 64)
(ARG1 + ((ARG2 / 64) * 8)) CAST (ARG1 + ((ARG2 / 64) * 8))
(ARG1 + ((ARG2 / 64) * 8)) INT_ADD ARG1 ((ARG2 / 64) * 8)
(ARG1 + ((ARG2 / 64) * 8)) INT_ADD ARG1 ((ARG2 / 64) * 8)
(ARG2 / 64) INT_RIGHT ARG2 6
(ARG2 / 2147483647) SUBPIECE ARG2 0
(ARG2 / 64) INT_ZEXT (ARG2 / 64)
(ARG2 / 64) INT_ZEXT (ARG2 / 64)
 RETURN 0
(63 & (ARG2 / 2147483647)) INT_AND (ARG2 / 2147483647) 63
([(ARG1 + ((ARG2 / 64) * 8))] | (1 << (63 & (ARG2 / 2147483647)))) INT_OR [(ARG1 + ((ARG2 / 64) * 8))] (1 << (63 & (ARG2 / 2147483647)))
(ARG1 + ((ARG2 / 64) * 8)) CAST (ARG1 + ((ARG2 / 64) * 8))
((ARG2 / 64) * 8) INT_MULT (ARG2 / 64) 8
((ARG2 / 64) * 8) INT_MULT (ARG2 / 64) 8
[(ARG1 + ((ARG2 / 64) * 8))] LOAD 433 (ARG1 + ((ARG2 / 64) * 8))
 STORE 433 (ARG1 + ((ARG2 / 64) * 8)) ([(ARG1 + ((ARG2 / 64) * 8))] | (1 << (63 & (ARG2 / 2147483647))))
(ARG1 + ((ARG2 / 64) * 8)) CAST (ARG1 + ((ARG2 / 64) * 8))
(1 << (63 & (ARG2 / 2147483647))) INT_LEFT 1 (63 & (ARG2 / 2147483647))
(ARG1 + ((ARG2 / 64) * 8)) INT_ADD ARG1 ((ARG2 / 64) * 8)
(ARG1 + ((ARG2 / 64) * 8)) INT_ADD ARG1 ((ARG2 / 64) * 8)
(ARG2 / 64) INT_RIGHT ARG2 6
(ARG2 / 2147483647) SUBPIECE ARG2 0
((ARG2 / 64) * 8) INT_MULT (ARG2 / 64) 8
[(ARG1 + ((ARG2 / 64) * 8))] LOAD 433 (ARG1 + ((ARG2 / 64) * 8))
((ARG2 / 64) * 8) INT_MULT (ARG2 / 64) 8
~((1 << (63 & (ARG2 / 2147483647)))) INT_NEGATE (1 << (63 & (ARG2 / 2147483647)))
(ARG1 + ((ARG2 / 64) * 8)) CAST (ARG1 + ((ARG2 / 64) * 8))
(1 << (63 & (ARG2 / 2147483647))) INT_LEFT 1 (63 & (ARG2 / 2147483647))
 STORE 433 (ARG1 + ((ARG2 / 64) * 8)) (~((1 << (63 & (ARG2 / 2147483647)))) & [(ARG1 + ((ARG2 / 64) * 8))])
(ARG2 / 64) INT_ZEXT (ARG2 / 64)
 RETURN 0
(63 & (ARG2 / 2147483647)) INT_AND (ARG2 / 2147483647) 63
(ARG1 + ((ARG2 / 64) * 8)) CAST (ARG1 + ((ARG2 / 64) * 8))
(~((1 << (63 & (ARG2 / 2147483647)))) & [(ARG1 + ((ARG2 / 64) * 8))]) INT_AND [(ARG1 + ((ARG2 / 64) * 8))] ~((1 << (63 & (ARG2 / 2147483647))))
(ARG2 / 64) INT_ZEXT (ARG2 / 64)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
0 INT_LESSEQUAL ARG2 f()
 CBRANCH (ARG2 INT_LESSEQUAL f())
0 COPY 0
((f() * 64) + f()) COPY ((f() * 64) + f())
 RETURN 0 ((f() * 64) + f())
(f() * 8) INT_MULT f() 8
 RETURN 0 4294967295
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
0 INT_NOTEQUAL [(ARG1 + (f() * 8))] 0
f() INT_ZEXT f()
 CBRANCH ([(ARG1 + (f() * 8))] INT_NOTEQUAL 0)
4294967295 COPY 4294967295
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
f() CALL func [(ARG1 + (f() * 8))]
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
((f() * 64) + f()) INT_ADD f() (f() * 64)
(f() * 8) INT_MULT f() 8
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(f() * 64) INT_MULT f() 64
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
f() INT_ZEXT f()
(ARG1 + ((f(ARG2) + -1) * 8)) INT_ADD ARG1 ((f(ARG2) + -1) * 8)
(ARG1 + ((f(ARG2) + -1) * 8)) INT_ADD ARG1 ((f(ARG2) + -1) * 8)
ARG2 COPY ARG2
(ARG1 + ((f(ARG2) + -1) * 8)) CAST (ARG1 + ((f(ARG2) + -1) * 8))
((f(ARG2) + -1) * 8) INT_MULT (f(ARG2) + -1) 8
0 INT_NOTEQUAL [(ARG1 + ((f(ARG2) + -1) * 8))] 0
 CBRANCH ([(ARG1 + ((f(ARG2) + -1) * 8))] INT_NOTEQUAL 0)
(f(ARG2) + -1) INT_SUB f(ARG2) -1
[(ARG1 + ((f(ARG2) + -1) * 8))] LOAD 433 (ARG1 + ((f(ARG2) + -1) * 8))
(f(ARG2) + -1) INT_ZEXT (f(ARG2) + -1)
 CBRANCH ((f(ARG2) + -1) INT_NOTEQUAL 0)
 RETURN 0 (((f(ARG2) + -1) * 64) + f())
 RETURN 0 4294967295
(((f(ARG2) + -1) * 64) + f()) COPY (((f(ARG2) + -1) * 64) + f())
4294967295 COPY 4294967295
(f(ARG2) + -1) INT_ZEXT (f(ARG2) + -1)
f() CALL func [(ARG1 + ((f(ARG2) + -1) * 8))]
(((f(ARG2) + -1) * 64) + f()) INT_ADD f() ((f(ARG2) + -1) * 64)
((f(ARG2) + -1) * 8) INT_MULT (f(ARG2) + -1) 8
((f(ARG2) + -1) * 64) INT_MULT (f(ARG2) + -1) 64
[(ARG1 + ((f(ARG2) + -1) * 8))] LOAD 433 (ARG1 + ((f(ARG2) + -1) * 8))
0 INT_NOTEQUAL (f(ARG2) + -1) 0
(ARG1 + ((f(ARG2) + -1) * 8)) CAST (ARG1 + ((f(ARG2) + -1) * 8))
(ARG1 + (f() * 8)) INT_ADD (f() * 8) ARG1
(ARG1 + ((((ARG3 / 64) + f()) + 1) * 8)) INT_ADD ARG1 ((((ARG3 / 64) + f()) + 1) * 8)
(ARG1 + (((ARG3 / 64) + f()) * 8)) INT_ADD ARG1 (((ARG3 / 64) + f()) * 8)
0 INT_LESS ((ARG3 / 64) + f()) ARG2
0 INT_LESS f() ARG2
0 INT_LESS (((ARG3 / 64) + f()) + 1) ARG2
(ARG3 / 64) INT_RIGHT ARG3 6
(ARG3 & 63) INT_AND ARG3 63
0 INT_NOTEQUAL ARG3 0
 RETURN 0
 CBRANCH (ARG3 INT_NOTEQUAL 0)
 CBRANCH (f() INT_LESS ARG2)
 CBRANCH (((ARG3 / 64) + f()) INT_LESS ARG2)
 STORE 433 (ARG1 + (f() * 8)) f(ARG1 , ARG3)
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() INT_ZEXT f()
((ARG3 / 64) + f()) INT_ADD (ARG3 / 64) f()
(f() * 8) INT_MULT f() 8
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
0 INT_NOTEQUAL (ARG3 & 63) 0
0 COPY 0
[(ARG1 + (((ARG3 / 64) + f()) * 8))] LOAD 433 (ARG1 + (((ARG3 / 64) + f()) * 8))
 CBRANCH ((ARG3 & 63) INT_NOTEQUAL 0)
((ARG3 / 64) + f()) INT_ZEXT ((ARG3 / 64) + f())
 BRANCH VZERO
((ARG3 / 64) + f()) INT_ADD (ARG3 / 64) f()
(ARG1 + (((ARG3 / 64) + f()) * 8)) CAST (ARG1 + (((ARG3 / 64) + f()) * 8))
(((ARG3 / 64) + f()) * 8) INT_MULT ((ARG3 / 64) + f()) 8
((ARG3 / 64) + f()) INT_ADD (ARG3 / 64) f()
([(ARG1 + (((ARG3 / 64) + f()) * 8))] >> ((ARG3 & 63) / 2147483647)) INT_RIGHT [(ARG1 + (((ARG3 / 64) + f()) * 8))] ((ARG3 & 63) / 2147483647)
 CBRANCH ((((ARG3 / 64) + f()) + 1) INT_LESS ARG2)
(((ARG3 / 64) + f()) + 1) INT_ADD ((ARG3 / 64) + f()) 1
((ARG3 & 63) / 2147483647) SUBPIECE (ARG3 & 63) 0
[(ARG1 + ((((ARG3 / 64) + f()) + 1) * 8))] LOAD 433 (ARG1 + ((((ARG3 / 64) + f()) + 1) * 8))
((((ARG3 / 64) + f()) + 1) * 8) INT_MULT (((ARG3 / 64) + f()) + 1) 8
(ARG1 + ((((ARG3 / 64) + f()) + 1) * 8)) CAST (ARG1 + ((((ARG3 / 64) + f()) + 1) * 8))
([(ARG1 + ((((ARG3 / 64) + f()) + 1) * 8))] << (63 & (64 - ((ARG3 & 63) / 2147483647)))) INT_LEFT [(ARG1 + ((((ARG3 / 64) + f()) + 1) * 8))] (63 & (64 - ((ARG3 & 63) / 2147483647)))
(((ARG3 / 64) + f()) + 1) INT_ZEXT (((ARG3 / 64) + f()) + 1)
(63 & (64 - ((ARG3 & 63) / 2147483647))) INT_AND (64 - ((ARG3 & 63) / 2147483647)) 63
((ARG3 / 64) + f()) INT_ADD (ARG3 / 64) f()
f(ARG1 , ARG3) INT_OR ([(ARG1 + (((ARG3 / 64) + f()) * 8))] >> ((ARG3 & 63) / 2147483647)) ([(ARG1 + ((((ARG3 / 64) + f()) + 1) * 8))] << (63 & (64 - ((ARG3 & 63) / 2147483647))))
(64 - ((ARG3 & 63) / 2147483647)) INT_SUB 64 ((ARG3 & 63) / 2147483647)
(((ARG3 / 64) + f()) + 1) INT_ADD ((ARG3 / 64) + f()) 1
0 COPY 0
(((ARG5 / 64) * 8) + ARG3) INT_ADD ((ARG5 / 64) * 8) ARG3
(ARG3 + ((((ARG4 + 63) / 64) + (ARG5 / 64)) * 8)) INT_ADD ARG3 ((((ARG4 + 63) / 64) + (ARG5 / 64)) * 8)
(ARG5 / 64) INT_RIGHT ARG5 6
(ARG5 & 63) INT_AND ARG5 63
0 INT_LESS f(ARG4) ARG2
0 INT_LESS ARG2 ((ARG4 + 63) / 64)
0 INT_LESS ARG4 ((4294967232 & (ARG4 + 63)) - (ARG5 & 63))
(ARG4 + 63) INT_ADD ARG4 63
(ARG4 - ((4294967232 & (ARG4 + 63)) - (ARG5 & 63))) INT_SUB ARG4 ((4294967232 & (ARG4 + 63)) - (ARG5 & 63))
(ARG4 & 63) INT_AND ARG4 63
(ARG4 & 63) INT_AND ARG4 63
0 INT_LESS ((4294967232 & (ARG4 + 63)) - (ARG5 & 63)) ARG4
(ARG1 + (f(ARG4) * 8)) INT_ADD ARG1 (f(ARG4) * 8)
(((((ARG4 + 63) / 64) + 1) * 8) + ARG1) INT_ADD ((((ARG4 + 63) / 64) + 1) * 8) ARG1
(ARG1 + ((((ARG4 + 63) / 64) + 1) * 8)) INT_ADD ARG1 ((((ARG4 + 63) / 64) + 1) * 8)
 CALL func ARG1 ((ARG4 + 63) / 64) (ARG5 & 63) ((ARG4 + 63) / 64)
(ARG1 + ((((ARG4 + 63) / 64) + 1) * 8)) INT_ADD ARG1 ((((ARG4 + 63) / 64) + 1) * 8)
 CALL func ARG1 (((ARG5 / 64) * 8) + ARG3) ((ARG4 + 63) / 64) (((ARG5 / 64) * 8) + ARG3)
(ARG1 + ((((ARG4 + 63) / 64) + 1) * 8)) INT_ADD ARG1 ((((ARG4 + 63) / 64) + 1) * 8)
 CBRANCH (ARG2 INT_LESS ((ARG4 + 63) / 64))
((ARG4 + 63) / 64) INT_RIGHT (ARG4 + 63) 6
 CBRANCH (((4294967232 & (ARG4 + 63)) - (ARG5 & 63)) INT_LESS ARG4)
((((ARG4 + 63) / 64) + 1) * 8) INT_MULT (((ARG4 + 63) / 64) + 1) 8
f(ARG3 , ARG4 , ARG5) INT_LEFT (f() & [(ARG3 + ((((ARG4 + 63) / 64) + (ARG5 / 64)) * 8))]) (63 & (((4294967232 & (ARG4 + 63)) - (ARG5 & 63)) / 2147483647))
f() CALL func (ARG4 - ((4294967232 & (ARG4 + 63)) - (ARG5 & 63)))
(((4294967232 & (ARG4 + 63)) - (ARG5 & 63)) / 2147483647) SUBPIECE ((4294967232 & (ARG4 + 63)) - (ARG5 & 63)) 0
(((ARG4 + 63) / 64) + 1) INT_ZEXT (((ARG4 + 63) / 64) + 1)
[(ARG1 + ((((ARG4 + 63) / 64) + 1) * 8))] LOAD 433 (ARG1 + ((((ARG4 + 63) / 64) + 1) * 8))
[(ARG3 + ((((ARG4 + 63) / 64) + (ARG5 / 64)) * 8))] LOAD 433 (ARG3 + ((((ARG4 + 63) / 64) + (ARG5 / 64)) * 8))
((((ARG4 + 63) / 64) + (ARG5 / 64)) * 8) INT_MULT (((ARG4 + 63) / 64) + (ARG5 / 64)) 8
 CBRANCH (ARG4 INT_LESS ((4294967232 & (ARG4 + 63)) - (ARG5 & 63)))
((((ARG4 + 63) / 64) + 1) * 8) INT_MULT (((ARG4 + 63) / 64) + 1) 8
(((ARG4 + 63) / 64) + (ARG5 / 64)) INT_ZEXT (((ARG4 + 63) / 64) + (ARG5 / 64))
(ARG1 + ((((ARG4 + 63) / 64) + 1) * 8)) CAST (ARG1 + ((((ARG4 + 63) / 64) + 1) * 8))
f(ARG1 , ARG3 , ARG4 , ARG5) INT_OR f(ARG3 , ARG4 , ARG5) [(ARG1 + ((((ARG4 + 63) / 64) + 1) * 8))]
(63 & (((4294967232 & (ARG4 + 63)) - (ARG5 & 63)) / 2147483647)) INT_AND (((4294967232 & (ARG4 + 63)) - (ARG5 & 63)) / 2147483647) 63
((ARG4 + 63) / 64) COPY ((ARG4 + 63) / 64)
 BRANCH VZERO
(((ARG4 + 63) / 64) + 1) INT_SUB ((ARG4 + 63) / 64) 1
 STORE 433 (((((ARG4 + 63) / 64) + 1) * 8) + ARG1) f(ARG1 , ARG3 , ARG4 , ARG5)
(((((ARG4 + 63) / 64) + 1) * 8) + ARG1) CAST (((((ARG4 + 63) / 64) + 1) * 8) + ARG1)
(((ARG4 + 63) / 64) + 1) INT_SUB ((ARG4 + 63) / 64) 1
(((ARG4 + 63) / 64) + (ARG5 / 64)) INT_ADD ((ARG4 + 63) / 64) (ARG5 / 64)
(((ARG4 + 63) / 64) + 1) INT_ZEXT (((ARG4 + 63) / 64) + 1)
(f() & [(ARG3 + ((((ARG4 + 63) / 64) + (ARG5 / 64)) * 8))]) INT_AND [(ARG3 + ((((ARG4 + 63) / 64) + (ARG5 / 64)) * 8))] f()
(ARG3 + ((((ARG4 + 63) / 64) + (ARG5 / 64)) * 8)) CAST (ARG3 + ((((ARG4 + 63) / 64) + (ARG5 / 64)) * 8))
 CBRANCH ((ARG4 & 63) INT_NOTEQUAL 0)
(((ARG4 + 63) / 64) + 1) INT_ZEXT (((ARG4 + 63) / 64) + 1)
[(ARG1 + ((((ARG4 + 63) / 64) + 1) * 8))] LOAD 433 (ARG1 + ((((ARG4 + 63) / 64) + 1) * 8))
(f() & [(ARG1 + ((((ARG4 + 63) / 64) + 1) * 8))]) INT_AND [(ARG1 + ((((ARG4 + 63) / 64) + 1) * 8))] f()
((((ARG4 + 63) / 64) + 1) * 8) INT_MULT (((ARG4 + 63) / 64) + 1) 8
(ARG1 + ((((ARG4 + 63) / 64) + 1) * 8)) CAST (ARG1 + ((((ARG4 + 63) / 64) + 1) * 8))
 STORE 433 (ARG1 + ((((ARG4 + 63) / 64) + 1) * 8)) (f() & [(ARG1 + ((((ARG4 + 63) / 64) + 1) * 8))])
(ARG1 + ((((ARG4 + 63) / 64) + 1) * 8)) CAST (ARG1 + ((((ARG4 + 63) / 64) + 1) * 8))
(((ARG4 + 63) / 64) + 1) INT_ZEXT (((ARG4 + 63) / 64) + 1)
(((ARG4 + 63) / 64) + 1) INT_SUB ((ARG4 + 63) / 64) 1
f() CALL func (ARG4 & 63)
((((ARG4 + 63) / 64) + 1) * 8) INT_MULT (((ARG4 + 63) / 64) + 1) 8
(((ARG4 + 63) / 64) + 1) INT_SUB ((ARG4 + 63) / 64) 1
 CBRANCH (f(ARG4) INT_LESS ARG2)
(f(ARG4) + 1) INT_ADD f(ARG4) 1
f(ARG4) INT_ZEXT f(ARG4)
(f(ARG4) * 8) INT_MULT f(ARG4) 8
(f(ARG4) + 1) COPY (f(ARG4) + 1)
 STORE 433 (ARG1 + (f(ARG4) * 8)) 0
 BRANCH VZERO
(ARG1 + (f(ARG4) * 8)) CAST (ARG1 + (f(ARG4) * 8))
((4294967232 & (ARG4 + 63)) - (ARG5 & 63)) INT_SUB (4294967232 & (ARG4 + 63)) (ARG5 & 63)
(4294967232 & (ARG4 + 63)) INT_AND (ARG4 + 63) 4294967232
(ARG5 / 64) INT_ZEXT (ARG5 / 64)
((ARG5 / 64) * 8) INT_MULT (ARG5 / 64) 8
 RETURN 1
 CALL libcall___assert_fail_thunk dstParts <= dstCount /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2445 static void llvm::APInt::tcExtract(llvm::integerPart*, unsigned int, const integerPart*, unsigned int, unsigned int)
static void llvm::APInt::tcExtract(llvm::integerPart*, unsigned int, const integerPart*, unsigned int, unsigned int) COPY static void llvm::APInt::tcExtract(llvm::integerPart*, unsigned int, const integerPart*, unsigned int, unsigned int)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
dstParts <= dstCount COPY dstParts <= dstCount
 RETURN 0
0 INT_NOTEQUAL (ARG4 & 63) 0
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
0 INT_LESS f() ARG4
ARG3 COPY ARG3
0 INT_LESS 1 ARG3
 CBRANCH (1 INT_LESS ARG3)
 CBRANCH (f() INT_LESS ARG4)
0 COPY 0
 RETURN 0 f(ARG3)
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 CALL libcall___assert_fail_thunk c <= 1 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2478 static llvm::integerPart llvm::APInt::tcAdd(llvm::integerPart*, const integerPart*, llvm::integerPart, unsigned int)
c <= 1 COPY c <= 1
f(ARG3) COPY f(ARG3)
static llvm::integerPart llvm::APInt::tcAdd(llvm::integerPart*, const integerPart*, llvm::integerPart, unsigned int) COPY static llvm::integerPart llvm::APInt::tcAdd(llvm::integerPart*, const integerPart*, llvm::integerPart, unsigned int)
f() INT_ZEXT f()
0 INT_EQUAL f(ARG3) 0
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f() INT_ZEXT f()
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
 CBRANCH (f(ARG3) INT_EQUAL 0)
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
(f() * 8) INT_MULT f() 8
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
f() INT_ZEXT f()
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
 BRANCH VZERO
0 INT_LESSEQUAL [(ARG1 + (f() * 8))] [(ARG1 + (f() * 8))]
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
(([(ARG2 + (f() * 8))] + [(ARG1 + (f() * 8))]) + 1) INT_ADD ([(ARG2 + (f() * 8))] + [(ARG1 + (f() * 8))]) 1
 STORE 433 (ARG1 + (f() * 8)) (([(ARG2 + (f() * 8))] + [(ARG1 + (f() * 8))]) + 1)
f() INT_ZEXT f()
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
f() INT_ZEXT f()
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
([(ARG2 + (f() * 8))] + [(ARG1 + (f() * 8))]) INT_ADD [(ARG2 + (f() * 8))] [(ARG1 + (f() * 8))]
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f() INT_ZEXT f()
f() INT_ZEXT f()
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
([(ARG2 + (f() * 8))] + [(ARG1 + (f() * 8))]) INT_ADD [(ARG2 + (f() * 8))] [(ARG1 + (f() * 8))]
f() INT_ZEXT f()
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
 STORE 433 (ARG1 + (f() * 8)) ([(ARG2 + (f() * 8))] + [(ARG1 + (f() * 8))])
(f() * 8) INT_MULT f() 8
(f() * 8) INT_MULT f() 8
0 INT_LESS [(ARG1 + (f() * 8))] [(ARG1 + (f() * 8))]
f() INT_ZEXT f()
f() INT_ZEXT f()
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
ARG3 COPY ARG3
0 INT_LESS 1 ARG3
0 INT_LESS f() ARG4
 CBRANCH (1 INT_LESS ARG3)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
c <= 1 COPY c <= 1
static llvm::integerPart llvm::APInt::tcSubtract(llvm::integerPart*, const integerPart*, llvm::integerPart, unsigned int) COPY static llvm::integerPart llvm::APInt::tcSubtract(llvm::integerPart*, const integerPart*, llvm::integerPart, unsigned int)
 RETURN 0 f(ARG3)
 CBRANCH (f() INT_LESS ARG4)
f(ARG3) COPY f(ARG3)
0 COPY 0
 RETURN 1
 CALL libcall___assert_fail_thunk c <= 1 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2503 static llvm::integerPart llvm::APInt::tcSubtract(llvm::integerPart*, const integerPart*, llvm::integerPart, unsigned int)
f() INT_ZEXT f()
0 INT_EQUAL f(ARG3) 0
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
 BRANCH VZERO
f() INT_ZEXT f()
(f() + 1) INT_ADD f() 1
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
 CBRANCH (f(ARG3) INT_EQUAL 0)
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
(([(ARG1 + (f() * 8))] - [(ARG2 + (f() * 8))]) + -1) INT_ADD ([(ARG1 + (f() * 8))] - [(ARG2 + (f() * 8))]) -1
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
 STORE 433 (ARG1 + (f() * 8)) (([(ARG1 + (f() * 8))] - [(ARG2 + (f() * 8))]) + -1)
0 INT_LESSEQUAL [(ARG1 + (f() * 8))] [(ARG1 + (f() * 8))]
([(ARG1 + (f() * 8))] - [(ARG2 + (f() * 8))]) INT_SUB [(ARG1 + (f() * 8))] [(ARG2 + (f() * 8))]
0 INT_LESS [(ARG1 + (f() * 8))] [(ARG1 + (f() * 8))]
f() INT_ZEXT f()
f() INT_ZEXT f()
f() INT_ZEXT f()
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
([(ARG1 + (f() * 8))] - [(ARG2 + (f() * 8))]) INT_SUB [(ARG1 + (f() * 8))] [(ARG2 + (f() * 8))]
f() INT_ZEXT f()
 STORE 433 (ARG1 + (f() * 8)) ([(ARG1 + (f() * 8))] - [(ARG2 + (f() * 8))])
f() INT_ZEXT f()
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
(f() * 8) INT_MULT f() 8
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
 BRANCH VZERO
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
0 INT_EQUAL f() ARG2
0 INT_LESS f() ARG2
 RETURN 0 0
 CBRANCH (f() INT_LESS ARG2)
0 COPY 0
0 COPY 0
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
f(ARG1) LOAD 433 (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
(f(ARG1) + 1) INT_ADD f(ARG1) 1
0 INT_NOTEQUAL f(ARG1) 0
 STORE 433 (ARG1 + (f() * 8)) (f(ARG1) + 1)
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f() INT_ZEXT f()
f(ARG1) LOAD 433 (ARG1 + (f() * 8))
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
0 INT_LESS f() ARG2
 CBRANCH (f() INT_LESS ARG2)
 RETURN 0
0 COPY 0
 STORE 433 (ARG1 + (f() * 8)) ~([(ARG1 + (f() * 8))])
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
~([(ARG1 + (f() * 8))]) INT_NEGATE [(ARG1 + (f() * 8))]
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 ARG2 ARG2
 RETURN 0
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
0 INT_LESS ARG2 ARG1
0 INT_LESS ARG1 (ARG2 + (ARG5 * 8))
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD (f() * 8) ARG1
(ARG1 + (f() * 8)) INT_ADD (f() * 8) ARG1
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
(ARG2 + (ARG5 * 8)) INT_ADD ARG2 (ARG5 * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
0 INT_NOTEQUAL ARG3 0
f() CALL func ARG3
f() CALL func ARG3
0 INT_EQUAL ARG3 0
f() CALL func ARG3
f() CALL func ARG3
ARG4 COPY ARG4
ARG5 INT_ZEXT ARG5
ARG5 COPY ARG5
(ARG5 + 1) INT_ADD ARG5 1
0 INT_LESS f() ARG5
0 INT_LESS ARG6 ARG5
ARG6 COPY ARG6
0 INT_LESS f() ARG6
0 INT_NOTEQUAL (f() + 1) ARG6
0 INT_LESS (ARG5 + 1) ARG6
0 INT_EQUAL ARG7 0
 CBRANCH (ARG2 INT_LESS ARG1)
 CBRANCH ([(ARG2 + (f() * 8))] INT_NOTEQUAL 0)
(f() + 1) INT_ADD f() 1
 RETURN 0 f()
 BRANCH VZERO
 CBRANCH (f() INT_LESS ARG5)
 RETURN 0 1
1 COPY 1
 CBRANCH ([(ARG2 + (f() * 8))] INT_EQUAL 0)
f() CALL func [(ARG2 + (f() * 8))]
(f(ARG4) + (((f() * f()) + ((f() * f()) * 2147483647)) + ((f() * f()) * 2147483647))) INT_ADD (((f() * f()) + ((f() * f()) * 2147483647)) + ((f() * f()) * 2147483647)) f(ARG4)
f() CALL func [(ARG2 + (f() * 8))]
(f() * f()) INT_MULT f() f()
f() CALL func (f() * f())
 BRANCH VZERO
(f(ARG4) + (((f() * f()) + ((f() * f()) * 2147483647)) + ((f() * f()) * 2147483647))) INT_ADD f(ARG4) (((f() * f()) + ((f() * f()) * 2147483647)) + ((f() * f()) * 2147483647))
(f() * f()) INT_MULT f() f()
f() CALL func [(ARG2 + (f() * 8))]
(f() * f()) INT_MULT f() f()
 CBRANCH (((f() * f()) + ((f() * f()) * 2147483647)) INT_LESS (f() * f()))
f() CALL func (f() * f())
(f() * f()) INT_MULT f() f()
0 COPY 0
((f() * f()) * 2147483647) INT_LEFT (f() * f()) 32
 CBRANCH f()
0 INT_LESS ((f() * f()) + ((f() * f()) * 2147483647)) (f() * f())
((f() * f()) + ((f() * f()) * 2147483647)) INT_ADD (f() * f()) ((f() * f()) * 2147483647)
f(ARG4) COPY f(ARG4)
((f() * f()) * 2147483647) INT_LEFT (f() * f()) 32
0 INT_LESS (((f() * f()) + ((f() * f()) * 2147483647)) + ((f() * f()) * 2147483647)) ((f() * f()) + ((f() * f()) * 2147483647))
((f() * f()) + ((f() * f()) * 2147483647)) INT_ADD ((f() * f()) * 2147483647) (f() * f())
(((f() * f()) + ((f() * f()) * 2147483647)) + ((f() * f()) * 2147483647)) INT_ADD ((f() * f()) + ((f() * f()) * 2147483647)) ((f() * f()) * 2147483647)
(((f() * f()) + ((f() * f()) * 2147483647)) + ((f() * f()) * 2147483647)) INT_ADD ((f() * f()) * 2147483647) ((f() * f()) + ((f() * f()) * 2147483647))
((f() * f()) + f()) INT_ADD (f() * f()) f()
(f() + f()) INT_ADD f() f()
 CBRANCH f(ARG4)
f() CALL func [(ARG2 + (f() * 8))]
0 INT_LESS (f(ARG4) + (((f() * f()) + ((f() * f()) * 2147483647)) + ((f() * f()) * 2147483647))) (((f() * f()) + ((f() * f()) * 2147483647)) + ((f() * f()) * 2147483647))
 CBRANCH (ARG1 INT_LESS (ARG2 + (ARG5 * 8)))
 RETURN 1
static int llvm::APInt::tcMultiplyPart(llvm::integerPart*, const integerPart*, llvm::integerPart, llvm::integerPart, unsigned int, unsigned int, bool) COPY static int llvm::APInt::tcMultiplyPart(llvm::integerPart*, const integerPart*, llvm::integerPart, llvm::integerPart, unsigned int, unsigned int, bool)
 CALL libcall___assert_fail_thunk dst <= src || dst >= src + srcParts /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2549 static int llvm::APInt::tcMultiplyPart(llvm::integerPart*, const integerPart*, llvm::integerPart, llvm::integerPart, unsigned int, unsigned int, bool)
 CBRANCH ((ARG5 + 1) INT_LESS ARG6)
dst <= src || dst >= src + srcParts COPY dst <= src || dst >= src + srcParts
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
(((f() * f()) + f()) + 1) INT_ADD ((f() * f()) + f()) 1
 CBRANCH ((f(ARG4) + [(ARG1 + (f() * 8))]) INT_LESS f(ARG4))
(f() + 1) INT_ADD f() 1
 CBRANCH (f(ARG4) INT_EQUAL 0)
1 COPY 1
 CBRANCH (ARG3 INT_NOTEQUAL 0)
 BRANCH VZERO
((f() + f()) + 1) INT_ADD (f() + f()) 1
 CBRANCH (ARG3 INT_EQUAL 0)
0 INT_EQUAL [(ARG2 + (f() * 8))] 0
(f() + 1) INT_ADD f() 1
0 COPY 0
0 COPY 0
0 INT_LESS f() f(ARG5 , ARG6)
static int llvm::APInt::tcMultiplyPart(llvm::integerPart*, const integerPart*, llvm::integerPart, llvm::integerPart, unsigned int, unsigned int, bool) COPY static int llvm::APInt::tcMultiplyPart(llvm::integerPart*, const integerPart*, llvm::integerPart, llvm::integerPart, unsigned int, unsigned int, bool)
dstParts <= srcParts + 1 COPY dstParts <= srcParts + 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
 RETURN 1
 CBRANCH (ARG6 INT_LESS ARG5)
 CALL libcall___assert_fail_thunk dstParts <= srcParts + 1 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2550 static int llvm::APInt::tcMultiplyPart(llvm::integerPart*, const integerPart*, llvm::integerPart, llvm::integerPart, unsigned int, unsigned int, bool)
 CBRANCH (f() INT_LESS f(ARG5 , ARG6))
 CBRANCH (f() INT_LESS ARG6)
0 INT_NOTEQUAL [(ARG2 + (f() * 8))] 0
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
 CBRANCH ((f() + 1) INT_NOTEQUAL ARG6)
 STORE 433 (ARG1 + (f() * 8)) f(ARG4)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
0 COPY 0
(f() * 8) INT_MULT f() 8
 RETURN 1
 CALL libcall___assert_fail_thunk i + 1 == dstParts /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2608 static int llvm::APInt::tcMultiplyPart(llvm::integerPart*, const integerPart*, llvm::integerPart, llvm::integerPart, unsigned int, unsigned int, bool)
 BRANCH VZERO
f() INT_ZEXT f()
i + 1 == dstParts COPY i + 1 == dstParts
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
static int llvm::APInt::tcMultiplyPart(llvm::integerPart*, const integerPart*, llvm::integerPart, llvm::integerPart, unsigned int, unsigned int, bool) COPY static int llvm::APInt::tcMultiplyPart(llvm::integerPart*, const integerPart*, llvm::integerPart, llvm::integerPart, unsigned int, unsigned int, bool)
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
f() COPY f()
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
 CBRANCH (ARG7 INT_EQUAL 0)
0 INT_EQUAL f(ARG4) 0
(f() + 1) INT_ADD f() 1
f() INT_ZEXT f()
 STORE 433 (ARG1 + (f() * 8)) f(ARG4)
 BRANCH VZERO
(f(ARG4) + [(ARG1 + (f() * 8))]) INT_ADD f(ARG4) [(ARG1 + (f() * 8))]
0 INT_LESS (f(ARG4) + [(ARG1 + (f() * 8))]) f(ARG4)
(f() * 8) INT_MULT f() 8
(f() * 8) INT_MULT f() 8
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
 STORE 433 (ARG1 + (f() * 8)) (f(ARG4) + [(ARG1 + (f() * 8))])
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f(ARG4) + [(ARG1 + (f() * 8))]) INT_ADD f(ARG4) [(ARG1 + (f() * 8))]
f() INT_ZEXT f()
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(ARG5 * 8) INT_MULT ARG5 8
 BRANCH VZERO
(ARG1 + (f() * 8)) INT_ADD (f() * 8) ARG1
 CALL func ARG1 0 ARG4
0 INT_NOTEQUAL ARG1 ARG2
0 INT_NOTEQUAL ARG1 ARG3
f() CALL func (ARG1 + (f() * 8)) ARG2 [(ARG3 + (f() * 8))] 0 ARG4 (ARG4 - f()) 1 f()
(ARG3 + (f() * 8)) INT_ADD ARG3 (f() * 8)
(ARG4 - f()) INT_SUB ARG4 f()
0 INT_LESS f() ARG4
 CBRANCH (ARG1 INT_NOTEQUAL ARG2)
 CBRANCH (f() INT_LESS ARG4)
f() INT_ZEXT f()
[(ARG3 + (f() * 8))] LOAD 433 (ARG3 + (f() * 8))
(f() * 8) INT_MULT f() 8
(ARG3 + (f() * 8)) CAST (ARG3 + (f() * 8))
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
(f() | f()) INT_OR f() f()
 CALL libcall___assert_fail_thunk dst != lhs && dst != rhs /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2640 static int llvm::APInt::tcMultiply(llvm::integerPart*, const integerPart*, const integerPart*, unsigned int)
dst != lhs && dst != rhs COPY dst != lhs && dst != rhs
static int llvm::APInt::tcMultiply(llvm::integerPart*, const integerPart*, const integerPart*, unsigned int) COPY static int llvm::APInt::tcMultiply(llvm::integerPart*, const integerPart*, const integerPart*, unsigned int)
 CBRANCH (ARG1 INT_NOTEQUAL ARG3)
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
f() COPY f()
0 COPY 0
0 COPY 0
4395075 COPY 4395075
 RETURN 0 f()
(ARG1 + (f() * 8)) INT_ADD (f() * 8) ARG1
(ARG1 + (((ARG5 + ARG4) + 1) * 8)) INT_ADD ARG1 (((ARG5 + ARG4) + 1) * 8)
0 INT_EQUAL ARG1 ARG3
f() CALL func ARG1 ARG3 ARG2 ARG5 ARG4
 CALL func ARG1 0 ARG5
0 INT_EQUAL ARG1 ARG2
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
 CALL func (ARG1 + (f() * 8)) ARG3 [(ARG2 + (f() * 8))] 0 ARG5 (ARG5 + 1) 1 f()
0 INT_LESS f() ARG4
0 INT_LESS ARG5 ARG4
(ARG5 + ARG4) INT_ADD ARG5 ARG4
(ARG5 + 1) INT_ADD ARG5 1
 CBRANCH (ARG5 INT_LESS ARG4)
 CBRANCH (f() INT_LESS ARG4)
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
(f() * 8) INT_MULT f() 8
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() INT_ZEXT f()
 CBRANCH (ARG1 INT_EQUAL ARG3)
((ARG5 + ARG4) + 1) INT_SUB (ARG5 + ARG4) 1
4395328 COPY 4395328
(((ARG5 + ARG4) + 1) * 8) INT_MULT ((ARG5 + ARG4) + 1) 8
0 INT_ZEXT 0
(ARG5 + ARG4) INT_ZEXT (ARG5 + ARG4)
[(ARG1 + (((ARG5 + ARG4) + 1) * 8))] LOAD 433 (ARG1 + (((ARG5 + ARG4) + 1) * 8))
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
((ARG5 + ARG4) + 1) INT_ZEXT ((ARG5 + ARG4) + 1)
(ARG1 + (((ARG5 + ARG4) + 1) * 8)) CAST (ARG1 + (((ARG5 + ARG4) + 1) * 8))
dst != lhs && dst != rhs COPY dst != lhs && dst != rhs
static unsigned int llvm::APInt::tcFullMultiply(llvm::integerPart*, const integerPart*, const integerPart*, unsigned int, unsigned int) COPY static unsigned int llvm::APInt::tcFullMultiply(llvm::integerPart*, const integerPart*, const integerPart*, unsigned int, unsigned int)
 RETURN 0 f(ARG4 , ARG5)
(ARG5 + ARG4) INT_SUB (ARG5 + ARG4) 0
0 COPY 0
0 INT_EQUAL [(ARG1 + (((ARG5 + ARG4) + 1) * 8))] 0
 RETURN 1
 CALL libcall___assert_fail_thunk dst != lhs && dst != rhs /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2667 static unsigned int llvm::APInt::tcFullMultiply(llvm::integerPart*, const integerPart*, const integerPart*, unsigned int, unsigned int)
 BRANCH VZERO
 CBRANCH (ARG1 INT_EQUAL ARG2)
(ARG1 + ((f(ARG3) + 1) * 8)) INT_ADD ARG1 ((f(ARG3) + 1) * 8)
(ARG1 + ((f(ARG3) + 1) * 8)) INT_ADD ARG1 ((f(ARG3) + 1) * 8)
(ARG2 + ((f(ARG3) + 1) * 8)) INT_ADD ARG2 ((f(ARG3) + 1) * 8)
(ARG2 + ((f(ARG3) + 1) * 8)) INT_ADD ARG2 ((f(ARG3) + 1) * 8)
ARG3 COPY ARG3
 CBRANCH (f(ARG3) INT_EQUAL 0)
0 INT_EQUAL f(ARG3) 0
(f(ARG3) + 1) INT_ZEXT (f(ARG3) + 1)
(ARG2 + ((f(ARG3) + 1) * 8)) CAST (ARG2 + ((f(ARG3) + 1) * 8))
[(ARG2 + ((f(ARG3) + 1) * 8))] LOAD 433 (ARG2 + ((f(ARG3) + 1) * 8))
((f(ARG3) + 1) * 8) INT_MULT (f(ARG3) + 1) 8
 RETURN 0 0
((f(ARG3) + 1) * 8) INT_MULT (f(ARG3) + 1) 8
 RETURN 0 f()
(ARG1 + ((f(ARG3) + 1) * 8)) CAST (ARG1 + ((f(ARG3) + 1) * 8))
 CBRANCH ([(ARG1 + ((f(ARG3) + 1) * 8))] INT_EQUAL [(ARG2 + ((f(ARG3) + 1) * 8))])
(f(ARG3) + 1) INT_SUB f(ARG3) 1
0 COPY 0
[(ARG1 + ((f(ARG3) + 1) * 8))] LOAD 433 (ARG1 + ((f(ARG3) + 1) * 8))
0 INT_EQUAL [(ARG1 + ((f(ARG3) + 1) * 8))] [(ARG2 + ((f(ARG3) + 1) * 8))]
(f(ARG3) + 1) INT_ZEXT (f(ARG3) + 1)
(ARG1 + ((f(ARG3) + 1) * 8)) CAST (ARG1 + ((f(ARG3) + 1) * 8))
(f(ARG3) + 1) INT_ZEXT (f(ARG3) + 1)
[(ARG2 + ((f(ARG3) + 1) * 8))] LOAD 433 (ARG2 + ((f(ARG3) + 1) * 8))
((f(ARG3) + 1) * 8) INT_MULT (f(ARG3) + 1) 8
(f(ARG3) + 1) INT_ZEXT (f(ARG3) + 1)
0 INT_LESS [(ARG2 + ((f(ARG3) + 1) * 8))] [(ARG1 + ((f(ARG3) + 1) * 8))]
[(ARG1 + ((f(ARG3) + 1) * 8))] LOAD 433 (ARG1 + ((f(ARG3) + 1) * 8))
((f(ARG3) + 1) * 8) INT_MULT (f(ARG3) + 1) 8
(ARG2 + ((f(ARG3) + 1) * 8)) CAST (ARG2 + ((f(ARG3) + 1) * 8))
 CBRANCH ([(ARG2 + ((f(ARG3) + 1) * 8))] INT_LESS [(ARG1 + ((f(ARG3) + 1) * 8))])
 BRANCH VZERO
 BRANCH VZERO
1 COPY 1
4294967295 COPY 4294967295
(ARG1 + ((((f(ARG2) + 1) - (ARG3 / 64)) + 1) * 8)) INT_ADD ARG1 ((((f(ARG2) + 1) - (ARG3 / 64)) + 1) * 8)
(ARG1 + ((f(ARG2) + 1) * 8)) INT_ADD ARG1 ((f(ARG2) + 1) * 8)
(((f(ARG2) + 1) * 8) + ARG1) INT_ADD ((f(ARG2) + 1) * 8) ARG1
(ARG1 + (((f(ARG2) + 1) - (ARG3 / 64)) * 8)) INT_ADD ARG1 (((f(ARG2) + 1) - (ARG3 / 64)) * 8)
ARG2 COPY ARG2
(ARG3 & 63) INT_AND ARG3 63
0 INT_NOTEQUAL ARG3 0
(ARG3 / 64) INT_RIGHT ARG3 6
 CBRANCH (ARG3 INT_NOTEQUAL 0)
 RETURN 0
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG2) 0
(ARG1 + ((f(ARG2) + 1) * 8)) CAST (ARG1 + ((f(ARG2) + 1) * 8))
((f(ARG2) + 1) * 8) INT_MULT (f(ARG2) + 1) 8
 STORE 433 (ARG1 + ((f(ARG2) + 1) * 8)) 0
(f(ARG2) + 1) INT_SUB f(ARG2) 1
(f(ARG2) + 1) INT_ZEXT (f(ARG2) + 1)
 BRANCH VZERO
 CBRANCH (((ARG3 / 64) + 1) INT_LESSEQUAL (f(ARG2) + 1))
((f(ARG2) + 1) - (ARG3 / 64)) INT_SUB (f(ARG2) + 1) (ARG3 / 64)
(63 & (64 - ((ARG3 & 63) / 2147483647))) INT_AND (64 - ((ARG3 & 63) / 2147483647)) 63
f(ARG1 , ARG2 , ARG3) INT_OR ([(ARG1 + (((f(ARG2) + 1) - (ARG3 / 64)) * 8))] << ((ARG3 & 63) / 2147483647)) ([(ARG1 + ((((f(ARG2) + 1) - (ARG3 / 64)) + 1) * 8))] >> (63 & (64 - ((ARG3 & 63) / 2147483647))))
(64 - ((ARG3 & 63) / 2147483647)) INT_SUB 64 ((ARG3 & 63) / 2147483647)
(((f(ARG2) + 1) - (ARG3 / 64)) + 1) INT_SUB ((f(ARG2) + 1) - (ARG3 / 64)) 1
[(ARG1 + ((((f(ARG2) + 1) - (ARG3 / 64)) + 1) * 8))] LOAD 433 (ARG1 + ((((f(ARG2) + 1) - (ARG3 / 64)) + 1) * 8))
((((f(ARG2) + 1) - (ARG3 / 64)) + 1) * 8) INT_MULT (((f(ARG2) + 1) - (ARG3 / 64)) + 1) 8
(ARG1 + ((((f(ARG2) + 1) - (ARG3 / 64)) + 1) * 8)) CAST (ARG1 + ((((f(ARG2) + 1) - (ARG3 / 64)) + 1) * 8))
(((f(ARG2) + 1) - (ARG3 / 64)) + 1) INT_ZEXT (((f(ARG2) + 1) - (ARG3 / 64)) + 1)
([(ARG1 + ((((f(ARG2) + 1) - (ARG3 / 64)) + 1) * 8))] >> (63 & (64 - ((ARG3 & 63) / 2147483647)))) INT_RIGHT [(ARG1 + ((((f(ARG2) + 1) - (ARG3 / 64)) + 1) * 8))] (63 & (64 - ((ARG3 & 63) / 2147483647)))
0 INT_LESS (ARG3 / 64) f(ARG2)
 CBRANCH ((ARG3 / 64) INT_LESS f(ARG2))
 CBRANCH ((ARG3 & 63) INT_NOTEQUAL 0)
0 INT_LESSEQUAL ((ARG3 / 64) + 1) (f(ARG2) + 1)
([(ARG1 + (((f(ARG2) + 1) - (ARG3 / 64)) * 8))] << ((ARG3 & 63) / 2147483647)) INT_LEFT [(ARG1 + (((f(ARG2) + 1) - (ARG3 / 64)) * 8))] ((ARG3 & 63) / 2147483647)
((ARG3 / 64) + 1) INT_ADD (ARG3 / 64) 1
((ARG3 & 63) / 2147483647) SUBPIECE (ARG3 & 63) 0
(f(ARG2) + 1) INT_SUB f(ARG2) 1
((f(ARG2) + 1) * 8) INT_MULT (f(ARG2) + 1) 8
(f(ARG2) + 1) INT_ZEXT (f(ARG2) + 1)
(((f(ARG2) + 1) * 8) + ARG1) CAST (((f(ARG2) + 1) * 8) + ARG1)
[(ARG1 + (((f(ARG2) + 1) - (ARG3 / 64)) * 8))] LOAD 433 (ARG1 + (((f(ARG2) + 1) - (ARG3 / 64)) * 8))
(((f(ARG2) + 1) - (ARG3 / 64)) * 8) INT_MULT ((f(ARG2) + 1) - (ARG3 / 64)) 8
(ARG1 + (((f(ARG2) + 1) - (ARG3 / 64)) * 8)) CAST (ARG1 + (((f(ARG2) + 1) - (ARG3 / 64)) * 8))
((f(ARG2) + 1) - (ARG3 / 64)) INT_ZEXT ((f(ARG2) + 1) - (ARG3 / 64))
((f(ARG2) + 1) - (ARG3 / 64)) INT_SUB (f(ARG2) + 1) (ARG3 / 64)
0 INT_NOTEQUAL (ARG3 & 63) 0
 BRANCH VZERO
 STORE 433 (((f(ARG2) + 1) * 8) + ARG1) f(ARG1 , ARG2 , ARG3)
0 INT_NOTEQUAL ARG1 ARG4
((f(ARG5) * 8) + ARG1) INT_ADD (f(ARG5) * 8) ARG1
 CALL func ARG3 ARG1 ARG5 ARG1
 CALL func ARG1 0 ARG5
(ARG1 + (f(ARG5) * 8)) INT_ADD ARG1 (f(ARG5) * 8)
0 INT_NOTEQUAL ARG1 ARG3
 CALL func ARG4 ARG2 ARG5 ARG2
f() CALL func ARG2 ARG5 ARG5
f() CALL func ARG3 ARG4 ARG5 ARG4
0 INT_NOTEQUAL ARG3 ARG4
 CALL func ARG3 ARG4 0 ARG5
 CALL func ARG4 ARG5 1 ARG5
 CALL func ARG4 ARG5 ((ARG5 * 64) - (f() + 1)) ARG5
(ARG5 * 64) INT_MULT ARG5 64
 CBRANCH (ARG1 INT_NOTEQUAL ARG3)
 CBRANCH (ARG1 INT_NOTEQUAL ARG4)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp
lhs != remainder && lhs != srhs && remainder != srhs COPY lhs != remainder && lhs != srhs && remainder != srhs
static int llvm::APInt::tcDivide(llvm::integerPart*, const integerPart*, llvm::integerPart*, llvm::integerPart*, unsigned int) COPY static int llvm::APInt::tcDivide(llvm::integerPart*, const integerPart*, llvm::integerPart*, llvm::integerPart*, unsigned int)
 CALL libcall___assert_fail_thunk lhs != remainder && lhs != srhs && remainder != srhs /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/APInt.cpp 2698 static int llvm::APInt::tcDivide(llvm::integerPart*, const integerPart*, llvm::integerPart*, llvm::integerPart*, unsigned int)
 CBRANCH (ARG3 INT_NOTEQUAL ARG4)
 RETURN 1
 CBRANCH ((f() + 1) INT_EQUAL 0)
(((ARG5 * 64) - (f() + 1)) / 2147483647) SUBPIECE ((ARG5 * 64) - (f() + 1)) 0
(((ARG5 * 64) - (f() + 1)) / 64) INT_RIGHT ((ARG5 * 64) - (f() + 1)) 6
1 COPY 1
((ARG5 * 64) - (f() + 1)) INT_SUB (ARG5 * 64) (f() + 1)
(63 & (((ARG5 * 64) - (f() + 1)) / 2147483647)) INT_AND (((ARG5 * 64) - (f() + 1)) / 2147483647) 63
0 COPY 0
0 INT_SLESS 4294967295 f()
 CBRANCH (4294967295 INT_SLESS f())
 CBRANCH (f(ARG5) INT_EQUAL 0)
 BRANCH VZERO
(1 << (63 & (((ARG5 * 64) - (f() + 1)) / 2147483647))) INT_LEFT 1 (63 & (((ARG5 * 64) - (f() + 1)) / 2147483647))
0 INT_EQUAL f(ARG5) 0
 CBRANCH ((f(ARG5) / 2) INT_EQUAL 0)
-9223372036854775808 COPY -9223372036854775808
 BRANCH VZERO
(f(ARG5) + 1) INT_SUB f(ARG5) 1
 RETURN 0 f()
0 INT_EQUAL (f() + 1) 0
(f() + 1) INT_ADD f() 1
(f(ARG5) + 1) INT_SUB f(ARG5) 1
0 INT_EQUAL (f(ARG5) / 2) 0
(f(ARG5) / 2) INT_RIGHT f(ARG5) 1
(f(ARG5) | [(ARG1 + (f(ARG5) * 8))]) INT_OR [(ARG1 + (f(ARG5) * 8))] f(ARG5)
f(ARG5) INT_ZEXT f(ARG5)
 STORE 433 ((f(ARG5) * 8) + ARG1) (f(ARG5) | [(ARG1 + (f(ARG5) * 8))])
[(ARG1 + (f(ARG5) * 8))] LOAD 433 (ARG1 + (f(ARG5) * 8))
(f(ARG5) * 8) INT_MULT f(ARG5) 8
f(ARG5) INT_ZEXT f(ARG5)
(ARG1 + (f(ARG5) * 8)) CAST (ARG1 + (f(ARG5) * 8))
(f(ARG5) * 8) INT_MULT f(ARG5) 8
((f(ARG5) * 8) + ARG1) CAST ((f(ARG5) * 8) + ARG1)
0 INT_LESS f() ARG3
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
0 COPY 0
 RETURN 0
 CBRANCH (f() INT_LESS ARG3)
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
 STORE 433 (ARG1 + (f() * 8)) ([(ARG2 + (f() * 8))] & [(ARG1 + (f() * 8))])
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
f() INT_ZEXT f()
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f() INT_ZEXT f()
([(ARG2 + (f() * 8))] & [(ARG1 + (f() * 8))]) INT_AND [(ARG2 + (f() * 8))] [(ARG1 + (f() * 8))]
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
(f() * 8) INT_MULT f() 8
0 INT_LESS f() ARG3
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
 RETURN 0
 CBRANCH (f() INT_LESS ARG3)
0 COPY 0
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
 STORE 433 (ARG1 + (f() * 8)) ([(ARG2 + (f() * 8))] | [(ARG1 + (f() * 8))])
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() INT_ZEXT f()
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f() INT_ZEXT f()
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
([(ARG2 + (f() * 8))] | [(ARG1 + (f() * 8))]) INT_OR [(ARG2 + (f() * 8))] [(ARG1 + (f() * 8))]
(f() * 8) INT_MULT f() 8
(f() * 8) INT_MULT f() 8
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
0 INT_LESS f() ARG3
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG2 + (f() * 8)) INT_ADD ARG2 (f() * 8)
 CBRANCH (f() INT_LESS ARG3)
0 COPY 0
 RETURN 0
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
f() INT_ZEXT f()
0 INT_XOR [(ARG2 + (f() * 8))] [(ARG1 + (f() * 8))]
[(ARG2 + (f() * 8))] LOAD 433 (ARG2 + (f() * 8))
(f() * 8) INT_MULT f() 8
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
[(ARG1 + (f() * 8))] LOAD 433 (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
 STORE 433 (ARG1 + (f() * 8)) 0
f() INT_ZEXT f()
(f() * 8) INT_MULT f() 8
(ARG2 + (f() * 8)) CAST (ARG2 + (f() * 8))
f() INT_ZEXT f()
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(ARG1 + (f() * 8)) INT_ADD (f() * 8) ARG1
0 INT_LESSEQUAL ARG2 f()
0 COPY 0
 CBRANCH (ARG2 INT_LESSEQUAL f())
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f(ARG1) + -1) INT_ADD f(ARG1) -1
 RETURN 0 1
 RETURN 0 0
 STORE 433 (ARG1 + (f() * 8)) (f(ARG1) + -1)
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
1 COPY 1
f() INT_ZEXT f()
f(ARG1) LOAD 433 (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
0 COPY 0
0 INT_NOTEQUAL f(ARG1) 0
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
0 INT_LESS f() ARG2
ARG3 COPY ARG3
(ARG1 + (f() * 8)) INT_ADD (f() * 8) ARG1
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
(ARG1 + (f() * 8)) INT_ADD ARG1 (f() * 8)
0 COPY 0
0 INT_LESS 64 f(ARG3)
 CBRANCH (64 INT_LESS f(ARG3))
 CBRANCH (f() INT_LESS ARG2)
0 COPY 0
f() COPY f()
0 INT_NOTEQUAL f(ARG3) 0
 CBRANCH (f(ARG3) INT_NOTEQUAL 0)
 RETURN 0
 BRANCH VZERO
(f(ARG3) + 64) INT_SUB f(ARG3) 64
(f() * 8) INT_MULT f() 8
 STORE 433 (ARG1 + (f() * 8)) -1
(f() + 1) COPY (f() + 1)
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f() + 1) INT_ADD f() 1
f() INT_ZEXT f()
(f() + 1) INT_ADD f() 1
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
 STORE 433 (ARG1 + (f() * 8)) 0
 BRANCH VZERO
(f() + 1) COPY (f() + 1)
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
(f() * 8) INT_MULT f() 8
(f() + 1) COPY (f() + 1)
(f() + 1) INT_ADD f() 1
f() INT_ZEXT f()
(-1 >> (63 & (64 - (f(ARG3) / 2147483647)))) INT_RIGHT -1 (63 & (64 - (f(ARG3) / 2147483647)))
(63 & (64 - (f(ARG3) / 2147483647))) INT_AND (64 - (f(ARG3) / 2147483647)) 63
(64 - (f(ARG3) / 2147483647)) INT_SUB 64 (f(ARG3) / 2147483647)
(f(ARG3) / 2147483647) SUBPIECE f(ARG3) 0
(ARG1 + (f() * 8)) CAST (ARG1 + (f() * 8))
 STORE 433 (ARG1 + (f() * 8)) (-1 >> (63 & (64 - (f(ARG3) / 2147483647))))
VZERO COPY VZERO
 RETURN 0
 RETURN 0
 CALL func 1 65535
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
f(ARG1) CALL func ARG1
 STORE 433 (ARG1 + 8) ARG2
 CALL func ARG2 [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
[ARG1] LOAD 433 ARG1
 CALL func ARG1 [ARG1] [ARG1]
 RETURN 0
 CALL libcall_basic_string_thunk (RSP + -56) ARG1
(RSP + -57) PTRSUB RSP -57
6965680 PTRSUB 0 6965680
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL libcall_~allocator_thunk (RSP + -57)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
f() CALL func 6965680
6965680 PTRSUB 0 6965680
(RSP + -56) PTRSUB RSP -56
 CALL func f() (RSP + -56) f()
 CALL func f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -56) CAST (RSP + -56)
40 INT_ADD 0 40
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func 6965680
(RSP + -56) PTRSUB RSP -56
[40] LOAD 433 40
(RSP + -56) PTRSUB RSP -56
 CALL libcall_~basic_string_thunk (RSP + -56)
 CALL libcall_allocator_thunk
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
0 INT_NOTEQUAL 0 [(f() + 40)]
0 INT_EQUAL f() 0
f() CALL libcall_empty_thunk
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -216) PTRSUB RSP -216
f() CALL libcall_length_thunk
f() CALL libcall_data_thunk
 CALL func (RSP + -216) (RSP + -168) 44 4294967295 0 VZERO ARG2 ARG1
1 COPY 1
(RSP + -168) PTRSUB RSP -168
(RSP + -168) PTRSUB RSP -168
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -168)
A_Stack[-0xa8]:8 COPY A_Stack[-0xa8]:8
 CBRANCH (f() INT_NOTEQUAL A_Stack[-0xa0]:8)
 BRANCH VZERO
0 INT_NOTEQUAL f() A_Stack[-0xa0]:8
 CALL func (RSP + -168)
 CALL func f() (RSP + -200) f()
(RSP + -200) PTRSUB RSP -200
6965680 PTRSUB 0 6965680
[f()] LOAD 433 f()
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -200) (RSP + -216) (RSP + -216)
[(f() + 8)] LOAD 433 (f() + 8)
 CALL libcall_~basic_string_thunk (RSP + -200)
 BRANCH VZERO
(f() + 16) PTRADD f() 2 8
f() CALL func 6965680
(RSP + -216) PTRSUB RSP -216
(f() + 8) PTRADD f() 1 8
(RSP + -200) PTRSUB RSP -200
f() COPY f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
f() COPY f()
 RETURN 1
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(RSP + -24) PTRSUB RSP -24
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 24) PTRADD ARG1 3 8
ARG1 CAST ARG1
 STORE 433 ARG1 Symbol
ARG1 CAST ARG1
ARG1 CAST ARG1
(ARG1 + 40) PTRADD ARG1 5 8
(ARG1 + 80) PTRADD ARG1 10 8
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 CAST ARG1
ARG1 CAST ARG1
(ARG1 + 72) PTRADD ARG1 9 8
ARG1 CAST ARG1
ARG1 CAST ARG1
(ARG1 + 56) PTRADD ARG1 7 8
ARG1 CAST ARG1
ARG1 CAST ARG1
ARG1 CAST ARG1
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG2 & 7) INT_AND ARG2 7
(ARG3 & 3) INT_AND ARG3 3
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 13) CAST (ARG1 + 13)
 RETURN 0
 CALL func (ARG1 + 24) 4696420
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 13) CAST (ARG1 + 13)
(([(ARG1 + 12)] & 159) | (((ARG3 & 3) * 32) / 2147483647)) INT_OR ([(ARG1 + 12)] & 159) (((ARG3 & 3) * 32) / 2147483647)
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 80) CAST (ARG1 + 80)
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
(ARG1 + 12) CAST (ARG1 + 12)
 STORE 433 (ARG1 + 80) 0
 STORE 433 (ARG1 + 8) 0
([(ARG1 + 12)] & 159) INT_AND [(ARG1 + 12)] 159
 STORE 433 (ARG1 + 12) ([(ARG1 + 12)] & 231)
 STORE 433 (ARG1 + 12) (([(ARG1 + 12)] & 159) | (((ARG3 & 3) * 32) / 2147483647))
4696420 PTRSUB 0 4696420
(ARG1 + 12) CAST (ARG1 + 12)
 CALL func (ARG1 + 40) 4696420
(((ARG3 & 3) * 32) / 2147483647) SUBPIECE ((ARG3 & 3) * 32) 0
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(ARG1 + 12) INT_ADD ARG1 12
([(ARG1 + 12)] & 65151) INT_AND [(ARG1 + 12)] 65151
(ARG1 + 12) CAST (ARG1 + 12)
[(ARG1 + 13)] LOAD 433 (ARG1 + 13)
(ARG1 + 20) CAST (ARG1 + 20)
 STORE 433 (ARG1 + 12) ([(ARG1 + 12)] & 65151)
4696420 PTRSUB 0 4696420
(ARG1 + 16) CAST (ARG1 + 16)
([(ARG1 + 12)] & 231) INT_AND [(ARG1 + 12)] 231
4696420 PTRSUB 0 4696420
 STORE 433 (ARG1 + 16) 0
(ARG1 + 13) INT_ADD ARG1 13
((ARG3 & 3) * 32) INT_LEFT (ARG3 & 3) 5
(ARG1 + 12) CAST (ARG1 + 12)
(ARG1 + 12) INT_ADD ARG1 12
([(ARG1 + 13)] & 241) INT_AND [(ARG1 + 13)] 241
 STORE 433 (ARG1 + 13) ([(ARG1 + 13)] & 241)
(ARG1 + 12) CAST (ARG1 + 12)
(ARG1 + 13) INT_ADD ARG1 13
(ARG1 + 12) INT_ADD ARG1 12
 STORE 433 (ARG1 + 72) Symbol
(ARG1 + 12) CAST (ARG1 + 12)
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 12) CAST (ARG1 + 12)
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(([(ARG1 + 12)] & 248) | (ARG2 & 7)) INT_OR ([(ARG1 + 12)] & 248) (ARG2 & 7)
(ARG1 + 12) INT_ADD ARG1 12
 CALL func (ARG1 + 56) 4696420
Symbol PTRSUB 0 Symbol
(ARG1 + 12) CAST (ARG1 + 12)
 STORE 433 (ARG1 + 20) 0
([(ARG1 + 12)] & 248) INT_AND [(ARG1 + 12)] 248
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
 STORE 433 (ARG1 + 12) (([(ARG1 + 12)] & 248) | (ARG2 & 7))
(ARG1 + 24) PTRADD ARG1 3 8
[ARG1] LOAD 433 ARG1
([ARG1] & -256) INT_AND [ARG1] -256
([ARG1] & -256) INT_OR ([ARG1] & -256) 0
 RETURN 0 ([ARG1] & -256)
0 INT_EQUAL [ARG1] (ARG1 + 24)
0 INT_ZEXT 0
[ARG1] CAST [ARG1]
[ARG1] CAST [ARG1]
 RETURN 0
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func [ARG1] [(ARG1 + 8)] [(ARG1 + 8)]
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 CALL libcall_free_thunk [ARG1]
 CALL func ARG1
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
([ARG1] & -256) INT_AND [ARG1] -256
0 INT_ZEXT 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([ARG1] & -256) INT_OR ([ARG1] & -256) 0
 RETURN 0 ([ARG1] & -256)
0 INT_EQUAL [(ARG1 + 8)] [ARG1]
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL libcall_free_thunk [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
f() CALL func ARG1
 CALL func ARG2 ARG1 (f() + 17) ARG1
(f() + 17) INT_ADD f() 17
 RETURN 0
(ARG1 + 12) INT_ADD ARG1 12
([(ARG1 + 12)] & 4294967040) INT_OR ([(ARG1 + 12)] & 4294967040) 0
([(ARG1 + 12)] & 4294967040) INT_AND [(ARG1 + 12)] 4294967040
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(ARG1 + 12) CAST (ARG1 + 12)
([(ARG1 + 12)] & 4294967040) COPY ([(ARG1 + 12)] & 4294967040)
0 INT_EQUAL [(ARG1 + 12)] 0
0 INT_ZEXT 0
 RETURN 0 ([(ARG1 + 12)] & 4294967040)
 RETURN 0 -1
-1 COPY -1
f() CALL func ARG1
(ARG1 + 24) PTRADD ARG1 3 8
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 RETURN 0
 CALL libcall_free_thunk [ARG1]
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 CBRANCH f()
 CALL func [([ARG1] + (f() * 8))] (ARG1 + 24) (ARG1 + 24)
 CBRANCH (f() INT_NOTEQUAL [(ARG1 + 8)])
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
([ARG1] + (f() * 8)) CAST ([ARG1] + (f() * 8))
[ARG1] CAST [ARG1]
0 INT_NOTEQUAL f() [(ARG1 + 8)]
(f() * 8) INT_MULT f() 8
([ARG1] + (f() * 8)) INT_ADD [ARG1] (f() * 8)
f() INT_ZEXT f()
0 INT_EQUAL [([ARG1] + (f() * 8))] 0
 CBRANCH ([([ARG1] + (f() * 8))] INT_EQUAL 0)
[([ARG1] + (f() * 8))] LOAD 433 ([ARG1] + (f() * 8))
 CBRANCH (f() INT_EQUAL [([ARG1] + (f() * 8))])
 BRANCH VZERO
0 COPY 0
1 COPY 1
f() CALL func
0 INT_EQUAL f() [([ARG1] + (f() * 8))]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
0 COPY 0
(ARG1 + 216) PTRADD ARG1 216 1
 CALL libcall_~basic_string_thunk ARG1
(ARG1 + 120) PTRADD ARG1 120 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 40) PTRADD ARG1 40 1
(ARG1 + 176) PTRADD ARG1 176 1
 CALL func (ARG1 + 216)
 CALL func (ARG1 + 176)
 CALL func (ARG1 + 120)
 CALL func (ARG1 + 64)
 CALL func (ARG1 + 40)
 RETURN 0
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
0 INT_NOTEQUAL ARG1 0
 RETURN 0
 CBRANCH (ARG1 INT_NOTEQUAL 0)
(ARG1 + 24) INT_ADD ARG1 24
 CALL func ARG1 (ARG1 + 24) ARG2 (ARG1 + 24)
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 (ARG2 * 8) (ARG2 * 8)
ARG2 INT_ZEXT ARG2
 RETURN 0
(ARG2 * 8) INT_MULT ARG2 8
 CALL func ARG1 4
 RETURN 0
 CALL func ARG1
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0
 STORE 433 (ARG1 + 8) 0
 STORE 433 (ARG1 + 16) 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 0
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
ARG1 CAST ARG1
 STORE 433 (ARG1 + 20) ARG2
 STORE 433 (ARG1 + 12) 0
(ARG1 + 12) CAST (ARG1 + 12)
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 20) CAST (ARG1 + 20)
 RETURN 0
 STORE 433 (ARG1 + 16) 0
 STORE 433 (ARG1 + 8) 0
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 16) CAST (ARG1 + 16)
 CALL func ARG1 16 16
 RETURN 0
(ARG1 + 4294967295) INT_ADD ARG1 4294967295
(32 - f()) COPY (32 - f())
f() CALL func (ARG1 + 4294967295) 2
 RETURN 0 (32 - f())
(32 - f()) INT_SUB 32 f()
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 24) INT_ADD ARG1 24
f() CALL func ARG1
(ARG1 + 8) INT_ADD ARG1 8
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(ARG1 + 24) CAST (ARG1 + 24)
(ARG1 + 20) CAST (ARG1 + 20)
 CBRANCH ([(ARG1 + 20)] INT_LESS 17)
 STORE 433 (ARG1 + 24) 0
 STORE 433 (ARG1 + 16) f()
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) f()
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
0 COPY 0
!isSmall() && "Can't shrink a small set!" COPY !isSmall() && "Can't shrink a small set!"
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
f() CALL libcall_malloc_thunk ([(ARG1 + 16)] * 8)
 CALL libcall_free_thunk [(ARG1 + 8)]
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
 STORE 433 (ARG1 + 20) [(ARG1 + 24)]
0 INT_EQUAL [(ARG1 + 8)] 0
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
([(ARG1 + 16)] * 8) INT_LEFT [(ARG1 + 16)] 3
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 20) CAST (ARG1 + 20)
 CALL libcall___assert_fail_thunk !isSmall() && "Can't shrink a small set!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp 24 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_LESS [(ARG1 + 20)] 17
 RETURN 1
(ARG1 + 24) CAST (ARG1 + 24)
(f() + 1) INT_ADD f() 1
(ARG1 + 20) CAST (ARG1 + 20)
(1 << (31 & (f() + 1))) INT_LEFT 1 (31 & (f() + 1))
 BRANCH VZERO
32 COPY 32
f() CALL func [(ARG1 + 20)]
(31 & (f() + 1)) INT_AND (f() + 1) 31
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
 CALL libcall___assert_fail_thunk CurArray && "Failed to allocate memory?" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp 33 0
 CALL libcall_memset_thunk [(ARG1 + 8)] 4294967295 ([(ARG1 + 16)] * 8)
0 COPY 0
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
([(ARG1 + 16)] * 8) INT_MULT [(ARG1 + 16)] 8
CurArray && "Failed to allocate memory?" COPY CurArray && "Failed to allocate memory?"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 1
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 24) INT_ADD ARG1 24
f() CALL func ARG1
0 INT_EQUAL f() 1
 RETURN 0
 CBRANCH f()
 CBRANCH (f() INT_EQUAL 1)
(ARG1 + 24) CAST (ARG1 + 24)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (ARG1 + 24) 0
 CALL libcall_memset_thunk [(ARG1 + 8)] 4294967295 ([(ARG1 + 16)] * 8)
 BRANCH VZERO
([(ARG1 + 16)] * 8) INT_MULT [(ARG1 + 16)] 8
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
(ARG1 + 20) CAST (ARG1 + 20)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 STORE 433 (ARG1 + 20) 0
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_LESS 33)
 BRANCH VZERO
1 COPY 1
0 COPY 0
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
(ARG1 + 16) CAST (ARG1 + 16)
([(ARG1 + 20)] * 4) INT_MULT [(ARG1 + 20)] 4
([(ARG1 + 20)] * 4) CAST ([(ARG1 + 20)] * 4)
(ARG1 + 20) CAST (ARG1 + 20)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_LESSEQUAL ([(ARG1 + 20)] * 4))
0 INT_LESSEQUAL [(ARG1 + 16)] ([(ARG1 + 20)] * 4)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_LESS [(ARG1 + 16)] 33
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1
 STORE 433 ARG1 ARG2
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 (ARG1 + 8) ARG2
(ARG3 & (ARG3 + 1)) INT_AND (ARG3 + 1) ARG3
(ARG3 + 1) INT_SUB ARG3 1
 STORE 433 (ARG1 + 16) ARG3
0 INT_NOTEQUAL ARG3 0
 CBRANCH (ARG3 INT_NOTEQUAL 0)
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ((ARG3 & (ARG3 + 1)) INT_EQUAL 0)
 CALL libcall___assert_fail_thunk SmallSize && (SmallSize & (SmallSize-1)) == 0 && "Initial size must be a power of two!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h 72 llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(const void**, unsigned int)
SmallSize && (SmallSize & (SmallSize-1)) == 0 && "Initial size must be a power of two!" COPY SmallSize && (SmallSize & (SmallSize-1)) == 0 && "Initial size must be a power of two!"
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
 RETURN 0
llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(const void**, unsigned int) COPY llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(const void**, unsigned int)
0 INT_EQUAL (ARG3 & (ARG3 + 1)) 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 (ARG1 + 32) 16 (ARG1 + 32)
(ARG1 + 32) INT_ADD ARG1 32
 RETURN 0
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 216) INT_ADD ARG1 216
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 120) INT_ADD ARG1 120
(ARG1 + 176) INT_ADD ARG1 176
(ARG1 + 208) INT_ADD ARG1 208
 CALL func (ARG1 + 216)
 STORE 433 (ARG1 + 32) 0
 CALL libcall_basic_string_thunk
(ARG1 + 208) CAST (ARG1 + 208)
 STORE 433 (ARG1 + 208) 0
 RETURN 0
 CALL func (ARG1 + 176)
 CALL func (ARG1 + 40)
 CALL func (ARG1 + 120)
 CALL func (ARG1 + 64)
(ARG1 + 32) CAST (ARG1 + 32)
 RETURN 0 f()
 CALL func f()
f() CALL libcall_operator.new_thunk 376
f() COPY f()
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 CALL func ARG1 4482121 4482075
0 INT_EQUAL [ARG1] 0
[ARG1] COPY [ARG1]
 CBRANCH ([ARG1] INT_EQUAL 0)
 RETURN 0 [ARG1]
f() CALL func
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
4482121 PTRSUB 0 4482121
4482075 PTRSUB 0 4482075
 CALL func
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 [f(ARG2)]
(ARG1 + 16) PTRADD ARG1 2 8
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
 STORE 433 (ARG1 + 8) [(f(ARG2) + 8)]
 STORE 433 (ARG1 + 16) [f(ARG3)]
 RETURN 0
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG2) CAST f(ARG2)
f(ARG3) CAST f(ARG3)
[f(ARG3)] LOAD 433 f(ARG3)
[(f(ARG2) + 8)] LOAD 433 (f(ARG2) + 8)
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
 CALL func ARG1 f(ARG2) f(ARG3) f(ARG2)
ARG1 COPY ARG1
 RETURN 0 ARG1
0 INT_EQUAL ARG3 0
ARG3 COPY ARG3
ARG4 COPY ARG4
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 48) INT_ADD ARG1 48
f() CALL func f() ARG2 f()
4705610 PTRSUB 0 4705610
option:  COPY option: 
 CALL func f() 4705610
1 COPY 1
0 INT_EQUAL f(ARG1 , ARG4) 0
 RETURN 0 1
 CBRANCH (f(ARG1 , ARG4) INT_EQUAL 0)
f() CALL func
f() CALL func f() option: 
 CBRANCH (ARG3 INT_EQUAL 0)
(ARG1 + 48) CAST (ARG1 + 48)
 BRANCH VZERO
 CALL func f() [(ARG1 + 40)] [(ARG1 + 48)] f()
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
f() CALL func f() f()
6966272 PTRSUB 0 6966272
f() CALL func 6966272
(ARG1 + 40) CAST (ARG1 + 40)
f() CALL func
: for the - COPY : for the -
 CALL func f() f(ARG1 , ARG3) f(ARG1 , ARG4) f()
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
f() CALL func
f() CALL func f() : for the -
(ARG1 + 32) CAST (ARG1 + 32)
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
(ARG1 + 32) INT_ADD ARG1 32
0 INT_EQUAL [(ARG1 + 32)] 0
 RETURN 0 0
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
0 INT_XOR (4294967040 & ([(ARG1 + 32)] / 2147483647)) 1
(4294967040 & ([(ARG1 + 32)] / 2147483647)) INT_OR (4294967040 & ([(ARG1 + 32)] / 2147483647)) 0
0 INT_ZEXT 0
([(ARG1 + 32)] / 2147483647) SUBPIECE [(ARG1 + 32)] 0
(4294967040 & ([(ARG1 + 32)] / 2147483647)) INT_AND ([(ARG1 + 32)] / 2147483647) 4294967040
0 COPY 0
(ARG1 + 32) CAST (ARG1 + 32)
(ARG1 + 13) INT_ADD ARG1 13
(7 & ([(ARG1 + 13)] / 2)) INT_AND ([(ARG1 + 13)] / 2) 7
(7 & ([(ARG1 + 13)] / 2)) COPY (7 & ([(ARG1 + 13)] / 2))
 RETURN 0 (7 & ([(ARG1 + 13)] / 2))
(ARG1 + 13) CAST (ARG1 + 13)
[(ARG1 + 13)] LOAD 433 (ARG1 + 13)
([(ARG1 + 13)] / 2) INT_RIGHT [(ARG1 + 13)] 1
(ARG1 + 8) INT_ADD ARG1 8
 STORE 433 (ARG1 + 8) ARG2
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
(ARG1 + 24) INT_ADD ARG1 24
 CALL func ARG1 (ARG1 + 24) ARG2 ARG3
 RETURN 0
 CALL func ARG1 (ARG2 * 8) 8 (ARG2 * 8)
(ARG2 * 8) INT_MULT ARG2 8
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1 ([(ARG1 + 8)] + 8) ([(ARG1 + 8)] + 8)
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1 0
(ARG1 + 8) INT_ADD ARG1 8
[ARG2] LOAD 433 ARG2
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH ([(ARG1 + 16)] INT_LESSEQUAL [(ARG1 + 8)])
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
([(ARG1 + 8)] + 8) INT_ADD [(ARG1 + 8)] 8
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 [(ARG1 + 8)] [ARG2]
0 INT_LESSEQUAL [(ARG1 + 16)] [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 16) INT_ADD ARG1 16
 RETURN 0 (ARG1 + 16)
 CALL libcall_malloc_thunk ARG2
 RETURN 0
 RETURN 0 8
8 COPY 8
 STORE 433 ARG1 ARG2
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1 ARG2 ARG2
f(ARG3) CALL func ARG3
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) [f(ARG3)]
f(ARG3) CAST f(ARG3)
 RETURN 0
[f(ARG3)] LOAD 433 f(ARG3)
f(ARG4) CALL func ARG4
ARG2 INT_ZEXT ARG2
ARG2 INT_ZEXT ARG2
(ARG2 + 17) INT_ADD ARG2 17
0 INT_NOTEQUAL ARG2 0
 CALL func f() ARG2 f(ARG4) ARG2
 CALL libcall_memcpy_thunk f() ARG1 ARG2
f() CALL func ARG3 (ARG2 + 17) f() (ARG2 + 17)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CAST f()
0 INT_NOTEQUAL f() 0
 RETURN 0 f()
f() CALL func 16 f()
(ARG2 + f()) INT_ADD f() ARG2
f() CALL func
f() COPY f()
 CBRANCH (ARG2 INT_NOTEQUAL 0)
f() CALL func f()
(ARG2 + f()) CAST (ARG2 + f())
f() CAST f()
 STORE 433 (ARG2 + f()) 0
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 [f(ARG2)]
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
[f(ARG3)] LOAD 433 f(ARG3)
 STORE 433 (ARG1 + 8) [f(ARG3)]
f(ARG3) CAST f(ARG3)
[f(ARG2)] LOAD 433 f(ARG2)
 RETURN 0
f(ARG2) CAST f(ARG2)
(ARG1 + 8) CAST (ARG1 + 8)
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
 CALL func (RSP + -56) f(ARG1) f(ARG2) f(ARG1)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[40] LOAD 433 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
(RSP + -56) PTRSUB RSP -56
40 INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
0 INT_EQUAL f() ARG2
0 INT_EQUAL f() ARG2
ARG2 COPY ARG2
ARG2 COPY ARG2
ARG1 CAST ARG1
f(ARG1) LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) LOAD 433 ARG1
 STORE 433 ARG1 f()
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 CAST ARG1
(ARG1 + 8) PTRADD ARG1 1 8
([(ARG1 + 8)] * 3) CAST ([(ARG1 + 8)] * 3)
([(ARG1 + 12)] * 4) CAST ([(ARG1 + 12)] * 4)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 12) CAST (ARG1 + 12)
 CBRANCH (([(ARG1 + 8)] * 3) INT_LESS ([(ARG1 + 12)] * 4))
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
([(ARG1 + 12)] * 4) INT_MULT [(ARG1 + 12)] 4
[(ARG1 + 8)] INT_ZEXT [(ARG1 + 8)]
([(ARG1 + 8)] + 1) INT_ADD [(ARG1 + 8)] 1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(([(ARG1 + 8)] + 1) * 8) INT_MULT ([(ARG1 + 8)] + 1) 8
([(ARG1 + 8)] * 3) INT_MULT [(ARG1 + 8)] 3
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_LESS ([(ARG1 + 8)] * 3) ([(ARG1 + 12)] * 4)
 CBRANCH (f() INT_NOTEQUAL [(ARG1 + 8)])
 CBRANCH f()
f(ARG1 , ARG2) COPY f(ARG1 , ARG2)
0 INT_NOTEQUAL f() [(ARG1 + 8)]
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
(f(ARG1) + (f() * 8)) INT_ADD f(ARG1) (f() * 8)
(f() * 8) INT_MULT f() 8
f() INT_ZEXT f()
0 INT_EQUAL [([ARG1] + (f() * 8))] 0
f(ARG1) CAST f(ARG1)
(f(ARG1) + (f() * 8)) CAST (f(ARG1) + (f() * 8))
[([ARG1] + (f() * 8))] LOAD 433 (f(ARG1) + (f() * 8))
 CBRANCH ([([ARG1] + (f() * 8))] INT_EQUAL 0)
 CBRANCH ([((([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1)) * 8) + f())] INT_EQUAL 0)
f() CAST f()
((((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) + f()) CAST ((((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) + f())
(f(ARG1) + -1) INT_SUB f(ARG1) -1
 STORE 433 ((((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) + f()) [([ARG1] + (f() * 8))]
f() CAST f()
((([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) * 8) + f()) CAST ((([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) * 8) + f())
((f(ARG1) + f()) & (f(ARG1) + -1)) INT_ZEXT ((f(ARG1) + f()) & (f(ARG1) + -1))
(((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) INT_MULT ((f(ARG1) + f()) & (f(ARG1) + -1)) 8
(f(ARG1) + f()) INT_ADD f(ARG1) f()
((((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) + f()) INT_ADD (((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) f()
 STORE 433 f(ARG1) [([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))]
(f(ARG1) + 1) INT_SUB f(ARG1) 1
f(ARG1) INT_ADD (([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) * 4) (((f(ARG1) + 1) * 8) + f())
([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) INT_ZEXT ([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1))
(([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) * 4) INT_MULT ([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) 4
f(ARG1) CAST f(ARG1)
(((f(ARG1) + f()) & (f(ARG1) + -1)) * 4) INT_MULT ((f(ARG1) + f()) & (f(ARG1) + -1)) 4
(((f(ARG1) + 1) * 8) + f()) CAST (((f(ARG1) + 1) * 8) + f())
((((f(ARG1) + f()) & (f(ARG1) + -1)) * 4) + (((f(ARG1) + 1) * 8) + f())) INT_ADD (((f(ARG1) + f()) & (f(ARG1) + -1)) * 4) (((f(ARG1) + 1) * 8) + f())
 STORE 433 ((([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) * 8) + f()) [([ARG1] + (f() * 8))]
((([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) * 8) + f()) INT_ADD (([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) * 8) f()
((f(ARG1) + f()) & (f(ARG1) + -1)) INT_AND (f(ARG1) + -1) (f(ARG1) + f())
((((f(ARG1) + f()) & (f(ARG1) + -1)) * 4) + (((f(ARG1) + 1) * 8) + f())) CAST ((((f(ARG1) + f()) & (f(ARG1) + -1)) * 4) + (((f(ARG1) + 1) * 8) + f()))
(([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) * 8) INT_MULT ([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) 8
(((f(ARG1) + 1) * 8) + f()) CAST (((f(ARG1) + 1) * 8) + f())
 CBRANCH (f() INT_EQUAL ARG2)
(f() + 1) COPY (f() + 1)
([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) INT_AND (f(ARG1) + 1) [([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))]
((f(ARG1) + f()) & (f(ARG1) + -1)) INT_ZEXT ((f(ARG1) + f()) & (f(ARG1) + -1))
([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) INT_ZEXT ([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1))
0 INT_NOTEQUAL [((((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) + f())] 0
 CBRANCH (f() INT_EQUAL ARG2)
(f(ARG1) + 1) INT_SUB f(ARG1) 1
((((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) + f()) INT_ADD f() (((f(ARG1) + f()) & (f(ARG1) + -1)) * 8)
1 COPY 1
[((((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) + f())] LOAD 433 ((((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) + f())
(((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) INT_MULT ((f(ARG1) + f()) & (f(ARG1) + -1)) 8
 STORE 433 ((((f(ARG1) + f()) & (f(ARG1) + -1)) * 4) + (((f(ARG1) + 1) * 8) + f())) [([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))]
((f(ARG1) + f()) & (f(ARG1) + -1)) INT_ZEXT ((f(ARG1) + f()) & (f(ARG1) + -1))
f() CAST f()
((((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) + f()) CAST ((((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) + f())
([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + 1)) INT_AND (f(ARG1) + 1) [([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))]
1 COPY 1
(f() + 1) INT_ADD f() 1
f(ARG1 , ARG2) COPY f(ARG1 , ARG2)
f(ARG1 , ARG2) COPY f(ARG1 , ARG2)
 CBRANCH ([((((f(ARG1) + f()) & (f(ARG1) + -1)) * 8) + f())] INT_NOTEQUAL 0)
f(ARG1 , ARG2) COPY f(ARG1 , ARG2)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() CALL libcall_calloc_thunk (f(ARG1) + 1) 12
 BRANCH VZERO
 CALL libcall_free_thunk f(ARG1)
0 COPY 0
(ARG1 + 16) CAST (ARG1 + 16)
([(ARG1 + 8)] / 8) INT_RIGHT [(ARG1 + 8)] 3
(f(ARG1) + 1) INT_ADD f(ARG1) 1
f(ARG1) INT_ZEXT f(ARG1)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 12) INT_ADD ARG1 12
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
f() CAST f()
(((f(ARG1) + 1) * 8) + f()) CAST (((f(ARG1) + 1) * 8) + f())
 STORE 433 (ARG1 + 8) f(ARG1)
 CBRANCH (([(ARG1 + 8)] / 8) INT_LESS ([(ARG1 + 8)] - ([(ARG1 + 16)] + [(ARG1 + 12)])))
(f(ARG1) + 1) INT_ADD f(ARG1) 1
0 INT_LESS ([(ARG1 + 8)] / 8) ([(ARG1 + 8)] - ([(ARG1 + 16)] + [(ARG1 + 12)]))
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
 RETURN 0 ARG2
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] - ([(ARG1 + 16)] + [(ARG1 + 12)])) CAST ([(ARG1 + 8)] - ([(ARG1 + 16)] + [(ARG1 + 12)]))
 RETURN 0 f(ARG1 , ARG2)
(((f(ARG1) + 1) * 8) + f()) INT_ADD f() ((f(ARG1) + 1) * 8)
(ARG1 + 8) CAST (ARG1 + 8)
(f(ARG1) + 1) INT_ZEXT (f(ARG1) + 1)
([(ARG1 + 16)] + [(ARG1 + 12)]) INT_ADD [(ARG1 + 16)] [(ARG1 + 12)]
(ARG1 + 16) CAST (ARG1 + 16)
f() CAST f()
((f(ARG1) * 8) + f()) CAST ((f(ARG1) * 8) + f())
((f(ARG1) + 1) * 8) INT_MULT (f(ARG1) + 1) 8
(ARG1 + 12) CAST (ARG1 + 12)
 STORE 433 (ARG1 + 16) 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f(ARG1) * 8) INT_MULT f(ARG1) 8
 STORE 433 ((f(ARG1) * 8) + f()) 2
(ARG1 + 8) CAST (ARG1 + 8)
((f(ARG1) * 8) + f()) INT_ADD f() (f(ARG1) * 8)
([(ARG1 + 8)] * 2) INT_MULT [(ARG1 + 8)] 2
f(ARG1) INT_ZEXT f(ARG1)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] - ([(ARG1 + 16)] + [(ARG1 + 12)])) INT_SUB [(ARG1 + 8)] ([(ARG1 + 16)] + [(ARG1 + 12)])
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (f() INT_EQUAL [([ARG1] + (f() * 8))])
0 COPY 0
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_EQUAL f() [([ARG1] + (f() * 8))]
f() CALL func
([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1)) INT_AND (f(ARG1) + -1) [([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))]
[([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] LOAD 433 ([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))
(([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1)) * 8) INT_MULT ([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1)) 8
([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1)) INT_ZEXT ([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1))
[((([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1)) * 8) + f())] LOAD 433 ((([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1)) * 8) + f())
((([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1)) * 8) + f()) CAST ((([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1)) * 8) + f())
([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8))) CAST ([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))
([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8))) INT_ADD [ARG1] ((f() * 4) + (([(ARG1 + 8)] + 1) * 8))
(f(ARG1) + -1) INT_SUB f(ARG1) -1
[ARG1] CAST [ARG1]
0 INT_EQUAL [((([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1)) * 8) + f())] 0
f() CAST f()
 BRANCH VZERO
((([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1)) * 8) + f()) INT_ADD f() (([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1)) * 8)
([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1)) COPY ([([ARG1] + ((f() * 4) + (([(ARG1 + 8)] + 1) * 8)))] & (f(ARG1) + -1))
((f(ARG1) + f()) & (f(ARG1) + -1)) COPY ((f(ARG1) + f()) & (f(ARG1) + -1))
((f() * 4) + (([(ARG1 + 8)] + 1) * 8)) INT_ADD (f() * 4) (([(ARG1 + 8)] + 1) * 8)
f() INT_ZEXT f()
(f() * 4) INT_MULT f() 4
 BRANCH VZERO
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 CAST ARG1
f() LOAD 433 ARG1
 STORE 433 ARG1 f()
(ARG1 + 8) PTRADD ARG1 1 8
(ARG2 & (ARG2 + -1)) INT_AND (ARG2 + -1) ARG2
0 INT_EQUAL ARG2 0
(ARG2 + -1) INT_SUB ARG2 -1
0 INT_EQUAL (ARG2 & (ARG2 + -1)) 0
 CBRANCH ((ARG2 & (ARG2 + -1)) INT_EQUAL 0)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (([(ARG1 + 8)] * 8) + f()) 2
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + 1) INT_ZEXT ([(ARG1 + 8)] + 1)
([(ARG1 + 8)] * 8) INT_MULT [(ARG1 + 8)] 8
 CBRANCH (ARG2 INT_EQUAL 0)
(InitSize & (InitSize-1)) == 0 && "Init Size must be a power of 2 or zero!" COPY (InitSize & (InitSize-1)) == 0 && "Init Size must be a power of 2 or zero!"
(ARG1 + 12) INT_ADD ARG1 12
void llvm::StringMapImpl::init(unsigned int) COPY void llvm::StringMapImpl::init(unsigned int)
f() CALL libcall_calloc_thunk ([(ARG1 + 8)] + 1) 12
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/StringMap.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/StringMap.cpp
 STORE 433 (ARG1 + 16) 0
(ARG1 + 8) CAST (ARG1 + 8)
f() CAST f()
(([(ARG1 + 8)] * 8) + f()) CAST (([(ARG1 + 8)] * 8) + f())
[(ARG1 + 8)] INT_ZEXT [(ARG1 + 8)]
 CALL libcall___assert_fail_thunk (InitSize & (InitSize-1)) == 0 && "Init Size must be a power of 2 or zero!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/StringMap.cpp 38 void llvm::StringMapImpl::init(unsigned int)
 RETURN 1
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 16) CAST (ARG1 + 16)
([(ARG1 + 8)] + 1) INT_ADD [(ARG1 + 8)] 1
 STORE 433 (ARG1 + 12) 0
(ARG1 + 12) CAST (ARG1 + 12)
 STORE 433 (ARG1 + 8) f(ARG2)
(([(ARG1 + 8)] * 8) + f()) INT_ADD ([(ARG1 + 8)] * 8) f()
16 COPY 16
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG2 COPY ARG2
ARG3 COPY ARG3
 RETURN 0 f(ARG3)
 CBRANCH (f() INT_NOTEQUAL f(ARG2))
f(ARG3) COPY f(ARG3)
0 COPY 0
0 INT_NOTEQUAL f() f(ARG2)
f() CALL func (RSP + -56) f() f()
 BRANCH VZERO
(f(ARG3) * 33) INT_MULT f(ARG3) 33
(f() + 1) INT_ADD f() 1
f() INT_ZEXT f()
((f(ARG3) * 33) + f()) INT_ADD f() (f(ARG3) * 33)
(RSP + -56) PTRSUB RSP -56
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 CAST ARG1
[ARG1] LOAD 433 ARG1
 CALL func ARG1 16
f() CALL func ARG2 ARG3 0 ARG2
f() CALL libcall_memcmp_thunk ARG2 ([([ARG1] + (f(ARG1) * 8))] + [(ARG1 + 20)]) f()
0 INT_EQUAL ARG3 f()
(f() & (f(ARG1) + -1)) INT_AND (f(ARG1) + -1) f()
[(ARG1 + 8)] INT_ZEXT [(ARG1 + 8)]
f(ARG1) INT_ZEXT f(ARG1)
(f(ARG1) * 8) INT_MULT f(ARG1) 8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
4294967295 COPY 4294967295
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_NOTEQUAL [([ARG1] + (f(ARG1) * 8))] 0
([(ARG1 + 8)] + 1) INT_ADD [(ARG1 + 8)] 1
(f(ARG1) + -1) INT_SUB f(ARG1) -1
((([(ARG1 + 8)] + 1) * 8) + [ARG1]) INT_ADD (([(ARG1 + 8)] + 1) * 8) [ARG1]
1 COPY 1
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([ARG1] + (f(ARG1) * 8)) CAST ([ARG1] + (f(ARG1) * 8))
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_EQUAL [(ARG1 + 8)] 0
(ARG1 + 8) CAST (ARG1 + 8)
([ARG1] + (f(ARG1) * 8)) INT_ADD [ARG1] (f(ARG1) * 8)
 CBRANCH ([([ARG1] + (f(ARG1) * 8))] INT_NOTEQUAL 0)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[([ARG1] + (f(ARG1) * 8))] LOAD 433 ([ARG1] + (f(ARG1) * 8))
(([(ARG1 + 8)] + 1) * 8) INT_MULT ([(ARG1 + 8)] + 1) 8
 CBRANCH ([(((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4))] INT_EQUAL f())
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
0 INT_EQUAL ([([ARG1] + (f(ARG1) * 8))] + [(ARG1 + 20)]) 0
(f() + 1) INT_ADD f() 1
[(ARG1 + 20)] INT_ZEXT [(ARG1 + 20)]
([([ARG1] + (f(ARG1) * 8))] + [(ARG1 + 20)]) CAST ([([ARG1] + (f(ARG1) * 8))] + [(ARG1 + 20)])
f() INT_ZEXT f()
 BRANCH VZERO
(f(ARG1) + f()) INT_ADD f(ARG1) f()
f() CALL func [([ARG1] + (f(ARG1) * 8))]
(ARG1 + 20) INT_ADD ARG1 20
(f(ARG1) + 1) INT_SUB f(ARG1) 1
((f(ARG1) + f()) & (f(ARG1) + 1)) INT_AND (f(ARG1) + 1) (f(ARG1) + f())
([([ARG1] + (f(ARG1) * 8))] + [(ARG1 + 20)]) INT_ADD [([ARG1] + (f(ARG1) * 8))] [(ARG1 + 20)]
 CBRANCH (([([ARG1] + (f(ARG1) * 8))] + [(ARG1 + 20)]) INT_EQUAL 0)
(ARG1 + 20) CAST (ARG1 + 20)
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f(ARG1) 4294967295
0 INT_EQUAL [(FS_OFFSET + 40)] [(f() + 40)]
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL [([ARG1] + (f(ARG1) * 8))])
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_EQUAL [(f() + 40)])
 CBRANCH (f(ARG1) INT_EQUAL 4294967295)
0 INT_EQUAL f() [([ARG1] + (f(ARG1) * 8))]
f() CALL func
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4))] LOAD 433 (((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4))
(f(ARG1) * 4) INT_MULT f(ARG1) 4
f(ARG1) INT_ZEXT f(ARG1)
0 INT_EQUAL [(((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4))] f()
 CBRANCH (f(ARG1) INT_EQUAL 4294967295)
0 INT_EQUAL f(ARG1) 4294967295
(((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4)) INT_ADD ((([(ARG1 + 8)] + 1) * 8) + [ARG1]) (f(ARG1) * 4)
(((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4)) CAST (((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4))
 RETURN 0 f(ARG1)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
f(ARG1) COPY f(ARG1)
0 INT_NOTEQUAL f() 0
 CBRANCH f()
 CBRANCH (ARG3 INT_EQUAL f())
 CBRANCH (f() INT_NOTEQUAL 0)
 STORE 433 ((f(ARG1) * 4) + ((([(ARG1 + 8)] + 1) * 8) + [ARG1])) f()
f(ARG1) INT_SEXT f(ARG1)
((f(ARG1) * 4) + ((([(ARG1 + 8)] + 1) * 8) + [ARG1])) CAST ((f(ARG1) * 4) + ((([(ARG1 + 8)] + 1) * 8) + [ARG1]))
 STORE 433 ((f(ARG1) * 4) + ((([(ARG1 + 8)] + 1) * 8) + [ARG1])) f()
((f(ARG1) * 4) + ((([(ARG1 + 8)] + 1) * 8) + [ARG1])) INT_ADD (f(ARG1) * 4) ((([(ARG1 + 8)] + 1) * 8) + [ARG1])
f(ARG1) INT_ZEXT f(ARG1)
((f(ARG1) * 4) + ((([(ARG1 + 8)] + 1) * 8) + [ARG1])) INT_ADD (f(ARG1) * 4) ((([(ARG1 + 8)] + 1) * 8) + [ARG1])
 BRANCH VZERO
 BRANCH VZERO
(f(ARG1) * 4) INT_MULT f(ARG1) 4
f(ARG1) COPY f(ARG1)
(f(ARG1) * 4) INT_MULT f(ARG1) 4
((f(ARG1) * 4) + ((([(ARG1 + 8)] + 1) * 8) + [ARG1])) CAST ((f(ARG1) * 4) + ((([(ARG1 + 8)] + 1) * 8) + [ARG1]))
f(ARG1) COPY f(ARG1)
f(ARG1) CAST f(ARG1)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
0 COPY 0
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
 RETURN 1
 BRANCH VZERO
0 COPY 0
 BRANCH VZERO
f(ARG1) COPY f(ARG1)
1 COPY 1
 BRANCH VZERO
f(ARG1) LOAD 433 ARG1
 STORE 433 ARG1 (f(ARG1) + 8)
f(ARG1) LOAD 433 ARG1
f(ARG1) LOAD 433 ARG1
0 INT_EQUAL [[ARG1]] 0
[[ARG1]] LOAD 433 f(ARG1)
 CBRANCH ([[ARG1]] INT_EQUAL 0)
~(f()) BOOL_NEGATE f()
 CBRANCH ~(f())
 RETURN 0
 CBRANCH ([[ARG1]] INT_EQUAL f())
1 COPY 1
 BRANCH VZERO
0 COPY 0
f() CALL func
[[ARG1]] LOAD 433 f(ARG1)
0 INT_EQUAL [[ARG1]] f()
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
 BRANCH VZERO
 STORE 433 ARG1 ARG2
0 INT_NOTEQUAL ARG3 1
 CALL func ARG1
 RETURN 0
 CBRANCH (ARG3 INT_NOTEQUAL 1)
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
ARG1 CAST ARG1
[ARG1] LOAD 433 ARG1
f(ARG1) CALL func ARG1 f(ARG1) f(ARG1)
f(ARG1) CALL func ARG1 A_Stack[0x8]:8 A_Stack[0x10]:8 A_Stack[0x8]:8
[ARG1] LOAD 433 ARG1
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
(ARG1 + 24) PTRADD ARG1 3 8
ARG1 CAST ARG1
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f(ARG1) * 8) INT_MULT f(ARG1) 8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[([ARG1] + (f(ARG1) * 8))] LOAD 433 ([ARG1] + (f(ARG1) * 8))
([ARG1] + (f(ARG1) * 8)) CAST ([ARG1] + (f(ARG1) * 8))
 CBRANCH ([([ARG1] + (f(ARG1) * 8))] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [([ARG1] + (f(ARG1) * 8))] 0
 CBRANCH f()
f(ARG1) INT_ZEXT f(ARG1)
([ARG1] + (f(ARG1) * 8)) INT_ADD [ARG1] (f(ARG1) * 8)
 CBRANCH ([f(ARG1)] INT_EQUAL f())
([(ARG1 + 16)] + 4294967295) INT_ADD [(ARG1 + 16)] 4294967295
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG1 + 16) ([(ARG1 + 16)] + 4294967295)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
[([ARG1] + (f(ARG1) * 8))] LOAD 433 ([ARG1] + (f(ARG1) * 8))
0 COPY 0
f() CALL func
 CBRANCH ([([ARG1] + (f(ARG1) * 8))] INT_NOTEQUAL f())
0 INT_NOTEQUAL [([ARG1] + (f(ARG1) * 8))] f()
(RSP + 24) PTRSUB RSP 24
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(f() + 40) INT_ADD f() 40
(RSP + -48) PTRSUB RSP -48
(ARG1 + 12) CAST (ARG1 + 12)
f(RSP) CALL func (RSP + 24)
(RSP + -53) PTRSUB RSP -53
0 INT_NOTEQUAL f() [(f() + 40)]
([ARG1] + (f(ARG1) * 8)) INT_ADD [ARG1] (f(ARG1) * 8)
(ARG1 + 12) INT_ADD ARG1 12
[(f() + 40)] LOAD 433 (f() + 40)
([(ARG1 + 12)] + [(ARG1 + 16)]) CAST ([(ARG1 + 12)] + [(ARG1 + 16)])
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 STORE 433 f(ARG1) f()
0 INT_EQUAL [f(ARG1)] f()
(ARG1 + 8) CAST (ARG1 + 8)
 CALL func (RSP + -48) (RSP + -53) (RSP + -53)
(RSP + -48) PTRSUB RSP -48
0 COPY 0
f() CALL func A_Stack[0x8]:8 A_Stack[0x10]:8 (ARG1 + 24) f(RSP)
0 INT_LESS [(ARG1 + 8)] ([(ARG1 + 12)] + [(ARG1 + 16)])
f() CALL func
(f() + 40) CAST (f() + 40)
 BRANCH VZERO
(f(ARG1) * 8) INT_MULT f(ARG1) 8
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 12) CAST (ARG1 + 12)
 CBRANCH ([(ARG1 + 8)] INT_LESS ([(ARG1 + 12)] + [(ARG1 + 16)]))
[f(ARG1)] LOAD 433 f(ARG1)
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 12) CAST (ARG1 + 12)
 STORE 433 (ARG1 + 12) ([(ARG1 + 12)] + 1)
f(ARG1) INT_ZEXT f(ARG1)
([(ARG1 + 12)] + 1) INT_ADD [(ARG1 + 12)] 1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 12)] + [(ARG1 + 16)]) INT_ADD [(ARG1 + 12)] [(ARG1 + 16)]
 CALL func (RSP + -48) ([ARG1] + (f(ARG1) * 8)) 0 ([ARG1] + (f(ARG1) * 8))
 BRANCH VZERO
1 COPY 1
([ARG1] + (f(ARG1) * 8)) INT_ADD [ARG1] (f(ARG1) * 8)
(f(ARG1) * 8) INT_MULT f(ARG1) 8
 CALL libcall___assert_fail_thunk NumItems + NumTombstones <= NumBuckets /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringMap.h 342 std::pair<llvm::StringMapIterator<ValueTy>, bool> llvm::StringMap<ValueTy, AllocatorTy>::insert(std::pair<llvm::StringRef, ValueTy>) [with ValueTy = llvm::cl::Option*; AllocatorTy = llvm::MallocAllocator]
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringMap.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringMap.h
std::pair<llvm::StringMapIterator<ValueTy>, bool> llvm::StringMap<ValueTy, AllocatorTy>::insert(std::pair<llvm::StringRef, ValueTy>) [with ValueTy = llvm::cl::Option*; AllocatorTy = llvm::MallocAllocator] COPY std::pair<llvm::StringMapIterator<ValueTy>, bool> llvm::StringMap<ValueTy, AllocatorTy>::insert(std::pair<llvm::StringRef, ValueTy>) [with ValueTy = llvm::cl::Option*; AllocatorTy = llvm::MallocAllocator]
NumItems + NumTombstones <= NumBuckets COPY NumItems + NumTombstones <= NumBuckets
 CALL func (RSP + -48) ([ARG1] + (f(ARG1) * 8)) 0 ([ARG1] + (f(ARG1) * 8))
(RSP + -48) PTRSUB RSP -48
 RETURN 1
(RSP + -53) PTRSUB RSP -53
1 COPY 1
 CALL func (RSP + -48) (RSP + -53) (RSP + -53)
(RSP + -48) PTRSUB RSP -48
f(ARG1) INT_ZEXT f(ARG1)
(ARG1 + 12) INT_ADD ARG1 12
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
([(ARG1 + 12)] & 7) INT_AND [(ARG1 + 12)] 7
 RETURN 0 ([(ARG1 + 12)] & 7)
([(ARG1 + 12)] & 7) COPY ([(ARG1 + 12)] & 7)
(ARG1 + 12) CAST (ARG1 + 12)
(ARG1 + 12) INT_ADD ARG1 12
([(ARG1 + 12)] / 128) INT_RIGHT [(ARG1 + 12)] 7
(3 & ([(ARG1 + 12)] / 274877906816)) COPY (3 & ([(ARG1 + 12)] / 274877906816))
(3 & ([(ARG1 + 12)] / 274877906816)) INT_AND ([(ARG1 + 12)] / 274877906816) 3
(ARG1 + 12) CAST (ARG1 + 12)
([(ARG1 + 12)] / 274877906816) SUBPIECE ([(ARG1 + 12)] / 128) 0
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
 RETURN 0 (3 & ([(ARG1 + 12)] / 274877906816))
ARG1 COPY ARG1
f() CALL func ARG2
ARG2 COPY ARG2
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_EQUAL 1)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f() 1
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL func f(ARG2)
 CBRANCH (f() INT_NOTEQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH ([(f(ARG1) + 208)] INT_NOTEQUAL 0)
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -88) Cannot specify more than one option with cl::ConsumeAfter!
(RSP + -88) PTRSUB RSP -88
(RSP + -88) PTRSUB RSP -88
 CALL func f(ARG2) (RSP + -88) f() f()
1 COPY 1
 CALL func (RSP + -104)
Cannot specify more than one option with cl::ConsumeAfter! COPY Cannot specify more than one option with cl::ConsumeAfter!
 CBRANCH (f() INT_EQUAL 4)
(f(ARG1) + 208) INT_ADD f(ARG1) 208
(f(ARG1) + 208) CAST (f(ARG1) + 208)
0 INT_NOTEQUAL [(f(ARG1) + 208)] 0
 STORE 433 (f(ARG1) + 208) f(ARG2)
(f(ARG1) + 208) CAST (f(ARG1) + 208)
(f(ARG1) + 208) INT_ADD f(ARG1) 208
[(f(ARG1) + 208)] LOAD 433 (f(ARG1) + 208)
f() CALL func f(ARG2)
 CBRANCH ((f() & 4) INT_EQUAL 0)
(f() & 4) INT_AND f() 4
 BRANCH VZERO
(f(ARG1) + 64) INT_ADD f(ARG1) 64
0 INT_EQUAL (f() & 4) 0
 CALL func (f(ARG1) + 64) (RSP + -136) (f(ARG1) + 64)
(RSP + -136) PTRSUB RSP -136
 BRANCH VZERO
0 INT_EQUAL f() 4
 CALL func (f(ARG1) + 120) (RSP + -136) (f(ARG1) + 120)
(RSP + -136) PTRSUB RSP -136
f() CALL func f(ARG2)
(f(ARG1) + 120) INT_ADD f(ARG1) 120
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 CALL func inconsistency in registered CommandLine options 1
inconsistency in registered CommandLine options COPY inconsistency in registered CommandLine options
 CBRANCH (0 INT_NOTEQUAL 1)
f() CALL func f() ARG1
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
' registered more than once!  COPY ' registered more than once! 
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
f() CALL func f() [(ARG2 + 24)] [(ARG2 + 32)] f()
f() CALL func f() : CommandLine Error: Option '
1 COPY 1
f() CALL func
(ARG2 + 32) INT_ADD ARG2 32
: CommandLine Error: Option ' COPY : CommandLine Error: Option '
 CALL func f() ' registered more than once! 
(ARG2 + 32) CAST (ARG2 + 32)
(ARG2 + 24) INT_ADD ARG2 24
(ARG2 + 24) CAST (ARG2 + 24)
(ARG2 + 24) INT_ADD ARG2 24
 CALL func (RSP + -56) (ARG2 + 24) (RSP + -136) (ARG2 + 24)
(RSP + -56) PTRSUB RSP -56
(ARG1 + 176) INT_ADD ARG1 176
(RSP + -136) PTRSUB RSP -136
 CALL func (ARG1 + 176)
ARG2 COPY ARG2
ARG1 COPY ARG1
0 INT_NOTEQUAL 0 1
 CALL func f() ARG1 f()
(ARG1 + 80) INT_ADD ARG1 80
f() CALL func 6966272
 RETURN 0
6966272 PTRSUB 0 6966272
 STORE 433 (ARG1 + 80) 1
(ARG1 + 80) CAST (ARG1 + 80)
 RETURN 0
 CALL func ARG1
(ARG1 + 104) INT_ADD ARG1 104
 CALL func (ARG1 + 104)
 RETURN 0
 STORE 433 ARG1 Symbol
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 CALL func ARG1
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 0
 RETURN 0
 CALL func (ARG1 + 8)
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
[ARG1] LOAD 433 ARG1
[ARG2] LOAD 433 ARG2
([ARG2] & -256) INT_AND [ARG2] -256
([ARG2] & -256) INT_OR ([ARG2] & -256) 0
0 INT_ZEXT 0
 RETURN 0 ([ARG2] & -256)
0 INT_EQUAL [ARG1] [ARG2]
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[40] LOAD 433 40
(RSP + -24) PTRSUB RSP -24
([ARG1] + ([(ARG1 + 8)] * 8)) INT_ADD [ARG1] ([(ARG1 + 8)] * 8)
([(ARG1 + 8)] * 8) INT_MULT [(ARG1 + 8)] 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
40 INT_ADD 0 40
 CALL func (RSP + -24) ([ARG1] + ([(ARG1 + 8)] * 8)) 1 ([ARG1] + ([(ARG1 + 8)] * 8))
[(ARG1 + 8)] INT_ZEXT [(ARG1 + 8)]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(ARG1 + 8) CAST (ARG1 + 8)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
ARG1 CAST ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG2 ARG3 0 ARG2
f() CALL libcall_memcmp_thunk ARG2 ([([ARG1] + (f(ARG1) * 8))] + [(ARG1 + 20)]) f()
0 INT_EQUAL ARG3 f()
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL [(ARG1 + 8)] 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([ARG1] + (f(ARG1) * 8)) CAST ([ARG1] + (f(ARG1) * 8))
([ARG1] + (f(ARG1) * 8)) INT_ADD [ARG1] (f(ARG1) * 8)
[([ARG1] + (f(ARG1) * 8))] LOAD 433 ([ARG1] + (f(ARG1) * 8))
(([(ARG1 + 8)] + 1) * 8) INT_MULT ([(ARG1 + 8)] + 1) 8
(f() + 40) CAST (f() + 40)
(f() & ([(ARG1 + 8)] + 1)) INT_AND ([(ARG1 + 8)] + 1) f()
(f() + 40) INT_ADD f() 40
 CBRANCH ([(FS_OFFSET + 40)] INT_EQUAL [(f() + 40)])
[(ARG1 + 8)] INT_ZEXT [(ARG1 + 8)]
 CBRANCH ([([ARG1] + (f(ARG1) * 8))] INT_NOTEQUAL 0)
4294967295 COPY 4294967295
 BRANCH VZERO
0 INT_EQUAL [(FS_OFFSET + 40)] [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
(f(ARG1) * 8) INT_MULT f(ARG1) 8
([(ARG1 + 8)] + 1) INT_ADD [(ARG1 + 8)] 1
([(ARG1 + 8)] + 1) INT_SUB [(ARG1 + 8)] 1
0 INT_NOTEQUAL [([ARG1] + (f(ARG1) * 8))] 0
f(ARG1) INT_ZEXT f(ARG1)
((([(ARG1 + 8)] + 1) * 8) + [ARG1]) INT_ADD (([(ARG1 + 8)] + 1) * 8) [ARG1]
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL [([ARG1] + (f(ARG1) * 8))])
([(ARG1 + 8)] + -1) INT_SUB [(ARG1 + 8)] -1
0 INT_EQUAL [(((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4))] f()
(f() + 1) INT_ADD f() 1
 CBRANCH ([(((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4))] INT_EQUAL f())
f(ARG1) INT_ZEXT f(ARG1)
(((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4)) CAST (((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4))
((f(ARG1) + f()) & ([(ARG1 + 8)] + -1)) INT_AND ([(ARG1 + 8)] + -1) (f(ARG1) + f())
(((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4)) INT_ADD ((([(ARG1 + 8)] + 1) * 8) + [ARG1]) (f(ARG1) * 4)
 BRANCH VZERO
(f(ARG1) + f()) INT_ADD f(ARG1) f()
[(((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4))] LOAD 433 (((([(ARG1 + 8)] + 1) * 8) + [ARG1]) + (f(ARG1) * 4))
(f(ARG1) * 4) INT_MULT f(ARG1) 4
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(ARG1)
0 INT_NOTEQUAL f() [([ARG1] + (f(ARG1) * 8))]
f() CALL func
4294967295 COPY 4294967295
 BRANCH VZERO
 CBRANCH (([([ARG1] + (f(ARG1) * 8))] + [(ARG1 + 20)]) INT_EQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH f()
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (ARG3 INT_EQUAL f())
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
0 COPY 0
 RETURN 1
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
0 COPY 0
0 COPY 0
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
([([ARG1] + (f(ARG1) * 8))] + [(ARG1 + 20)]) CAST ([([ARG1] + (f(ARG1) * 8))] + [(ARG1 + 20)])
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 20) CAST (ARG1 + 20)
[(ARG1 + 20)] INT_ZEXT [(ARG1 + 20)]
0 INT_EQUAL ([([ARG1] + (f(ARG1) * 8))] + [(ARG1 + 20)]) 0
f() INT_ZEXT f()
([([ARG1] + (f(ARG1) * 8))] + [(ARG1 + 20)]) INT_ADD [([ARG1] + (f(ARG1) * 8))] [(ARG1 + 20)]
f() CALL func [([ARG1] + (f(ARG1) * 8))]
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
f(ARG1) CALL func ARG1 ARG2 ARG3 ARG2
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
ARG1 CAST ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
ARG1 CAST ARG1
0 INT_EQUAL f(ARG1) 4294967295
 CBRANCH (f(ARG1) INT_EQUAL 4294967295)
([ARG1] + (f(ARG1) * 8)) INT_ADD [ARG1] (f(ARG1) * 8)
 STORE 433 (ARG1 + 16) ([(ARG1 + 16)] + 1)
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 ([ARG1] + (f(ARG1) * 8)) f()
(ARG1 + 12) CAST (ARG1 + 12)
([(ARG1 + 12)] + [(ARG1 + 16)]) CAST ([(ARG1 + 12)] + [(ARG1 + 16)])
 BRANCH VZERO
0 COPY 0
f(ARG1) INT_SEXT f(ARG1)
f() CALL func
 RETURN 0 f(ARG1)
(ARG1 + 12) INT_ADD ARG1 12
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 16) CAST (ARG1 + 16)
([ARG1] + (f(ARG1) * 8)) CAST ([ARG1] + (f(ARG1) * 8))
([(ARG1 + 16)] + 1) INT_ADD [(ARG1 + 16)] 1
([(ARG1 + 12)] + [(ARG1 + 16)]) INT_ADD [(ARG1 + 12)] [(ARG1 + 16)]
([ARG1] + (f(ARG1) * 8)) INT_ADD [ARG1] (f(ARG1) * 8)
(ARG1 + 12) CAST (ARG1 + 12)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 STORE 433 (ARG1 + 12) ([(ARG1 + 12)] + 4294967295)
([(ARG1 + 12)] + 4294967295) INT_ADD [(ARG1 + 12)] 4294967295
(f(ARG1) * 8) INT_MULT f(ARG1) 8
[([ARG1] + (f(ARG1) * 8))] LOAD 433 ([ARG1] + (f(ARG1) * 8))
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
([ARG1] + (f(ARG1) * 8)) CAST ([ARG1] + (f(ARG1) * 8))
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 12) INT_ADD ARG1 12
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 12) CAST (ARG1 + 12)
f(ARG1) INT_SEXT f(ARG1)
0 INT_LESS [(ARG1 + 8)] ([(ARG1 + 12)] + [(ARG1 + 16)])
 CBRANCH ([(ARG1 + 8)] INT_LESS ([(ARG1 + 12)] + [(ARG1 + 16)]))
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(f(ARG1) * 8) INT_MULT f(ARG1) 8
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
 CALL libcall___assert_fail_thunk NumItems + NumTombstones <= NumBuckets /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/StringMap.cpp 175 llvm::StringMapEntryBase* llvm::StringMapImpl::RemoveKey(llvm::StringRef)
llvm::StringMapEntryBase* llvm::StringMapImpl::RemoveKey(llvm::StringRef) COPY llvm::StringMapEntryBase* llvm::StringMapImpl::RemoveKey(llvm::StringRef)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/StringMap.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/StringMap.cpp
NumItems + NumTombstones <= NumBuckets COPY NumItems + NumTombstones <= NumBuckets
 RETURN 1
(ARG1 + 20) INT_ADD ARG1 20
f(ARG1) CALL func ARG1 (ARG2 + [(ARG1 + 20)]) f() (ARG2 + [(ARG1 + 20)])
(ARG2 + [(ARG1 + 20)]) INT_ADD ARG2 [(ARG1 + 20)]
0 INT_NOTEQUAL ARG2 f(ARG1)
f() CALL func ARG2
0 INT_EQUAL (ARG2 + [(ARG1 + 20)]) 0
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
[(ARG1 + 20)] INT_ZEXT [(ARG1 + 20)]
(ARG1 + 20) CAST (ARG1 + 20)
 CBRANCH ((ARG2 + [(ARG1 + 20)]) INT_EQUAL 0)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
0 INT_NOTEQUAL f() 0
 CBRANCH (ARG2 INT_NOTEQUAL f(ARG1))
 CBRANCH (f() INT_NOTEQUAL 0)
 CALL libcall___assert_fail_thunk V == V2 && "Didn't find key?" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/StringMap.cpp 162 void llvm::StringMapImpl::RemoveKey(llvm::StringMapEntryBase*)
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/StringMap.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/StringMap.cpp
40 CAST 40
void llvm::StringMapImpl::RemoveKey(llvm::StringMapEntryBase*) COPY void llvm::StringMapImpl::RemoveKey(llvm::StringMapEntryBase*)
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
V == V2 && "Didn't find key?" COPY V == V2 && "Didn't find key?"
40 INT_ADD 0 40
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 RETURN 1
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
 CALL func ARG1 ARG2 ARG2
 RETURN 0
[ARG1] LOAD 433 ARG1
[[ARG1]] LOAD 433 [ARG1]
[[ARG1]] COPY [[ARG1]]
[ARG1] CAST [ARG1]
 RETURN 0 [[ARG1]]
ARG1 COPY ARG1
ARG2 COPY ARG2
(ARG1 + 24) INT_ADD ARG1 24
f() CALL func (RSP + -40)
 CALL func ARG1 f() f()
 CALL func f() (ARG1 + 24) (ARG1 + 24)
 RETURN 0
(RSP + -40) PTRSUB RSP -40
f(ARG1) CALL func ARG1 ARG2 ARG3 ARG2
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
 CBRANCH (f(ARG1) INT_EQUAL 4294967295)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_EQUAL f(ARG1) 4294967295
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(RSP + -24) PTRSUB RSP -24
f(ARG1) INT_SEXT f(ARG1)
([ARG1] + (f(ARG1) * 8)) INT_ADD [ARG1] (f(ARG1) * 8)
 CALL func (RSP + -24) ([ARG1] + (f(ARG1) * 8)) 1 ([ARG1] + (f(ARG1) * 8))
(f(ARG1) * 8) INT_MULT f(ARG1) 8
 BRANCH VZERO
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 CALL func ARG1 f() f()
f() CALL func ARG1
f() CALL func ARG1 ARG2 ARG3 ARG2
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
0 COPY 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func (RSP + -32) (RSP + -24) (RSP + -24)
0 INT_EQUAL 0 [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -24) PTRSUB RSP -24
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -32) PTRSUB RSP -32
 RETURN 1
 RETURN 0 0
 CALL libcall___stack_chk_fail_thunk
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG1 COPY ARG1
(f(ARG2) + 24) INT_ADD f(ARG2) 24
(ARG1 + 176) INT_ADD ARG1 176
[(f(ARG2) + 32)] LOAD 433 (f(ARG2) + 32)
(f(ARG1) + 176) INT_ADD f(ARG1) 176
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
[(f(ARG2) + 24)] LOAD 433 (f(ARG2) + 24)
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (ARG1 + 176)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -88) PTRSUB RSP -88
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -56) (RSP + -88) (RSP + -72) (RSP + -88)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f(ARG2) + 32) CAST (f(ARG2) + 32)
 CALL func (f(ARG1) + 176) [(f(ARG2) + 24)] [(f(ARG2) + 32)] (f(ARG1) + 176)
(RSP + -56) PTRSUB RSP -56
 CBRANCH (0 INT_NOTEQUAL 1)
0 INT_NOTEQUAL 0 1
(f(ARG2) + 24) CAST (f(ARG2) + 24)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
ARG2 COPY ARG2
(f(ARG2) + 32) INT_ADD f(ARG2) 32
ARG1 COPY ARG1
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CALL func f() ' registered more than once! 
f() CALL func
(ARG2 + 24) INT_ADD ARG2 24
' registered more than once!  COPY ' registered more than once! 
: CommandLine Error: Option ' COPY : CommandLine Error: Option '
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
 CALL func inconsistency in registered CommandLine options 1
f() CALL func f() ARG1
(ARG2 + 32) CAST (ARG2 + 32)
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
f() CALL func f() [(ARG2 + 24)] [(ARG2 + 32)] f()
inconsistency in registered CommandLine options COPY inconsistency in registered CommandLine options
(ARG2 + 24) CAST (ARG2 + 24)
(ARG2 + 32) INT_ADD ARG2 32
f() CALL func f() : CommandLine Error: Option '
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 80) INT_ADD ARG1 80
(ARG1 + 32) INT_ADD ARG1 32
 CALL func f() ARG1 ARG2 ARG3
 STORE 433 (ARG1 + 24) ARG2
 STORE 433 (ARG1 + 32) ARG3
(ARG1 + 32) CAST (ARG1 + 32)
(ARG1 + 80) CAST (ARG1 + 80)
 CBRANCH ([(ARG1 + 80)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(ARG1 + 80)] 0
(ARG1 + 24) CAST (ARG1 + 24)
 RETURN 0
[(ARG1 + 80)] LOAD 433 (ARG1 + 80)
f() CALL func 6966272
6966272 PTRSUB 0 6966272
 CALL func (RSP + -40) ARG1 ARG1
 CALL func ARG2 A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(RSP + -40) PTRSUB RSP -40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 12) INT_ADD ARG1 12
(ARG2 & 7) INT_AND ARG2 7
(([(ARG1 + 12)] & 248) | (ARG2 & 7)) INT_OR ([(ARG1 + 12)] & 248) (ARG2 & 7)
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(ARG1 + 12) CAST (ARG1 + 12)
(ARG1 + 12) CAST (ARG1 + 12)
([(ARG1 + 12)] & 248) INT_AND [(ARG1 + 12)] 248
 STORE 433 (ARG1 + 12) (([(ARG1 + 12)] & 248) | (ARG2 & 7))
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 RETURN 0
 CALL func ARG1 ARG2 ARG2
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 ARG3
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
f() CALL func ARG2 (RSP + -40) A_Stack[-0x38]:8 A_Stack[-0x30]:8
 CALL func (ARG1 + 8) ARG3 (ARG1 + 8)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([ARG1] INT_EQUAL 0)
(f() + 40) CAST (f() + 40)
0 INT_EQUAL [ARG1] 0
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
0 COPY 0
 CALL func (RSP + -40) cl::location(x) specified more than once!
(RSP + -40) PTRSUB RSP -40
cl::location(x) specified more than once! COPY cl::location(x) specified more than once!
 CALL func (RSP + -56)
(RSP + -40) PTRSUB RSP -40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
[ARG1] LOAD 433 ARG1
(ARG2 + 88) INT_ADD ARG2 88
 CALL func (ARG2 + 88) ARG2 [ARG1] (ARG2 + 88)
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
(ARG2 & 3) INT_AND ARG2 3
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 12) INT_ADD ARG1 12
((ARG2 & 3) * 8) INT_MULT (ARG2 & 3) 8
(ARG1 + 12) CAST (ARG1 + 12)
 RETURN 0
(([(ARG1 + 12)] & 231) | ((ARG2 & 3) * 8)) INT_OR ([(ARG1 + 12)] & 231) ((ARG2 & 3) * 8)
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(ARG1 + 12) CAST (ARG1 + 12)
([(ARG1 + 12)] & 231) INT_AND [(ARG1 + 12)] 231
 STORE 433 (ARG1 + 12) (([(ARG1 + 12)] & 231) | ((ARG2 & 3) * 8))
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func [ARG2] ARG1 ARG1
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func ARG1 ARG3 ARG3
 CALL func ARG2 ARG1 ARG1
 RETURN 0
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 56) INT_ADD ARG1 56
 STORE 433 (ARG1 + 56) ARG2
 STORE 433 (ARG1 + 64) ARG3
(ARG1 + 64) CAST (ARG1 + 64)
(ARG1 + 56) CAST (ARG1 + 56)
 RETURN 0
[ARG1] LOAD 433 ARG1
 CALL func ARG2 A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
40 CAST 40
 CALL func (RSP + -40) [ARG1] [ARG1]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(RSP + -40) PTRSUB RSP -40
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG3 ARG4 ARG3
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func [ARG2] ARG1 ARG1
 CALL func ARG1 ARG3 ARG4 ARG5
[ARG2] LOAD 433 ARG2
 RETURN 0
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 12) INT_ADD ARG1 12
(ARG2 & 3) INT_AND ARG2 3
(ARG1 + 12) CAST (ARG1 + 12)
(ARG1 + 12) CAST (ARG1 + 12)
([(ARG1 + 12)] & 159) INT_AND [(ARG1 + 12)] 159
((ARG2 & 3) * 32) INT_LEFT (ARG2 & 3) 5
 STORE 433 (ARG1 + 12) (([(ARG1 + 12)] & 159) | (((ARG2 & 3) * 32) / 2147483647))
 RETURN 0
(((ARG2 & 3) * 32) / 2147483647) SUBPIECE ((ARG2 & 3) * 32) 0
(([(ARG1 + 12)] & 159) | (((ARG2 & 3) * 32) / 2147483647)) INT_OR ([(ARG1 + 12)] & 159) (((ARG2 & 3) * 32) / 2147483647)
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG1 ARG3 ARG4 ARG5 ARG6
 CALL func [ARG2] ARG1 ARG1
[ARG2] LOAD 433 ARG2
 RETURN 0
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 40) INT_ADD ARG1 40
 STORE 433 (ARG1 + 40) ARG2
 STORE 433 (ARG1 + 48) ARG3
(ARG1 + 48) CAST (ARG1 + 48)
(ARG1 + 40) CAST (ARG1 + 40)
 RETURN 0
[ARG1] LOAD 433 ARG1
 CALL func ARG2 A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -40) PTRSUB RSP -40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
40 CAST 40
 CALL func (RSP + -40) [ARG1] [ARG1]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG3 ARG4 ARG5 ARG6 ARG7
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG1 ARG3 ARG4 ARG5 ARG6 ARG7 ARG8 4405435
 CALL func ARG2 ARG1 ARG1
4405435 COPY 4405435
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5 ARG6 ARG7 ARG8
(ARG1 + 88) PTRADD ARG1 11 8
(ARG1 + 104) PTRADD ARG1 13 8
 CALL func (ARG1 + 104) ARG1 (ARG1 + 104)
 CALL func ARG1 0 0
 STORE 433 ARG1 Symbol
 CALL func ARG1
Symbol CAST Symbol
 CALL func (ARG1 + 88)
 RETURN 0
Symbol PTRSUB 0 Symbol
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func ARG1
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 STORE 433 ARG1 Symbol
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
(ARG1 + 104) PTRADD ARG1 13 8
 STORE 433 ARG1 Symbol
 CALL func ARG1
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func (ARG1 + 104)
 CALL func ARG1
 CALL libcall_operator.delete_thunk ARG1
 RETURN 0
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(RSP + -24) PTRSUB RSP -24
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 STORE 433 ARG1 Symbol
 CALL func ARG1
ARG1 CAST ARG1
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 STORE 433 (ARG1 + 9) 0
(ARG1 + 9) CAST (ARG1 + 9)
(ARG1 + 9) INT_ADD ARG1 9
 CALL func ARG1
 STORE 433 ARG1 Symbol
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
 CALL func ARG1
 STORE 433 ARG1 Symbol
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0
 CALL func (ARG1 + 8)
 RETURN 0
 CALL func ARG1
(ARG1 + 112) INT_ADD ARG1 112
 CALL func (ARG1 + 112)
 RETURN 0
 CALL func (RSP + -40) ARG1 ARG1
 CALL func ARG2 A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
(RSP + -40) PTRSUB RSP -40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
(ARG1 + 9) INT_ADD ARG1 9
(ARG1 + 8) INT_ADD ARG1 8
[ARG2] LOAD 433 ARG2
 STORE 433 (ARG1 + 9) 1
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 9) CAST (ARG1 + 9)
 STORE 433 (ARG1 + 8) [ARG2]
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
 RETURN 0 ARG1
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 ARG3
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG2 (RSP + -40) A_Stack[-0x38]:8 A_Stack[-0x30]:8
 CALL func (ARG1 + 8) ARG3 (ARG1 + 8)
0 INT_EQUAL [ARG1] 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CBRANCH ([ARG1] INT_EQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
cl::location(x) specified more than once! COPY cl::location(x) specified more than once!
 CALL func (RSP + -56)
(RSP + -40) PTRSUB RSP -40
0 COPY 0
 CALL func (RSP + -40) cl::location(x) specified more than once!
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
(RSP + -40) PTRSUB RSP -40
[ARG1] LOAD 433 ARG1
 CALL func (ARG2 + 88) ARG2 [ARG1] (ARG2 + 88)
(ARG2 + 88) INT_ADD ARG2 88
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func [ARG2] ARG1 ARG1
 CALL func ARG1 ARG3 ARG3
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG3 ARG4 ARG3
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG1 ARG3 ARG4 ARG5
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 CALL func ARG1 0 0
(ARG1 + 88) PTRADD ARG1 11 8
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5
(ARG1 + 112) PTRADD ARG1 14 8
 CALL func ARG1
 CALL func (ARG1 + 112) ARG1 (ARG1 + 112)
 CALL func (ARG1 + 88)
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 12) INT_ADD ARG1 12
[ARG2] LOAD 433 ARG2
 STORE 433 (ARG1 + 8) [ARG2]
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 12) CAST (ARG1 + 12)
 STORE 433 (ARG1 + 12) 1
 CALL func ARG1 ARG2 ARG2
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 2 4
 STORE 433 ARG1 [ARG2]
 CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
[ARG2] LOAD 433 ARG2
0 INT_NOTEQUAL ARG3 0
 RETURN 0
 CBRANCH (ARG3 INT_NOTEQUAL 0)
(ARG1 + 88) INT_ADD ARG1 88
 CALL func (ARG1 + 88) ARG2 1 (ARG1 + 88)
 RETURN 0
[ARG1] LOAD 433 ARG1
 CALL func ARG2 (RSP + -20) (RSP + -20)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -20) PTRSUB RSP -20
[40] LOAD 433 40
[ARG1] CAST [ARG1]
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[[ARG1]] LOAD 433 [ARG1]
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func [ARG2] ARG1 ARG1
 CALL func ARG1 ARG3 ARG3
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func ARG1 ARG3 ARG4 ARG3
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func (RSP + -40) ARG1 ARG1
 CALL func ARG2 A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
40 CAST 40
(RSP + -40) PTRSUB RSP -40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 CALL func ARG1 ARG3 ARG4 ARG5
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 CALL func ARG1
ARG1 CAST ARG1
 STORE 433 ARG1 Symbol
(ARG1 + 12) INT_ADD ARG1 12
 STORE 433 (ARG1 + 12) 0
(ARG1 + 12) CAST (ARG1 + 12)
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 CALL func ARG1
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
(ARG1 + 8) PTRADD ARG1 2 4
 STORE 433 ARG1 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (ARG1 + 8) (RSP + -20) (ARG1 + 8)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
0 COPY 0
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 40
(RSP + -20) PTRSUB RSP -20
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0
(ARG1 + 112) INT_ADD ARG1 112
 CALL func ARG1
 CALL func (ARG1 + 112)
 RETURN 0
 CALL func ARG1 0 0
(ARG1 + 88) PTRADD ARG1 11 8
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5
(ARG1 + 112) PTRADD ARG1 14 8
 CALL func ARG1
 CALL func (ARG1 + 112) ARG1 (ARG1 + 112)
 CALL func (ARG1 + 88)
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 STORE 433 ARG1 Symbol
 CALL func ARG1
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
 STORE 433 ARG1 Symbol
(ARG1 + 112) PTRADD ARG1 14 8
 CALL func ARG1
 CALL func (ARG1 + 112)
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(RSP + -24) PTRSUB RSP -24
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 STORE 433 ARG1 ARG2
 RETURN 0
 STORE 433 ARG1 ARG2
 RETURN 0
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
 CALL func ARG1
 STORE 433 ARG1 Symbol
(ARG1 + 112) PTRADD ARG1 14 8
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func (ARG1 + 112)
 RETURN 0
0 INT_EQUAL ARG2 65535
0 INT_EQUAL ARG1 1
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (ARG1 INT_EQUAL 1)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH (ARG2 INT_EQUAL 65535)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
f() COPY f()
f() COPY f()
 RETURN 1
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -32) Enable debug output
(RSP + -32) PTRSUB RSP -32
1 COPY 1
(RSP + -32) PTRSUB RSP -32
2 COPY 2
debug-only COPY debug-only
f() CALL func (RSP + -44)
 CALL libcall___cxa_atexit_thunk 4413016 6965856 6960440
(RSP + -52) PTRSUB RSP -52
6965856 PTRSUB 0 6965856
 CALL func (RSP + -32) Buffer the last N characters of debug output until program termination. [default 0 -- immediate print-out]
(RSP + -48) PTRSUB RSP -48
debug string COPY debug string
(RSP + -32) PTRSUB RSP -32
(RSP + -32) PTRSUB RSP -32
(RSP + -40) PTRSUB RSP -40
(RSP + -24) PTRSUB RSP -24
(RSP + -32) PTRSUB RSP -32
f() CALL func 6965976
(RSP + -40) PTRSUB RSP -40
(RSP + -24) PTRSUB RSP -24
6965728 PTRSUB 0 6965728
6960440 PTRSUB 0 6960440
6965984 PTRSUB 0 6965984
Enable a specific type of debug output (comma separated list of types) COPY Enable a specific type of debug output (comma separated list of types)
4412896 PTRSUB 0 4412896
6965856 PTRSUB 0 6965856
1 COPY 1
(RSP + -24) PTRSUB RSP -24
6960440 PTRSUB 0 6960440
 CALL func 6965728 debug (RSP + -32) (RSP + -40) (RSP + -24)
Enable debug output COPY Enable debug output
 CALL func 6965984 debug-only (RSP + -40) (RSP + -52) (RSP + -48) (RSP + -32) (RSP + -24) (RSP + -44)
1 COPY 1
4413016 PTRSUB 0 4413016
Buffer the last N characters of debug output until program termination. [default 0 -- immediate print-out] COPY Buffer the last N characters of debug output until program termination. [default 0 -- immediate print-out]
6965728 PTRSUB 0 6965728
 CALL func (RSP + -32) debug string
(RSP + -44) PTRSUB RSP -44
(RSP + -40) PTRSUB RSP -40
6965664 PTRSUB 0 6965664
(RSP + -32) PTRSUB RSP -32
debug COPY debug
(RSP + -44) PTRSUB RSP -44
 CALL func (RSP + -40) Enable a specific type of debug output (comma separated list of types)
 CALL libcall___cxa_atexit_thunk 4406432 6965984 6960440
1 COPY 1
6965984 PTRSUB 0 6965984
6960440 PTRSUB 0 6960440
0 COPY 0
f() CALL func 6965664
debug-buffer-size COPY debug-buffer-size
 CALL libcall___cxa_atexit_thunk 4412896 6965728 6960440
 CALL func 6965856 debug-buffer-size (RSP + -32) (RSP + -40) (RSP + -24)
4406432 PTRSUB 0 4406432
6965976 PTRSUB 0 6965976
[ARG1] LOAD 433 ARG1
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
 RETURN 1
 RETURN 0
Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!" COPY Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!"
0 COPY 0
 CALL libcall___assert_fail_thunk Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 1099 0
 RETURN 0
 CALL func ARG1 ARG2 ARG2
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1
[ARG1] LOAD 433 ARG1
 CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
 CALL func [ARG1] ARG2 ARG2
0 INT_NOTEQUAL ARG3 0
 RETURN 0
 CBRANCH (ARG3 INT_NOTEQUAL 0)
(ARG1 + 16) INT_ADD ARG1 16
 STORE 433 (ARG1 + 16) ARG2
 RETURN 0
(ARG1 + 16) CAST (ARG1 + 16)
ARG2 COPY ARG2
 CALL libcall_operator=_thunk ARG7 (RSP + -56)
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG5 COPY ARG5
ARG6 COPY ARG6
ARG1 COPY ARG1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
 CALL func (RSP + -56) (RSP + -104) (RSP + -104)
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -56) CAST (RSP + -56)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
0 COPY 0
 CALL libcall_~basic_string_thunk (RSP + -56)
(RSP + -104) PTRSUB RSP -104
40 CAST 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 0
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 104) INT_ADD ARG1 104
f() CALL func (ARG1 + 104) ARG1 ARG3 ARG4 ARG5 ARG6 (RSP + -72) 4407083
 CALL func ARG1 ARG2 ARG2
4407083 COPY 4407083
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -72) PTRSUB RSP -72
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
-1 COPY -1
(RSP + -72) PTRSUB RSP -72
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
 CALL libcall_~basic_string_thunk (RSP + -72)
-1 BOOL_NEGATE 0
0 INT_EQUAL 0 [(f() + 40)]
 CALL libcall_basic_string_thunk
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
(f() + 40) CAST (f() + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 -1
 CALL func (ARG1 + 88) (RSP + -72) 0 (ARG1 + 88)
(RSP + -72) PTRSUB RSP -72
2 COPY 2
 RETURN 0 2
(ARG1 + 104) INT_ADD ARG1 104
 RETURN 0
 CALL func (ARG1 + 104)
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 56) INT_ADD ARG1 56
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
 CBRANCH ([(ARG1 + 64)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(ARG1 + 64)] 0
(ARG1 + 64) CAST (ARG1 + 64)
(f(ARG1 , ARG3) # f(ARG1 , ARG2)) PIECE f(ARG1 , ARG3) f(ARG1 , ARG2)
 RETURN 0 (f(ARG1 , ARG3) # f(ARG1 , ARG2))
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
[(ARG1 + 56)] LOAD 433 (ARG1 + 56)
(ARG1 + 64) CAST (ARG1 + 64)
(ARG1 + 56) CAST (ARG1 + 56)
VZERO CALLIND [[ARG1]] ARG1 ARG2 ARG1
[ARG1] LOAD 433 ARG1
(ARG2 + 32) INT_ADD ARG2 32
f() CALL func ARG2 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
[(f() + 40)] LOAD 433 (f() + 40)
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
[ARG1] CAST [ARG1]
[[ARG1]] LOAD 433 [ARG1]
(f(ARG2) + 6) INT_ADD f(ARG2) 6
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) INT_ADD f() 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(ARG2 + 32) CAST (ARG2 + 32)
 CBRANCH (VZERO INT_NOTEQUAL 0)
0 INT_NOTEQUAL VZERO 0
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
 RETURN 0 (f(ARG2) + 6)
 CALL libcall___stack_chk_fail_thunk
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
 CALL func (RSP + -56) VZERO VZERO
([(ARG2 + 32)] + ((f() / 4611686014132420609) + 3)) INT_ADD [(ARG2 + 32)] ((f() / 4611686014132420609) + 3)
((f() / 4611686014132420609) + 3) INT_ADD (f() / 4611686014132420609) 3
(f() / 2147483647) INT_RIGHT f() 64
(RSP + -56) PTRSUB RSP -56
(ARG1 + 104) INT_ADD ARG1 104
 CALL func (ARG1 + 104) ARG1 (ARG1 + 104)
 RETURN 0
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 [ARG2]
(ARG1 + 16) PTRADD ARG1 2 8
(ARG2 + 8) PTRADD ARG2 1 8
[ARG2] LOAD 433 ARG2
f(ARG3) CALL func ARG3
 RETURN 0
[f(ARG3)] LOAD 433 f(ARG3)
(f(ARG3) + 8) PTRADD f(ARG3) 1 8
[(f(ARG3) + 8)] LOAD 433 (f(ARG3) + 8)
f(ARG3) CAST f(ARG3)
 STORE 433 (ARG1 + 8) [(ARG2 + 8)]
 STORE 433 (ARG1 + 24) [(f(ARG3) + 8)]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 STORE 433 (ARG1 + 16) [f(ARG3)]
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
 CALL func ARG1 f(ARG2) f(ARG3) f(ARG2)
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG3 INT_SEXT ARG3
ARG1 COPY ARG1
 CALL func ARG1 ARG2 (RSP + -56) ARG2
 CALL func ARG1 (RSP + -56) (RSP + -72) (RSP + -56)
(ARG2 + 8) PTRADD ARG2 1 8
ARG2 COPY ARG2
ARG2 COPY ARG2
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 8) PTRADD ARG2 1 8
ARG2 COPY ARG2
[f(ARG2 , RSP)] LOAD 433 f(ARG2 , RSP)
f(ARG2 , RSP) CALL func (RSP + -192) (ARG2 + 8) (ARG2 + 8)
f(ARG2 , RSP) CAST f(ARG2 , RSP)
(FS_OFFSET + 40) INT_ADD 0 40
[(ARG2 + 8)] CAST [(ARG2 + 8)]
 CBRANCH (f(ARG2) INT_EQUAL -1)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(ARG2 + 8) PTRADD ARG2 1 8
0 INT_EQUAL f(ARG2) -1
 CBRANCH ([f(ARG2 , RSP)] INT_LESS [(ARG2 + 8)])
(RSP + -192) PTRSUB RSP -192
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
0 INT_LESS [f(ARG2 , RSP)] [(ARG2 + 8)]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 COPY 0
 CBRANCH (([f(ARG2 , RSP)] - [f(ARG2 , RSP)]) INT_NOTEQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -56) PTRSUB RSP -56
(RSP + -72) PTRSUB RSP -72
 RETURN 1
(f() + 40) CAST (f() + 40)
0 COPY 0
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
(ARG2 + 8) PTRADD ARG2 1 8
-1 COPY -1
([f(ARG2 , RSP)] + [ARG2]) CAST ([f(ARG2 , RSP)] + [ARG2])
([(ARG2 + 8)] - [f(ARG2 , RSP)]) INT_SUB [(ARG2 + 8)] [f(ARG2 , RSP)]
0 INT_NOTEQUAL f() 0
[ARG2] LOAD 433 ARG2
([f(ARG2 , RSP)] + [ARG2]) INT_ADD [f(ARG2 , RSP)] [ARG2]
 CBRANCH (f() INT_NOTEQUAL 0)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
f() CALL libcall_memchr_thunk ([f(ARG2 , RSP)] + [ARG2]) ARG3 ([(ARG2 + 8)] - [f(ARG2 , RSP)])
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (([f(ARG2 , RSP)] - [f(ARG2 , RSP)]) INT_NOTEQUAL 0)
[ARG2] LOAD 433 ARG2
([f(ARG2 , RSP)] - [f(ARG2 , RSP)]) INT_SUB [f(ARG2 , RSP)] [f(ARG2 , RSP)]
f(ARG2) COPY f(ARG2)
([f(ARG2 , RSP)] - [f(ARG2 , RSP)]) COPY ([f(ARG2 , RSP)] - [f(ARG2 , RSP)])
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
([f(ARG2 , RSP)] + [ARG2]) COPY ([f(ARG2 , RSP)] + [ARG2])
f(RSP) CALL func (RSP + -184) (RSP + -176) (RSP + -176)
[f(ARG2 , RSP)] LOAD 433 f(ARG2 , RSP)
 RETURN 1
f(ARG2 , RSP) CALL func (RSP + -184) (ARG2 + 8) (ARG2 + 8)
([f(ARG2 , RSP)] - [f(ARG2 , RSP)]) CAST ([f(ARG2 , RSP)] - [f(ARG2 , RSP)])
[f(ARG2 , RSP)] CAST [f(ARG2 , RSP)]
0 COPY 0
(RSP + -184) PTRSUB RSP -184
([f(ARG2 , RSP)] + [ARG2]) INT_ADD [f(ARG2 , RSP)] [ARG2]
0 INT_EQUAL ([f(ARG2 , RSP)] + [ARG2]) 0
 CBRANCH (([f(ARG2 , RSP)] + [ARG2]) INT_EQUAL 0)
([f(ARG2 , RSP)] - [f(ARG2 , RSP)]) COPY ([f(ARG2 , RSP)] - [f(ARG2 , RSP)])
f(ARG2 , RSP) CAST f(ARG2 , RSP)
(RSP + -184) PTRSUB RSP -184
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
f(ARG2 , RSP) CAST f(ARG2 , RSP)
[f(ARG2 , RSP)] LOAD 433 f(ARG2 , RSP)
f(ARG2 , RSP) CALL func f(RSP) (ARG2 + 8)
(ARG2 + 8) PTRADD ARG2 1 8
0 COPY 0
([f(ARG2 , RSP)] + [ARG2]) COPY ([f(ARG2 , RSP)] + [ARG2])
(RSP + -176) PTRSUB RSP -176
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
(f() - [ARG2]) INT_SUB f() [ARG2]
[ARG2] LOAD 433 ARG2
(f() - [ARG2]) CAST (f() - [ARG2])
f() CAST f()
 BRANCH VZERO
 CBRANCH (([f(ARG2 , RSP)] + [ARG2]) INT_EQUAL 0)
([f(ARG2 , RSP)] + [ARG2]) INT_ADD [f(ARG2 , RSP)] [ARG2]
(ARG2 + 8) PTRADD ARG2 1 8
(RSP + -56) PTRSUB RSP -56
0 INT_EQUAL ([f(ARG2 , RSP)] + [ARG2]) 0
 CALL func (RSP + -56)
[f(ARG2 , RSP)] LOAD 433 f(ARG2 , RSP)
f(ARG2 , RSP) CALL func f(RSP) (ARG2 + 8)
-1 COPY -1
[f(ARG2 , RSP)] LOAD 433 f(ARG2 , RSP)
f(ARG2 , RSP) CALL func (RSP + -168) (ARG2 + 8) (ARG2 + 8)
([f(ARG2 , RSP)] - [f(ARG2 , RSP)]) INT_SUB [f(ARG2 , RSP)] [f(ARG2 , RSP)]
(RSP + -168) PTRSUB RSP -168
[ARG2] LOAD 433 ARG2
([f(ARG2 , RSP)] - [f(ARG2 , RSP)]) CAST ([f(ARG2 , RSP)] - [f(ARG2 , RSP)])
(RSP + -56) PTRSUB RSP -56
f(RSP) CALL func (RSP + -168) (RSP + -160) (RSP + -160)
(f(ARG2) + 1) INT_ADD f(ARG2) 1
f(ARG2) CAST f(ARG2)
f(ARG2 , RSP) CAST f(ARG2 , RSP)
(RSP + -168) PTRSUB RSP -168
 BRANCH VZERO
(RSP + -160) PTRSUB RSP -160
f(ARG2 , RSP) CAST f(ARG2 , RSP)
([f(ARG2 , RSP)] - [f(ARG2 , RSP)]) COPY ([f(ARG2 , RSP)] - [f(ARG2 , RSP)])
([f(ARG2 , RSP)] + [ARG2]) COPY ([f(ARG2 , RSP)] + [ARG2])
0 INT_NOTEQUAL ([f(ARG2 , RSP)] - [f(ARG2 , RSP)]) 0
0 INT_NOTEQUAL ([f(ARG2 , RSP)] - [f(ARG2 , RSP)]) 0
(ARG3 - ARG4) INT_SUB ARG3 ARG4
f() CALL func f() ARG3
ARG1 COPY ARG1
ARG2 COPY ARG2
f() CALL func f() A_Stack[-0x68]:8 A_Stack[-0x60]:8 f()
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) INT_ADD f() 40
4705700 PTRSUB 0 4705700
0 INT_NOTEQUAL 0 [40]
f() CALL func
[40] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL func f() 4705700
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func f() 4705610
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func f() (ARG3 - ARG4)
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -104) (RSP + -120) 10 (RSP + -120)
(RSP + -120) PTRSUB RSP -120
 CBRANCH (0 INT_NOTEQUAL [40])
0 INT_NOTEQUAL f() 0
4705610 PTRSUB 0 4705610
f() CALL func
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -72) (RSP + -88) 10 (RSP + -88)
(RSP + -88) PTRSUB RSP -88
f() CALL func f() f() f() f()
(RSP + -104) PTRSUB RSP -104
 CALL func f() 4705610
4705610 PTRSUB 0 4705610
 CALL func (RSP + -104) (RSP + -72) (RSP + -72)
 BRANCH VZERO
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
VZERO CALLIND [[ARG1]] ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1 ARG2 ARG2
(ARG2 + 48) INT_ADD ARG2 48
(ARG2 + 32) INT_ADD ARG2 32
(ARG2 + 24) INT_ADD ARG2 24
f() CALL func ARG2 A_Stack[-0x48]:8 A_Stack[-0x40]:8 A_Stack[-0x48]:8
(ARG2 + 40) INT_ADD ARG2 40
 CALL func [(ARG2 + 40)] [(ARG2 + 48)] ARG3 f()
[(f() + 40)] LOAD 433 (f() + 40)
4705704 PTRSUB 0 4705704
(FS_OFFSET + 40) INT_ADD 0 40
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
[ARG1] CAST [ARG1]
(f() + 40) CAST (f() + 40)
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
[(ARG2 + 48)] LOAD 433 (ARG2 + 48)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL func f() 4705704
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[[ARG1]] LOAD 433 [ARG1]
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
[(ARG2 + 40)] LOAD 433 (ARG2 + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(ARG2 + 32) CAST (ARG2 + 32)
(ARG2 + 48) CAST (ARG2 + 48)
 CBRANCH (VZERO INT_NOTEQUAL 0)
0 INT_NOTEQUAL VZERO 0
(ARG2 + 40) CAST (ARG2 + 40)
 CALL func f() [(ARG2 + 24)] [(ARG2 + 32)] f()
f() CALL func
(ARG2 + 24) CAST (ARG2 + 24)
(RSP + -72) PTRSUB RSP -72
(f() / 2147483647) INT_RIGHT f() 64
f() CALL func f() 4705708
 CALL func (RSP + -72) VZERO VZERO
 CALL func f() 62
f() CALL func f() (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
4705708 PTRSUB 0 4705708
(f() / 2147483647) SUBPIECE f() 0
f() CALL func
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 104) INT_ADD ARG1 104
 CALL func (ARG1 + 104) ARG1 ARG2 (ARG1 + 104)
 RETURN 0
[ARG1] LOAD 433 ARG1
 CALL func ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
(ARG3 - ([(ARG2 + 32)] / 2147483647)) INT_SUB ARG3 ([(ARG2 + 32)] / 2147483647)
(ARG2 + 32) INT_ADD ARG2 32
(ARG2 + 24) INT_ADD ARG2 24
(ARG2 + 32) INT_ADD ARG2 32
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
(ARG2 + 24) CAST (ARG2 + 24)
f() CALL func
(ARG2 + 32) CAST (ARG2 + 32)
 CALL func f() [(ARG2 + 24)] [(ARG2 + 32)] f()
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
f() CALL func
 CALL func f() (ARG3 - ([(ARG2 + 32)] / 2147483647))
4705704 PTRSUB 0 4705704
 RETURN 0
([(ARG2 + 32)] / 2147483647) SUBPIECE [(ARG2 + 32)] 0
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
(ARG2 + 32) CAST (ARG2 + 32)
f() CALL func f() 4705704
 CALL func ARG1 ARG2 ARG3 ARG2
 CALL func f() = *cannot print option value* 
 RETURN 0
= *cannot print option value*  COPY = *cannot print option value* 
f() CALL func
 CALL func ARG3 ARG2 ARG6 ARG2
 RETURN 0
 CALL func (RSP + -17) ARG1 ARG2 ARG3 ARG4 ARG5
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
(RSP + -17) PTRSUB RSP -17
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 (ARG1 + 8)
0 COPY 0
 RETURN 0 0
0 INT_EQUAL ARG3 0
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 104) INT_ADD ARG1 104
(ARG1 + 88) INT_ADD ARG1 88
 CALL func ARG1 (ARG1 + 104) f() f() ARG2
(ARG1 + 88) INT_ADD ARG1 88
 RETURN 0
 CBRANCH (ARG3 INT_EQUAL 0)
 CBRANCH f()
1 COPY 1
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CALL func (ARG1 + 88)
f() CALL func f() f()
f() CALL func (ARG1 + 88)
 BRANCH VZERO
0 COPY 0
f() CALL func (ARG1 + 88)
f() CALL func (ARG1 + 88)
 RETURN 0
(ARG1 + 104) INT_ADD ARG1 104
 CALL func (ARG1 + 104) ARG2 (ARG1 + 104)
 RETURN 0
0 COPY 0
 RETURN 0 0
 RETURN 0
 CALL func 1 65535
 CALL func ARG1
 CALL libcall_operator.delete_thunk ARG1
 RETURN 0
1 COPY 1
 RETURN 0 1
 CALL func ARG1
 CALL libcall_operator.delete_thunk ARG1
 RETURN 0
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
[ARG1] LOAD 433 ARG1
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
 CALL libcall___assert_fail_thunk Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 1099 0
 RETURN 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!" COPY Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!"
0 COPY 0
 RETURN 1
0 INT_NOTEQUAL ARG3 0
[ARG1] LOAD 433 ARG1
 CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
[ARG2] LOAD 433 ARG2
 RETURN 0
[ARG1] CAST [ARG1]
 CBRANCH (ARG3 INT_NOTEQUAL 0)
 STORE 433 [ARG1] [ARG2]
ARG1 CAST ARG1
 STORE 433 ARG1 ARG2
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
 STORE 433 (ARG1 + 8) ARG3
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
(ARG1 + 17) INT_ADD ARG1 17
 STORE 433 (ARG1 + 16) 3
(ARG1 + 17) CAST (ARG1 + 17)
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG1 + 17) 5
 RETURN 1
llvm::Twine::Twine(const char*, const llvm::StringRef&) COPY llvm::Twine::Twine(const char*, const llvm::StringRef&)
isValid() && "Invalid twine!" COPY isValid() && "Invalid twine!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h
 CALL libcall___assert_fail_thunk isValid() && "Invalid twine!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h 362 llvm::Twine::Twine(const char*, const llvm::StringRef&)
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG5 COPY ARG5
ARG6 COPY ARG6
 STORE 433 ARG7 0
 STORE 433 ARG7 1
A_Stack[-0x2e0]:8 COPY A_Stack[-0x2e0]:8
 CBRANCH f()
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -744) PTRSUB RSP -744
A_Stack[-0x2e8]:8 COPY A_Stack[-0x2e8]:8
4703301 PTRSUB 0 4703301
 CALL func (RSP + -744) 4703301
A_Stack[-0x2e0]:8 COPY A_Stack[-0x2e0]:8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
A_Stack[-0x2e8]:8 COPY A_Stack[-0x2e8]:8
(f() + 40) CAST (f() + 40)
ARG6 COPY ARG6
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
ARG5 COPY ARG5
 CBRANCH (ARG6 INT_EQUAL A_Stack[-0x2e0]:8)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
0 INT_EQUAL ARG6 A_Stack[-0x2e0]:8
(f() + 40) INT_ADD f() 40
 CBRANCH f()
0 INT_NOTEQUAL f() [(f() + 40)]
0 INT_EQUAL f(ARG6) f()
 CALL func (RSP + -728) 4705711
f(ARG6) COPY f(ARG6)
f() COPY f()
 CBRANCH (f(ARG6) INT_EQUAL f())
 BRANCH VZERO
f(ARG5) COPY f(ARG5)
(RSP + -728) PTRSUB RSP -728
f() COPY f()
4705711 PTRSUB 0 4705711
1 COPY 1
f() COPY f()
 CBRANCH f()
f() COPY f()
 CBRANCH f()
 BRANCH VZERO
0 INT_EQUAL f(ARG6) f()
 CALL func (RSP + -632) False
f(ARG6) COPY f(ARG6)
f() COPY f()
 CBRANCH (f(ARG6) INT_EQUAL f())
f(ARG5) COPY f(ARG5)
False COPY False
(RSP + -632) PTRSUB RSP -632
f() COPY f()
f() COPY f()
 CBRANCH f()
1 COPY 1
f() COPY f()
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
f() CALL libcall_memcmp_thunk f(ARG5) f() f()
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_memcmp_thunk f(ARG5) f() f()
0 COPY 0
 BRANCH VZERO
f(ARG5) COPY f(ARG5)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
f() COPY f()
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
f() COPY f()
f(ARG5) COPY f(ARG5)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
f() COPY f()
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
f() COPY f()
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
f() CALL libcall_memcmp_thunk f(ARG5) f() f()
 CBRANCH (f(ARG6) INT_EQUAL f())
f(ARG5) COPY f(ARG5)
f() COPY f()
f() COPY f()
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
 CBRANCH (f(ARG6) INT_EQUAL f())
f(ARG5) COPY f(ARG5)
f() COPY f()
f() COPY f()
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
 CBRANCH f()
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
f() CALL libcall_memcmp_thunk f(ARG5) f() f()
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
f() CALL libcall_memcmp_thunk f(ARG5) f() f()
0 COPY 0
 CBRANCH (f(ARG6) INT_EQUAL f())
f() COPY f()
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
f(ARG5) COPY f(ARG5)
f() COPY f()
(RSP + -712) PTRSUB RSP -712
f() COPY f()
f() COPY f()
f() COPY f()
 CBRANCH f()
f() COPY f()
f(ARG6) COPY f(ARG6)
f(ARG5) COPY f(ARG5)
0 INT_EQUAL f(ARG6) f()
 CALL func (RSP + -712) 4705716
4705716 PTRSUB 0 4705716
f() COPY f()
f() COPY f()
 CBRANCH f()
f() COPY f()
f() COPY f()
f(ARG6) COPY f(ARG6)
4705746 PTRSUB 0 4705746
f(ARG5) COPY f(ARG5)
0 INT_EQUAL f(ARG6) f()
(RSP + -616) PTRSUB RSP -616
 CALL func (RSP + -616) 4705746
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH (A_Stack[-0x2e0]:8 INT_EQUAL 0)
 BRANCH VZERO
f() CALL libcall_memcmp_thunk ARG5 A_Stack[-0x2e8]:8 A_Stack[-0x2e0]:8
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
f() CALL libcall_memcmp_thunk f(ARG5) f() f()
 BRANCH VZERO
 CBRANCH (f(ARG6) INT_EQUAL f())
f() COPY f()
f() COPY f()
f(ARG5) COPY f(ARG5)
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
 CBRANCH f()
(RSP + -88) PTRSUB RSP -88
(RSP + -152) PTRSUB RSP -152
(RSP + -1016) PTRSUB RSP -1016
' is invalid value for boolean argument! Try 0 or 1 COPY ' is invalid value for boolean argument! Try 0 or 1
(RSP + -120) PTRSUB RSP -120
4705804 PTRSUB 0 4705804
 BRANCH VZERO
 CALL func (RSP + -600)
 CALL func (RSP + -152) 4705804 (RSP + -1016)
(RSP + -152) PTRSUB RSP -152
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -88) (RSP + -152) (RSP + -120) (RSP + -152)
(RSP + -120) PTRSUB RSP -120
0 COPY 0
f() CALL func f(ARG2) (RSP + -88) f() f()
(RSP + -600) PTRSUB RSP -600
 CALL func (RSP + -120) ' is invalid value for boolean argument! Try 0 or 1
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
0 COPY 0
 BRANCH VZERO
f() CALL libcall_memcmp_thunk f(ARG5) f() f()
0 COPY 0
0 COPY 0
 BRANCH VZERO
f() CALL libcall_memcmp_thunk f(ARG5) f() f()
4705721 PTRSUB 0 4705721
f(ARG6) COPY f(ARG6)
f() COPY f()
f(ARG5) COPY f(ARG5)
(RSP + -696) PTRSUB RSP -696
0 INT_EQUAL f(ARG6) f()
 CALL func (RSP + -696) 4705721
f() COPY f()
f() COPY f()
 CBRANCH f()
f() COPY f()
 CBRANCH f()
f() COPY f()
(RSP + -648) PTRSUB RSP -648
FALSE COPY FALSE
f(ARG6) COPY f(ARG6)
f() COPY f()
 CALL func (RSP + -648) FALSE
0 INT_EQUAL f(ARG6) f()
f() COPY f()
 CBRANCH (f(ARG6) INT_EQUAL f())
f() COPY f()
f(ARG5) COPY f(ARG5)
1 COPY 1
 BRANCH VZERO
 BRANCH VZERO
1 COPY 1
0 INT_NOTEQUAL f() 0
A_Stack[-0x2e8]:8 COPY A_Stack[-0x2e8]:8
ARG5 COPY ARG5
0 INT_EQUAL A_Stack[-0x2e0]:8 0
A_Stack[-0x2e0]:8 COPY A_Stack[-0x2e0]:8
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
f(ARG5) COPY f(ARG5)
f() COPY f()
f() COPY f()
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
f() COPY f()
f(ARG5) COPY f(ARG5)
4705726 PTRSUB 0 4705726
f() COPY f()
f(ARG6) COPY f(ARG6)
f() COPY f()
(RSP + -680) PTRSUB RSP -680
0 INT_EQUAL f(ARG6) f()
 CALL func (RSP + -680) 4705726
f() COPY f()
 CBRANCH (f(ARG6) INT_EQUAL f())
f(ARG5) COPY f(ARG5)
0 INT_EQUAL f(ARG6) f()
 BRANCH VZERO
 CALL func (RSP + -664) false
f() COPY f()
0 COPY 0
f() COPY f()
f() COPY f()
(RSP + -664) PTRSUB RSP -664
f() COPY f()
false COPY false
f(ARG6) COPY f(ARG6)
f() COPY f()
f() COPY f()
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
f(ARG5) COPY f(ARG5)
f() CALL func (ARG1 + 112) ARG1 ARG3 ARG4 ARG5 ARG6 (RSP + -33)
(ARG1 + 112) INT_ADD ARG1 112
 CALL func ARG1 ARG2 ARG2
(ARG1 + 88) INT_ADD ARG1 88
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
(RSP + -33) PTRSUB RSP -33
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
-1 COPY -1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f() 0
-1 BOOL_NEGATE 0
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -33) PTRSUB RSP -33
 CALL func (ARG1 + 88) (RSP + -33) 0 (ARG1 + 88)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 -1
(ARG1 + 112) INT_ADD ARG1 112
 RETURN 0
 CALL func (ARG1 + 112)
 CALL func (ARG1 + 112) ARG1 (ARG1 + 112)
(ARG1 + 112) INT_ADD ARG1 112
 RETURN 0
 CALL func (ARG1 + 112) ARG1 ARG2 (ARG1 + 112)
(ARG1 + 112) INT_ADD ARG1 112
 RETURN 0
(ARG1 + 9) INT_ADD ARG1 9
(ARG1 + 8) INT_ADD ARG1 8
[ARG2] LOAD 433 ARG2
[(ARG1 + 9)] LOAD 433 (ARG1 + 9)
 RETURN 0 f()
0 INT_EQUAL [(ARG1 + 9)] 0
 CBRANCH ([(ARG1 + 9)] INT_EQUAL 0)
(ARG1 + 9) CAST (ARG1 + 9)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL [ARG2])
0 COPY 0
1 COPY 1
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_EQUAL [(ARG1 + 8)] [ARG2]
 STORE 433 ARG1 Symbol
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
 CALL func ARG1 ARG2 ARG2
ARG1 CAST ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 Symbol
(ARG2 + 8) INT_ADD ARG2 8
(ARG2 + 9) INT_ADD ARG2 9
 STORE 433 (ARG1 + 9) [(ARG2 + 9)]
(ARG1 + 8) CAST (ARG1 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
 RETURN 0
(ARG1 + 9) CAST (ARG1 + 9)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG1 + 9) INT_ADD ARG1 9
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
[(ARG2 + 9)] LOAD 433 (ARG2 + 9)
(ARG2 + 9) CAST (ARG2 + 9)
 STORE 433 (ARG1 + 8) [(ARG2 + 8)]
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 9) INT_ADD ARG1 9
 CBRANCH ([(ARG1 + 9)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 9)] 0
(ARG1 + 9) CAST (ARG1 + 9)
[(ARG1 + 9)] LOAD 433 (ARG1 + 9)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
 RETURN 0 (ARG1 + 8)
 RETURN 1
Valid && "invalid option value" COPY Valid && "invalid option value"
const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = bool] COPY const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = bool]
 CALL libcall___assert_fail_thunk Valid && "invalid option value" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 411 const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = bool]
(ARG1 + 9) INT_ADD ARG1 9
 RETURN 0 [(ARG1 + 9)]
[(ARG1 + 9)] COPY [(ARG1 + 9)]
(ARG1 + 9) CAST (ARG1 + 9)
[(ARG1 + 9)] LOAD 433 (ARG1 + 9)
(ARG1 + 40) PTRADD ARG1 5 8
 STORE 433 ARG1 Symbol
 CALL func ARG1 0
 STORE 433 (ARG1 + 40) ARG2
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func ARG1 ARG2 ARG5 ARG2
f() CALL func ARG4
f() CALL func ARG4
 CALL func (RSP + -120) ARG3 ARG3
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -120) PTRSUB RSP -120
 CALL func f() (RSP + -72) f()
f() CALL func f() f()
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(RSP + -72) PTRSUB RSP -72
 CALL libcall_basic_string_thunk
4705983 PTRSUB 0 4705983
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func
 CALL libcall_~basic_string_thunk (RSP + -72)
(RSP + -72) PTRSUB RSP -72
(RSP + -120) PTRSUB RSP -120
f() CALL func f() 4705968
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_LESS f() 8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_LESS 8)
(RSP + -72) PTRSUB RSP -72
4705968 PTRSUB 0 4705968
 CALL func f() 4705983
 CALL func (RSP + -120) (RSP + -72) (RSP + -72)
(RSP + -120) PTRSUB RSP -120
f() CALL func
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
f() CALL func
 CALL func f() (default: 
f() CALL libcall_size_thunk
(default:  COPY (default: 
0 INT_NOTEQUAL f() [(f() + 40)]
 CALL func (RSP + -120)
0 COPY 0
 BRANCH VZERO
f() CALL libcall_size_thunk
(8 - f()) INT_SUB 8 f()
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CALL func f() *no default*
f() CALL func
 CALL func f() [f()]
 BRANCH VZERO
f() CAST f()
[f()] LOAD 433 f()
f() CALL func
*no default* COPY *no default*
 CALL func ARG3 ARG2 [ARG4] (RSP + -40) ARG6
[ARG4] LOAD 433 ARG4
 CALL func (RSP + -40) ARG5 ARG5
40 CAST 40
[40] LOAD 433 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -40) PTRSUB RSP -40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -40) PTRSUB RSP -40
40 INT_ADD 0 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALL func (RSP + -17) ARG1 ARG2 ARG3 ARG4 ARG5
(RSP + -17) PTRSUB RSP -17
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALL func ARG1
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 (ARG1 + 8)
0 INT_EQUAL ARG3 0
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 88) INT_ADD ARG1 88
 CALL func ARG1 (ARG1 + 112) f() f() ARG2
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 112) INT_ADD ARG1 112
 RETURN 0
 CBRANCH f()
 CBRANCH (ARG3 INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
f() CALL func (ARG1 + 88)
f() CALL func (ARG1 + 88)
f() CALL func f() f()
f() CALL func (ARG1 + 88)
f() CALL func (ARG1 + 88)
0 INT_EQUAL f() 0
(ARG1 + 112) INT_ADD ARG1 112
 CALL func (ARG1 + 112) ARG2 (ARG1 + 112)
 RETURN 0
f() CALL func ARG1 f() f()
f() CALL func ARG2
f() CALL func ARG2
 RETURN 0 f()
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
 BRANCH VZERO
0 COPY 0
(ARG1 + 12) INT_ADD ARG1 12
 RETURN 0 [(ARG1 + 12)]
[(ARG1 + 12)] COPY [(ARG1 + 12)]
(ARG1 + 12) CAST (ARG1 + 12)
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 8) INT_ADD ARG1 8
0 INT_EQUAL [(ARG1 + 12)] 0
(ARG1 + 12) CAST (ARG1 + 12)
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
 CBRANCH ([(ARG1 + 12)] INT_EQUAL 0)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
 RETURN 0 (ARG1 + 8)
 RETURN 1
Valid && "invalid option value" COPY Valid && "invalid option value"
const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = unsigned int] COPY const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = unsigned int]
 CALL libcall___assert_fail_thunk Valid && "invalid option value" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 411 const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = unsigned int]
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 8) INT_ADD ARG1 8
[ARG2] LOAD 433 ARG2
 RETURN 0 f()
0 INT_EQUAL [(ARG1 + 12)] 0
 CBRANCH ([(ARG1 + 12)] INT_EQUAL 0)
(ARG1 + 12) CAST (ARG1 + 12)
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(ARG1 + 8) CAST (ARG1 + 8)
0 COPY 0
0 INT_EQUAL [(ARG1 + 8)] [ARG2]
 CBRANCH ([(ARG1 + 8)] INT_EQUAL [ARG2])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
1 COPY 1
f() CALL func ARG1 f() f()
f() CALL func ARG2
f() CALL func ARG2
 RETURN 0 f()
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
 BRANCH VZERO
0 COPY 0
ARG1 COPY ARG1
f() CALL func ARG1 ARG2 ARG2
ARG2 COPY ARG2
0 INT_NOTEQUAL 0 [(f() + 40)]
f() CALL func
 CBRANCH (f() INT_LESS 65)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
0 INT_LESS f() 65
(RSP + -120) PTRSUB RSP -120
f() CALL func ARG1 f() f() f()
f() CALL func (RSP + -72) f() f()
0 INT_NOTEQUAL (f() & 63) 0
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -72) f() f()
 CALL func (RSP + -120) f() f()
 CALL func (RSP + -72) ARG1 f() ARG1
(RSP + -72) PTRSUB RSP -72
(f() & 63) INT_AND f() 63
(ARG1 + (f() & -64)) INT_ADD ARG1 (f() & -64)
(f(ARG1) + 64) INT_ADD f(ARG1) 64
(RSP + -72) PTRSUB RSP -72
f() COPY f()
0 INT_NOTEQUAL (f(ARG1) + 64) f(ARG1)
 CBRANCH ((f(ARG1) + 64) INT_NOTEQUAL f(ARG1))
 CBRANCH ((f() & 63) INT_NOTEQUAL 0)
(f() & -64) INT_AND f() -64
 BRANCH VZERO
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 RETURN 1
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -72) (f(ARG1) + 64) (f(ARG1) + 64)
(f(ARG2) + -64) INT_ADD f(ARG2) -64
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -72) (f(ARG2) + -64) (f(ARG2) + -64)
 CALL func ARG1 ARG2 ARG2
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
(FS_OFFSET + 40) INT_ADD 0 40
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[40] LOAD 433 40
f() CALL func [ARG1] ([ARG1] + ([(ARG1 + 8)] * 4)) ([ARG1] + ([(ARG1 + 8)] * 4))
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -24) PTRSUB RSP -24
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -24)
([(ARG1 + 8)] * 4) INT_MULT [(ARG1 + 8)] 4
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
([ARG1] + ([(ARG1 + 8)] * 4)) INT_ADD [ARG1] ([(ARG1 + 8)] * 4)
40 CAST 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL libcall_memcmp_thunk [ARG1] ARG2 ([(ARG1 + 8)] * 4)
0 INT_EQUAL [(ARG1 + 8)] ARG3
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL ARG3)
 RETURN 0 f()
 BRANCH VZERO
(-256 & (0 # f())) INT_AND (0 # f()) -256
(-256 & (0 # f())) INT_OR (-256 & (0 # f())) 0
(0 # f()) PIECE 0 f()
0 COPY 0
([(ARG1 + 8)] * 4) INT_MULT [(ARG1 + 8)] 4
[(ARG1 + 8)] CAST [(ARG1 + 8)]
0 INT_ZEXT 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_EQUAL f() 0
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL libcall_memcmp_thunk [ARG1] ARG2 ([(ARG1 + 8)] * 4)
ARG3 CAST ARG3
0 INT_LESS [(ARG1 + 8)] ARG3
0 INT_EQUAL [(ARG1 + 8)] ARG3
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0 f(ARG3)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL ARG3)
0 INT_ZEXT 0
 BRANCH VZERO
(f() / 2147483647) INT_RIGHT f() 31
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] * 4) INT_MULT [(ARG1 + 8)] 4
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] CAST [(ARG1 + 8)]
(f() / 2147483647) INT_ZEXT (f() / 2147483647)
(ARG3 & -256) INT_OR (ARG3 & -256) 0
(ARG3 & -256) INT_AND ARG3 -256
 RETURN 0
(ARG2 - ARG1) INT_SUB ARG2 ARG1
 RETURN 0 ((ARG2 - ARG1) / 4)
((ARG2 - ARG1) / 4) INT_SRIGHT (ARG2 - ARG1) 2
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
[40] LOAD 433 40
 CALL func (RSP + -48)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -48) PTRSUB RSP -48
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
 RETURN 0 [(ARG1 + 16)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
(ARG1 + 16) CAST (ARG1 + 16)
 CALL libcall_memcpy_thunk ARG3 ARG1 (((ARG2 - ARG1) / 4) * 4)
ARG1 CAST ARG1
0 INT_NOTEQUAL ARG1 ARG2
ARG2 CAST ARG2
 CBRANCH (ARG1 INT_NOTEQUAL ARG2)
 RETURN 0
(((ARG2 - ARG1) / 4) * 4) INT_MULT ((ARG2 - ARG1) / 4) 4
(ARG2 - ARG1) INT_SUB ARG2 ARG1
((ARG2 - ARG1) / 4) INT_SRIGHT (ARG2 - ARG1) 2
(ARG2 - ARG1) CAST (ARG2 - ARG1)
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
 CALL func ARG1 ([(ARG1 + 8)] + (f() * 4)) ([(ARG1 + 8)] + (f() * 4))
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 ((([(ARG1 + 8)] - [ARG1]) / 4) + f()) ((([(ARG1 + 8)] - [ARG1]) / 4) + f())
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG2 ARG3 ARG3
 CALL func ARG2 ARG3 [(ARG1 + 8)] 0
 RETURN 0
 CBRANCH (((f() - [(ARG1 + 8)]) / 4) INT_LESS f())
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() - [(ARG1 + 8)]) INT_SUB f() [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
((f() - [(ARG1 + 8)]) / 4) CAST ((f() - [(ARG1 + 8)]) / 4)
((f() - [(ARG1 + 8)]) / 4) INT_SRIGHT (f() - [(ARG1 + 8)]) 2
(f() * 4) INT_MULT f() 4
0 INT_LESS ((f() - [(ARG1 + 8)]) / 4) f()
([(ARG1 + 8)] + (f() * 4)) INT_ADD (f() * 4) [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
((([(ARG1 + 8)] - [ARG1]) / 4) + f()) INT_ADD (([(ARG1 + 8)] - [ARG1]) / 4) f()
(([(ARG1 + 8)] - [ARG1]) / 4) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 2
 CALL func ARG1 (RSP + -24) (RSP + -16) ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
 RETURN 0
(RSP + -24) PTRSUB RSP -24
(RSP + -16) PTRSUB RSP -16
ARG2 COPY ARG2
 CALL func ARG1 (RSP + -20) (RSP + -20)
40 INT_ADD 0 40
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
(RSP + -20) PTRSUB RSP -20
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
(ARG2 - ARG1) INT_SUB ARG2 ARG1
 RETURN 0 ((ARG2 - ARG1) / 4)
((ARG2 - ARG1) / 4) INT_SRIGHT (ARG2 - ARG1) 2
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
40 CAST 40
 CALL func (RSP + -48)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[40] LOAD 433 40
(RSP + -48) PTRSUB RSP -48
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 CALL libcall_memcpy_thunk ARG3 ARG1 (((ARG2 - ARG1) / 4) * 4)
ARG1 CAST ARG1
0 INT_NOTEQUAL ARG1 ARG2
ARG2 CAST ARG2
 CBRANCH (ARG1 INT_NOTEQUAL ARG2)
 RETURN 0
(((ARG2 - ARG1) / 4) * 4) INT_MULT ((ARG2 - ARG1) / 4) 4
(ARG2 - ARG1) INT_SUB ARG2 ARG1
((ARG2 - ARG1) / 4) INT_SRIGHT (ARG2 - ARG1) 2
(ARG2 - ARG1) CAST (ARG2 - ARG1)
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
 CALL func ARG1 ([(ARG1 + 8)] + (f() * 4)) ([(ARG1 + 8)] + (f() * 4))
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 ((([(ARG1 + 8)] - [ARG1]) / 4) + f()) ((([(ARG1 + 8)] - [ARG1]) / 4) + f())
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG2 ARG3 [(ARG1 + 8)] 0
f() CALL func ARG2 ARG3 ARG3
([(ARG1 + 8)] + (f() * 4)) INT_ADD (f() * 4) [(ARG1 + 8)]
 RETURN 0
 CBRANCH (((f() - [(ARG1 + 8)]) / 4) INT_LESS f())
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() - [(ARG1 + 8)]) INT_SUB f() [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
((f() - [(ARG1 + 8)]) / 4) CAST ((f() - [(ARG1 + 8)]) / 4)
((f() - [(ARG1 + 8)]) / 4) INT_SRIGHT (f() - [(ARG1 + 8)]) 2
(f() * 4) INT_MULT f() 4
0 INT_LESS ((f() - [(ARG1 + 8)]) / 4) f()
(([(ARG1 + 8)] - [ARG1]) / 4) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 2
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
((([(ARG1 + 8)] - [ARG1]) / 4) + f()) INT_ADD (([(ARG1 + 8)] - [ARG1]) / 4) f()
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -56) (RSP + -56)
ARG2 COPY ARG2
ARG3 COPY ARG3
(ARG3 / 2147483647) SUBPIECE ARG3 0
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL (ARG3 / 2147483647) 0
 CBRANCH ((ARG3 / 2147483647) INT_EQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
(RSP + -56) PTRSUB RSP -56
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CBRANCH ((f(ARG3) - f(ARG3)) INT_NOTEQUAL 1)
 BRANCH VZERO
(RSP + -88) PTRSUB RSP -88
(f(ARG3) + -2) INT_SUB f(ARG3) -2
 CALL func f(ARG1) (RSP + -52) (RSP + -52)
f() INT_ZEXT f()
f() INT_ZEXT f()
f() INT_ZEXT f()
(f(ARG3) + -1) INT_SUB f(ARG3) -1
f() CALL func (RSP + -88) (f(ARG3) + 3) (f(ARG3) + 3)
f() CALL func (RSP + -88) (f(ARG3) + -2) (f(ARG3) + -2)
(f() | (f() * 256)) INT_OR f() (f() * 256)
(f() * 256) INT_LEFT f() 8
(f() * 256) INT_LEFT f() 8
(RSP + -88) PTRSUB RSP -88
f() CALL func (RSP + -88) (f(ARG3) + -1) (f(ARG3) + -1)
(f() | (f() * 256)) INT_OR f() (f() * 256)
(RSP + -52) PTRSUB RSP -52
(f(ARG3) + 3) INT_SUB f(ARG3) 3
(RSP + -88) PTRSUB RSP -88
 CBRANCH ((f(ARG3) - f(ARG3)) INT_NOTEQUAL 3)
0 INT_NOTEQUAL (f(ARG3) - f(ARG3)) 1
0 INT_EQUAL (ARG2 & 3) 0
(f(ARG3) - f(ARG3)) INT_SUB f(ARG3) f(ARG3)
0 INT_EQUAL (f(ARG3) - f(ARG3)) 2
 CBRANCH ((f(ARG3) - f(ARG3)) INT_EQUAL 2)
(ARG2 & 3) INT_AND ARG2 3
0 COPY 0
0 COPY 0
ARG2 COPY ARG2
 CBRANCH ((ARG2 & 3) INT_EQUAL 0)
(ARG3 / 8589934588) INT_RIGHT (ARG3 / 2147483647) 2
0 INT_NOTEQUAL (f(ARG3) - f(ARG3)) 3
((ARG3 / 8589934588) + 1) INT_ADD (ARG3 / 8589934588) 1
(ARG3 / 8589934588) INT_ZEXT (ARG3 / 8589934588)
4 COPY 4
(((ARG3 / 8589934588) * 4) + ARG2) INT_ADD ((ARG3 / 8589934588) * 4) ARG2
((ARG3 / 8589934588) * 4) INT_MULT (ARG3 / 8589934588) 4
(((ARG3 / 8589934588) + 1) * 4) INT_MULT ((ARG3 / 8589934588) + 1) 4
 CBRANCH (f() INT_LESSEQUAL f(ARG3))
 BRANCH VZERO
 CALL func ARG1 ARG2 (((ARG3 / 8589934588) * 4) + ARG2) ARG2
0 INT_LESSEQUAL f() f(ARG3)
(f() + 4) INT_ADD f() 4
((f() * 256) | ((f() * 65536) | (f() * 16777216))) INT_OR ((f() * 65536) | (f() * 16777216)) (f() * 256)
(f() * 256) INT_LEFT f() 8
((f() * 65536) | (f() * 16777216)) INT_OR (f() * 16777216) (f() * 65536)
(RSP + -88) PTRSUB RSP -88
f() CALL func (RSP + -88) (f() + -1) (f() + -1)
(f() + -1) INT_SUB f() -1
(RSP + -88) PTRSUB RSP -88
f() INT_ZEXT f()
f() CALL func (RSP + -88) (f() + -4) (f() + -4)
 BRANCH VZERO
(f() + -3) INT_SUB f() -3
(f() + -4) INT_SUB f() -4
(f() * 65536) INT_LEFT f() 16
(f() * 16777216) INT_LEFT f() 24
(RSP + -52) PTRSUB RSP -52
f() INT_ZEXT f()
f() INT_ZEXT f()
(f() | ((f() * 256) | ((f() * 65536) | (f() * 16777216)))) INT_OR f() ((f() * 256) | ((f() * 65536) | (f() * 16777216)))
(f() + -2) INT_SUB f() -2
(RSP + -88) PTRSUB RSP -88
f() CALL func (RSP + -88) (f() + -3) (f() + -3)
(RSP + -88) PTRSUB RSP -88
f() INT_ZEXT f()
f() CALL func (RSP + -88) (f() + -2) (f() + -2)
 CALL func f(ARG1) (RSP + -52) (RSP + -52)
 CALL func ARG1 [ARG2] [(ARG2 + 8)] [ARG2]
(ARG2 + 8) PTRADD ARG2 1 8
[ARG2] LOAD 433 ARG2
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 RETURN 0
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 (ARG1 + 8) ARG3
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
f() CALL func ARG1 ARG2 ([(ARG1 + 8)] - [ARG1])
(RSP + -56) PTRSUB RSP -56
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (RSP + -56)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
40 INT_ADD 0 40
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(([(ARG1 + 8)] - [ARG1]) / 4) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 2
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -56) f() (([(ARG1 + 8)] - [ARG1]) / 4) f()
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1 ARG2 ([(ARG1 + 8)] - [ARG1])
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func (RSP + -56) ARG2 ARG3 ARG2
[40] LOAD 433 40
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(([(ARG1 + 8)] - [ARG1]) / 4) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 2
 CALL func (RSP + -56) f() (([(ARG1 + 8)] - [ARG1]) / 4) f()
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(RSP + -56) PTRSUB RSP -56
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
[ARG2] LOAD 433 ARG2
f() CALL func ARG2 ARG2 ([(ARG2 + 8)] - [ARG2])
(ARG2 + 8) PTRADD ARG2 1 8
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
([(ARG2 + 8)] - [ARG2]) INT_SUB [(ARG2 + 8)] [ARG2]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(([(ARG2 + 8)] - [ARG2]) / 4) INT_SRIGHT ([(ARG2 + 8)] - [ARG2]) 2
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -56) f() (([(ARG2 + 8)] - [ARG2]) / 4) f()
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
[ARG1] LOAD 433 ARG1
f() CALL func ARG1 ARG2 ([(ARG1 + 8)] - [ARG1])
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func (RSP + -56) ARG2 ARG3 ARG2
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
(([(ARG1 + 8)] - [ARG1]) / 4) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 2
(RSP + -56) PTRSUB RSP -56
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -56) f() (([(ARG1 + 8)] - [ARG1]) / 4) f()
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG2 ARG2 ([(ARG2 + 8)] - [ARG2])
(ARG2 + 8) PTRADD ARG2 1 8
[ARG2] LOAD 433 ARG2
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
([(ARG2 + 8)] - [ARG2]) INT_SUB [(ARG2 + 8)] [ARG2]
(RSP + -56) PTRSUB RSP -56
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(([(ARG2 + 8)] - [ARG2]) / 4) INT_SRIGHT ([(ARG2 + 8)] - [ARG2]) 2
40 INT_ADD 0 40
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -56) f() (([(ARG2 + 8)] - [ARG2]) / 4) f()
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
(ARG1 + 24) INT_ADD ARG1 24
 CALL func ARG1 (ARG1 + 24) ARG2 ARG3
 RETURN 0
 CALL func ARG1 (ARG2 * 8) 8 (ARG2 * 8)
(ARG2 * 8) INT_MULT ARG2 8
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 STORE 433 (ARG1 + 8) ARG2
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1 ([(ARG1 + 8)] + 8) ([(ARG1 + 8)] + 8)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1 0
[ARG2] LOAD 433 ARG2
 STORE 433 [(ARG1 + 8)] [ARG2]
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH ([(ARG1 + 16)] INT_LESSEQUAL [(ARG1 + 8)])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + 8) INT_ADD [(ARG1 + 8)] 8
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_LESSEQUAL [(ARG1 + 16)] [(ARG1 + 8)]
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 f()
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 128) PTRADD ARG1 16 8
(ARG1 + 16) PTRADD ARG1 2 8
f() CALL func (4294967295 & (([(ARG1 + 24)] - [(ARG1 + 16)]) / 8)) ARG2 ([(ARG1 + 24)] - [(ARG1 + 16)])
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
40 INT_ADD 0 40
f() CALL func (ARG1 + 128) f() 0 (ARG1 + 128)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(([(ARG1 + 24)] - [(ARG1 + 16)]) / 8) INT_SRIGHT ([(ARG1 + 24)] - [(ARG1 + 16)]) 3
[40] LOAD 433 40
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (ARG1 + 16) (RSP + -56) (ARG1 + 16)
(ARG1 + 16) COPY (ARG1 + 16)
(ARG1 + 16) COPY (ARG1 + 16)
(f() + f()) INT_ADD f() f()
([(ARG1 + 24)] - [(ARG1 + 16)]) INT_SUB [(ARG1 + 24)] [(ARG1 + 16)]
(4294967295 & (([(ARG1 + 24)] - [(ARG1 + 16)]) / 8)) INT_AND (([(ARG1 + 24)] - [(ARG1 + 16)]) / 8) 4294967295
 STORE 433 (ARG1 + 8) (f() + f())
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALL func ARG1 (ARG1 + 24) ARG2 ARG3
(ARG1 + 24) INT_ADD ARG1 24
 RETURN 0
 CALL func ARG1 (ARG2 * 16) 16 (ARG2 * 16)
(ARG2 * 16) INT_LEFT ARG2 4
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 STORE 433 (ARG1 + 8) ARG2
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
 CALL func ARG1 0
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1 ([(ARG1 + 8)] + 16) ([(ARG1 + 8)] + 16)
(ARG1 + 8) INT_ADD ARG1 8
(ARG2 + 8) PTRADD ARG2 1 8
[ARG2] LOAD 433 ARG2
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 ([(ARG1 + 8)] + 8) [(ARG2 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_LESSEQUAL [(ARG1 + 16)] [(ARG1 + 8)]
 STORE 433 [(ARG1 + 8)] [ARG2]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 16) CAST (ARG1 + 16)
([(ARG1 + 8)] + 8) PTRADD [(ARG1 + 8)] 1 8
 CBRANCH ([(ARG1 + 16)] INT_LESSEQUAL [(ARG1 + 8)])
([(ARG1 + 8)] + 16) INT_ADD [(ARG1 + 8)] 16
 RETURN 0
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
0 INT_LESS ((ARG2 + ARG1) + 1) ARG1
(ARG2 + ARG1) INT_ADD ARG2 ARG1
(ARG2 + ARG1) INT_ADD ARG2 ARG1
0 INT_NOTEQUAL ARG2 0
f() CALL func ARG2
(~(ARG2) + 1) INT_2COMP ARG2
 CBRANCH (ARG2 INT_NOTEQUAL 0)
 CBRANCH (((ARG2 + ARG1) + 1) INT_LESS ARG1)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/MathExtras.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/MathExtras.h
 RETURN 1
((ARG2 + ARG1) + 1) INT_SUB (ARG2 + ARG1) 1
0 COPY 0
 RETURN 0 ((~(ARG2) + 1) & ((ARG2 + ARG1) + 1))
 CALL libcall___assert_fail_thunk 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/MathExtras.h 569 0
((~(ARG2) + 1) & ((ARG2 + ARG1) + 1)) INT_AND (~(ARG2) + 1) ((ARG2 + ARG1) + 1)
0 COPY 0
 CBRANCH (f() INT_EQUAL 1)
0 COPY 0
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/MathExtras.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/MathExtras.h
 RETURN 1
((ARG2 + ARG1) + 1) INT_SUB (ARG2 + ARG1) 1
 CALL libcall___assert_fail_thunk 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/MathExtras.h 567 0
0 INT_EQUAL f() 1
f() CALL func ARG1 ARG2 ARG2
(f() - ARG1) INT_SUB f() ARG1
 RETURN 0 (f() - ARG1)
(f() - ARG1) COPY (f() - ARG1)
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 [f(ARG2)]
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
 STORE 433 (ARG1 + 8) [f(ARG3)]
f(ARG2) CAST f(ARG2)
[f(ARG3)] LOAD 433 f(ARG3)
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG3) CAST f(ARG3)
 RETURN 0
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
 CALL func (RSP + -56) f(ARG1) f(ARG2) f(ARG1)
[40] LOAD 433 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
(RSP + -56) PTRSUB RSP -56
 RETURN 1
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 120) PTRADD ARG1 15 8
(ARG1 + 128) PTRADD ARG1 16 8
(ARG1 + 72) PTRADD ARG1 9 8
f(ARG1 , ARG2) LOAD 433 ARG1
f(ARG1 , ARG2) LOAD 433 ARG1
f(ARG1 , ARG2) LOAD 433 ARG1
 STORE 433 ARG1 ((f(ARG1 , ARG2) + f()) + ARG2)
(ARG1 + 120) PTRADD ARG1 15 8
 CALL func ARG1
f(ARG1 , ARG2) LOAD 433 ARG1
 STORE 433 ARG1 (ARG2 + f())
(ARG1 + 8) PTRADD ARG1 1 8
(ARG2 + f()) INT_ADD f() ARG2
((f(ARG1 , ARG2) + f()) + ARG2) INT_ADD (f(ARG1 , ARG2) + f()) ARG2
(ARG2 + f()) INT_ADD f() ARG2
0 INT_LESS (ARG2 + f()) ARG2
(ARG2 + f()) INT_ADD f() ARG2
(ARG3 + ARG2) INT_ADD ARG3 ARG2
([(ARG1 + 120)] + ARG2) INT_ADD [(ARG1 + 120)] ARG2
(ARG2 + f()) INT_ADD ARG2 f()
(ARG2 + f()) INT_ADD f() ARG2
f() CALL func f(ARG1 , ARG2) ARG3 ARG3
f() CALL func f(ARG1 , ARG2) ARG3 ARG3
0 INT_EQUAL ARG3 0
f() CALL func f() ARG3 ARG3
 CBRANCH (ARG3 INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Allocator.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Allocator.h
 CALL libcall___assert_fail_thunk Alignment > 0 && "0-byte alignnment is not allowed. Use 1 instead." /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Allocator.h 210 0
 STORE 433 (ARG1 + 120) ([(ARG1 + 120)] + ARG2)
 CBRANCH ((ARG2 + f()) INT_LESS ARG2)
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
[(ARG1 + 120)] LOAD 433 (ARG1 + 120)
0 COPY 0
Alignment > 0 && "0-byte alignnment is not allowed. Use 1 instead." COPY Alignment > 0 && "0-byte alignnment is not allowed. Use 1 instead."
([(ARG1 + 8)] - f(ARG1 , ARG2)) INT_SUB [(ARG1 + 8)] f(ARG1 , ARG2)
0 INT_LESS ([(ARG1 + 8)] - f(ARG1 , ARG2)) (ARG2 + f())
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 1
([(ARG1 + 8)] - f(ARG1 , ARG2)) CAST ([(ARG1 + 8)] - f(ARG1 , ARG2))
0 COPY 0
 CALL libcall___assert_fail_thunk Adjustment + Size >= Size && "Adjustment + Size must not overflow" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Allocator.h 216 0
Adjustment + Size >= Size && "Adjustment + Size must not overflow" COPY Adjustment + Size >= Size && "Adjustment + Size must not overflow"
 CBRANCH (([(ARG1 + 8)] - f(ARG1 , ARG2)) INT_LESS (ARG2 + f()))
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Allocator.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Allocator.h
 CBRANCH (((ARG3 + ARG2) + -1) INT_LESS 4097)
(f() / 2147483647) SUBPIECE f() 8
f() COPY f()
f() CALL func (RSP + -96) (RSP + -104) (RSP + -104)
[(ARG1 + 8)] CAST [(ARG1 + 8)]
(RSP + -40) PTRSUB RSP -40
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
 CALL func (ARG1 + 72) (RSP + -40) (ARG1 + 72)
0 INT_LESS (((ARG3 + ARG2) + -1) + f()) (ARG2 + f())
(RSP + -96) PTRSUB RSP -96
(f() / 2147483647) SUBPIECE f() 8
(RSP + -104) PTRSUB RSP -104
f() CALL func (ARG1 + 128) ((ARG3 + ARG2) + -1) 0 (ARG1 + 128)
0 INT_LESS [(ARG1 + 8)] (ARG2 + f())
 CBRANCH ((((ARG3 + ARG2) + -1) + f()) INT_LESS (ARG2 + f()))
 CBRANCH ([(ARG1 + 8)] INT_LESS (ARG2 + f()))
(((ARG3 + ARG2) + -1) + f()) INT_ADD ((ARG3 + ARG2) + -1) f()
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (0 INT_EQUAL [(f() + 40)])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(ARG1 , ARG2)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
 CALL libcall___assert_fail_thunk 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Allocator.h 241 0
0 COPY 0
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Allocator.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Allocator.h
0 INT_EQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
f() COPY f()
0 INT_LESS ((ARG3 + ARG2) + -1) 4097
((ARG3 + ARG2) + -1) INT_SUB (ARG3 + ARG2) -1
[(f() + 40)] LOAD 433 (f() + 40)
A_Stack[-0x48]:8 COPY A_Stack[-0x48]:8
A_Stack[-0x40]:8 COPY A_Stack[-0x40]:8
(f(ARG1 , ARG2) + f()) INT_ADD f() f(ARG1 , ARG2)
0 COPY 0
 RETURN 1
0 COPY 0
 CALL libcall___assert_fail_thunk 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Allocator.h 252 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Allocator.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/Allocator.h
(f() + 40) CAST (f() + 40)
 BRANCH VZERO
A_Stack[-0x38]:8 COPY A_Stack[-0x38]:8
A_Stack[-0x30]:8 COPY A_Stack[-0x30]:8
A_Stack[-0x40]:8 COPY A_Stack[-0x40]:8
A_Stack[-0x48]:8 COPY A_Stack[-0x48]:8
(f(ARG1 , ARG2) + f()) COPY (f(ARG1 , ARG2) + f())
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 (ARG2 * 4) 4 (ARG2 * 4)
(ARG2 * 4) INT_MULT ARG2 4
 RETURN 0
ARG1 CAST ARG1
 CALL libcall_memmove_thunk ARG3 ARG1 (((ARG2 - ARG1) / 4) * 4)
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG3 CAST ARG3
 CBRANCH (((ARG2 - ARG1) / 4) INT_NOTEQUAL 0)
 RETURN 0 (ARG3 + (((ARG2 - ARG1) / 4) * 4))
0 INT_NOTEQUAL ((ARG2 - ARG1) / 4) 0
((ARG2 - ARG1) / 4) INT_SRIGHT (ARG2 - ARG1) 2
(ARG3 + (((ARG2 - ARG1) / 4) * 4)) CAST (ARG3 + (((ARG2 - ARG1) / 4) * 4))
(ARG3 + (((ARG2 - ARG1) / 4) * 4)) INT_ADD ARG3 (((ARG2 - ARG1) / 4) * 4)
(((ARG2 - ARG1) / 4) * 4) INT_MULT ((ARG2 - ARG1) / 4) 4
(((ARG2 - ARG1) / 4) * 4) INT_MULT ((ARG2 - ARG1) / 4) 4
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 CALL func f() f() f()
 RETURN 0
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG2 (([(ARG1 + 8)] - [ARG1]) / 4) (([(ARG1 + 8)] - [ARG1]) / 4)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(([(ARG1 + 8)] - [ARG1]) / 4) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 2
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
40 CAST 40
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func (RSP + -40) f() (([(ARG1 + 8)] - [ARG1]) / 4) f()
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
(RSP + -40) PTRSUB RSP -40
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(([(ARG1 + 8)] - [ARG1]) / 4) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 2
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
(FS_OFFSET + 40) INT_ADD 0 40
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func [ARG1] [(ARG1 + 8)] f() [(ARG1 + 8)]
 RETURN 1
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) COPY (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
(ARG1 & 1) INT_AND ARG1 1
 RETURN 0 f(ARG1)
0 INT_NOTEQUAL (ARG1 & 1) 0
 CBRANCH ((ARG1 & 1) INT_NOTEQUAL 0)
 BRANCH VZERO
0 COPY 0
(ARG1 & 1) INT_AND ARG1 1
(ARG1 & -2) INT_AND ARG1 -2
0 INT_EQUAL (ARG1 & 1) 0
 CBRANCH ((ARG1 & 1) INT_EQUAL 0)
 RETURN 1
(Ptr & 1) && "Not a bucket pointer" COPY (Ptr & 1) && "Not a bucket pointer"
 RETURN 0 (ARG1 & -2)
void** GetBucketPtr(void*) COPY void** GetBucketPtr(void*)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/FoldingSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/FoldingSet.cpp
 CALL libcall___assert_fail_thunk (Ptr & 1) && "Not a bucket pointer" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/FoldingSet.cpp 203 void** GetBucketPtr(void*)
(ARG1 & (ARG3 + -1)) INT_AND (ARG3 + -1) ARG1
(ARG2 + ((ARG1 & (ARG3 + -1)) * 8)) INT_ADD ARG2 ((ARG1 & (ARG3 + -1)) * 8)
(ARG3 + -1) INT_SUB ARG3 -1
(ARG1 & (ARG3 + -1)) INT_ZEXT (ARG1 & (ARG3 + -1))
((ARG1 & (ARG3 + -1)) * 8) INT_MULT (ARG1 & (ARG3 + -1)) 8
 RETURN 0 (ARG2 + ((ARG1 & (ARG3 + -1)) * 8))
ARG1 INT_ZEXT ARG1
(ARG1 + 1) INT_ADD ARG1 1
(ARG1 * 8) INT_MULT ARG1 8
 STORE 433 ((ARG1 * 8) + f()) -1
f() CALL libcall_calloc_thunk (ARG1 + 1) 8
 RETURN 0 f()
f() COPY f()
(ARG1 + 1) INT_ZEXT (ARG1 + 1)
((ARG1 * 8) + f()) INT_ADD f() (ARG1 * 8)
f() CAST f()
((ARG1 * 8) + f()) CAST ((ARG1 * 8) + f())
 RETURN 0
0 INT_LESS ARG2 32
0 INT_LESS 5 ARG2
(ARG2 / 2147483647) SUBPIECE ARG2 0
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 Symbol
(ARG1 + 16) PTRADD ARG1 2 8
 CBRANCH (5 INT_LESS ARG2)
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
llvm::FoldingSetImpl::FoldingSetImpl(unsigned int) COPY llvm::FoldingSetImpl::FoldingSetImpl(unsigned int)
 RETURN 1
 CALL libcall___assert_fail_thunk 5 < Log2InitSize && Log2InitSize < 32 && "Initial hash table size out of range" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/FoldingSet.cpp 230 llvm::FoldingSetImpl::FoldingSetImpl(unsigned int)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/FoldingSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/FoldingSet.cpp
5 < Log2InitSize && Log2InitSize < 32 && "Initial hash table size out of range" COPY 5 < Log2InitSize && Log2InitSize < 32 && "Initial hash table size out of range"
 CBRANCH (ARG2 INT_LESS 32)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 STORE 433 (ARG1 + 8) f()
(ARG1 + 20) INT_ADD ARG1 20
f() CAST f()
(1 << (31 & (ARG2 / 2147483647))) INT_LEFT 1 (31 & (ARG2 / 2147483647))
(31 & (ARG2 / 2147483647)) INT_AND (ARG2 / 2147483647) 31
 STORE 433 (ARG1 + 16) (1 << (31 & (ARG2 / 2147483647)))
 STORE 433 (ARG1 + 20) 0
(ARG1 + 16) CAST (ARG1 + 16)
f() CALL func [(ARG1 + 16)]
(ARG1 + 20) CAST (ARG1 + 20)
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 0
ARG1 CAST ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 Symbol
(ARG2 + 8) INT_ADD ARG2 8
(ARG2 + 8) INT_ADD ARG2 8
(ARG2 + 16) INT_ADD ARG2 16
(ARG2 + 16) INT_ADD ARG2 16
(ARG2 + 20) INT_ADD ARG2 20
(ARG2 + 20) INT_ADD ARG2 20
Symbol PTRSUB 0 Symbol
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
Symbol CAST Symbol
(ARG2 + 8) CAST (ARG2 + 8)
 STORE 433 (ARG2 + 20) 0
[(ARG2 + 20)] LOAD 433 (ARG2 + 20)
(ARG1 + 20) CAST (ARG1 + 20)
 STORE 433 (ARG1 + 16) [(ARG2 + 16)]
(ARG2 + 20) CAST (ARG2 + 20)
 STORE 433 (ARG2 + 16) 0
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
(ARG2 + 16) CAST (ARG2 + 16)
(ARG2 + 20) CAST (ARG2 + 20)
 STORE 433 (ARG2 + 8) 0
(ARG1 + 20) INT_ADD ARG1 20
 STORE 433 (ARG1 + 8) [(ARG2 + 8)]
 RETURN 0
(ARG2 + 16) CAST (ARG2 + 16)
(ARG2 + 8) CAST (ARG2 + 8)
 STORE 433 (ARG1 + 20) [(ARG2 + 20)]
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 8) INT_ADD ARG1 8
ARG1 COPY ARG1
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
(ARG2 + 16) INT_ADD ARG2 16
(ARG2 + 20) INT_ADD ARG2 20
(ARG2 + 8) INT_ADD ARG2 8
(ARG2 + 8) INT_ADD ARG2 8
(ARG2 + 16) INT_ADD ARG2 16
(ARG2 + 20) INT_ADD ARG2 20
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG2 + 20) CAST (ARG2 + 20)
 STORE 433 (ARG2 + 20) 0
[(ARG2 + 20)] LOAD 433 (ARG2 + 20)
 CALL libcall_free_thunk [(ARG1 + 8)]
(ARG1 + 16) CAST (ARG1 + 16)
(ARG2 + 16) CAST (ARG2 + 16)
 STORE 433 (ARG1 + 16) [(ARG2 + 16)]
(ARG1 + 8) CAST (ARG1 + 8)
(ARG2 + 20) CAST (ARG2 + 20)
 STORE 433 (ARG2 + 16) 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
(ARG2 + 16) CAST (ARG2 + 16)
 RETURN 0 ARG1
 STORE 433 (ARG2 + 8) 0
 STORE 433 (ARG1 + 8) [(ARG2 + 8)]
(ARG2 + 8) CAST (ARG2 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 20) [(ARG2 + 20)]
(ARG1 + 20) CAST (ARG1 + 20)
 STORE 433 ARG1 Symbol
(ARG1 + 8) PTRADD ARG1 1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL libcall_free_thunk [(ARG1 + 8)]
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(([(ARG1 + 16)] * 8) + [(ARG1 + 8)]) CAST (([(ARG1 + 16)] * 8) + [(ARG1 + 8)])
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (ARG1 + 20) 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
 RETURN 0
 CALL libcall_memset_thunk [(ARG1 + 8)] 0 ([(ARG1 + 16)] * 8)
([(ARG1 + 16)] * 8) INT_MULT [(ARG1 + 16)] 8
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
(([(ARG1 + 16)] * 8) + [(ARG1 + 8)]) INT_ADD ([(ARG1 + 16)] * 8) [(ARG1 + 8)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (([(ARG1 + 16)] * 8) + [(ARG1 + 8)]) -1
(ARG1 + 20) CAST (ARG1 + 20)
([(ARG1 + 16)] * 8) INT_MULT [(ARG1 + 16)] 8
(ARG1 + 16) CAST (ARG1 + 16)
 CALL func ARG1 (ARG1 + 24) ARG2 (ARG1 + 24)
(ARG1 + 24) INT_ADD ARG1 24
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 (ARG2 * 4) (ARG2 * 4)
ARG2 INT_ZEXT ARG2
(ARG2 * 4) INT_MULT ARG2 4
 RETURN 0
 CALL func ARG1 32
 RETURN 0
 CALL func ARG1
 RETURN 0
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 (ARG1 + 8) [ARG1]
 RETURN 0
 CALL func [ARG1] [(ARG1 + 8)] [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func ARG1
 RETURN 0
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
 STORE 433 ARG1 ARG2
 RETURN 0
[ARG1] LOAD 433 ARG1
(ARG1 + 24) PTRADD ARG1 3 8
 RETURN 0 ([ARG1] & -256)
0 INT_EQUAL [ARG1] (ARG1 + 24)
([ARG1] & -256) INT_OR ([ARG1] & -256) 0
0 INT_ZEXT 0
[ARG1] CAST [ARG1]
[ARG1] CAST [ARG1]
([ARG1] & -256) INT_AND [ARG1] -256
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
 CALL func [ARG1] [(ARG1 + 8)] [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0
 CALL libcall_free_thunk [ARG1]
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
VZERO CALLIND [([ARG1] + 24)] ARG1 ARG2 (RSP + -184) ARG1
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1
ARG1 CAST ARG1
f() CALL func ARG2
 STORE 433 f(ARG3) ARG2
 CALL func ARG2 f(ARG2 , ARG3) f(ARG2 , ARG3)
ARG3 COPY ARG3
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
([(ARG1 + 20)] + 1) INT_ADD [(ARG1 + 20)] 1
([(ARG1 + 16)] * 2) INT_MULT [(ARG1 + 16)] 2
[(f() + 40)] LOAD 433 (f() + 40)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/FoldingSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/FoldingSet.cpp
(ARG1 + 20) CAST (ARG1 + 20)
!N->getNextInBucket() COPY !N->getNextInBucket()
void llvm::FoldingSetImpl::InsertNode(llvm::FoldingSetImpl::Node*, void*) COPY void llvm::FoldingSetImpl::InsertNode(llvm::FoldingSetImpl::Node*, void*)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 20) INT_ADD ARG1 20
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
(f() + 40) CAST (f() + 40)
f(ARG2 , ARG3) LOAD 433 f(ARG3)
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
0 INT_LESS ([(ARG1 + 16)] * 2) ([(ARG1 + 20)] + 1)
([(ARG1 + 16)] * 2) CAST ([(ARG1 + 16)] * 2)
 CBRANCH (([(ARG1 + 16)] * 2) INT_LESS ([(ARG1 + 20)] + 1))
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 1
(ARG1 + 20) INT_ADD ARG1 20
 CBRANCH (f(ARG2 , ARG3) INT_EQUAL 0)
 CALL libcall___assert_fail_thunk !N->getNextInBucket() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/FoldingSet.cpp 331 void llvm::FoldingSetImpl::InsertNode(llvm::FoldingSetImpl::Node*, void*)
([(ARG1 + 20)] + 1) INT_ADD [(ARG1 + 20)] 1
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
 STORE 433 (ARG1 + 20) ([(ARG1 + 20)] + 1)
0 INT_EQUAL f(ARG2 , ARG3) 0
(ARG1 + 20) CAST (ARG1 + 20)
(ARG1 + 20) CAST (ARG1 + 20)
(ARG1 + 20) INT_ADD ARG1 20
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
(f(ARG3) | 1) INT_OR f(ARG3) 1
f(ARG3) CAST f(ARG3)
f() CAST f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func (RSP + -184)
(RSP + -184) PTRSUB RSP -184
([ARG1] + 24) CAST ([ARG1] + 24)
([ARG1] + 24) INT_ADD [ARG1] 24
(RSP + -184) PTRSUB RSP -184
f() CALL func VZERO [(ARG1 + 8)] [(ARG1 + 16)]
[([ARG1] + 24)] LOAD 433 ([ARG1] + 24)
(RSP + -184) PTRSUB RSP -184
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
 CALL func (RSP + -184)
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
VZERO CALLIND [([ARG1] + 24)] ARG1 f(ARG1) (RSP + -184) ARG1
 CALL func ARG1 f(ARG1) f() f(ARG1)
ARG1 CAST ARG1
0 COPY 0
f() CALL func [(ARG1 + 16)]
(RSP + -184) PTRSUB RSP -184
(ARG1 + 16) CAST (ARG1 + 16)
 CALL func (RSP + -184)
(FS_OFFSET + 40) INT_ADD 0 40
 CALL libcall_free_thunk [(ARG1 + 8)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 20) INT_ADD ARG1 20
 CBRANCH (f() INT_NOTEQUAL [(ARG1 + 16)])
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 16)] * 2) INT_MULT [(ARG1 + 16)] 2
0 INT_NOTEQUAL f() [(ARG1 + 16)]
 CBRANCH (0 INT_NOTEQUAL [40])
[(ARG1 + 8)] CAST [(ARG1 + 8)]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 STORE 433 (ARG1 + 20) 0
(ARG1 + 16) CAST (ARG1 + 16)
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL 0 [40]
 STORE 433 (ARG1 + 16) ([(ARG1 + 16)] * 2)
(f() + 40) INT_ADD f() 40
(ARG1 + 16) CAST (ARG1 + 16)
[40] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 STORE 433 (ARG1 + 8) f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CALL func (RSP + -184)
(RSP + -184) PTRSUB RSP -184
(ARG1 + 20) CAST (ARG1 + 20)
 CBRANCH ([([(ARG1 + 8)] + (f() * 8))] INT_NOTEQUAL 0)
 CBRANCH (f(ARG1) INT_EQUAL 0)
f(ARG1) CALL func f(ARG1)
0 INT_EQUAL f(ARG1) 0
[(ARG1 + 8)] CAST [(ARG1 + 8)]
f() INT_ZEXT f()
([(ARG1 + 8)] + (f() * 8)) CAST ([(ARG1 + 8)] + (f() * 8))
([(ARG1 + 8)] + (f() * 8)) INT_ADD [(ARG1 + 8)] (f() * 8)
0 INT_NOTEQUAL [([(ARG1 + 8)] + (f() * 8))] 0
(f() + 1) INT_ADD f() 1
(f() * 8) INT_MULT f() 8
[([(ARG1 + 8)] + (f() * 8))] LOAD 433 ([(ARG1 + 8)] + (f() * 8))
 BRANCH VZERO
(ARG1 + 16) CAST (ARG1 + 16)
([ARG1] + 24) INT_ADD [ARG1] 24
f() CALL func VZERO [(ARG1 + 8)] [(ARG1 + 16)]
([ARG1] + 24) CAST ([ARG1] + 24)
 BRANCH VZERO
[([ARG1] + 24)] LOAD 433 ([ARG1] + 24)
 CALL func f(ARG1) 0
 CALL func (RSP + -184)
(RSP + -184) PTRSUB RSP -184
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(RSP + -184) PTRSUB RSP -184
f() CALL func f(ARG1)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
VZERO CALLIND [([ARG1] + 16)] ARG1 f() ARG2 f() (RSP + -184)
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG2
 STORE 433 ARG3 f()
 STORE 433 ARG3 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
f() COPY f()
 CALL func (RSP + -184)
 CALL func (RSP + -184)
(RSP + -184) PTRSUB RSP -184
(ARG1 + 16) CAST (ARG1 + 16)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(RSP + -184) PTRSUB RSP -184
f() CALL func f() [(ARG1 + 8)] [(ARG1 + 16)] [(ARG1 + 8)]
 CBRANCH (f() INT_EQUAL [(f() + 40)])
0 INT_EQUAL f() [(f() + 40)]
f() CAST f()
(f() + 40) INT_ADD f() 40
f() CALL func f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
[f()] LOAD 433 f()
(FS_OFFSET + 40) INT_ADD 0 40
0 COPY 0
[([ARG1] + 16)] LOAD 433 ([ARG1] + 16)
 CBRANCH (VZERO INT_NOTEQUAL 0)
0 INT_NOTEQUAL VZERO 0
([ARG1] + 16) CAST ([ARG1] + 16)
(RSP + -184) PTRSUB RSP -184
([ARG1] + 16) INT_ADD [ARG1] 16
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 f()
(RSP + -184) PTRSUB RSP -184
f() CALL func f()
 CALL func (RSP + -184)
 BRANCH VZERO
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 20) INT_ADD ARG1 20
 CALL func ARG2 0
0 INT_EQUAL f() ARG2
0 INT_NOTEQUAL f() ARG2
f() CALL func ARG2
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CAST f()
f() CALL func f()
f() LOAD 433 f()
f() CALL func f()
 CBRANCH (f() INT_EQUAL ARG2)
 CBRANCH (f() INT_NOTEQUAL ARG2)
 CALL func f() f() f()
f() CALL func f()
0 INT_NOTEQUAL f() 0
1 COPY 1
 RETURN 0 f()
 RETURN 0 1
1 COPY 1
 STORE 433 f() f()
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
 STORE 433 (ARG1 + 20) ([(ARG1 + 20)] + 4294967295)
(ARG1 + 20) CAST (ARG1 + 20)
 BRANCH VZERO
(ARG1 + 20) CAST (ARG1 + 20)
f() COPY f()
([(ARG1 + 20)] + 4294967295) INT_ADD [(ARG1 + 20)] 4294967295
0 COPY 0
[ARG1] LOAD 433 ARG1
 CALLIND [([ARG1] + 8)] ARG1 ARG2 (RSP + -184) ARG1
 CALL func ARG1 ARG2 A_Stack[-0xc8]:8 ARG2
f() CALL func ARG1 (RSP + -184) (RSP + -200) (RSP + -184)
ARG2 COPY ARG2
(f() + 40) CAST (f() + 40)
(RSP + -200) PTRSUB RSP -200
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
([ARG1] + 8) INT_ADD [ARG1] 8
f() COPY f()
[([ARG1] + 8)] LOAD 433 ([ARG1] + 8)
f(ARG2) COPY f(ARG2)
 CALL func (RSP + -184)
(FS_OFFSET + 40) INT_ADD 0 40
([ARG1] + 8) CAST ([ARG1] + 8)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(RSP + -184) PTRSUB RSP -184
(RSP + -184) PTRSUB RSP -184
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -184)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
(RSP + -184) PTRSUB RSP -184
(RSP + -184) PTRSUB RSP -184
 RETURN 0 f(ARG2)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
f() COPY f()
 STORE 433 ARG1 [f(ARG2)]
ARG2 COPY ARG2
[f(ARG2)] LOAD 433 f(ARG2)
0 INT_EQUAL [f(ARG2)] -1
~(f()) BOOL_NEGATE f()
[f(ARG2)] LOAD 433 f(ARG2)
 CBRANCH ~(f())
 RETURN 0
 CBRANCH ([f(ARG2)] INT_EQUAL -1)
 CBRANCH ([f(ARG2)] INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG2) 0
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG2) CALL func [f(ARG2)]
0 COPY 0
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
 BRANCH VZERO
[f(ARG2)] LOAD 433 f(ARG2)
0 INT_NOTEQUAL [f(ARG2)] 0
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 [(f() + 8)]
 STORE 433 ARG1 f()
0 INT_EQUAL f() 0
 RETURN 0
f() CALL func [ARG1]
f() CALL func f()
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH f()
(f() + 8) PTRADD f() 1 8
 CBRANCH ([(f() + 8)] INT_EQUAL -1)
[(f() + 8)] LOAD 433 (f() + 8)
0 INT_EQUAL [(f() + 8)] -1
0 INT_NOTEQUAL [(f() + 8)] 0
 CBRANCH ([(f() + 8)] INT_NOTEQUAL 0)
[(f() + 8)] LOAD 433 (f() + 8)
[(f() + 8)] LOAD 433 (f() + 8)
f() CALL func [(f() + 8)]
0 INT_NOTEQUAL f() 0
 BRANCH VZERO
f() CALL func f()
f() CAST f()
[(f() + 8)] LOAD 433 (f() + 8)
 STORE 433 ARG1 f(ARG2)
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
0 INT_NOTEQUAL [ARG2] 0
f(ARG2) CAST f(ARG2)
 CBRANCH ([ARG2] INT_NOTEQUAL 0)
 RETURN 0
0 INT_NOTEQUAL f(ARG2) 0
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
f(ARG2) CALL func [ARG2]
[ARG2] CAST [ARG2]
 BRANCH VZERO
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
 CALL func ARG1
 CALL libcall_operator.delete_thunk ARG1
 RETURN 0
(ARG1 + 24) INT_ADD ARG1 24
 RETURN 0 (ARG1 + 24)
 RETURN 0 0
0 COPY 0
ARG6 COPY ARG6
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG5 COPY ARG5
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -56) PTRSUB RSP -56
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CALL func f() ARG2 ARG3 ARG6
40 CAST 40
(RSP + -136) PTRSUB RSP -136
[40] LOAD 433 40
 CALL func (RSP + -88) (RSP + -56) (RSP + -56)
(RSP + -88) PTRSUB RSP -88
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
ARG1 COPY ARG1
 CALL func ARG1 f() f()
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -56) (RSP + -136) (RSP + -136)
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func 24 (RSP + -88)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
(ARG1 + 16) INT_ADD ARG1 16
 RETURN 0 [(ARG1 + 16)]
[(ARG1 + 16)] COPY [(ARG1 + 16)]
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
 CALL func ARG1 (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647) (f() / 4611686014132420609) ARG2
ARG1 COPY ARG1
f() CALL func (RSP + 8)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + 8) PTRSUB RSP 8
(f() / 2147483647) INT_RIGHT f() 64
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
[40] LOAD 433 40
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(RSP + 8) PTRSUB RSP 8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
f() CALL func (RSP + 8)
(f() / 2147483647) INT_RIGHT f() 64
40 INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 0
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CALL func (RSP + -48) ARG2 (RSP + -40) ARG2
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -40) PTRSUB RSP -40
 CBRANCH (f() INT_EQUAL 1)
(RSP + -88) PTRSUB RSP -88
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL f() 1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -48) PTRSUB RSP -48
(f() + 40) CAST (f() + 40)
f(ARG1) COPY f(ARG1)
 CALL func (RSP + -40) (RSP + -88) (RSP + -88)
 CALL func (RSP + -48)
f() CALL func (RSP + -48)
(RSP + -40) PTRSUB RSP -40
(RSP + -48) PTRSUB RSP -48
(RSP + -48) PTRSUB RSP -48
f() CALL func (RSP + -48)
(RSP + -48) PTRSUB RSP -48
f() CALL func f()
f() CAST f()
 CALL libcall_memset_thunk f() 0 ARG2
 CALL func ARG1 0
 CALL func ARG1 (RSP + -48) (RSP + -48)
 BRANCH VZERO
(RSP + -48) PTRSUB RSP -48
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(ARG1)
 CALL func ARG1 0 (RSP + -56)
ARG1 COPY ARG1
(RSP + -56) PTRSUB RSP -56
[40] LOAD 433 40
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(f() / 2147483647) INT_RIGHT f() 64
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CALL func (RSP + -56) <stdin> (f() / 4611686014132420609) (f() / 2147483647)
40 CAST 40
f() CALL func
(f() / 2147483647) SUBPIECE f() 0
<stdin> COPY <stdin>
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
ARG1 COPY ARG1
 CALL func ARG1
 CALL func ARG1 ARG2 ARG3 ARG4 0
f() CALL func ARG2 (RSP + -296) (RSP + -296)
A_Stack[-0x168]:8 COPY A_Stack[-0x168]:8
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(RSP + -296) PTRSUB RSP -296
0 INT_EQUAL (f() / 4611686014132420609) A_Stack[-0x160]:8
 CBRANCH ((f() / 4611686014132420609) INT_EQUAL A_Stack[-0x160]:8)
 CALL func (RSP + -296)
(f() / 2147483647) INT_RIGHT f() 64
(f() / 2147483647) SUBPIECE f() 8
4700744 PTRSUB 0 4700744
(RSP + -296) PTRSUB RSP -296
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH f()
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(RSP + -360) PTRSUB RSP -360
A_Stack[-0x160]:8 COPY A_Stack[-0x160]:8
(f() / 2147483647) SUBPIECE f() 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
A_Stack[-0x168]:8 COPY A_Stack[-0x168]:8
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CALL func (RSP + -360) 4700744
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -296) PTRSUB RSP -296
A_Stack[-0x160]:8 COPY A_Stack[-0x160]:8
 CALL func (RSP + -296)
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
 RETURN 0 ARG1
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (A_Stack[-0x160]:8 INT_EQUAL 0)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
0 COPY 0
f() CALL libcall_memcmp_thunk (f() / 2147483647) A_Stack[-0x168]:8 A_Stack[-0x160]:8
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
0 INT_EQUAL f() 0
0 INT_EQUAL A_Stack[-0x160]:8 0
 CALL func ARG1 ARG2 -1 ARG3 ARG4 0 0
ARG1 COPY ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
40 CAST 40
[40] LOAD 433 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
(ARG1 + 40) INT_ADD ARG1 40
 RETURN 0 (ARG1 + 40)
 RETURN 0 1
1 COPY 1
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG3 ARG4 ARG4 0 ARG5 ARG6
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 CALL func ARG1 ARG2 ARG3 -1 ARG4 ARG5 0 0
ARG1 COPY ARG1
0 INT_EQUAL ARG4 -1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG4 INT_EQUAL -1)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/MemoryBuffer.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/MemoryBuffer.cpp
0 COPY 0
 RETURN 1
0 COPY 0
 CALL libcall___assert_fail_thunk 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/MemoryBuffer.cpp 418 0
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
 STORE 433 ARG1 ARG2
 STORE 433 (ARG1 + 8) ARG3
 STORE 433 (ARG1 + 16) ARG4
 STORE 433 (ARG1 + 24) ARG5
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
 RETURN 0
 CALL func ARG1 (f() / 2147483647) (f() / 4611686014132420609) A_Stack[-0x28]:8 A_Stack[-0x20]:8
ARG1 COPY ARG1
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
VZERO CALLIND [([ARG2] + 16)] ARG2
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) VZERO VZERO
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 2147483647) INT_RIGHT f() 64
([ARG2] + 16) INT_ADD [ARG2] 16
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[([ARG2] + 16)] LOAD 433 ([ARG2] + 16)
40 INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
([ARG2] + 16) CAST ([ARG2] + 16)
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
 CALL func ARG1
(ARG1 + 24) PTRADD ARG1 3 8
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func (ARG1 + 24)
 RETURN 0
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
VZERO COPY VZERO
 RETURN 0
 CALL func 1 65535
 RETURN 0
Unknown buffer COPY Unknown buffer
 RETURN 0 Unknown buffer
 CALL func [(ARG1 + 40)] ARG2 ARG3 ARG2
 CALL libcall_memcpy_thunk [(ARG1 + 72)] ARG2 [f(RSP)]
ARG3 COPY ARG3
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 80) INT_ADD ARG1 80
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 56) INT_ADD ARG1 56
(ARG1 + 72) INT_ADD ARG1 72
(ARG1 + 56) INT_ADD ARG1 56
(ARG1 + 56) INT_ADD ARG1 56
(ARG1 + 72) INT_ADD ARG1 72
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 72) INT_ADD ARG1 72
(ARG1 + 72) INT_ADD ARG1 72
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 72) INT_ADD ARG1 72
(ARG1 + 72) INT_ADD ARG1 72
[(ARG1 + 56)] LOAD 433 (ARG1 + 56)
(ARG1 + 56) CAST (ARG1 + 56)
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL [(ARG1 + 56)] 0
 CBRANCH ([(ARG1 + 56)] INT_EQUAL 0)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) CAST (f() + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CBRANCH (f(ARG3 , RSP) INT_NOTEQUAL 0)
(RSP + -24) PTRSUB RSP -24
[(ARG1 + 56)] LOAD 433 (ARG1 + 56)
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
(ARG1 + 64) CAST (ARG1 + 64)
(ARG1 + 56) CAST (ARG1 + 56)
([(ARG1 + 72)] / 2147483647) SUBPIECE [(ARG1 + 72)] 0
([(ARG1 + 64)] / 2147483647) SUBPIECE [(ARG1 + 64)] 0
[(ARG1 + 56)] LOAD 433 (ARG1 + 56)
(ARG1 + 64) CAST (ARG1 + 64)
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
0 INT_EQUAL [(ARG1 + 72)] ([(ARG1 + 56)] + [(ARG1 + 64)])
(([(ARG1 + 72)] / 2147483647) - ([(ARG1 + 64)] / 2147483647)) INT_SUB ([(ARG1 + 72)] / 2147483647) ([(ARG1 + 64)] / 2147483647)
([(ARG1 + 56)] + [(ARG1 + 64)]) INT_ADD [(ARG1 + 56)] [(ARG1 + 64)]
f(RSP) CAST f(RSP)
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(RSP + -28) PTRSUB RSP -28
(f(ARG3 , RSP) / 2147483647) SUBPIECE f(ARG3 , RSP) 0
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
(([(ARG1 + 56)] / 2147483647) - (([(ARG1 + 72)] / 2147483647) - ([(ARG1 + 64)] / 2147483647))) INT_SUB ([(ARG1 + 56)] / 2147483647) (([(ARG1 + 72)] / 2147483647) - ([(ARG1 + 64)] / 2147483647))
(f(ARG3 , RSP) - [f(RSP)]) INT_SUB f(ARG3 , RSP) [f(RSP)]
([(ARG1 + 56)] / 2147483647) SUBPIECE [(ARG1 + 56)] 0
 CBRANCH ([(ARG1 + 72)] INT_EQUAL ([(ARG1 + 56)] + [(ARG1 + 64)]))
(ARG1 + 72) CAST (ARG1 + 72)
(ARG1 + 72) CAST (ARG1 + 72)
f(RSP) CALL func (RSP + -28) (RSP + -24) (RSP + -24)
[f(RSP)] INT_ZEXT [f(RSP)]
[f(RSP)] LOAD 433 f(RSP)
(ARG1 + 72) CAST (ARG1 + 72)
([(ARG1 + 72)] + [f(RSP)]) INT_ADD [(ARG1 + 72)] [f(RSP)]
 STORE 433 (ARG1 + 72) ([(ARG1 + 72)] + [f(RSP)])
(ARG1 + 72) CAST (ARG1 + 72)
0 INT_NOTEQUAL f(ARG3 , RSP) 0
(ARG1 + 56) CAST (ARG1 + 56)
[f(RSP)] INT_ZEXT [f(RSP)]
[f(RSP)] INT_ZEXT [f(RSP)]
(ARG1 + 72) CAST (ARG1 + 72)
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
 STORE 433 (ARG1 + 72) [(ARG1 + 64)]
(ARG1 + 72) CAST (ARG1 + 72)
 STORE 433 (ARG1 + 80) 1
(ARG1 + 64) CAST (ARG1 + 64)
 BRANCH VZERO
(ARG1 + 80) CAST (ARG1 + 80)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
 BRANCH VZERO
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
(f() - f()) INT_SUB f() f()
(ARG1 + 40) CAST (ARG1 + 40)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
f() CALL func [(ARG1 + 40)]
(ARG1 + 40) CAST (ARG1 + 40)
 RETURN 0 (f() - f())
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
f() CALL func [(ARG1 + 40)]
(f() - f()) COPY (f() - f())
 RETURN 0
 RETURN 0
 RETURN 0
 RETURN 0
 RETURN 0
 RETURN 0
 RETURN 0
 RETURN 0
 RETURN 0
 RETURN 0
 RETURN 0
 RETURN 0
 RETURN 0
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1 [f(ARG2)] [f(ARG2)]
(ARG1 + 16) INT_ADD ARG1 16
f(ARG2) CALL func ARG2
(ARG2 + 8) INT_ADD ARG2 8
[f(ARG2)] LOAD 433 f(ARG2)
 STORE 433 (ARG1 + 16) [f(ARG2)]
f(ARG2) CALL func (ARG2 + 8)
(ARG1 + 16) CAST (ARG1 + 16)
f(ARG2) CAST f(ARG2)
[f(ARG2)] LOAD 433 f(ARG2)
 RETURN 0
f(ARG2) CAST f(ARG2)
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 [f(ARG2)]
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
f(ARG3) CAST f(ARG3)
[f(ARG2)] LOAD 433 f(ARG2)
[f(ARG3)] LOAD 433 f(ARG3)
f(ARG2) CAST f(ARG2)
 STORE 433 (ARG1 + 8) [f(ARG3)]
 RETURN 0
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -56) PTRSUB RSP -56
40 CAST 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -56) f(ARG1) f(ARG2) f(ARG1)
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
ARG3 COPY ARG3
ARG1 COPY ARG1
f() CALL func ARG2
ARG2 COPY ARG2
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(A_Stack[-0x40]:8 # A_Stack[-0x48]:8) PIECE A_Stack[-0x40]:8 A_Stack[-0x48]:8
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 RETURN 0
 CBRANCH (0 INT_NOTEQUAL 1)
: CommandLine Error: Option ' COPY : CommandLine Error: Option '
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func f() ' registered more than once! 
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f() : CommandLine Error: Option '
' registered more than once!  COPY ' registered more than once! 
f() CALL func
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func inconsistency in registered CommandLine options 1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
inconsistency in registered CommandLine options COPY inconsistency in registered CommandLine options
f() CALL func f() ARG3
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f() ARG1
(f() / 2147483647) SUBPIECE f() 0
ARG2 COPY ARG2
f() CALL func (RSP + -112) (RSP + -80) (RSP + -80)
0 INT_NOTEQUAL 0 1
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
ARG1 COPY ARG1
 CALL func (ARG1 + 176)
ARG3 COPY ARG3
(RSP + -112) PTRSUB RSP -112
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -80) PTRSUB RSP -80
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) (RSP + -72) (RSP + -72)
(RSP + -72) PTRSUB RSP -72
(ARG1 + 176) INT_ADD ARG1 176
 CALL func ARG1 ([(ARG1 + 8)] + -8) ([(ARG1 + 8)] + -8)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + -8) INT_ADD [(ARG1 + 8)] -8
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL libcall_memmove_thunk ARG3 ARG1 (((ARG2 - ARG1) / 8) * 8)
ARG1 CAST ARG1
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG3 CAST ARG3
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) INT_ADD ARG3 (((ARG2 - ARG1) / 8) * 8)
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) CAST (ARG3 + (((ARG2 - ARG1) / 8) * 8))
((ARG2 - ARG1) / 8) INT_SRIGHT (ARG2 - ARG1) 3
0 INT_NOTEQUAL ((ARG2 - ARG1) / 8) 0
 CBRANCH (((ARG2 - ARG1) / 8) INT_NOTEQUAL 0)
 RETURN 0 (ARG3 + (((ARG2 - ARG1) / 8) * 8))
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 RETURN 0
 CALL func f() f() f()
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1
[ARG1] LOAD 433 ARG1
0 INT_LESS ARG2 [ARG1]
 CALL func (ARG2 + 8) [(ARG1 + 8)] ARG2 (ARG2 + 8)
0 INT_LESSEQUAL [(ARG1 + 8)] ARG2
(ARG2 + 8) INT_ADD ARG2 8
ARG2 COPY ARG2
 CBRANCH (ARG2 INT_LESS [ARG1])
 CBRANCH ([(ARG1 + 8)] INT_LESSEQUAL ARG2)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
 RETURN 0 ARG2
 CALL libcall___assert_fail_thunk I < this->end() && "Erasing at past-the-end iterator." /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 464 llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::erase(llvm::SmallVectorImpl<T>::iterator) [with T = llvm::cl::Option*; llvm::SmallVectorImpl<T>::iterator = llvm::cl::Option**]
llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::erase(llvm::SmallVectorImpl<T>::iterator) [with T = llvm::cl::Option*; llvm::SmallVectorImpl<T>::iterator = llvm::cl::Option**] COPY llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::erase(llvm::SmallVectorImpl<T>::iterator) [with T = llvm::cl::Option*; llvm::SmallVectorImpl<T>::iterator = llvm::cl::Option**]
I < this->end() && "Erasing at past-the-end iterator." COPY I < this->end() && "Erasing at past-the-end iterator."
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 1
 RETURN 1
llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::erase(llvm::SmallVectorImpl<T>::iterator) [with T = llvm::cl::Option*; llvm::SmallVectorImpl<T>::iterator = llvm::cl::Option**] COPY llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::erase(llvm::SmallVectorImpl<T>::iterator) [with T = llvm::cl::Option*; llvm::SmallVectorImpl<T>::iterator = llvm::cl::Option**]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
I >= this->begin() && "Iterator to erase is out of bounds." COPY I >= this->begin() && "Iterator to erase is out of bounds."
 CALL libcall___assert_fail_thunk I >= this->begin() && "Iterator to erase is out of bounds." /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 463 llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::erase(llvm::SmallVectorImpl<T>::iterator) [with T = llvm::cl::Option*; llvm::SmallVectorImpl<T>::iterator = llvm::cl::Option**]
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
(ARG1 + 128) INT_ADD ARG1 128
(ARG1 + 72) INT_ADD ARG1 72
(ARG1 + 120) INT_ADD ARG1 120
(ARG1 + 208) INT_ADD ARG1 208
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 208) INT_ADD ARG1 208
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 120) INT_ADD ARG1 120
(ARG1 + 176) INT_ADD ARG1 176
0 INT_EQUAL [(ARG1 + 208)] ARG2
0 INT_EQUAL [f(ARG1)] ARG2
0 INT_EQUAL [f(ARG1)] ARG2
[ARG2] LOAD 433 ARG2
 CALLIND [([ARG2] + 48)] ARG2 (RSP + -296) ARG2 (RSP + -296)
f() CALL func ARG2
f() CALL func ARG2
f() CALL func ARG2
(ARG2 + 24) PTRADD ARG2 3 8
f() COPY f()
 CALL func (RSP + -296)
 CALL func (RSP + -296)
(RSP + -296) PTRSUB RSP -296
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
([ARG2] + 48) INT_ADD [ARG2] 48
[([ARG2] + 48)] LOAD 433 ([ARG2] + 48)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_NOTEQUAL f())
0 INT_NOTEQUAL f() f()
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
([ARG2] + 48) CAST ([ARG2] + 48)
(RSP + -296) PTRSUB RSP -296
(RSP + -296) PTRSUB RSP -296
 CBRANCH (f() INT_EQUAL 1)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL f() 1
 BRANCH VZERO
[f()] LOAD 433 f()
[(f() + 8)] LOAD 433 (f() + 8)
 CALL func (ARG1 + 176) [f()] [(f() + 8)] (ARG1 + 176)
(f() + 16) PTRADD f() 2 8
(f() + 8) PTRADD f() 1 8
 CBRANCH ([(ARG1 + 128)] INT_NOTEQUAL f(ARG1))
 CBRANCH ([f(ARG1)] INT_EQUAL ARG2)
[f(ARG1)] LOAD 433 f(ARG1)
 CBRANCH ([(ARG1 + 72)] INT_NOTEQUAL f(ARG1))
[f(ARG1)] LOAD 433 f(ARG1)
 CBRANCH ([f(ARG1)] INT_EQUAL ARG2)
(RSP + -296) PTRSUB RSP -296
 CALL func (RSP + -296) (ARG2 + 24) (ARG2 + 24)
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
 CALL func (ARG1 + 64) f(ARG1) (ARG1 + 64)
0 INT_NOTEQUAL [(ARG1 + 72)] f(ARG1)
 BRANCH VZERO
(ARG1 + 72) CAST (ARG1 + 72)
 BRANCH VZERO
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
 CBRANCH ([(ARG1 + 208)] INT_EQUAL ARG2)
(ARG1 + 208) CAST (ARG1 + 208)
 STORE 433 (ARG1 + 208) 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 BRANCH VZERO
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
[(ARG1 + 128)] LOAD 433 (ARG1 + 128)
(ARG1 + 128) CAST (ARG1 + 128)
 BRANCH VZERO
 CALL func (ARG1 + 120) f(ARG1) (ARG1 + 120)
0 INT_NOTEQUAL [(ARG1 + 128)] f(ARG1)
 CBRANCH ((f() & 4) INT_EQUAL 0)
[(ARG1 + 208)] LOAD 433 (ARG1 + 208)
(ARG1 + 208) CAST (ARG1 + 208)
[(ARG1 + 120)] LOAD 433 (ARG1 + 120)
(ARG1 + 120) CAST (ARG1 + 120)
(ARG1 + 64) CAST (ARG1 + 64)
0 INT_EQUAL (f() & 4) 0
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(f() & 4) INT_AND f() 4
(ARG1 + 176) INT_ADD ARG1 176
(ARG1 + 64) INT_ADD ARG1 64
(ARG1 + 208) INT_ADD ARG1 208
 CBRANCH (f() INT_EQUAL 1)
f() CALL func (ARG1 + 176)
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
0 COPY 0
f() CALL func (ARG1 + 64)
 RETURN 0 1
 RETURN 0 0
1 COPY 1
0 INT_EQUAL f() 1
 CBRANCH ([(ARG1 + 208)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 208)] 0
[(ARG1 + 208)] LOAD 433 (ARG1 + 208)
(ARG1 + 208) CAST (ARG1 + 208)
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
[ARG1] LOAD 433 ARG1
f() CALL func ARG2
0 INT_EQUAL f() f()
 RETURN 0 (f() & -256)
f() CALL func [ARG1]
(f() & -256) INT_AND f() -256
(f() & -256) INT_OR (f() & -256) 0
0 INT_ZEXT 0
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_LESSEQUAL [ARG1])
0 INT_LESSEQUAL [(ARG1 + 8)] [ARG1]
 CALL func [[ARG1]]
[[ARG1]] LOAD 433 [ARG1]
 RETURN 0
const PtrTy llvm::SmallPtrSetIterator<PtrTy>::operator*() const [with PtrTy = llvm::cl::OptionCategory*] COPY const PtrTy llvm::SmallPtrSetIterator<PtrTy>::operator*() const [with PtrTy = llvm::cl::OptionCategory*]
Bucket < End COPY Bucket < End
 CALL libcall___assert_fail_thunk Bucket < End /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h 198 const PtrTy llvm::SmallPtrSetIterator<PtrTy>::operator*() const [with PtrTy = llvm::cl::OptionCategory*]
[ARG1] CAST [ARG1]
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
(RSP + -40) PTRSUB RSP -40
 CALL func ARG1 f() f()
 RETURN 0
f() CALL func (RSP + -40)
-1 COPY -1
 RETURN 0 -1
-2 COPY -2
 RETURN 0 -2
f(ARG1) LOAD 433 ARG1
 STORE 433 ARG1 (f(ARG1) + 8)
f(ARG1) LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) LOAD 433 ARG1
f(ARG1) LOAD 433 ARG1
0 INT_LESS [(ARG1 + 8)] [ARG1]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_LESS [ARG1])
 CBRANCH ([[ARG1]] INT_NOTEQUAL f())
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH ([[ARG1]] INT_NOTEQUAL f())
[[ARG1]] LOAD 433 f(ARG1)
f() CALL func
0 INT_NOTEQUAL [[ARG1]] f()
 CBRANCH (f(ARG1) INT_EQUAL [(ARG1 + 8)])
f() CALL func
0 INT_NOTEQUAL [[ARG1]] f()
[[ARG1]] LOAD 433 f(ARG1)
 RETURN 1
~(f()) BOOL_NEGATE f()
0 INT_EQUAL f(ARG1) [(ARG1 + 8)]
 CALL libcall___assert_fail_thunk Bucket <= End /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h 172 void llvm::SmallPtrSetIteratorImpl::AdvanceIfNotValid()
void llvm::SmallPtrSetIteratorImpl::AdvanceIfNotValid() COPY void llvm::SmallPtrSetIteratorImpl::AdvanceIfNotValid()
Bucket <= End COPY Bucket <= End
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallPtrSet.h
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ~(f())
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
 BRANCH VZERO
 STORE 433 ARG1 ([ARG1] + 8)
 CALL func ARG1
ARG1 COPY ARG1
[ARG1] LOAD 433 ARG1
([ARG1] + 8) INT_ADD [ARG1] 8
 RETURN 0 ARG1
[ARG1] LOAD 433 ARG1
[ARG2] LOAD 433 ARG2
([ARG2] & -256) INT_AND [ARG2] -256
0 INT_ZEXT 0
([ARG2] & -256) INT_OR ([ARG2] & -256) 0
 RETURN 0 ([ARG2] & -256)
0 INT_NOTEQUAL [ARG1] [ARG2]
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG5 COPY ARG5
0 COPY 0
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
f() COPY f()
 RETURN 0 f()
f() CALL func (RSP + -40) (RSP + -56) (RSP + -56)
(RSP + -40) PTRSUB RSP -40
 CBRANCH (f() INT_NOTEQUAL 0)
(f() + 1) INT_ADD f() 1
 CALL func (RSP + -40)
(RSP + -64) PTRSUB RSP -64
 BRANCH VZERO
0 INT_NOTEQUAL f() 0
(RSP + -40) PTRSUB RSP -40
f() CALL func (RSP + -64) f(ARG1) f(ARG2) f(ARG1)
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
(RSP + -24) PTRSUB RSP -24
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func ARG1 ARG2 ARG3 ARG4 f()
f() CALL func ARG5
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 [f(ARG2)]
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
[(f(ARG2) + 8)] LOAD 433 (f(ARG2) + 8)
[f(ARG2)] LOAD 433 f(ARG2)
 STORE 433 (ARG1 + 16) [f(ARG3)]
(ARG1 + 16) CAST (ARG1 + 16)
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
 STORE 433 (ARG1 + 8) [(f(ARG2) + 8)]
[f(ARG3)] LOAD 433 f(ARG3)
f(ARG2) CAST f(ARG2)
f(ARG3) CAST f(ARG3)
 RETURN 0
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
ARG1 COPY ARG1
 CALL func ARG1 f(ARG2) f(ARG3) f(ARG2)
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 / 16) INT_RIGHT ARG1 4
(ARG1 / 512) INT_RIGHT ARG1 9
(ARG1 / 34359738352) SUBPIECE (ARG1 / 16) 0
0 INT_XOR (8388607 & (ARG1 / 1099511627264)) (268435455 & (ARG1 / 34359738352))
(ARG1 / 1099511627264) SUBPIECE (ARG1 / 512) 0
(8388607 & (ARG1 / 1099511627264)) INT_AND (ARG1 / 1099511627264) 8388607
(268435455 & (ARG1 / 34359738352)) INT_AND (ARG1 / 34359738352) 268435455
0 COPY 0
 RETURN 0 0
0 INT_EQUAL [([(ARG1 + 8)] + (f(ARG1) * 8))] ARG2
f() CALL func ARG2
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
[([(ARG1 + 8)] + (f(ARG1) * 8))] LOAD 433 ([(ARG1 + 8)] + (f(ARG1) * 8))
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([([(ARG1 + 8)] + (f(ARG1) * 8))] INT_EQUAL f())
(f(ARG1) * 8) INT_MULT f(ARG1) 8
([(ARG1 + 8)] + (f(ARG1) * 8)) CAST ([(ARG1 + 8)] + (f(ARG1) * 8))
(ARG1 + 8) CAST (ARG1 + 8)
1 COPY 1
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
0 INT_EQUAL [([(ARG1 + 8)] + (f(ARG1) * 8))] f()
f(ARG1) INT_ZEXT f(ARG1)
([(ARG1 + 16)] + -1) INT_SUB [(ARG1 + 16)] -1
1 COPY 1
(ARG1 + 16) CAST (ARG1 + 16)
0 COPY 0
(f() & ([(ARG1 + 16)] + -1)) INT_AND ([(ARG1 + 16)] + -1) f()
([(ARG1 + 8)] + (f(ARG1) * 8)) INT_ADD [(ARG1 + 8)] (f(ARG1) * 8)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
f() CALL func
 CBRANCH ([([(ARG1 + 8)] + (f(ARG1) * 8))] INT_EQUAL ARG2)
 BRANCH VZERO
([(ARG1 + 8)] + (f(ARG1) * 8)) INT_ADD [(ARG1 + 8)] (f(ARG1) * 8)
([(ARG1 + 8)] + (f(ARG1) * 8)) COPY ([(ARG1 + 8)] + (f(ARG1) * 8))
(f() + 1) COPY (f() + 1)
([(ARG1 + 16)] + -1) INT_SUB [(ARG1 + 16)] -1
[([(ARG1 + 8)] + (f(ARG1) * 8))] LOAD 433 ([(ARG1 + 8)] + (f(ARG1) * 8))
(f(ARG1) * 8) INT_MULT f(ARG1) 8
(f() + 1) INT_ADD f() 1
f(ARG1) INT_ZEXT f(ARG1)
([(ARG1 + 8)] + (f(ARG1) * 8)) CAST ([(ARG1 + 8)] + (f(ARG1) * 8))
(f(ARG1) + f()) INT_ADD f(ARG1) f()
 CBRANCH ([([(ARG1 + 8)] + (f(ARG1) * 8))] INT_EQUAL f())
(f(ARG1) * 8) INT_MULT f(ARG1) 8
0 INT_EQUAL [([(ARG1 + 8)] + (f(ARG1) * 8))] f()
([(ARG1 + 8)] + (f(ARG1) * 8)) INT_ADD [(ARG1 + 8)] (f(ARG1) * 8)
 RETURN 0 ([(ARG1 + 8)] + (f(ARG1) * 8))
f() CALL func
f(ARG1) INT_ZEXT f(ARG1)
 RETURN 0 f(ARG1)
 CBRANCH f()
((f(ARG1) + f()) & ([(ARG1 + 16)] + -1)) INT_AND ([(ARG1 + 16)] + -1) (f(ARG1) + f())
 CBRANCH (f(ARG1) INT_EQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
(f(ARG1) * 8) INT_MULT f(ARG1) 8
0 INT_EQUAL f(ARG1) 0
[([(ARG1 + 8)] + (f(ARG1) * 8))] LOAD 433 ([(ARG1 + 8)] + (f(ARG1) * 8))
 CBRANCH (f(ARG1) INT_EQUAL 0)
([(ARG1 + 8)] + (f(ARG1) * 8)) CAST ([(ARG1 + 8)] + (f(ARG1) * 8))
([(ARG1 + 8)] + (f(ARG1) * 8)) INT_ADD [(ARG1 + 8)] (f(ARG1) * 8)
f(ARG1) INT_ZEXT f(ARG1)
 BRANCH VZERO
([(ARG1 + 8)] + (f(ARG1) * 8)) INT_ADD [(ARG1 + 8)] (f(ARG1) * 8)
f(ARG1) INT_ZEXT f(ARG1)
(f(ARG1) * 8) INT_MULT f(ARG1) 8
0 INT_EQUAL f(ARG1) 0
f(ARG1) INT_ZEXT f(ARG1)
(f(ARG1) * 8) INT_MULT f(ARG1) 8
([(ARG1 + 8)] + (f(ARG1) * 8)) INT_ADD [(ARG1 + 8)] (f(ARG1) * 8)
(ARG1 + 8) INT_ADD ARG1 8
f(ARG1) CALL func ARG1 [f(ARG1)] [f(ARG1)]
f() CALL func ARG1
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
f(ARG1) CALL func ARG1 [f(ARG1)] [f(ARG1)]
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 20) INT_ADD ARG1 20
 STORE 433 (ARG1 + 16) ARG2
ARG2 INT_ZEXT ARG2
ARG2 INT_ZEXT ARG2
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
f() CALL libcall_malloc_thunk (ARG2 * 8)
0 INT_EQUAL [(ARG1 + 8)] 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
 STORE 433 (ARG1 + 8) f()
(ARG1 + 16) CAST (ARG1 + 16)
(ARG2 * 8) INT_LEFT ARG2 3
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH (f(ARG1) INT_NOTEQUAL ([(ARG1 + 8)] + ([(ARG1 + 20)] * 8)))
 BRANCH VZERO
[f(ARG1)] LOAD 433 f(ARG1)
f(ARG1) CAST f(ARG1)
0 INT_NOTEQUAL f(ARG1) ([(ARG1 + 8)] + ([(ARG1 + 20)] * 8))
 STORE 433 f(ARG1) [f(ARG1)]
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
 CALL libcall_memset_thunk [(ARG1 + 8)] 4294967295 (ARG2 * 8)
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
CurArray && "Failed to allocate memory?" COPY CurArray && "Failed to allocate memory?"
 CALL libcall___assert_fail_thunk CurArray && "Failed to allocate memory?" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp 142 void llvm::SmallPtrSetImplBase::Grow(unsigned int)
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
(ARG2 * 8) INT_MULT ARG2 8
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
void llvm::SmallPtrSetImplBase::Grow(unsigned int) COPY void llvm::SmallPtrSetImplBase::Grow(unsigned int)
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
 STORE 433 (ARG1 + 24) 0
([(ARG1 + 8)] + ([(ARG1 + 20)] * 8)) PTRADD [(ARG1 + 8)] [(ARG1 + 20)] 8
([(ARG1 + 8)] + ([(ARG1 + 16)] * 8)) PTRADD [(ARG1 + 8)] [(ARG1 + 16)] 8
[(ARG1 + 8)] COPY [(ARG1 + 8)]
(ARG1 + 20) CAST (ARG1 + 20)
(ARG1 + 24) CAST (ARG1 + 24)
[(ARG1 + 20)] INT_ZEXT [(ARG1 + 20)]
 CBRANCH (f(ARG1) INT_NOTEQUAL ([(ARG1 + 8)] + ([(ARG1 + 16)] * 8)))
 CALL libcall_free_thunk [(ARG1 + 8)]
0 INT_NOTEQUAL f(ARG1) ([(ARG1 + 8)] + ([(ARG1 + 16)] * 8))
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
 CBRANCH f()
 STORE 433 f(ARG1) [f(ARG1)]
f(ARG1) CAST f(ARG1)
 CBRANCH (f() INT_EQUAL [f(ARG1)])
 BRANCH VZERO
0 COPY 0
1 COPY 1
[f(ARG1)] LOAD 433 f(ARG1)
0 INT_EQUAL f() [f(ARG1)]
 BRANCH VZERO
f() CALL func
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
 CBRANCH (f() INT_EQUAL [f(ARG1)])
0 INT_EQUAL f() [f(ARG1)]
f() CALL func
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
 STORE 433 ARG1 [f(ARG2)]
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG2) CAST f(ARG2)
(ARG1 + 8) CAST (ARG1 + 8)
[f(ARG2)] LOAD 433 f(ARG2)
 RETURN 0
f(ARG3) CAST f(ARG3)
 STORE 433 (ARG1 + 8) [f(ARG3)]
[f(ARG3)] LOAD 433 f(ARG3)
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (RSP + -56) f(ARG1) f(ARG2) f(ARG1)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
40 CAST 40
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
(RSP + -56) PTRSUB RSP -56
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
 STORE 433 ARG1 [f(ARG2)]
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0
f(ARG3) CAST f(ARG3)
[f(ARG3)] LOAD 433 f(ARG3)
 STORE 433 (ARG1 + 8) [f(ARG3)]
f(ARG2) CAST f(ARG2)
(ARG1 + 8) CAST (ARG1 + 8)
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
 CALL func (RSP + -56) f(ARG1) f(ARG2) f(ARG1)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
40 CAST 40
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL libcall___stack_chk_fail_thunk
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 RETURN 1
 STORE 433 ARG1 [f(ARG2)]
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG2) CALL func ARG2
(ARG2 + 8) INT_ADD ARG2 8
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG2) CALL func (ARG2 + 8)
[f(ARG2)] LOAD 433 f(ARG2)
 STORE 433 (ARG1 + 8) [f(ARG2)]
f(ARG2) CAST f(ARG2)
f(ARG2) CAST f(ARG2)
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 16) PTRADD ARG1 2 8
ARG1 CAST ARG1
 CALL func ARG1 [(ARG1 + 16)] [(ARG1 + 16)]
[ARG1] LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
f(ARG1) CALL func ARG1 ARG2 ARG2
ARG1 CAST ARG1
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
ARG1 CAST ARG1
ARG1 CAST ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 24) PTRADD ARG1 3 8
ARG1 CAST ARG1
f() CALL func ARG1
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
ARG1 CAST ARG1
ARG1 CAST ARG1
 CALL func ARG1 f(ARG1) f(ARG1)
(ARG1 + 24) PTRADD ARG1 3 8
0 INT_EQUAL [f(ARG1)] ARG2
 STORE 433 ([ARG1] + ([(ARG1 + 20)] * 8)) ARG2
0 INT_EQUAL [f(ARG1)] ARG2
 STORE 433 f(ARG1) ARG2
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
[f(ARG1)] LOAD 433 f(ARG1)
([(ARG1 + 20)] * 4) INT_MULT [(ARG1 + 20)] 4
f(ARG1) CAST f(ARG1)
 CBRANCH (([(ARG1 + 20)] * 4) INT_LESS ([(ARG1 + 16)] * 3))
[(ARG1 + 20)] INT_ZEXT [(ARG1 + 20)]
(ARG1 + 20) CAST (ARG1 + 20)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
0 INT_NOTEQUAL f(ARG1) ([ARG1] + ([(ARG1 + 20)] * 8))
 CBRANCH (f(ARG1) INT_NOTEQUAL ([ARG1] + ([(ARG1 + 20)] * 8)))
(ARG1 + 20) INT_ADD ARG1 20
([(ARG1 + 20)] * 4) CAST ([(ARG1 + 20)] * 4)
([(ARG1 + 16)] * 3) CAST ([(ARG1 + 16)] * 3)
0 INT_LESS ([(ARG1 + 20)] * 4) ([(ARG1 + 16)] * 3)
([(ARG1 + 16)] * 3) INT_MULT [(ARG1 + 16)] 3
([ARG1] + ([(ARG1 + 20)] * 8)) PTRADD [ARG1] [(ARG1 + 20)] 8
 CBRANCH ([f(ARG1)] INT_EQUAL ARG2)
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 20) INT_ADD ARG1 20
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
(ARG1 + 20) CAST (ARG1 + 20)
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
 CBRANCH (([(ARG1 + 16)] - ([(ARG1 + 24)] + [(ARG1 + 20)])) INT_LESS ([(ARG1 + 16)] / 8))
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH ([f(ARG1)] INT_EQUAL f())
(ARG1 + 24) CAST (ARG1 + 24)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
 STORE 433 (ARG1 + 24) ([(ARG1 + 24)] + 4294967295)
([(ARG1 + 24)] + 4294967295) INT_ADD [(ARG1 + 24)] 4294967295
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
0 INT_LESS ([(ARG1 + 16)] - ([(ARG1 + 24)] + [(ARG1 + 20)])) ([(ARG1 + 16)] / 8)
([(ARG1 + 16)] - ([(ARG1 + 24)] + [(ARG1 + 20)])) CAST ([(ARG1 + 16)] - ([(ARG1 + 24)] + [(ARG1 + 20)]))
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 16)] - ([(ARG1 + 24)] + [(ARG1 + 20)])) INT_SUB [(ARG1 + 16)] ([(ARG1 + 24)] + [(ARG1 + 20)])
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 24) CAST (ARG1 + 24)
([(ARG1 + 24)] + [(ARG1 + 20)]) INT_ADD [(ARG1 + 24)] [(ARG1 + 20)]
(ARG1 + 20) CAST (ARG1 + 20)
([(ARG1 + 16)] / 8) INT_RIGHT [(ARG1 + 16)] 3
0 INT_LESS [(ARG1 + 16)] 64
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 20) INT_ADD ARG1 20
 CBRANCH ([(ARG1 + 16)] INT_LESS 64)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
(RSP + -88) PTRSUB RSP -88
[f(ARG1)] LOAD 433 f(ARG1)
1 COPY 1
(ARG1 + 20) CAST (ARG1 + 20)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -89) PTRSUB RSP -89
 BRANCH VZERO
f() CALL func (RSP + -88) (RSP + -89) (RSP + -89)
(RSP + -88) PTRSUB RSP -88
(RSP + -89) PTRSUB RSP -89
 STORE 433 (ARG1 + 20) ([(ARG1 + 20)] + 1)
(ARG1 + 20) INT_ADD ARG1 20
f() CALL func (RSP + -88) (RSP + -89) (RSP + -89)
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
 CALL func (RSP + -56) (RSP + -72) (RSP + -72)
0 INT_EQUAL [f(ARG1)] f()
(RSP + -56) PTRSUB RSP -56
(RSP + -72) PTRSUB RSP -72
([(ARG1 + 20)] + 1) INT_ADD [(ARG1 + 20)] 1
(RSP + -56) PTRSUB RSP -56
0 COPY 0
(f() / 2147483647) SUBPIECE f() 8
(ARG1 + 20) CAST (ARG1 + 20)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -72) PTRSUB RSP -72
(ARG1 + 20) INT_ADD ARG1 20
 CALL func (RSP + -56) (RSP + -72) (RSP + -72)
f() CALL func
 BRANCH VZERO
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
128 COPY 128
([(ARG1 + 16)] * 2) INT_MULT [(ARG1 + 16)] 2
(ARG1 + 16) CAST (ARG1 + 16)
(f() # f()) PIECE f() f()
 RETURN 0 (f() # f())
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
 CBRANCH ([f(ARG1)] INT_EQUAL ARG2)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -88) PTRSUB RSP -88
(RSP + -56) PTRSUB RSP -56
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
 CALL func (RSP + -56) (RSP + -72) (RSP + -72)
(RSP + -72) PTRSUB RSP -72
(RSP + -89) PTRSUB RSP -89
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -88) (RSP + -89) (RSP + -89)
 BRANCH VZERO
 BRANCH VZERO
0 COPY 0
 CBRANCH ([(ARG1 + 20)] INT_LESS [(ARG1 + 16)])
([(ARG1 + 20)] + 1) INT_SUB [(ARG1 + 20)] 1
 CALL func (RSP + -56) (RSP + -72) (RSP + -72)
([ARG1] + ([(ARG1 + 20)] * 8)) PTRADD [ARG1] [(ARG1 + 20)] 8
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 20) INT_ADD ARG1 20
([(ARG1 + 20)] + 1) INT_ADD [(ARG1 + 20)] 1
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
([ARG1] + (([(ARG1 + 20)] + 1) * 8)) PTRADD [ARG1] ([(ARG1 + 20)] + 1) 8
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 20) CAST (ARG1 + 20)
[(ARG1 + 20)] INT_ZEXT [(ARG1 + 20)]
 BRANCH VZERO
 STORE 433 (ARG1 + 20) ([(ARG1 + 20)] + 1)
(RSP + -89) PTRSUB RSP -89
(RSP + -88) PTRSUB RSP -88
(ARG1 + 20) CAST (ARG1 + 20)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -56) PTRSUB RSP -56
(ARG1 + 20) CAST (ARG1 + 20)
f() CALL func (RSP + -88) (RSP + -89) (RSP + -89)
(f() / 2147483647) SUBPIECE f() 0
([(ARG1 + 20)] + 1) INT_ZEXT ([(ARG1 + 20)] + 1)
1 COPY 1
(RSP + -72) PTRSUB RSP -72
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[f(ARG1)] LOAD 433 f(ARG1)
0 INT_LESS [(ARG1 + 20)] [(ARG1 + 16)]
(ARG1 + 20) CAST (ARG1 + 20)
(ARG1 + 20) INT_ADD ARG1 20
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1
 STORE 433 (ARG1 + 8) ARG3
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 (RSP + -40) (RSP + -48) (RSP + -40)
(ARG2 + 16) INT_ADD ARG2 16
(ARG2 + 8) INT_ADD ARG2 8
f() CALL func ARG2 f(ARG3) f(ARG3)
f(ARG3) CALL func ARG3
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(ARG2 + 16) CAST (ARG2 + 16)
40 CAST 40
(f() / 2147483647) INT_RIGHT f() 64
(ARG2 + 8) CAST (ARG2 + 8)
([(ARG2 + 8)] + ([(ARG2 + 16)] * 8)) INT_ADD [(ARG2 + 8)] ([(ARG2 + 16)] * 8)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
(RSP + -40) PTRSUB RSP -40
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -48) PTRSUB RSP -48
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
([(ARG2 + 16)] * 8) INT_MULT [(ARG2 + 16)] 8
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 40
[(ARG2 + 16)] INT_ZEXT [(ARG2 + 16)]
 CALL func (RSP + -40) (f() / 2147483647) ([(ARG2 + 8)] + ([(ARG2 + 16)] * 8)) (f() / 2147483647)
(RSP + -40) PTRSUB RSP -40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) INT_ADD ARG1 16
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 16)] * 8) INT_MULT [(ARG1 + 16)] 8
(ARG1 + 16) CAST (ARG1 + 16)
([(ARG1 + 8)] + ([(ARG1 + 16)] * 8)) INT_ADD [(ARG1 + 8)] ([(ARG1 + 16)] * 8)
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 16)] * 8) INT_MULT [(ARG1 + 16)] 8
 CALL func (RSP + -40) ([(ARG1 + 8)] + ([(ARG1 + 16)] * 8)) ([(ARG1 + 8)] + ([(ARG1 + 16)] * 8)) ([(ARG1 + 8)] + ([(ARG1 + 16)] * 8))
40 CAST 40
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
(ARG1 + 8) CAST (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
([(ARG1 + 8)] + ([(ARG1 + 16)] * 8)) INT_ADD [(ARG1 + 8)] ([(ARG1 + 16)] * 8)
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
 RETURN 0 (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) COPY (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
([(ARG1 + 16)] * 8) INT_MULT [(ARG1 + 16)] 8
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 16) CAST (ARG1 + 16)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -40) [(ARG1 + 8)] ([(ARG1 + 8)] + ([(ARG1 + 16)] * 8)) [(ARG1 + 8)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(RSP + -40) PTRSUB RSP -40
([(ARG1 + 8)] + ([(ARG1 + 16)] * 8)) INT_ADD [(ARG1 + 8)] ([(ARG1 + 16)] * 8)
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 40
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) COPY (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 RETURN 1
(ARG1 + 216) INT_ADD ARG1 216
(ARG1 + 216) INT_ADD ARG1 216
(ARG1 + 216) INT_ADD ARG1 216
 CALL func (RSP + -72) (ARG1 + 216) ARG2 (ARG1 + 216)
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647) (f() / 4611686014132420609) ARG2
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() / 2147483647) INT_RIGHT f() 64
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func (ARG1 + 216)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func (ARG1 + 216)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) INT_RIGHT f() 64
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(RSP + -72) PTRSUB RSP -72
 RETURN 1
40 CAST 40
 CALL libcall___assert_fail_thunk 0 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 202 void {anonymous}::CommandLineParser::registerCategory(llvm::cl::OptionCategory*)
0 COPY 0
void {anonymous}::CommandLineParser::registerCategory(llvm::cl::OptionCategory*) COPY void {anonymous}::CommandLineParser::registerCategory(llvm::cl::OptionCategory*)
[40] LOAD 433 40
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
 CALL func f() ARG1 ARG2 f()
6966272 PTRSUB 0 6966272
 RETURN 0
f() CALL func 6966272
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(([(ARG1 + 8)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 3
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
 RETURN 0 (([(ARG1 + 8)] - [ARG1]) / 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -24) PTRSUB RSP -24
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
 RETURN 1
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
ARG1 COPY ARG1
 RETURN 0
(RSP + -16) PTRSUB RSP -16
 CALL func (RSP + -16)
 CALL func ARG1
 RETURN 0
 CALL libcall_memmove_thunk ARG3 ARG1 (((ARG2 - ARG1) / 8) * 8)
ARG1 CAST ARG1
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG3 CAST ARG3
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) INT_ADD ARG3 (((ARG2 - ARG1) / 8) * 8)
 CBRANCH (((ARG2 - ARG1) / 8) INT_NOTEQUAL 0)
0 INT_NOTEQUAL ((ARG2 - ARG1) / 8) 0
((ARG2 - ARG1) / 8) INT_SRIGHT (ARG2 - ARG1) 3
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
 RETURN 0 (ARG3 + (((ARG2 - ARG1) / 8) * 8))
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) CAST (ARG3 + (((ARG2 - ARG1) / 8) * 8))
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 RETURN 0
 CALL func f() f() f()
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG4
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 ARG4
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
f(ARG1) CALL func ARG1
 CALL func f(ARG1)
 RETURN 0
ARG1 COPY ARG1
f() CALL func ARG1
ARG2 COPY ARG2
 CALL libcall___throw_length_error_thunk ARG3
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f(RSP) CALL func (RSP + -48) (RSP + -72) (RSP + -72)
(f() - f()) INT_SUB f() f()
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
f(RSP) CAST f(RSP)
f() CALL func f(ARG1)
f() CALL func ARG1
(f() - f()) CAST (f() - f())
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(RSP + -48) PTRSUB RSP -48
 CBRANCH ((f() - f()) INT_LESS ARG2)
(RSP + -72) PTRSUB RSP -72
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() [(f() + 40)]
([f(RSP)] + f()) INT_ADD [f(RSP)] f()
f() CALL func f(ARG1)
0 INT_LESS ([f(RSP)] + f()) f()
0 INT_LESS (f() - f()) ARG2
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (([f(RSP)] + f()) INT_LESS f())
[f(RSP)] LOAD 433 f(RSP)
f() CALL func f(ARG1)
f() CALL func f(ARG1)
 CBRANCH (f() INT_LESS ([f(RSP)] + f()))
([f(RSP)] + f()) COPY ([f(RSP)] + f())
 BRANCH VZERO
f() COPY f()
0 INT_LESS f() ([f(RSP)] + f())
f() CALL func f(ARG1)
 RETURN 0 f(RSP)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
f(ARG3) CALL func ARG3
f(ARG2) CALL func 8 ARG2
0 INT_NOTEQUAL f(ARG2) 0
[f(ARG3)] LOAD 433 f(ARG3)
 RETURN 0
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
f(ARG3) CAST f(ARG3)
f(ARG2) CAST f(ARG2)
 STORE 433 f(ARG2) [f(ARG3)]
 CALL func ARG1 ARG2 f(ARG3) ARG2
f(ARG3) CALL func ARG3
 RETURN 0
f(ARG2) CALL func ARG2
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f(RSP) CALL func ARG1 1 0
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 8) [ARG1]
f() CALL func ARG1 f(RSP) f(RSP)
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 ((f() * 8) + f()) f(ARG2) ((f() * 8) + f())
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 f()
[ARG1] LOAD 433 ARG1
f(ARG1) CALL func ARG1
f(ARG1) CALL func ARG1
f() CALL func [ARG1] [(ARG1 + 8)] f() f(ARG1)
 STORE 433 (ARG1 + 8) (f() + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(([(ARG1 + 16)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 3
 STORE 433 (ARG1 + 16) ((f(RSP) * 8) + f())
((f(RSP) * 8) + f()) INT_ADD (f(RSP) * 8) f()
((f() * 8) + f()) INT_ADD (f() * 8) f()
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(f(RSP) * 8) INT_MULT f(RSP) 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() + 8) INT_ADD f() 8
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
(f() * 8) INT_MULT f() 8
0 COPY 0
 RETURN 0
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
 CALL func ARG1 ARG2 ARG2
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1 [(ARG1 + 8)] ARG2 [(ARG1 + 8)]
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0
 CBRANCH ([(ARG1 + 8)] INT_EQUAL [(ARG1 + 16)])
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_EQUAL [(ARG1 + 8)] [(ARG1 + 16)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + 8) INT_ADD [(ARG1 + 8)] 8
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 ARG1 ARG2
ARG1 COPY ARG1
ARG2 COPY ARG2
(f() + 40) INT_ADD f() 40
(RSP + -24) PTRSUB RSP -24
f() CALL func 6966272
 CALL func (f() + 40) (RSP + -24) (f() + 40)
 RETURN 0
6966272 PTRSUB 0 6966272
 CALL func f() ARG1 f()
6966272 PTRSUB 0 6966272
f() CALL func 6966272
 RETURN 0
 CALL func f() ARG1 f()
6966272 PTRSUB 0 6966272
f() CALL func 6966272
 RETURN 0
[ARG1] LOAD 433 ARG1
[[ARG1]] LOAD 433 [ARG1]
[[ARG1]] COPY [[ARG1]]
[ARG1] CAST [ARG1]
 RETURN 0 [[ARG1]]
[ARG1] LOAD 433 ARG1
[ARG2] LOAD 433 ARG2
0 INT_ZEXT 0
([ARG2] & -256) INT_OR ([ARG2] & -256) 0
0 INT_NOTEQUAL [ARG1] [ARG2]
 RETURN 0 ([ARG2] & -256)
([ARG2] & -256) INT_AND [ARG2] -256
(ARG1 + 176) INT_ADD ARG1 176
(ARG1 + 176) INT_ADD ARG1 176
(ARG1 + 176) INT_ADD ARG1 176
(ARG1 + 176) INT_ADD ARG1 176
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 8) PTRADD ARG2 1 8
ARG2 COPY ARG2
ARG2 COPY ARG2
f(ARG2 , RSP) LOAD 433 ARG2
ARG2 COPY ARG2
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 8) PTRADD ARG2 1 8
ARG2 COPY ARG2
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 8) PTRADD ARG2 1 8
 STORE 433 ARG2 ([f(ARG2 , RSP)] + [ARG2])
ARG2 COPY ARG2
(ARG3 + 8) PTRADD ARG3 1 8
 STORE 433 ARG3 ([f(ARG2 , RSP)] + [ARG2])
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL [(ARG2 + 8)] 0
 CBRANCH ([(ARG2 + 8)] INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
 BRANCH VZERO
(RSP + -176) PTRSUB RSP -176
f() CALL func (RSP + -176)
(f() + 8) INT_ADD f() 8
[(f() + 8)] LOAD 433 (f() + 8)
(f() + 8) CAST (f() + 8)
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
f() CALL func (RSP + -240)
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
(f() + 8) INT_ADD f() 8
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
(RSP + -240) PTRSUB RSP -240
(f() + 40) CAST (f() + 40)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 RETURN 1
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
(f() + 8) CAST (f() + 8)
 STORE 433 (ARG2 + 8) [f(RSP)]
[(f() + 8)] LOAD 433 (f() + 8)
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
(RSP + -240) PTRSUB RSP -240
 RETURN 1
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
f() CALL func (RSP + -240) (RSP + -56) (RSP + -56)
f() CALL func (ARG1 + 176)
f() CALL func (ARG1 + 176) ([f(ARG2 , RSP)] + [ARG2]) [f(RSP)] ([f(ARG2 , RSP)] + [ARG2])
(RSP + -56) PTRSUB RSP -56
0 COPY 0
0 INT_EQUAL f() 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 CBRANCH (f() INT_EQUAL 0)
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
f() COPY f()
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
([(ARG2 + 8)] - [f(ARG2 , RSP)]) INT_SUB [(ARG2 + 8)] [f(ARG2 , RSP)]
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
f(ARG2 , RSP) CALL func (RSP + -208) (ARG2 + 8) (ARG2 + 8)
 RETURN 1
[f(ARG2 , RSP)] LOAD 433 f(ARG2 , RSP)
0 COPY 0
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
0 COPY 0
[ARG2] LOAD 433 ARG2
(RSP + -200) PTRSUB RSP -200
[f(RSP)] LOAD 433 f(RSP)
(RSP + -208) PTRSUB RSP -208
f(RSP) CAST f(RSP)
f(RSP) CALL func (RSP + -200) (RSP + -176) (RSP + -176)
(RSP + -176) PTRSUB RSP -176
f(ARG2 , RSP) CAST f(ARG2 , RSP)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 STORE 433 (ARG3 + 8) [f(RSP)]
([f(ARG2 , RSP)] + [ARG2]) INT_ADD [f(ARG2 , RSP)] [ARG2]
f(ARG2) COPY f(ARG2)
 CBRANCH (([f(ARG2 , RSP)] + [ARG2]) INT_EQUAL 0)
[f(RSP)] COPY [f(RSP)]
(ARG2 + 8) PTRADD ARG2 1 8
0 INT_EQUAL ([f(ARG2 , RSP)] + [ARG2]) 0
([f(ARG2 , RSP)] + [ARG2]) COPY ([f(ARG2 , RSP)] + [ARG2])
 CBRANCH (f() INT_EQUAL 0)
-1 COPY -1
[ARG2] LOAD 433 ARG2
f() CAST f()
(f() - [ARG2]) CAST (f() - [ARG2])
 BRANCH VZERO
(f() - [ARG2]) INT_SUB f() [ARG2]
 CBRANCH ([f(ARG2 , RSP)] INT_LESS [(ARG2 + 8)])
(ARG2 + 8) PTRADD ARG2 1 8
f() CALL libcall_memchr_thunk ([f(ARG2 , RSP)] + [ARG2]) 61 ([(ARG2 + 8)] - [f(ARG2 , RSP)])
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
0 INT_EQUAL f() 0
[ARG2] LOAD 433 ARG2
([(ARG2 + 8)] - [f(ARG2 , RSP)]) INT_SUB [(ARG2 + 8)] [f(ARG2 , RSP)]
([f(ARG2 , RSP)] + [ARG2]) INT_ADD [f(ARG2 , RSP)] [ARG2]
([f(ARG2 , RSP)] + [ARG2]) CAST ([f(ARG2 , RSP)] + [ARG2])
 CBRANCH (f(ARG2) INT_EQUAL -1)
0 INT_EQUAL f() 0
([f(ARG2 , RSP)] + [ARG2]) COPY ([f(ARG2 , RSP)] + [ARG2])
[ARG2] LOAD 433 ARG2
f() COPY f()
(ARG2 + 8) PTRADD ARG2 1 8
[f(RSP)] LOAD 433 f(RSP)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
f(ARG2) COPY f(ARG2)
f() CALL func (RSP + -176) (RSP + -56) (RSP + -56)
f(RSP) CALL func (RSP + -216) (RSP + -176) (RSP + -176)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(RSP + -176) PTRSUB RSP -176
([f(ARG2 , RSP)] + [ARG2]) INT_ADD [f(ARG2 , RSP)] [ARG2]
 CBRANCH (([f(ARG2 , RSP)] + [ARG2]) INT_EQUAL 0)
(RSP + -56) PTRSUB RSP -56
0 INT_EQUAL ([f(ARG2 , RSP)] + [ARG2]) 0
f(RSP) CAST f(RSP)
(RSP + -216) PTRSUB RSP -216
f(ARG2 , RSP) CAST f(ARG2 , RSP)
(RSP + -224) PTRSUB RSP -224
([(ARG2 + 8)] - [f(ARG2 , RSP)]) INT_SUB [(ARG2 + 8)] [f(ARG2 , RSP)]
f() CALL func (ARG1 + 176)
f(ARG2 , RSP) CALL func (RSP + -224) (ARG2 + 8) (ARG2 + 8)
[f(ARG2 , RSP)] LOAD 433 f(ARG2 , RSP)
(RSP + -176) PTRSUB RSP -176
f() CALL func (ARG1 + 176) f(ARG2 , RSP) [(ARG2 + 8)] (ARG1 + 176)
0 COPY 0
[f(RSP)] COPY [f(RSP)]
-1 COPY -1
 CBRANCH (([f(ARG2 , RSP)] + [ARG2]) INT_EQUAL 0)
0 INT_EQUAL ([f(ARG2 , RSP)] + [ARG2]) 0
[f(ARG2 , RSP)] LOAD 433 f(ARG2 , RSP)
(RSP + -184) PTRSUB RSP -184
(f(ARG2) + 1) INT_ADD f(ARG2) 1
f(ARG2) CAST f(ARG2)
f(ARG2 , RSP) CALL func (RSP + -192) (ARG2 + 8) (ARG2 + 8)
(RSP + -192) PTRSUB RSP -192
([(ARG2 + 8)] - [f(ARG2 , RSP)]) INT_SUB [(ARG2 + 8)] [f(ARG2 , RSP)]
(RSP + -176) PTRSUB RSP -176
f(RSP) CAST f(RSP)
f(ARG2 , RSP) CAST f(ARG2 , RSP)
[ARG2] LOAD 433 ARG2
[f(RSP)] COPY [f(RSP)]
f(RSP) CALL func (RSP + -184) (RSP + -176) (RSP + -176)
[f(RSP)] LOAD 433 f(RSP)
 BRANCH VZERO
([f(ARG2 , RSP)] + [ARG2]) COPY ([f(ARG2 , RSP)] + [ARG2])
(ARG2 + 8) PTRADD ARG2 1 8
0 COPY 0
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
([f(ARG2 , RSP)] + [ARG2]) INT_ADD [f(ARG2 , RSP)] [ARG2]
 RETURN 0 f()
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
0 COPY 0
f(ARG2 , RSP) CAST f(ARG2 , RSP)
f(ARG2 , RSP) CALL func (RSP + -232) (ARG2 + 8) (ARG2 + 8)
[f(ARG2 , RSP)] LOAD 433 f(ARG2 , RSP)
 BRANCH VZERO
[(ARG2 + 8)] CAST [(ARG2 + 8)]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
0 INT_LESS [f(ARG2 , RSP)] [(ARG2 + 8)]
0 INT_NOTEQUAL [f(RSP)] 0
(RSP + -232) PTRSUB RSP -232
0 INT_NOTEQUAL [f(RSP)] 0
(ARG2 + 8) PTRADD ARG2 1 8
0 INT_EQUAL f(ARG2) -1
0 INT_NOTEQUAL [f(RSP)] 0
0 COPY 0
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -24) PTRSUB RSP -24
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
 CALL func (RSP + -24) [ARG1] 0 [ARG1]
40 INT_ADD 0 40
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL [(ARG1 + 8)] 0
(FS_OFFSET + 40) INT_ADD 0 40
(ARG1 + 8) CAST (ARG1 + 8)
[40] LOAD 433 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
 CALL func (RSP + -24) ([ARG1] + ([(ARG1 + 8)] * 8)) 1 ([ARG1] + ([(ARG1 + 8)] * 8))
40 INT_ADD 0 40
([(ARG1 + 8)] * 8) INT_MULT [(ARG1 + 8)] 8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
[40] LOAD 433 40
(RSP + -24) PTRSUB RSP -24
([ARG1] + ([(ARG1 + 8)] * 8)) INT_ADD [ARG1] ([(ARG1 + 8)] * 8)
[(ARG1 + 8)] INT_ZEXT [(ARG1 + 8)]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
VZERO CALLIND [([ARG1] + 8)] ARG1 ARG2 ARG1
[ARG1] LOAD 433 ARG1
ARG1 CAST ARG1
ARG1 CAST ARG1
0 INT_EQUAL ([(ARG1 + 12)] & 24) 0
(ARG1 + 12) INT_ADD ARG1 12
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(ARG1 + 12) CAST (ARG1 + 12)
 RETURN 0 f(ARG1)
 CBRANCH (([(ARG1 + 12)] & 24) INT_EQUAL 0)
([(ARG1 + 12)] & 24) INT_AND [(ARG1 + 12)] 24
[([ARG1] + 8)] LOAD 433 ([ARG1] + 8)
 BRANCH VZERO
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
([(ARG1 + 12)] / 8) INT_RIGHT [(ARG1 + 12)] 3
(ARG1 + 12) CAST (ARG1 + 12)
(3 & ([(ARG1 + 12)] / 8)) INT_ZEXT (3 & ([(ARG1 + 12)] / 8))
(ARG1 + 12) INT_ADD ARG1 12
(3 & ([(ARG1 + 12)] / 8)) INT_AND ([(ARG1 + 12)] / 8) 3
([ARG1] + 8) INT_ADD [ARG1] 8
([ARG1] + 8) CAST ([ARG1] + 8)
ARG1 COPY ARG1
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 ([ARG1] + 8)
 CALL func ARG1
 RETURN 0 ARG1
([ARG1] + 8) INT_ADD [ARG1] 8
ARG1 COPY ARG1
ARG2 COPY ARG2
0 INT_EQUAL ARG2 0
f() CALL func ARG3
f() CALL func ARG3
 CALL libcall_operator=_thunk ARG4 (RSP + -328)
 CALL libcall_operator=_thunk ARG4 (RSP + -328)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CBRANCH (ARG2 INT_EQUAL 0)
(f() + 40) CAST (f() + 40)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 0)
 BRANCH VZERO
1 COPY 1
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
 CBRANCH (f() INT_EQUAL 0)
f() COPY f()
 CBRANCH (f() INT_LESS f())
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 8)] 0
(f(RSP) + 8) CAST (f(RSP) + 8)
0 INT_LESS f() f()
(f(RSP) + 8) PTRADD f(RSP) 8 1
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
f() COPY f()
f(RSP) COPY f(RSP)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 CBRANCH (f() INT_NOTEQUAL f())
[f()] LOAD 433 f()
(RSP + -392) PTRSUB RSP -392
f() CALL func (RSP + -392) f(RSP) f(RSP) 1 f()
0 INT_EQUAL f() 0
[(f() + 8)] LOAD 433 (f() + 8)
(f() + 8) PTRADD f() 1 8
 BRANCH VZERO
[f()] COPY [f()]
(f() + 16) PTRADD f() 2 8
[(f() + 8)] COPY [(f() + 8)]
0 INT_NOTEQUAL f() f()
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -296) PTRSUB RSP -296
 CALL func (RSP + -296) ([(f() + 8)] + 24) ([(f() + 8)] + 24)
([(f() + 8)] + 24) PTRADD [(f() + 8)] 3 8
(RSP + -328) PTRSUB RSP -328
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
(RSP + -680) COPY (RSP + -680)
(RSP + -520) PTRSUB RSP -520
[(f() + 8)] LOAD 433 (f() + 8)
 BRANCH VZERO
(RSP + -680) PTRSUB RSP -680
(RSP + -488) PTRSUB RSP -488
 CALL libcall_~basic_string_thunk (RSP + -328)
(RSP + -328) CAST (RSP + -328)
(RSP + -456) PTRSUB RSP -456
f() COPY f()
(RSP + -648) PTRSUB RSP -648
(RSP + -640) PTRSUB RSP -640
f() COPY f()
0 COPY 0
(RSP + -456) PTRSUB RSP -456
f() CALL func f()
 CALL libcall_~basic_string_thunk (RSP + -328)
(RSP + -328) CAST (RSP + -328)
(RSP + -344) PTRSUB RSP -344
(RSP + -424) PTRSUB RSP -424
(RSP + -296) PTRSUB RSP -296
(RSP + -392) PTRSUB RSP -392
f() COPY f()
(RSP + -360) PTRSUB RSP -360
 CALL func (RSP + -392) (RSP + -456) (RSP + -424)
(RSP + -488) PTRSUB RSP -488
 CALLIND [([[(f() + 8)]] + 48)] [(f() + 8)] (RSP + -296) [(f() + 8)] (RSP + -296)
[([[(f() + 8)]] + 48)] LOAD 433 ([[(f() + 8)]] + 48)
(RSP + -296) PTRSUB RSP -296
0 COPY 0
4704035 PTRSUB 0 4704035
 CALL func (RSP + -328) (RSP + -536) (RSP + -536)
(RSP + -328) PTRSUB RSP -328
(RSP + -536) PTRSUB RSP -536
(RSP + -328) PTRSUB RSP -328
 CALL func (RSP + -328) (RSP + -392) (RSP + -392)
(RSP + -328) PTRSUB RSP -328
(RSP + -392) PTRSUB RSP -392
(RSP + -520) PTRSUB RSP -520
(RSP + -328) PTRSUB RSP -328
0 INT_NOTEQUAL f() 0
f() CALL func [(f() + 8)]
(RSP + -536) PTRSUB RSP -536
(RSP + -296) PTRSUB RSP -296
[[(f() + 8)]] LOAD 433 [(f() + 8)]
(f() + 8) CAST (f() + 8)
(f() + 8) INT_ADD f() 8
0 COPY 0
0 COPY 0
(RSP + -328) PTRSUB RSP -328
 CALL func (RSP + -360) (RSP + -680) 61 (RSP + -680)
(RSP + -680) PTRSUB RSP -680
(RSP + -360) PTRSUB RSP -360
0 COPY 0
 CALL func (RSP + -296)
(RSP + -296) PTRSUB RSP -296
 CALL func (RSP + -520) (RSP + -536) (RSP + -536)
([[(f() + 8)]] + 48) CAST ([[(f() + 8)]] + 48)
([[(f() + 8)]] + 48) INT_ADD [[(f() + 8)]] 48
(RSP + -424) PTRSUB RSP -424
[f(RSP)] LOAD 433 f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CALL func (RSP + -456) (RSP + -520) (RSP + -488) (RSP + -520)
(RSP + -648) PTRSUB RSP -648
 CALL func (RSP + -488) 4704035
(RSP + -648) PTRSUB RSP -648
 CALL func (RSP + -296)
(RSP + -296) COPY (RSP + -296)
(RSP + -296) COPY (RSP + -296)
0 INT_NOTEQUAL f() 0
f() CALL func (RSP + -648) (RSP + -640) (RSP + -640)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
0 INT_NOTEQUAL f() 3
 CALL func (RSP + -424) f(RSP) f(RSP)
f() CALL func (RSP + -648)
-1 BOOL_NEGATE 0
 BRANCH VZERO
 CALL func (RSP + -648)
 CBRANCH -1
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG5 COPY ARG5
ARG5 COPY ARG5
([f(RSP)] + ARG5) INT_ADD [f(RSP)] ARG5
ARG7 COPY ARG7
ARG6 COPY ARG6
ARG2 COPY ARG2
ARG1 COPY ARG1
f() CALL func ARG1
 CBRANCH ((f() & 1) INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
4438956 COPY 4438956
0 INT_EQUAL (f() & 1) 0
(f() & 1) INT_AND f() 1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
(RSP + -304) PTRSUB RSP -304
(f(ARG6) - [f(RSP)]) INT_SUB f(ARG6) [f(RSP)]
f(RSP) CAST f(RSP)
0 COPY 0
(RSP + -184) PTRSUB RSP -184
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
[f(RSP)] COPY [f(RSP)]
([f(RSP)] + ARG5) COPY ([f(RSP)] + ARG5)
f(RSP) CALL func (RSP + -208) (RSP + -184) (RSP + -184)
[f(RSP)] LOAD 433 f(RSP)
(f(ARG5 , RSP) + [f(RSP)]) COPY (f(ARG5 , RSP) + [f(RSP)])
[f(RSP)] COPY [f(RSP)]
 RETURN 1
f(ARG5 , RSP) CAST f(ARG5 , RSP)
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
-1 COPY -1
(f(ARG5 , RSP) + 1) INT_ADD f(ARG5 , RSP) 1
 CBRANCH (([f(RSP)] + ARG5) INT_EQUAL 0)
0 INT_EQUAL ([f(RSP)] + ARG5) 0
f(RSP) CALL func (RSP + -216) (RSP + -304) (RSP + -304)
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CAST f(RSP)
(RSP + -208) PTRSUB RSP -208
(RSP + -216) PTRSUB RSP -216
 CBRANCH ([f(ARG2 , RSP)] INT_LESS [f(RSP)])
([f(RSP)] - [f(ARG2 , RSP)]) INT_SUB [f(RSP)] [f(ARG2 , RSP)]
f() CALL libcall_memchr_thunk ([f(ARG2 , RSP)] + (f(ARG5 , RSP) + [f(RSP)])) 44 ([f(RSP)] - [f(ARG2 , RSP)])
 CBRANCH (f() INT_NOTEQUAL 0)
-1 COPY -1
44 INT_SEXT 44
([f(ARG2 , RSP)] + (f(ARG5 , RSP) + [f(RSP)])) INT_ADD [f(ARG2 , RSP)] (f(ARG5 , RSP) + [f(RSP)])
([f(ARG2 , RSP)] + (f(ARG5 , RSP) + [f(RSP)])) CAST ([f(ARG2 , RSP)] + (f(ARG5 , RSP) + [f(RSP)]))
4440011 COPY 4440011
0 INT_NOTEQUAL f() 0
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
VZERO CALLIND [([f(ARG1)] + 56)] f(ARG1) f(ARG2) f(ARG3) f(ARG4) (f(ARG5 , RSP) + [f(RSP)]) [f(RSP)] f(ARG7) 4439302
0 COPY 0
0 INT_NOTEQUAL VZERO 0
 CBRANCH (VZERO INT_NOTEQUAL 0)
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
f(RSP) CALL func (RSP + -192) (RSP + -184) (RSP + -184)
[f(RSP)] LOAD 433 f(RSP)
f(ARG5 , RSP) CAST f(ARG5 , RSP)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(RSP + -200) PTRSUB RSP -200
(f() + 40) INT_ADD f() 40
-1 COPY -1
(f() + 40) CAST (f() + 40)
 BRANCH VZERO
(RSP + -192) PTRSUB RSP -192
f(RSP) CAST f(RSP)
(f(ARG5 , RSP) + 1) INT_ADD f(ARG5 , RSP) 1
0 INT_EQUAL f() [(f() + 40)]
(f(ARG5 , RSP) + [f(RSP)]) INT_ADD [f(RSP)] f(ARG5 , RSP)
f(RSP) CAST f(RSP)
(RSP + -80) PTRSUB RSP -80
f(RSP) CALL func (RSP + -200) (RSP + -80) (RSP + -80)
[f(RSP)] LOAD 433 f(RSP)
(RSP + -184) PTRSUB RSP -184
 CBRANCH ((f(ARG5 , RSP) + [f(RSP)]) INT_EQUAL 0)
1 COPY 1
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL (f(ARG5 , RSP) + [f(RSP)]) 0
(f(ARG6 , RSP) - [f(RSP)]) INT_SUB f(ARG6 , RSP) [f(RSP)]
[f(RSP)] COPY [f(RSP)]
(f(ARG5 , RSP) + [f(RSP)]) COPY (f(ARG5 , RSP) + [f(RSP)])
 CBRANCH (f() INT_NOTEQUAL 0)
(f() - ARG5) INT_SUB f() ARG5
 BRANCH VZERO
f() CAST f()
-1 COPY -1
(f() - ARG5) CAST (f() - ARG5)
(f() - (f(ARG5 , RSP) + [f(RSP)])) INT_SUB f() (f(ARG5 , RSP) + [f(RSP)])
(f() - (f(ARG5 , RSP) + [f(RSP)])) CAST (f() - (f(ARG5 , RSP) + [f(RSP)]))
 BRANCH VZERO
f() CAST f()
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 CBRANCH ([f(RSP)] INT_LESS ARG6)
([f(RSP)] + ARG5) INT_ADD [f(RSP)] ARG5
4439106 COPY 4439106
(ARG6 - [f(RSP)]) INT_SUB ARG6 [f(RSP)]
f() CALL libcall_memchr_thunk ([f(RSP)] + ARG5) 44 (ARG6 - [f(RSP)])
([f(RSP)] + ARG5) CAST ([f(RSP)] + ARG5)
44 INT_SEXT 44
0 INT_NOTEQUAL f() 0
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
4439955 COPY 4439955
f(ARG7) COPY f(ARG7)
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
 CBRANCH (f(ARG5 , RSP) INT_EQUAL -1)
0 COPY 0
44 COPY 44
(RSP + -224) PTRSUB RSP -224
 RETURN 1
0 INT_EQUAL f(ARG5 , RSP) -1
f(ARG2 , RSP) CALL func (RSP + -224)
f(ARG2 , RSP) CAST f(ARG2 , RSP)
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
[f(ARG2 , RSP)] LOAD 433 f(ARG2 , RSP)
0 INT_LESS [f(ARG2 , RSP)] [f(RSP)]
(f(ARG6 , RSP) - [f(RSP)]) INT_SUB f(ARG6 , RSP) [f(RSP)]
([f(ARG1)] + 56) INT_ADD [f(ARG1)] 56
[f(ARG1)] LOAD 433 f(ARG1)
f(RSP) CAST f(RSP)
(RSP + -240) PTRSUB RSP -240
([f(ARG1)] + 56) CAST ([f(ARG1)] + 56)
f(RSP) CAST f(RSP)
(RSP + -80) PTRSUB RSP -80
[([f(ARG1)] + 56)] LOAD 433 ([f(ARG1)] + 56)
(RSP + -232) PTRSUB RSP -232
f(ARG6 , RSP) COPY f(ARG6 , RSP)
[f(RSP)] COPY [f(RSP)]
(RSP + -184) PTRSUB RSP -184
f(RSP) CALL func (RSP + -232) (RSP + -184) (RSP + -184)
[f(RSP)] LOAD 433 f(RSP)
(f(ARG5 , RSP) + [f(RSP)]) COPY (f(ARG5 , RSP) + [f(RSP)])
[f(ARG1)] LOAD 433 f(ARG1)
f(ARG5 , RSP) COPY f(ARG5 , RSP)
4439302 COPY 4439302
f(ARG5 , RSP) COPY f(ARG5 , RSP)
 CBRANCH ((f(ARG5 , RSP) + [f(RSP)]) INT_EQUAL 0)
([f(ARG1)] + 56) CAST ([f(ARG1)] + 56)
([f(ARG1)] + 56) INT_ADD [f(ARG1)] 56
[([f(ARG1)] + 56)] LOAD 433 ([f(ARG1)] + 56)
(f(ARG5 , RSP) + [f(RSP)]) INT_ADD [f(RSP)] f(ARG5 , RSP)
0 INT_EQUAL (f(ARG5 , RSP) + [f(RSP)]) 0
f(RSP) CALL func (RSP + -240) (RSP + -80) (RSP + -80)
[f(RSP)] LOAD 433 f(RSP)
0 COPY 0
VZERO CALLIND [([f(ARG1)] + 56)] f(ARG1) f(ARG2) f(ARG3) f(ARG4) f(ARG5 , RSP) f(ARG6 , RSP) f(ARG7) f()
0 COPY 0
44 COPY 44
0 INT_NOTEQUAL [f(RSP)] 0
4439038 COPY 4439038
ARG6 COPY ARG6
f(RSP) CAST f(RSP)
f(RSP) CALL func (RSP + -248) (RSP + -80) (RSP + -80)
0 INT_NOTEQUAL [f(RSP)] 0
[f(RSP)] LOAD 433 f(RSP)
0 INT_NOTEQUAL [f(RSP)] 0
(RSP + -248) PTRSUB RSP -248
(RSP + -80) PTRSUB RSP -80
0 INT_LESS [f(RSP)] ARG6
(ARG1 + 20) INT_ADD ARG1 20
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
[(ARG1 + 20)] COPY [(ARG1 + 20)]
(ARG1 + 20) CAST (ARG1 + 20)
 RETURN 0 [(ARG1 + 20)]
0 INT_EQUAL ARG7 0
0 INT_EQUAL ARG7 0
f(ARG8) LOAD 433 ARG8
f(ARG8) LOAD 433 ARG8
f(ARG8) LOAD 433 ARG8
 STORE 433 ARG8 (f(ARG8) + 1)
f(ARG8) LOAD 433 ARG8
f(ARG8) LOAD 433 ARG8
 STORE 433 ARG8 (f(ARG8) + 1)
f(ARG8) LOAD 433 ARG8
f(ARG8) LOAD 433 ARG8
f() CALL func ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG5 COPY ARG5
ARG6 COPY ARG6
 CBRANCH (f(ARG1) INT_EQUAL 2)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL f(ARG1) 2
f(ARG1) CALL func ARG1
(FS_OFFSET + 40) INT_ADD 0 40
4440343 COPY 4440343
 CBRANCH (ARG4 INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 INT_SLESSEQUAL ARG6 (f(ARG8) + 1)
(f(ARG8) + 1) INT_ADD f(ARG8) 1
 CBRANCH (ARG6 INT_SLESSEQUAL (f(ARG8) + 1))
 CBRANCH (f(ARG1) INT_EQUAL 3)
0 INT_EQUAL f(ARG1) 3
0 INT_EQUAL ARG4 0
(f() + 40) INT_ADD f() 40
f() CALL func f(ARG1) f(ARG8) f(ARG2) f(ARG3) f(ARG4) f(ARG5) 0 f()
 BRANCH VZERO
[(f() + 40)] LOAD 433 (f() + 40)
0 COPY 0
(f() + 40) CAST (f() + 40)
0 INT_EQUAL 0 [(f() + 40)]
0 INT_NOTEQUAL f(ARG4) 0
 CBRANCH (f(ARG4) INT_NOTEQUAL 0)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
 CBRANCH (ARG4 INT_NOTEQUAL 0)
(RSP + -184) PTRSUB RSP -184
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -120) (RSP + -152) (RSP + -184) (RSP + -152)
 CALL func (RSP + -200)
' specified. COPY ' specified.
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -184) (RSP + -264) (RSP + -264)
(RSP + -152) PTRSUB RSP -152
does not allow a value! ' COPY does not allow a value! '
(RSP + -200) PTRSUB RSP -200
(RSP + -120) PTRSUB RSP -120
(RSP + -88) PTRSUB RSP -88
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) (RSP + -120) (RSP + -88) (RSP + -120)
 CALL func (RSP + -152) does not allow a value! '
 CALL func (RSP + -88) ' specified.
 BRANCH VZERO
(RSP + -184) PTRSUB RSP -184
f() CALL func ARG1 (RSP + -56) A_Stack[-0xc8]:8 A_Stack[-0xc0]:8
(RSP + -152) PTRSUB RSP -152
(RSP + -264) PTRSUB RSP -264
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
(f() + 4294967295) INT_ADD f() 4294967295
1 COPY 1
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -56) PTRSUB RSP -56
multi-valued option specified with ValueDisallowed modifier! COPY multi-valued option specified with ValueDisallowed modifier!
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
0 INT_NOTEQUAL ARG4 0
f() CALL func ARG1 (RSP + -56) A_Stack[-0x58]:8 A_Stack[-0x50]:8
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -88)
 CALL func (RSP + -56) multi-valued option specified with ValueDisallowed modifier!
0 INT_SLESSEQUAL f(ARG6) (f(ARG8) + 1)
0 COPY 0
(f(ARG8) + 1) INT_ADD f(ARG8) 1
 CBRANCH (f(ARG6) INT_SLESSEQUAL (f(ARG8) + 1))
f() CALL func f(ARG1) f(ARG8) f(ARG2) f(ARG3) f(ARG4) f(ARG5) 0 f()
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 CALL func (RSP + -56) requires a value!
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(RSP + -88) PTRSUB RSP -88
f() CALL func ARG1 (RSP + -56) A_Stack[-0x58]:8 A_Stack[-0x50]:8
 CBRANCH (ARG7 INT_EQUAL 0)
 BRANCH VZERO
 CALL func (RSP + -88)
requires a value! COPY requires a value!
0 INT_NOTEQUAL f() 0
4440581 COPY 4440581
A_Stack[-0x30]:8 COPY A_Stack[-0x30]:8
bool ProvideOption(llvm::cl::Option*, llvm::StringRef, llvm::StringRef, int, const char* const*, int&) COPY bool ProvideOption(llvm::cl::Option*, llvm::StringRef, llvm::StringRef, int, const char* const*, int&)
(RSP + -56) PTRSUB RSP -56
 RETURN 1
 CALL libcall___assert_fail_thunk argv && "null check" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 367 bool ProvideOption(llvm::cl::Option*, llvm::StringRef, llvm::StringRef, int, const char* const*, int&)
A_Stack[-0x38]:8 COPY A_Stack[-0x38]:8
(f(ARG8) + 1) INT_ADD f(ARG8) 1
argv && "null check" COPY argv && "null check"
 BRANCH VZERO
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
 CALL func (RSP + -56)
(f() + 4294967295) INT_ADD f() 4294967295
1 COPY 1
1 COPY 1
 BRANCH VZERO
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -88)
 CALL func (RSP + -56) not enough values!
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
f() CALL func f(ARG1) (RSP + -56) f() f()
 CBRANCH (ARG7 INT_EQUAL 0)
not enough values! COPY not enough values!
 BRANCH VZERO
f() CALL func f(ARG1) f(ARG8) f(ARG2) f(ARG3) f() f() f() 4441312
0 INT_NOTEQUAL f() 0
(f(ARG8) + 1) INT_ADD f(ARG8) 1
 CALL func (RSP + -56)
4441312 COPY 4441312
bool ProvideOption(llvm::cl::Option*, llvm::StringRef, llvm::StringRef, int, const char* const*, int&) COPY bool ProvideOption(llvm::cl::Option*, llvm::StringRef, llvm::StringRef, int, const char* const*, int&)
f() COPY f()
 RETURN 1
argv && "null check" COPY argv && "null check"
 CALL libcall___assert_fail_thunk argv && "null check" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 401 bool ProvideOption(llvm::cl::Option*, llvm::StringRef, llvm::StringRef, int, const char* const*, int&)
f() COPY f()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
(RSP + -56) PTRSUB RSP -56
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 CALL func ARG1 [(ARG1 + 24)] [(ARG1 + 32)] ARG2 ARG3 0 0 (RSP + -20)
ARG4 COPY ARG4
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 24) INT_ADD ARG1 24
40 CAST 40
(RSP + -20) PTRSUB RSP -20
(ARG1 + 32) CAST (ARG1 + 32)
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(ARG1 + 24) CAST (ARG1 + 24)
[40] LOAD 433 40
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
f() CALL func ARG1
0 INT_ZEXT 0
(f() & -256) INT_AND f() -256
(f() / 2147483647) SUBPIECE f() 0
(f() & -256) INT_OR (f() & -256) 0
0 INT_EQUAL (f() / 2147483647) 3
 RETURN 0 (f() & -256)
f() CALL func ARG1
f() CALL func ARG1
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 2)
1 COPY 1
0 COPY 0
 RETURN 0 0
 RETURN 0 1
0 INT_NOTEQUAL f() 2
f(ARG1) CALL func ARG1 ARG2 ARG3 ARG2
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
0 INT_EQUAL f(ARG1) 4294967295
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
 CBRANCH (f(ARG1) INT_EQUAL 4294967295)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(RSP + -24) PTRSUB RSP -24
f(ARG1) INT_SEXT f(ARG1)
([ARG1] + (f(ARG1) * 8)) INT_ADD [ARG1] (f(ARG1) * 8)
 CALL func (RSP + -24) ([ARG1] + (f(ARG1) * 8)) 1 ([ARG1] + (f(ARG1) * 8))
(f(ARG1) * 8) INT_MULT f(ARG1) 8
 BRANCH VZERO
 RETURN 0 f()
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 STORE 433 ARG3 f(ARG2 , RSP)
VZERO CALLIND ARG4 [(f() + 8)]
f() CALL func ARG5 (f(ARG1 , RSP) + [f(RSP)]) [f(RSP)] (f(ARG1 , RSP) + [f(RSP)])
f() CALL func ARG5
f() CALL func ARG5
f() CALL func ARG5 ARG1 ARG2 ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -112) PTRSUB RSP -112
(RSP + -104) PTRSUB RSP -104
0 INT_EQUAL f() 0
 CBRANCH ~(f())
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
~(f()) BOOL_NEGATE f()
f() CALL func (RSP + -112) (RSP + -104) (RSP + -104)
 CBRANCH (f(ARG2 , RSP) INT_LESS 2)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 RETURN 0 f()
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (f() INT_NOTEQUAL 0)
(f() + 8) CAST (f() + 8)
f() CALL func (RSP + -112)
(f() + 8) INT_ADD f() 8
[(f() + 8)] LOAD 433 (f() + 8)
(RSP + -112) PTRSUB RSP -112
0 COPY 0
0 INT_NOTEQUAL VZERO 0
 CBRANCH (VZERO INT_NOTEQUAL 0)
 CBRANCH f()
0 COPY 0
(f() + 8) CAST (f() + 8)
 BRANCH VZERO
(RSP + -112) PTRSUB RSP -112
f() CALL func (RSP + -112)
(f() + 8) INT_ADD f() 8
[(f() + 8)] LOAD 433 (f() + 8)
(RSP + -88) PTRSUB RSP -88
(f() + 40) INT_ADD f() 40
f() CALL func (RSP + -112) (RSP + -56) (RSP + -56)
(RSP + -80) PTRSUB RSP -80
(f(ARG1 , RSP) + [f(RSP)]) INT_ADD [f(RSP)] f(ARG1 , RSP)
0 INT_NOTEQUAL f() [(f() + 40)]
(RSP + -112) PTRSUB RSP -112
(RSP + -56) PTRSUB RSP -56
 CBRANCH ((f(ARG1 , RSP) + [f(RSP)]) INT_EQUAL 0)
(f(ARG2 , RSP) - [f(RSP)]) INT_SUB f(ARG2 , RSP) [f(RSP)]
(f() + 40) CAST (f() + 40)
f(RSP) CAST f(RSP)
0 INT_EQUAL (f(ARG1 , RSP) + [f(RSP)]) 0
[(f() + 40)] LOAD 433 (f() + 40)
f(RSP) CAST f(RSP)
(f(ARG2 , RSP) + 1) INT_SUB f(ARG2 , RSP) 1
(RSP + -96) PTRSUB RSP -96
f(RSP) CALL func (RSP + -88) (RSP + -80) (RSP + -80)
0 COPY 0
[f(RSP)] LOAD 433 f(RSP)
0 INT_NOTEQUAL f() 0
(RSP + -128) PTRSUB RSP -128
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
[f(RSP)] COPY [f(RSP)]
f(RSP) CALL func (RSP + -96) (RSP + -128) (RSP + -128)
[f(RSP)] LOAD 433 f(RSP)
0 INT_LESS f(ARG2 , RSP) 2
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
 RETURN 1
[f(RSP)] COPY [f(RSP)]
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
1 COPY 1
 BRANCH VZERO
0 INT_NOTEQUAL [f(RSP)] 0
f() CALL func ARG1 ARG2 ARG3 ARG2
f() CALL func ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func (RSP + -32) (RSP + -24) (RSP + -24)
40 CAST 40
40 INT_ADD 0 40
(RSP + -24) PTRSUB RSP -24
0 COPY 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -32) PTRSUB RSP -32
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_EQUAL f() 0
[40] LOAD 433 40
 RETURN 0 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
ARG1 COPY ARG1
f(ARG1 , RSP) LOAD 433 ARG1
f(ARG1 , RSP) LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1 , RSP) LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 COPY ARG1
f(ARG1 , RSP) LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 ([f(ARG1 , RSP)] + [ARG1])
ARG1 COPY ARG1
ARG1 COPY ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 COPY ARG1
ARG1 COPY ARG1
 STORE 433 ARG1 ([f(ARG1 , RSP)] + [ARG1])
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG2 + 8) PTRADD ARG2 1 8
 STORE 433 ARG2 ([f(ARG1 , RSP)] + [ARG1])
 STORE 433 ARG3 (f(ARG3) | f())
f(ARG3) LOAD 433 ARG3
f() CALL func f(ARG1 , RSP) [(ARG1 + 8)] (RSP + -264) 4441602 ARG4
f() CALL func f(ARG1 , RSP) [(ARG1 + 8)] (RSP + -264) 4441634 ARG4
f() CALL func ARG4 f(ARG1 , RSP) [(ARG1 + 8)] f(ARG1 , RSP)
f() CALL func ARG4 f(ARG1 , RSP) [(ARG1 + 8)] f(ARG1 , RSP)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL [(ARG1 + 8)] 1
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 1)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
([f(ARG1 , RSP)] + [ARG1]) INT_ADD [f(ARG1 , RSP)] [ARG1]
(RSP + -248) PTRSUB RSP -248
0 COPY 0
[f(RSP)] COPY [f(RSP)]
(RSP + -256) PTRSUB RSP -256
 CBRANCH (([f(ARG1 , RSP)] + [ARG1]) INT_EQUAL 0)
([f(ARG1 , RSP)] + [ARG1]) COPY ([f(ARG1 , RSP)] + [ARG1])
0 INT_EQUAL ([f(ARG1 , RSP)] + [ARG1]) 0
(RSP + -72) PTRSUB RSP -72
([(ARG1 + 8)] - [f(ARG1 , RSP)]) INT_SUB [(ARG1 + 8)] [f(ARG1 , RSP)]
f(ARG1 , RSP) CALL func (RSP + -256) (ARG1 + 8) (ARG1 + 8)
 RETURN 1
0 COPY 0
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
f(ARG1 , RSP) CAST f(ARG1 , RSP)
 STORE 433 (ARG2 + 8) [f(RSP)]
f(RSP) CALL func (RSP + -248) (RSP + -72) (RSP + -72)
f(RSP) CAST f(RSP)
[f(RSP)] LOAD 433 f(RSP)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
f() COPY f()
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
([(ARG1 + 8)] - [f(ARG1 , RSP)]) INT_SUB [(ARG1 + 8)] [f(ARG1 , RSP)]
f(ARG1 , RSP) CALL func (RSP + -232) (ARG1 + 8) (ARG1 + 8)
(RSP + -224) PTRSUB RSP -224
f(RSP) CAST f(RSP)
[ARG1] LOAD 433 ARG1
f(ARG1 , RSP) CAST f(ARG1 , RSP)
(RSP + -216) PTRSUB RSP -216
(RSP + -232) PTRSUB RSP -232
[f(RSP)] COPY [f(RSP)]
([f(ARG1 , RSP)] + [ARG1]) COPY ([f(ARG1 , RSP)] + [ARG1])
f(RSP) CALL func (RSP + -224) (RSP + -216) (RSP + -216)
[f(RSP)] LOAD 433 f(RSP)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([f(ARG1 , RSP)] + [ARG1]) COPY ([f(ARG1 , RSP)] + [ARG1])
[f(RSP)] COPY [f(RSP)]
([f(ARG1 , RSP)] + [ARG1]) INT_ADD [f(ARG1 , RSP)] [ARG1]
 CBRANCH (([f(ARG1 , RSP)] + [ARG1]) INT_EQUAL 0)
(ARG1 + 8) PTRADD ARG1 1 8
0 COPY 0
-1 COPY -1
0 INT_EQUAL ([f(ARG1 , RSP)] + [ARG1]) 0
 RETURN 1
 CBRANCH (f() INT_EQUAL 2)
(RSP + -216) PTRSUB RSP -216
f(RSP) CALL func (RSP + -216) (RSP + -72) (RSP + -72)
(RSP + -240) PTRSUB RSP -240
[f(RSP)] LOAD 433 f(RSP)
([f(ARG1 , RSP)] + [ARG1]) COPY ([f(ARG1 , RSP)] + [ARG1])
(RSP + -72) PTRSUB RSP -72
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
([f(ARG1 , RSP)] + [ARG1]) INT_ADD [f(ARG1 , RSP)] [ARG1]
 CBRANCH (([f(ARG1 , RSP)] + [ARG1]) INT_EQUAL 0)
-1 COPY -1
(ARG1 + 8) PTRADD ARG1 1 8
0 INT_EQUAL ([f(ARG1 , RSP)] + [ARG1]) 0
f(ARG1 , RSP) CALL func (RSP + -240) (ARG1 + 8) (ARG1 + 8)
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
0 COPY 0
([(ARG1 + 8)] - [f(ARG1 , RSP)]) INT_SUB [(ARG1 + 8)] [f(ARG1 , RSP)]
f(ARG1 , RSP) CAST f(ARG1 , RSP)
f() CALL func f()
f(RSP) CAST f(RSP)
[ARG1] LOAD 433 ARG1
[f(RSP)] COPY [f(RSP)]
 CBRANCH (f() INT_EQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL f() 2
0 COPY 0
0 INT_EQUAL 0 [(f() + 40)]
0 COPY 0
f() CALL func f()
(f() + 40) INT_ADD f() 40
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
 BRANCH VZERO
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
0 INT_NOTEQUAL f() 0
 RETURN 1
 CBRANCH (f() INT_NOTEQUAL 0)
 STORE 433 (ARG1 + 8) [f(RSP)]
0 COPY 0
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 CBRANCH ([(ARG1 + 8)] INT_EQUAL f())
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_EQUAL [(ARG1 + 8)] f()
 CBRANCH ([(f() + 8)] INT_EQUAL f())
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
f() CALL func (RSP + -56)
0 INT_EQUAL [(f() + 8)] f()
(f() + 8) CAST (f() + 8)
f() COPY f()
(f() + 8) INT_ADD f() 8
 RETURN 1
llvm::cl::Option* HandlePrefixedOrGroupedOption(llvm::StringRef&, llvm::StringRef&, bool&, const llvm::StringMap<llvm::cl::Option*>&) COPY llvm::cl::Option* HandlePrefixedOrGroupedOption(llvm::StringRef&, llvm::StringRef&, bool&, const llvm::StringMap<llvm::cl::Option*>&)
(RSP + -56) PTRSUB RSP -56
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(f() + 8)] LOAD 433 (f() + 8)
OptionsMap.count(Arg) && OptionsMap.find(Arg)->second == PGOpt COPY OptionsMap.count(Arg) && OptionsMap.find(Arg)->second == PGOpt
 CALL libcall___assert_fail_thunk OptionsMap.count(Arg) && OptionsMap.find(Arg)->second == PGOpt /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 475 llvm::cl::Option* HandlePrefixedOrGroupedOption(llvm::StringRef&, llvm::StringRef&, bool&, const llvm::StringMap<llvm::cl::Option*>&)
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
 STORE 433 (ARG1 + 8) [f(RSP)]
0 COPY 0
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
0 INT_EQUAL f() 2
f() CALL func f()
 CBRANCH (f() INT_EQUAL 2)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
f(RSP) CAST f(RSP)
f(ARG1 , RSP) CAST f(ARG1 , RSP)
0 INT_EQUAL ([f(ARG1 , RSP)] + [ARG1]) 0
([(ARG1 + 8)] - [f(ARG1 , RSP)]) INT_SUB [(ARG1 + 8)] [f(ARG1 , RSP)]
f(ARG1 , RSP) CALL func (RSP + -208) (ARG1 + 8) (ARG1 + 8)
(RSP + -200) PTRSUB RSP -200
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
0 COPY 0
(RSP + -208) PTRSUB RSP -208
(RSP + -72) PTRSUB RSP -72
[f(RSP)] COPY [f(RSP)]
llvm::cl::Option* HandlePrefixedOrGroupedOption(llvm::StringRef&, llvm::StringRef&, bool&, const llvm::StringMap<llvm::cl::Option*>&) COPY llvm::cl::Option* HandlePrefixedOrGroupedOption(llvm::StringRef&, llvm::StringRef&, bool&, const llvm::StringMap<llvm::cl::Option*>&)
([f(ARG1 , RSP)] + [ARG1]) COPY ([f(ARG1 , RSP)] + [ARG1])
[ARG1] LOAD 433 ARG1
isGrouping(PGOpt) && "Broken getOptionPred!" COPY isGrouping(PGOpt) && "Broken getOptionPred!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
 RETURN 1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL libcall___assert_fail_thunk isGrouping(PGOpt) && "Broken getOptionPred!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 481 llvm::cl::Option* HandlePrefixedOrGroupedOption(llvm::StringRef&, llvm::StringRef&, bool&, const llvm::StringMap<llvm::cl::Option*>&)
f(RSP) CALL func (RSP + -200) (RSP + -72) (RSP + -72)
[f(RSP)] LOAD 433 f(RSP)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() COPY f()
([f(ARG1 , RSP)] + [ARG1]) INT_ADD [f(ARG1 , RSP)] [ARG1]
 CBRANCH (([f(ARG1 , RSP)] + [ARG1]) INT_EQUAL 0)
 RETURN 1
PGOpt->getValueExpectedFlag() != cl::ValueRequired && "Option can not be cl::Grouping AND cl::ValueRequired!" COPY PGOpt->getValueExpectedFlag() != cl::ValueRequired && "Option can not be cl::Grouping AND cl::ValueRequired!"
(-4294967296 & ([(ARG1 + 8)] - [f(ARG1 , RSP)])) INT_AND ([(ARG1 + 8)] - [f(ARG1 , RSP)]) -4294967296
 CALL libcall___assert_fail_thunk PGOpt->getValueExpectedFlag() != cl::ValueRequired && "Option can not be cl::Grouping AND cl::ValueRequired!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 491 llvm::cl::Option* HandlePrefixedOrGroupedOption(llvm::StringRef&, llvm::StringRef&, bool&, const llvm::StringMap<llvm::cl::Option*>&)
 CALL func (RSP + -56)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
(RSP + -216) PTRSUB RSP -216
(RSP + -264) PTRSUB RSP -264
(RSP + -56) PTRSUB RSP -56
f() CALL func f() ([f(ARG1 , RSP)] + [ARG1]) [f(RSP)] ([f(ARG1 , RSP)] + [ARG1]) [f(RSP)] 0 0 (RSP + -216)
llvm::cl::Option* HandlePrefixedOrGroupedOption(llvm::StringRef&, llvm::StringRef&, bool&, const llvm::StringMap<llvm::cl::Option*>&) COPY llvm::cl::Option* HandlePrefixedOrGroupedOption(llvm::StringRef&, llvm::StringRef&, bool&, const llvm::StringMap<llvm::cl::Option*>&)
f() COPY f()
0 INT_EQUAL f() 0
4441602 PTRSUB 0 4441602
 CBRANCH f()
(f(ARG3) | f()) INT_OR f() f(ARG3)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
4441634 PTRSUB 0 4441634
(RSP + -264) PTRSUB RSP -264
1 COPY 1
0 COPY 0
0 COPY 0
0 COPY 0
0 INT_NOTEQUAL [f(RSP)] 0
0 INT_NOTEQUAL [f(RSP)] 0
0 INT_NOTEQUAL [f(RSP)] 0
 BRANCH VZERO
 BRANCH VZERO
0 INT_EQUAL f() 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_NOTEQUAL [f(RSP)] 0
f() CALL func ARG1
f() CALL func ARG1
0 INT_NOTEQUAL f() 2
 CBRANCH (f() INT_NOTEQUAL 2)
 RETURN 0 1
 RETURN 0 0
0 INT_NOTEQUAL f() 3
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL 3)
0 COPY 0
f() CALL func ARG1
f() CALL func ARG1
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
 CBRANCH (f() INT_NOTEQUAL 3)
0 COPY 0
 RETURN 0 1
 RETURN 0 0
1 COPY 1
0 INT_NOTEQUAL f() 3
ARG1 INT_SEXT ARG1
(f() & -256) INT_OR (f() & -256) 0
4704422 COPY 4704422
0 INT_ZEXT 0
(f() & -256) INT_AND f() -256
0 INT_NOTEQUAL f() 0
f() CALL libcall_strchr_thunk 4704422 ARG1
 RETURN 0 (f() & -256)
f() CAST f()
0 INT_EQUAL ARG1 39
0 INT_EQUAL ARG1 34
 RETURN 0 f()
 CBRANCH (ARG1 INT_EQUAL 34)
 CBRANCH (ARG1 INT_EQUAL 39)
1 COPY 1
0 COPY 0
 BRANCH VZERO
ARG1 INT_SEXT ARG1
f() CAST f()
(f() & -256) INT_AND f() -256
0 INT_NOTEQUAL f() 0
f() CALL libcall_strchr_thunk 4704429 ARG1
 RETURN 0 (f() & -256)
4704429 COPY 4704429
0 INT_ZEXT 0
(f() & -256) INT_OR (f() & -256) 0
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1 ([(ARG1 + 8)] + 8) ([(ARG1 + 8)] + 8)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1 0
[ARG2] LOAD 433 ARG2
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 [(ARG1 + 8)] [ARG2]
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH ([(ARG1 + 16)] INT_LESSEQUAL [(ARG1 + 8)])
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + 8) INT_ADD [(ARG1 + 8)] 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_LESSEQUAL [(ARG1 + 16)] [(ARG1 + 8)]
 CALL func ARG1 ARG2 1 ARG2
 RETURN 0
(ARG3 + f()) INT_ADD f() ARG3
 CALL libcall_memcpy_thunk f() ARG2 ARG3
(ARG3 + 1) INT_ADD ARG3 1
[ARG1] LOAD 433 ARG1
f() CAST f()
 STORE 433 (ARG3 + f()) 0
f() CAST f()
(ARG3 + f()) CAST (ARG3 + f())
f() COPY f()
f() CALL func [ARG1] (ARG3 + 1) (ARG3 + 1)
 RETURN 0 f()
 CALL func ARG1 A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
 CALL func (RSP + -40) ARG2 ARG2
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -40) PTRSUB RSP -40
40 INT_ADD 0 40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
ARG1 COPY ARG1
ARG2 COPY ARG2
0 INT_EQUAL ARG5 0
0 INT_NOTEQUAL ARG5 0
f() CALL func ARG3 f() f()
f() CALL func ARG3 f() f()
 CALL func ARG4 (RSP + -192) (RSP + -192)
 CALL func ARG4 (RSP + -192) (RSP + -192)
 CALL func ARG4 (RSP + -192) (RSP + -192)
 CALL func ARG4 (RSP + -192) (RSP + -192)
f() CALL func (RSP + -168)
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
 CALL func (RSP + -168)
(RSP + -168) PTRSUB RSP -168
 CBRANCH (f() INT_NOTEQUAL f(ARG2))
0 INT_NOTEQUAL f() f(ARG2)
0 INT_EQUAL f() [(f() + 40)]
 CALL func (RSP + -168)
(f() + 40) INT_ADD f() 40
 CBRANCH (ARG5 INT_NOTEQUAL 0)
0 COPY 0
(RSP + -168) PTRSUB RSP -168
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
ARG2 COPY ARG2
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -168) PTRSUB RSP -168
 CBRANCH (f() INT_EQUAL f(ARG2))
(RSP + -216) PTRSUB RSP -216
f() CALL func (RSP + -216) f() f()
 CBRANCH (f() INT_EQUAL f())
0 INT_EQUAL f() f()
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_EQUAL f() f(ARG2)
0 INT_LESS (f() + 1) f(ARG2)
 CBRANCH (f() INT_EQUAL f(ARG2))
~(f()) BOOL_NEGATE f()
 CBRANCH ~(f())
 CBRANCH f()
 CBRANCH ((f() + 1) INT_LESS f(ARG2))
0 INT_EQUAL f() f(ARG2)
 CBRANCH (f() INT_EQUAL f(ARG2))
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
 CBRANCH f()
 CBRANCH (ARG5 INT_EQUAL 0)
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CBRANCH ((f() + 1) INT_NOTEQUAL f(ARG2))
0 INT_EQUAL f() 0
f() CALL func (RSP + -216) (f() + 1) (f() + 1)
f() CALL func f()
f() INT_SEXT f()
(RSP + -216) PTRSUB RSP -216
(f() + 1) INT_ADD f() 1
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 92)
0 INT_NOTEQUAL f() 0
f() CALL func (RSP + -216) (f() + 1) (f() + 1)
(RSP + -216) PTRSUB RSP -216
f() CALL func f()
f() INT_SEXT f()
(f() + 1) INT_ADD f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
f() CALL func (RSP + -168)
(RSP + -192) PTRSUB RSP -192
(RSP + -168) PTRSUB RSP -168
(RSP + -192) PTRSUB RSP -192
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
0 INT_EQUAL f() f(ARG2)
(RSP + -216) PTRSUB RSP -216
(f() + 1) INT_ADD f() 1
(RSP + -216) PTRSUB RSP -216
(f() + 1) INT_ADD f() 1
0 INT_EQUAL f() f(ARG2)
 CBRANCH ~(f())
f() CALL func (RSP + -216) f() (RSP + -216)
f() CALL func f()
f() INT_SEXT f()
~(f()) BOOL_NEGATE f()
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CALL func (RSP + -216) f() f()
 CBRANCH (f() INT_EQUAL f(ARG2))
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CALL func (RSP + -216) f() f()
0 COPY 0
(RSP + -216) PTRSUB RSP -216
f() CALL func f()
f() INT_SEXT f()
 BRANCH VZERO
1 COPY 1
f() CALL func (RSP + -168)
(RSP + -168) PTRSUB RSP -168
(RSP + -192) PTRSUB RSP -192
 CBRANCH f()
(f() + 1) INT_ADD f() 1
f() CALL func (RSP + -216) f() f()
(RSP + -192) PTRSUB RSP -192
(f() & -256) INT_AND f() -256
0 INT_EQUAL f() 0
f() COPY f()
(f() | (f() & -256)) INT_OR (f() & -256) f()
f() CALL func (RSP + -216) (f() + 1) (f() + 1)
(f() + 1) INT_ADD f() 1
f() CALL func f()
f() INT_SEXT f()
f() INT_ZEXT f()
 BRANCH VZERO
(RSP + -216) PTRSUB RSP -216
(RSP + -216) PTRSUB RSP -216
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -168) (RSP + -192) (RSP + -192)
(RSP + -168) PTRSUB RSP -168
0 INT_NOTEQUAL f() 0
f() CALL func (RSP + -168)
(RSP + -216) PTRSUB RSP -216
0 COPY 0
f() CALL func (RSP + -216) f() f()
 CBRANCH (f() INT_NOTEQUAL 10)
0 INT_NOTEQUAL f() 10
 BRANCH VZERO
f() CALL func (RSP + -216) f() f()
(f() + 1) INT_ADD f() 1
(RSP + -216) PTRSUB RSP -216
(RSP + -168) PTRSUB RSP -168
f() CALL func (RSP + -216) f() f()
(RSP + -192) PTRSUB RSP -192
 CBRANCH (f() INT_EQUAL 92)
(f() & -256) INT_AND f() -256
0 INT_EQUAL f() 92
f() INT_ZEXT f()
 CALL func (RSP + -168) (RSP + -192) (RSP + -192)
(f() | (f() & -256)) INT_OR (f() & -256) f()
(RSP + -216) PTRSUB RSP -216
(RSP + -192) PTRSUB RSP -192
0 COPY 0
(f() + 1) INT_ADD f() 1
0 INT_NOTEQUAL (f() + 1) f(ARG2)
 BRANCH VZERO
1 COPY 1
(RSP + -216) PTRSUB RSP -216
0 INT_EQUAL f() 92
f() CALL func (RSP + -216) f() f()
(f() & -256) INT_AND f() -256
(RSP + -168) PTRSUB RSP -168
 BRANCH VZERO
(RSP + -168) PTRSUB RSP -168
f() CALL func (RSP + -168)
(f() | (f() & -256)) INT_OR (f() & -256) f()
 CALL func (RSP + -168) (RSP + -192) (RSP + -192)
f() INT_ZEXT f()
(RSP + -216) PTRSUB RSP -216
0 INT_NOTEQUAL f() 1
(RSP + -168) PTRSUB RSP -168
 BRANCH VZERO
(RSP + -192) PTRSUB RSP -192
f() CALL func (RSP + -216) f() f()
 CALL func (RSP + -168)
[ARG3] LOAD 433 ARG3
ARG1 CAST ARG1
 CALL libcall_memset_thunk ARG1 [ARG3] (ARG2 - ARG1)
(ARG2 - ARG1) INT_SUB ARG2 ARG1
 CBRANCH ((ARG2 - ARG1) INT_NOTEQUAL 0)
 RETURN 0
0 INT_NOTEQUAL (ARG2 - ARG1) 0
[ARG3] INT_ZEXT [ARG3]
 CALL func ARG1 (ARG1 + ARG2) ARG3 (ARG1 + ARG2)
(ARG1 + ARG2) INT_ADD ARG1 ARG2
(ARG2 + ARG1) INT_ADD ARG2 ARG1
 RETURN 0 (ARG2 + ARG1)
f() CALL func ARG1
 CALL func f() ARG2 ARG3 f()
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 (([(ARG1 + 8)] - [ARG1]) + ARG2) (([(ARG1 + 8)] - [ARG1]) + ARG2)
 CALL func ARG1 ([(ARG1 + 8)] + ARG2) ([(ARG1 + 8)] + ARG2)
 CALL func [(ARG1 + 8)] ARG2 ARG3 ARG2
0 INT_LESS (f() - [(ARG1 + 8)]) ARG2
(([(ARG1 + 8)] - [ARG1]) + ARG2) INT_ADD ([(ARG1 + 8)] - [ARG1]) ARG2
([(ARG1 + 8)] + ARG2) INT_ADD [(ARG1 + 8)] ARG2
(f() - [(ARG1 + 8)]) CAST (f() - [(ARG1 + 8)])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() - [(ARG1 + 8)]) INT_SUB f() [(ARG1 + 8)]
 CBRANCH ((f() - [(ARG1 + 8)]) INT_LESS ARG2)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func ARG1 ARG2 (RSP + -28) ARG2
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
 RETURN 0
(RSP + -28) PTRSUB RSP -28
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG2 COPY ARG2
ARG3 COPY ARG3
 CALL func ARG4 (f() / 2) 92 (f() / 2)
 CALL func ARG4 f() 92 f()
 CALL func ARG4 (RSP + -30) (RSP + -30)
 CBRANCH (f() INT_EQUAL 0)
(f() + 40) INT_ADD f() 40
f(ARG3) COPY f(ARG3)
0 INT_EQUAL (f(ARG3) + 1) f(ARG2)
0 INT_EQUAL f() 0
0 INT_EQUAL f() [(f() + 40)]
0 COPY 0
ARG3 COPY ARG3
(f(ARG3) + 1) COPY (f(ARG3) + 1)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH ((f(ARG3) + 1) INT_EQUAL f(ARG2))
(f() + 1) INT_ADD f() 1
0 INT_EQUAL (f(ARG3) + 1) f(ARG2)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(f(ARG3) + 1) INT_ADD f(ARG3) 1
 CBRANCH f()
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
 CBRANCH ((f(ARG3) + 1) INT_EQUAL f(ARG2))
0 INT_NOTEQUAL (f() & 1) 0
f() CAST f()
(f() & 1) INT_AND f() 1
 CBRANCH ((f() & 1) INT_NOTEQUAL 0)
f() CAST f()
(f() / 2) INT_SEXT (f() / 2)
f() INT_SEXT f()
(f() / 2) INT_SDIV f() 2
 CBRANCH (f() INT_NOTEQUAL 92)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 BRANCH VZERO
(f(ARG3) + 1) COPY (f(ARG3) + 1)
(RSP + -30) PTRSUB RSP -30
34 COPY 34
(RSP + -56) PTRSUB RSP -56
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 34)
f() CALL func (RSP + -56) (f(ARG3) + 1) (f(ARG3) + 1)
0 INT_NOTEQUAL f() 34
 BRANCH VZERO
1 COPY 1
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(ARG3)
0 INT_NOTEQUAL f() 92
f() CALL func (RSP + -56) (f(ARG3) + 1) (f(ARG3) + 1)
(RSP + -56) PTRSUB RSP -56
0 INT_EQUAL ARG5 0
0 INT_EQUAL ARG5 0
0 INT_NOTEQUAL ARG5 0
ARG1 COPY ARG1
ARG2 COPY ARG2
f() CALL func ARG3 f() f()
f() CALL func ARG3 f() f()
 CALL func ARG4 (RSP + -192) (RSP + -192)
 CALL func ARG4 (RSP + -192) (RSP + -192)
 CALL func ARG4 (RSP + -192) (RSP + -192)
 CALL func ARG4 (RSP + -192) (RSP + -192)
 CALL func ARG4 (RSP + -192) (RSP + -192)
ARG2 COPY ARG2
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(f() + 40) CAST (f() + 40)
 CALL func (RSP + -168)
 CBRANCH (ARG5 INT_NOTEQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -168) PTRSUB RSP -168
 CBRANCH (f() INT_NOTEQUAL f(ARG2))
0 INT_NOTEQUAL f() f(ARG2)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 COPY 0
(RSP + -168) PTRSUB RSP -168
f() CALL func (RSP + -168)
 CALL func (RSP + -168)
0 COPY 0
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(RSP + -168) PTRSUB RSP -168
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 34)
 BRANCH VZERO
(RSP + -216) PTRSUB RSP -216
f() CALL func (RSP + -216) f() f()
2 COPY 2
 CBRANCH (f() INT_EQUAL 92)
0 INT_EQUAL f() 92
 CBRANCH (f() INT_EQUAL 92)
(RSP + -168) PTRSUB RSP -168
f() CALL func (RSP + -216) f() f()
(f() & -256) INT_AND f() -256
(RSP + -216) PTRSUB RSP -216
(RSP + -192) PTRSUB RSP -192
f() CALL func f(ARG1) f(ARG2) f() (RSP + -168)
 BRANCH VZERO
(f() | (f() & -256)) INT_OR (f() & -256) f()
(RSP + -168) PTRSUB RSP -168
f() INT_ZEXT f()
 BRANCH VZERO
 CALL func (RSP + -168) (RSP + -192) (RSP + -192)
(RSP + -168) PTRSUB RSP -168
(RSP + -192) PTRSUB RSP -192
f() CALL func (RSP + -168)
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 2
0 INT_EQUAL f() 0
f() CALL func (RSP + -216) f() f()
 CBRANCH (f() INT_EQUAL 0)
f() CALL func f()
f() INT_SEXT f()
(RSP + -216) PTRSUB RSP -216
 CBRANCH (f() INT_EQUAL 2)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CBRANCH (f() INT_NOTEQUAL 10)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL 10)
 BRANCH VZERO
0 COPY 0
1 COPY 1
(RSP + -192) PTRSUB RSP -192
0 COPY 0
 CBRANCH (f() INT_EQUAL 34)
 CBRANCH (f() INT_EQUAL 92)
0 INT_EQUAL f() 92
(RSP + -216) PTRSUB RSP -216
f() CALL func (RSP + -216) f() f()
 BRANCH VZERO
1 COPY 1
 CBRANCH f()
(RSP + -192) PTRSUB RSP -192
0 COPY 0
 BRANCH VZERO
 CBRANCH f()
0 COPY 0
 BRANCH VZERO
(RSP + -192) PTRSUB RSP -192
(f() | (f() & -256)) INT_OR (f() & -256) f()
f() INT_ZEXT f()
1 COPY 1
1 COPY 1
 CALL func (RSP + -168) (RSP + -192) (RSP + -192)
f() CALL func (RSP + -216) f() f()
f() CALL func f(ARG1) f(ARG2) f() (RSP + -168)
(RSP + -216) PTRSUB RSP -216
(RSP + -168) PTRSUB RSP -168
(RSP + -168) PTRSUB RSP -168
(f() & -256) INT_AND f() -256
 BRANCH VZERO
 BRANCH VZERO
(RSP + -192) PTRSUB RSP -192
f() CALL func (RSP + -216) f() f()
(RSP + -216) PTRSUB RSP -216
0 INT_EQUAL f() 34
 CBRANCH (f() INT_EQUAL 34)
2 COPY 2
0 INT_EQUAL f() 92
 BRANCH VZERO
(RSP + -216) PTRSUB RSP -216
f() CALL func (RSP + -216) f() f()
 BRANCH VZERO
 BRANCH VZERO
(RSP + -216) PTRSUB RSP -216
(RSP + -168) PTRSUB RSP -168
f() CALL func f(ARG1) f(ARG2) f() (RSP + -168)
f() CALL func (RSP + -216) f() f()
(f() & -256) INT_AND f() -256
 CALL func (RSP + -168) (RSP + -192) (RSP + -192)
(f() | (f() & -256)) INT_OR (f() & -256) f()
(RSP + -168) PTRSUB RSP -168
(RSP + -192) PTRSUB RSP -192
f() INT_ZEXT f()
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 34
(RSP + -216) PTRSUB RSP -216
f() CALL func (RSP + -216) f() f()
 CBRANCH (ARG5 INT_EQUAL 0)
f() INT_SEXT f()
f() CALL func f()
0 INT_EQUAL f() 1
(RSP + -216) PTRSUB RSP -216
0 INT_EQUAL f() 0
f() CALL func (RSP + -216) f() f()
0 INT_EQUAL f() 34
 CALL func (RSP + -168)
f() CALL func (RSP + -168)
0 COPY 0
(RSP + -192) PTRSUB RSP -192
(RSP + -216) PTRSUB RSP -216
(RSP + -168) PTRSUB RSP -168
f() CALL func (RSP + -216) f() f()
(RSP + -168) PTRSUB RSP -168
 CBRANCH (ARG5 INT_EQUAL 0)
f() CALL func (RSP + -216) f() f()
(RSP + -216) PTRSUB RSP -216
0 INT_NOTEQUAL f() 10
(RSP + -216) PTRSUB RSP -216
f() CALL func (RSP + -216) f() f()
0 INT_NOTEQUAL f() 10
ARG1 COPY ARG1
ARG2 COPY ARG2
(RSP + -24) PTRSUB RSP -24
f() CALL func (RSP + -24)
 CBRANCH (2 INT_LESS f())
0 INT_LESS 2 f()
 RETURN 0 0
0 COPY 0
f() CAST f()
1 COPY 1
(RSP + -24) PTRSUB RSP -24
0 INT_EQUAL [f()] 239
 RETURN 0 1
 CBRANCH ([f()] INT_EQUAL 239)
f() CALL func (RSP + -24) 0
[f()] LOAD 433 f()
 CBRANCH ([f()] INT_EQUAL 187)
f() CAST f()
[f()] LOAD 433 f()
(RSP + -24) PTRSUB RSP -24
0 INT_EQUAL [f()] 191
f() CALL func (RSP + -24) 2
 CBRANCH ([f()] INT_EQUAL 191)
f() CALL func (RSP + -24) 1
[f()] LOAD 433 f()
(RSP + -24) PTRSUB RSP -24
0 INT_EQUAL [f()] 187
f() CAST f()
 CALL func ARG1
 RETURN 0
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
ARG1 COPY ARG1
ARG2 COPY ARG2
(RSP + -24) PTRSUB RSP -24
0 INT_LESS 1 f()
f() CALL func (RSP + -24)
 CBRANCH (1 INT_LESS f())
 CBRANCH ([f()] INT_EQUAL 254)
f() CAST f()
 RETURN 0 1
[f()] LOAD 433 f()
 RETURN 0 0
f() CALL func (RSP + -24) 1
0 COPY 0
 CBRANCH ([f()] INT_EQUAL 255)
(RSP + -24) PTRSUB RSP -24
1 COPY 1
0 INT_EQUAL [f()] 255
 CBRANCH ([f()] INT_EQUAL 254)
0 INT_EQUAL [f()] 254
(RSP + -24) PTRSUB RSP -24
f() CAST f()
f() CALL func (RSP + -24) 0
[f()] LOAD 433 f()
 CBRANCH ([f()] INT_EQUAL 255)
f() CALL func (RSP + -24) 1
[f()] LOAD 433 f()
0 INT_EQUAL [f()] 254
f() CAST f()
(RSP + -24) PTRSUB RSP -24
f() CALL func (RSP + -24) 0
0 INT_EQUAL [f()] 255
(RSP + -24) PTRSUB RSP -24
[f()] LOAD 433 f()
f() CAST f()
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
(ARG3 - ARG2) INT_SUB ARG3 ARG2
 STORE 433 (ARG1 + 8) (ARG3 - ARG2)
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
 RETURN 0 [(ARG1 + 16)]
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_EQUAL ARG5 0
0 INT_EQUAL ARG5 0
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 f(ARG1)
0 INT_LESSEQUAL ARG2 (f(ARG1) + 2)
0 INT_LESSEQUAL ARG2 f(ARG1)
 STORE 433 ARG3 f(ARG3)
[ARG3] LOAD 433 ARG3
0 INT_LESS ARG4 (f(ARG3) + f())
 RETURN 0 f()
f(ARG1) COPY f(ARG1)
 CBRANCH (ARG2 INT_LESSEQUAL f(ARG1))
f() COPY f()
0 COPY 0
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 1)
f() INT_ZEXT f()
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
 STORE 433 (f(ARG3) + -1) ([(f() + 4722456)] | (f(ARG1) / 2147483647))
[(f() + 4722456)] LOAD 433 (f() + 4722456)
f() CAST f()
(f(ARG3) + -1) PTRADD f(ARG3) -1 1
(f() + 4722456) PTRADD 4722456 f() 1
f() INT_SEXT f()
([(f() + 4722456)] | (f(ARG1) / 2147483647)) INT_OR (f(ARG1) / 2147483647) [(f() + 4722456)]
4722456 PTRSUB 0 4722456
 CBRANCH (f(ARG1) INT_LESS 65536)
0 INT_LESS f(ARG1) 1114112
3 COPY 3
 CBRANCH (f(ARG1) INT_LESS 1114112)
 BRANCH VZERO
 CBRANCH ([f(ARG1)] INT_LESS 55296)
(f(ARG1) + 2) PTRADD f(ARG1) 1 2
[f(ARG1)] LOAD 433 f(ARG1)
0 INT_LESS [f(ARG1)] 55296
[f(ARG1)] INT_ZEXT [f(ARG1)]
 CBRANCH (f(ARG1) INT_LESS 2048)
2 COPY 2
 BRANCH VZERO
0 INT_LESS f(ARG1) 65536
 CBRANCH (f() INT_EQUAL 2)
 STORE 433 (f(ARG3) + -1) (128 | (191 & (f(ARG1) / 2147483647)))
0 INT_LESS 2 f()
(f(ARG3) + -1) PTRADD f(ARG3) -1 1
(191 & (f(ARG1) / 2147483647)) INT_AND (f(ARG1) / 2147483647) 191
 CBRANCH (2 INT_LESS f())
(f(ARG1) / 64) INT_RIGHT f(ARG1) 6
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(128 | (191 & (f(ARG1) / 2147483647))) INT_OR (191 & (f(ARG1) / 2147483647)) 128
 CBRANCH ([(f(ARG1) + 2)] INT_LESS 56320)
 CBRANCH (57343 INT_LESS [(f(ARG1) + 2)])
(f(ARG1) + 2) COPY (f(ARG1) + 2)
0 INT_LESS 57343 [(f(ARG1) + 2)]
 CBRANCH (ARG5 INT_EQUAL 0)
 CBRANCH (f(ARG1) INT_LESS 128)
 BRANCH VZERO
0 INT_LESS f(ARG1) 2048
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL 3)
 STORE 433 (f(ARG3) + -1) (128 | (191 & (f(ARG1) / 2147483647)))
(f(ARG1) / 64) INT_RIGHT f(ARG1) 6
(f(ARG3) + -1) PTRADD f(ARG3) -1 1
(191 & (f(ARG1) / 2147483647)) INT_AND (f(ARG1) / 2147483647) 191
(128 | (191 & (f(ARG1) / 2147483647))) INT_OR (191 & (f(ARG1) / 2147483647)) 128
0 INT_NOTEQUAL f() 4
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
 CBRANCH (f() INT_NOTEQUAL 4)
 CBRANCH (56319 INT_LESS [f(ARG1)])
(f(ARG1) + 2) COPY (f(ARG1) + 2)
0 INT_LESS 56319 [f(ARG1)]
 CBRANCH (ARG5 INT_EQUAL 0)
 CBRANCH (ARG2 INT_LESSEQUAL (f(ARG1) + 2))
0 INT_EQUAL f() 1
0 INT_NOTEQUAL f() 3
 CBRANCH (ARG4 INT_LESS (f(ARG3) + f()))
0 INT_LESS f(ARG1) 128
([(f(ARG1) + 2)] + (([f(ARG1)] + 55296) * 1024)) INT_ADD [(f(ARG1) + 2)] (([f(ARG1)] + 55296) * 1024)
(([(f(ARG1) + 2)] + (([f(ARG1)] + 55296) * 1024)) + 9216) INT_ADD ([(f(ARG1) + 2)] + (([f(ARG1)] + 55296) * 1024)) 9216
 BRANCH VZERO
([f(ARG1)] + 55296) INT_SUB [f(ARG1)] 55296
(f(ARG3) + f()) PTRADD f(ARG3) f() 1
(([f(ARG1)] + 55296) * 1024) INT_MULT ([f(ARG1)] + 55296) 1024
(f(ARG1) + 4) COPY (f(ARG1) + 4)
f() INT_ZEXT f()
(f(ARG1) + 4) PTRADD f(ARG1) 2 2
3 COPY 3
 BRANCH VZERO
4 COPY 4
65533 COPY 65533
[(f(ARG1) + 2)] LOAD 433 (f(ARG1) + 2)
 BRANCH VZERO
0 INT_LESS [(f(ARG1) + 2)] 56320
1 COPY 1
[(f(ARG1) + 2)] INT_ZEXT [(f(ARG1) + 2)]
 STORE 433 ((f(ARG3) + f()) + -1) (128 | (191 & (f(ARG1) / 2147483647)))
((f(ARG3) + f()) + -1) PTRADD (f(ARG3) + f()) -1 1
(f(ARG1) / 64) INT_RIGHT f(ARG1) 6
(191 & (f(ARG1) / 2147483647)) INT_AND (f(ARG1) / 2147483647) 191
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(128 | (191 & (f(ARG1) / 2147483647))) INT_OR (191 & (f(ARG1) / 2147483647)) 128
0 INT_LESS 56319 [f(ARG1)]
 CBRANCH (56319 INT_LESS [f(ARG1)])
(f(ARG1) + 2) COPY (f(ARG1) + 2)
(f(ARG1) + 2) COPY (f(ARG1) + 2)
3 COPY 3
0 INT_LESS [f(ARG1)] 57344
(f(ARG3) + f()) PTRADD f(ARG3) f() 1
 CBRANCH ([f(ARG1)] INT_LESS 57344)
3 COPY 3
2 COPY 2
((f(ARG3) + f()) + (~(f()) + 1)) PTRADD (f(ARG3) + f()) (~(f()) + 1) 1
f() INT_ZEXT f()
f() INT_ZEXT f()
(~(f()) + 1) INT_2COMP f()
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
0 INT_EQUAL f() 2
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
([(ARG1 + 8)] + [ARG1]) INT_ADD [(ARG1 + 8)] [ARG1]
 RETURN 0 ([(ARG1 + 8)] + [ARG1])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 [f(ARG2)]
f(ARG2) CALL func ARG2
f(ARG2) CAST f(ARG2)
 RETURN 0
[f(ARG2)] LOAD 433 f(ARG2)
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL libcall_operator.delete_thunk ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
0 INT_NOTEQUAL ARG2 0
 CBRANCH (ARG2 INT_NOTEQUAL 0)
 RETURN 0
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 2) [ARG1]
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(([(ARG1 + 16)] - [ARG1]) / 2) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 1
 RETURN 0
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
f(ARG1) CALL func ARG1
 CALL func ARG1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
(ARG1 + 8) INT_ADD ARG1 8
0 INT_ZEXT 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] & -256) INT_AND [(ARG1 + 8)] -256
 RETURN 0 ([(ARG1 + 8)] & -256)
0 INT_EQUAL [(ARG1 + 8)] 0
([(ARG1 + 8)] & -256) INT_OR ([(ARG1 + 8)] & -256) 0
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -24) (ARG1 + 8) (ARG1 + 8)
40 INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -24) PTRSUB RSP -24
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
 RETURN 0
 CALL func ARG1
 RETURN 0
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 (ARG1 + 8) 0
 STORE 433 (ARG1 + 16) 0
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0 (([(ARG1 + 8)] - [ARG1]) / 2)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
(([(ARG1 + 8)] - [ARG1]) / 2) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 1
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
[f(ARG2)] LOAD 433 f(ARG2)
 RETURN 0 (([f(ARG1)] - [f(ARG2)]) / 2)
f(ARG2) CAST f(ARG2)
[f(ARG1)] LOAD 433 f(ARG1)
(([f(ARG1)] - [f(ARG2)]) / 2) INT_SRIGHT ([f(ARG1)] - [f(ARG2)]) 1
f(ARG1) CAST f(ARG1)
([f(ARG1)] - [f(ARG2)]) INT_SUB [f(ARG1)] [f(ARG2)]
 CALL func (RSP + -24) ARG1 ARG1
(RSP + -24) PTRSUB RSP -24
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
40 CAST 40
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
 RETURN 1
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
40 CAST 40
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -24) PTRSUB RSP -24
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
 RETURN 1
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
ARG1 COPY ARG1
 RETURN 0
(RSP + -16) PTRSUB RSP -16
 CALL func (RSP + -16)
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
ARG1 CAST ARG1
 CALL libcall_memmove_thunk ARG3 ARG1 (((ARG2 - ARG1) / 2) * 2)
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG3 CAST ARG3
(ARG3 + (((ARG2 - ARG1) / 2) * 2)) CAST (ARG3 + (((ARG2 - ARG1) / 2) * 2))
(ARG3 + (((ARG2 - ARG1) / 2) * 2)) INT_ADD ARG3 (((ARG2 - ARG1) / 2) * 2)
((ARG2 - ARG1) / 2) INT_SRIGHT (ARG2 - ARG1) 1
0 INT_NOTEQUAL ((ARG2 - ARG1) / 2) 0
 RETURN 0 (ARG3 + (((ARG2 - ARG1) / 2) * 2))
(((ARG2 - ARG1) / 2) * 2) INT_MULT ((ARG2 - ARG1) / 2) 2
 CBRANCH (((ARG2 - ARG1) / 2) INT_NOTEQUAL 0)
(((ARG2 - ARG1) / 2) * 2) INT_MULT ((ARG2 - ARG1) / 2) 2
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 RETURN 0
 CALL func f() f() f()
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG4
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 ARG4
 RETURN 0
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
(([f(ARG1)] - [f(ARG2)]) / 2) INT_SRIGHT ([f(ARG1)] - [f(ARG2)]) 1
[f(ARG1)] LOAD 433 f(ARG1)
f(ARG1) CAST f(ARG1)
([f(ARG1)] - [f(ARG2)]) INT_SUB [f(ARG1)] [f(ARG2)]
f(ARG2) CAST f(ARG2)
[f(ARG2)] LOAD 433 f(ARG2)
 RETURN 0 (([f(ARG1)] - [f(ARG2)]) / 2)
 RETURN 0
 STORE 433 ARG1 ((ARG2 * 2) + [ARG1])
[ARG1] LOAD 433 ARG1
(ARG2 * 2) INT_MULT ARG2 2
 RETURN 0
((ARG2 * 2) + [ARG1]) INT_ADD (ARG2 * 2) [ARG1]
 CALL func ARG1
 CALL func ARG1 ARG2 ARG2
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CALL func (RSP + -24) ARG1 ARG1
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
40 CAST 40
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -24) PTRSUB RSP -24
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
 RETURN 1
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 ARG4
 RETURN 0
(ARG2 - ARG1) INT_SUB ARG2 ARG1
((ARG2 - ARG1) / 2) INT_SRIGHT (ARG2 - ARG1) 1
 RETURN 0 ((ARG2 - ARG1) / 2)
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
[40] LOAD 433 40
40 INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
 CALL func (RSP + -48)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -48) PTRSUB RSP -48
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
9223372036854775807 COPY 9223372036854775807
 RETURN 0 9223372036854775807
f() CALL func ARG1
(ARG2 * 2) INT_MULT ARG2 2
0 INT_LESS f() ARG2
 CBRANCH (f() INT_LESS ARG2)
 CALL libcall_operator.new_thunk (ARG2 * 2)
 RETURN 0
 CALL libcall___throw_bad_alloc_thunk
 CALL func ARG1 ARG2 0 ARG2
 RETURN 0
f() CALL func ARG1 ARG2 ARG2
0 INT_EQUAL ARG2 0
 CBRANCH (ARG2 INT_EQUAL 0)
 RETURN 0 f()
 BRANCH VZERO
0 COPY 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 [f(RSP)]
f(RSP) CAST f(RSP)
f(RSP) CALL func (RSP + -16)
[f(RSP)] LOAD 433 f(RSP)
[f(RSP)] COPY [f(RSP)]
(RSP + -16) PTRSUB RSP -16
 CALL func ARG1
 RETURN 0
ARG1 CAST ARG1
 CALL libcall_memmove_thunk ARG3 ARG1 (((ARG2 - ARG1) / 2) * 2)
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG3 CAST ARG3
(ARG3 + (((ARG2 - ARG1) / 2) * 2)) INT_ADD ARG3 (((ARG2 - ARG1) / 2) * 2)
(ARG3 + (((ARG2 - ARG1) / 2) * 2)) CAST (ARG3 + (((ARG2 - ARG1) / 2) * 2))
((ARG2 - ARG1) / 2) INT_SRIGHT (ARG2 - ARG1) 1
(((ARG2 - ARG1) / 2) * 2) INT_MULT ((ARG2 - ARG1) / 2) 2
0 INT_NOTEQUAL ((ARG2 - ARG1) / 2) 0
 RETURN 0 (ARG3 + (((ARG2 - ARG1) / 2) * 2))
 CBRANCH (((ARG2 - ARG1) / 2) INT_NOTEQUAL 0)
(((ARG2 - ARG1) / 2) * 2) INT_MULT ((ARG2 - ARG1) / 2) 2
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -40) (RSP + -48) (RSP + -48)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
A_Stack[-0x28]:8 COPY A_Stack[-0x28]:8
f() CALL func f() f() f()
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -48) PTRSUB RSP -48
(RSP + -40) PTRSUB RSP -40
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x28]:8
 RETURN 1
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
 CALL libcall_memmove_thunk ((((ARG2 - ARG1) / 2) * -2) + ARG3) ARG1 (((ARG2 - ARG1) / 2) * 2)
ARG1 CAST ARG1
(ARG2 - ARG1) INT_SUB ARG2 ARG1
((((ARG2 - ARG1) / 2) * -2) + ARG3) INT_ADD (((ARG2 - ARG1) / 2) * -2) ARG3
(ARG3 + (((ARG2 - ARG1) / 2) * -2)) INT_ADD ARG3 (((ARG2 - ARG1) / 2) * -2)
 CBRANCH (((ARG2 - ARG1) / 2) INT_NOTEQUAL 0)
((ARG2 - ARG1) / 2) INT_SRIGHT (ARG2 - ARG1) 1
(((ARG2 - ARG1) / 2) * -2) INT_MULT ((ARG2 - ARG1) / 2) -2
 RETURN 0 (ARG3 + (((ARG2 - ARG1) / 2) * -2))
0 INT_NOTEQUAL ((ARG2 - ARG1) / 2) 0
(((ARG2 - ARG1) / 2) * -2) INT_MULT ((ARG2 - ARG1) / 2) -2
(((ARG2 - ARG1) / 2) * 2) INT_MULT ((ARG2 - ARG1) / 2) 2
((((ARG2 - ARG1) / 2) * -2) + ARG3) CAST ((((ARG2 - ARG1) / 2) * -2) + ARG3)
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 CALL func f() f() f()
 RETURN 0
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
 CALL func f(ARG1)
 RETURN 0
ARG1 COPY ARG1
f() CALL func ARG1
ARG2 COPY ARG2
 CALL libcall___throw_length_error_thunk ARG3
(RSP + -72) PTRSUB RSP -72
(f() + 40) INT_ADD f() 40
([f(RSP)] + f()) INT_ADD [f(RSP)] f()
0 INT_EQUAL f() [(f() + 40)]
0 INT_LESS (f() - f()) ARG2
[(f() + 40)] LOAD 433 (f() + 40)
f() CALL func f(ARG1)
0 INT_LESS ([f(RSP)] + f()) f()
(f() - f()) INT_SUB f() f()
f(RSP) CALL func (RSP + -48) (RSP + -72) (RSP + -72)
(f() + 40) CAST (f() + 40)
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (([f(RSP)] + f()) INT_LESS f())
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() - f()) CAST (f() - f())
f(RSP) CAST f(RSP)
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func f(ARG1)
f() CALL func ARG1
f() CALL func f(ARG1)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -48) PTRSUB RSP -48
 CBRANCH ((f() - f()) INT_LESS ARG2)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
f() CALL func f(ARG1)
 CBRANCH (f() INT_LESS ([f(RSP)] + f()))
 BRANCH VZERO
([f(RSP)] + f()) COPY ([f(RSP)] + f())
f() COPY f()
f() CALL func f(ARG1)
0 INT_LESS f() ([f(RSP)] + f())
 RETURN 0 f(RSP)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 CALL func f() f() f()
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG4
 RETURN 0
ARG1 COPY ARG1
ARG2 COPY ARG2
f() CALL func ARG3 ARG4 ARG4
 CALL func ARG3 ARG4 ARG2 ARG4
f() CALL func ARG3 ARG4 f() f(ARG1)
ARG3 COPY ARG3
0 INT_NOTEQUAL ARG3 ARG4
 CALL func ARG3 ARG3 ARG2 ARG3
 CALL func ARG3 ARG4 [(ARG1 + 8)] f(ARG1)
 CBRANCH (ARG3 INT_NOTEQUAL ARG4)
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CBRANCH ((([(ARG1 + 16)] - [(ARG1 + 8)]) / 2) INT_LESS f())
f(RSP) CALL func (RSP + -104)
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func [ARG1] [f(RSP)] f() f(ARG1)
0 INT_LESS f() f()
[f(RSP)] LOAD 433 f(RSP)
f() CALL func (RSP + -88) (RSP + -104) (RSP + -104)
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(([(ARG1 + 16)] - [ARG1]) / 2) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 1
f(RSP) CALL func ARG1 f() 0 f()
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) CALL func ARG1
 CBRANCH (f() INT_LESS f())
[ARG1] LOAD 433 ARG1
 STORE 433 (ARG1 + 8) f()
(f(RSP) * 2) INT_MULT f(RSP) 2
f(RSP) CAST f(RSP)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
[ARG1] LOAD 433 ARG1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(RSP + -88) PTRSUB RSP -88
 STORE 433 (ARG1 + 16) ((f(RSP) * 2) + f())
(RSP + -104) PTRSUB RSP -104
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func [f(RSP)] [(ARG1 + 8)] f() f(ARG1)
f(ARG1) CALL func ARG1
f() CALL func ARG1 f(RSP) f(RSP)
f() CALL func ARG1
f() COPY f()
f(RSP) CAST f(RSP)
f(RSP) CALL func (RSP + -104)
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 f()
f(ARG1) CALL func ARG1
[f(RSP)] LOAD 433 f(RSP)
((f(RSP) * 2) + f()) INT_ADD (f(RSP) * 2) f()
(RSP + -104) PTRSUB RSP -104
0 COPY 0
[ARG1] LOAD 433 ARG1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(RSP + -104) PTRSUB RSP -104
f(ARG1) CALL func ARG1
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 2) [ARG1]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() - f()) INT_SUB f() f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(RSP + -104) PTRSUB RSP -104
([(ARG1 + 8)] + (f() * -2)) INT_ADD [(ARG1 + 8)] (f() * -2)
(f() * 2) INT_MULT f() 2
(ARG1 + 8) PTRADD ARG1 1 8
[f(RSP)] LOAD 433 f(RSP)
 CALL func ([(ARG1 + 8)] + (f() * -2)) [(ARG1 + 8)] [(ARG1 + 8)] f(ARG1)
f(RSP) CALL func (RSP + -104)
(f() * -2) INT_MULT f() -2
(ARG1 + 8) PTRADD ARG1 1 8
(f() * 2) INT_MULT f() 2
([(ARG1 + 8)] + (f() * -2)) INT_ADD (f() * -2) [(ARG1 + 8)]
 CALL func [f(RSP)] [(ARG1 + 8)] [(ARG1 + 8)] f(ARG1)
(ARG1 + 8) PTRADD ARG1 1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f(ARG1) CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + (f() * 2))
([(ARG1 + 8)] + (f() * 2)) INT_ADD (f() * 2) [(ARG1 + 8)]
([(ARG1 + 8)] + ((f() - f()) * 2)) INT_ADD [(ARG1 + 8)] ((f() - f()) * 2)
f(ARG1) CALL func ARG1
 CALL func [f(RSP)] ([(ARG1 + 8)] + (f() * -2)) [(ARG1 + 8)]
(ARG1 + 8) PTRADD ARG1 1 8
f(RSP) CAST f(RSP)
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + ((f() - f()) * 2))
((f() - f()) * 2) INT_MULT (f() - f()) 2
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -88) f() f()
(ARG1 + 8) PTRADD ARG1 1 8
(RSP + -104) PTRSUB RSP -104
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) CALL func ARG1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + (f() * 2))
([(ARG1 + 8)] + (f() * 2)) INT_ADD (f() * 2) [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) PTRADD ARG1 1 8
(f() * -2) INT_MULT f() -2
f(RSP) CAST f(RSP)
(ARG1 + 8) PTRADD ARG1 1 8
 BRANCH VZERO
[f(RSP)] LOAD 433 f(RSP)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f(RSP) CALL func (RSP + -104)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
0 INT_LESS (([(ARG1 + 16)] - [(ARG1 + 8)]) / 2) f()
(([(ARG1 + 16)] - [(ARG1 + 8)]) / 2) CAST (([(ARG1 + 16)] - [(ARG1 + 8)]) / 2)
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
([(ARG1 + 16)] - [(ARG1 + 8)]) INT_SUB [(ARG1 + 16)] [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(([(ARG1 + 16)] - [(ARG1 + 8)]) / 2) INT_SRIGHT ([(ARG1 + 16)] - [(ARG1 + 8)]) 1
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5 ARG6 ARG5
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
[ARG1] LOAD 433 ARG1
(RSP + -24) PTRSUB RSP -24
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
(RSP + -32) PTRSUB RSP -32
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CALL func (RSP + -24) (RSP + -32) (RSP + -32)
(FS_OFFSET + 40) INT_ADD 0 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
 RETURN 1
[ARG1] LOAD 433 ARG1
(ARG2 * 2) INT_MULT ARG2 2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
(RSP + -32) PTRSUB RSP -32
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
([ARG1] + (ARG2 * 2)) INT_ADD [ARG1] (ARG2 * 2)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CALL func (RSP + -24) (RSP + -32) (RSP + -32)
[40] LOAD 433 40
(RSP + -24) PTRSUB RSP -24
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
 RETURN 1
f() CALL func ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
 CALL func ARG1 f() ARG3 ARG4
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func ARG1
40 INT_ADD 0 40
(RSP + -48) PTRSUB RSP -48
(RSP + -48) PTRSUB RSP -48
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -72) PTRSUB RSP -72
f() CALL func (RSP + -72) (RSP + -48) (RSP + -48)
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func (RSP + -48) f() f()
[40] LOAD 433 40
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (RSP + -48) f() f()
(RSP + -48) PTRSUB RSP -48
f() CALL func ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0
[ARG1] LOAD 433 ARG1
(ARG2 * 2) INT_MULT ARG2 2
([ARG1] + (ARG2 * 2)) INT_ADD [ARG1] (ARG2 * 2)
 RETURN 0 ([ARG1] + (ARG2 * 2))
ARG1 COPY ARG1
(ARG3 / 2147483647) SUBPIECE ARG3 0
f() CALL libcall_operator[]_thunk ARG3
 CALL libcall_resize_thunk ARG3
 CALL libcall_operator[]_thunk ARG3
 CALL libcall_resize_thunk ARG3
ARG2 COPY ARG2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL libcall_empty_thunk
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
 CALL libcall_clear_thunk
 CALL libcall_push_back_thunk (ARG3 / 2147483647)
 CALL libcall_pop_back_thunk
 CBRANCH (f() INT_EQUAL 0)
 CALL func (RSP + -136)
 CBRANCH ([f()] INT_EQUAL 65534)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -136) PTRSUB RSP -136
f() COPY f()
[f()] LOAD 433 f()
0 INT_EQUAL [f()] 65534
f() COPY f()
f() CALL func (RSP + -136)
(RSP + -136) PTRSUB RSP -136
[f()] LOAD 433 f()
(f() + 40) CAST (f() + 40)
 CALL func (RSP + -56)
0 INT_EQUAL f() 2
 CBRANCH (f() INT_EQUAL 2)
1 COPY 1
 BRANCH VZERO
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + f()) INT_ADD f() f()
(RSP + -56) PTRSUB RSP -56
(RSP + -96) PTRSUB RSP -96
0 INT_EQUAL [f()] 65279
(RSP + -80) PTRSUB RSP -80
f() CAST f()
 CBRANCH ([f()] INT_EQUAL 65279)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
(RSP + -136) PTRSUB RSP -136
f() CALL libcall_size_thunk
f() CALL func (RSP + -96) f() (RSP + -80) (f() + f()) 0
f() COPY f()
f() CALL func (RSP + -136)
 CBRANCH ((f() & 1) INT_EQUAL 0)
0 INT_EQUAL f() 0
f() CALL func (RSP + -136)
0 COPY 0
 BRANCH VZERO
(RSP + -136) PTRSUB RSP -136
f() CALL func (RSP + -56) (f() + -1) (f() + -1)
 CALL func (RSP + -80) (RSP + -88) (RSP + -88)
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -56)
f() CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL f() f()
 CBRANCH (f() INT_NOTEQUAL f())
(f() + -1) INT_ADD f() -1
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(f() + 2) INT_ADD f() 2
(RSP + -80) PTRSUB RSP -80
f() CAST f()
0 COPY 0
 CALL func (RSP + -56) A_Stack[-0x50]:8 f() f()
f() CALL func (RSP + -56) 0
(RSP + -88) PTRSUB RSP -88
(RSP + -56) PTRSUB RSP -56
(f() + 2) PTRADD f() 1 2
0 INT_EQUAL f() 0
CR != targetExhausted COPY CR != targetExhausted
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp
0 COPY 0
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
 RETURN 1
 CALL libcall___assert_fail_thunk CR != targetExhausted /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp 120 0
f() CALL func (RSP + -56) f() f()
[f()] LOAD 433 f()
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -56) f() f()
f() CAST f()
f() CALL func [f()]
 STORE 433 f() f()
f() CAST f()
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 f()
0 COPY 0
 CALL libcall___assert_fail_thunk Out.empty() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp 85 0
(f() & 1) INT_AND f() 1
Out.empty() COPY Out.empty()
f() CALL func (RSP + -136)
 RETURN 1
(RSP + -136) PTRSUB RSP -136
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp
0 INT_EQUAL (f() & 1) 0
 CALL func (RSP + -136) ARG1 ARG1
 CALLIND ARG3 f() f() ARG2 ARG4 ARG5
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func (RSP + -104)
(RSP + -104) PTRSUB RSP -104
(RSP + -136) PTRSUB RSP -136
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
(RSP + -104) PTRSUB RSP -104
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -104) (RSP + -136) -1 1 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
f() CALL func A_Stack[-0x98]:8 A_Stack[-0x90]:8 A_Stack[-0x98]:8
(RSP + -72) PTRSUB RSP -72
[(f() + 40)] LOAD 433 (f() + 40)
f() CALL func A_Stack[-0x98]:8 A_Stack[-0x90]:8 (RSP + -72) A_Stack[-0x98]:8
 CALL libcall_~basic_string_thunk (RSP + -72)
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
(RSP + -104) PTRSUB RSP -104
(f() + 40) CAST (f() + 40)
f() COPY f()
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -104)
0 INT_EQUAL 0 [(f() + 40)]
(RSP + -152) PTRSUB RSP -152
 CBRANCH ((f() + 3) INT_EQUAL 0)
(f() + -3) COPY (f() + -3)
f() CALL func (RSP + -152)
1 COPY 1
(f() + 3) COPY (f() + 3)
0 INT_EQUAL (f() + 3) 0
(f() + -3) INT_ADD f() -3
(RSP + -152) PTRSUB RSP -152
(f() + 3) INT_ADD f() 3
f() CALL func (RSP + -152)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
f() CALL func f()
f() CALL func A_Stack[-0x98]:8 A_Stack[-0x90]:8 A_Stack[-0x98]:8
f() CALL func f()
 CALL func (RSP + -152) f() f() f()
0 INT_NOTEQUAL f() 0
 CALL libcall_basic_string_thunk
(RSP + -152) PTRSUB RSP -152
 CBRANCH (f() INT_NOTEQUAL 0)
 RETURN 0 f()
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 BRANCH VZERO
f() CALL func (RSP + -104)
(RSP + -104) PTRSUB RSP -104
0 INT_EQUAL f() 0
0 COPY 0
f() CALL func f()
f() CALL func f()
f() CALL func f()
 CBRANCH ((f() + -3) INT_NOTEQUAL 0)
 RETURN 1
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 RETURN 1
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
f() CALL libcall_length_thunk
 BRANCH VZERO
 BRANCH VZERO
f() CALL libcall_data_thunk
f() COPY f()
f() COPY f()
0 COPY 0
0 INT_NOTEQUAL (f() + -3) 0
(ARG1 + 16) INT_ADD ARG1 16
 RETURN 0 [(ARG1 + 16)]
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
((f() - [ARG1]) / 8) INT_SRIGHT (f() - [ARG1]) 3
 RETURN 0 ((f() - [ARG1]) / 8)
(f() - [ARG1]) INT_SUB f() [ARG1]
 CALL func ARG1 ARG2 ARG2
f() CALL func ARG1
0 INT_LESS f() ARG2
 CBRANCH (f() INT_LESS ARG2)
 RETURN 0
0 INT_NOTEQUAL ARG1 ARG2
ARG1 CAST ARG1
 CALL libcall_memcpy_thunk ARG3 ARG1 (((ARG2 - ARG1) / 8) * 8)
ARG2 CAST ARG2
 CBRANCH (ARG1 INT_NOTEQUAL ARG2)
 RETURN 0
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
(ARG2 - ARG1) INT_SUB ARG2 ARG1
(ARG2 - ARG1) CAST (ARG2 - ARG1)
((ARG2 - ARG1) / 8) INT_SRIGHT (ARG2 - ARG1) 3
 CALL func ARG1 ARG2 ARG3 0
 RETURN 0
(ARG2 - ARG1) INT_SUB ARG2 ARG1
((ARG2 - ARG1) / 8) INT_SRIGHT (ARG2 - ARG1) 3
 RETURN 0 ((ARG2 - ARG1) / 8)
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -48) PTRSUB RSP -48
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -48)
40 CAST 40
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
 CALL func ARG1 ([(ARG1 + 8)] + (f() * 8)) ([(ARG1 + 8)] + (f() * 8))
 CALL func ARG1 ((([(ARG1 + 8)] - [ARG1]) / 8) + f()) ((([(ARG1 + 8)] - [ARG1]) / 8) + f())
 CALL func ARG2 ARG3 [(ARG1 + 8)] 0
f() CALL func ARG2 ARG3 ARG3
((f() - [(ARG1 + 8)]) / 8) CAST ((f() - [(ARG1 + 8)]) / 8)
([(ARG1 + 8)] + (f() * 8)) INT_ADD (f() * 8) [(ARG1 + 8)]
 RETURN 0
0 INT_LESS ((f() - [(ARG1 + 8)]) / 8) f()
(f() * 8) INT_MULT f() 8
 CBRANCH (((f() - [(ARG1 + 8)]) / 8) INT_LESS f())
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
((f() - [(ARG1 + 8)]) / 8) INT_SRIGHT (f() - [(ARG1 + 8)]) 3
(f() - [(ARG1 + 8)]) INT_SUB f() [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(([(ARG1 + 8)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 3
((([(ARG1 + 8)] - [ARG1]) / 8) + f()) INT_ADD (([(ARG1 + 8)] - [ARG1]) / 8) f()
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 RETURN 0 ((f() - f()) / 8)
(f() - f()) INT_SUB f() f()
((f() - f()) / 8) INT_SRIGHT (f() - f()) 3
ARG1 COPY ARG1
ARG2 COPY ARG2
(RSP + -24) PTRSUB RSP -24
 CALL func (RSP + -24) (RSP + -16) (RSP + -16)
(RSP + -16) PTRSUB RSP -16
 RETURN 0
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
(RSP + -48) PTRSUB RSP -48
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -48)
40 CAST 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
 CALL func ARG1 ((([(ARG1 + 8)] - [ARG1]) / 8) + f()) ((([(ARG1 + 8)] - [ARG1]) / 8) + f())
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 ([(ARG1 + 8)] + (f() * 8)) ([(ARG1 + 8)] + (f() * 8))
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG2 ARG3 [(ARG1 + 8)] ARG3
f() CALL func ARG2 ARG3 ARG3
((f() - [(ARG1 + 8)]) / 8) INT_SRIGHT (f() - [(ARG1 + 8)]) 3
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() - [(ARG1 + 8)]) INT_SUB f() [(ARG1 + 8)]
((f() - [(ARG1 + 8)]) / 8) CAST ((f() - [(ARG1 + 8)]) / 8)
([(ARG1 + 8)] + (f() * 8)) INT_ADD (f() * 8) [(ARG1 + 8)]
0 INT_LESS ((f() - [(ARG1 + 8)]) / 8) f()
(f() * 8) INT_MULT f() 8
 CBRANCH (((f() - [(ARG1 + 8)]) / 8) INT_LESS f())
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(([(ARG1 + 8)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 3
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
((([(ARG1 + 8)] - [ARG1]) / 8) + f()) INT_ADD (([(ARG1 + 8)] - [ARG1]) / 8) f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
ARG1 CAST ARG1
 CALL libcall_memmove_thunk ((((ARG2 - ARG1) / 8) * -8) + ARG3) ARG1 (((ARG2 - ARG1) / 8) * 8)
(ARG2 - ARG1) INT_SUB ARG2 ARG1
(ARG3 + (((ARG2 - ARG1) / 8) * -8)) INT_ADD ARG3 (((ARG2 - ARG1) / 8) * -8)
((((ARG2 - ARG1) / 8) * -8) + ARG3) INT_ADD (((ARG2 - ARG1) / 8) * -8) ARG3
(((ARG2 - ARG1) / 8) * -8) INT_MULT ((ARG2 - ARG1) / 8) -8
 RETURN 0 (ARG3 + (((ARG2 - ARG1) / 8) * -8))
 CBRANCH (((ARG2 - ARG1) / 8) INT_NOTEQUAL 0)
((ARG2 - ARG1) / 8) INT_SRIGHT (ARG2 - ARG1) 3
0 INT_NOTEQUAL ((ARG2 - ARG1) / 8) 0
(((ARG2 - ARG1) / 8) * -8) INT_MULT ((ARG2 - ARG1) / 8) -8
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
((((ARG2 - ARG1) / 8) * -8) + ARG3) CAST ((((ARG2 - ARG1) / 8) * -8) + ARG3)
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 RETURN 0
 CALL func f() f() f()
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL libcall_memmove_thunk ARG3 ARG1 (((ARG2 - ARG1) / 8) * 8)
ARG1 CAST ARG1
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG3 CAST ARG3
 CBRANCH (((ARG2 - ARG1) / 8) INT_NOTEQUAL 0)
0 INT_NOTEQUAL ((ARG2 - ARG1) / 8) 0
((ARG2 - ARG1) / 8) INT_SRIGHT (ARG2 - ARG1) 3
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
 RETURN 0 (ARG3 + (((ARG2 - ARG1) / 8) * 8))
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) CAST (ARG3 + (((ARG2 - ARG1) / 8) * 8))
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) INT_ADD ARG3 (((ARG2 - ARG1) / 8) * 8)
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 CALL func f() f() f()
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
ARG1 COPY ARG1
ARG1 COPY ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 COPY ARG1
ARG1 COPY ARG1
ARG1 COPY ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 COPY ARG1
ARG1 COPY ARG1
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 COPY ARG1
ARG1 COPY ARG1
[ARG1] LOAD 433 ARG1
 CALL func ARG1 ARG3 ARG4 ARG3
ARG1 COPY ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 COPY ARG1
ARG1 COPY ARG1
 CALL func ARG1 ([(ARG1 + 8)] + (f() * 8)) ([(ARG1 + 8)] + (f() * 8))
ARG1 COPY ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 ((([(ARG1 + 8)] - [ARG1]) / 8) + f()) ((([(ARG1 + 8)] - [ARG1]) / 8) + f())
 CALL func ARG1 A_Stack[-0xd0]:8 A_Stack[-0xc8]:8 A_Stack[-0xd0]:8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 COPY ARG1
[ARG1] LOAD 433 ARG1
ARG1 COPY ARG1
ARG1 COPY ARG1
(ARG2 - [ARG1]) INT_SUB ARG2 [ARG1]
0 INT_LESS ARG2 [ARG1]
0 INT_LESS [(ARG1 + 8)] ARG2
0 INT_EQUAL [(ARG1 + 8)] ARG2
 CALL func ARG3 ARG4 ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8)) ARG4
f() CALL func ARG3 ARG4 ARG4
ARG3 COPY ARG3
 CALL func f(ARG3) ARG4 [(ARG1 + 8)] 0
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(ARG1 + 8)] INT_EQUAL ARG2)
(ARG2 - [ARG1]) CAST (ARG2 - [ARG1])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
((ARG2 - [ARG1]) / 8) INT_SRIGHT (ARG2 - [ARG1]) 3
 CBRANCH (f(ARG1 , ARG2) INT_NOTEQUAL 0)
(f(ARG1 , ARG2) + 8) PTRADD f(ARG1 , ARG2) 1 8
 BRANCH VZERO
 STORE 433 f(ARG1 , ARG2) [f(ARG3)]
(f(ARG3) + 8) PTRADD f(ARG3) 1 8
[f(ARG3)] LOAD 433 f(ARG3)
0 INT_NOTEQUAL f(ARG1 , ARG2) 0
(f(ARG1 , ARG2) + -1) INT_ADD f(ARG1 , ARG2) -1
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 RETURN 1
 RETURN 0 f(ARG1 , ARG2)
 CALL libcall___stack_chk_fail_thunk
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
((([(ARG1 + 8)] - [ARG1]) / 8) + f()) INT_ADD (([(ARG1 + 8)] - [ARG1]) / 8) f()
(([(ARG1 + 8)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 3
 CBRANCH ((([(ARG1 + 8)] - ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8))) / 8) INT_LESS f())
0 INT_LESS (([(ARG1 + 8)] - ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8))) / 8) f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(([(ARG1 + 8)] - ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8))) / 8) CAST (([(ARG1 + 8)] - ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8))) / 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
((([(ARG1 + 8)] - ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8))) / 8) * -8) INT_MULT (([(ARG1 + 8)] - ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8))) / 8) -8
(([(ARG1 + 8)] - ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8))) / 8) INT_SRIGHT ([(ARG1 + 8)] - ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8))) 3
([ARG1] + (((ARG2 - [ARG1]) / 8) * 8)) CAST ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8))
([ARG1] + (((ARG2 - [ARG1]) / 8) * 8)) CAST ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8))
(RSP + -208) PTRSUB RSP -208
(((([(ARG1 + 8)] - ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8))) / 8) * -8) + [(ARG1 + 8)]) INT_ADD ((([(ARG1 + 8)] - ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8))) / 8) * -8) [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 8)] INT_LESS ARG2)
([ARG1] + (((ARG2 - [ARG1]) / 8) * 8)) COPY ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8))
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] - ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8))) INT_SUB [(ARG1 + 8)] ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8))
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([ARG1] + (((ARG2 - [ARG1]) / 8) * 8)) CAST ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8))
 BRANCH VZERO
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CBRANCH (ARG2 INT_LESS [ARG1])
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
([(ARG1 + 8)] - [ARG1]) CAST ([(ARG1 + 8)] - [ARG1])
 CALL func (RSP + -208) ([(ARG1 + 8)] + (f() * -8)) ([(ARG1 + 8)] + (f() * -8))
([(ARG1 + 8)] + (f() * -8)) INT_ADD (f() * -8) [(ARG1 + 8)]
(RSP + -200) PTRSUB RSP -200
(([(ARG1 + 8)] - ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8))) / 8) INT_SRIGHT ([(ARG1 + 8)] - ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8))) 3
([(ARG1 + 8)] - ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8))) CAST ([(ARG1 + 8)] - ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8)))
 RETURN 1
 CALL libcall___assert_fail_thunk I >= this->begin() && "Insertion iterator is out of bounds." /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 608 llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::insert(llvm::SmallVectorImpl<T>::iterator, ItTy, ItTy) [with ItTy = const char**; T = const char*; llvm::SmallVectorImpl<T>::iterator = const char**]
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::insert(llvm::SmallVectorImpl<T>::iterator, ItTy, ItTy) [with ItTy = const char**; T = const char*; llvm::SmallVectorImpl<T>::iterator = const char**] COPY llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::insert(llvm::SmallVectorImpl<T>::iterator, ItTy, ItTy) [with ItTy = const char**; T = const char*; llvm::SmallVectorImpl<T>::iterator = const char**]
I >= this->begin() && "Insertion iterator is out of bounds." COPY I >= this->begin() && "Insertion iterator is out of bounds."
(f() * -8) INT_MULT f() -8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([ARG1] + (((ARG2 - [ARG1]) / 8) * 8)) CAST ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8))
 CALL func ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8)) ([(ARG1 + 8)] + (f() * -8)) [(ARG1 + 8)] ([(ARG1 + 8)] + (f() * -8))
([(ARG1 + 8)] + (f() * -8)) INT_ADD (f() * -8) [(ARG1 + 8)]
([(ARG1 + 8)] - ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8))) INT_SUB [(ARG1 + 8)] ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8))
([ARG1] + (((ARG2 - [ARG1]) / 8) * 8)) INT_ADD [ARG1] (((ARG2 - [ARG1]) / 8) * 8)
(((ARG2 - [ARG1]) / 8) * 8) INT_MULT ((ARG2 - [ARG1]) / 8) 8
(f() * -8) INT_MULT f() -8
llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::insert(llvm::SmallVectorImpl<T>::iterator, ItTy, ItTy) [with ItTy = const char**; T = const char*; llvm::SmallVectorImpl<T>::iterator = const char**] COPY llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::insert(llvm::SmallVectorImpl<T>::iterator, ItTy, ItTy) [with ItTy = const char**; T = const char*; llvm::SmallVectorImpl<T>::iterator = const char**]
I <= this->end() && "Inserting past the end of the vector." COPY I <= this->end() && "Inserting past the end of the vector."
([(ARG1 + 8)] - ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8))) CAST ([(ARG1 + 8)] - ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8)))
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
([ARG1] + (((ARG2 - [ARG1]) / 8) * 8)) INT_ADD [ARG1] (((ARG2 - [ARG1]) / 8) * 8)
 CALL func ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8)) [(ARG1 + 8)] (((([(ARG1 + 8)] - ([ARG1] + (((ARG2 - [ARG1]) / 8) * 8))) / 8) * -8) + [(ARG1 + 8)]) [(ARG1 + 8)]
 CALL libcall___assert_fail_thunk I <= this->end() && "Inserting past the end of the vector." /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 609 llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::insert(llvm::SmallVectorImpl<T>::iterator, ItTy, ItTy) [with ItTy = const char**; T = const char*; llvm::SmallVectorImpl<T>::iterator = const char**]
(((ARG2 - [ARG1]) / 8) * 8) INT_MULT ((ARG2 - [ARG1]) / 8) 8
 RETURN 1
(f() * 8) INT_MULT f() 8
 CALL func (RSP + -200) [(ARG1 + 8)] [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + (f() * 8)) INT_ADD (f() * 8) [(ARG1 + 8)]
 BRANCH VZERO
[ARG1] LOAD 433 ARG1
(ARG1 + 24) PTRADD ARG1 3 8
[ARG1] CAST [ARG1]
[ARG1] CAST [ARG1]
0 INT_ZEXT 0
([ARG1] & -256) INT_OR ([ARG1] & -256) 0
 RETURN 0 ([ARG1] & -256)
0 INT_EQUAL [ARG1] (ARG1 + 24)
([ARG1] & -256) INT_AND [ARG1] -256
 RETURN 0
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func [ARG1] [(ARG1 + 8)] [(ARG1 + 8)]
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
 RETURN 0
 CALL libcall_free_thunk [ARG1]
 CALL func ARG1
 RETURN 0
(ARG1 + 24) INT_ADD ARG1 24
 CALL func ARG1 (ARG1 + 24) ARG2 (ARG1 + 24)
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 (ARG2 * 8) (ARG2 * 8)
ARG2 INT_ZEXT ARG2
 RETURN 0
(ARG2 * 8) INT_MULT ARG2 8
 CALL func ARG1 0
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ([(ARG1 + 8)] + -8) ([(ARG1 + 8)] + -8)
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + -8) INT_ADD [(ARG1 + 8)] -8
(ARG1 + 8) CAST (ARG1 + 8)
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1
0 INT_LESS ARG2 [ARG1]
 CALL func (ARG2 + 8) [(ARG1 + 8)] ARG2 (ARG2 + 8)
0 INT_LESSEQUAL [(ARG1 + 8)] ARG2
(ARG2 + 8) INT_ADD ARG2 8
ARG2 COPY ARG2
 CBRANCH (ARG2 INT_LESS [ARG1])
 CBRANCH ([(ARG1 + 8)] INT_LESSEQUAL ARG2)
 RETURN 0 ARG2
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
I < this->end() && "Erasing at past-the-end iterator." COPY I < this->end() && "Erasing at past-the-end iterator."
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
 CALL libcall___assert_fail_thunk I < this->end() && "Erasing at past-the-end iterator." /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 464 llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::erase(llvm::SmallVectorImpl<T>::iterator) [with T = const char*; llvm::SmallVectorImpl<T>::iterator = const char**]
llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::erase(llvm::SmallVectorImpl<T>::iterator) [with T = const char*; llvm::SmallVectorImpl<T>::iterator = const char**] COPY llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::erase(llvm::SmallVectorImpl<T>::iterator) [with T = const char*; llvm::SmallVectorImpl<T>::iterator = const char**]
 RETURN 1
llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::erase(llvm::SmallVectorImpl<T>::iterator) [with T = const char*; llvm::SmallVectorImpl<T>::iterator = const char**] COPY llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::erase(llvm::SmallVectorImpl<T>::iterator) [with T = const char*; llvm::SmallVectorImpl<T>::iterator = const char**]
I >= this->begin() && "Iterator to erase is out of bounds." COPY I >= this->begin() && "Iterator to erase is out of bounds."
 RETURN 1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL libcall___assert_fail_thunk I >= this->begin() && "Iterator to erase is out of bounds." /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 463 llvm::SmallVectorImpl<T>::iterator llvm::SmallVectorImpl<T>::erase(llvm::SmallVectorImpl<T>::iterator) [with T = const char*; llvm::SmallVectorImpl<T>::iterator = const char**]
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
f() CALL func ([([ARG3] + (f() * 8))] + 1) ARG1 ARG2 (RSP + -72) ARG4
 CALL func ARG3 ([ARG3] + (f() * 8)) f() f()
(ARG3 + 8) PTRADD ARG3 1 8
[ARG3] LOAD 433 ARG3
[ARG3] LOAD 433 ARG3
 CALL func ARG3
(ARG3 + 8) PTRADD ARG3 1 8
[ARG3] LOAD 433 ARG3
[ARG3] LOAD 433 ARG3
0 COPY 0
(FS_OFFSET + 40) INT_ADD 0 40
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
 CBRANCH (f() INT_EQUAL (([(ARG3 + 8)] - [ARG3]) / 8))
1 COPY 1
0 COPY 0
([(ARG3 + 8)] - [ARG3]) INT_SUB [(ARG3 + 8)] [ARG3]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(([(ARG3 + 8)] - [ARG3]) / 8) INT_SRIGHT ([(ARG3 + 8)] - [ARG3]) 3
f() INT_ZEXT f()
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 COPY 0
0 INT_EQUAL f() (([(ARG3 + 8)] - [ARG3]) / 8)
 CBRANCH (20 INT_LESS f())
0 COPY 0
0 INT_EQUAL f() 1
(f() + 1) COPY (f() + 1)
 CBRANCH (f() INT_EQUAL 1)
(RSP + -72) PTRSUB RSP -72
 CBRANCH (0 INT_EQUAL [40])
([([ARG3] + (f() * 8))] + 1) PTRADD [([ARG3] + (f() * 8))] 1 1
 CALL func (RSP + -72)
(RSP + -72) PTRSUB RSP -72
0 INT_EQUAL 0 [40]
(f() + 40) INT_ADD f() 40
 BRANCH VZERO
[40] LOAD 433 (f() + 40)
 CALL func (RSP + -72)
(RSP + -72) PTRSUB RSP -72
(f() + 40) CAST (f() + 40)
 CBRANCH ([[([ARG3] + (f() * 8))]] INT_EQUAL 64)
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
f() COPY f()
(f() + 1) INT_ADD f() 1
0 INT_LESS 20 f()
 CBRANCH ([([ARG3] + (f() * 8))] INT_EQUAL 0)
 BRANCH VZERO
0 INT_EQUAL [[([ARG3] + (f() * 8))]] 64
f() COPY f()
(f() + 1) INT_ADD f() 1
[[([ARG3] + (f() * 8))]] LOAD 433 [([ARG3] + (f() * 8))]
([(ARG3 + 8)] - [ARG3]) INT_SUB [(ARG3 + 8)] [ARG3]
(([(ARG3 + 8)] - [ARG3]) / 8) CAST (([(ARG3 + 8)] - [ARG3]) / 8)
f() INT_ZEXT f()
(([(ARG3 + 8)] - [ARG3]) / 8) INT_SRIGHT ([(ARG3 + 8)] - [ARG3]) 3
 CBRANCH ((([(ARG3 + 8)] - [ARG3]) / 8) INT_LESSEQUAL f())
0 INT_LESSEQUAL (([(ARG3 + 8)] - [ARG3]) / 8) f()
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 1
0 COPY 0
(f() * 8) INT_MULT f() 8
([ARG3] + (f() * 8)) CAST ([ARG3] + (f() * 8))
([ARG3] + (f() * 8)) INT_ADD [ARG3] (f() * 8)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
idx < size() COPY idx < size()
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
[([ARG3] + (f() * 8))] LOAD 433 ([ARG3] + (f() * 8))
0 INT_EQUAL [([ARG3] + (f() * 8))] 0
 BRANCH VZERO
([ARG3] + (f() * 8)) INT_ADD (f() * 8) [ARG3]
f() INT_ZEXT f()
0 COPY 0
(f() * 8) INT_MULT f() 8
(f() + 1) INT_ADD f() 1
 CALL func ARG1 20
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 [ARG2]
(ARG1 + 8) PTRADD ARG1 1 8
[ARG2] LOAD 433 ARG2
f(ARG3) CALL func ARG3
f(ARG3) CAST f(ARG3)
 RETURN 0
[f(ARG3)] LOAD 433 f(ARG3)
 STORE 433 (ARG1 + 8) [f(ARG3)]
(ARG1 + 8) CAST (ARG1 + 8)
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -56) f(ARG1) f(ARG2) f(ARG1)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -56) PTRSUB RSP -56
40 CAST 40
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -24) PTRSUB RSP -24
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
 CALL func (RSP + -24) [ARG1] 0 [ARG1]
40 INT_ADD 0 40
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL [(ARG1 + 8)] 0
(FS_OFFSET + 40) INT_ADD 0 40
(ARG1 + 8) CAST (ARG1 + 8)
[40] LOAD 433 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0
[ARG1] LOAD 433 ARG1
(ARG1 + 24) PTRADD ARG1 3 8
0 INT_ZEXT 0
[ARG1] CAST [ARG1]
[ARG1] CAST [ARG1]
([ARG1] & -256) INT_AND [ARG1] -256
([ARG1] & -256) INT_OR ([ARG1] & -256) 0
0 INT_EQUAL [ARG1] (ARG1 + 24)
 RETURN 0 ([ARG1] & -256)
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func [ARG1] [(ARG1 + 8)] [(ARG1 + 8)]
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
 RETURN 0
 CALL libcall_free_thunk [ARG1]
 CALL func ARG1
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
f(ARG1) CALL func ARG1
 CALL func ARG2 [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
 STORE 433 (ARG1 + 8) ARG2
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 CALL func ARG1 [ARG1] [ARG1]
[ARG1] LOAD 433 ARG1
 RETURN 0
 CALL func ARG1 (ARG1 + 24) ARG2 (ARG1 + 24)
(ARG1 + 24) INT_ADD ARG1 24
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
ARG2 INT_ZEXT ARG2
 CALL func ARG1 (ARG2 * 24) (ARG2 * 24)
 RETURN 0
(ARG2 * 24) INT_MULT ARG2 24
 CALL func ARG1 4
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 STORE 433 (ARG1 + 8) ARG2
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 24) INT_ADD ARG1 24
 CALL func ARG1 (ARG1 + 24) ARG2 ARG3
 RETURN 0
 CALL func ARG1 (ARG2 * 24) 24 (ARG2 * 24)
(ARG2 * 24) INT_MULT ARG2 24
 RETURN 0
 CALL libcall_memcpy_thunk [(ARG1 + 8)] ARG2 24
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1 ([(ARG1 + 8)] + 24) ([(ARG1 + 8)] + 24)
 CALL func ARG1 0
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
 CBRANCH ([(ARG1 + 16)] INT_LESSEQUAL [(ARG1 + 8)])
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
([(ARG1 + 8)] + 24) INT_ADD [(ARG1 + 8)] 24
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
0 INT_LESSEQUAL [(ARG1 + 16)] [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func ARG1 20
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 8)] COPY [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0 [(ARG1 + 8)]
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1 [f(ARG2)] [f(ARG2)]
f(ARG2) CALL func ARG2
(ARG2 + 8) INT_ADD ARG2 8
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG2) CALL func (ARG2 + 8)
 RETURN 0
(ARG1 + 16) CAST (ARG1 + 16)
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG2) CAST f(ARG2)
 STORE 433 (ARG1 + 16) [f(ARG2)]
f(ARG2) CAST f(ARG2)
f() CALL func f() ARG1
(ARG1 + 208) PTRADD ARG1 208 1
f() CALL func f() ARG1
f() CALL func ARG1 (RSP + -600) (RSP + -616) (RSP + -600)
(ARG1 + 72) PTRADD ARG1 72 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 120) PTRADD ARG1 120 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 72) PTRADD ARG1 72 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 72) PTRADD ARG1 72 1
(ARG1 + 176) PTRADD ARG1 176 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 72) PTRADD ARG1 72 1
(ARG1 + 176) PTRADD ARG1 176 1
(ARG1 + 64) PTRADD ARG1 64 1
f() CALL func f() ARG1
(ARG1 + 32) PTRADD ARG1 32 1
(ARG1 + 128) PTRADD ARG1 128 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 176) PTRADD ARG1 176 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 64) PTRADD ARG1 64 1
f() CALL func f() ARG1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 120) PTRADD ARG1 120 1
(ARG1 + 72) PTRADD ARG1 72 1
(ARG1 + 72) PTRADD ARG1 72 1
(ARG1 + 72) PTRADD ARG1 72 1
(ARG1 + 120) PTRADD ARG1 120 1
 CALL libcall_operator=_thunk ARG1 (RSP + -504)
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 208) PTRADD ARG1 208 1
f() CALL func f() ARG1
(ARG1 + 72) PTRADD ARG1 72 1
(ARG1 + 72) PTRADD ARG1 72 1
(ARG1 + 72) PTRADD ARG1 72 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 208) PTRADD ARG1 208 1
(ARG1 + 72) PTRADD ARG1 72 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 72) PTRADD ARG1 72 1
(ARG1 + 40) PTRADD ARG1 40 1
(ARG1 + 72) PTRADD ARG1 72 1
(ARG1 + 72) PTRADD ARG1 72 1
(ARG1 + 72) PTRADD ARG1 72 1
f() CALL func ARG1 (RSP + -600) (RSP + -616) (RSP + -600)
(ARG1 + 208) PTRADD ARG1 208 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 72) PTRADD ARG1 72 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 208) PTRADD ARG1 208 1
(ARG1 + 64) PTRADD ARG1 64 1
(ARG1 + 120) PTRADD ARG1 120 1
(ARG1 + 208) PTRADD ARG1 208 1
f() CALL func ARG1
(ARG1 + 208) PTRADD ARG1 208 1
(ARG1 + 72) PTRADD ARG1 72 1
((ARG2 * 8) + ARG3) INT_ADD (ARG2 * 8) ARG3
 CALL func (RSP + -232) ARG3 ((ARG2 * 8) + ARG3) ARG3
 STORE 433 (ARG1 + 32) ARG4
ARG2 INT_SEXT ARG2
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ((f() + 1) INT_SLESS ((A_Stack[-0xe0]:8 - A_Stack[-0xe8]:8) / 17179869176))
 CALL func (RSP + -568) (RSP + -584) (RSP + -584)
(RSP + -568) PTRSUB RSP -568
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -584) PTRSUB RSP -584
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -504) (RSP + -568) (RSP + -568)
(f() / 2147483647) SUBPIECE f() 8
(f() + 1) INT_ADD f() 1
(f() / 2147483647) SUBPIECE f() 0
(f() + 1) INT_SEXT (f() + 1)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
(RSP + -504) PTRSUB RSP -504
0 INT_SLESS (f() + 1) ((A_Stack[-0xe0]:8 - A_Stack[-0xe8]:8) / 17179869176)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -2040) PTRSUB RSP -2040
f() CALL func (A_Stack[-0xe8]:8 + ((f() + 1) * 8)) (RSP + -2040) (A_Stack[-0xe8]:8 + ((f() + 1) * 8))
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
(RSP + -568) PTRSUB RSP -568
(A_Stack[-0xe8]:8 + ((f() + 1) * 8)) PTRADD A_Stack[-0xe8]:8 (f() + 1) 8
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
f() CALL func commandline
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
commandline COPY commandline
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
0 INT_EQUAL [(ARG1 + 208)] 0
[(ARG1 + 208)] LOAD 433 (ARG1 + 208)
 BRANCH VZERO
(ARG1 + 208) CAST (ARG1 + 208)
 CBRANCH ([(ARG1 + 208)] INT_EQUAL 0)
 CBRANCH ([([(A_Stack[-0xe8]:8 + (f() * 8))] + 2)] INT_EQUAL 0)
 CALL libcall_~basic_string_thunk (RSP + -536)
(RSP + -536) PTRSUB RSP -536
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 BRANCH VZERO
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
0 INT_EQUAL f() 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
0 COPY 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
1 COPY 1
 CBRANCH f()
 CBRANCH ((((f() - f()) / 8) * -6148914691236517205) INT_LESS f())
 CBRANCH ([(ARG1 + 208)] INT_EQUAL 0)
(ARG1 + 208) CAST (ARG1 + 208)
0 INT_EQUAL [(ARG1 + 208)] 0
0 COPY 0
[(ARG1 + 208)] LOAD 433 (ARG1 + 208)
 CBRANCH f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -584) PTRSUB RSP -584
f() CALL func f() : CommandLine Error: Option '
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func
(RSP + -568) PTRSUB RSP -568
' is all messed up!  COPY ' is all messed up! 
 CALL func (RSP + -568) error - option can never match, because another positional argument will match an unbounded number of values, and this option does not require a value!
f() CALL func f() [(f(ARG1) + 24)] [(f(ARG1) + 32)]
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f(ARG1) (RSP + -568) f() f()
(f(ARG1) + 32) INT_ADD f(ARG1) 32
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
error - option can never match, because another positional argument will match an unbounded number of values, and this option does not require a value! COPY error - option can never match, because another positional argument will match an unbounded number of values, and this option does not require a value!
(f(ARG1) + 24) INT_ADD f(ARG1) 24
(ARG1 + 64) COPY (ARG1 + 64)
(ARG1 + 64) COPY (ARG1 + 64)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL func
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
[(f(ARG1) + 32)] LOAD 433 (f(ARG1) + 32)
(f() | f()) INT_OR f() f()
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -584)
: CommandLine Error: Option ' COPY : CommandLine Error: Option '
(f() / 2147483647) SUBPIECE f() 0
[(f(ARG1) + 24)] LOAD 433 (f(ARG1) + 24)
(RSP + -568) PTRSUB RSP -568
(f(ARG1) + 32) CAST (f(ARG1) + 32)
(f(ARG1) + 24) CAST (f(ARG1) + 24)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func f()
 CALL func f() ' is all messed up! 
 CBRANCH (f() INT_NOTEQUAL 0)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
: Did you mean '- COPY : Did you mean '-
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(RSP + -536) PTRSUB RSP -536
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() CALL func f() : Did you mean '-
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
4705176 PTRSUB 0 4705176
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 CALL func f() 4705176
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
f() CALL func
f() CALL func f() (RSP + -536) f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_LESSEQUAL (([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) f()
(([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) CAST (([(ARG1 + 72)] - [(ARG1 + 64)]) / 8)
 CBRANCH (f() INT_NOTEQUAL f(ARG1))
0 INT_NOTEQUAL f() f(ARG1)
(ARG1 + 72) CAST (ARG1 + 72)
(ARG1 + 64) CAST (ARG1 + 64)
(f() + 1) INT_ADD f() 1
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(ARG1 + 64) COPY (ARG1 + 64)
(ARG1 + 64) COPY (ARG1 + 64)
([(ARG1 + 72)] - [(ARG1 + 64)]) INT_SUB [(ARG1 + 72)] [(ARG1 + 64)]
f() COPY f()
 BRANCH VZERO
(ARG1 + 64) COPY (ARG1 + 64)
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
 CBRANCH ((([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_LESSEQUAL f())
(([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_SRIGHT ([(ARG1 + 72)] - [(ARG1 + 64)]) 3
 CBRANCH (f() INT_EQUAL 0)
f() CALL func (ARG1 + 120)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
0 COPY 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 CBRANCH (f() INT_EQUAL 0)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
1 COPY 1
0 INT_NOTEQUAL f() 1
f() CALL func f()
 CBRANCH (f() INT_NOTEQUAL 1)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(RSP + -504) PTRSUB RSP -504
0 INT_EQUAL f() 1
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 CBRANCH (f() INT_EQUAL 1)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() CALL func (RSP + -504)
 CBRANCH (f() INT_EQUAL 1)
f() COPY f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
f() CALL func f() (f(RSP) / 2147483647) (f(RSP) / 2147483647) f() f() ((A_Stack[-0xe0]:8 - A_Stack[-0xe8]:8) / 17179869176) A_Stack[-0xe8]:8 (RSP + -2040)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 BRANCH VZERO
(RSP + -2040) PTRSUB RSP -2040
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f() | f()) INT_OR f() f()
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
0 INT_EQUAL f() 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 BRANCH VZERO
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
f() CALL func f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() CALL func (ARG1 + 120)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
2 COPY 2
0 INT_EQUAL f() 1
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 CBRANCH (f() INT_EQUAL 0)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(RSP + -2045) PTRSUB RSP -2045
(RSP + -600) PTRSUB RSP -600
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(RSP + -616) PTRSUB RSP -616
f() CALL func (RSP + -600) (RSP + -616) (RSP + -2045) (ARG1 + 176)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(ARG1 + 120) CAST (ARG1 + 120)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() CALL func
0 INT_NOTEQUAL f() 0
'.  Try: ' COPY '.  Try: '
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 BRANCH VZERO
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
1 COPY 1
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
[(ARG1 + 120)] LOAD 433 (ARG1 + 120)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() CALL func f() : Unknown command line argument '
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
[(ARG1 + 120)] CAST [(ARG1 + 120)]
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
-help'  COPY -help' 
 CBRANCH (f(ARG1) INT_NOTEQUAL f(ARG1))
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
0 INT_NOTEQUAL f(ARG1) f(ARG1)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() CALL func f() '.  Try: '
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(ARG1 + 128) CAST (ARG1 + 128)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
[A_Stack[-0xe8]:8] LOAD 433 A_Stack[-0xe8]:8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
f() CALL func f() [(A_Stack[-0xe8]:8 + (f() * 8))]
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
[(A_Stack[-0xe8]:8 + (f() * 8))] LOAD 433 (A_Stack[-0xe8]:8 + (f() * 8))
 CALL func f() -help' 
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(A_Stack[-0xe8]:8 + (f() * 8)) PTRADD A_Stack[-0xe8]:8 f() 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
[(ARG1 + 128)] LOAD 433 (ARG1 + 128)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
: Unknown command line argument ' COPY : Unknown command line argument '
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
f() CALL func f() [A_Stack[-0xe8]:8]
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() INT_SEXT f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL f(ARG1))
0 INT_LESSEQUAL (([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) f()
 CBRANCH f()
(ARG1 + 64) CAST (ARG1 + 64)
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_SRIGHT ([(ARG1 + 72)] - [(ARG1 + 64)]) 3
([(ARG1 + 72)] - [(ARG1 + 64)]) INT_SUB [(ARG1 + 72)] [(ARG1 + 64)]
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
(ARG1 + 72) CAST (ARG1 + 72)
(ARG1 + 64) COPY (ARG1 + 64)
 CBRANCH ((([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_EQUAL 1)
(ARG1 + 64) CAST (ARG1 + 64)
(ARG1 + 64) COPY (ARG1 + 64)
(ARG1 + 72) CAST (ARG1 + 72)
0 INT_EQUAL (([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) 1
f() COPY f()
(ARG1 + 64) COPY (ARG1 + 64)
(ARG1 + 64) COPY (ARG1 + 64)
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) CAST (([(ARG1 + 72)] - [(ARG1 + 64)]) / 8)
 CBRANCH ((([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_LESSEQUAL f())
(([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_SRIGHT ([(ARG1 + 72)] - [(ARG1 + 64)]) 3
([(ARG1 + 72)] - [(ARG1 + 64)]) INT_SUB [(ARG1 + 72)] [(ARG1 + 64)]
(ARG1 + 64) COPY (ARG1 + 64)
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
 CBRANCH (f() INT_EQUAL 1)
f() COPY f()
f() INT_SEXT f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH f()
((f() - f()) / 8) INT_SRIGHT (f() - f()) 3
(f() / 2147483647) SUBPIECE f() 0
0 INT_LESS (((f() - f()) / 8) * -6148914691236517205) f()
(((f() - f()) / 8) * -6148914691236517205) INT_MULT ((f() - f()) / 8) -6148914691236517205
(f() / 2147483647) SUBPIECE f() 8
(RSP + -504) PTRSUB RSP -504
(f() / 2147483647) SUBPIECE f() 0
(RSP + -2040) PTRSUB RSP -2040
(A_Stack[-0xe8]:8 + (f() * 8)) PTRADD A_Stack[-0xe8]:8 f() 8
f() CALL func (A_Stack[-0xe8]:8 + (f() * 8)) (RSP + -2040) (A_Stack[-0xe8]:8 + (f() * 8))
(RSP + -568) PTRSUB RSP -568
0 INT_EQUAL f() 0
(RSP + -504) PTRSUB RSP -504
(f() - f()) INT_SUB f() f()
 CALL func (RSP + -568) (RSP + -584) (RSP + -584)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -568) PTRSUB RSP -568
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -584) PTRSUB RSP -584
(((f() - f()) / 8) * -6148914691236517205) CAST (((f() - f()) / 8) * -6148914691236517205)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -504) PTRSUB RSP -504
(f() / 2147483647) SUBPIECE f() 0
f() INT_ZEXT f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -504) (RSP + -568) (RSP + -568)
 BRANCH VZERO
1 COPY 1
 CBRANCH f()
(RSP + -592) PTRSUB RSP -592
f(RSP) CAST f(RSP)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(RSP + -600) PTRSUB RSP -600
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
([f(RSP)] # ([f(RSP)] + (f(RSP) / 2147483647))) COPY ([f(RSP)] # ([f(RSP)] + (f(RSP) / 2147483647)))
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
0 INT_EQUAL f() 0
(RSP + -616) PTRSUB RSP -616
([f(RSP)] + (f(RSP) / 2147483647)) INT_ADD [f(RSP)] (f(RSP) / 2147483647)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
((f(RSP) / 2147483647) # ((f(RSP) / 2147483647) - [f(RSP)])) COPY ((f(RSP) / 2147483647) # ((f(RSP) / 2147483647) - [f(RSP)]))
[f(RSP)] LOAD 433 f(RSP)
1 COPY 1
((f(RSP) / 2147483647) - [f(RSP)]) INT_SUB (f(RSP) / 2147483647) [f(RSP)]
(RSP + -2008) PTRSUB RSP -2008
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(RSP + -584) PTRSUB RSP -584
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
[f(RSP)] LOAD 433 f(RSP)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f(RSP) CALL func (RSP + -2000) (RSP + -584) (RSP + -584)
f(RSP) CAST f(RSP)
 CBRANCH (([f(RSP)] + (f(RSP) / 2147483647)) INT_EQUAL 0)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 CBRANCH f()
0 INT_EQUAL ([f(RSP)] + (f(RSP) / 2147483647)) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
((f(RSP) / 2147483647) # ((f(RSP) / 2147483647) - [f(RSP)])) PIECE (f(RSP) / 2147483647) ((f(RSP) / 2147483647) - [f(RSP)])
((f(RSP) / 2147483647) # ((f(RSP) / 2147483647) - [f(RSP)])) PIECE (f(RSP) / 2147483647) ((f(RSP) / 2147483647) - [f(RSP)])
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
-1 COPY -1
([f(RSP)] # ([f(RSP)] + (f(RSP) / 2147483647))) PIECE [f(RSP)] ([f(RSP)] + (f(RSP) / 2147483647))
([f(RSP)] # ([f(RSP)] + (f(RSP) / 2147483647))) PIECE [f(RSP)] ([f(RSP)] + (f(RSP) / 2147483647))
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f(RSP) CALL func (RSP + -2008) (RSP + -592) (RSP + -592)
f() COPY f()
(RSP + -2000) PTRSUB RSP -2000
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 CBRANCH (f() INT_NOTEQUAL 3)
(RSP + -504) COPY (RSP + -504)
(RSP + -504) COPY (RSP + -504)
f() INT_ZEXT f()
(f() - f()) INT_SUB f() f()
 CBRANCH (f() INT_NOTEQUAL 0)
((f() - f()) / 8) INT_SRIGHT (f() - f()) 3
(((f() - f()) / 8) * -6148914691236517205) CAST (((f() - f()) / 8) * -6148914691236517205)
0 INT_NOTEQUAL f() 0
0 INT_LESSEQUAL (((f() - f()) / 8) * -6148914691236517205) f()
(RSP + -504) PTRSUB RSP -504
(((f() - f()) / 8) * -6148914691236517205) INT_MULT ((f() - f()) / 8) -6148914691236517205
 CBRANCH ((((f() - f()) / 8) * -6148914691236517205) INT_LESSEQUAL f())
0 COPY 0
 CBRANCH ([([(A_Stack[-0xe8]:8 + (f() * 8))] + 1)] INT_NOTEQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_SLESS ((A_Stack[-0xe0]:8 - A_Stack[-0xe8]:8) / 17179869176))
(((f() - f()) / 8) * -6148914691236517205) INT_MULT ((f() - f()) / 8) -6148914691236517205
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
0 INT_EQUAL [[(A_Stack[-0xe8]:8 + (f() * 8))]] 45
f() INT_ZEXT f()
 CALL func (RSP + -600) 4703301
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
4703301 PTRSUB 0 4703301
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
[[(A_Stack[-0xe8]:8 + (f() * 8))]] LOAD 433 [(A_Stack[-0xe8]:8 + (f() * 8))]
(RSP + -504) PTRSUB RSP -504
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f() - f()) INT_SUB f() f()
0 COPY 0
[(A_Stack[-0xe8]:8 + (f() * 8))] LOAD 433 (A_Stack[-0xe8]:8 + (f() * 8))
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
f() COPY f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 CALL func (RSP + -616)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
0 COPY 0
(RSP + -600) PTRSUB RSP -600
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() INT_SEXT f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(((f() - f()) / 8) * -6148914691236517205) CAST (((f() - f()) / 8) * -6148914691236517205)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(RSP + -616) PTRSUB RSP -616
(RSP + -504) PTRSUB RSP -504
 CBRANCH ((((f() - f()) / 8) * -6148914691236517205) INT_LESS f())
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
[(A_Stack[-0xe8]:8 + (f() * 8))] CAST [(A_Stack[-0xe8]:8 + (f() * 8))]
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
((f() - f()) / 8) INT_SRIGHT (f() - f()) 3
 CALL libcall_basic_string_thunk
(A_Stack[-0xe8]:8 + (f() * 8)) PTRADD A_Stack[-0xe8]:8 f() 8
0 INT_LESS (((f() - f()) / 8) * -6148914691236517205) f()
 CBRANCH ([[(A_Stack[-0xe8]:8 + (f() * 8))]] INT_EQUAL 45)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 CALL func (RSP + -568) [(A_Stack[-0xe8]:8 + (f() * 8))] [(A_Stack[-0xe8]:8 + (f() * 8))]
(RSP + -584) PTRSUB RSP -584
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
([[f(ARG1)]] + 56) INT_ADD [[f(ARG1)]] 56
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
[f(ARG1)] LOAD 433 f(ARG1)
[([[f(ARG1)]] + 56)] LOAD 433 ([[f(ARG1)]] + 56)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 BRANCH VZERO
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
4703301 PTRSUB 0 4703301
(RSP + -568) PTRSUB RSP -568
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(A_Stack[-0xe8]:8 + (f() * 8)) PTRADD A_Stack[-0xe8]:8 f() 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
([[f(ARG1)]] + 56) CAST ([[f(ARG1)]] + 56)
[(A_Stack[-0xe8]:8 + (f() * 8))] LOAD 433 (A_Stack[-0xe8]:8 + (f() * 8))
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 CALL func (RSP + -584) 4703301
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
[[f(ARG1)]] LOAD 433 [f(ARG1)]
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
[f(ARG1)] LOAD 433 f(ARG1)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
4453847 COPY 4453847
f() INT_SEXT f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 CALLIND [([[f(ARG1)]] + 56)] [f(ARG1)] f() (f(RSP) / 2147483647) (f(RSP) / 2147483647) (f(RSP) / 2147483647) (f(RSP) / 2147483647) 0 4453847
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 CBRANCH ((f() + -2) INT_LESS 2)
f() CALL func [(f() + 8)]
(f() + 8) INT_ADD f() 8
[(f() + 8)] LOAD 433 (f() + 8)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f() + 8) CAST (f() + 8)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 3
 CBRANCH ((f() & 2) INT_EQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH (f() INT_SLESS ((A_Stack[-0xe0]:8 - A_Stack[-0xe8]:8) / 17179869176))
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(A_Stack[-0xe8]:8 + (f() * 8)) PTRADD A_Stack[-0xe8]:8 f() 8
f() CALL func
 BRANCH VZERO
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 CALL func f() 32
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() INT_SEXT f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f() + 1) INT_ADD f() 1
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
f() CALL func f() [(A_Stack[-0xe8]:8 + (f() * 8))]
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
0 INT_SLESS f() ((A_Stack[-0xe0]:8 - A_Stack[-0xe8]:8) / 17179869176)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
[(A_Stack[-0xe8]:8 + (f() * 8))] LOAD 433 (A_Stack[-0xe8]:8 + (f() * 8))
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 CBRANCH f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) INT_RIGHT f(RSP) 64
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
0 INT_EQUAL f() 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
f(RSP) CALL func (RSP + -1984) (RSP + -584) (RSP + -584)
(f(RSP) / 4611686014132420609) SUBPIECE (f(RSP) / 2147483647) 0
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (([f(RSP)] + (f(RSP) / 2147483647)) INT_EQUAL 0)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
([f(RSP)] # ([f(RSP)] + (f(RSP) / 2147483647))) PIECE [f(RSP)] ([f(RSP)] + (f(RSP) / 2147483647))
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
([f(RSP)] # ([f(RSP)] + (f(RSP) / 2147483647))) PIECE [f(RSP)] ([f(RSP)] + (f(RSP) / 2147483647))
(RSP + -1984) PTRSUB RSP -1984
0 INT_EQUAL f() 0
(RSP + -584) PTRSUB RSP -584
([f(RSP)] + (f(RSP) / 2147483647)) INT_ADD [f(RSP)] (f(RSP) / 2147483647)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -1992) (RSP + -592) (RSP + -592)
f(RSP) CAST f(RSP)
(RSP + -616) PTRSUB RSP -616
((f(RSP) / 2147483647) - [f(RSP)]) INT_SUB (f(RSP) / 2147483647) [f(RSP)]
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
((f(RSP) / 2147483647) # ((f(RSP) / 2147483647) - [f(RSP)])) PIECE (f(RSP) / 2147483647) ((f(RSP) / 2147483647) - [f(RSP)])
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
((f(RSP) / 2147483647) # ((f(RSP) / 2147483647) - [f(RSP)])) PIECE (f(RSP) / 2147483647) ((f(RSP) / 2147483647) - [f(RSP)])
([f(RSP)] # ([f(RSP)] + (f(RSP) / 2147483647))) COPY ([f(RSP)] # ([f(RSP)] + (f(RSP) / 2147483647)))
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
((f(RSP) / 2147483647) # ((f(RSP) / 2147483647) - [f(RSP)])) COPY ((f(RSP) / 2147483647) # ((f(RSP) / 2147483647) - [f(RSP)]))
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
0 INT_EQUAL ([f(RSP)] + (f(RSP) / 2147483647)) 0
(RSP + -1992) PTRSUB RSP -1992
(RSP + -592) PTRSUB RSP -592
-1 COPY -1
(RSP + -600) PTRSUB RSP -600
1 COPY 1
 CBRANCH f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
f(RSP) CAST f(RSP)
 BRANCH VZERO
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 RETURN 1
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() COPY f()
f() COPY f()
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 CBRANCH ((((f() - f()) / 8) * -6148914691236517205) INT_LESSEQUAL f())
(f() - f()) INT_SUB f() f()
(RSP + -504) PTRSUB RSP -504
(((f() - f()) / 8) * -6148914691236517205) INT_MULT ((f() - f()) / 8) -6148914691236517205
(RSP + -504) PTRSUB RSP -504
(RSP + -504) PTRSUB RSP -504
 CBRANCH (f() INT_EQUAL (((f() - f()) / 8) * -6148914691236517205))
((f() - f()) / 8) INT_SRIGHT (f() - f()) 3
f() INT_ZEXT f()
0 INT_LESSEQUAL (((f() - f()) / 8) * -6148914691236517205) f()
f() INT_ZEXT f()
(RSP + -504) COPY (RSP + -504)
(((f() - f()) / 8) * -6148914691236517205) INT_MULT ((f() - f()) / 8) -6148914691236517205
((f() - f()) / 8) INT_SRIGHT (f() - f()) 3
(((f() - f()) / 8) * -6148914691236517205) CAST (((f() - f()) / 8) * -6148914691236517205)
(f() - f()) INT_SUB f() f()
(RSP + -504) COPY (RSP + -504)
0 INT_EQUAL f() (((f() - f()) / 8) * -6148914691236517205)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_SRIGHT ([(ARG1 + 72)] - [(ARG1 + 64)]) 3
0 INT_NOTEQUAL f() 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
f() CALL func (ARG1 + 176)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
f() COPY f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
([(ARG1 + 72)] - [(ARG1 + 64)]) INT_SUB [(ARG1 + 72)] [(ARG1 + 64)]
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 CBRANCH ((([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_LESSEQUAL f())
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(ARG1 + 64) COPY (ARG1 + 64)
0 INT_LESSEQUAL (([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) f()
(ARG1 + 72) CAST (ARG1 + 72)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(ARG1 + 64) COPY (ARG1 + 64)
(ARG1 + 64) COPY (ARG1 + 64)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 CBRANCH (f() INT_EQUAL 0)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 CALL func (ARG1 + 40)
 CBRANCH f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
0 INT_EQUAL f() 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
f() CALL func (RSP + -616) (RSP + -600) (RSP + -600)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(ARG1 + 64) CAST (ARG1 + 64)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() CALL func (ARG1 + 176)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(RSP + -616) PTRSUB RSP -616
f() COPY f()
(([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) CAST (([(ARG1 + 72)] - [(ARG1 + 64)]) / 8)
(RSP + -600) PTRSUB RSP -600
 CBRANCH ([(ARG1 + 208)] INT_EQUAL 0)
(([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) CAST (([(ARG1 + 72)] - [(ARG1 + 64)]) / 8)
 CBRANCH (1 INT_LESS (([(ARG1 + 72)] - [(ARG1 + 64)]) / 8))
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
([(ARG1 + 72)] - [(ARG1 + 64)]) INT_SUB [(ARG1 + 72)] [(ARG1 + 64)]
(ARG1 + 64) COPY (ARG1 + 64)
(ARG1 + 64) COPY (ARG1 + 64)
(([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_SRIGHT ([(ARG1 + 72)] - [(ARG1 + 64)]) 3
0 INT_LESS 1 (([(ARG1 + 72)] - [(ARG1 + 64)]) / 8)
 CBRANCH (f() INT_EQUAL 0)
(ARG1 + 64) CAST (ARG1 + 64)
(ARG1 + 72) CAST (ARG1 + 72)
0 INT_EQUAL f() 0
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
 CALL func f() (f(RSP) / 2147483647) (f(RSP) / 2147483647) f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() INT_SEXT f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
[(A_Stack[-0xe8]:8 + (f() * 8))] LOAD 433 (A_Stack[-0xe8]:8 + (f() * 8))
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 CALL func (RSP + -568) [(A_Stack[-0xe8]:8 + (f() * 8))] [(A_Stack[-0xe8]:8 + (f() * 8))]
(RSP + -568) PTRSUB RSP -568
 BRANCH VZERO
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(A_Stack[-0xe8]:8 + (f() * 8)) PTRADD A_Stack[-0xe8]:8 f() 8
0 COPY 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f() + 8) CAST (f() + 8)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(RSP + -616) PTRSUB RSP -616
f() CALL func [(f() + 8)]
(f() + 8) INT_ADD f() 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 BRANCH VZERO
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
[(f() + 8)] LOAD 433 (f() + 8)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(RSP + -616) PTRSUB RSP -616
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 CALL func (RSP + -616)
0 INT_LESS (f() + -2) 2
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
f() CALL func (RSP + -616)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f() + -2) INT_SUB f() -2
 CBRANCH (f() INT_EQUAL 1)
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
(f() - f()) INT_SUB f() f()
([(ARG1 + 72)] - [(ARG1 + 64)]) INT_SUB [(ARG1 + 72)] [(ARG1 + 64)]
(([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_SRIGHT ([(ARG1 + 72)] - [(ARG1 + 64)]) 3
(ARG1 + 72) CAST (ARG1 + 72)
(ARG1 + 64) CAST (ARG1 + 64)
((((f() - f()) / 8) * -6148914691236517205) - (([(ARG1 + 72)] - [(ARG1 + 64)]) / 8)) INT_SUB (((f() - f()) / 8) * -6148914691236517205) (([(ARG1 + 72)] - [(ARG1 + 64)]) / 8)
((f() - f()) / 8) INT_SRIGHT (f() - f()) 3
0 COPY 0
 CBRANCH (0 BOOL_OR 0)
0 BOOL_OR 0 0
(ARG1 + 64) COPY (ARG1 + 64)
0 INT_LESS (((f() - f()) / 8) * -6148914691236517205) (([(ARG1 + 72)] - [(ARG1 + 64)]) / 8)
0 INT_EQUAL ((((f() - f()) / 8) * -6148914691236517205) - (([(ARG1 + 72)] - [(ARG1 + 64)]) / 8)) 0
(RSP + -504) PTRSUB RSP -504
(((f() - f()) / 8) * -6148914691236517205) INT_MULT ((f() - f()) / 8) -6148914691236517205
(RSP + -504) PTRSUB RSP -504
(ARG1 + 64) COPY (ARG1 + 64)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() CALL func
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 CALL func f() Args: 
 CALL func f() 10
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
Args:  COPY Args: 
0 COPY 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() CALL func
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
(f() / 2147483647) SUBPIECE f() 8
0 COPY 0
f() CALL func [([(ARG1 + 64)] + (f() * 8))]
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -504) COPY (RSP + -504)
(RSP + -504) COPY (RSP + -504)
f() INT_ZEXT f()
(f() + 1) INT_ADD f() 1
(((f() - f()) / 8) * -6148914691236517205) CAST (((f() - f()) / 8) * -6148914691236517205)
0 INT_NOTEQUAL f() f(ARG1)
(f() - f()) INT_SUB f() f()
 CBRANCH ((((f() - f()) / 8) * -6148914691236517205) INT_LESSEQUAL f())
((f() - f()) / 8) INT_SRIGHT (f() - f()) 3
0 INT_LESSEQUAL (((f() - f()) / 8) * -6148914691236517205) f()
 BRANCH VZERO
(((f() - f()) / 8) * -6148914691236517205) INT_MULT ((f() - f()) / 8) -6148914691236517205
(RSP + -504) PTRSUB RSP -504
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 CBRANCH ((f() - f()) INT_LESSEQUAL f())
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f() - f()) INT_SUB f() f()
Internal error, unexpected NumOccurrences flag in positional argument processing! COPY Internal error, unexpected NumOccurrences flag in positional argument processing!
1 COPY 1
0 INT_LESSEQUAL (f() - f()) f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
 CALL func Internal error, unexpected NumOccurrences flag in positional argument processing! /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 1035
 CBRANCH (f() INT_NOTEQUAL f(ARG1))
(ARG1 + 64) COPY (ARG1 + 64)
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
0 INT_EQUAL f() 0
(([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) CAST (([(ARG1 + 72)] - [(ARG1 + 64)]) / 8)
(([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_SRIGHT ([(ARG1 + 72)] - [(ARG1 + 64)]) 3
(f() / 2147483647) SUBPIECE f() 8
1 COPY 1
(f() / 2147483647) SUBPIECE f() 0
(RSP + -504) PTRSUB RSP -504
(f() # f()) PIECE f() f()
0 COPY 0
0 INT_SLESS f() ((A_Stack[-0xe0]:8 - A_Stack[-0xe8]:8) / 17179869176)
f() COPY f()
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
([(ARG1 + 72)] - [(ARG1 + 64)]) INT_SUB [(ARG1 + 72)] [(ARG1 + 64)]
 CBRANCH ((([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_LESSEQUAL f())
 CALL func (RSP + -504)
(ARG1 + 64) CAST (ARG1 + 64)
0 COPY 0
(ARG1 + 72) CAST (ARG1 + 72)
0 INT_LESSEQUAL (([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) f()
(f() # f()) PIECE f() f()
(ARG1 + 64) COPY (ARG1 + 64)
(ARG1 + 64) COPY (ARG1 + 64)
1 COPY 1
 BRANCH VZERO
 CBRANCH ([([(A_Stack[-0xe8]:8 + (f() * 8))] + 1)] INT_EQUAL 45)
0 INT_EQUAL [([(A_Stack[-0xe8]:8 + (f() * 8))] + 2)] 0
([(A_Stack[-0xe8]:8 + (f() * 8))] + 2) CAST ([(A_Stack[-0xe8]:8 + (f() * 8))] + 2)
[(A_Stack[-0xe8]:8 + (f() * 8))] LOAD 433 (A_Stack[-0xe8]:8 + (f() * 8))
(A_Stack[-0xe8]:8 + (f() * 8)) PTRADD A_Stack[-0xe8]:8 f() 8
[([(A_Stack[-0xe8]:8 + (f() * 8))] + 2)] LOAD 433 ([(A_Stack[-0xe8]:8 + (f() * 8))] + 2)
f() INT_SEXT f()
([(A_Stack[-0xe8]:8 + (f() * 8))] + 2) INT_ADD [(A_Stack[-0xe8]:8 + (f() * 8))] 2
[(A_Stack[-0xe8]:8 + (f() * 8))] LOAD 433 (A_Stack[-0xe8]:8 + (f() * 8))
(A_Stack[-0xe8]:8 + (f() * 8)) PTRADD A_Stack[-0xe8]:8 f() 8
0 INT_EQUAL [[(A_Stack[-0xe8]:8 + (f() * 8))]] 45
 CBRANCH ([[(A_Stack[-0xe8]:8 + (f() * 8))]] INT_EQUAL 45)
[(A_Stack[-0xe8]:8 + (f() * 8))] CAST [(A_Stack[-0xe8]:8 + (f() * 8))]
f() INT_SEXT f()
[[(A_Stack[-0xe8]:8 + (f() * 8))]] LOAD 433 [(A_Stack[-0xe8]:8 + (f() * 8))]
 CBRANCH ([(ARG1 + 208)] INT_EQUAL 0)
[(ARG1 + 208)] LOAD 433 (ARG1 + 208)
(RSP + -504) PTRSUB RSP -504
(ARG1 + 64) CAST (ARG1 + 64)
((f() - f()) / 8) INT_SRIGHT (f() - f()) 3
0 COPY 0
([(ARG1 + 72)] - [(ARG1 + 64)]) INT_SUB [(ARG1 + 72)] [(ARG1 + 64)]
(((f() - f()) / 17179869176) * 2863311531) INT_MULT ((f() - f()) / 17179869176) 2863311531
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
(ARG1 + 64) COPY (ARG1 + 64)
(ARG1 + 64) COPY (ARG1 + 64)
0 COPY 0
0 INT_EQUAL [(ARG1 + 208)] 0
(RSP + -504) PTRSUB RSP -504
(f() - f()) INT_SUB f() f()
 CBRANCH ([(ARG1 + 208)] INT_EQUAL 0)
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(ARG1 + 72) CAST (ARG1 + 72)
(ARG1 + 208) CAST (ARG1 + 208)
((f() - f()) / 17179869176) SUBPIECE ((f() - f()) / 8) 0
(([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_SRIGHT ([(ARG1 + 72)] - [(ARG1 + 64)]) 3
 CBRANCH f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
Can specify at most  COPY Can specify at most 
 BRANCH VZERO
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
1 COPY 1
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
: Too many positional arguments specified!  COPY : Too many positional arguments specified! 
 CALL func f() -help 
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(ARG1 + 72) CAST (ARG1 + 72)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
positional arguments: See:  COPY positional arguments: See: 
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
[(ARG1 + 208)] LOAD 433 (ARG1 + 208)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() CALL func f() (([(ARG1 + 72)] - [(ARG1 + 64)]) / 8)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
[A_Stack[-0xe8]:8] LOAD 433 A_Stack[-0xe8]:8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() CALL func f() Can specify at most 
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(ARG1 + 64) COPY (ARG1 + 64)
(ARG1 + 64) COPY (ARG1 + 64)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() CALL func f() [A_Stack[-0xe8]:8]
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() CALL func f() positional arguments: See: 
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(ARG1 + 64) CAST (ARG1 + 64)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() CALL func
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
f() CALL func f() : Too many positional arguments specified! 
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
([(ARG1 + 72)] - [(ARG1 + 64)]) INT_SUB [(ARG1 + 72)] [(ARG1 + 64)]
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
-help  COPY -help 
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
0 INT_EQUAL [(ARG1 + 208)] 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_SRIGHT ([(ARG1 + 72)] - [(ARG1 + 64)]) 3
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(ARG1 + 208) CAST (ARG1 + 208)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 CBRANCH ([(ARG1 + 208)] INT_NOTEQUAL 0)
(f() / 2147483647) SUBPIECE f() 0
(ARG1 + 64) COPY (ARG1 + 64)
(ARG1 + 64) CAST (ARG1 + 64)
 CBRANCH ((([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_EQUAL 0)
(ARG1 + 64) COPY (ARG1 + 64)
(ARG1 + 72) CAST (ARG1 + 72)
0 INT_EQUAL (([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) 0
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
([(ARG1 + 72)] - [(ARG1 + 64)]) INT_SUB [(ARG1 + 72)] [(ARG1 + 64)]
f() CALL func (ARG1 + 64)
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
0 INT_NOTEQUAL f() 1
 CBRANCH (f() INT_NOTEQUAL 1)
(f() / 2147483647) SUBPIECE f() 8
(([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_SRIGHT ([(ARG1 + 72)] - [(ARG1 + 64)]) 3
 BRANCH VZERO
1 COPY 1
f() INT_SEXT f()
 CBRANCH ((f(RSP) / 4611686014132420609) INT_EQUAL 0)
[(A_Stack[-0xe8]:8 + (f() * 8))] LOAD 433 (A_Stack[-0xe8]:8 + (f() * 8))
(A_Stack[-0xe8]:8 + (f() * 8)) PTRADD A_Stack[-0xe8]:8 f() 8
 CALL func (RSP + -568) ([(A_Stack[-0xe8]:8 + (f() * 8))] + 1) ([(A_Stack[-0xe8]:8 + (f() * 8))] + 1)
0 INT_EQUAL (f(RSP) / 4611686014132420609) 0
f(RSP) COPY f(RSP)
(RSP + -568) PTRSUB RSP -568
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 4611686014132420609) SUBPIECE (f(RSP) / 2147483647) 0
f() INT_SEXT f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
([(A_Stack[-0xe8]:8 + (f() * 8))] + 1) INT_ADD [(A_Stack[-0xe8]:8 + (f() * 8))] 1
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(A_Stack[-0xe8]:8 + (f() * 8)) PTRADD A_Stack[-0xe8]:8 f() 8
(f(RSP) / 2147483647) INT_RIGHT f(RSP) 64
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 4611686014132420609) SUBPIECE (f(RSP) / 2147483647) 0
(f(RSP) / 2147483647) INT_RIGHT f(RSP) 64
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
0 INT_EQUAL (f(RSP) / 4611686014132420609) 0
 CALL func (RSP + -568) ([(A_Stack[-0xe8]:8 + (f() * 8))] + 1) ([(A_Stack[-0xe8]:8 + (f() * 8))] + 1)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f(RSP) COPY f(RSP)
[(A_Stack[-0xe8]:8 + (f() * 8))] LOAD 433 (A_Stack[-0xe8]:8 + (f() * 8))
 CBRANCH ((f(RSP) / 4611686014132420609) INT_EQUAL 0)
f(RSP) COPY f(RSP)
([(A_Stack[-0xe8]:8 + (f() * 8))] + 1) INT_ADD [(A_Stack[-0xe8]:8 + (f() * 8))] 1
(RSP + -568) PTRSUB RSP -568
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 2)
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
1 COPY 1
(A_Stack[-0xe0]:8 - A_Stack[-0xe8]:8) INT_SUB A_Stack[-0xe0]:8 A_Stack[-0xe8]:8
0 COPY 0
(RSP + -376) PTRSUB RSP -376
VZERO COPY VZERO
 CALL func (RSP + -2016) 4444182 (RSP + -232) 0
(ARG2 * 8) INT_MULT ARG2 8
 CBRANCH (((A_Stack[-0xe0]:8 - A_Stack[-0xe8]:8) / 8) INT_EQUAL 0)
(RSP + -232) COPY (RSP + -232)
(RSP + -2016) PTRSUB RSP -2016
(RSP + -232) COPY (RSP + -232)
 CALL func (RSP + -376)
void {anonymous}::CommandLineParser::ParseCommandLineOptions(int, const char* const*, const char*) COPY void {anonymous}::CommandLineParser::ParseCommandLineOptions(int, const char* const*, const char*)
0 INT_EQUAL ((A_Stack[-0xe0]:8 - A_Stack[-0xe8]:8) / 8) 0
(RSP + -232) PTRSUB RSP -232
(RSP + -232) PTRSUB RSP -232
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
((A_Stack[-0xe0]:8 - A_Stack[-0xe8]:8) / 8) INT_SRIGHT (A_Stack[-0xe0]:8 - A_Stack[-0xe8]:8) 3
4444182 PTRSUB 0 4444182
(RSP + -2016) PTRSUB RSP -2016
(RSP + -232) PTRSUB RSP -232
A_Stack[-0xe8]:8 CAST A_Stack[-0xe8]:8
hasOptions() && "No options specified!" COPY hasOptions() && "No options specified!"
 CALL func (RSP + -2016) (RSP + -376) (RSP + -376)
(RSP + -376) PTRSUB RSP -376
 RETURN 1
 CALL libcall___assert_fail_thunk hasOptions() && "No options specified!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 816 void {anonymous}::CommandLineParser::ParseCommandLineOptions(int, const char* const*, const char*)
0 INT_NOTEQUAL f() 0
([(A_Stack[-0xe8]:8 + (f() * 8))] + 1) INT_ADD [(A_Stack[-0xe8]:8 + (f() * 8))] 1
0 INT_EQUAL [([(A_Stack[-0xe8]:8 + (f() * 8))] + 1)] 45
([(A_Stack[-0xe8]:8 + (f() * 8))] + 1) CAST ([(A_Stack[-0xe8]:8 + (f() * 8))] + 1)
[(A_Stack[-0xe8]:8 + (f() * 8))] LOAD 433 (A_Stack[-0xe8]:8 + (f() * 8))
[([(A_Stack[-0xe8]:8 + (f() * 8))] + 1)] LOAD 433 ([(A_Stack[-0xe8]:8 + (f() * 8))] + 1)
f() INT_SEXT f()
(A_Stack[-0xe8]:8 + (f() * 8)) PTRADD A_Stack[-0xe8]:8 f() 8
(RSP + -504) COPY (RSP + -504)
(RSP + -504) COPY (RSP + -504)
((f() - f()) / 8) INT_SRIGHT (f() - f()) 3
(((f() - f()) / 8) * -6148914691236517205) INT_MULT ((f() - f()) / 8) -6148914691236517205
(((f() - f()) / 8) * -6148914691236517205) CAST (((f() - f()) / 8) * -6148914691236517205)
 CBRANCH ((((f() - f()) / 8) * -6148914691236517205) INT_LESSEQUAL f())
0 INT_LESSEQUAL (((f() - f()) / 8) * -6148914691236517205) f()
(f() - f()) INT_SUB f() f()
(RSP + -504) PTRSUB RSP -504
f() INT_ZEXT f()
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f()
(f() / 2147483647) SUBPIECE f() 0
(f() & 2) INT_AND f() 2
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL (f() & 2) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f() - f()) INT_SUB f() f()
 RETURN 1
(RSP + -504) PTRSUB RSP -504
f() COPY f()
void {anonymous}::CommandLineParser::ParseCommandLineOptions(int, const char* const*, const char*) COPY void {anonymous}::CommandLineParser::ParseCommandLineOptions(int, const char* const*, const char*)
0 INT_LESS (((f() - f()) / 8) * -6148914691236517205) f()
(((f() - f()) / 8) * -6148914691236517205) CAST (((f() - f()) / 8) * -6148914691236517205)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
((f() - f()) / 8) INT_SRIGHT (f() - f()) 3
(RSP + -504) PTRSUB RSP -504
f() INT_ZEXT f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
ConsumeAfterOpt && NumPositionalRequired <= PositionalVals.size() COPY ConsumeAfterOpt && NumPositionalRequired <= PositionalVals.size()
 CBRANCH ((((f() - f()) / 8) * -6148914691236517205) INT_LESS f())
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 CALL libcall___assert_fail_thunk ConsumeAfterOpt && NumPositionalRequired <= PositionalVals.size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 1040 void {anonymous}::CommandLineParser::ParseCommandLineOptions(int, const char* const*, const char*)
(((f() - f()) / 8) * -6148914691236517205) INT_MULT ((f() - f()) / 8) -6148914691236517205
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
0 INT_NOTEQUAL f() 2
 CBRANCH (f() INT_EQUAL 0)
[(ARG1 + 208)] LOAD 433 (ARG1 + 208)
0 INT_EQUAL [(ARG1 + 208)] 0
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
(ARG1 + 208) CAST (ARG1 + 208)
 CALL func (RSP + -568) must be specified at least once!
1 COPY 1
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 CALL func (RSP + -584)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 CALL func [(f() + 8)] (RSP + -568) (f(RSP) / 2147483647) (f(RSP) / 2147483647)
(RSP + -584) PTRSUB RSP -584
(RSP + -568) PTRSUB RSP -568
(f() + 8) INT_ADD f() 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f() + 8) CAST (f() + 8)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(RSP + -568) PTRSUB RSP -568
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
must be specified at least once! COPY must be specified at least once!
[(f() + 8)] LOAD 433 (f() + 8)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 CALL func (RSP + -504)
(f() + 40) INT_ADD f() 40
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
0 INT_NOTEQUAL f() [(f() + 40)]
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
[(f() + 40)] LOAD 433 (f() + 40)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(RSP + -232) PTRSUB RSP -232
(f() + 40) CAST (f() + 40)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 RETURN 1
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 CALL func (RSP + -232)
 CALL libcall_exit_thunk 1
(RSP + -376) PTRSUB RSP -376
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 CALL func (RSP + -376)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(RSP + -504) PTRSUB RSP -504
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
f() COPY f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() CALL func
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() CALL func f() : Not enough positional command line arguments specified! 
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
[A_Stack[-0xe8]:8] LOAD 433 A_Stack[-0xe8]:8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
1 COPY 1
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 CALL func f() -help 
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
positional arguments: See:  COPY positional arguments: See: 
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() CALL func f() [A_Stack[-0xe8]:8]
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
-help  COPY -help 
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 BRANCH VZERO
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
0 INT_EQUAL f() 1
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() CALL func f() Must specify at least 
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
f() CALL func f() positional arguments: See: 
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
Must specify at least  COPY Must specify at least 
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
: Not enough positional command line arguments specified!  COPY : Not enough positional command line arguments specified! 
f() CALL func f() f() f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 CBRANCH (f() INT_NOTEQUAL 0)
([(ARG1 + 72)] - [(ARG1 + 64)]) INT_SUB [(ARG1 + 72)] [(ARG1 + 64)]
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
(RSP + -504) PTRSUB RSP -504
 CBRANCH ((([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_LESSEQUAL f())
0 INT_LESSEQUAL (([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) f()
f() INT_ZEXT f()
((f() - f()) / 8) INT_SRIGHT (f() - f()) 3
(RSP + -504) COPY (RSP + -504)
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(RSP + -504) COPY (RSP + -504)
(((f() - f()) / 8) * -6148914691236517205) INT_MULT ((f() - f()) / 8) -6148914691236517205
 CBRANCH ((((f() - f()) / 8) * -6148914691236517205) INT_LESSEQUAL f())
0 INT_LESSEQUAL (((f() - f()) / 8) * -6148914691236517205) f()
(ARG1 + 64) CAST (ARG1 + 64)
(([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_SRIGHT ([(ARG1 + 72)] - [(ARG1 + 64)]) 3
(ARG1 + 72) CAST (ARG1 + 72)
(ARG1 + 64) COPY (ARG1 + 64)
(ARG1 + 64) COPY (ARG1 + 64)
(f() - f()) INT_SUB f() f()
(ARG1 + 64) COPY (ARG1 + 64)
(((f() - f()) / 8) * -6148914691236517205) CAST (((f() - f()) / 8) * -6148914691236517205)
(([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) CAST (([(ARG1 + 72)] - [(ARG1 + 64)]) / 8)
f() COPY f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() CALL func (f(RSP) / 2147483647) (f(RSP) / 4611686014132420609) (ARG1 + 176) (RSP + -536)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(RSP + -536) PTRSUB RSP -536
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f() / 2147483647) SUBPIECE f() 0
[(A_Stack[-0xe8]:8 + (f() * 8))] LOAD 433 (A_Stack[-0xe8]:8 + (f() * 8))
(f() / 2147483647) SUBPIECE f() 8
(RSP + -568) PTRSUB RSP -568
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(A_Stack[-0xe8]:8 + (f() * 8)) PTRADD A_Stack[-0xe8]:8 f() 8
(f() / 2147483647) SUBPIECE f() 8
f() INT_SEXT f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() 1
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -568) [(A_Stack[-0xe8]:8 + (f() * 8))] [(A_Stack[-0xe8]:8 + (f() * 8))]
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
 CALL func f() (f() / 2147483647) (f() / 2147483647) f()
(f() / 2147483647) SUBPIECE f() 8
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (ARG1 + 64)
(f() / 2147483647) SUBPIECE f() 0
(ARG1 + 64) COPY (ARG1 + 64)
(ARG1 + 64) COPY (ARG1 + 64)
(([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_SRIGHT ([(ARG1 + 72)] - [(ARG1 + 64)]) 3
0 INT_NOTEQUAL f() f(ARG1)
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
([(ARG1 + 72)] - [(ARG1 + 64)]) INT_SUB [(ARG1 + 72)] [(ARG1 + 64)]
(ARG1 + 64) CAST (ARG1 + 64)
0 COPY 0
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
0 COPY 0
(ARG1 + 72) CAST (ARG1 + 72)
f() INT_SEXT f()
0 INT_NOTEQUAL [([(A_Stack[-0xe8]:8 + (f() * 8))] + 1)] 0
([(A_Stack[-0xe8]:8 + (f() * 8))] + 1) CAST ([(A_Stack[-0xe8]:8 + (f() * 8))] + 1)
[(A_Stack[-0xe8]:8 + (f() * 8))] LOAD 433 (A_Stack[-0xe8]:8 + (f() * 8))
(A_Stack[-0xe8]:8 + (f() * 8)) PTRADD A_Stack[-0xe8]:8 f() 8
([(A_Stack[-0xe8]:8 + (f() * 8))] + 1) INT_ADD [(A_Stack[-0xe8]:8 + (f() * 8))] 1
[([(A_Stack[-0xe8]:8 + (f() * 8))] + 1)] LOAD 433 ([(A_Stack[-0xe8]:8 + (f() * 8))] + 1)
((f(RSP) / 2147483647) # ((f(RSP) / 2147483647) - [f(RSP)])) COPY ((f(RSP) / 2147483647) # ((f(RSP) / 2147483647) - [f(RSP)]))
((f(RSP) / 2147483647) # ((f(RSP) / 2147483647) - [f(RSP)])) COPY ((f(RSP) / 2147483647) # ((f(RSP) / 2147483647) - [f(RSP)]))
([f(RSP)] # ([f(RSP)] + (f(RSP) / 2147483647))) COPY ([f(RSP)] # ([f(RSP)] + (f(RSP) / 2147483647)))
(ARG1 + 208) CAST (ARG1 + 208)
f() CALL func A_Stack[-0x248]:8 A_Stack[-0x240]:8 A_Stack[-0x248]:8
([f(RSP)] # ([f(RSP)] + (f(RSP) / 2147483647))) COPY ([f(RSP)] # ([f(RSP)] + (f(RSP) / 2147483647)))
 CALL func (RSP + -504) (RSP + -568) (RSP + -568)
(RSP + -504) PTRSUB RSP -504
(RSP + -568) PTRSUB RSP -568
0 COPY 0
(RSP + -504) PTRSUB RSP -504
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 CALL func (RSP + -584) [A_Stack[-0xe8]:8] [A_Stack[-0xe8]:8]
[A_Stack[-0xe8]:8] LOAD 433 A_Stack[-0xe8]:8
(RSP + -584) PTRSUB RSP -584
(f() * 24) INT_MULT f() 24
(RSP + -504) CAST (RSP + -504)
(RSP + -504) PTRSUB RSP -504
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
(((f() * 24) + f()) + 16) INT_ADD ((f() * 24) + f()) 16
((f() * 24) + f()) INT_ADD (f() * 24) f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
[(((f() * 24) + f()) + 16)] LOAD 433 (((f() * 24) + f()) + 16)
(((f() * 24) + f()) + 16) CAST (((f() * 24) + f()) + 16)
(ARG1 + 32) CAST (ARG1 + 32)
0 COPY 0
(((f() * 24) + f()) + 16) CAST (((f() * 24) + f()) + 16)
(((f() * 24) + f()) + 16) INT_ADD ((f() * 24) + f()) 16
0 COPY 0
((f() - f()) / 8) INT_SRIGHT (f() - f()) 3
(f() - f()) INT_SUB f() f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(RSP + -504) COPY (RSP + -504)
(RSP + -504) PTRSUB RSP -504
0 COPY 0
(RSP + -504) COPY (RSP + -504)
0 COPY 0
(f() * 24) INT_MULT f() 24
[(ARG1 + 208)] LOAD 433 (ARG1 + 208)
error - this positional option will never be matched, because it does not Require a value, and a cl::ConsumeAfter option is active! COPY error - this positional option will never be matched, because it does not Require a value, and a cl::ConsumeAfter option is active!
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 RETURN 1
f() COPY f()
(RSP + -504) CAST (RSP + -504)
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
0 COPY 0
idx < size() COPY idx < size()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 CALL libcall_~basic_string_thunk (RSP + -504)
(RSP + -568) PTRSUB RSP -568
idx < size() COPY idx < size()
(((f() - f()) / 8) * -6148914691236517205) CAST (((f() - f()) / 8) * -6148914691236517205)
(((f() - f()) / 8) * -6148914691236517205) INT_MULT ((f() - f()) / 8) -6148914691236517205
(RSP + -584) PTRSUB RSP -584
0 COPY 0
(RSP + -568) PTRSUB RSP -568
f() COPY f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(((f() * 24) + f()) + 16) INT_ADD ((f() * 24) + f()) 16
((f() * 24) + f()) INT_ADD (f() * 24) f()
(((f() * 24) + f()) + 8) PTRADD ((f() * 24) + f()) 1 8
((f() * 24) + f()) CAST ((f() * 24) + f())
(((f() - f()) / 8) * -6148914691236517205) INT_MULT ((f() - f()) / 8) -6148914691236517205
0 COPY 0
(ARG1 + 64) COPY (ARG1 + 64)
 CBRANCH ((((f() - f()) / 8) * -6148914691236517205) INT_LESSEQUAL f())
0 INT_LESSEQUAL (((f() - f()) / 8) * -6148914691236517205) f()
1 COPY 1
[(((f() * 24) + f()) + 16)] LOAD 433 (((f() * 24) + f()) + 16)
(((f() * 24) + f()) + 16) CAST (((f() * 24) + f()) + 16)
0 INT_NOTEQUAL [(ARG1 + 208)] 0
f() INT_ZEXT f()
(((f() - f()) / 8) * -6148914691236517205) CAST (((f() - f()) / 8) * -6148914691236517205)
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
idx < size() COPY idx < size()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
0 COPY 0
f() COPY f()
 CALL libcall___assert_fail_thunk PositionalOpts.size() > 0 && "Cannot specify cl::ConsumeAfter without a positional argument!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 840 void {anonymous}::CommandLineParser::ParseCommandLineOptions(int, const char* const*, const char*)
PositionalOpts.size() > 0 && "Cannot specify cl::ConsumeAfter without a positional argument!" COPY PositionalOpts.size() > 0 && "Cannot specify cl::ConsumeAfter without a positional argument!"
void {anonymous}::CommandLineParser::ParseCommandLineOptions(int, const char* const*, const char*) COPY void {anonymous}::CommandLineParser::ParseCommandLineOptions(int, const char* const*, const char*)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
idx < size() COPY idx < size()
 CBRANCH ((((f() - f()) / 8) * -6148914691236517205) INT_LESSEQUAL f())
0 INT_LESSEQUAL (((f() - f()) / 8) * -6148914691236517205) f()
(((f() - f()) / 8) * -6148914691236517205) INT_MULT ((f() - f()) / 8) -6148914691236517205
((f() - f()) / 8) INT_SRIGHT (f() - f()) 3
(((f() - f()) / 8) * -6148914691236517205) CAST (((f() - f()) / 8) * -6148914691236517205)
f() INT_ZEXT f()
 RETURN 1
(ARG1 + 72) CAST (ARG1 + 72)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
(f() * 24) INT_MULT f() 24
(f() - f()) INT_SUB f() f()
((f() * 24) + f()) INT_ADD (f() * 24) f()
(ARG1 + 64) COPY (ARG1 + 64)
(ARG1 + 64) CAST (ARG1 + 64)
(ARG1 + 64) COPY (ARG1 + 64)
(ARG1 + 64) COPY (ARG1 + 64)
(ARG1 + 64) COPY (ARG1 + 64)
((f() * 24) + f()) INT_ADD (f() * 24) f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
([(ARG1 + 72)] - [(ARG1 + 64)]) INT_SUB [(ARG1 + 72)] [(ARG1 + 64)]
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
[(ARG1 + 64)] CAST [(ARG1 + 64)]
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
0 COPY 0
(ARG1 + 64) CAST (ARG1 + 64)
(([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_SRIGHT ([(ARG1 + 72)] - [(ARG1 + 64)]) 3
(RSP + -504) PTRSUB RSP -504
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() COPY f()
((A_Stack[-0xe0]:8 - A_Stack[-0xe8]:8) / 17179869176) SUBPIECE ((A_Stack[-0xe0]:8 - A_Stack[-0xe8]:8) / 8) 0
([(ARG1 + 64)] + (f() * 8)) CAST ([(ARG1 + 64)] + (f() * 8))
([(ARG1 + 64)] + (f() * 8)) INT_ADD [(ARG1 + 64)] (f() * 8)
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
0 COPY 0
idx < size() COPY idx < size()
 RETURN 1
(ARG1 + 72) CAST (ARG1 + 72)
idx < size() COPY idx < size()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(RSP + -504) PTRSUB RSP -504
0 COPY 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
idx < size() COPY idx < size()
f() COPY f()
1 COPY 1
0 COPY 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(RSP + -504) PTRSUB RSP -504
(f() / 2147483647) SUBPIECE f() 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
((f() * 24) + f()) INT_ADD (f() * 24) f()
(f() * 24) INT_MULT f() 24
 CBRANCH ((([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_LESSEQUAL f())
0 INT_LESSEQUAL (([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) f()
(([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) CAST (([(ARG1 + 72)] - [(ARG1 + 64)]) / 8)
 RETURN 1
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
0 COPY 0
idx < size() COPY idx < size()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
(f() + 1) INT_ADD f() 1
(f() + 1) INT_ADD f() 1
(([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_SRIGHT ([(ARG1 + 72)] - [(ARG1 + 64)]) 3
([(ARG1 + 72)] - [(ARG1 + 64)]) INT_SUB [(ARG1 + 72)] [(ARG1 + 64)]
f() COPY f()
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
 CALL func [([(ARG1 + 64)] + (f() * 8))] [((f() * 24) + f())] [(((f() * 24) + f()) + 8)] [(((f() * 24) + f()) + 16)]
[([(ARG1 + 64)] + (f() * 8))] LOAD 433 ([(ARG1 + 64)] + (f() * 8))
[(((f() * 24) + f()) + 8)] LOAD 433 (((f() * 24) + f()) + 8)
[((f() * 24) + f())] LOAD 433 ((f() * 24) + f())
 CBRANCH ((([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_LESSEQUAL f())
0 INT_LESSEQUAL (([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) f()
(([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) CAST (([(ARG1 + 72)] - [(ARG1 + 64)]) / 8)
(f() + 1) INT_SUB f() 1
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
([(ARG1 + 64)] + (f() * 8)) CAST ([(ARG1 + 64)] + (f() * 8))
(f() / 2147483647) SUBPIECE f() 0
(f() * 8) INT_MULT f() 8
(f() + 1) INT_ADD f() 1
(f() / 2147483647) SUBPIECE f() 0
(ARG1 + 72) CAST (ARG1 + 72)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(((f() * 24) + f()) + 8) PTRADD ((f() * 24) + f()) 1 8
((f() * 24) + f()) CAST ((f() * 24) + f())
(ARG1 + 64) CAST (ARG1 + 64)
(((f() * 24) + f()) + 8) PTRADD ((f() * 24) + f()) 1 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(ARG1 + 64) COPY (ARG1 + 64)
((f() * 24) + f()) CAST ((f() * 24) + f())
([(ARG1 + 64)] + (f() * 8)) INT_ADD [(ARG1 + 64)] (f() * 8)
f() INT_ZEXT f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(f() * 8) INT_MULT f() 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(RSP + -504) PTRSUB RSP -504
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
idx < size() COPY idx < size()
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
(RSP + -504) COPY (RSP + -504)
0 COPY 0
1 COPY 1
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f() / 2147483647) SUBPIECE f() 8
(((f() * 24) + f()) + 16) CAST (((f() * 24) + f()) + 16)
(((f() * 24) + f()) + 16) INT_ADD ((f() * 24) + f()) 16
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(RSP + -504) COPY (RSP + -504)
(RSP + -504) PTRSUB RSP -504
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
(f() | f()) INT_OR f() f()
f() CALL func [([(ARG1 + 64)] + (f() * 8))] [((f() * 24) + f())] [(((f() * 24) + f()) + 8)] [(((f() * 24) + f()) + 16)]
(f() | f()) INT_OR f() f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() COPY f()
(ARG1 + 208) CAST (ARG1 + 208)
[([(ARG1 + 64)] + (f() * 8))] LOAD 433 ([(ARG1 + 64)] + (f() * 8))
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
0 COPY 0
idx < size() COPY idx < size()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
((f() * 24) + f()) INT_ADD (f() * 24) f()
([(ARG1 + 64)] + (f() * 8)) CAST ([(ARG1 + 64)] + (f() * 8))
([(ARG1 + 64)] + (f() * 8)) INT_ADD [(ARG1 + 64)] (f() * 8)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(RSP + -504) PTRSUB RSP -504
(f() * 8) INT_MULT f() 8
(f() + 1) INT_ADD f() 1
0 COPY 0
(((f() - f()) / 8) * -6148914691236517205) CAST (((f() - f()) / 8) * -6148914691236517205)
(((f() - f()) / 8) * -6148914691236517205) INT_MULT ((f() - f()) / 8) -6148914691236517205
 RETURN 1
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
idx < size() COPY idx < size()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
f() COPY f()
([(ARG1 + 64)] + (f() * 8)) INT_ADD [(ARG1 + 64)] (f() * 8)
[((f() * 24) + f())] LOAD 433 ((f() * 24) + f())
((f() * 24) + f()) CAST ((f() * 24) + f())
[(((f() * 24) + f()) + 8)] LOAD 433 (((f() * 24) + f()) + 8)
(((f() * 24) + f()) + 8) PTRADD ((f() * 24) + f()) 1 8
[([(ARG1 + 64)] + (f() * 8))] LOAD 433 ([(ARG1 + 64)] + (f() * 8))
([(ARG1 + 64)] + (f() * 8)) CAST ([(ARG1 + 64)] + (f() * 8))
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() COPY f()
(f() * 8) INT_MULT f() 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
0 INT_EQUAL f() 2
f() CALL func [([(ARG1 + 64)] + (f() * 8))]
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
[([(ARG1 + 64)] + (f() * 8))] LOAD 433 ([(ARG1 + 64)] + (f() * 8))
([(ARG1 + 64)] + (f() * 8)) INT_ADD [(ARG1 + 64)] (f() * 8)
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
([(ARG1 + 64)] + (f() * 8)) CAST ([(ARG1 + 64)] + (f() * 8))
f() CALL func [([(ARG1 + 64)] + (f() * 8))]
 RETURN 1
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
0 INT_EQUAL f() 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
0 INT_EQUAL f() 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f() / 2147483647) SUBPIECE f() 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(RSP + -504) COPY (RSP + -504)
(RSP + -504) COPY (RSP + -504)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(ARG1 + 64) COPY (ARG1 + 64)
(ARG1 + 64) COPY (ARG1 + 64)
(ARG1 + 64) COPY (ARG1 + 64)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 CALL func (RSP + -584)
(ARG1 + 64) COPY (ARG1 + 64)
(f() / 2147483647) SUBPIECE f() 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func [([(ARG1 + 64)] + (f() * 8))] (RSP + -568) f()
(f() / 2147483647) SUBPIECE f() 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f() / 2147483647) SUBPIECE f() 8
(ARG1 + 64) COPY (ARG1 + 64)
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
idx < size() COPY idx < size()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
 CALL func (RSP + -568) error - this positional option will never be matched, because it does not Require a value, and a cl::ConsumeAfter option is active!
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
f() CALL func [([(ARG1 + 64)] + (f() * 8))]
[([(ARG1 + 64)] + (f() * 8))] LOAD 433 ([(ARG1 + 64)] + (f() * 8))
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
([(ARG1 + 64)] + (f() * 8)) INT_ADD [(ARG1 + 64)] (f() * 8)
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(f() * 8) INT_MULT f() 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
([(ARG1 + 64)] + (f() * 8)) CAST ([(ARG1 + 64)] + (f() * 8))
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
0 INT_NOTEQUAL f() 1
f() COPY f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f() / 2147483647) SUBPIECE f() 0
f() COPY f()
(f() | f()) INT_OR f() f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
0 COPY 0
idx < size() COPY idx < size()
 RETURN 1
 CBRANCH (f() INT_NOTEQUAL 45)
0 INT_NOTEQUAL f() 45
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() CALL func (RSP + -600) 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -600) PTRSUB RSP -600
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(ARG1 + 64) COPY (ARG1 + 64)
 BRANCH VZERO
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() CALL func f(ARG1)
(f() / 2147483647) SUBPIECE f() 8
(f() * 24) INT_MULT f() 24
idx < size() COPY idx < size()
0 COPY 0
((f() * 24) + f()) INT_ADD (f() * 24) f()
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
[(((f() * 24) + f()) + 16)] LOAD 433 (((f() * 24) + f()) + 16)
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
((f() - f()) / 8) INT_SRIGHT (f() - f()) 3
(f() - f()) INT_SUB f() f()
idx < size() COPY idx < size()
(f() / 2147483647) SUBPIECE f() 0
0 INT_LESSEQUAL (((f() - f()) / 8) * -6148914691236517205) f()
f() INT_ZEXT f()
(RSP + -504) PTRSUB RSP -504
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
f() COPY f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
f() COPY f()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 RETURN 1
0 COPY 0
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
0 COPY 0
 CBRANCH ((((f() - f()) / 8) * -6148914691236517205) INT_LESSEQUAL f())
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 RETURN 1
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
0 COPY 0
idx < size() COPY idx < size()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(RSP + -504) PTRSUB RSP -504
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 RETURN 1
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
0 COPY 0
(f() / 2147483647) SUBPIECE f() 8
((A_Stack[-0xe0]:8 - A_Stack[-0xe8]:8) / 8) INT_SRIGHT (A_Stack[-0xe0]:8 - A_Stack[-0xe8]:8) 3
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
[(((f() * 24) + f()) + 16)] LOAD 433 (((f() * 24) + f()) + 16)
(((f() * 24) + f()) + 16) CAST (((f() * 24) + f()) + 16)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
((f() * 24) + f()) INT_ADD (f() * 24) f()
(f() * 24) INT_MULT f() 24
idx < size() COPY idx < size()
(f() * 24) INT_MULT f() 24
0 COPY 0
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [f(RSP)] 0
(((f() * 24) + f()) + 16) INT_ADD ((f() * 24) + f()) 16
(RSP + -504) PTRSUB RSP -504
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
VZERO COPY VZERO
(RSP + -504) COPY (RSP + -504)
(RSP + -504) COPY (RSP + -504)
([(ARG1 + 72)] - [(ARG1 + 64)]) INT_SUB [(ARG1 + 72)] [(ARG1 + 64)]
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
((f() - f()) / 8) INT_SRIGHT (f() - f()) 3
(f() - f()) INT_SUB f() f()
0 INT_EQUAL (([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) 0
(([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_SRIGHT ([(ARG1 + 72)] - [(ARG1 + 64)]) 3
(((f() - f()) / 8) * -6148914691236517205) INT_MULT ((f() - f()) / 8) -6148914691236517205
 CBRANCH ((((f() - f()) / 8) * -6148914691236517205) INT_LESSEQUAL f())
0 INT_LESSEQUAL (((f() - f()) / 8) * -6148914691236517205) f()
(((f() - f()) / 8) * -6148914691236517205) CAST (((f() - f()) / 8) * -6148914691236517205)
([f(RSP)] + (f(RSP) / 2147483647)) COPY ([f(RSP)] + (f(RSP) / 2147483647))
[f(RSP)] COPY [f(RSP)]
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() COPY f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 BRANCH VZERO
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(ARG1 + 64) COPY (ARG1 + 64)
(ARG1 + 64) CAST (ARG1 + 64)
(RSP + -600) PTRSUB RSP -600
(((f() * 24) + f()) + 8) PTRADD ((f() * 24) + f()) 1 8
((f() * 24) + f()) CAST ((f() * 24) + f())
 CBRANCH ((([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_EQUAL 0)
 RETURN 1
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
idx < size() COPY idx < size()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
 RETURN 1
0 COPY 0
((f() * 24) + f()) INT_ADD (f() * 24) f()
f() COPY f()
1 COPY 1
(f() + 1) INT_ADD f() 1
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f() | f()) INT_OR f() f()
f() CALL func [[(ARG1 + 64)]] [((f() * 24) + f())] [(((f() * 24) + f()) + 8)] [(((f() * 24) + f()) + 16)]
[(((f() * 24) + f()) + 8)] LOAD 433 (((f() * 24) + f()) + 8)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
(ARG1 + 64) COPY (ARG1 + 64)
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
[[(ARG1 + 64)]] LOAD 433 [(ARG1 + 64)]
(ARG1 + 64) COPY (ARG1 + 64)
(ARG1 + 64) COPY (ARG1 + 64)
[((f() * 24) + f())] LOAD 433 ((f() * 24) + f())
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f() * 24) INT_MULT f() 24
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
([(ARG1 + 72)] - [(ARG1 + 64)]) INT_SUB [(ARG1 + 72)] [(ARG1 + 64)]
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
0 COPY 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) CAST (([(ARG1 + 72)] - [(ARG1 + 64)]) / 8)
(([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_SRIGHT ([(ARG1 + 72)] - [(ARG1 + 64)]) 3
VZERO COPY VZERO
0 INT_LESSEQUAL (([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) f()
f() CALL func (RSP + -600) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(ARG1 + 72) CAST (ARG1 + 72)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
f() COPY f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
idx < size() COPY idx < size()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f() * 8) INT_MULT f() 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
([(ARG1 + 64)] + (f() * 8)) CAST ([(ARG1 + 64)] + (f() * 8))
([(ARG1 + 64)] + (f() * 8)) INT_ADD [(ARG1 + 64)] (f() * 8)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 45)
0 INT_NOTEQUAL f() 45
 CBRANCH ((([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_LESSEQUAL f())
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
 RETURN 1
(ARG1 + 64) COPY (ARG1 + 64)
(ARG1 + 64) CAST (ARG1 + 64)
(ARG1 + 64) COPY (ARG1 + 64)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 BRANCH VZERO
(ARG1 + 72) CAST (ARG1 + 72)
[(((f() * 24) + f()) + 8)] LOAD 433 (((f() * 24) + f()) + 8)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
[((f() * 24) + f())] LOAD 433 ((f() * 24) + f())
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
[([(ARG1 + 64)] + (f() * 8))] LOAD 433 ([(ARG1 + 64)] + (f() * 8))
f() COPY f()
 CALL func [([(ARG1 + 64)] + (f() * 8))] [((f() * 24) + f())] [(((f() * 24) + f()) + 8)] [(((f() * 24) + f()) + 16)]
([f(RSP)] + (f(RSP) / 2147483647)) COPY ([f(RSP)] + (f(RSP) / 2147483647))
[f(RSP)] COPY [f(RSP)]
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [f(RSP)] 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(RSP + -504) PTRSUB RSP -504
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
f() COPY f()
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(ARG1 + 64) COPY (ARG1 + 64)
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
 RETURN 1
f() COPY f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
((f() * 24) + f()) INT_ADD (f() * 24) f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f() * 24) INT_MULT f() 24
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
([(ARG1 + 64)] + (f() * 8)) CAST ([(ARG1 + 64)] + (f() * 8))
([(ARG1 + 64)] + (f() * 8)) INT_ADD [(ARG1 + 64)] (f() * 8)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(RSP + -504) PTRSUB RSP -504
 RETURN 1
[(((f() * 24) + f()) + 16)] LOAD 433 (((f() * 24) + f()) + 16)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f() - f()) INT_SUB f() f()
0 COPY 0
[(ARG1 + 72)] LOAD 433 (ARG1 + 72)
((f() - f()) / 8) INT_SRIGHT (f() - f()) 3
(f() + 1) INT_ADD f() 1
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(RSP + -504) PTRSUB RSP -504
idx < size() COPY idx < size()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(RSP + -232) PTRSUB RSP -232
 RETURN 1
(([(ARG1 + 72)] - [(ARG1 + 64)]) / 8) INT_SRIGHT ([(ARG1 + 72)] - [(ARG1 + 64)]) 3
([(ARG1 + 72)] - [(ARG1 + 64)]) INT_SUB [(ARG1 + 72)] [(ARG1 + 64)]
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
(RSP + -232) PTRSUB RSP -232
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
0 INT_LESSEQUAL (((f() - f()) / 8) * -6148914691236517205) f()
f() INT_ZEXT f()
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
f() COPY f()
(RSP + -504) COPY (RSP + -504)
(RSP + -504) COPY (RSP + -504)
(f() | f()) INT_OR f() f()
(RSP + -232) PTRSUB RSP -232
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 CBRANCH ((((f() - f()) / 8) * -6148914691236517205) INT_LESSEQUAL f())
[((f() * 24) + f())] LOAD 433 ((f() * 24) + f())
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
[(((f() * 24) + f()) + 8)] LOAD 433 (((f() * 24) + f()) + 8)
[(ARG1 + 208)] LOAD 433 (ARG1 + 208)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() COPY f()
(f() * 24) INT_MULT f() 24
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(RSP + -504) PTRSUB RSP -504
f() CALL func [(ARG1 + 208)] [((f() * 24) + f())] [(((f() * 24) + f()) + 8)] [(((f() * 24) + f()) + 16)]
(ARG1 + 64) COPY (ARG1 + 64)
(ARG1 + 64) COPY (ARG1 + 64)
(f() * 8) INT_MULT f() 8
(ARG1 + 64) COPY (ARG1 + 64)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() COPY f()
 RETURN 1
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 RETURN 1
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
f() CALL func [([(ARG1 + 64)] + (f() * 8))]
[([(ARG1 + 64)] + (f() * 8))] LOAD 433 ([(ARG1 + 64)] + (f() * 8))
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(ARG1 + 64) COPY (ARG1 + 64)
 BRANCH VZERO
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
0 INT_NOTEQUAL f() 0
(RSP + -504) PTRSUB RSP -504
(f() * 8) INT_MULT f() 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
A_Stack[-0xe8]:8 CAST A_Stack[-0xe8]:8
f() CALL func [([(ARG1 + 64)] + (f() * 8))]
[([(ARG1 + 64)] + (f() * 8))] LOAD 433 ([(ARG1 + 64)] + (f() * 8))
[(ARG1 + 64)] LOAD 433 (ARG1 + 64)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 RETURN 1
f() COPY f()
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(A_Stack[-0xe0]:8 - A_Stack[-0xe8]:8) INT_SUB A_Stack[-0xe0]:8 A_Stack[-0xe8]:8
f() COPY f()
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
0 INT_NOTEQUAL f() 0
 RETURN 1
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
 CALL func f() ARG1 ARG2 ARG3
6966272 PTRSUB 0 6966272
 RETURN 0
f() CALL func 6966272
0 INT_EQUAL ARG1 0
f() CALL func (RSP + -432) ARG1 ARG1
0 INT_EQUAL ARG2 0
f() CALL libcall_getenv_thunk ARG2
 CALL func (4294967295 & ((A_Stack[-0xc0]:8 - A_Stack[-0xc8]:8) / 8)) A_Stack[-0xc8]:8 ARG3 A_Stack[-0xc8]:8
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG1 INT_EQUAL 0)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CBRANCH (f() INT_NOTEQUAL 0)
((A_Stack[-0xc0]:8 - A_Stack[-0xc8]:8) / 8) INT_SRIGHT (A_Stack[-0xc0]:8 - A_Stack[-0xc8]:8) 3
(RSP + -344) PTRSUB RSP -344
(RSP + -360) PTRSUB RSP -360
0 INT_EQUAL ((A_Stack[-0xc0]:8 - A_Stack[-0xc8]:8) / 8) 0
(RSP + -200) PTRSUB RSP -200
(f() + 40) INT_ADD f() 40
(RSP + -432) PTRSUB RSP -432
 CALL func (RSP + -344)
0 INT_NOTEQUAL 0 [(f() + 40)]
(RSP + -344) PTRSUB RSP -344
(RSP + -200) PTRSUB RSP -200
(RSP + -200) PTRSUB RSP -200
((A_Stack[-0xc0]:8 - A_Stack[-0xc8]:8) / 8) INT_SRIGHT (A_Stack[-0xc0]:8 - A_Stack[-0xc8]:8) 3
[(f() + 40)] LOAD 433 (f() + 40)
(A_Stack[-0xc0]:8 - A_Stack[-0xc8]:8) INT_SUB A_Stack[-0xc0]:8 A_Stack[-0xc8]:8
 CALL func (RSP + -200) (RSP + -360) (RSP + -360)
 CALL func (RSP + -200)
(RSP + -200) PTRSUB RSP -200
(RSP + -200) PTRSUB RSP -200
(RSP + -432) PTRSUB RSP -432
(RSP + -360) PTRSUB RSP -360
 CALL func (RSP + -432) (RSP + -344) (RSP + -344)
(A_Stack[-0xc0]:8 - A_Stack[-0xc8]:8) INT_SUB A_Stack[-0xc0]:8 A_Stack[-0xc8]:8
0 COPY 0
(f() + 40) CAST (f() + 40)
(RSP + -200) COPY (RSP + -200)
(RSP + -200) COPY (RSP + -200)
(RSP + -432) PTRSUB RSP -432
 CALL func (RSP + -360) f() f()
 CBRANCH (((A_Stack[-0xc0]:8 - A_Stack[-0xc8]:8) / 8) INT_EQUAL 0)
(RSP + -200) PTRSUB RSP -200
 CALL func f() A_Stack[-0x160]:8 (RSP + -432) (RSP + -200) 0
 CBRANCH (ARG2 INT_EQUAL 0)
 RETURN 1
0 INT_NOTEQUAL f() 0
envVar && "Environment variable name missing" COPY envVar && "Environment variable name missing"
 CALL libcall___assert_fail_thunk envVar && "Environment variable name missing" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 787 void llvm::cl::ParseEnvironmentOptions(const char*, const char*, const char*)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
void llvm::cl::ParseEnvironmentOptions(const char*, const char*, const char*) COPY void llvm::cl::ParseEnvironmentOptions(const char*, const char*, const char*)
 RETURN 1
 CALL libcall___assert_fail_thunk progName && "Program name not specified" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 786 void llvm::cl::ParseEnvironmentOptions(const char*, const char*, const char*)
void llvm::cl::ParseEnvironmentOptions(const char*, const char*, const char*) COPY void llvm::cl::ParseEnvironmentOptions(const char*, const char*, const char*)
progName && "Program name not specified" COPY progName && "Program name not specified"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
 RETURN 1
(4294967295 & ((A_Stack[-0xc0]:8 - A_Stack[-0xc8]:8) / 8)) INT_AND ((A_Stack[-0xc0]:8 - A_Stack[-0xc8]:8) / 8) 4294967295
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
idx < size() COPY idx < size()
(RSP + -200) PTRSUB RSP -200
 BRANCH VZERO
 CALL func (RSP + -200)
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -344)
(RSP + -344) PTRSUB RSP -344
 CALLIND [[ARG1]] ARG1 ARG2 ARG3 ARG4 ARG5 ARG6
 CALL func ARG1 (RSP + -56) ARG3 ARG4
 CALL func ARG1 (RSP + -56) ARG3 ARG4
0 INT_NOTEQUAL ARG7 1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG7 INT_NOTEQUAL 1)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) CAST (f() + 40)
 BRANCHIND f()
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CBRANCH (1 INT_SLESS [(ARG1 + 8)])
may only occur zero or one times! COPY may only occur zero or one times!
 CALL func (RSP + -56) may only occur zero or one times!
(RSP + -56) PTRSUB RSP -56
[ARG1] CAST [ARG1]
(RSP + -56) PTRSUB RSP -56
[[ARG1]] LOAD 433 [ARG1]
 BRANCH VZERO
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 1)
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + 1) INT_ADD [(ARG1 + 8)] 1
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (1 INT_SLESS [(ARG1 + 8)])
 CALL func (RSP + -56) must occur exactly one time!
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
must occur exactly one time! COPY must occur exactly one time!
 BRANCH VZERO
0 INT_SLESS 1 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_SLESS 1 [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 32) INT_ADD ARG1 32
 RETURN 0 ([(ARG1 + 32)] + 6)
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
(ARG1 + 32) CAST (ARG1 + 32)
([(ARG1 + 32)] + 6) INT_ADD [(ARG1 + 32)] 6
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 40) INT_ADD ARG1 40
 CALL func [(ARG1 + 40)] [(ARG1 + 48)] ARG2 ([(ARG1 + 32)] + 6)
f() CALL func f() 4705704
(ARG1 + 24) CAST (ARG1 + 24)
(ARG1 + 48) CAST (ARG1 + 48)
(ARG1 + 32) CAST (ARG1 + 32)
(ARG1 + 40) CAST (ARG1 + 40)
 RETURN 0
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
4705704 PTRSUB 0 4705704
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
(ARG1 + 32) CAST (ARG1 + 32)
([(ARG1 + 32)] + 6) INT_ADD [(ARG1 + 32)] 6
 CALL func f() [(ARG1 + 24)] [(ARG1 + 32)] f()
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
f() CALL func
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG5 COPY ARG5
ARG6 COPY ARG6
 STORE 433 ARG7 2
 STORE 433 ARG7 1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
ARG6 COPY ARG6
(f() + 40) CAST (f() + 40)
A_Stack[-0x2e8]:8 COPY A_Stack[-0x2e8]:8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_EQUAL ARG6 A_Stack[-0x2e0]:8
0 INT_NOTEQUAL f() [(f() + 40)]
 CBRANCH (ARG6 INT_EQUAL A_Stack[-0x2e0]:8)
ARG5 COPY ARG5
 CBRANCH f()
A_Stack[-0x2e0]:8 COPY A_Stack[-0x2e0]:8
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH f()
4703301 PTRSUB 0 4703301
 CALL func (RSP + -744) 4703301
(RSP + -744) PTRSUB RSP -744
A_Stack[-0x2e8]:8 COPY A_Stack[-0x2e8]:8
A_Stack[-0x2e0]:8 COPY A_Stack[-0x2e0]:8
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_memcmp_thunk f(ARG5) f() f()
0 COPY 0
 BRANCH VZERO
 CBRANCH f()
' is invalid value for boolean argument! Try 0 or 1 COPY ' is invalid value for boolean argument! Try 0 or 1
 BRANCH VZERO
4705804 PTRSUB 0 4705804
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -88) (RSP + -152) (RSP + -120) (RSP + -152)
(RSP + -120) PTRSUB RSP -120
0 COPY 0
(RSP + -88) PTRSUB RSP -88
(RSP + -152) PTRSUB RSP -152
(RSP + -1016) PTRSUB RSP -1016
(RSP + -600) PTRSUB RSP -600
 CALL func (RSP + -120) ' is invalid value for boolean argument! Try 0 or 1
 CALL func (RSP + -600)
 CALL func (RSP + -152) 4705804 (RSP + -1016)
(RSP + -152) PTRSUB RSP -152
(RSP + -88) PTRSUB RSP -88
f() CALL func f(ARG2) (RSP + -88) f() f()
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH f()
4705721 PTRSUB 0 4705721
f(ARG6) COPY f(ARG6)
f() COPY f()
0 INT_EQUAL f(ARG6) f()
(RSP + -696) PTRSUB RSP -696
 CALL func (RSP + -696) 4705721
f() COPY f()
 CBRANCH (f(ARG6) INT_EQUAL f())
 BRANCH VZERO
f() COPY f()
f(ARG5) COPY f(ARG5)
f() COPY f()
 CBRANCH f()
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
f() CALL libcall_memcmp_thunk f(ARG5) f() f()
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 RETURN 0 f()
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (f() INT_EQUAL 0)
f() COPY f()
f() COPY f()
0 COPY 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
f(ARG5) COPY f(ARG5)
 CBRANCH f()
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH (f(ARG6) INT_EQUAL f())
0 INT_NOTEQUAL f() 0
f() COPY f()
f(ARG5) COPY f(ARG5)
0 INT_EQUAL f() 0
f() COPY f()
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
f() CALL libcall_memcmp_thunk f(ARG5) f() f()
0 INT_EQUAL A_Stack[-0x2e0]:8 0
0 INT_NOTEQUAL f() 0
ARG5 COPY ARG5
 CBRANCH (A_Stack[-0x2e0]:8 INT_EQUAL 0)
A_Stack[-0x2e0]:8 COPY A_Stack[-0x2e0]:8
A_Stack[-0x2e8]:8 COPY A_Stack[-0x2e8]:8
 CBRANCH f()
f() COPY f()
(RSP + -648) PTRSUB RSP -648
 CBRANCH f()
f() COPY f()
FALSE COPY FALSE
f(ARG6) COPY f(ARG6)
f() COPY f()
f(ARG5) COPY f(ARG5)
 CALL func (RSP + -648) FALSE
0 INT_EQUAL f(ARG6) f()
f() COPY f()
f(ARG5) COPY f(ARG5)
4705726 PTRSUB 0 4705726
f() COPY f()
(RSP + -680) PTRSUB RSP -680
f() COPY f()
f() COPY f()
 CBRANCH f()
0 INT_EQUAL f(ARG6) f()
 CALL func (RSP + -680) 4705726
f(ARG6) COPY f(ARG6)
f() COPY f()
 CBRANCH (f(ARG6) INT_EQUAL f())
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
0 COPY 0
f() CALL libcall_memcmp_thunk f(ARG5) f() f()
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
f() COPY f()
f(ARG5) COPY f(ARG5)
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
f() COPY f()
f(ARG5) COPY f(ARG5)
0 INT_EQUAL f(ARG6) f()
 BRANCH VZERO
 CALL func (RSP + -664) false
f() COPY f()
0 COPY 0
f() COPY f()
false COPY false
f() COPY f()
f() COPY f()
(RSP + -664) PTRSUB RSP -664
 CBRANCH (f(ARG6) INT_EQUAL f())
f(ARG6) COPY f(ARG6)
 CBRANCH (f(ARG6) INT_EQUAL f())
f(ARG5) COPY f(ARG5)
f() COPY f()
f() COPY f()
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
0 INT_EQUAL f(ARG6) f()
 CALL func (RSP + -632) False
f() COPY f()
 CBRANCH (f(ARG6) INT_EQUAL f())
(RSP + -632) PTRSUB RSP -632
f() COPY f()
f(ARG5) COPY f(ARG5)
False COPY False
f() COPY f()
f(ARG6) COPY f(ARG6)
 CBRANCH f()
f() COPY f()
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
f(ARG5) COPY f(ARG5)
f() COPY f()
f() COPY f()
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
f() CALL libcall_memcmp_thunk f(ARG5) f() f()
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
0 COPY 0
f() CALL libcall_memcmp_thunk f(ARG5) f() f()
f() COPY f()
f(ARG6) COPY f(ARG6)
f(ARG5) COPY f(ARG5)
0 INT_EQUAL f(ARG6) f()
 CALL func (RSP + -728) 4705711
f() COPY f()
4705711 PTRSUB 0 4705711
f() COPY f()
(RSP + -728) PTRSUB RSP -728
f() COPY f()
 CBRANCH f()
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 BRANCH VZERO
0 COPY 0
f() CALL libcall_memcmp_thunk f(ARG5) f() f()
 CBRANCH (f(ARG6) INT_EQUAL f())
f(ARG5) COPY f(ARG5)
0 INT_EQUAL f() 0
f() COPY f()
0 INT_NOTEQUAL f() 0
f() COPY f()
 CBRANCH (f(ARG6) INT_EQUAL f())
f() COPY f()
f() COPY f()
f(ARG5) COPY f(ARG5)
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
0 COPY 0
 BRANCH VZERO
1 COPY 1
f() COPY f()
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
f(ARG5) COPY f(ARG5)
f() COPY f()
 BRANCH VZERO
f() CALL libcall_memcmp_thunk ARG5 A_Stack[-0x2e8]:8 A_Stack[-0x2e0]:8
0 COPY 0
f() COPY f()
f() COPY f()
f() COPY f()
0 INT_EQUAL f(ARG6) f()
f(ARG6) COPY f(ARG6)
4705746 PTRSUB 0 4705746
f() COPY f()
(RSP + -616) PTRSUB RSP -616
 CALL func (RSP + -616) 4705746
f(ARG5) COPY f(ARG5)
f() CALL libcall_memcmp_thunk f(ARG5) f() f()
 BRANCH VZERO
0 COPY 0
f() COPY f()
(RSP + -712) PTRSUB RSP -712
f() COPY f()
f() COPY f()
f(ARG6) COPY f(ARG6)
f() COPY f()
4705716 PTRSUB 0 4705716
f(ARG5) COPY f(ARG5)
0 INT_EQUAL f(ARG6) f()
 CALL func (RSP + -712) 4705716
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func [ARG1] [(ARG1 + 8)] ARG2 (RSP + -24)
 STORE 433 ARG3 (A_Stack[-0x18]:8 / 2147483647)
[40] LOAD 433 40
 CBRANCH (f() INT_EQUAL 0)
~(~(f())) COPY ~(~(f()))
(A_Stack[-0x18]:8 / 2147483647) SUBPIECE A_Stack[-0x18]:8 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f() 0
 CBRANCH ~(f())
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
40 INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_EQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
~(f()) BOOL_NEGATE f()
(RSP + -24) PTRSUB RSP -24
40 CAST 40
~(~(f())) BOOL_NEGATE ~(f())
0 INT_EQUAL [(FS_OFFSET + 40)] [40]
 CBRANCH ((A_Stack[-0x18]:8 / 2147483647) INT_EQUAL A_Stack[-0x18]:8)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 RETURN 1
 RETURN 0 ~(~(f()))
 CALL libcall___stack_chk_fail_thunk
0 INT_EQUAL (A_Stack[-0x18]:8 / 2147483647) A_Stack[-0x18]:8
(A_Stack[-0x18]:8 / 2147483647) INT_SEXT (A_Stack[-0x18]:8 / 2147483647)
ARG5 COPY ARG5
ARG6 COPY ARG6
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
f() CALL func (RSP + -168) 0 ARG7
ARG4 COPY ARG4
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -168) PTRSUB RSP -168
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
 CALL func (RSP + -40) (RSP + -104) (RSP + -72) (RSP + -104)
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -104) 4705804 (RSP + -168)
(RSP + -104) PTRSUB RSP -104
(RSP + -104) PTRSUB RSP -104
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -120)
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -72) ' value invalid for integer argument!
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 BRANCH VZERO
4705804 PTRSUB 0 4705804
' value invalid for integer argument! COPY ' value invalid for integer argument!
0 COPY 0
f() CALL func ARG2 (RSP + -40) A_Stack[-0x78]:8 A_Stack[-0x70]:8
(RSP + -72) PTRSUB RSP -72
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
f() CALL func [ARG1] [(ARG1 + 8)] ARG2 (RSP + -24)
 STORE 433 ARG3 (A_Stack[-0x18]:8 / 2147483647)
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
~(~(f())) BOOL_NEGATE ~(f())
40 INT_ADD 0 40
~(f()) BOOL_NEGATE f()
0 INT_EQUAL [(FS_OFFSET + 40)] [40]
(RSP + -24) PTRSUB RSP -24
(FS_OFFSET + 40) INT_ADD 0 40
40 CAST 40
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL f() 0
 CBRANCH ~(f())
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
~(~(f())) COPY ~(~(f()))
[40] LOAD 433 40
 CBRANCH ([(FS_OFFSET + 40)] INT_EQUAL [40])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
1 COPY 1
0 INT_EQUAL (A_Stack[-0x18]:8 & 4294967295) A_Stack[-0x18]:8
(A_Stack[-0x18]:8 & 4294967295) INT_AND A_Stack[-0x18]:8 4294967295
 CBRANCH ((A_Stack[-0x18]:8 & 4294967295) INT_EQUAL A_Stack[-0x18]:8)
 BRANCH VZERO
(A_Stack[-0x18]:8 / 2147483647) SUBPIECE A_Stack[-0x18]:8 0
0 COPY 0
 RETURN 0 ~(~(f()))
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
ARG5 COPY ARG5
ARG6 COPY ARG6
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
f() CALL func (RSP + -168) 0 ARG7
ARG4 COPY ARG4
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -168) PTRSUB RSP -168
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 BRANCH VZERO
4705804 PTRSUB 0 4705804
' value invalid for uint argument! COPY ' value invalid for uint argument!
0 COPY 0
f() CALL func ARG2 (RSP + -40) A_Stack[-0x78]:8 A_Stack[-0x70]:8
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -40) (RSP + -104) (RSP + -72) (RSP + -104)
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -104) 4705804 (RSP + -168)
(RSP + -104) PTRSUB RSP -104
(RSP + -104) PTRSUB RSP -104
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -120)
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -72) ' value invalid for uint argument!
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
f() CALL func [ARG1] [(ARG1 + 8)] ARG2 (RSP + -24)
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 STORE 433 ARG3 A_Stack[-0x18]:8
40 CAST 40
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
-1 COPY -1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -24) PTRSUB RSP -24
-1 BOOL_NEGATE 0
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 RETURN 0 -1
 CALL libcall___stack_chk_fail_thunk
ARG5 COPY ARG5
ARG6 COPY ARG6
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
f() CALL func (RSP + -168) 0 ARG7
ARG4 COPY ARG4
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -168) PTRSUB RSP -168
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
 CALL func (RSP + -40) (RSP + -104) (RSP + -72) (RSP + -104)
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -104) 4705804 (RSP + -168)
(RSP + -104) PTRSUB RSP -104
(RSP + -104) PTRSUB RSP -104
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -120)
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -72) ' value invalid for uint argument!
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 BRANCH VZERO
4705804 PTRSUB 0 4705804
' value invalid for uint argument! COPY ' value invalid for uint argument!
0 COPY 0
f() CALL func ARG2 (RSP + -40) A_Stack[-0x78]:8 A_Stack[-0x70]:8
(RSP + -72) PTRSUB RSP -72
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 ARG2 ARG3 ARG2
 CALL func ARG1 32
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG1 COPY ARG1
ARG2 COPY ARG2
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -88) PTRSUB RSP -88
(f() + 40) CAST (f() + 40)
 STORE 433 ARG4 f()
f() CALL func (RSP + -88)
(RSP + -88) PTRSUB RSP -88
f() CALL func (RSP + -248)
 CALL func (RSP + -88)
f() CALL libcall_strtod_thunk f() (RSP + -216)
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -88) f() f() f()
f() COPY f()
f() CAST f()
(RSP + -216) PTRSUB RSP -216
(RSP + -248) PTRSUB RSP -248
 CBRANCH ([A_Stack[-0xd8]:8] INT_EQUAL 0)
0 INT_EQUAL [A_Stack[-0xd8]:8] 0
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
[A_Stack[-0xd8]:8] LOAD 433 A_Stack[-0xd8]:8
f() CALL func (RSP + -248)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -248) PTRSUB RSP -248
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
(RSP + -248) PTRSUB RSP -248
 CALL func (RSP + -120) (RSP + -184) (RSP + -152) (RSP + -184)
(RSP + -184) PTRSUB RSP -184
(RSP + -152) PTRSUB RSP -152
(RSP + -184) PTRSUB RSP -184
 CALL func (RSP + -184) 4705804 (RSP + -248)
(RSP + -120) PTRSUB RSP -120
(RSP + -152) PTRSUB RSP -152
 BRANCH VZERO
0 COPY 0
 CALL func (RSP + -200)
f() CALL func ARG1 (RSP + -120) A_Stack[-0xc8]:8 A_Stack[-0xc0]:8
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -152) ' value invalid for floating point argument!
4705804 PTRSUB 0 4705804
(RSP + -120) PTRSUB RSP -120
' value invalid for floating point argument! COPY ' value invalid for floating point argument!
 CALL func ARG2 ARG5 ARG6 ARG7
 RETURN 0
f() CALL func ARG2 ARG5 ARG6 (RSP + -24)
 STORE 433 ARG7 A_Stack[-0x18]:8
40 INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_EQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
40 CAST 40
-1 BOOL_NEGATE 0
0 INT_EQUAL [(FS_OFFSET + 40)] [40]
(RSP + -24) PTRSUB RSP -24
-1 COPY -1
[40] LOAD 433 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 RETURN 0 -1
 CALL libcall___stack_chk_fail_thunk
A_Stack[-0x18]:8 FLOAT2FLOAT A_Stack[-0x18]:8
VZERO CALLIND [([ARG1] + 16)] ARG1 ARG2 ARG1
[ARG1] LOAD 433 ARG1
VZERO CALLIND [([ARG1] + 24)] ARG1 f() ARG1 f()
[ARG1] LOAD 433 ARG1
f() CALL libcall_strcmp_thunk VZERO ARG2
([ARG1] + 16) INT_ADD [ARG1] 16
0 INT_EQUAL f() VZERO
0 COPY 0
[([ARG1] + 16)] LOAD 433 ([ARG1] + 16)
 CBRANCH (f() INT_EQUAL VZERO)
([ARG1] + 16) CAST ([ARG1] + 16)
 CBRANCH (f() INT_EQUAL 0)
f() COPY f()
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
VZERO COPY VZERO
 RETURN 0 VZERO
 RETURN 0 f()
[([ARG1] + 24)] LOAD 433 ([ARG1] + 24)
([ARG1] + 24) CAST ([ARG1] + 24)
VZERO CAST VZERO
0 INT_EQUAL f() 0
([ARG1] + 24) INT_ADD [ARG1] 24
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
VZERO CALLIND [([ARG1] + 16)] ARG1
[ARG1] LOAD 433 ARG1
VZERO CALLIND [([ARG1] + 24)] ARG1 f() ARG1 f()
[ARG1] LOAD 433 ARG1
VZERO CALLIND [([ARG1] + 24)] ARG1 f() ARG1 f()
VZERO CALLIND [([ARG1] + 16)] ARG1
f() CALL func ARG2
(ARG2 + 32) INT_ADD ARG2 32
(ARG2 + 24) INT_ADD ARG2 24
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 INT_EQUAL f() [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
([ARG1] + 16) CAST ([ARG1] + 16)
([ARG1] + 16) CAST ([ARG1] + 16)
(ARG2 + 32) CAST (ARG2 + 32)
([ARG1] + 16) INT_ADD [ARG1] 16
[([ARG1] + 16)] LOAD 433 ([ARG1] + 16)
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
([ARG1] + 16) INT_ADD [ARG1] 16
0 COPY 0
([(ARG2 + 32)] + 6) INT_ADD [(ARG2 + 32)] 6
0 COPY 0
[([ARG1] + 16)] LOAD 433 ([ARG1] + 16)
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL VZERO)
0 INT_NOTEQUAL f() VZERO
 CBRANCH (f() INT_NOTEQUAL VZERO)
0 INT_NOTEQUAL f() VZERO
[([ARG1] + 24)] LOAD 433 ([ARG1] + 24)
(f() + 1) INT_ADD f() 1
(f() + 8) INT_ADD f() 8
 BRANCH VZERO
(RSP + -40) PTRSUB RSP -40
([ARG1] + 24) CAST ([ARG1] + 24)
f(ARG2 , RSP) CAST f(ARG2 , RSP)
VZERO CAST VZERO
[f(ARG2 , RSP)] LOAD 433 f(ARG2 , RSP)
f(ARG2 , RSP) CALL func (RSP + -40)
([ARG1] + 24) INT_ADD [ARG1] 24
f() CALL libcall_strlen_thunk VZERO
 RETURN 0 f(ARG2 , RSP)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
[f(ARG2 , RSP)] LOAD 433 f(ARG2 , RSP)
f(ARG2 , RSP) CALL func (RSP + -40)
([ARG1] + 24) CAST ([ARG1] + 24)
[([ARG1] + 24)] LOAD 433 ([ARG1] + 24)
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
(f() + 8) INT_ADD f() 8
f(ARG2 , RSP) CAST f(ARG2 , RSP)
VZERO CAST VZERO
f() CALL libcall_strlen_thunk VZERO
(RSP + -40) PTRSUB RSP -40
([ARG1] + 24) INT_ADD [ARG1] 24
VZERO CALLIND [([ARG1] + 24)] ARG1 f() ARG1 f()
[ARG1] LOAD 433 ARG1
VZERO CALLIND [([ARG1] + 16)] ARG1
VZERO CALLIND [([ARG1] + 24)] ARG1 f() ARG1 f()
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
VZERO CALLIND [([ARG1] + 32)] ARG1 f() ARG1
[ARG1] LOAD 433 ARG1
VZERO CALLIND [([ARG1] + 32)] ARG1 f() ARG1 f()
[ARG1] LOAD 433 ARG1
VZERO CALLIND [([ARG1] + 24)] ARG1 f() ARG1
[ARG1] LOAD 433 ARG1
VZERO CALLIND [([ARG1] + 16)] ARG1
[ARG1] LOAD 433 ARG1
(ARG2 + 24) INT_ADD ARG2 24
(ARG2 + 40) INT_ADD ARG2 40
(ARG2 + 40) INT_ADD ARG2 40
(ARG2 + 48) INT_ADD ARG2 48
f() CALL func ARG2
(ARG2 + 32) INT_ADD ARG2 32
(ARG2 + 32) INT_ADD ARG2 32
(ARG2 + 48) INT_ADD ARG2 48
(ARG2 + 48) INT_ADD ARG2 48
 CALL func f() f() ARG3
(ARG3 - f()) INT_SUB ARG3 f()
 CALL func [(ARG2 + 40)] [(ARG2 + 48)] ARG3 ([(ARG2 + 32)] + 6)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL VZERO)
0 INT_NOTEQUAL f() VZERO
f() CALL func f() -
- COPY -
([ARG1] + 24) INT_ADD [ARG1] 24
([ARG1] + 24) CAST ([ARG1] + 24)
VZERO CAST VZERO
[([ARG1] + 24)] LOAD 433 ([ARG1] + 24)
 CALL func f() VZERO f()
([ARG1] + 32) CAST ([ARG1] + 32)
([ARG1] + 32) INT_ADD [ARG1] 32
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
 CALL func (RSP + -56) VZERO VZERO
[([ARG1] + 32)] LOAD 433 ([ARG1] + 32)
 CALL libcall_strlen_thunk VZERO
(RSP + -56) PTRSUB RSP -56
f() CALL func
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (f() INT_NOTEQUAL VZERO)
f() CALL func f() (4294967295 & ((ARG3 - f()) + -8))
-    COPY -   
([ARG1] + 32) INT_ADD [ARG1] 32
0 INT_NOTEQUAL f() VZERO
[([ARG1] + 32)] LOAD 433 ([ARG1] + 32)
 CALL func f()
((ARG3 - f()) + -8) INT_SUB (ARG3 - f()) -8
f() CALL func
VZERO CAST VZERO
= COPY =
f() CALL func
([ARG1] + 24) INT_ADD [ARG1] 24
([ARG1] + 24) CAST ([ARG1] + 24)
(4294967295 & ((ARG3 - f()) + -8)) INT_AND ((ARG3 - f()) + -8) 4294967295
[([ARG1] + 24)] LOAD 433 ([ARG1] + 24)
 CALL func f() VZERO
([ARG1] + 24) CAST ([ARG1] + 24)
f() CALL func f() VZERO
([ARG1] + 24) INT_ADD [ARG1] 24
([ARG1] + 32) CAST ([ARG1] + 32)
[([ARG1] + 24)] LOAD 433 ([ARG1] + 24)
f() CALL func f() =
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
f() CALL func f() -   
f() CALL libcall_strlen_thunk VZERO
([ARG1] + 16) CAST ([ARG1] + 16)
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
(ARG2 + 48) CAST (ARG2 + 48)
0 INT_NOTEQUAL [(ARG2 + 48)] 0
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
0 COPY 0
(ARG2 + 32) CAST (ARG2 + 32)
0 COPY 0
(ARG2 + 48) CAST (ARG2 + 48)
(ARG2 + 24) CAST (ARG2 + 24)
f() CALL func f() 4705704
[(ARG2 + 48)] LOAD 433 (ARG2 + 48)
([ARG1] + 16) CAST ([ARG1] + 16)
(ARG2 + 40) CAST (ARG2 + 40)
([ARG1] + 16) INT_ADD [ARG1] 16
 CALL func f() [(ARG2 + 24)] [(ARG2 + 32)] f()
[([ARG1] + 16)] LOAD 433 ([ARG1] + 16)
[(ARG2 + 40)] LOAD 433 (ARG2 + 40)
f() CALL func
[(ARG2 + 48)] LOAD 433 (ARG2 + 48)
([ARG1] + 16) INT_ADD [ARG1] 16
 CBRANCH ([(ARG2 + 48)] INT_NOTEQUAL 0)
[([ARG1] + 16)] LOAD 433 ([ARG1] + 16)
4705704 PTRSUB 0 4705704
(ARG2 + 32) CAST (ARG2 + 32)
([(ARG2 + 32)] + 6) INT_ADD [(ARG2 + 32)] 6
f() CALL func f() [(ARG2 + 40)] [(ARG2 + 48)] f()
[(ARG2 + 40)] LOAD 433 (ARG2 + 40)
f() CALL func
4705945 PTRSUB 0 4705945
(ARG2 + 40) CAST (ARG2 + 40)
f() CALL func f() 4705945
 CALL func f() 10
(ARG2 + 48) CAST (ARG2 + 48)
[(ARG2 + 48)] LOAD 433 (ARG2 + 48)
(ARG2 + 32) INT_ADD ARG2 32
(ARG2 + 32) INT_ADD ARG2 32
(ARG2 + 24) INT_ADD ARG2 24
VZERO CALLIND [[ARG3]] ARG3
[ARG3] LOAD 433 ARG3
[ARG4] LOAD 433 ARG4
VZERO CALLIND [[ARG4]] ARG4
(ARG5 - ([(ARG2 + 32)] / 2147483647)) INT_SUB ARG5 ([(ARG2 + 32)] / 2147483647)
 CALLIND [([ARG1] + 48)] ARG1 f() ARG1 f()
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
VZERO CALLIND [([ARG1] + 24)] ARG1 f() ARG1 f()
 CALLIND [([ARG1] + 48)] ARG1 f() ARG1 f()
VZERO CALLIND [([ARG1] + 24)] ARG1 f() ARG1 f()
VZERO CALLIND [([ARG1] + 16)] ARG1
[ARG1] LOAD 433 ARG1
VZERO CALLIND [([ARG1] + 24)] ARG1 f() ARG1 f()
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[([ARG1] + 16)] LOAD 433 ([ARG1] + 16)
 CBRANCH (f() INT_EQUAL VZERO)
(ARG2 + 24) CAST (ARG2 + 24)
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
0 INT_EQUAL f() VZERO
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
4705704 PTRSUB 0 4705704
(ARG2 + 32) CAST (ARG2 + 32)
 CALL func f() (ARG5 - ([(ARG2 + 32)] / 2147483647))
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
f() CALL func
f() CALL func f() 4705704
0 COPY 0
([ARG1] + 16) CAST ([ARG1] + 16)
([(ARG2 + 32)] / 2147483647) SUBPIECE [(ARG2 + 32)] 0
f() CALL func
(ARG2 + 32) CAST (ARG2 + 32)
([ARG1] + 16) INT_ADD [ARG1] 16
 CALL func f() [(ARG2 + 24)] [(ARG2 + 32)] f()
[ARG3] CAST [ARG3]
= *unknown option value*  COPY = *unknown option value* 
f() CALL func
[[ARG3]] LOAD 433 [ARG3]
 RETURN 0
 CALL func f() = *unknown option value* 
 CBRANCH (VZERO INT_EQUAL 0)
 RETURN 0
([ARG1] + 48) INT_ADD [ARG1] 48
0 INT_EQUAL VZERO 0
[([ARG1] + 48)] LOAD 433 ([ARG1] + 48)
([ARG1] + 48) CAST ([ARG1] + 48)
 CBRANCH (f() INT_EQUAL VZERO)
[[ARG4]] LOAD 433 [ARG4]
([ARG1] + 48) CAST ([ARG1] + 48)
[([ARG1] + 48)] LOAD 433 ([ARG1] + 48)
([ARG1] + 48) INT_ADD [ARG1] 48
[ARG4] CAST [ARG4]
0 INT_EQUAL VZERO 0
 CBRANCH (VZERO INT_EQUAL 0)
 CBRANCH (f() INT_LESS 8)
0 COPY 0
(8 - f()) INT_SUB 8 f()
 BRANCH VZERO
([ARG1] + 24) INT_ADD [ARG1] 24
([ARG1] + 24) CAST ([ARG1] + 24)
0 INT_EQUAL f() VZERO
(f() & 4294967295) INT_AND f() 4294967295
([ARG1] + 24) CAST ([ARG1] + 24)
f() CALL func
f() CALL func
[([ARG1] + 24)] LOAD 433 ([ARG1] + 24)
 CALL func f() 4705983
 BRANCH VZERO
(f() + 1) INT_ADD f() 1
 CALL func f() VZERO
 CALL func f() (default: 
f() CALL libcall_strlen_thunk VZERO
4705983 PTRSUB 0 4705983
0 COPY 0
([ARG1] + 24) INT_ADD [ARG1] 24
4705968 PTRSUB 0 4705968
f() CALL func
VZERO CAST VZERO
[([ARG1] + 24)] LOAD 433 ([ARG1] + 24)
f() CALL func f() 4705968
(default:  COPY (default: 
f() CALL func f() (f() & 4294967295)
0 INT_LESS f() 8
([ARG1] + 24) CAST ([ARG1] + 24)
[([ARG1] + 24)] LOAD 433 ([ARG1] + 24)
(f() + 1) INT_ADD f() 1
 BRANCH VZERO
([ARG1] + 24) INT_ADD [ARG1] 24
 BRANCH VZERO
 CALL func f() VZERO
f() CALL func
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
 CBRANCH ([(ARG1 + 12)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 12)] 0
(ARG1 + 12) CAST (ARG1 + 12)
const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = llvm::cl::boolOrDefault] COPY const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = llvm::cl::boolOrDefault]
 RETURN 0 (ARG1 + 8)
 RETURN 1
Valid && "invalid option value" COPY Valid && "invalid option value"
 CALL libcall___assert_fail_thunk Valid && "invalid option value" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 411 const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = llvm::cl::boolOrDefault]
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
(ARG1 + 12) INT_ADD ARG1 12
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
 RETURN 0 [(ARG1 + 12)]
[(ARG1 + 12)] COPY [(ARG1 + 12)]
(ARG1 + 12) CAST (ARG1 + 12)
 CALL func ARG1 ARG2 ARG5 ARG2
f() CALL func ARG4
f() CALL func ARG4
 CALL func (RSP + -120) ARG3 ARG3
4705968 PTRSUB 0 4705968
 CALL func f() 4705983
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -72) PTRSUB RSP -72
f() CALL libcall_size_thunk
f() CALL func
 CALL func f() (default: 
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 CALL func (RSP + -120) (RSP + -72) (RSP + -72)
(f() + 40) INT_ADD f() 40
f() CALL func
0 INT_NOTEQUAL f() [(f() + 40)]
 CALL func (RSP + -120)
(f() + 40) CAST (f() + 40)
(RSP + -120) PTRSUB RSP -120
(default:  COPY (default: 
 CALL libcall_basic_string_thunk
 CALL func f() (RSP + -72) f()
[(f() + 40)] LOAD 433 (f() + 40)
f() CALL func f() f()
 CALL libcall_~basic_string_thunk (RSP + -72)
(RSP + -72) PTRSUB RSP -72
(RSP + -120) PTRSUB RSP -120
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(RSP + -72) PTRSUB RSP -72
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func
0 INT_LESS f() 8
(RSP + -120) PTRSUB RSP -120
4705983 PTRSUB 0 4705983
f() CALL func f() 4705968
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_LESS 8)
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
f() CALL func
 BRANCH VZERO
f() CAST f()
 CALL func f() *no default*
[f()] LOAD 433 f()
 CALL func f() [f()]
f() CALL func
*no default* COPY *no default*
0 COPY 0
 BRANCH VZERO
f() CALL libcall_size_thunk
(8 - f()) INT_SUB 8 f()
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 12) CAST (ARG1 + 12)
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
 CBRANCH ([(ARG1 + 12)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 12)] 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = int] COPY const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = int]
 RETURN 1
Valid && "invalid option value" COPY Valid && "invalid option value"
 RETURN 0 (ARG1 + 8)
 CALL libcall___assert_fail_thunk Valid && "invalid option value" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 411 const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = int]
(ARG1 + 12) INT_ADD ARG1 12
[(ARG1 + 12)] COPY [(ARG1 + 12)]
(ARG1 + 12) CAST (ARG1 + 12)
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
 RETURN 0 [(ARG1 + 12)]
 CALL func ARG1 ARG2 ARG5 ARG2
f() CALL func ARG4
f() CALL func ARG4
 CALL func (RSP + -120) ARG3 ARG3
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CALL libcall_basic_string_thunk
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
(RSP + -120) PTRSUB RSP -120
(FS_OFFSET + 40) INT_ADD 0 40
 CALL libcall_~basic_string_thunk (RSP + -72)
f() CALL func
0 INT_LESS f() 8
(RSP + -72) PTRSUB RSP -72
f() CALL func f() 4705968
 CBRANCH (f() INT_LESS 8)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -120) (RSP + -72) (RSP + -72)
(RSP + -72) PTRSUB RSP -72
 CALL func f() 4705983
4705983 PTRSUB 0 4705983
(RSP + -120) PTRSUB RSP -120
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
4705968 PTRSUB 0 4705968
f() CALL func
 CALL func f() (default: 
f() CALL libcall_size_thunk
f() CALL func
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
 CALL func (RSP + -120)
 CALL func f() (RSP + -72) f()
(RSP + -120) PTRSUB RSP -120
f() CALL func f() f()
(default:  COPY (default: 
f() CAST f()
*no default* COPY *no default*
f() CALL func
 BRANCH VZERO
 CALL func f() *no default*
 CALL func f() [f()]
f() CALL func
[f()] LOAD 433 f()
f() CALL libcall_size_thunk
 BRANCH VZERO
(8 - f()) INT_SUB 8 f()
0 COPY 0
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func ARG1 ARG2 ARG5 ARG2
f() CALL func ARG4
f() CALL func ARG4
 CALL func (RSP + -120) ARG3 ARG3
(RSP + -72) PTRSUB RSP -72
4705968 PTRSUB 0 4705968
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -120) (RSP + -72) (RSP + -72)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
f() CALL libcall_size_thunk
f() CALL func
 CALL func f() (default: 
 CALL func (RSP + -120)
(f() + 40) INT_ADD f() 40
f() CALL func
0 INT_NOTEQUAL f() [(f() + 40)]
f() CALL func f() f()
(default:  COPY (default: 
 CALL libcall_basic_string_thunk
 CALL func f() (RSP + -72) f()
(RSP + -120) PTRSUB RSP -120
0 INT_EQUAL f() 0
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
 CALL libcall_~basic_string_thunk (RSP + -72)
f() CALL func
0 INT_LESS f() 8
(RSP + -120) PTRSUB RSP -120
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func f() 4705968
 CBRANCH (f() INT_LESS 8)
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func f() 4705983
4705983 PTRSUB 0 4705983
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL libcall_size_thunk
(8 - f()) INT_SUB 8 f()
0 COPY 0
 BRANCH VZERO
f() CALL func
 CALL func f() *no default*
 CALL func f() [f()]
f() CALL func
f() CAST f()
*no default* COPY *no default*
[f()] LOAD 433 f()
 BRANCH VZERO
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
[(ARG1 + 16)] COPY [(ARG1 + 16)]
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 RETURN 0 [(ARG1 + 16)]
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 16)] 0
 CALL libcall___assert_fail_thunk Valid && "invalid option value" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 411 const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = long long unsigned int]
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = long long unsigned int] COPY const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = long long unsigned int]
 RETURN 0 (ARG1 + 8)
 RETURN 1
Valid && "invalid option value" COPY Valid && "invalid option value"
 CALL func ARG1 ARG2 ARG5 ARG2
 CALL func (RSP + -120) ARG3 ARG3
f() CALL func ARG4
f() CALL func ARG4
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(RSP + -120) PTRSUB RSP -120
(FS_OFFSET + 40) INT_ADD 0 40
 CALL libcall_~basic_string_thunk (RSP + -72)
f() CALL func
0 INT_LESS f() 8
(default:  COPY (default: 
f() CALL func f() 4705968
 CBRANCH (f() INT_LESS 8)
(f() + 40) CAST (f() + 40)
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -120) (RSP + -72) (RSP + -72)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func f() 4705983
(RSP + -72) PTRSUB RSP -72
f() CALL func
 CALL func f() (default: 
f() CALL libcall_size_thunk
 CALL func (RSP + -120)
f() CALL func
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(RSP + -72) PTRSUB RSP -72
(RSP + -120) PTRSUB RSP -120
 CALL func f() (RSP + -72) f()
0 INT_NOTEQUAL f() [(f() + 40)]
4705983 PTRSUB 0 4705983
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
f() CALL func f() f()
 CALL libcall_basic_string_thunk
(RSP + -72) PTRSUB RSP -72
4705968 PTRSUB 0 4705968
*no default* COPY *no default*
f() CAST f()
f() CALL func
 CALL func f() *no default*
f() CALL func
 CALL func f() [f()]
[f()] LOAD 433 f()
 BRANCH VZERO
(8 - f()) INT_SUB 8 f()
f() CALL libcall_size_thunk
0 COPY 0
 BRANCH VZERO
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
 RETURN 0 [(ARG1 + 16)]
[(ARG1 + 16)] COPY [(ARG1 + 16)]
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 16)] 0
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CALL libcall___assert_fail_thunk Valid && "invalid option value" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 411 const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = double]
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = double] COPY const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = double]
 RETURN 0 (ARG1 + 8)
 RETURN 1
Valid && "invalid option value" COPY Valid && "invalid option value"
 CALL func ARG1 (RSP + -120)
f() CALL func ARG4
f() CALL func ARG4
 CALL func ARG2 ARG3 ARG5 ARG3
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
4705968 PTRSUB 0 4705968
(RSP + -120) PTRSUB RSP -120
f() CALL func
 CALL func f() 4705983
0 INT_LESS f() 8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL func f() 4705968
 CBRANCH (f() INT_LESS 8)
 CALL libcall_basic_string_thunk
(f() + 40) CAST (f() + 40)
(RSP + -72) PTRSUB RSP -72
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(default:  COPY (default: 
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -120) PTRSUB RSP -120
(RSP + -72) PTRSUB RSP -72
f() CALL func
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func
 CALL func f() (default: 
f() CALL libcall_size_thunk
 CALL func (RSP + -120) (RSP + -72) (RSP + -72)
(RSP + -120) PTRSUB RSP -120
(RSP + -72) PTRSUB RSP -72
[(f() + 40)] LOAD 433 (f() + 40)
4705983 PTRSUB 0 4705983
 CALL func (RSP + -120)
 CALL libcall_~basic_string_thunk (RSP + -72)
 CALL func f() (RSP + -72) f()
f() CALL func f() f()
f() CALL func
*no default* COPY *no default*
 CALL func f() *no default*
 CALL func [f()] f()
f() CAST f()
f() CALL func
 BRANCH VZERO
[f()] LOAD 433 f()
f() CALL libcall_size_thunk
 BRANCH VZERO
(8 - f()) INT_SUB 8 f()
0 COPY 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0
(ARG1 + 12) INT_ADD ARG1 12
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
 RETURN 0 [(ARG1 + 12)]
[(ARG1 + 12)] COPY [(ARG1 + 12)]
(ARG1 + 12) CAST (ARG1 + 12)
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 8) INT_ADD ARG1 8
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
 CBRANCH ([(ARG1 + 12)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 12)] 0
(ARG1 + 12) CAST (ARG1 + 12)
const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = float] COPY const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = float]
 RETURN 0 (ARG1 + 8)
 RETURN 1
Valid && "invalid option value" COPY Valid && "invalid option value"
 CALL libcall___assert_fail_thunk Valid && "invalid option value" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 411 const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = float]
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
 CALL func ARG2 ARG3 ARG5 ARG3
f() CALL func ARG4
f() CALL func ARG4
ARG1 FLOAT2FLOAT ARG1
 CALL libcall_~basic_string_thunk (RSP + -72)
 CALL func (RSP + -120)
(RSP + -120) PTRSUB RSP -120
(default:  COPY (default: 
(RSP + -72) PTRSUB RSP -72
(RSP + -120) PTRSUB RSP -120
4705983 PTRSUB 0 4705983
 CALL func f() (RSP + -72) f()
 CALL libcall_basic_string_thunk
f() CALL func f() f()
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func ARG1 (RSP + -120)
 CALL func f() 4705983
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(RSP + -72) PTRSUB RSP -72
0 INT_LESS f() 8
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
f() CALL func
 CBRANCH (f() INT_LESS 8)
f() CALL func
(RSP + -120) PTRSUB RSP -120
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL func f() 4705968
4705968 PTRSUB 0 4705968
 CALL func (RSP + -120) (RSP + -72) (RSP + -72)
(RSP + -72) PTRSUB RSP -72
f() CALL func
 CALL func f() (default: 
f() CALL libcall_size_thunk
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
0 COPY 0
 BRANCH VZERO
(8 - f()) INT_SUB 8 f()
f() CALL libcall_size_thunk
[f()] LOAD 433 f()
f() CALL func
[f()] FLOAT2FLOAT [f()]
 CALL func [f()] f()
f() CALL func
f() CAST f()
 BRANCH VZERO
 CALL func f() *no default*
*no default* COPY *no default*
(ARG1 + 9) INT_ADD ARG1 9
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 9) CAST (ARG1 + 9)
[(ARG1 + 9)] LOAD 433 (ARG1 + 9)
 CBRANCH ([(ARG1 + 9)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 9)] 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = char] COPY const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = char]
 RETURN 1
Valid && "invalid option value" COPY Valid && "invalid option value"
 RETURN 0 (ARG1 + 8)
 CALL libcall___assert_fail_thunk Valid && "invalid option value" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 411 const DataType& llvm::cl::OptionValueCopy<DataType>::getValue() const [with DataType = char]
(ARG1 + 9) INT_ADD ARG1 9
[(ARG1 + 9)] COPY [(ARG1 + 9)]
(ARG1 + 9) CAST (ARG1 + 9)
[(ARG1 + 9)] LOAD 433 (ARG1 + 9)
 RETURN 0 [(ARG1 + 9)]
 CALL func ARG1 ARG2 ARG5 ARG2
f() CALL func ARG4
f() CALL func ARG4
ARG3 INT_SEXT ARG3
(default:  COPY (default: 
f() CALL func
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
f() CALL func
 CALL func f() (default: 
f() CALL libcall_size_thunk
(RSP + -120) PTRSUB RSP -120
(f() + 40) CAST (f() + 40)
 CALL func (RSP + -120)
f() CALL func f() f()
(RSP + -72) PTRSUB RSP -72
(RSP + -120) PTRSUB RSP -120
 CALL func f() (RSP + -72) f()
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(RSP + -72) PTRSUB RSP -72
 CALL libcall_~basic_string_thunk (RSP + -72)
 CALL libcall_basic_string_thunk
 CALL func (RSP + -120) ARG3 ARG3
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL func
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_LESS f() 8
4705983 PTRSUB 0 4705983
(RSP + -72) PTRSUB RSP -72
f() CALL func f() 4705968
4705968 PTRSUB 0 4705968
 CBRANCH (f() INT_LESS 8)
(RSP + -120) PTRSUB RSP -120
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func f() 4705983
 CALL func (RSP + -120) (RSP + -72) (RSP + -72)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
f() CALL func
 CALL func f() [f()]
*no default* COPY *no default*
[f()] LOAD 433 f()
f() CALL func
[f()] INT_SEXT [f()]
 BRANCH VZERO
 CALL func f() *no default*
f() CAST f()
(8 - f()) INT_SUB 8 f()
 BRANCH VZERO
0 COPY 0
f() CALL libcall_size_thunk
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 40) INT_ADD ARG1 40
[(ARG1 + 40)] COPY [(ARG1 + 40)]
(ARG1 + 40) CAST (ARG1 + 40)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
 RETURN 0 [(ARG1 + 40)]
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) CAST (ARG1 + 40)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
 CBRANCH ([(ARG1 + 40)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 40)] 0
 CALL libcall___assert_fail_thunk Valid && "invalid option value" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 411 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
0 COPY 0
 RETURN 0 (ARG1 + 8)
 RETURN 1
Valid && "invalid option value" COPY Valid && "invalid option value"
 CALL func ARG1 ARG2 ARG6 ARG2
 CALL func f() ARG3 ARG4 f()
0 INT_LESS ARG4 8
(8 - ARG4) INT_SUB 8 ARG4
f() CALL func ARG5
f() CALL func ARG5
f() CALL func f() (f(ARG4) & 4294967295)
f() CALL func
4705983 PTRSUB 0 4705983
f() CALL func
(default:  COPY (default: 
(f(ARG4) & 4294967295) INT_AND f(ARG4) 4294967295
4705968 PTRSUB 0 4705968
 CALL func f() 4705983
 CBRANCH (f() INT_EQUAL 0)
 RETURN 0
0 INT_EQUAL f() 0
f() CALL func
 CALL func f() (default: 
 CBRANCH (ARG4 INT_LESS 8)
f() CALL func f() 4705968
f() CALL func
 BRANCH VZERO
 CALL func f() *no default*
*no default* COPY *no default*
f() CALL func
 CALL func f() f()
0 COPY 0
 BRANCH VZERO
[ARG1] LOAD 433 ARG1
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL libcall_strcmp_thunk [ARG1] [ARG2]
 CALL libcall_qsort_thunk ARG1 ((ARG2 - ARG1) / 16) 16 ARG3
ARG1 CAST ARG1
(ARG2 - ARG1) INT_SUB ARG2 ARG1
0 INT_SLESS 1 ((ARG2 - ARG1) / 16)
((ARG2 - ARG1) / 16) CAST ((ARG2 - ARG1) / 16)
((ARG2 - ARG1) / 16) INT_SRIGHT (ARG2 - ARG1) 4
 CBRANCH (1 INT_SLESS ((ARG2 - ARG1) / 16))
 RETURN 0
 BRANCH VZERO
f() CALL func ARG1
f() CALL func ARG1
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f() 0
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
0 INT_NOTEQUAL f() 0
(f() # f()) INT_ZEXT (f() # f())
 CBRANCH (f() INT_NOTEQUAL 0)
[40] LOAD 433 40
(f() # f()) PIECE f() f()
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 1
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
 RETURN 0 (f() # f())
 CALL libcall___stack_chk_fail_thunk
(f() # f()) COPY (f() # f())
 RETURN 1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 (ARG1 + 32) 128 (ARG1 + 32)
(ARG1 + 32) INT_ADD ARG1 32
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 [f(ARG2)]
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
 STORE 433 (ARG1 + 16) [f(ARG3)]
(ARG1 + 16) CAST (ARG1 + 16)
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
 STORE 433 (ARG1 + 8) [(f(ARG2) + 8)]
[f(ARG3)] LOAD 433 f(ARG3)
f(ARG2) CAST f(ARG2)
f(ARG3) CAST f(ARG3)
 RETURN 0
[(f(ARG2) + 8)] LOAD 433 (f(ARG2) + 8)
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
ARG1 COPY ARG1
 CALL func ARG1 f(ARG2) f(ARG3) f(ARG2)
 RETURN 0 ARG1
 CALL func ARG1 (RSP + -40) (RSP + -48) (RSP + -40)
ARG1 COPY ARG1
f() CALL func ARG2 f(ARG3) f(ARG3)
(ARG2 + 16) INT_ADD ARG2 16
(ARG2 + 8) INT_ADD ARG2 8
f(ARG3) CALL func ARG3
([(ARG2 + 8)] + ([(ARG2 + 16)] * 8)) INT_ADD [(ARG2 + 8)] ([(ARG2 + 16)] * 8)
(ARG2 + 8) CAST (ARG2 + 8)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
(RSP + -40) PTRSUB RSP -40
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -48) PTRSUB RSP -48
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
([(ARG2 + 16)] * 8) INT_MULT [(ARG2 + 16)] 8
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 40
[(ARG2 + 16)] INT_ZEXT [(ARG2 + 16)]
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) (f() / 2147483647) ([(ARG2 + 8)] + ([(ARG2 + 16)] * 8)) (f() / 2147483647)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(ARG2 + 16) CAST (ARG2 + 16)
40 CAST 40
(f() / 2147483647) INT_RIGHT f() 64
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
(ARG1 + 12) INT_ADD ARG1 12
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(3 & ([(ARG1 + 12)] / 32)) INT_AND ([(ARG1 + 12)] / 32) 3
([(ARG1 + 12)] / 32) INT_RIGHT [(ARG1 + 12)] 5
(3 & ([(ARG1 + 12)] / 32)) COPY (3 & ([(ARG1 + 12)] / 32))
(ARG1 + 12) CAST (ARG1 + 12)
 RETURN 0 (3 & ([(ARG1 + 12)] / 32))
[ARG1] LOAD 433 ARG1
[ARG1] CAST [ARG1]
 RETURN 0 [[ARG1]]
[[ARG1]] LOAD 433 [ARG1]
[[ARG1]] COPY [[ARG1]]
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 [f(ARG2)]
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
[f(ARG2)] LOAD 433 f(ARG2)
 RETURN 0
[f(ARG3)] LOAD 433 f(ARG3)
 STORE 433 (ARG1 + 8) [f(ARG3)]
f(ARG2) CAST f(ARG2)
f(ARG3) CAST f(ARG3)
(ARG1 + 24) INT_ADD ARG1 24
 CALL func ARG1 (ARG1 + 24) ARG2 ARG3
 RETURN 0
 CALL func ARG1 (ARG2 * 16) 16 (ARG2 * 16)
(ARG2 * 16) INT_LEFT ARG2 4
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 STORE 433 (ARG1 + 8) ARG2
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1 0
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1 ([(ARG1 + 8)] + 16) ([(ARG1 + 8)] + 16)
(ARG2 + 8) PTRADD ARG2 1 8
[ARG2] LOAD 433 ARG2
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 ([(ARG1 + 8)] + 8) [(ARG2 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 [(ARG1 + 8)] [ARG2]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_LESSEQUAL [(ARG1 + 16)] [(ARG1 + 8)]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 RETURN 0
([(ARG1 + 8)] + 16) INT_ADD [(ARG1 + 8)] 16
([(ARG1 + 8)] + 8) PTRADD [(ARG1 + 8)] 1 8
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_LESSEQUAL [(ARG1 + 8)])
0 INT_NOTEQUAL ARG3 1
f() CALL func ARG1
f() CALL func ARG1
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 1 8
ARG2 COPY ARG2
ARG2 COPY ARG2
 CALL func ARG2 (RSP + -1128) (RSP + -1128)
(f() / 2147483647) INT_RIGHT f() 64
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
(A_Stack[-0x470]:8 # A_Stack[-0x490]:8) PIECE A_Stack[-0x470]:8 A_Stack[-0x490]:8
 CALL func (RSP + -1096)
 CBRANCH (f() INT_EQUAL 0)
4473744 PTRSUB 0 4473744
0 INT_EQUAL f() 0
(f() + 40) CAST (f() + 40)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(FS_OFFSET + 40) INT_ADD 0 40
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CALL func [ARG2] [(ARG2 + 8)] 4473744 [(ARG2 + 8)]
(RSP + -1184) PTRSUB RSP -1184
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -1184) (RSP + -1176) (RSP + -1176)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) INT_RIGHT f() 64
(RSP + -1176) PTRSUB RSP -1176
(RSP + -1096) PTRSUB RSP -1096
(f() / 2147483647) SUBPIECE f() 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
 CBRANCH (0 INT_EQUAL [40])
(RSP + -1096) PTRSUB RSP -1096
0 INT_EQUAL 0 [40]
(f() / 2147483647) INT_RIGHT f() 64
[40] LOAD 433 (f() + 40)
 CALL func (RSP + -1096)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
 CBRANCH (ARG3 INT_NOTEQUAL 1)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 2)
~(f()) BOOL_NEGATE f()
(f() + 8) CAST (f() + 8)
(f() + 8) INT_ADD f() 8
(f() / 2147483647) INT_RIGHT f() 64
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
f() CALL func [(f() + 8)]
 CBRANCH ~(f())
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1184) PTRSUB RSP -1184
[(f() + 8)] LOAD 433 (f() + 8)
0 INT_EQUAL f() 1
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
f() CALL func (RSP + -1184)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) INT_RIGHT f() 64
 CBRANCH (f() INT_EQUAL 1)
 RETURN 1
 RETURN 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) INT_RIGHT f() 64
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) INT_RIGHT f() 64
(RSP + -1184) PTRSUB RSP -1184
0 INT_NOTEQUAL f() 2
(f() / 2147483647) INT_RIGHT f() 64
(f() / 2147483647) SUBPIECE f() 0
(f() + 8) CAST (f() + 8)
f() CALL func [(f() + 8)]
(f() + 8) INT_ADD f() 8
(f() / 2147483647) SUBPIECE f() 0
[(f() + 8)] LOAD 433 (f() + 8)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
f() CALL func (RSP + -1184)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1184) PTRSUB RSP -1184
 BRANCH VZERO
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
 CALL func (RSP + -1184)
(f() / 2147483647) INT_RIGHT f() 64
 CBRANCH (f() INT_EQUAL 1)
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1168) PTRSUB RSP -1168
(f() / 2147483647) INT_RIGHT f() 64
 CALL func (RSP + -1128) (RSP + -1168) (f() + 8) (RSP + -1168)
(f() / 2147483647) INT_RIGHT f() 64
(f() / 2147483647) SUBPIECE f() 0
f() COPY f()
(RSP + -1184) PTRSUB RSP -1184
f() CALL func f()
(f() / 2147483647) INT_RIGHT f() 64
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -1184)
 BRANCH VZERO
(f() + 8) INT_ADD f() 8
(f() / 2147483647) INT_RIGHT f() 64
(RSP + -1128) PTRSUB RSP -1128
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -1184)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -1128) PTRSUB RSP -1128
(f() / 2147483647) INT_RIGHT f() 64
(RSP + -1184) PTRSUB RSP -1184
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) INT_RIGHT f() 64
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) INT_RIGHT f() 64
(f() + 8) CAST (f() + 8)
(f() + 8) INT_ADD f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() 1
(RSP + -1184) PTRSUB RSP -1184
(RSP + -1096) PTRSUB RSP -1096
(RSP + -1128) PTRSUB RSP -1128
f() CALL func (RSP + -1184)
[(f() + 8)] LOAD 433 (f() + 8)
 CALL func (RSP + -1128) (RSP + -1096) [(f() + 8)] (RSP + -1096)
(ARG2 + 8) PTRADD ARG2 1 8
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 1 8
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
 CALLIND [([[(([ARG2] + (f() * 16)) + 8)]] + 32)] [(([ARG2] + (f() * 16)) + 8)] ARG3 [([[(([ARG2] + (f() * 16)) + 8)]] + 32)] ARG3
(([(ARG2 + 8)] - [ARG2]) / 16) INT_SRIGHT ([(ARG2 + 8)] - [ARG2]) 4
0 INT_EQUAL f() (([(ARG2 + 8)] - [ARG2]) / 16)
([(ARG2 + 8)] - [ARG2]) INT_SUB [(ARG2 + 8)] [ARG2]
 CBRANCH (f() INT_EQUAL (([(ARG2 + 8)] - [ARG2]) / 16))
0 COPY 0
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 CBRANCH ((([(ARG2 + 8)] - [ARG2]) / 16) INT_LESSEQUAL f())
[([[(([ARG2] + (f() * 16)) + 8)]] + 32)] LOAD 433 ([[(([ARG2] + (f() * 16)) + 8)]] + 32)
(([ARG2] + (f() * 16)) + 8) INT_ADD ([ARG2] + (f() * 16)) 8
([[(([ARG2] + (f() * 16)) + 8)]] + 32) CAST ([[(([ARG2] + (f() * 16)) + 8)]] + 32)
 BRANCH VZERO
idx < size() COPY idx < size()
(f() + 1) INT_ADD f() 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
([ARG2] + (f() * 16)) INT_ADD [ARG2] (f() * 16)
[[(([ARG2] + (f() * 16)) + 8)]] LOAD 433 [(([ARG2] + (f() * 16)) + 8)]
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
(([ARG2] + (f() * 16)) + 8) CAST (([ARG2] + (f() * 16)) + 8)
 RETURN 1
(f() * 16) INT_MULT f() 16
0 COPY 0
[(([ARG2] + (f() * 16)) + 8)] LOAD 433 (([ARG2] + (f() * 16)) + 8)
([[(([ARG2] + (f() * 16)) + 8)]] + 32) INT_ADD [[(([ARG2] + (f() * 16)) + 8)]] 32
(([(ARG2 + 8)] - [ARG2]) / 16) INT_SRIGHT ([(ARG2 + 8)] - [ARG2]) 4
0 INT_LESSEQUAL (([(ARG2 + 8)] - [ARG2]) / 16) f()
(([(ARG2 + 8)] - [ARG2]) / 16) CAST (([(ARG2 + 8)] - [ARG2]) / 16)
 RETURN 0
([(ARG2 + 8)] - [ARG2]) INT_SUB [(ARG2 + 8)] [ARG2]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 Symbol
 STORE 433 (ARG1 + 8) ARG2
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func ARG1
 CALL libcall_operator.delete_thunk ARG1
 RETURN 0
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -24) PTRSUB RSP -24
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
0 INT_ZEXT 0
([f(ARG2)] & -256) INT_OR ([f(ARG2)] & -256) 0
f(ARG1) CAST f(ARG1)
[f(ARG1)] LOAD 433 f(ARG1)
f(ARG2) CAST f(ARG2)
([f(ARG2)] & -256) INT_AND [f(ARG2)] -256
 RETURN 0 ([f(ARG2)] & -256)
0 INT_NOTEQUAL [f(ARG1)] [f(ARG2)]
[f(ARG2)] LOAD 433 f(ARG2)
(ARG1 + 24) INT_ADD ARG1 24
 CALL func ARG1 (ARG1 + 24) ARG2 (ARG1 + 24)
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
ARG2 INT_ZEXT ARG2
 CALL func ARG1 (ARG2 * 16) (ARG2 * 16)
(ARG2 * 16) INT_LEFT ARG2 4
 RETURN 0
 CALL func ARG1 128
 RETURN 0
 STORE 433 ARG1 ([ARG1] + 8)
ARG1 COPY ARG1
[ARG1] LOAD 433 ARG1
([ARG1] + 8) INT_ADD [ARG1] 8
 RETURN 0 ARG1
(ARG1 + 8) INT_ADD ARG1 8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -24) PTRSUB RSP -24
40 INT_ADD 0 40
 CALL func (RSP + -24) (ARG1 + 8) (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 CALLIND [[ARG1]] ARG1 (RSP + -2104) f(RSP) ARG1
0 INT_NOTEQUAL ARG2 1
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG2 INT_NOTEQUAL 1)
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
0 INT_EQUAL f() 0
(RSP + -2248) PTRSUB RSP -2248
(RSP + -2256) PTRSUB RSP -2256
f() CAST f()
(RSP + -2256) PTRSUB RSP -2256
 CALL func (RSP + -2256)
f() CALL func (RSP + -2256) (RSP + -2248) (RSP + -2248)
[f()] LOAD 433 f()
f() CALL func (RSP + -2256)
 CALL func f() [f()] f()
(RSP + -2256) PTRSUB RSP -2256
f() CALL func
 CBRANCH ([(f() + 208)] INT_NOTEQUAL 0)
 CALL func f() [([(f() + 208)] + 40)] [([(f() + 208)] + 48)] f()
[([(f() + 208)] + 40)] LOAD 433 ([(f() + 208)] + 40)
([(f() + 208)] + 48) INT_ADD [(f() + 208)] 48
[(f() + 208)] LOAD 433 (f() + 208)
4706097 PTRSUB 0 4706097
f() CALL func f() 4706097
(f() + 208) CAST (f() + 208)
([(f() + 208)] + 40) INT_ADD [(f() + 208)] 40
([(f() + 208)] + 40) CAST ([(f() + 208)] + 40)
([(f() + 208)] + 48) CAST ([(f() + 208)] + 48)
f() CALL func 6966272
[([(f() + 208)] + 48)] LOAD 433 ([(f() + 208)] + 48)
(f() + 208) INT_ADD f() 208
f() CALL func
6966272 PTRSUB 0 6966272
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func f() 4706093
 CALL func f() [([f()] + 24)] [([f()] + 32)] f()
([f()] + 24) INT_ADD [f()] 24
[([f()] + 24)] LOAD 433 ([f()] + 24)
([f()] + 32) CAST ([f()] + 32)
4706093 PTRSUB 0 4706093
([f()] + 24) CAST ([f()] + 24)
([f()] + 32) INT_ADD [f()] 32
[([f()] + 32)] LOAD 433 ([f()] + 32)
f() CALL func
 CBRANCH ([(f() + 32)] INT_NOTEQUAL 0)
(f() + 32) CAST (f() + 32)
f() CALL func 6966272
f() CALL func
4705610 PTRSUB 0 4705610
OVERVIEW:  COPY OVERVIEW: 
f() CALL func f() [(f() + 32)]
f() CALL func f() OVERVIEW: 
(f() + 32) INT_ADD f() 32
[(f() + 32)] LOAD 433 (f() + 32)
6966272 PTRSUB 0 6966272
 CALL func f() 4705610
 CBRANCH (f() INT_EQUAL f())
0 INT_LESSEQUAL ((f() - f()) / 16) f()
(RSP + -2104) COPY (RSP + -2104)
OPTIONS:  COPY OPTIONS: 
(RSP + -2104) COPY (RSP + -2104)
(f() + 40) INT_ADD f() 40
f() CALL func (f() + 40)
f() CALL func 6966272
[[ARG1]] LOAD 433 [ARG1]
6966272 PTRSUB 0 6966272
[ARG1] CAST [ARG1]
f() CALL func 6966272
(RSP + -2104) PTRSUB RSP -2104
 CALL func f() OPTIONS: 
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
6966272 PTRSUB 0 6966272
(RSP + -2104) PTRSUB RSP -2104
f() CALL func (f() + 40)
f() CALL func
 CALL libcall_exit_thunk 0
 RETURN 1
(f() - f()) INT_SUB f() f()
f() COPY f()
 CALL func (f() + 40)
 CBRANCH (((f() - f()) / 16) INT_LESSEQUAL f())
((f() - f()) / 16) CAST ((f() - f()) / 16)
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_NOTEQUAL f())
(f() + 8) PTRADD f() 1 8
(f() + 48) INT_ADD f() 48
[f()] LOAD 433 f()
(f() + 40) INT_ADD f() 40
f() CALL func f() 4706097
0 INT_NOTEQUAL f() f()
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL f() 0
(f() + 48) CAST (f() + 48)
[(f() + 48)] LOAD 433 (f() + 48)
 BRANCH VZERO
f() CALL func
f() CALL func [f()]
[(f() + 40)] LOAD 433 (f() + 40)
 CALL func f() [(f() + 40)] [(f() + 48)] f()
4706097 PTRSUB 0 4706097
(RSP + -2104) PTRSUB RSP -2104
f() CALL func 6966272
0 INT_EQUAL f() f()
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(ARG1 + 8) CAST (ARG1 + 8)
(f() + 176) INT_ADD f() 176
 CALL func f() [options]
40 INT_ADD 0 40
(f() + 72) INT_ADD f() 72
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
6966272 PTRSUB 0 6966272
f() CALL func 6966272
6966272 PTRSUB 0 6966272
[(f() + 32)] LOAD 433 (f() + 32)
f() CALL func 6966272
40 CAST 40
[(f() + 208)] LOAD 433 (f() + 208)
f() CALL func 6966272
6966272 PTRSUB 0 6966272
 CALL func (f() + 176) (RSP + -2104) [(ARG1 + 8)] (f() + 176)
(f() + 64) INT_ADD f() 64
(f() + 72) CAST (f() + 72)
4706099 PTRSUB 0 4706099
 CALL func (RSP + -2104)
0 COPY 0
(f() + 64) COPY (f() + 64)
(f() + 64) COPY (f() + 64)
(f() - f()) INT_SUB f() f()
f() CALL func
(f() + 32) CAST (f() + 32)
USAGE:  COPY USAGE: 
 CALL func f() 4706099
(f() + 32) INT_ADD f() 32
[(f() + 64)] LOAD 433 (f() + 64)
(RSP + -2104) PTRSUB RSP -2104
0 INT_NOTEQUAL [(f() + 32)] 0
0 INT_NOTEQUAL [(f() + 208)] 0
6966272 PTRSUB 0 6966272
f() CALL func
(f() + 208) INT_ADD f() 208
6966272 PTRSUB 0 6966272
f() CALL func 6966272
[40] LOAD 433 40
[(f() + 72)] LOAD 433 (f() + 72)
f() CALL func f() f()
[options] COPY [options]
(RSP + -2104) PTRSUB RSP -2104
(RSP + -2104) PTRSUB RSP -2104
(f() + 208) CAST (f() + 208)
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() + 64) CAST (f() + 64)
0 COPY 0
f() CALL func f() USAGE: 
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0
(f() + 1) INT_ADD f() 1
f(RSP) CAST f(RSP)
f(RSP) CALL func (RSP + -2264) (RSP + -2248) (RSP + -2248)
 RETURN 1
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
idx < size() COPY idx < size()
0 COPY 0
([[(((f() * 16) + f()) + 8)]] + 24) CAST ([[(((f() * 16) + f()) + 8)]] + 24)
([[(((f() * 16) + f()) + 8)]] + 24) INT_ADD [[(((f() * 16) + f()) + 8)]] 24
(RSP + -2264) PTRSUB RSP -2264
 BRANCH VZERO
(((f() * 16) + f()) + 8) CAST (((f() * 16) + f()) + 8)
(((f() * 16) + f()) + 8) INT_ADD ((f() * 16) + f()) 8
(RSP + -2248) PTRSUB RSP -2248
VZERO CALLIND [([[(((f() * 16) + f()) + 8)]] + 24)] [(((f() * 16) + f()) + 8)]
[(((f() * 16) + f()) + 8)] LOAD 433 (((f() * 16) + f()) + 8)
[([[(((f() * 16) + f()) + 8)]] + 24)] LOAD 433 ([[(((f() * 16) + f()) + 8)]] + 24)
[[(((f() * 16) + f()) + 8)]] LOAD 433 [(((f() * 16) + f()) + 8)]
[f(RSP)] LOAD 433 f(RSP)
(RSP + -2104) PTRSUB RSP -2104
(f() * 16) INT_MULT f() 16
((f() * 16) + f()) INT_ADD f() (f() * 16)
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
[ARG1] LOAD 433 ARG1
[ARG2] LOAD 433 ARG2
 CALL libcall_strcmp_thunk f() f()
f() CALL func [ARG1]
f() CAST f()
 RETURN 0
f() CALL func [ARG2]
f() CAST f()
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 [f(ARG2)]
f(ARG2) CALL func ARG2
f(ARG2) CAST f(ARG2)
[f(ARG2)] LOAD 433 f(ARG2)
 RETURN 0
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG3) CALL func ARG3
f(ARG2) CALL func 8 ARG2
0 INT_NOTEQUAL f(ARG2) 0
[f(ARG3)] LOAD 433 f(ARG3)
 RETURN 0
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
f(ARG3) CAST f(ARG3)
f(ARG2) CAST f(ARG2)
 STORE 433 f(ARG2) [f(ARG3)]
 CALL func ARG1 ARG2 f(ARG3) ARG2
f(ARG3) CALL func ARG3
 RETURN 0
 CALL libcall_memmove_thunk ARG3 ARG1 (((ARG2 - ARG1) / 8) * 8)
ARG1 CAST ARG1
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG3 CAST ARG3
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) INT_ADD ARG3 (((ARG2 - ARG1) / 8) * 8)
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) CAST (ARG3 + (((ARG2 - ARG1) / 8) * 8))
((ARG2 - ARG1) / 8) INT_SRIGHT (ARG2 - ARG1) 3
0 INT_NOTEQUAL ((ARG2 - ARG1) / 8) 0
 RETURN 0 (ARG3 + (((ARG2 - ARG1) / 8) * 8))
 CBRANCH (((ARG2 - ARG1) / 8) INT_NOTEQUAL 0)
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 CALL func f() f() f()
 RETURN 0
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
ARG1 COPY ARG1
 RETURN 0
(RSP + -16) PTRSUB RSP -16
 CALL func (RSP + -16)
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG4
 RETURN 0
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
40 CAST 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -24) PTRSUB RSP -24
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 ARG4
 RETURN 0
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 RETURN 0 2305843009213693951
2305843009213693951 COPY 2305843009213693951
f() CALL func ARG1
0 INT_LESS f() ARG2
(ARG2 * 8) INT_LEFT ARG2 3
 CBRANCH (f() INT_LESS ARG2)
 RETURN 0
 CALL libcall_operator.new_thunk (ARG2 * 8)
 CALL libcall___throw_bad_alloc_thunk
 CALL func ARG1 ARG2 0 ARG2
 RETURN 0
f() CALL func ARG1 ARG2 ARG2
0 INT_EQUAL ARG2 0
 CBRANCH (ARG2 INT_EQUAL 0)
 RETURN 0 f()
 BRANCH VZERO
0 COPY 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL libcall_operator.delete_thunk ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
0 INT_NOTEQUAL ARG2 0
 CBRANCH (ARG2 INT_NOTEQUAL 0)
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(([(ARG1 + 8)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 3
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
 RETURN 0 (([(ARG1 + 8)] - [ARG1]) / 8)
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
 CALL func f(ARG1)
 RETURN 0
ARG1 COPY ARG1
f() CALL func ARG1
ARG2 COPY ARG2
 CALL libcall___throw_length_error_thunk ARG3
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f(RSP) CALL func (RSP + -48) (RSP + -72) (RSP + -72)
(f() - f()) INT_SUB f() f()
(f() + 40) CAST (f() + 40)
f(RSP) CAST f(RSP)
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func f(ARG1)
f() CALL func ARG1
(f() - f()) CAST (f() - f())
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -48) PTRSUB RSP -48
 CBRANCH ((f() - f()) INT_LESS ARG2)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(RSP + -72) PTRSUB RSP -72
(f() + 40) INT_ADD f() 40
([f(RSP)] + f()) INT_ADD [f(RSP)] f()
0 INT_EQUAL f() [(f() + 40)]
f() CALL func f(ARG1)
0 INT_LESS ([f(RSP)] + f()) f()
0 INT_LESS (f() - f()) ARG2
[(f() + 40)] LOAD 433 (f() + 40)
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (([f(RSP)] + f()) INT_LESS f())
f() CALL func f(ARG1)
f() CALL func f(ARG1)
 CBRANCH (f() INT_LESS ([f(RSP)] + f()))
 BRANCH VZERO
([f(RSP)] + f()) COPY ([f(RSP)] + f())
f() COPY f()
0 INT_LESS f() ([f(RSP)] + f())
f() CALL func f(ARG1)
 RETURN 0 f(RSP)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
f(ARG2) CALL func ARG2
f() CALL func ARG1 f(RSP) f(RSP)
(ARG1 + 16) PTRADD ARG1 2 8
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
f(RSP) CALL func ARG1 1 0
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 8) [ARG1]
f(ARG1) CALL func ARG1
f(ARG1) CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 ((f() * 8) + f()) f(ARG2) ((f() * 8) + f())
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 f()
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
f() CALL func [ARG1] [(ARG1 + 8)] f() f(ARG1)
 STORE 433 (ARG1 + 8) (f() + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (ARG1 + 16) ((f(RSP) * 8) + f())
((f(RSP) * 8) + f()) INT_ADD (f(RSP) * 8) f()
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(f(RSP) * 8) INT_MULT f(RSP) 8
(([(ARG1 + 16)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 3
(f() + 8) INT_ADD f() 8
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
(f() * 8) INT_MULT f() 8
((f() * 8) + f()) INT_ADD (f() * 8) f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 COPY 0
 RETURN 0
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1 f(ARG2) f(ARG2)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1 [(ARG1 + 8)] f(ARG2) [(ARG1 + 8)]
f(ARG2) CALL func ARG2
f(ARG2) CALL func ARG2
 CBRANCH ([(ARG1 + 8)] INT_EQUAL [(ARG1 + 16)])
 RETURN 0
0 INT_EQUAL [(ARG1 + 8)] [(ARG1 + 16)]
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + 8) INT_ADD [(ARG1 + 8)] 8
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 8)
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1 f(ARG2) f(ARG2)
f(ARG2) CALL func ARG2
 RETURN 0
ARG1 COPY ARG1
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 ([ARG1] + 8)
 RETURN 0 ARG1
([ARG1] + 8) INT_ADD [ARG1] 8
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
 RETURN 0 [(ARG1 + 16)]
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
ARG1 COPY ARG1
 RETURN 0 ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL libcall_operator.delete_thunk ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
0 INT_NOTEQUAL ARG2 0
 RETURN 0
 CBRANCH (ARG2 INT_NOTEQUAL 0)
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
 CALL func ARG1
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 8) [ARG1]
[ARG1] LOAD 433 ARG1
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(([(ARG1 + 16)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 3
 RETURN 0
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 CALL func ARG1
f(ARG1) CALL func ARG1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
(ARG1 + 8) INT_ADD ARG1 8
 CALL func (ARG1 + 8)
 RETURN 0
 CALL func ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
(ARG1 + 32) INT_ADD ARG1 32
 CALL func (ARG1 + 32)
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
f() CALL func ARG2
 CALL func f(ARG1) f()
 RETURN 0
 CALL libcall_operator.delete_thunk ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f(ARG1) CALL func ARG1
 CALL func f(ARG1) ARG2 1 f(ARG1)
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 ARG2 ARG2
 RETURN 0
(ARG1 + 24) INT_ADD ARG1 24
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
[(ARG1 + 24)] COPY [(ARG1 + 24)]
 RETURN 0 [(ARG1 + 24)]
(ARG1 + 24) CAST (ARG1 + 24)
(ARG1 + 16) INT_ADD ARG1 16
 RETURN 0 [(ARG1 + 16)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
(ARG1 + 16) CAST (ARG1 + 16)
 CALL func ARG1 f() f()
 CALL func ARG1 f(ARG2) f(ARG2)
ARG2 COPY ARG2
ARG2 COPY ARG2
0 INT_NOTEQUAL f(ARG2) 0
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
 RETURN 0
f() COPY f()
f() CALL func f(ARG2)
f() CALL func f(ARG2)
 BRANCH VZERO
 CALL func ARG1 f() f()
f() CALL func ARG1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL libcall_memmove_thunk ARG3 ARG1 (((ARG2 - ARG1) / 8) * 8)
ARG1 CAST ARG1
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG3 CAST ARG3
0 INT_NOTEQUAL ((ARG2 - ARG1) / 8) 0
((ARG2 - ARG1) / 8) INT_SRIGHT (ARG2 - ARG1) 3
 RETURN 0 (ARG3 + (((ARG2 - ARG1) / 8) * 8))
 CBRANCH (((ARG2 - ARG1) / 8) INT_NOTEQUAL 0)
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) INT_ADD ARG3 (((ARG2 - ARG1) / 8) * 8)
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) CAST (ARG3 + (((ARG2 - ARG1) / 8) * 8))
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 RETURN 0
 CALL func f() f() f()
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
ARG1 COPY ARG1
 RETURN 0
(RSP + -16) PTRSUB RSP -16
 CALL func (RSP + -16)
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG4
 RETURN 0
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -24) PTRSUB RSP -24
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
40 CAST 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
 RETURN 1
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 ARG4
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 RETURN 0 2305843009213693951
2305843009213693951 COPY 2305843009213693951
 CALL func ARG1
 RETURN 0
f(ARG1) CALL func ARG1
 CALL func f(ARG1)
 RETURN 0
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(([(ARG1 + 8)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 3
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
 RETURN 0 (([(ARG1 + 8)] - [ARG1]) / 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
ARG1 COPY ARG1
f() CALL func ARG1
ARG2 COPY ARG2
 CALL libcall___throw_length_error_thunk ARG3
0 INT_LESS (f() - f()) ARG2
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_LESS ([f(RSP)] + f()) f()
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (([f(RSP)] + f()) INT_LESS f())
(f() - f()) INT_SUB f() f()
f(RSP) CALL func (RSP + -48) (RSP + -72) (RSP + -72)
f() CALL func f(ARG1)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
(f() - f()) CAST (f() - f())
f(RSP) CAST f(RSP)
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func f(ARG1)
f() CALL func ARG1
(RSP + -48) PTRSUB RSP -48
 CBRANCH ((f() - f()) INT_LESS ARG2)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
([f(RSP)] + f()) INT_ADD [f(RSP)] f()
0 INT_EQUAL f() [(f() + 40)]
f() CALL func f(ARG1)
(RSP + -72) PTRSUB RSP -72
(f() + 40) INT_ADD f() 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(RSP)
 RETURN 1
 BRANCH VZERO
([f(RSP)] + f()) COPY ([f(RSP)] + f())
f() CALL func f(ARG1)
0 INT_LESS f() ([f(RSP)] + f())
 CBRANCH (f() INT_LESS ([f(RSP)] + f()))
f() COPY f()
f() CALL func f(ARG1)
f() CALL func ARG1
0 INT_LESS f() ARG2
(ARG2 * 8) INT_LEFT ARG2 3
 RETURN 0
 CALL libcall_operator.new_thunk (ARG2 * 8)
 CBRANCH (f() INT_LESS ARG2)
 CALL libcall___throw_bad_alloc_thunk
 CALL func ARG1 ARG2 0 ARG2
 RETURN 0
f() CALL func ARG1 ARG2 ARG2
0 INT_EQUAL ARG2 0
 CBRANCH (ARG2 INT_EQUAL 0)
 RETURN 0 f()
0 COPY 0
 BRANCH VZERO
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG3) CALL func ARG3
f(ARG2) CALL func 8 ARG2
f(ARG3) CAST f(ARG3)
 RETURN 0
[f(ARG3)] LOAD 433 f(ARG3)
f(ARG2) CAST f(ARG2)
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG2) 0
 STORE 433 f(ARG2) [f(ARG3)]
 CALL func ARG1 ARG2 f(ARG3) ARG2
f(ARG3) CALL func ARG3
 RETURN 0
f(ARG2) CALL func ARG2
(ARG1 + 8) PTRADD ARG1 1 8
f(RSP) CALL func ARG1 1 0
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 8) [ARG1]
[ARG1] LOAD 433 ARG1
 CALL func ARG1 ((f() * 8) + f()) f(ARG2) ((f() * 8) + f())
f(ARG1) CALL func ARG1
f(ARG1) CALL func ARG1
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 f()
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
f() CALL func ARG1 f(RSP) f(RSP)
((f(RSP) * 8) + f()) INT_ADD (f(RSP) * 8) f()
(([(ARG1 + 16)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 3
 STORE 433 (ARG1 + 16) ((f(RSP) * 8) + f())
(f(RSP) * 8) INT_MULT f(RSP) 8
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
(f() * 8) INT_MULT f() 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
((f() * 8) + f()) INT_ADD (f() * 8) f()
(f() + 8) INT_ADD f() 8
0 COPY 0
 RETURN 0
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
 STORE 433 (ARG1 + 8) (f() + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f() CALL func [ARG1] [(ARG1 + 8)] f() f(ARG1)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1 [(ARG1 + 8)] ARG2 [(ARG1 + 8)]
 CALL func ARG1 ARG2 ARG2
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL [(ARG1 + 16)])
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_EQUAL [(ARG1 + 8)] [(ARG1 + 16)]
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + 8) INT_ADD [(ARG1 + 8)] 8
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
(RSP + -24) PTRSUB RSP -24
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
 CALL func (RSP + -24) (ARG1 + 8) (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
([f(ARG2)] & -256) INT_OR ([f(ARG2)] & -256) 0
 RETURN 0 ([f(ARG2)] & -256)
0 INT_NOTEQUAL [f(ARG1)] [f(ARG2)]
f(ARG1) CAST f(ARG1)
f(ARG2) CAST f(ARG2)
[f(ARG1)] LOAD 433 f(ARG1)
0 INT_ZEXT 0
[f(ARG2)] LOAD 433 f(ARG2)
([f(ARG2)] & -256) INT_AND [f(ARG2)] -256
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 8) [ARG1]
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 CALL func ARG1
(ARG1 + 16) PTRADD ARG1 2 8
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(([(ARG1 + 16)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 3
 RETURN 0
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
 CALL func ARG1
f(ARG1) CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 RETURN 0
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 [(ARG1 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG1 + 8)] COPY [(ARG1 + 8)]
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0
 STORE 433 (ARG1 + 16) 0
 STORE 433 (ARG1 + 8) 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
[f(ARG2)] LOAD 433 f(ARG2)
([f(ARG2)] & -256) INT_AND [f(ARG2)] -256
0 INT_NOTEQUAL [f(ARG1)] [f(ARG2)]
 RETURN 0 ([f(ARG2)] & -256)
[f(ARG1)] LOAD 433 f(ARG1)
f(ARG1) CAST f(ARG1)
f(ARG2) CAST f(ARG2)
0 INT_ZEXT 0
([f(ARG2)] & -256) INT_OR ([f(ARG2)] & -256) 0
[ARG2] LOAD 433 ARG2
[ARG3] LOAD 433 ARG3
0 INT_ZEXT 0
([ARG3] & -256) INT_AND [ARG3] -256
([ARG3] & -256) INT_OR ([ARG3] & -256) 0
0 INT_LESS [ARG2] [ARG3]
 RETURN 0 ([ARG3] & -256)
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
(ARG1 + 32) INT_ADD ARG1 32
 RETURN 0
 CALL func (ARG1 + 32)
 CALL func ARG1
 RETURN 0
ARG2 COPY ARG2
 RETURN 0 ARG2
f() CALL func ARG1
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
40 INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (RSP + -17) f() f()
40 CAST 40
(RSP + -17) PTRSUB RSP -17
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(ARG1 + 16) INT_ADD ARG1 16
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
 RETURN 0 [(ARG1 + 16)]
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 24) INT_ADD ARG1 24
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
[(ARG1 + 24)] COPY [(ARG1 + 24)]
 RETURN 0 [(ARG1 + 24)]
(ARG1 + 24) CAST (ARG1 + 24)
 STORE 433 ARG1 ARG2
 RETURN 0
f() CALL func ARG1 f() ARG4 f()
ARG2 COPY ARG2
ARG3 COPY ARG3
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() COPY f()
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [40])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL 0 [40]
(f() + 40) INT_ADD f() 40
 CALL func (RSP + -24) f(ARG2 , ARG3) f(ARG2 , ARG3)
[40] LOAD 433 (f() + 40)
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG2) 0
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -24) PTRSUB RSP -24
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
f() CALL func f(ARG2)
 BRANCH VZERO
f(ARG2) COPY f(ARG2)
 BRANCH VZERO
f() CALL func f(ARG2)
f() CALL func f(ARG2)
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
 RETURN 0 [(ARG1 + 16)]
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -17) PTRSUB RSP -17
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
 CALL func (RSP + -17) f() f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
[ARG1] LOAD 433 ARG1
[ARG2] LOAD 433 ARG2
([ARG2] & -256) INT_OR ([ARG2] & -256) 0
 RETURN 0 ([ARG2] & -256)
0 INT_EQUAL [ARG1] [ARG2]
([ARG2] & -256) INT_AND [ARG2] -256
0 INT_ZEXT 0
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 (ARG1 + 8)
(ARG1 + 8) INT_ADD ARG1 8
(RSP + -24) PTRSUB RSP -24
40 INT_ADD 0 40
 CALL func (RSP + -24) (ARG1 + 8) (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
f() CALL func ARG1 f() f() ARG2
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1 ARG2 f() ARG2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
(f() + 40) INT_ADD f() 40
(RSP + -48) PTRSUB RSP -48
 CBRANCH (0 INT_EQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
0 INT_EQUAL 0 [(f() + 40)]
0 INT_EQUAL f() 0
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func (RSP + -48) (RSP + -40) (RSP + -40)
 BRANCH VZERO
f() COPY f()
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
f() CALL func f()
f() COPY f()
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
f() CALL func ARG1
f() CALL func ARG1 ARG2 ARG2
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 COPY 0
(RSP + -24) PTRSUB RSP -24
40 INT_ADD 0 40
(RSP + -32) PTRSUB RSP -32
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f() 0
f() CALL func (RSP + -32) (RSP + -24) (RSP + -24)
[40] LOAD 433 40
 RETURN 0 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -24) PTRSUB RSP -24
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0
 CALL func ARG1
 RETURN 0
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1
 STORE 433 (ARG1 + 16) 0
 STORE 433 (ARG1 + 8) 0
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 [f(ARG2)]
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
 STORE 433 ARG2 [f(RSP)]
f(ARG2) CAST f(ARG2)
f(RSP) CAST f(RSP)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
f(RSP) CALL func (RSP + -24)
[f(RSP)] LOAD 433 f(RSP)
(RSP + -24) PTRSUB RSP -24
(FS_OFFSET + 40) INT_ADD 0 40
[f(ARG2)] LOAD 433 f(ARG2)
[f(ARG1)] LOAD 433 f(ARG1)
40 CAST 40
f(ARG1) CAST f(ARG1)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 CALL func ARG1 ARG2 ARG2
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
(ARG2 + 16) INT_ADD ARG2 16
(ARG2 + 8) INT_ADD ARG2 8
 CALL func (ARG1 + 16) (ARG2 + 16) (ARG2 + 16)
 RETURN 0
 CALL func (ARG1 + 8) (ARG2 + 8) (ARG2 + 8)
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 0
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0
 STORE 433 (ARG1 + 8) 0
 STORE 433 (ARG1 + 16) 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 CALL func ARG1 f(ARG2) f(ARG2)
ARG1 COPY ARG1
f(ARG2) CALL func ARG2
 RETURN 0 ARG1
 CALL func ARG1 (RSP + -56) (RSP + -56)
 CALL func ARG1 ARG2 ARG2
f(ARG1) CALL func ARG1
 CALL func (RSP + -57) ARG1 ARG1
f(ARG2) CALL func ARG2
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL func (RSP + -56)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -57) PTRSUB RSP -57
40 CAST 40
40 INT_ADD 0 40
(RSP + -57) PTRSUB RSP -57
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -57)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -57) PTRSUB RSP -57
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) (RSP + -57) (RSP + -57)
 CALL func f(ARG1) f(ARG2)
[40] LOAD 433 40
(RSP + -56) PTRSUB RSP -56
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 CALL func ARG1 f(ARG2) f(ARG2)
ARG1 COPY ARG1
f(ARG2) CALL func ARG2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
40 INT_ADD 0 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
 STORE 433 ARG1 ARG2
 RETURN 0
f() CALL func ARG1 f() ARG4 f()
ARG2 COPY ARG2
ARG3 COPY ARG3
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [40])
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG2) 0
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_NOTEQUAL 0 [40]
 CALL func (RSP + -24) f(ARG2 , ARG3) f(ARG2 , ARG3)
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() COPY f()
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -24) PTRSUB RSP -24
[40] LOAD 433 (f() + 40)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 RETURN 1
 CBRANCH (f() INT_EQUAL 1)
 BRANCH VZERO
f() CALL func f(ARG2)
f() CALL func f(ARG2)
 BRANCH VZERO
f(ARG2) COPY f(ARG2)
0 INT_EQUAL f() 1
f() CALL func f(ARG2)
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 (ARG1 + 8)
f() CALL func ARG1
f() CALL func ARG1
 CALL func ARG1 f() f() ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
[ARG1] LOAD 433 ARG1
 CALL func [ARG1]
 RETURN 0
[ARG1] LOAD 433 ARG1
[ARG2] LOAD 433 ARG2
([ARG2] & -256) INT_AND [ARG2] -256
([ARG2] & -256) INT_OR ([ARG2] & -256) 0
0 INT_ZEXT 0
 RETURN 0 ([ARG2] & -256)
0 INT_EQUAL [ARG1] [ARG2]
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
(ARG1 + 32) INT_ADD ARG1 32
 RETURN 0 (ARG1 + 32)
ARG1 COPY ARG1
 RETURN 0 ARG1
[ARG2] LOAD 433 ARG2
f(ARG3) CALL func ARG3
 STORE 433 ARG1 [ARG2]
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0
 STORE 433 (ARG1 + 8) [f(ARG3)]
f(ARG3) CAST f(ARG3)
[f(ARG3)] LOAD 433 f(ARG3)
(ARG1 + 40) INT_ADD ARG1 40
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
[(ARG1 + 40)] COPY [(ARG1 + 40)]
 RETURN 0 [(ARG1 + 40)]
(ARG1 + 40) CAST (ARG1 + 40)
 STORE 433 ARG1 [f(ARG2)]
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
[f(ARG2)] LOAD 433 f(ARG2)
 RETURN 0
 STORE 433 (ARG1 + 8) [f(ARG3)]
f(ARG2) CAST f(ARG2)
[f(ARG3)] LOAD 433 f(ARG3)
f(ARG3) CAST f(ARG3)
[ARG1] LOAD 433 ARG1
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
40 CAST 40
40 INT_ADD 0 40
 CALL func (RSP + -24) [ARG1] [ARG1]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -24) PTRSUB RSP -24
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 24) INT_ADD ARG1 24
 RETURN 0 (ARG1 + 24)
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 [f(ARG2)]
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
f(ARG2) CAST f(ARG2)
 STORE 433 (ARG1 + 8) [f(ARG3)]
[f(ARG3)] LOAD 433 f(ARG3)
 RETURN 0
f(ARG3) CAST f(ARG3)
[f(ARG2)] LOAD 433 f(ARG2)
(ARG1 + 24) INT_ADD ARG1 24
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
 CALL func (RSP + -24) [(ARG1 + 24)] [(ARG1 + 24)]
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -24) PTRSUB RSP -24
[40] LOAD 433 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 f()
ARG1 COPY ARG1
 RETURN 0 ARG1
f() CALL libcall__Rb_tree_decrement_thunk [ARG1]
f() CAST f()
f(ARG2) CALL func ARG2
[ARG3] LOAD 433 ARG3
 STORE 433 ARG1 [f(ARG2)]
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG2) CAST f(ARG2)
 RETURN 0
 STORE 433 (ARG1 + 8) [ARG3]
[f(ARG2)] LOAD 433 f(ARG2)
f() CALL func ARG1 f() ARG2 f()
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1 ARG2 f() ARG2
f() CALL func ARG1
(f() + 40) INT_ADD f() 40
(RSP + -56) PTRSUB RSP -56
0 INT_EQUAL f() [(f() + 40)]
 CALL func (RSP + -56) f() f()
 CBRANCH (f() INT_NOTEQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_NOTEQUAL f() 0
0 INT_NOTEQUAL f() 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
(RSP + -48) PTRSUB RSP -48
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) (RSP + -72) (RSP + -64) (RSP + -72)
(RSP + -64) PTRSUB RSP -64
(RSP + -56) PTRSUB RSP -56
0 COPY 0
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -40) (RSP + -56) (RSP + -48) (RSP + -56)
(RSP + -40) PTRSUB RSP -40
 CBRANCH (f() INT_EQUAL 0)
f() CALL func f()
 BRANCH VZERO
f() CALL func f()
(RSP + -40) PTRSUB RSP -40
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
0 INT_EQUAL f() 0
f() CALL func f()
f() CALL func (RSP + -56) (RSP + -40) (RSP + -40)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (f() # f())
 RETURN 1
(f() # f()) PIECE f() f()
0 INT_EQUAL f() 0
f() COPY f()
f() CALL func f()
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
(RSP + -40) PTRSUB RSP -40
(RSP + -64) PTRSUB RSP -64
 CALL func (RSP + -40) (RSP + -72) (RSP + -64) (RSP + -72)
 CALL func (RSP + -56)
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 f()
ARG1 COPY ARG1
f() CALL libcall__Rb_tree_increment_thunk [ARG1]
f() CAST f()
 RETURN 0 ARG1
f() CALL func ARG1 f() ARG3 f()
f() CALL func ARG1 ARG3 ARG3
f() CALL func ARG1 ARG3 f() ARG3
f() CALL func ARG1 f() ARG3 f()
f() CALL func ARG1 f() ARG3 f()
f() CALL func f(ARG1) ARG3 ARG3
f() CALL func ARG1 ARG3 f() ARG3
f() CALL func ARG1 ARG3 ARG3
ARG1 COPY ARG1
ARG2 COPY ARG2
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_NOTEQUAL f() f()
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(RSP + -104) PTRSUB RSP -104
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
f() COPY f()
 CBRANCH (f() INT_NOTEQUAL f())
f() CALL func (RSP + -104)
f() CALL func ARG1
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CBRANCH (f() INT_EQUAL [f()])
 CALL func (RSP + -56) (RSP + -64) f() (RSP + -64)
f() CALL func [f(RSP)]
(RSP + -72) PTRSUB RSP -72
f() CALL func ARG1
(RSP + -64) PTRSUB RSP -64
0 COPY 0
(RSP + -56) PTRSUB RSP -56
f(RSP) CAST f(RSP)
 BRANCH VZERO
[f(RSP)] LOAD 433 f(RSP)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f(RSP) CALL func (RSP + -72)
 CBRANCH (f() INT_EQUAL 0)
(RSP + -64) PTRSUB RSP -64
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
(RSP + -80) PTRSUB RSP -80
 CALL func (RSP + -56) (RSP + -64) (RSP + -72) (RSP + -64)
0 COPY 0
 CALL func (RSP + -56) (RSP + -80) (RSP + -80) (RSP + -80)
(RSP + -80) PTRSUB RSP -80
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
 CBRANCH (f() INT_EQUAL [f()])
f() CALL func ARG1
 CALL func (RSP + -56) f() f() f()
f(RSP) CALL func (RSP + -72)
0 INT_EQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CAST f(RSP)
(RSP + -56) PTRSUB RSP -56
(RSP + -72) PTRSUB RSP -72
 BRANCH VZERO
f() CALL func [f(RSP)]
f() CALL func ARG1
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
f() CAST f()
 CBRANCH (f() INT_EQUAL 0)
f() CALL func ARG1
0 COPY 0
0 INT_EQUAL f() 0
[f()] LOAD 433 f()
f() CALL func [f()]
 CBRANCH (f() INT_EQUAL 0)
(RSP + -64) PTRSUB RSP -64
(RSP + -72) PTRSUB RSP -72
(RSP + -56) PTRSUB RSP -56
(RSP + -80) PTRSUB RSP -80
 CALL func (RSP + -56) (RSP + -72) (RSP + -72) (RSP + -72)
 CALL func (RSP + -56) (RSP + -64) (RSP + -80) (RSP + -64)
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
 BRANCH VZERO
0 COPY 0
 BRANCH VZERO
1 COPY 1
f() COPY f()
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CALL func f()
0 INT_EQUAL f() 0
 CBRANCH f()
f() CALL func ARG1
 CBRANCH (f() INT_EQUAL 0)
f() CALL func ARG1
f() COPY f()
[f()] LOAD 433 f()
f() CAST f()
(RSP + -64) PTRSUB RSP -64
0 INT_EQUAL f() [f()]
(RSP + -80) PTRSUB RSP -80
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) (RSP + -80) (RSP + -64) (RSP + -80)
0 COPY 0
0 INT_EQUAL f() 0
f() COPY f()
f() CALL func f()
[f()] LOAD 433 f()
f() CAST f()
f() CALL func ARG1
0 INT_EQUAL f() [f()]
f() COPY f()
0 INT_EQUAL f() 0
f() CALL func f()
 BRANCH VZERO
 BRANCH VZERO
f() CALL func f()
0 INT_EQUAL f() 0
 BRANCH VZERO
(RSP + -64) PTRSUB RSP -64
0 COPY 0
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) (RSP + -64) f() (RSP + -64)
f() CALL func f(ARG1)
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func ARG1 f() f() f()
0 INT_EQUAL ARG2 0
0 INT_NOTEQUAL f() ARG3
f() CALL func ARG3
 CALL libcall__Rb_tree_insert_and_rebalance_thunk f() ARG4 ARG3 (ARG1 + 8)
f() CALL func ARG4
 CALL func (RSP + -40) ARG4 ARG4
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(f() + 40) CAST (f() + 40)
(ARG1 + 40) CAST (ARG1 + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(ARG1 + 40) CAST (ARG1 + 40)
([(ARG1 + 40)] + 1) INT_ADD [(ARG1 + 40)] 1
 CBRANCH (ARG2 INT_EQUAL 0)
f() COPY f()
0 INT_NOTEQUAL 0 [(f() + 40)]
(ARG1 + 8) CAST (ARG1 + 8)
(f() + 40) INT_ADD f() 40
 STORE 433 (ARG1 + 40) ([(ARG1 + 40)] + 1)
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CBRANCH (f() INT_NOTEQUAL ARG3)
1 COPY 1
 BRANCH VZERO
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CALL func
f() CAST f()
0 COPY 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 RETURN 0 288230376151711743
288230376151711743 COPY 288230376151711743
f() CALL func ARG1
0 INT_LESS f() ARG2
(ARG2 * 64) INT_LEFT ARG2 6
 RETURN 0
 CALL libcall_operator.new_thunk (ARG2 * 64)
 CBRANCH (f() INT_LESS ARG2)
 CALL libcall___throw_bad_alloc_thunk
 CALL func ARG1 ARG2 0 ARG2
 RETURN 0
f(ARG1) CALL func ARG1
 RETURN 0
 CALL func f(ARG1) 1
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
 RETURN 0
 RETURN 0
(ARG1 + 32) INT_ADD ARG1 32
 CALL func ARG1
 RETURN 0
 CALL func (ARG1 + 32)
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 [f()]
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG2
f() CALL func f()
[f()] LOAD 433 f()
 CALL func (ARG1 + 8)
 RETURN 0
f() CAST f()
 CALL func ARG1 ARG2 (RSP + 16) ARG2 ARG5 ARG6 ARG5 ARG6
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + 16) PTRSUB RSP 16
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
40 INT_ADD 0 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 CALL func ARG1 f() f()
f() CALL func ARG2
 RETURN 0
f() CALL func f()
 CALL func ARG1 ARG2 ARG2
 RETURN 0
f(ARG2) CALL func 32 ARG2
 CALL func ARG3
f(ARG4) CALL func ARG4
 CALL func ARG5
(f() + 40) INT_ADD f() 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(RSP + -40) PTRSUB RSP -40
0 INT_NOTEQUAL 0 [(f() + 40)]
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL f(ARG2) 0
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) f(ARG4) f(ARG4)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func f(ARG2) (RSP + -40)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 ARG2 f(ARG3) f(ARG4) f(ARG5)
f(ARG3) CALL func ARG3
f(ARG4) CALL func ARG4
f(ARG5) CALL func ARG5
 RETURN 0
f(ARG5) CALL func ARG5
f(ARG1) CALL func ARG1
f(ARG2) CALL func 64 ARG2
f() CALL func ARG2
f(ARG3) CALL func ARG3
f(ARG4) CALL func ARG4
 CALL func f(ARG1) f() f(ARG3) f(ARG4) f(ARG5)
0 INT_NOTEQUAL f(ARG2) 0
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
 RETURN 0
 CALL func f(ARG2)
 CALL func ARG1 f() f(ARG2) f(ARG3) f(ARG4)
f() CALL func ARG1
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
f(ARG4) CALL func ARG4
 RETURN 0 f()
f() COPY f()
f() CALL func ARG1 f(ARG3) f(ARG4) f(ARG5)
 CALL func ARG1 f() f()
f() CALL func ARG1 (f() / 2147483647) (f() / 4611686014132420609) f()
f() CALL func ARG1 ARG2 f() ARG2
f(ARG3) CALL func ARG3
f(ARG4) CALL func ARG4
f(ARG5) CALL func ARG5
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL (f() / 4611686014132420609) 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ((f() / 4611686014132420609) INT_EQUAL 0)
(f() + 40) CAST (f() + 40)
f() CALL func f()
(f() / 2147483647) INT_RIGHT f() 64
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -72) PTRSUB RSP -72
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -72) (f() / 2147483647) (f() / 2147483647)
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
 RETURN 0
 CALL func ARG1
VZERO COPY VZERO
 RETURN 0 VZERO
(ARG1 + 8) INT_ADD ARG1 8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -24) PTRSUB RSP -24
40 INT_ADD 0 40
 CALL func (RSP + -24) (ARG1 + 8) (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func ARG1
 RETURN 0
f() CALL func ARG1 f() 4702528 (RSP + -64) (RSP + -81)
f() CALL func ARG1 ARG2 ARG2
f() CALL func ARG1
 CALL func ARG1
f() CALL func (RSP + -82) ARG2 f() ARG2
 CALL func (RSP + -64) ARG2 ARG2
 CBRANCH (f() INT_EQUAL 0)
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
f() CALL func (RSP + -80)
0 INT_EQUAL f() 0
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -80) PTRSUB RSP -80
 CBRANCH f()
f() CALL func (RSP + -80) (RSP + -72) (RSP + -72)
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -72) PTRSUB RSP -72
(f() + 8) INT_ADD f() 8
(RSP + -80) PTRSUB RSP -80
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
(RSP + -81) PTRSUB RSP -81
(RSP + -64) PTRSUB RSP -64
 CALL func (RSP + -56) (RSP + -80) (RSP + -80)
4702528 PTRSUB 0 4702528
(RSP + -80) PTRSUB RSP -80
(RSP + -64) PTRSUB RSP -64
f() CALL func (RSP + -80)
(RSP + -80) PTRSUB RSP -80
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(RSP + -82) PTRSUB RSP -82
1 COPY 1
 RETURN 1
 RETURN 0 (f() + 8)
 CALL libcall___stack_chk_fail_thunk
0 COPY 0
(ARG1 + 8) INT_ADD ARG1 8
(RSP + -24) PTRSUB RSP -24
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
 CALL func (RSP + -24) (ARG1 + 8) (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
([f(ARG1)] - [f(ARG2)]) INT_SUB [f(ARG1)] [f(ARG2)]
 RETURN 0 (([f(ARG1)] - [f(ARG2)]) / 8)
f(ARG1) CAST f(ARG1)
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG2) CAST f(ARG2)
(([f(ARG1)] - [f(ARG2)]) / 8) INT_SRIGHT ([f(ARG1)] - [f(ARG2)]) 3
[f(ARG1)] LOAD 433 f(ARG1)
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
ARG1 COPY ARG1
ARG2 COPY ARG2
 CALL libcall_qsort_thunk f() f() 8 ARG3
f() CALL func (RSP + -56) (RSP + -48) (RSP + -48)
 CBRANCH (1 INT_SLESS f())
(RSP + -56) PTRSUB RSP -56
0 INT_SLESS 1 f()
f() CAST f()
(RSP + -48) PTRSUB RSP -48
 RETURN 0
f() CAST f()
f() CALL func (RSP + -48)
f() COPY f()
(RSP + -48) PTRSUB RSP -48
 BRANCH VZERO
 CALL func (RSP + -24) ARG1 ARG1
(RSP + -24) PTRSUB RSP -24
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
 STORE 433 ARG1 ([ARG1] + 8)
ARG1 COPY ARG1
[ARG1] LOAD 433 ARG1
([ARG1] + 8) INT_ADD [ARG1] 8
 RETURN 0 ARG1
 STORE 433 ARG1 [f(ARG2)]
f(ARG2) CALL func ARG2
 RETURN 0
[f(ARG2)] LOAD 433 f(ARG2)
f(ARG2) CAST f(ARG2)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 8) INT_ADD ARG1 8
 STORE 433 (ARG1 + 32) (ARG1 + 8)
 STORE 433 (ARG1 + 24) (ARG1 + 8)
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 24) CAST (ARG1 + 24)
 STORE 433 (ARG1 + 8) 0
 RETURN 0
(ARG1 + 32) CAST (ARG1 + 32)
 STORE 433 (ARG1 + 16) 0
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 24) INT_ADD ARG1 24
 CALL func ARG1
 STORE 433 (ARG1 + 32) 0
(ARG1 + 40) CAST (ARG1 + 40)
(ARG1 + 32) CAST (ARG1 + 32)
(ARG1 + 16) CAST (ARG1 + 16)
 RETURN 0
 STORE 433 (ARG1 + 16) 0
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 40) 0
 STORE 433 (ARG1 + 8) 0
 STORE 433 (ARG1 + 24) 0
(ARG1 + 24) CAST (ARG1 + 24)
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALLIND [([[f()]] + 32)] [f()] ARG3 [([[f()]] + 32)] ARG3
(ARG1 + 8) INT_ADD ARG1 8
ARG2 COPY ARG2
ARG2 COPY ARG2
(ARG2 + 8) PTRADD ARG2 1 8
ARG2 COPY ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 1 8
ARG2 COPY ARG2
ARG2 COPY ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
ARG2 COPY ARG2
ARG2 COPY ARG2
ARG2 COPY ARG2
f() CALL func 6966272
f() CALL func 6966272
f() CALL func (RSP + -152)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -88)
(RSP + -120) PTRSUB RSP -120
(RSP + -168) PTRSUB RSP -168
6966272 PTRSUB 0 6966272
(f() / 2147483647) SUBPIECE f() 8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -152)
(RSP + -88) PTRSUB RSP -88
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
f() CALL func (f() + 216)
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (f() + 216)
(RSP + -152) PTRSUB RSP -152
 CBRANCH (f() INT_EQUAL 0)
(f() + 216) INT_ADD f() 216
(f() + 216) INT_ADD f() 216
0 INT_EQUAL f() 0
6966272 PTRSUB 0 6966272
(RSP + -152) PTRSUB RSP -152
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -168) (RSP + -120) (RSP + -120)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_EQUAL 0)
([(([ARG2] + (f() * 16)) + 8)] + 72) INT_ADD [(([ARG2] + (f() * 16)) + 8)] 72
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
 CALL func f() (RSP + -120) f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() f(ARG2)
CategorizedOptions.count(Opt->Category) > 0 && "Option has an unregistered category" COPY CategorizedOptions.count(Opt->Category) > 0 && "Option has an unregistered category"
(f() + 1) INT_ADD f() 1
 CBRANCH (f() INT_EQUAL f(ARG2))
(RSP + -120) PTRSUB RSP -120
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
(f() / 2147483647) SUBPIECE f() 8
(RSP + -88) PTRSUB RSP -88
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___assert_fail_thunk CategorizedOptions.count(Opt->Category) > 0 && "Option has an unregistered category" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 1582 0
 RETURN 1
f() CALL func (RSP + -88) ([(([ARG2] + (f() * 16)) + 8)] + 72) ([(([ARG2] + (f() * 16)) + 8)] + 72)
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 1)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func [f()]
f() CALL func
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func
[f()] LOAD 433 f()
f() CALL func (RSP + -280)
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL func [f()]
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
4706269 PTRSUB 0 4706269
4705610 PTRSUB 0 4705610
 CBRANCH (f() INT_EQUAL 0)
 CALL func f() 4706269
[f()] LOAD 433 f()
(RSP + -280) PTRSUB RSP -280
f() CALL func (RSP + -280)
(RSP + -280) PTRSUB RSP -280
0 INT_EQUAL f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f() f()
f() CAST f()
 CALL func f() 4705610
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CAST f()
 CBRANCH (f() INT_NOTEQUAL [40])
 RETURN 1
 RETURN 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
(RSP + -168) PTRSUB RSP -168
(f() / 2147483647) SUBPIECE f() 8
(RSP + -152) PTRSUB RSP -152
(RSP + -120) PTRSUB RSP -120
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -264) (RSP + -120) (RSP + -120)
 CALL libcall___assert_fail_thunk SortedCategories.size() > 0 && "No option categories registered!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp 1565 0
([(ARG2 + 8)] - [ARG2]) INT_SUB [(ARG2 + 8)] [ARG2]
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(f() / 2147483647) SUBPIECE f() 8
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/CommandLine.cpp
(RSP + -264) PTRSUB RSP -264
4476102 PTRSUB 0 4476102
(RSP + -152) PTRSUB RSP -152
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -168) PTRSUB RSP -168
f() CALL func (RSP + -152)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -152)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(([(ARG2 + 8)] - [ARG2]) / 16) INT_SRIGHT ([(ARG2 + 8)] - [ARG2]) 4
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func f() f() 4476102
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -168) (RSP + -120) (RSP + -120)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
(f() / 2147483647) SUBPIECE f() 8
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
SortedCategories.size() > 0 && "No option categories registered!" COPY SortedCategories.size() > 0 && "No option categories registered!"
f() CALL func (RSP + -152)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -152) PTRSUB RSP -152
(f() / 2147483647) SUBPIECE f() 8
f() COPY f()
f() CALL func (RSP + -152)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -264) (RSP + -168) (RSP + -168)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -264) PTRSUB RSP -264
(f() / 2147483647) SUBPIECE f() 8
(RSP + -120) PTRSUB RSP -120
(RSP + -280) PTRSUB RSP -280
4706099 PTRSUB 0 4706099
(f() / 2147483647) SUBPIECE f() 0
 CALL func f() 4706099
[f()] LOAD 433 f()
f() CALL func (RSP + -280)
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
 CALL func f() 4705610
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CAST f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f() f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
4705610 PTRSUB 0 4705610
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func
f() CALL func
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func [f()]
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
f() CAST f()
(RSP + -168) PTRSUB RSP -168
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
[([[f()]] + 32)] LOAD 433 ([[f()]] + 32)
([[f()]] + 32) INT_ADD [[f()]] 32
f() CALL func (RSP + -264) (RSP + -168) (RSP + -168)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -264) PTRSUB RSP -264
 BRANCH VZERO
 CALL func (RSP + -264)
[f()] LOAD 433 f()
f() CALL func (RSP + -264)
(f() / 2147483647) SUBPIECE f() 0
[[f()]] LOAD 433 [f()]
([[f()]] + 32) CAST ([[f()]] + 32)
(RSP + -264) PTRSUB RSP -264
(f() / 2147483647) SUBPIECE f() 8
(RSP + -264) PTRSUB RSP -264
(RSP + -264) PTRSUB RSP -264
 CALL func f() (RSP + -120) f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -264) PTRSUB RSP -264
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -120)
(RSP + -120) PTRSUB RSP -120
(RSP + -120) PTRSUB RSP -120
f() CALL func (RSP + -88) f() f()
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -264)
(RSP + -120) PTRSUB RSP -120
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -88) PTRSUB RSP -88
f() CALL func (RSP + -264)
 CALL func (RSP + -120)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -88) f() f()
 BRANCH VZERO
f() CALL func (RSP + -280)
(f() / 2147483647) SUBPIECE f() 8
 CALL func f() This option category has no options. 
This option category has no options.  COPY This option category has no options. 
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -280) PTRSUB RSP -280
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -264) (RSP + -120) (RSP + -120)
(RSP + -168) PTRSUB RSP -168
f() CALL func
(RSP + -280) PTRSUB RSP -280
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -264) PTRSUB RSP -264
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f()
(RSP + -120) PTRSUB RSP -120
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -88) f() f()
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -280)
(RSP + -120) PTRSUB RSP -120
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -168) (RSP + -120) (RSP + -120)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -88) PTRSUB RSP -88
(f() / 2147483647) SUBPIECE f() 0
(RSP + -88) PTRSUB RSP -88
f() CALL func f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -168) PTRSUB RSP -168
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
 CALL func (RSP + -168)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -152) PTRSUB RSP -152
f() CALL func (RSP + -168)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -264) PTRSUB RSP -264
 CALL func (RSP + -152) (RSP + -264) (RSP + -264)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -168) PTRSUB RSP -168
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -152) PTRSUB RSP -152
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -152)
(([(ARG2 + 8)] - [ARG2]) / 16) INT_SRIGHT ([(ARG2 + 8)] - [ARG2]) 4
(RSP + -120) PTRSUB RSP -120
(RSP + -272) PTRSUB RSP -272
f() CALL func (RSP + -280) (RSP + -272) (RSP + -272)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -88) PTRSUB RSP -88
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -280) (RSP + -120) (RSP + -120)
 CALL func (RSP + -152)
(([(ARG2 + 8)] - [ARG2]) / 16) CAST (([(ARG2 + 8)] - [ARG2]) / 16)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -280) PTRSUB RSP -280
 CBRANCH ((([(ARG2 + 8)] - [ARG2]) / 16) INT_LESSEQUAL f())
(f() / 2147483647) SUBPIECE f() 8
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(RSP + -272) PTRSUB RSP -272
 CALL func (RSP + -88)
0 INT_LESSEQUAL (([(ARG2 + 8)] - [ARG2]) / 16) f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [40]
(RSP + -152) PTRSUB RSP -152
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
[40] LOAD 433 (f() + 40)
f() CALL func (RSP + -152)
(f() / 2147483647) SUBPIECE f() 0
(f() + 40) CAST (f() + 40)
(f() / 2147483647) SUBPIECE f() 0
f() COPY f()
(RSP + -152) PTRSUB RSP -152
(f() / 2147483647) SUBPIECE f() 8
([(ARG2 + 8)] - [ARG2]) INT_SUB [(ARG2 + 8)] [ARG2]
 CALL func (RSP + -272) (RSP + -120) (RSP + -120)
(RSP + -280) PTRSUB RSP -280
(f() / 2147483647) SUBPIECE f() 0
(RSP + -120) PTRSUB RSP -120
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func (RSP + -88) f() f()
 CALL func (RSP + -280)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -280) PTRSUB RSP -280
(RSP + -280) PTRSUB RSP -280
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -280)
0 INT_NOTEQUAL f() 0
0 INT_EQUAL [(ARG1 + 8)] 1
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(ARG1 + 8) CAST (ARG1 + 8)
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f()
(RSP + -88) PTRSUB RSP -88
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
[(([ARG2] + (f() * 16)) + 8)] LOAD 433 (([ARG2] + (f() * 16)) + 8)
(([ARG2] + (f() * 16)) + 8) CAST (([ARG2] + (f() * 16)) + 8)
(f() * 16) INT_MULT f() 16
 RETURN 1
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
0 COPY 0
idx < size() COPY idx < size()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
(([ARG2] + (f() * 16)) + 8) INT_ADD ([ARG2] + (f() * 16)) 8
([ARG2] + (f() * 16)) INT_ADD [ARG2] (f() * 16)
0 INT_EQUAL f() 0
f() CALL func (RSP + -88) ([(([ARG2] + (f() * 16)) + 8)] + 72) ([(([ARG2] + (f() * 16)) + 8)] + 72)
([(([ARG2] + (f() * 16)) + 8)] + 72) INT_ADD [(([ARG2] + (f() * 16)) + 8)] 72
(RSP + -88) PTRSUB RSP -88
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 ARG2
 STORE 433 (ARG1 + 8) ARG3
 RETURN 0
(ARG1 + 20) INT_ADD ARG1 20
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
[(ARG1 + 20)] COPY [(ARG1 + 20)]
(ARG1 + 20) CAST (ARG1 + 20)
 RETURN 0 [(ARG1 + 20)]
0 INT_EQUAL ARG2 1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CBRANCH (ARG2 INT_EQUAL 1)
 RETURN 0
 CBRANCH (f() INT_LESS 2)
 BRANCH VZERO
6966432 PTRSUB 0 6966432
 CALL func 6966432 0
 CALL func [(ARG1 + 8)] 1
 BRANCH VZERO
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func [ARG1] 1
f() CALL func (f() + 216)
6966272 PTRSUB 0 6966272
f() CALL func 6966272
0 INT_LESS f() 2
(f() + 216) INT_ADD f() 216
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
 CALL func ARG1
 RETURN 0
[ARG1] LOAD 433 ARG1
(ARG1 + 24) PTRADD ARG1 3 8
0 INT_ZEXT 0
[ARG1] CAST [ARG1]
[ARG1] CAST [ARG1]
([ARG1] & -256) INT_AND [ARG1] -256
([ARG1] & -256) INT_OR ([ARG1] & -256) 0
0 INT_EQUAL [ARG1] (ARG1 + 24)
 RETURN 0 ([ARG1] & -256)
 RETURN 0
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 CALL func [ARG1] [(ARG1 + 8)] [(ARG1 + 8)]
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL libcall_free_thunk [ARG1]
 CALL func ARG1
 RETURN 0
(ARG1 + 176) INT_ADD ARG1 176
f() CALL func 6967032
 CBRANCH ~(f())
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
6967032 PTRSUB 0 6967032
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
~(f()) BOOL_NEGATE f()
 CBRANCH (f() INT_NOTEQUAL f())
(f() - f()) INT_SUB f() f()
(RSP + -2104) PTRSUB RSP -2104
0 INT_LESSEQUAL ((f() - f()) / 16) f()
(RSP + -2104) COPY (RSP + -2104)
((f() - f()) / 16) CAST ((f() - f()) / 16)
(RSP + -2104) COPY (RSP + -2104)
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
(f() - f()) INT_SUB f() f()
(RSP + -2104) PTRSUB RSP -2104
f() COPY f()
0 COPY 0
 CBRANCH (((f() - f()) / 16) INT_LESSEQUAL f())
0 INT_NOTEQUAL f() f()
(RSP + -2104) PTRSUB RSP -2104
 CBRANCH (f() INT_NOTEQUAL f())
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
 CBRANCH (f() INT_NOTEQUAL 1)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CALL func (RSP + -2104)
(f() - f()) INT_SUB f() f()
f() COPY f()
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(RSP + -2104) PTRSUB RSP -2104
 CBRANCH (((f() - f()) / 16) INT_LESSEQUAL f())
(RSP + -2104) COPY (RSP + -2104)
(RSP + -2104) COPY (RSP + -2104)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
0 INT_LESSEQUAL ((f() - f()) / 16) f()
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -2104) PTRSUB RSP -2104
((f() - f()) / 16) CAST ((f() - f()) / 16)
0 INT_NOTEQUAL f() 1
6967160 PTRSUB 0 6967160
f() CALL func 6967160
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
0 COPY 0
idx < size() COPY idx < size()
0 COPY 0
(f() + 1) INT_ADD f() 1
(RSP + -2104) PTRSUB RSP -2104
f() CALL func 6967160
6967160 PTRSUB 0 6967160
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
 CALL func (RSP + -2104)
(RSP + -2104) PTRSUB RSP -2104
0 COPY 0
 BRANCH VZERO
 CALL func (ARG1 + 176) (RSP + -2104) 1 (ARG1 + 176)
(RSP + -2104) PTRSUB RSP -2104
(f() * 16) INT_MULT f() 16
(f() + 1) INT_ADD f() 1
 CALLIND [([[(((f() * 16) + f()) + 8)]] + 40)] [(((f() * 16) + f()) + 8)] f(RSP) f()
[f(RSP)] LOAD 433 f(RSP)
[([[(((f() * 16) + f()) + 8)]] + 40)] LOAD 433 ([[(((f() * 16) + f()) + 8)]] + 40)
[(((f() * 16) + f()) + 8)] LOAD 433 (((f() * 16) + f()) + 8)
(RSP + -2104) PTRSUB RSP -2104
((f() * 16) + f()) INT_ADD f() (f() * 16)
(f() * 16) INT_MULT f() 16
[[(((f() * 16) + f()) + 8)]] LOAD 433 [(((f() * 16) + f()) + 8)]
(((f() * 16) + f()) + 8) CAST (((f() * 16) + f()) + 8)
 BRANCH VZERO
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
(f() - f()) INT_SUB f() f()
0 INT_NOTEQUAL f() f()
([[(((f() * 16) + f()) + 8)]] + 40) INT_ADD [[(((f() * 16) + f()) + 8)]] 40
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
0 COPY 0
idx < size() COPY idx < size()
 RETURN 1
([[(((f() * 16) + f()) + 8)]] + 40) CAST ([[(((f() * 16) + f()) + 8)]] + 40)
(((f() * 16) + f()) + 8) INT_ADD ((f() * 16) + f()) 8
f(RSP) CAST f(RSP)
f(RSP) CALL func (RSP + -2264) (RSP + -2256) (RSP + -2256)
(RSP + -2264) PTRSUB RSP -2264
(RSP + -2256) PTRSUB RSP -2256
(RSP + -2104) PTRSUB RSP -2104
(((f() * 16) + f()) + 8) INT_ADD ((f() * 16) + f()) 8
((f() * 16) + f()) INT_ADD f() (f() * 16)
[[(((f() * 16) + f()) + 8)]] LOAD 433 [(((f() * 16) + f()) + 8)]
[(((f() * 16) + f()) + 8)] LOAD 433 (((f() * 16) + f()) + 8)
([[(((f() * 16) + f()) + 8)]] + 24) CAST ([[(((f() * 16) + f()) + 8)]] + 24)
([[(((f() * 16) + f()) + 8)]] + 24) INT_ADD [[(((f() * 16) + f()) + 8)]] 24
(((f() * 16) + f()) + 8) CAST (((f() * 16) + f()) + 8)
(RSP + -2104) PTRSUB RSP -2104
VZERO CALLIND [([[(((f() * 16) + f()) + 8)]] + 24)] [(((f() * 16) + f()) + 8)]
[([[(((f() * 16) + f()) + 8)]] + 24)] LOAD 433 ([[(((f() * 16) + f()) + 8)]] + 24)
 RETURN 1
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
6966272 PTRSUB 0 6966272
 CALL func f()
f() CALL func 6966272
 RETURN 0
 STORE 433 ARG1 VZERO
 STORE 433 ARG2 VZERO
 RETURN 0 0
0 COPY 0
(ARG1 / 1048576) INT_RIGHT ARG1 20
(ARG1 / 65536) INT_RIGHT ARG1 16
(ARG1 / 16) INT_RIGHT ARG1 4
(ARG1 / 256) INT_RIGHT ARG1 8
 STORE 433 ARG2 (15 & (ARG1 / 256))
f(ARG1) LOAD 433 ARG2
(15 & (ARG1 / 256)) LOAD 433 ARG2
 STORE 433 ARG2 (f(ARG1) + (255 & (ARG1 / 1048576)))
f(ARG1) LOAD 433 ARG2
f(ARG1) LOAD 433 ARG2
f(ARG1) LOAD 433 ARG3
 STORE 433 ARG3 (f(ARG1) + ((15 & (ARG1 / 65536)) * 16))
 STORE 433 ARG3 (15 & (ARG1 / 16))
(15 & (ARG1 / 256)) INT_AND (ARG1 / 256) 15
 CBRANCH ((15 & (ARG1 / 256)) INT_EQUAL 6)
0 INT_EQUAL (15 & (ARG1 / 256)) 6
 RETURN 0
(15 & (ARG1 / 16)) INT_AND (ARG1 / 16) 15
 CBRANCH (f(ARG1) INT_EQUAL 15)
(f(ARG1) + (255 & (ARG1 / 1048576))) INT_ADD f(ARG1) (255 & (ARG1 / 1048576))
(255 & (ARG1 / 1048576)) INT_AND (ARG1 / 1048576) 255
 CBRANCH (f(ARG1) INT_EQUAL 15)
(f(ARG1) + ((15 & (ARG1 / 65536)) * 16)) INT_ADD f(ARG1) ((15 & (ARG1 / 65536)) * 16)
(15 & (ARG1 / 65536)) INT_AND (ARG1 / 65536) 15
0 INT_EQUAL f(ARG1) 15
((15 & (ARG1 / 65536)) * 16) INT_MULT (15 & (ARG1 / 65536)) 16
0 INT_EQUAL f(ARG1) 15
0 INT_EQUAL ARG1 7
0 INT_EQUAL ARG1 6
0 INT_EQUAL ARG1 10
0 INT_EQUAL ARG1 9
0 INT_EQUAL ARG1 3
0 INT_EQUAL ARG1 2
0 INT_EQUAL ARG1 5
0 INT_EQUAL ARG1 4
0 INT_EQUAL ARG1 2147483652
VZERO CALLOTHER 40 ARG1
0 INT_EQUAL ARG1 2147483651
0 INT_EQUAL ARG1 1
0 INT_EQUAL ARG1 0
0 INT_EQUAL ARG1 13
0 INT_EQUAL ARG1 11
0 INT_EQUAL ARG1 2147483650
0 INT_EQUAL ARG1 15
 STORE 433 ARG3 [f()]
 STORE 433 ARG4 [(f() + 4)]
 STORE 433 ARG5 [(f() + 12)]
 STORE 433 ARG6 [(f() + 8)]
VZERO CALLOTHER 48 7
 BRANCH 13
VZERO CALLOTHER 47 6
 BRANCH 15
VZERO CALLOTHER 50 10
 BRANCH 9
VZERO CALLOTHER 49 9
 BRANCH 11
VZERO CALLOTHER 44 3
 BRANCH 21
VZERO CALLOTHER 43 2
 BRANCH 23
VZERO CALLOTHER 46 5
 BRANCH 17
VZERO CALLOTHER 45 4
 BRANCH 19
 BRANCH 29
 BRANCH 31
VZERO CALLOTHER 42 1
 BRANCH 25
VZERO CALLOTHER 41 0
 BRANCH 27
 CBRANCH (ARG1 INT_EQUAL 2147483650)
 CBRANCH (ARG1 INT_EQUAL 15)
 CBRANCH (ARG1 INT_EQUAL 2147483652)
 BRANCH 33
 CBRANCH (ARG1 INT_EQUAL 2147483651)
VZERO CALLOTHER 56 2147483652
VZERO CALLOTHER 55 2147483651
[(f() + 4)] LOAD 433 (f() + 4)
[(f() + 12)] LOAD 433 (f() + 12)
[(f() + 8)] LOAD 433 (f() + 8)
VZERO CALLOTHER 52 13
 BRANCH 5
VZERO CALLOTHER 51 11
 BRANCH 7
[f()] LOAD 433 f()
VZERO CALLOTHER 54 2147483650
 BRANCH 1
VZERO CALLOTHER 53 15
 BRANCH 3
(f() + 4) PTRADD f() 1 4
 CBRANCH (ARG1 INT_EQUAL 10)
 CBRANCH (ARG1 INT_EQUAL 9)
 CBRANCH (ARG1 INT_EQUAL 13)
 CBRANCH (ARG1 INT_EQUAL 11)
 RETURN 0 0
 CBRANCH (ARG1 INT_EQUAL 5)
 CBRANCH (ARG1 INT_EQUAL 4)
VZERO CAST VZERO
VZERO CAST VZERO
 CBRANCH (ARG1 INT_EQUAL 7)
 CBRANCH (ARG1 INT_EQUAL 6)
 CBRANCH (ARG1 INT_EQUAL 1)
VZERO CAST VZERO
VZERO CAST VZERO
0 COPY 0
 CBRANCH (ARG1 INT_EQUAL 0)
VZERO CAST VZERO
VZERO CAST VZERO
 CBRANCH (ARG1 INT_EQUAL 3)
VZERO CAST VZERO
VZERO CAST VZERO
 CBRANCH (ARG1 INT_EQUAL 2)
VZERO CAST VZERO
VZERO CAST VZERO
VZERO CAST VZERO
VZERO CAST VZERO
(f() + 8) PTRADD f() 2 4
(f() + 12) PTRADD f() 3 4
VZERO CAST VZERO
VZERO CAST VZERO
VZERO CAST VZERO
VZERO CAST VZERO
VZERO CAST VZERO
 STORE 433 ARG2 [f()]
 STORE 433 ARG3 [(f() + 4)]
 STORE 433 ARG4 [(f() + 12)]
 STORE 433 ARG5 [(f() + 8)]
0 INT_EQUAL ARG1 1
0 INT_EQUAL ARG1 0
0 INT_EQUAL ARG1 3
0 INT_EQUAL ARG1 2
0 INT_EQUAL ARG1 2147483650
0 INT_EQUAL ARG1 15
0 INT_EQUAL ARG1 2147483652
VZERO CALLOTHER 40 ARG1
0 INT_EQUAL ARG1 2147483651
0 INT_EQUAL ARG1 10
0 INT_EQUAL ARG1 9
0 INT_EQUAL ARG1 13
0 INT_EQUAL ARG1 11
0 INT_EQUAL ARG1 5
0 INT_EQUAL ARG1 4
0 INT_EQUAL ARG1 7
0 INT_EQUAL ARG1 6
 CBRANCH (ARG1 INT_EQUAL 3)
 CBRANCH (ARG1 INT_EQUAL 2)
 CBRANCH (ARG1 INT_EQUAL 5)
 CBRANCH (ARG1 INT_EQUAL 4)
VZERO CAST VZERO
VZERO CAST VZERO
VZERO CAST VZERO
VZERO CAST VZERO
 CBRANCH (ARG1 INT_EQUAL 1)
0 COPY 0
 CBRANCH (ARG1 INT_EQUAL 0)
VZERO CAST VZERO
VZERO CAST VZERO
VZERO CAST VZERO
VZERO CAST VZERO
VZERO CAST VZERO
VZERO CAST VZERO
VZERO CAST VZERO
VZERO CAST VZERO
VZERO CAST VZERO
VZERO CAST VZERO
(f() + 4) PTRADD f() 1 4
VZERO CAST VZERO
VZERO CAST VZERO
(f() + 8) PTRADD f() 2 4
(f() + 12) PTRADD f() 3 4
VZERO CAST VZERO
VZERO CALLOTHER 42 1
 BRANCH 25
VZERO CALLOTHER 41 0
 BRANCH 27
VZERO CALLOTHER 44 3
 BRANCH 21
VZERO CALLOTHER 43 2
 BRANCH 23
 CBRANCH (ARG1 INT_EQUAL 2147483652)
 BRANCH 33
 CBRANCH (ARG1 INT_EQUAL 2147483651)
 BRANCH 29
 BRANCH 31
 CBRANCH (ARG1 INT_EQUAL 13)
 RETURN 0 0
 CBRANCH (ARG1 INT_EQUAL 11)
 CBRANCH (ARG1 INT_EQUAL 2147483650)
 CBRANCH (ARG1 INT_EQUAL 15)
 CBRANCH (ARG1 INT_EQUAL 7)
 CBRANCH (ARG1 INT_EQUAL 6)
 CBRANCH (ARG1 INT_EQUAL 10)
 CBRANCH (ARG1 INT_EQUAL 9)
[(f() + 12)] LOAD 433 (f() + 12)
[(f() + 8)] LOAD 433 (f() + 8)
[f()] LOAD 433 f()
VZERO CALLOTHER 54 2147483650
 BRANCH 1
VZERO CALLOTHER 53 15
 BRANCH 3
VZERO CALLOTHER 56 2147483652
VZERO CALLOTHER 55 2147483651
[(f() + 4)] LOAD 433 (f() + 4)
VZERO CALLOTHER 50 10
 BRANCH 9
VZERO CALLOTHER 49 9
 BRANCH 11
VZERO CALLOTHER 52 13
 BRANCH 5
VZERO CALLOTHER 51 11
 BRANCH 7
VZERO CALLOTHER 46 5
 BRANCH 17
VZERO CALLOTHER 45 4
 BRANCH 19
VZERO CALLOTHER 48 7
 BRANCH 13
VZERO CALLOTHER 47 6
 BRANCH 15
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -84) PTRSUB RSP -84
0 COPY 0
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(RSP + -88) PTRSUB RSP -88
(f() + 40) CAST (f() + 40)
(RSP + -80) PTRSUB RSP -80
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -76) PTRSUB RSP -76
0 COPY 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 COPY 0
0 COPY 0
f() CALL func 1 (RSP + -88) (RSP + -84) (RSP + -80) (RSP + -76)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CBRANCH (0 INT_EQUAL 0)
 BRANCH VZERO
nehalem COPY nehalem
silvermont COPY silvermont
 CBRANCH f()
0 INT_NOTEQUAL (f() & 65536) 0
 CBRANCH ((f() & 65536) INT_NOTEQUAL 0)
0 COPY 0
(f() & 65536) INT_AND f() 65536
 CBRANCH f()
0 INT_LESS f() 80
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_LESS 80)
 CALL func (RSP + -56) btver1
btver1 COPY btver1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 10)
 BRANCH VZERO
 CALL func (RSP + -56) athlon
 CALL func (RSP + -56) athlon-xp
athlon-xp COPY athlon-xp
 BRANCH VZERO
athlon COPY athlon
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CBRANCH ((f() & 536870912) INT_EQUAL 0)
 BRANCH VZERO
 CALL func (RSP + -56) x86-64
(RSP + -56) PTRSUB RSP -56
 CBRANCH (0 INT_EQUAL 0)
x86-64 COPY x86-64
 CBRANCH (0 INT_EQUAL 0)
(RSP + -56) PTRSUB RSP -56
pentium3 COPY pentium3
 BRANCH VZERO
 CALL func (RSP + -56) pentium3
 CBRANCH (0 INT_EQUAL 0)
 CBRANCH f()
 CBRANCH f()
0 COPY 0
0 INT_EQUAL (f() & 224) 224
(f() & 224) INT_AND f() 224
 CBRANCH ((f() & 224) INT_EQUAL 224)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
AuthenticAMD COPY AuthenticAMD
 CBRANCH (f() INT_EQUAL 0)
(RSP + -28) PTRSUB RSP -28
f() CALL libcall_memcmp_thunk (RSP + -28) AuthenticAMD 12
 BRANCHIND f()
 CBRANCH (0 INT_EQUAL 402653184)
0 COPY 0
(RSP + -76) PTRSUB RSP -76
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
f() CALL func (RSP + -88) (RSP + -76) (RSP + -76)
(RSP + -88) PTRSUB RSP -88
 CBRANCH f()
 BRANCH VZERO
haswell COPY haswell
 CALL func (RSP + -56) haswell
 CBRANCH f()
(RSP + -56) PTRSUB RSP -56
 CBRANCH ((f() & 2097152) INT_EQUAL 0)
bdver1 COPY bdver1
 CALL func (RSP + -56) bdver2
 BRANCH VZERO
 CALL func (RSP + -56) bdver1
bdver2 COPY bdver2
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CBRANCH (0 INT_EQUAL 0)
(RSP + -56) PTRSUB RSP -56
 CBRANCH (0 INT_EQUAL 0)
 CALL func (RSP + -56) f(nehalem , silvermont) (RSP + -56)
 BRANCH VZERO
 CBRANCH ((f() & 524288) INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_EQUAL 1)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH f()
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) broadwell
broadwell COPY broadwell
 CBRANCH (f() INT_NOTEQUAL 0)
 CALL func (RSP + -56) pentium
 BRANCH VZERO
0 INT_LESS f() 4
 CBRANCH (f() INT_LESS 4)
pentium COPY pentium
(RSP + -56) PTRSUB RSP -56
 CBRANCH (0 INT_EQUAL 0)
 BRANCH VZERO
bonnell COPY bonnell
core2 COPY core2
 CBRANCH (f() INT_EQUAL 1)
 CALL func (RSP + -56) opteron
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_EQUAL 5)
0 INT_EQUAL f() 5
opteron COPY opteron
 CBRANCH ((f() & 536870912) INT_EQUAL 0)
 BRANCH VZERO
pentium4 COPY pentium4
x86-64 COPY x86-64
0 INT_AND 0 8388608
0 INT_EQUAL 0 0
0 INT_EQUAL f() 0
(RSP + -68) PTRSUB RSP -68
(RSP + -72) PTRSUB RSP -72
(RSP + -88) PTRSUB RSP -88
0 INT_AND 0 402653184
0 INT_EQUAL 0 402653184
 CALL func 2147483649 (RSP + -88) (RSP + -84) (RSP + -80) (RSP + -76)
0 COPY 0
GenuineIntel COPY GenuineIntel
(RSP + -64) PTRSUB RSP -64
(RSP + -28) PTRSUB RSP -28
0 INT_EQUAL (f() & 536870912) 0
(RSP + -20) PTRSUB RSP -20
(RSP + -28) PTRSUB RSP -28
 CALL func 0 (RSP + -72) (RSP + -68) (RSP + -72)
 CBRANCH f()
0 INT_AND 0 1
(RSP + -24) PTRSUB RSP -24
0 INT_EQUAL 0 0
(f() & 536870912) INT_AND f() 536870912
0 INT_AND 0 1048576
0 INT_EQUAL 0 0
 BRANCH VZERO
402653184 COPY 402653184
(f() & 2097152) INT_AND f() 2097152
0 INT_AND 0 Symbol
0 INT_EQUAL 0 0
(RSP + -56) PTRSUB RSP -56
0 INT_EQUAL (f() & 2097152) 0
 CALL func (RSP + -56) generic
0 INT_AND 0 33554432
0 INT_EQUAL 0 0
0 INT_AND 0 512
0 INT_EQUAL 0 0
0 COPY 0
 CALL func 0 (RSP + -64) (RSP + -28) (RSP + -20) (RSP + -24)
(RSP + -80) PTRSUB RSP -80
0 INT_AND 0 524288
0 INT_EQUAL 0 0
f() CALL libcall_memcmp_thunk (RSP + -28) GenuineIntel 12
(RSP + -84) PTRSUB RSP -84
(RSP + -76) PTRSUB RSP -76
0 INT_AND 0 67108864
0 INT_EQUAL 0 0
0 INT_LESS f() 7
 CBRANCH (f() INT_LESS 7)
generic COPY generic
 CBRANCH f()
 CBRANCH (f() INT_LESS 9)
0 INT_EQUAL f() 10
 CBRANCH (5 INT_LESS f())
0 INT_LESS 5 f()
 BRANCH VZERO
1 COPY 1
 CBRANCH (0 INT_EQUAL 0)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) f(bonnell , core2) (RSP + -56)
 BRANCH VZERO
 CBRANCH f()
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) btver1
 BRANCH VZERO
btver1 COPY btver1
 CALL func (RSP + -56) btver2
btver2 COPY btver2
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
 CBRANCH f()
0 COPY 0
 CBRANCH (f() INT_LESS 48)
bdver3 COPY bdver3
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_LESS 16)
 CALL func (RSP + -56) bdver3
 BRANCH VZERO
0 INT_LESS f() 16
 CALL libcall___stack_chk_fail_thunk
(f() # f()) PIECE f() f()
 RETURN 0 (f() # f())
 RETURN 1
 CBRANCH ((f() & 536870912) INT_EQUAL 0)
 BRANCH VZERO
x86-64 COPY x86-64
pentium4 COPY pentium4
 CBRANCH (f() INT_EQUAL 4)
 CALL func (RSP + -56) pentium-mmx
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
pentium-mmx COPY pentium-mmx
(RSP + -56) PTRSUB RSP -56
generic COPY generic
 CALL func (RSP + -56) generic
 BRANCHIND f()
 CALL func (RSP + -56) pentium-m
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
pentium-m COPY pentium-m
 CBRANCH (f() INT_EQUAL 4)
 BRANCH VZERO
athlon-tbird COPY athlon-tbird
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) athlon-tbird
pentiumpro COPY pentiumpro
 BRANCH VZERO
 CALL func (RSP + -56) pentium2
pentium2 COPY pentium2
 CALL func (RSP + -56) pentiumpro
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
0 INT_EQUAL f() 4
(RSP + -56) PTRSUB RSP -56
pentium COPY pentium
 CALL func (RSP + -56) pentium
 BRANCH VZERO
athlon-fx COPY athlon-fx
athlon64 COPY athlon64
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) athlon64
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) athlon-fx
 BRANCH VZERO
 CALL func (RSP + -56) sandybridge
sandybridge COPY sandybridge
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 CBRANCH (0 INT_EQUAL 6)
0 INT_EQUAL 0 6
0 INT_AND 0 6
 BRANCH VZERO
1 COPY 1
(f() & 32) INT_AND f() 32
 CBRANCH ((f() & 32) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (f() & 32) 0
athlon-mp COPY athlon-mp
 BRANCH VZERO
0 INT_EQUAL f() 4
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) athlon-mp
 CBRANCH f()
(RSP + -56) PTRSUB RSP -56
4720618 PTRSUB 0 4720618
 BRANCH VZERO
 CALL func (RSP + -56) 4720618
 CBRANCH ((f() & 536870912) INT_EQUAL 0)
 BRANCH VZERO
prescott COPY prescott
nocona COPY nocona
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) penryn
 BRANCH VZERO
penryn COPY penryn
 CBRANCH (0 INT_EQUAL 0)
 CALL func (RSP + -56) k8-sse3
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
0 INT_EQUAL f() 1
k8-sse3 COPY k8-sse3
 CALL func (RSP + -56) bdver4
 BRANCH VZERO
0 INT_LESS f() 48
bdver4 COPY bdver4
(RSP + -56) PTRSUB RSP -56
(RSP + -84) PTRSUB RSP -84
0 INT_EQUAL f() 1
f() CALL func 7 0 (RSP + -88) (RSP + -84) (RSP + -80) (RSP + -76)
(RSP + -88) PTRSUB RSP -88
(RSP + -76) PTRSUB RSP -76
(RSP + -80) PTRSUB RSP -80
 BRANCH VZERO
1 COPY 1
(f() & 524288) INT_AND f() 524288
0 INT_NOTEQUAL (f() & 524288) 0
 BRANCH VZERO
1 COPY 1
 BRANCHIND f()
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
4720675 PTRSUB 0 4720675
0 INT_NOTEQUAL f() 0
0 INT_LESS f() 9
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) f(pentium4 , x86-64) (RSP + -56)
(RSP + -56) PTRSUB RSP -56
bonnell COPY bonnell
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
silvermont COPY silvermont
 BRANCH VZERO
 CALL func (RSP + -56) 4720451
4720451 PTRSUB 0 4720451
(RSP + -56) PTRSUB RSP -56
4720670 PTRSUB 0 4720670
pentium COPY pentium
geode COPY geode
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 CALL func (RSP + -56) 4720670
 CALL func (RSP + -56) 4720675
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) geode
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) pentium
 CALL func (RSP + -56) 4720446
(RSP + -56) PTRSUB RSP -56
4720446 PTRSUB 0 4720446
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) 4720451
(RSP + -56) PTRSUB RSP -56
4720451 PTRSUB 0 4720451
 CALL func (RSP + -56) 4720667
4720667 PTRSUB 0 4720667
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) generic
(RSP + -56) PTRSUB RSP -56
generic COPY generic
 BRANCH VZERO
 BRANCH VZERO
 CALL func (RSP + -56) btver1
btver1 COPY btver1
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 CALL func (RSP + -56) amdfam10
amdfam10 COPY amdfam10
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
 CALL func (RSP + -56) generic
(RSP + -56) PTRSUB RSP -56
generic COPY generic
pentium2 COPY pentium2
pentium3 COPY pentium3
 BRANCH VZERO
 CALL func (RSP + -56) pentium2
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) pentiumpro
(RSP + -56) PTRSUB RSP -56
pentiumpro COPY pentiumpro
 CALL func (RSP + -56) f(nocona , prescott) (RSP + -56)
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
core2 COPY core2
 CALL func (RSP + -56) nehalem
(RSP + -56) PTRSUB RSP -56
nehalem COPY nehalem
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 CALL func (RSP + -56) penryn
(RSP + -56) PTRSUB RSP -56
penryn COPY penryn
 CALL func (RSP + -56) f(pentium4 , x86-64) (RSP + -56)
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
 BRANCH VZERO
 CALL func (RSP + -56) westmere
(RSP + -56) PTRSUB RSP -56
westmere COPY westmere
pentium-m COPY pentium-m
 BRANCH VZERO
 BRANCH VZERO
 CALL func (RSP + -56) pentium-m
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
 CALL func (RSP + -56) pentium3
 CALL func (RSP + -56) core2
(RSP + -56) PTRSUB RSP -56
yonah COPY yonah
 CALL func (RSP + -56) yonah
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
 BRANCHIND f()
 CALL func (RSP + -56) silvermont
sandybridge COPY sandybridge
 BRANCH VZERO
 CALL func (RSP + -56) haswell
haswell COPY haswell
 CALL func (RSP + -56) sandybridge
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) ivybridge
(RSP + -56) PTRSUB RSP -56
ivybridge COPY ivybridge
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 CALL func (RSP + -56) broadwell
broadwell COPY broadwell
 CALL func (RSP + -56) skylake
skylake COPY skylake
 CALL func (RSP + -56) bonnell
 BRANCH VZERO
 BRANCHIND f()
 BRANCH VZERO
ARG1 COPY ARG1
ARG1 COPY ARG1
f() CALL libcall_memcmp_thunk apple ARG1 5
0 INT_EQUAL ARG2 5
ARG2 COPY ARG2
ARG2 COPY ARG2
(f(RSP) + 16) PTRADD f(RSP) 2 8
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 COPY 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
[[(f(RSP) + 16)]] LOAD 433 [(f(RSP) + 16)]
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f(RSP) COPY f(RSP)
 CBRANCH (f(RSP) INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
12 COPY 12
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
(f() + 40) INT_ADD f() 40
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
0 INT_NOTEQUAL f() [(f() + 40)]
f(RSP) COPY f(RSP)
0 COPY 0
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_EQUAL [(f(RSP) + 16)] 0
f(RSP) COPY f(RSP)
 CBRANCH f()
1 COPY 1
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
0 INT_EQUAL f(RSP) 0
0 INT_NOTEQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_NOTEQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
f(RSP) COPY f(RSP)
(RSP + -40) PTRSUB RSP -40
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f() COPY f()
f(RSP) COPY f(RSP)
 CBRANCH f()
5 COPY 5
(f(RSP) + 16) PTRADD f(RSP) 2 8
6 COPY 6
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(RSP + -40) PTRSUB RSP -40
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
2 COPY 2
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
3 COPY 3
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
4 COPY 4
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
10 COPY 10
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f() + 40) CAST (f() + 40)
11 COPY 11
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
7 COPY 7
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
8 COPY 8
0 INT_EQUAL [(f(RSP) + 16)] 0
9 COPY 9
 CBRANCH (ARG2 INT_EQUAL 5)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 3)
[f(RSP)] LOAD 433 f(RSP)
4724365 PTRSUB 0 4724365
0 COPY 0
f() CALL libcall_memcmp_thunk 4724365 [f(RSP)] 3
 CBRANCH (f() INT_NOTEQUAL 0)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 COPY 0
0 INT_EQUAL [(f(RSP) + 8)] 3
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 3)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 4)
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
0 COPY 0
4724329 PTRSUB 0 4724329
f() CALL libcall_memcmp_thunk 4724329 [f(RSP)] 4
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 3)
f() CALL libcall_memcmp_thunk 4724338 [f(RSP)] 3
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
4724338 PTRSUB 0 4724338
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
f(RSP) COPY f(RSP)
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 6
(f(RSP) + 8) PTRADD f(RSP) 1 8
 STORE 433 (f(RSP) + 16) (RSP + -392)
(RSP + -392) PTRSUB RSP -392
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -384)
(RSP + -384) PTRSUB RSP -384
(f(RSP) + 16) PTRADD f(RSP) 2 8
4724350 PTRSUB 0 4724350
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk 4724350 [f(RSP)] 3
 CBRANCH (f() INT_NOTEQUAL 0)
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
1 COPY 1
1 COPY 1
 BRANCH VZERO
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -360)
(RSP + -360) PTRSUB RSP -360
myriad COPY myriad
f(RSP) COPY f(RSP)
0 INT_EQUAL f() 0
f() CALL libcall_memcmp_thunk myriad [f(RSP)] 6
[f(RSP)] LOAD 433 f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 3
0 COPY 0
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 3)
f(RSP) COPY f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
(RSP + -372) PTRSUB RSP -372
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -372)
f() CALL libcall_memcmp_thunk 4724354 [f(RSP)] 3
4724354 PTRSUB 0 4724354
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
(RSP + -40) COPY (RSP + -40)
0 INT_EQUAL f(ARG2) 2
 CBRANCH (f(ARG2) INT_EQUAL 2)
0 COPY 0
 STORE 433 (f(RSP) + 16) (RSP + -356)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -356) PTRSUB RSP -356
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 8)] 3
0 COPY 0
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 3)
0 COPY 0
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 3)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 3
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 INT_EQUAL [(f(RSP) + 8)] 6
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 COPY 0
 RETURN 0 f(RSP)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
[f(RSP)] LOAD 433 f(RSP)
4724342 PTRSUB 0 4724342
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk 4724342 [f(RSP)] 3
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
(RSP + -368) PTRSUB RSP -368
 STORE 433 (f(RSP) + 16) (RSP + -368)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -396) PTRSUB RSP -396
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 3
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 3)
0 COPY 0
(RSP + -352) PTRSUB RSP -352
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -352)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 STORE 433 (f(RSP) + 16) (RSP + -388)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -388) PTRSUB RSP -388
4724334 PTRSUB 0 4724334
f() CALL libcall_memcmp_thunk 4724334 [f(RSP)] 3
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
 STORE 433 (f(RSP) + 16) (RSP + -380)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -380) PTRSUB RSP -380
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -364)
(RSP + -364) PTRSUB RSP -364
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk nvidia [f(RSP)] 6
[f(RSP)] LOAD 433 f(RSP)
nvidia COPY nvidia
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 4
f(RSP) COPY f(RSP)
 BRANCH VZERO
1 COPY 1
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 3
f(RSP) COPY f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 STORE 433 (f(RSP) + 16) (RSP + -376)
(RSP + -376) PTRSUB RSP -376
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 3
1 COPY 1
 BRANCH VZERO
4724346 PTRSUB 0 4724346
f() CALL libcall_memcmp_thunk 4724346 [f(RSP)] 3
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 BRANCH VZERO
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -40) PTRSUB RSP -40
[[(f(RSP) + 16)]] COPY [[(f(RSP) + 16)]]
0 INT_EQUAL f() 0
f() CALL libcall_memcmp_thunk 4724326 f(ARG1) 2
apple COPY apple
4724326 PTRSUB 0 4724326
(RSP + -40) COPY (RSP + -40)
0 INT_NOTEQUAL f() 0
ARG1 COPY ARG1
f() CALL libcall_memcmp_thunk eabihf ARG1 6
ARG1 COPY ARG1
ARG2 COPY ARG2
0 INT_LESS ARG2 6
ARG2 COPY ARG2
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
5 COPY 5
f(RSP) COPY f(RSP)
1 COPY 1
f() COPY f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH f()
8 COPY 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
2 COPY 2
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
(RSP + -40) PTRSUB RSP -40
(f(RSP) + 16) PTRADD f(RSP) 2 8
4 COPY 4
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
11 COPY 11
f(RSP) COPY f(RSP)
12 COPY 12
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
13 COPY 13
9 COPY 9
 CBRANCH (ARG2 INT_LESS 6)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH f()
10 COPY 10
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
[[(f(RSP) + 16)]] LOAD 433 [(f(RSP) + 16)]
 CBRANCH f()
f(RSP) COPY f(RSP)
0 INT_EQUAL f(RSP) 0
 CBRANCH (f(RSP) INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH ([(f(RSP) + 16)] INT_NOTEQUAL 0)
(RSP + -40) PTRSUB RSP -40
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 COPY 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
0 COPY 0
[(f() + 40)] LOAD 433 (f() + 40)
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH f()
6 COPY 6
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
3 COPY 3
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f() + 40) CAST (f() + 40)
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
f(RSP) COPY f(RSP)
7 COPY 7
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH (3 INT_LESS [(f(RSP) + 8)])
4724808 PTRSUB 0 4724808
0 COPY 0
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk 4724808 [f(RSP)] 4
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
0 INT_LESS 5 [(f(RSP) + 8)]
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 COPY 0
 CBRANCH (5 INT_LESS [(f(RSP) + 8)])
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 STORE 433 (f(RSP) + 16) (RSP + -396)
(RSP + -396) PTRSUB RSP -396
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -40) COPY (RSP + -40)
0 INT_LESS 3 f(ARG2)
0 COPY 0
 CBRANCH (3 INT_LESS f(ARG2))
 CBRANCH (6 INT_LESS [(f(RSP) + 8)])
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_LESS 6 [(f(RSP) + 8)]
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH (6 INT_LESS [(f(RSP) + 8)])
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk gnueabi [f(RSP)] 7
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
0 COPY 0
gnueabi COPY gnueabi
f(RSP) COPY f(RSP)
 CBRANCH (2 INT_LESS [(f(RSP) + 8)])
f(RSP) COPY f(RSP)
0 COPY 0
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_LESS 2 [(f(RSP) + 8)]
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -416)
(RSP + -416) PTRSUB RSP -416
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
(RSP + -392) PTRSUB RSP -392
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -392)
 CBRANCH (6 INT_LESS [(f(RSP) + 8)])
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk itanium [f(RSP)] 7
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
itanium COPY itanium
0 COPY 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -404)
(RSP + -404) PTRSUB RSP -404
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (5 INT_LESS [(f(RSP) + 8)])
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_LESS 5 [(f(RSP) + 8)]
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_LESS 5 [(f(RSP) + 8)]
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 COPY 0
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH (5 INT_LESS [(f(RSP) + 8)])
f(RSP) COPY f(RSP)
 RETURN 1
 RETURN 0 f(RSP)
 CALL libcall___stack_chk_fail_thunk
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
f() CALL libcall_memcmp_thunk 4724752 [f(RSP)] 3
[f(RSP)] LOAD 433 f(RSP)
4724752 PTRSUB 0 4724752
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
(RSP + -376) PTRSUB RSP -376
 STORE 433 (f(RSP) + 16) (RSP + -376)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -420) PTRSUB RSP -420
 STORE 433 (f(RSP) + 16) (RSP + -420)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_LESS 8 [(f(RSP) + 8)]
0 COPY 0
 CBRANCH (8 INT_LESS [(f(RSP) + 8)])
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
 CBRANCH (8 INT_LESS [(f(RSP) + 8)])
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk gnueabihf [f(RSP)] 9
gnueabihf COPY gnueabihf
0 COPY 0
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
 CBRANCH (6 INT_LESS [(f(RSP) + 8)])
[f(RSP)] LOAD 433 f(RSP)
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk android [f(RSP)] 7
android COPY android
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 STORE 433 (f(RSP) + 16) (RSP + -400)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -400) PTRSUB RSP -400
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_LESS 6 [(f(RSP) + 8)]
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -384)
(RSP + -384) PTRSUB RSP -384
f() CALL libcall_memcmp_thunk amdopencl [f(RSP)] 9
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
amdopencl COPY amdopencl
 BRANCH VZERO
1 COPY 1
f() CALL libcall_memcmp_thunk code16 [f(RSP)] 6
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
code16 COPY code16
(RSP + -424) PTRSUB RSP -424
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -408) PTRSUB RSP -408
 STORE 433 (f(RSP) + 16) (RSP + -408)
f() CALL libcall_memcmp_thunk coreclr [f(RSP)] 7
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
coreclr COPY coreclr
0 INT_EQUAL f() 0
1 COPY 1
 BRANCH VZERO
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_LESS 6 [(f(RSP) + 8)]
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 STORE 433 (f(RSP) + 16) (RSP + -380)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -380) PTRSUB RSP -380
0 INT_LESS 8 [(f(RSP) + 8)]
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk cygnus [f(RSP)] 6
[f(RSP)] LOAD 433 f(RSP)
cygnus COPY cygnus
f(RSP) COPY f(RSP)
0 INT_LESS 6 [(f(RSP) + 8)]
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
1 COPY 1
 BRANCH VZERO
(RSP + -412) PTRSUB RSP -412
 STORE 433 (f(RSP) + 16) (RSP + -412)
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk gnux32 [f(RSP)] 6
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
gnux32 COPY gnux32
(RSP + -388) PTRSUB RSP -388
 STORE 433 (f(RSP) + 16) (RSP + -388)
(f(RSP) + 16) PTRADD f(RSP) 2 8
1 COPY 1
 BRANCH VZERO
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
0 INT_LESS 3 [(f(RSP) + 8)]
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 BRANCH VZERO
1 COPY 1
eabihf COPY eabihf
0 INT_NOTEQUAL f() 0
[[(f(RSP) + 16)]] COPY [[(f(RSP) + 16)]]
(RSP + -40) PTRSUB RSP -40
0 INT_EQUAL f() 0
f() CALL libcall_memcmp_thunk 4724788 f(ARG1) 4
(RSP + -40) COPY (RSP + -40)
4724788 PTRSUB 0 4724788
 BRANCH VZERO
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
4 COPY 4
 RETURN 0 4
ARG1 COPY ARG1
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG1) CALL func ARG1
 STORE 433 ARG1 [f(ARG2)]
 STORE 433 ARG2 [f(RSP)]
(ARG2 + 8) PTRADD ARG2 1 8
f(ARG2) CALL func ARG2
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
 STORE 433 (ARG1 + 8) [(f(ARG2) + 8)]
[f(ARG1)] LOAD 433 f(ARG1)
[f(ARG2)] LOAD 433 f(ARG2)
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
f(ARG1) CAST f(ARG1)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(ARG1) + 8)] LOAD 433 (f(ARG1) + 8)
[(f(ARG2) + 8)] LOAD 433 (f(ARG2) + 8)
f(RSP) CAST f(RSP)
 STORE 433 (ARG2 + 8) [(f(RSP) + 8)]
[f(RSP)] LOAD 433 f(RSP)
(RSP + -40) PTRSUB RSP -40
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
f(ARG2) CAST f(ARG2)
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
f(RSP) CALL func (RSP + -40)
(FS_OFFSET + 40) INT_ADD 0 40
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
ARG1 COPY ARG1
ARG2 COPY ARG2
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
armeb COPY armeb
A_Stack[-0xf8]:8 COPY A_Stack[-0xf8]:8
 CBRANCH f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_LESS ARG2 A_Stack[-0xf0]:8
 CBRANCH (ARG2 INT_LESS A_Stack[-0xf0]:8)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
(RSP + -248) PTRSUB RSP -248
 CALL func (RSP + -248) armeb
 CBRANCH f()
A_Stack[-0xf0]:8 COPY A_Stack[-0xf0]:8
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH f()
0 COPY 0
 CALL func (RSP + -216) 0
(RSP + -216) PTRSUB RSP -216
1 COPY 1
f() COPY f()
 BRANCH VZERO
0 INT_LESS f(ARG2) f()
 CBRANCH (f(ARG2) INT_LESS f())
 CBRANCH f()
f() COPY f()
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
f() CALL libcall_memcmp_thunk f(ARG1) f() f()
 BRANCH VZERO
 CBRANCH (f(ARG2) INT_LESS f())
f(ARG1) COPY f(ARG1)
f() COPY f()
0 COPY 0
f() COPY f()
0 INT_NOTEQUAL f() 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
0 COPY 0
f() CALL libcall_memcmp_thunk f(ARG1) f() f()
 CBRANCH (f(ARG2) INT_LESS f())
0 INT_NOTEQUAL f() 0
0 INT_EQUAL f() 0
f(ARG1) COPY f(ARG1)
f() COPY f()
 CBRANCH (f() INT_EQUAL 0)
f() COPY f()
 CBRANCH f()
 BRANCH VZERO
1 COPY 1
2 COPY 2
 BRANCH VZERO
 CBRANCH (A_Stack[-0xf0]:8 INT_EQUAL 0)
A_Stack[-0xf8]:8 COPY A_Stack[-0xf8]:8
0 COPY 0
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_EQUAL A_Stack[-0xf0]:8 0
ARG1 COPY ARG1
A_Stack[-0xf0]:8 COPY A_Stack[-0xf0]:8
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
f() CALL libcall_memcmp_thunk f(ARG1) f() f()
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH (f(ARG2) INT_LESS f())
(f() - f()) CAST (f() - f())
f() COPY f()
(RSP + -440) PTRSUB RSP -440
 CBRANCH (f() INT_EQUAL 0)
(f() - f()) INT_SUB f() f()
0 COPY 0
f() COPY f()
f() CALL func (RSP + -440)
0 INT_NOTEQUAL f() 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
0 INT_EQUAL f() 0
f(ARG1) COPY f(ARG1)
f() COPY f()
f() COPY f()
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
0 COPY 0
f() CALL libcall_memcmp_thunk f(ARG1) f() f()
 CBRANCH (f(ARG2) INT_LESS f())
f() COPY f()
0 INT_NOTEQUAL f() 0
0 INT_EQUAL f() 0
f(ARG1) COPY f(ARG1)
f() COPY f()
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
f() COPY f()
thumbeb COPY thumbeb
(RSP + -232) PTRSUB RSP -232
 CALL func (RSP + -232) thumbeb
0 INT_LESS f(ARG2) f()
 CBRANCH (f(ARG2) INT_LESS f())
f() COPY f()
0 COPY 0
f() CALL libcall_memcmp_thunk (f() - f()) f() f()
 BRANCH VZERO
 CBRANCH f()
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 f()
 CBRANCH f()
0 COPY 0
 BRANCH VZERO
1 COPY 1
1 COPY 1
 BRANCH VZERO
 CBRANCH ~(f())
(RSP + -88) PTRSUB RSP -88
aarch64 COPY aarch64
f() COPY f()
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -88) aarch64
f() COPY f()
4730906 PTRSUB 0 4730906
f() COPY f()
0 INT_LESS f(ARG2) f()
0 INT_LESS f(ARG2) f()
f() COPY f()
f() COPY f()
f() COPY f()
 CALL func (RSP + -72) 4730906
 BRANCH VZERO
0 COPY 0
f() CALL libcall_memcmp_thunk ARG1 A_Stack[-0xf8]:8 A_Stack[-0xf0]:8
 CBRANCH f()
 CALL func (RSP + -184) thumb
f() COPY f()
(RSP + -184) PTRSUB RSP -184
0 INT_LESS f(ARG2) f()
thumb COPY thumb
f() COPY f()
f() COPY f()
0 INT_NOTEQUAL f() 0
0 INT_EQUAL f() 0
f(ARG1) COPY f(ARG1)
f() COPY f()
1 COPY 1
 BRANCH VZERO
0 COPY 0
 BRANCH VZERO
f() CALL libcall_memcmp_thunk f(ARG1) f() f()
f() COPY f()
 CALL func (RSP + -200) 4729784
 BRANCH VZERO
(RSP + -200) PTRSUB RSP -200
f() COPY f()
0 INT_LESS f(ARG2) f()
~(f()) BOOL_NEGATE f()
2 COPY 2
4729784 PTRSUB 0 4729784
0 COPY 0
ARG1 COPY ARG1
ARG1 COPY ARG1
f() CALL libcall_memcmp_thunk 4729393 ARG1 2
0 INT_EQUAL ARG2 2
ARG2 COPY ARG2
ARG2 COPY ARG2
 CBRANCH f()
 CALL func (RSP + -184) 4729480
0 INT_NOTEQUAL f(RSP) 0
(RSP + -232) PTRSUB RSP -232
 CBRANCH (f(RSP) INT_NOTEQUAL 0)
0 INT_EQUAL f(RSP) 0
 CBRANCH (f(RSP) INT_EQUAL 0)
 CBRANCH (f(RSP) INT_EQUAL 0)
(RSP + -136) PTRSUB RSP -136
0 INT_EQUAL f(RSP) 0
4730817 PTRSUB 0 4730817
 CALL func (RSP + -248) 4730837
 CBRANCH (f(RSP) INT_EQUAL 0)
 CALL func (RSP + -104) 4730806
v8.1-a COPY v8.1-a
0 INT_EQUAL f(RSP) 0
4729434 PTRSUB 0 4729434
 CBRANCH f()
(RSP + -216) PTRSUB RSP -216
0 INT_EQUAL f(RSP) 0
4730827 PTRSUB 0 4730827
 CBRANCH (f(RSP) INT_EQUAL 0)
 CBRANCH (ARG2 INT_EQUAL 2)
 CBRANCH f()
(RSP + -168) PTRSUB RSP -168
 CBRANCH (f(RSP) INT_EQUAL 0)
(RSP + -248) PTRSUB RSP -248
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -200) 4730832
v7e-m COPY v7e-m
 CBRANCH (f(RSP) INT_EQUAL 0)
4730837 PTRSUB 0 4730837
 CALL func (RSP + -264) 4730842
 CBRANCH f()
0 INT_EQUAL f(RSP) 0
 CBRANCH f()
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
4730822 PTRSUB 0 4730822
0 INT_EQUAL f(RSP) 0
 CALL func (RSP + -120) v7e-m
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -72) v8.2-a
 CBRANCH f()
0 INT_EQUAL f(RSP) 0
 CALL func (RSP + -152) 4730822
0 INT_NOTEQUAL f() [(f() + 40)]
 CBRANCH f()
 CALL func (RSP + -216) 4729447
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -184) PTRSUB RSP -184
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -88) PTRSUB RSP -88
(RSP + -264) PTRSUB RSP -264
0 INT_EQUAL f(RSP) 0
0 INT_EQUAL f(RSP) 0
 CBRANCH (f(RSP) INT_EQUAL 0)
 CBRANCH (f(RSP) INT_EQUAL 0)
 CBRANCH f()
4730842 PTRSUB 0 4730842
4729480 PTRSUB 0 4729480
 CALL func (RSP + -136) 4730817
 CBRANCH f()
(RSP + -72) PTRSUB RSP -72
0 INT_EQUAL f(RSP) 0
 CBRANCH (f(RSP) INT_EQUAL 0)
v8.2-a COPY v8.2-a
 CBRANCH (f(RSP) INT_EQUAL 0)
 CBRANCH f()
 CALL func (RSP + -168) 4730827
 CBRANCH f()
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -88) v8.1-a
0 INT_EQUAL f(RSP) 0
0 COPY 0
(RSP + -104) PTRSUB RSP -104
4729447 PTRSUB 0 4729447
 CBRANCH f()
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -232) 4729434
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f(RSP) 0
 CBRANCH (f(RSP) INT_EQUAL 0)
(f() + 40) CAST (f() + 40)
4730806 PTRSUB 0 4730806
 CBRANCH (f(RSP) INT_EQUAL 0)
 CBRANCH f()
4730832 PTRSUB 0 4730832
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(RSP + -136) PTRSUB RSP -136
 BRANCH VZERO
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f(ARG2) INT_EQUAL 4)
4729562 PTRSUB 0 4729562
0 INT_EQUAL f() 0
0 COPY 0
f() CALL libcall_memcmp_thunk 4729562 f(ARG1) 4
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
0 INT_EQUAL f(ARG2) 4
1 COPY 1
 CBRANCH (f(ARG2) INT_EQUAL 4)
 CBRANCH (f(ARG2) INT_EQUAL 3)
0 COPY 0
0 INT_EQUAL f(ARG2) 3
0 COPY 0
 CBRANCH (f(ARG2) INT_EQUAL 2)
0 INT_EQUAL f(ARG2) 2
 CBRANCH (f(ARG2) INT_EQUAL 7)
aarch64 COPY aarch64
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_memcmp_thunk aarch64 f(ARG1) 7
0 INT_EQUAL f(ARG2) 5
 CBRANCH (f(ARG2) INT_EQUAL 5)
arm64 COPY arm64
0 INT_EQUAL f() 0
f() CALL libcall_memcmp_thunk arm64 f(ARG1) 5
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f(ARG2) 3
 CBRANCH (f(ARG2) INT_EQUAL 3)
 CBRANCH (f(ARG2) INT_EQUAL 3)
4729408 PTRSUB 0 4729408
0 COPY 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_memcmp_thunk 4729408 f(ARG1) 3
 CBRANCH (f(ARG2) INT_EQUAL 2)
0 INT_EQUAL f(ARG2) 3
4729579 PTRSUB 0 4729579
 CBRANCH (f(ARG2) INT_EQUAL 3)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_memcmp_thunk 4729579 f(ARG1) 2
0 INT_EQUAL f(ARG2) 3
0 COPY 0
 CBRANCH (f(ARG2) INT_EQUAL 3)
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_memcmp_thunk 4730888 f(ARG1) 3
0 INT_EQUAL f(ARG2) 7
4730888 PTRSUB 0 4730888
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
(RSP + -120) PTRSUB RSP -120
 CBRANCH (f(ARG2) INT_EQUAL 3)
0 COPY 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_memcmp_thunk 4730846 f(ARG1) 3
4730846 PTRSUB 0 4730846
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
0 INT_EQUAL f(ARG2) 4
 CBRANCH (f(ARG2) INT_EQUAL 4)
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
(RSP + -168) PTRSUB RSP -168
 CBRANCH (f(ARG2) INT_EQUAL 3)
0 INT_EQUAL f() 0
f() CALL libcall_memcmp_thunk 4729544 f(ARG1) 3
 CBRANCH (f() INT_EQUAL 0)
4729544 PTRSUB 0 4729544
0 COPY 0
0 COPY 0
0 INT_EQUAL f(ARG2) 5
 CBRANCH (f(ARG2) INT_EQUAL 5)
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f(ARG2) INT_EQUAL 5)
 BRANCH VZERO
0 INT_EQUAL f(ARG2) 5
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
0 INT_EQUAL f(ARG2) 3
 CBRANCH (f(ARG2) INT_EQUAL 3)
(RSP + -152) PTRSUB RSP -152
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f(ARG2) 4
 CBRANCH (f(ARG2) INT_EQUAL 4)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f(ARG2) 3
 CBRANCH (f(ARG2) INT_EQUAL 3)
(RSP + -264) PTRSUB RSP -264
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f(ARG2) INT_EQUAL 4)
 BRANCH VZERO
1 COPY 1
0 INT_EQUAL f(ARG2) 4
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
(RSP + -216) PTRSUB RSP -216
4730866 PTRSUB 0 4730866
0 INT_EQUAL f() 0
f() CALL libcall_memcmp_thunk 4730866 f(ARG1) 3
4730870 PTRSUB 0 4730870
0 INT_EQUAL f() 0
f() CALL libcall_memcmp_thunk 4730870 f(ARG1) 4
0 INT_EQUAL f() 0
f() CALL libcall_memcmp_thunk 4730875 f(ARG1) 3
4730875 PTRSUB 0 4730875
(RSP + -200) PTRSUB RSP -200
 BRANCH VZERO
1 COPY 1
0 INT_EQUAL f() 0
f() CALL libcall_memcmp_thunk 4730879 f(ARG1) 4
4730879 PTRSUB 0 4730879
0 INT_EQUAL f() 0
f() CALL libcall_memcmp_thunk 4730884 f(ARG1) 3
4730884 PTRSUB 0 4730884
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
4729513 PTRSUB 0 4729513
0 INT_EQUAL f() 0
f() CALL libcall_memcmp_thunk 4729513 f(ARG1) 2
0 INT_EQUAL f(ARG2) 2
0 INT_EQUAL f(ARG2) 3
(RSP + -72) PTRSUB RSP -72
(RSP + -184) PTRSUB RSP -184
0 INT_EQUAL f() 0
4729528 PTRSUB 0 4729528
f() CALL libcall_memcmp_thunk 4729528 f(ARG1) 3
0 INT_EQUAL f(ARG2) 5
 CBRANCH (f(ARG2) INT_EQUAL 5)
0 INT_EQUAL f(ARG2) 3
(RSP + -104) PTRSUB RSP -104
1 COPY 1
 BRANCH VZERO
f() CALL libcall_memcmp_thunk v8.1a f(ARG1) 5
v8.1a COPY v8.1a
0 INT_EQUAL f() 0
(RSP + -248) PTRSUB RSP -248
0 INT_EQUAL f() 0
f() CALL libcall_memcmp_thunk 4730850 f(ARG1) 4
4730850 PTRSUB 0 4730850
0 INT_EQUAL f() 0
f() CALL libcall_memcmp_thunk v6s-m f(ARG1) 5
v6s-m COPY v6s-m
(RSP + -232) PTRSUB RSP -232
0 INT_EQUAL f(ARG2) 3
0 INT_EQUAL f() 0
f() CALL libcall_memcmp_thunk 4729497 f(ARG1) 3
4729497 PTRSUB 0 4729497
 BRANCH VZERO
1 COPY 1
0 INT_EQUAL f(ARG2) 4
(RSP + -88) PTRSUB RSP -88
(f(ARG2 , RSP) # f(ARG1 , RSP)) PIECE f(ARG2 , RSP) f(ARG1 , RSP)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (f(ARG2 , RSP) # f(ARG1 , RSP))
 RETURN 1
 BRANCH VZERO
1 COPY 1
v8.2a COPY v8.2a
0 INT_EQUAL f() 0
f() CALL libcall_memcmp_thunk v8.2a f(ARG1) 5
4730855 PTRSUB 0 4730855
0 INT_EQUAL f() 0
f() CALL libcall_memcmp_thunk 4730855 f(ARG1) 4
0 INT_EQUAL f() 0
4729393 PTRSUB 0 4729393
ARG1 PTRSUB ARG1 0
ARG1 PTRSUB ARG1 0
[ARG1] LOAD 433 ARG1
 CBRANCH ([ARG1] INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[ARG1] LOAD 433 ARG1
0 INT_EQUAL [ARG1] 0
ARG1 CAST ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(ARG1 + 8) PTRADD ARG1 8 1
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_NOTEQUAL [(ARG1 + 8)] 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
[40] LOAD 433 40
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 0)
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 COPY 0
 RETURN 1
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
 RETURN 1
ARG1 COPY ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG2 COPY ARG2
4729633 PTRSUB 0 4729633
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (ARG2 INT_LESS A_Stack[-0x30]:8)
 CALL func (RSP + -264) 4729633
 CALL func (RSP + -56) arm64
(RSP + -264) PTRSUB RSP -264
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_LESS ARG2 A_Stack[-0x30]:8
-1 COPY -1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
A_Stack[-0x30]:8 COPY A_Stack[-0x30]:8
arm64 COPY arm64
 CBRANCH f()
A_Stack[-0x38]:8 COPY A_Stack[-0x38]:8
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
f() CALL libcall_memcmp_thunk f(ARG1) f() f()
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH ((f() + 48) INT_LESS 10)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH f()
f() COPY f()
0 INT_EQUAL f() -1
 CBRANCH f()
 CALL func (RSP + -56) aarch64
aarch64 COPY aarch64
f() COPY f()
 CBRANCH (f() INT_EQUAL -1)
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
0 INT_LESS f(ARG2) f()
5 COPY 5
 CBRANCH (f(ARG2) INT_LESS f())
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH (f(RSP) INT_EQUAL 0)
 BRANCH VZERO
0 COPY 0
f() CALL libcall_memcmp_thunk (f() - f(RSP)) f(ARG1 , RSP) f(RSP)
 CBRANCH (f() INT_EQUAL 118)
(RSP + -280) PTRSUB RSP -280
0 INT_LESS (f() + 48) 10
f() CALL func (RSP + -280) 1
f() INT_SEXT f()
(f() + 48) INT_SUB f() 48
 CBRANCH (f(ARG2) INT_LESS f(RSP))
(f() - f(RSP)) CAST (f() - f(RSP))
f() CALL func (RSP + -280)
0 COPY 0
0 INT_NOTEQUAL f() 0
0 INT_EQUAL f(RSP) 0
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -280) PTRSUB RSP -280
f(RSP) COPY f(RSP)
(f() - f(RSP)) INT_SUB f() f(RSP)
f(ARG1 , RSP) COPY f(ARG1 , RSP)
 CBRANCH ~(f())
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
 CBRANCH f()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
0 COPY 0
[f(RSP)] COPY [f(RSP)]
f() COPY f()
0 INT_EQUAL [f(RSP)] f()
 CBRANCH ([f(RSP)] INT_EQUAL f())
f() COPY f()
~(f()) BOOL_NEGATE f()
f() COPY f()
(f(ARG1) + [f(RSP)]) COPY (f(ARG1) + [f(RSP)])
f() COPY f()
 RETURN 1
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
 CBRANCH f()
(f() + 3) INT_ADD f() 3
1 COPY 1
 BRANCH VZERO
 CBRANCH (f(ARG2) INT_LESS f())
0 INT_NOTEQUAL f() 0
0 INT_EQUAL f() 0
f(ARG1) COPY f(ARG1)
f() COPY f()
 CBRANCH (f() INT_EQUAL 0)
f() COPY f()
 CBRANCH (A_Stack[-0x30]:8 INT_EQUAL 0)
f() CALL libcall_memcmp_thunk ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8
0 COPY 0
 BRANCH VZERO
(RSP + -248) PTRSUB RSP -248
(RSP + -576) PTRSUB RSP -576
f(RSP) CALL func (RSP + -568) (RSP + -72) (RSP + -72)
f(RSP) CAST f(RSP)
[f(RSP)] LOAD 433 f(RSP)
(RSP + -568) PTRSUB RSP -568
(RSP + -272) PTRSUB RSP -272
4730906 PTRSUB 0 4730906
f(RSP) CAST f(RSP)
(f(ARG1) + [f(RSP)]) COPY (f(ARG1) + [f(RSP)])
[f(RSP)] COPY [f(RSP)]
(RSP + -72) PTRSUB RSP -72
2 COPY 2
 CBRANCH ((f(ARG1) + [f(RSP)]) INT_EQUAL 0)
f(RSP) CALL func (RSP + -576) (RSP + -272) (RSP + -272)
[f(RSP)] LOAD 433 f(RSP)
f() COPY f()
0 INT_EQUAL (f(ARG1) + [f(RSP)]) 0
(f(ARG1) + [f(RSP)]) INT_ADD [f(RSP)] f(ARG1)
(f(ARG2) - [f(RSP)]) INT_SUB f(ARG2) [f(RSP)]
(f(ARG2) - [f(RSP)]) CAST (f(ARG2) - [f(RSP)])
f(ARG1) CAST f(ARG1)
 CALL func (RSP + -248) 4730906
(f(ARG1) + [f(RSP)]) CAST (f(ARG1) + [f(RSP)])
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(f(ARG2 , RSP) # f(ARG1 , RSP)) PIECE f(ARG2 , RSP) f(ARG1 , RSP)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 (f(ARG2 , RSP) # f(ARG1 , RSP))
f() COPY f()
0 INT_NOTEQUAL f() 0
0 INT_EQUAL f() 0
f(ARG1) COPY f(ARG1)
f() COPY f()
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
f() COPY f()
0 INT_EQUAL [f(RSP)] f()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 CBRANCH ([f(RSP)] INT_EQUAL f())
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
f() COPY f()
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
(f(ARG1) + [f(RSP)]) COPY (f(ARG1) + [f(RSP)])
f() COPY f()
[f(RSP)] COPY [f(RSP)]
 RETURN 1
0 COPY 0
f() COPY f()
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
ARG1 COPY ARG1
A_Stack[-0x30]:8 COPY A_Stack[-0x30]:8
A_Stack[-0x38]:8 COPY A_Stack[-0x38]:8
0 INT_NOTEQUAL f() 0
0 INT_EQUAL A_Stack[-0x30]:8 0
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_memcmp_thunk f(ARG1) f() f()
0 COPY 0
 BRANCH VZERO
 BRANCH VZERO
 CALL func (RSP + -56) 4730906
0 INT_NOTEQUAL f() -1
f(ARG2) COPY f(ARG2)
f(ARG2 , RSP) COPY f(ARG2 , RSP)
f(RSP) COPY f(RSP)
f(ARG1 , RSP) COPY f(ARG1 , RSP)
f(ARG2) COPY f(ARG2)
(RSP + -56) PTRSUB RSP -56
f(ARG2 , RSP) COPY f(ARG2 , RSP)
0 INT_LESS f(ARG2) f(RSP)
(f() + 2) INT_ADD f() 2
4730906 PTRSUB 0 4730906
f(ARG1 , RSP) COPY f(ARG1 , RSP)
f(ARG1 , RSP) COPY f(ARG1 , RSP)
f(ARG1) COPY f(ARG1)
f(RSP) COPY f(RSP)
 CBRANCH (f() INT_NOTEQUAL -1)
f(ARG1) COPY f(ARG1)
f(ARG1 , RSP) COPY f(ARG1 , RSP)
 CBRANCH f()
 CBRANCH f()
 CBRANCH (f(ARG2) INT_LESS f())
f() COPY f()
thumb COPY thumb
 CALL func (RSP + -56) thumb
f() COPY f()
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
3 COPY 3
0 INT_LESS f(ARG2) f()
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
f() COPY f()
f() COPY f()
0 INT_NOTEQUAL f() 0
0 INT_EQUAL f() 0
f(ARG1) COPY f(ARG1)
 CALL func (RSP + -56) 4730906
4730906 PTRSUB 0 4730906
(RSP + -56) PTRSUB RSP -56
f() COPY f()
0 INT_NOTEQUAL f(RSP) -1
f(RSP) CALL func (RSP + -280) f() f() 0
 CBRANCH (f(RSP) INT_NOTEQUAL -1)
7 COPY 7
f() COPY f()
(RSP + -280) PTRSUB RSP -280
0 COPY 0
 BRANCH VZERO
f() CALL libcall_memcmp_thunk f(ARG1) f() f()
4729784 PTRSUB 0 4729784
(RSP + -56) PTRSUB RSP -56
0 INT_LESS f(ARG2) f()
f() COPY f()
 BRANCH VZERO
5 COPY 5
 CALL func (RSP + -56) 4729784
f() COPY f()
 CBRANCH (f() INT_NOTEQUAL -1)
 CBRANCH f()
f() COPY f()
(RSP + -280) PTRSUB RSP -280
0 INT_EQUAL f() 118
f() COPY f()
f(ARG1 , RSP) COPY f(ARG1 , RSP)
f() CALL func (RSP + -280) 0
f(ARG2 , RSP) COPY f(ARG2 , RSP)
 BRANCH VZERO
(f(ARG1) + [f(RSP)]) INT_ADD [f(RSP)] f(ARG1)
[f(RSP)] LOAD 433 f(RSP)
f(ARG1) CAST f(ARG1)
 CBRANCH (f(ARG2 , RSP) INT_EQUAL 0)
0 INT_EQUAL f(ARG2 , RSP) 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
0 COPY 0
f() CALL libcall_memcmp_thunk (f(ARG1) + [f(RSP)]) f() f()
(RSP + -536) PTRSUB RSP -536
0 INT_NOTEQUAL [f(RSP)] 0
[f(RSP)] LOAD 433 f(RSP)
[f(RSP)] COPY [f(RSP)]
(RSP + -528) PTRSUB RSP -528
(f(ARG1) + [f(RSP)]) COPY (f(ARG1) + [f(RSP)])
 CBRANCH ((f(ARG1) + [f(RSP)]) INT_EQUAL 0)
0 INT_EQUAL (f(ARG1) + [f(RSP)]) 0
(f(ARG1) + [f(RSP)]) COPY (f(ARG1) + [f(RSP)])
(f(ARG1) + [f(RSP)]) CAST (f(ARG1) + [f(RSP)])
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
(f(ARG1) + [f(RSP)]) COPY (f(ARG1) + [f(RSP)])
f() COPY f()
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
 RETURN 1
(f(ARG1) + [f(RSP)]) CAST (f(ARG1) + [f(RSP)])
(RSP + -544) PTRSUB RSP -544
f(ARG2 , RSP) COPY f(ARG2 , RSP)
(RSP + -272) PTRSUB RSP -272
f() COPY f()
f(RSP) CALL func (RSP + -552) (RSP + -528) (RSP + -528)
(RSP + -528) PTRSUB RSP -528
(RSP + -552) PTRSUB RSP -552
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CAST f(RSP)
(f(ARG1) + [f(RSP)]) INT_ADD [f(RSP)] f(ARG1)
[f(RSP)] LOAD 433 f(RSP)
f(ARG1) CAST f(ARG1)
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
(f(ARG1 , RSP) + [f(RSP)]) CAST (f(ARG1 , RSP) + [f(RSP)])
 RETURN 1
(RSP + -72) PTRSUB RSP -72
4730909 PTRSUB 0 4730909
[f(RSP)] COPY [f(RSP)]
[f(RSP)] LOAD 433 f(RSP)
[f(RSP)] COPY [f(RSP)]
[f(RSP)] COPY [f(RSP)]
(RSP + -272) PTRSUB RSP -272
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CAST f(RSP)
f(RSP) CAST f(RSP)
f(RSP) CALL func (RSP + -536) (RSP + -528) (RSP + -528)
f(ARG1 , RSP) COPY f(ARG1 , RSP)
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
f(RSP) CALL func (RSP + -544) (RSP + -272) (RSP + -272)
[f(RSP)] COPY [f(RSP)]
0 INT_NOTEQUAL f() -1
 CBRANCH ((f(ARG1) + [f(RSP)]) INT_EQUAL 0)
0 INT_EQUAL (f(ARG1) + [f(RSP)]) 0
[f(RSP)] COPY [f(RSP)]
-1 COPY -1
f() COPY f()
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [f(RSP)] 0
 CALL func (RSP + -56) 4730906
(RSP + -56) PTRSUB RSP -56
4730906 PTRSUB 0 4730906
0 INT_NOTEQUAL [f(RSP)] 0
 CALL func (RSP + -72) 4730909
f() COPY f()
0 INT_EQUAL f() [(f() + 40)]
0 INT_EQUAL f() 0
(f(ARG1 , RSP) + [f(RSP)]) INT_ADD [f(RSP)] f(ARG1 , RSP)
f(ARG1 , RSP) CAST f(ARG1 , RSP)
3 COPY 3
7 COPY 7
f() COPY f()
(RSP + -592) PTRSUB RSP -592
(RSP + -88) PTRSUB RSP -88
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -584) PTRSUB RSP -584
(RSP + -560) PTRSUB RSP -560
(RSP + -272) PTRSUB RSP -272
(f(ARG2 , RSP) - [f(RSP)]) INT_SUB f(ARG2 , RSP) [f(RSP)]
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [f(RSP)] 0
[f(RSP)] COPY [f(RSP)]
(f(ARG2) - [f(RSP)]) INT_SUB f(ARG2) [f(RSP)]
(f(ARG1) + [f(RSP)]) COPY (f(ARG1) + [f(RSP)])
f(RSP) CALL func (RSP + -560) (RSP + -272) (RSP + -272)
f(RSP) CAST f(RSP)
 CBRANCH ((f(ARG1 , RSP) + [f(RSP)]) INT_EQUAL 0)
0 INT_EQUAL (f(ARG1 , RSP) + [f(RSP)]) 0
f(RSP) CALL func (RSP + -584) (RSP + -88) (RSP + -88)
f(RSP) CAST f(RSP)
(f(ARG2) - [f(RSP)]) INT_SUB f(ARG2) [f(RSP)]
[f(RSP)] COPY [f(RSP)]
[f(RSP)] COPY [f(RSP)]
0 COPY 0
f() CALL libcall_memcmp_thunk (f(ARG1) + [f(RSP)]) f() f()
(f(ARG1) + [f(RSP)]) COPY (f(ARG1) + [f(RSP)])
(f(ARG1) + [f(RSP)]) COPY (f(ARG1) + [f(RSP)])
f() COPY f()
f() COPY f()
(f(ARG2) - [f(RSP)]) CAST (f(ARG2) - [f(RSP)])
(f(ARG1) + [f(RSP)]) COPY (f(ARG1) + [f(RSP)])
f(RSP) CALL func (RSP + -592) (RSP + -272) (RSP + -272)
0 INT_NOTEQUAL f(RSP) -1
f(RSP) CALL func (RSP + -280) f(ARG1 , RSP) f(RSP) 0
(f(ARG2) + 2) INT_SUB f(ARG2) 2
 BRANCH VZERO
f(RSP) CAST f(RSP)
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
(RSP + -280) PTRSUB RSP -280
0 INT_NOTEQUAL f() 0
[f(RSP)] COPY [f(RSP)]
[f(RSP)] COPY [f(RSP)]
(f(ARG1) + [f(RSP)]) COPY (f(ARG1) + [f(RSP)])
 CBRANCH (f(RSP) INT_NOTEQUAL -1)
f() CALL func ARG1 ARG2 ARG1
0 INT_EQUAL f(Symbol) 6951776
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (f(Symbol) INT_EQUAL 6951776)
Symbol PTRSUB 0 Symbol
(A_Stack[-0x80]:8 # A_Stack[-0x88]:8) PIECE A_Stack[-0x80]:8 A_Stack[-0x88]:8
(FS_OFFSET + 40) INT_ADD 0 40
(A_Stack[-0x70]:8 # A_Stack[-0x78]:8) PIECE A_Stack[-0x70]:8 A_Stack[-0x78]:8
(f() / 2147483647) SUBPIECE f() 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) INT_RIGHT f() 64
6951776 PTRSUB 0 6951776
[(f() + 40)] LOAD 433 (f() + 40)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() + 40) CAST (f() + 40)
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(f() / 2147483647) INT_RIGHT f() 64
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH f()
(f(Symbol) & 4294967295) INT_AND f(Symbol) 4294967295
(f(Symbol) + 64) PTRADD f(Symbol) 8 8
 BRANCH VZERO
 BRANCH VZERO
f(Symbol) CAST f(Symbol)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
(f() / 2147483647) SUBPIECE f() 8
(f(Symbol) + 24) PTRADD f(Symbol) 3 8
(f(Symbol) + 16) PTRADD f(Symbol) 2 8
[(f(Symbol) + 24)] LOAD 433 (f(Symbol) + 24)
[(f(Symbol) + 16)] LOAD 433 (f(Symbol) + 16)
(f(Symbol) + 8) PTRADD f(Symbol) 1 8
(RSP + -104) PTRSUB RSP -104
[(f(Symbol) + 56)] LOAD 433 (f(Symbol) + 56)
(f() / 2147483647) SUBPIECE f() 0
[(f(Symbol) + 48)] LOAD 433 (f(Symbol) + 48)
(f() / 2147483647) SUBPIECE f() 8
f() COPY f()
f() COPY f()
0 INT_LESS (f() / 4611686014132420609) (f() / 4611686014132420609)
(f() / 2147483647) SUBPIECE f() 0
[(f(Symbol) + 8)] LOAD 433 (f(Symbol) + 8)
 CBRANCH ((f() / 4611686014132420609) INT_LESS (f() / 4611686014132420609))
(f(Symbol) + 56) PTRADD f(Symbol) 7 8
(f() / 2147483647) INT_RIGHT f() 64
[(f(Symbol) + 40)] LOAD 433 (f(Symbol) + 40)
(f(Symbol) + 48) PTRADD f(Symbol) 6 8
f() CALL func (RSP + -104)
(f(Symbol) + 40) PTRADD f(Symbol) 5 8
[f(Symbol)] LOAD 433 f(Symbol)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f(Symbol) + 32) PTRADD f(Symbol) 4 8
[(f(Symbol) + 32)] LOAD 433 (f(Symbol) + 32)
0 COPY 0
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
 RETURN 0 f(Symbol)
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH ((f() / 4611686014132420609) INT_EQUAL 0)
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL libcall_memcmp_thunk (f() - (f() / 2147483647)) (f() / 2147483647) (f() / 4611686014132420609)
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -136) PTRSUB RSP -136
(f() - (f() / 2147483647)) INT_SUB f() (f() / 2147483647)
f() CALL func (RSP + -136)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() - (f() / 2147483647)) CAST (f() - (f() / 2147483647))
0 INT_EQUAL (f() / 4611686014132420609) 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
0 INT_NOTEQUAL f() 0
f() CALL func ARG1 ARG2 ARG1
f(Symbol) CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
 RETURN 0 f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) INT_RIGHT f() 64
 BRANCHIND f(Symbol)
3 COPY 3
2 COPY 2
0 COPY 0
1 COPY 1
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
f() CALL func ARG1 ARG2 ARG1
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(f() / 2147483647) INT_RIGHT f() 64
 BRANCHIND f(Symbol)
f(Symbol) CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
 RETURN 0 f()
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
6 COPY 6
7 COPY 7
 BRANCH VZERO
 BRANCH VZERO
3 COPY 3
4 COPY 4
5 COPY 5
0 COPY 0
2 COPY 2
8 COPY 8
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
ARG1 COPY ARG1
f() CALL libcall_memcmp_thunk aarch64 ARG1 7
ARG1 COPY ARG1
0 INT_LESS ARG2 7
ARG2 COPY ARG2
ARG2 COPY ARG2
0 INT_NOTEQUAL [(f(RSP) + 16)] 0
3 COPY 3
 CBRANCH ([(f(RSP) + 16)] INT_NOTEQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(f(RSP) + 16) PTRADD f(RSP) 2 8
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
3 COPY 3
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_NOTEQUAL f() [(f() + 40)]
0 INT_EQUAL f(RSP) 0
(f() + 40) INT_ADD f() 40
 CBRANCH f()
 CBRANCH (f(RSP) INT_EQUAL 0)
 CBRANCH f()
(f() + 40) CAST (f() + 40)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f(RSP) COPY f(RSP)
(RSP + -40) PTRSUB RSP -40
2 COPY 2
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH (ARG2 INT_LESS 7)
1 COPY 1
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
(RSP + -40) PTRSUB RSP -40
0 INT_EQUAL [(f(RSP) + 16)] 0
f() COPY f()
 CBRANCH f()
0 COPY 0
0 COPY 0
[[(f(RSP) + 16)]] LOAD 433 [(f(RSP) + 16)]
f(RSP) COPY f(RSP)
 CBRANCH (2 INT_LESS [(f(RSP) + 8)])
0 INT_EQUAL f() 0
0 COPY 0
f() CALL libcall_memcmp_thunk 4729784 [f(RSP)] 3
 CBRANCH (f() INT_EQUAL 0)
[f(RSP)] LOAD 433 f(RSP)
4729784 PTRSUB 0 4729784
f(RSP) COPY f(RSP)
 BRANCH VZERO
1 COPY 1
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_LESS 4 [(f(RSP) + 8)]
f(RSP) COPY f(RSP)
 CBRANCH (4 INT_LESS [(f(RSP) + 8)])
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(RSP)
 RETURN 1
 STORE 433 (f(RSP) + 16) (RSP + -160)
(RSP + -160) PTRSUB RSP -160
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_LESS 2 [(f(RSP) + 8)]
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
(RSP + -172) PTRSUB RSP -172
0 INT_LESS 4 f(ARG2)
0 COPY 0
(RSP + -40) COPY (RSP + -40)
 CBRANCH (4 INT_LESS f(ARG2))
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk thumb [f(RSP)] 5
thumb COPY thumb
(RSP + -168) PTRSUB RSP -168
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -168)
 STORE 433 (f(RSP) + 16) (RSP + -164)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -164) PTRSUB RSP -164
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
1 COPY 1
aarch64 COPY aarch64
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL f() 0
f() CALL libcall_memcmp_thunk arm64 f(ARG1) 5
0 INT_NOTEQUAL f() 0
[[(f(RSP) + 16)]] COPY [[(f(RSP) + 16)]]
 BRANCH VZERO
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
arm64 COPY arm64
(RSP + -40) COPY (RSP + -40)
(RSP + -40) PTRSUB RSP -40
f() CALL func ARG1 ARG2 ARG1
f(RSP) CALL func ARG1 ARG2 ARG1
f() CALL func ARG1 ARG2 ARG1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 1)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_EQUAL (f() / 4611686014132420609) 0
 CBRANCH (0 INT_EQUAL [(f() + 40)])
0 INT_EQUAL f() 1
0 COPY 0
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_EQUAL 0 [(f() + 40)]
(f() / 2147483647) INT_RIGHT f() 64
(f() + 40) CAST (f() + 40)
 CBRANCH ((f() / 4611686014132420609) INT_EQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_memcmp_thunk (f() / 2147483647) f() f()
 BRANCH VZERO
0 COPY 0
 CBRANCH (f() INT_EQUAL 2)
0 INT_EQUAL f(RSP) 2
 CBRANCH (f(RSP) INT_EQUAL 2)
0 INT_EQUAL f() 2
 CBRANCH (f(RSP) INT_EQUAL 2)
 CBRANCH ((f() / 4611686014132420609) INT_LESS A_Stack[-0x60]:8)
~(f()) BOOL_NEGATE f()
0 COPY 0
A_Stack[-0x68]:8 COPY A_Stack[-0x68]:8
4724983 PTRSUB 0 4724983
A_Stack[-0x60]:8 COPY A_Stack[-0x60]:8
(RSP + -104) PTRSUB RSP -104
 CALL func (RSP + -104) 4724983
0 INT_LESS (f() / 4611686014132420609) A_Stack[-0x60]:8
 CBRANCH ~(f())
0 INT_EQUAL A_Stack[-0x60]:8 0
 CBRANCH (A_Stack[-0x60]:8 INT_EQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 CBRANCH (f(RSP) INT_EQUAL 1)
1 COPY 1
 BRANCH VZERO
 CBRANCH (f(RSP) INT_EQUAL 3)
0 INT_EQUAL f(RSP) 1
4 COPY 4
 CBRANCH (f(RSP) INT_EQUAL 1)
 CBRANCH (f() INT_EQUAL 3)
 CBRANCH (f() INT_EQUAL 6)
0 INT_EQUAL f() 6
 CBRANCH f()
0 INT_EQUAL f() 3
 BRANCH VZERO
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
f() CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
0 COPY 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 f()
1 COPY 1
 BRANCH VZERO
 CBRANCH ((f() / 4611686014132420609) INT_LESS f())
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 CBRANCH (f(RSP) INT_EQUAL 2)
0 INT_EQUAL f(RSP) 2
0 INT_EQUAL f() 2
 CBRANCH (f() INT_EQUAL 2)
0 INT_EQUAL f(RSP) 3
25 COPY 25
 BRANCH VZERO
 CBRANCH (f(RSP) INT_EQUAL 3)
3 COPY 3
0 INT_EQUAL f(RSP) 1
 BRANCH VZERO
2 COPY 2
 BRANCH VZERO
0 COPY 0
0 INT_EQUAL f(RSP) 2
 BRANCH VZERO
f() CALL libcall_memcmp_thunk (f() / 2147483647) A_Stack[-0x68]:8 A_Stack[-0x60]:8
0 COPY 0
 CBRANCH ~(f())
 BRANCH VZERO
1 COPY 1
0 INT_EQUAL f(RSP) 3
24 COPY 24
 BRANCH VZERO
 BRANCH VZERO
24 COPY 24
 BRANCH VZERO
25 COPY 25
1 COPY 1
 BRANCH VZERO
4724986 PTRSUB 0 4724986
f() COPY f()
(RSP + -88) PTRSUB RSP -88
f() COPY f()
~(f()) BOOL_NEGATE f()
0 INT_LESS (f() / 4611686014132420609) f()
 CALL func (RSP + -88) 4724986
f() CALL libcall_memcmp_thunk ARG1 f() f()
f() CALL libcall_memcmp_thunk ARG1 f() f()
f() CALL libcall_memcmp_thunk ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8
f() CALL libcall_memcmp_thunk ARG1 f() f()
f() CALL libcall_memcmp_thunk ARG1 f() f()
0 INT_EQUAL ARG2 f()
0 INT_EQUAL ARG2 f()
0 INT_EQUAL ARG2 A_Stack[-0x30]:8
0 INT_EQUAL ARG2 f()
0 INT_EQUAL ARG2 f()
A_Stack[-0x38]:8 COPY A_Stack[-0x38]:8
(RSP + -56) PTRSUB RSP -56
(f() + 40) CAST (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CALL func (RSP + -56) 4724127
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 CBRANCH (ARG2 INT_EQUAL A_Stack[-0x30]:8)
 CBRANCH f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
A_Stack[-0x30]:8 COPY A_Stack[-0x30]:8
0 INT_NOTEQUAL f() [(f() + 40)]
4724127 PTRSUB 0 4724127
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
 CBRANCH (A_Stack[-0x30]:8 INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
 CBRANCH (ARG2 INT_EQUAL f())
 CBRANCH (f() INT_EQUAL 0)
0 INT_NOTEQUAL f() 0
0 COPY 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
 CBRANCH f()
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH f()
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (ARG2 INT_EQUAL f())
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
 BRANCH VZERO
0 COPY 0
 CBRANCH (ARG2 INT_EQUAL f())
0 INT_NOTEQUAL f() 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
0 INT_NOTEQUAL f() 0
0 INT_EQUAL A_Stack[-0x30]:8 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 RETURN 1
 CBRANCH f()
f() COPY f()
7 COPY 7
0 COPY 0
 CBRANCH f()
 CALL func (RSP + -152) 0
 CBRANCH f()
(RSP + -152) PTRSUB RSP -152
f() COPY f()
 BRANCH VZERO
 CBRANCH f()
f() COPY f()
bpfeb COPY bpfeb
 CALL func (RSP + -168) bpfeb
f() COPY f()
(RSP + -168) PTRSUB RSP -168
1 COPY 1
 BRANCH VZERO
6 COPY 6
f() COPY f()
 CALL func (RSP + -184) 0
0 COPY 0
(RSP + -184) PTRSUB RSP -184
f() COPY f()
 BRANCH VZERO
 CALL func (RSP + -136) bpfel
f() COPY f()
 CBRANCH (ARG2 INT_EQUAL f())
(RSP + -136) PTRSUB RSP -136
f() COPY f()
bpfel COPY bpfel
0 INT_NOTEQUAL f() 0
0 INT_EQUAL f() 0
0 COPY 0
 BRANCH VZERO
6 COPY 6
 BRANCH VZERO
1 COPY 1
ARG1 COPY ARG1
ARG1 COPY ARG1
f() CALL libcall_memcmp_thunk ARG1 (f() # f()) f()
ARG1 COPY ARG1
f() CALL func ARG1 ARG2 ARG1
f() CALL libcall_memcmp_thunk 4723720 ARG1 4
f() CALL func ARG1 ARG2 ARG1
f() CALL libcall_memcmp_thunk ARG1 (f() # f()) f()
f() CALL libcall_memcmp_thunk ARG1 (f() # f()) f()
f() CALL libcall_memcmp_thunk ARG1 (f() # f()) f()
ARG1 COPY ARG1
ARG1 COPY ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
0 INT_LESS ARG2 f()
0 INT_LESS ARG2 f()
0 INT_LESS ARG2 f()
ARG2 COPY ARG2
0 INT_LESS ARG2 f()
0 INT_EQUAL ARG2 4
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
10 COPY 10
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
11 COPY 11
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
13 COPY 13
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
9 COPY 9
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
8 COPY 8
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
22 COPY 22
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(A_Stack[-0x68]:8 / 2147483647) SUBPIECE A_Stack[-0x68]:8 4
(((A_Stack[-0x68]:8 / 2147483647) * 2147483647) + 42) PIECE (A_Stack[-0x68]:8 / 2147483647) 42
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f() + 40) CAST (f() + 40)
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
12 COPY 12
17 COPY 17
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
(A_Stack[-0x58]:8 & -4294967296) INT_AND A_Stack[-0x58]:8 -4294967296
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH f()
f(RSP) COPY f(RSP)
18 COPY 18
3 COPY 3
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
4 COPY 4
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
3 COPY 3
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(((A_Stack[-0x78]:8 / 2147483647) * 2147483647) + 41) CAST (((A_Stack[-0x78]:8 / 2147483647) * 2147483647) + 41)
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
0 INT_EQUAL [(f(RSP) + 16)] 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f(RSP) COPY f(RSP)
(((A_Stack[-0x68]:8 / 2147483647) * 2147483647) + 42) CAST (((A_Stack[-0x68]:8 / 2147483647) * 2147483647) + 42)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
1 COPY 1
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
2 COPY 2
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
A_Stack[-0x58]:8 CAST A_Stack[-0x58]:8
(A_Stack[-0x58]:8 & -4294967296) CAST (A_Stack[-0x58]:8 & -4294967296)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
24 COPY 24
f(RSP) COPY f(RSP)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
25 COPY 25
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
5 COPY 5
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1 COPY 1
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
2 COPY 2
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
37 COPY 37
38 COPY 38
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH (f(RSP) INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
26 COPY 26
0 INT_EQUAL f(RSP) 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(RSP + -72) PTRSUB RSP -72
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
34 COPY 34
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
35 COPY 35
(f(RSP) + 16) PTRADD f(RSP) 2 8
36 COPY 36
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
14 COPY 14
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH f()
 CBRANCH f()
15 COPY 15
f(RSP) COPY f(RSP)
16 COPY 16
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_EQUAL [(f(RSP) + 16)] 0
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
39 COPY 39
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
26 COPY 26
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
f(RSP) COPY f(RSP)
 CBRANCH f()
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
27 COPY 27
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
40 COPY 40
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(A_Stack[-0x78]:8 / 2147483647) SUBPIECE A_Stack[-0x78]:8 4
(((A_Stack[-0x78]:8 / 2147483647) * 2147483647) + 41) PIECE (A_Stack[-0x78]:8 / 2147483647) 41
 CBRANCH f()
23 COPY 23
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
28 COPY 28
 CBRANCH (f() INT_EQUAL [(f() + 40)])
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
0 INT_EQUAL [(f(RSP) + 16)] 0
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
0 INT_EQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL f(RSP) 0
f(RSP) COPY f(RSP)
19 COPY 19
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH (f(RSP) INT_EQUAL 0)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 16)] 0
21 COPY 21
(RSP + -72) PTRSUB RSP -72
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
20 COPY 20
 CBRANCH (ARG2 INT_EQUAL 4)
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
32 COPY 32
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
f(RSP) COPY f(RSP)
33 COPY 33
0 COPY 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
 CBRANCH f()
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
29 COPY 29
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
30 COPY 30
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
31 COPY 31
0 INT_EQUAL [(f(RSP) + 16)] 0
f(RSP) COPY f(RSP)
 CBRANCH f()
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
0 COPY 0
wasm64 COPY wasm64
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk wasm64 [f(RSP)] 6
0 COPY 0
 CBRANCH ([(f(RSP) + 8)] INT_NOTEQUAL 6)
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_NOTEQUAL [(f(RSP) + 8)] 6
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk nvptx [f(RSP)] 5
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
nvptx COPY nvptx
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1752) PTRSUB RSP -1752
 STORE 433 (f(RSP) + 16) (RSP + -1752)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 5
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 COPY 0
0 INT_EQUAL [(f(RSP) + 8)] 5
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
f(RSP) COPY f(RSP)
 STORE 433 (f(RSP) + 16) (RSP + -1692)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1692) PTRSUB RSP -1692
 STORE 433 (f(RSP) + 16) (RSP + -1636)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1636) PTRSUB RSP -1636
0 COPY 0
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 3)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 3
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 COPY 0
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 5
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
f(RSP) COPY f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
4723702 PTRSUB 0 4723702
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_memcmp_thunk 4723702 [f(RSP)] 3
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 8)] 6
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH f()
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
f(RSP) COPY f(RSP)
1 COPY 1
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 5
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 8)] 6
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
(RSP + -1760) PTRSUB RSP -1760
 STORE 433 (f(RSP) + 16) (RSP + -1760)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1700) PTRSUB RSP -1700
 STORE 433 (f(RSP) + 16) (RSP + -1700)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1644) PTRSUB RSP -1644
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1644)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH (f(ARG2) INT_EQUAL 4)
(RSP + -72) PTRSUB RSP -72
f() CALL libcall_memcmp_thunk 4724989 f(ARG1) 4
4724989 PTRSUB 0 4724989
0 INT_EQUAL f(ARG2) 4
(RSP + -72) PTRSUB RSP -72
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f(ARG2) INT_EQUAL 4)
 CBRANCH f()
(RSP + -184) PTRSUB RSP -184
 CBRANCH (ARG2 INT_LESS f())
 CALL func (RSP + -184) thumb
 CBRANCH f()
(f() # f()) CAST (f() # f())
f() COPY f()
thumb COPY thumb
(f() # f()) PIECE f() f()
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 8)] 5
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
1 COPY 1
 BRANCH VZERO
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
0 COPY 0
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
thumbeb COPY thumbeb
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk thumbeb [f(RSP)] 7
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
sparcel COPY sparcel
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_memcmp_thunk sparcel [f(RSP)] 7
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 3)
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_memcmp_thunk 4725033 [f(RSP)] 3
0 INT_EQUAL f() 0
f(RSP) COPY f(RSP)
4725033 PTRSUB 0 4725033
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 5
f(RSP) COPY f(RSP)
 CBRANCH f()
f(RSP) INT_ZEXT f(RSP)
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_EQUAL [(f(RSP) + 8)] 7
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
 BRANCH VZERO
1 COPY 1
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 6
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
f(RSP) COPY f(RSP)
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
f(RSP) COPY f(RSP)
f() CALL libcall_memcmp_thunk ppc64le [f(RSP)] 7
0 INT_EQUAL f() 0
ppc64le COPY ppc64le
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1708) PTRSUB RSP -1708
 STORE 433 (f(RSP) + 16) (RSP + -1708)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 8)
f() CALL libcall_memcmp_thunk mips64el [f(RSP)] 8
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
mips64el COPY mips64el
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
f() CALL libcall_memcmp_thunk amdil [f(RSP)] 5
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
amdil COPY amdil
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 STORE 433 (f(RSP) + 16) (RSP + -1736)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1736) PTRSUB RSP -1736
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk msp430 [f(RSP)] 6
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
msp430 COPY msp430
f() CALL libcall_memcmp_thunk systemz [f(RSP)] 7
 CBRANCH (f() INT_EQUAL 0)
f(RSP) COPY f(RSP)
0 INT_EQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
systemz COPY systemz
0 COPY 0
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 12)
0 COPY 0
0 INT_EQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
f() CALL libcall_memcmp_thunk mipsallegrex [f(RSP)] 12
 CBRANCH (f() INT_EQUAL 0)
mipsallegrex COPY mipsallegrex
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
(RSP + -1744) PTRSUB RSP -1744
 STORE 433 (f(RSP) + 16) (RSP + -1744)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 7
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 8)] INT_NOTEQUAL 5)
f() CALL libcall_memcmp_thunk amd64 [f(RSP)] 5
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
amd64 COPY amd64
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
0 INT_EQUAL f(ARG2) 4
1 COPY 1
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 4)
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_memcmp_thunk 4723752 [f(RSP)] 4
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
4723752 PTRSUB 0 4723752
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 6
 STORE 433 (f(RSP) + 16) (RSP + -200)
(RSP + -200) PTRSUB RSP -200
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 8)] INT_NOTEQUAL 7)
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk powerpc [f(RSP)] 7
powerpc COPY powerpc
 CBRANCH (f(ARG2) INT_EQUAL 4)
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
4724994 PTRSUB 0 4724994
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_memcmp_thunk 4724994 f(ARG1) 4
0 INT_EQUAL f(ARG2) 4
0 INT_EQUAL f() 0
 CBRANCH ([(f(RSP) + 8)] INT_NOTEQUAL 7)
f(RSP) COPY f(RSP)
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_NOTEQUAL [(f(RSP) + 8)] 7
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
0 COPY 0
f() CALL libcall_memcmp_thunk aarch64 [f(RSP)] 7
 CBRANCH (f() INT_NOTEQUAL 0)
f(RSP) COPY f(RSP)
aarch64 COPY aarch64
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
(RSP + -1724) PTRSUB RSP -1724
 STORE 433 (f(RSP) + 16) (RSP + -1724)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_memcmp_thunk hsail64 [f(RSP)] 7
 CBRANCH (f() INT_NOTEQUAL 0)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
0 COPY 0
hsail64 COPY hsail64
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk hexagon [f(RSP)] 7
 CBRANCH (f() INT_NOTEQUAL 0)
hexagon COPY hexagon
0 COPY 0
f() COPY f()
 CBRANCH (f() INT_EQUAL 0)
(f() # f()) COPY (f() # f())
0 INT_EQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
0 COPY 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -104)
(RSP + -104) PTRSUB RSP -104
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 6
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
0 COPY 0
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 7
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_memcmp_thunk xscale [f(RSP)] 6
 CBRANCH (f() INT_NOTEQUAL 0)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
xscale COPY xscale
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 STORE 433 (f(RSP) + 16) (RSP + -1732)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1732) PTRSUB RSP -1732
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk amdil64 [f(RSP)] 7
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
amdil64 COPY amdil64
0 COPY 0
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 4)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk 4723662 [f(RSP)] 4
 CBRANCH (f() INT_NOTEQUAL 0)
4723662 PTRSUB 0 4723662
0 COPY 0
[f(RSP)] LOAD 433 f(RSP)
0 INT_EQUAL [(f(RSP) + 8)] 5
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
0 COPY 0
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH ([(f(RSP) + 8)] INT_NOTEQUAL 4)
0 INT_NOTEQUAL [(f(RSP) + 8)] 4
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
 STORE 433 (f(RSP) + 16) (RSP + -152)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -152) PTRSUB RSP -152
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_NOTEQUAL [(f(RSP) + 8)] 6
 CBRANCH ([(f(RSP) + 8)] INT_NOTEQUAL 6)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 4)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 COPY 0
0 INT_EQUAL [(f(RSP) + 8)] 4
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 8)
f(RSP) COPY f(RSP)
 BRANCH VZERO
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 8
1 COPY 1
(RSP + -1668) PTRSUB RSP -1668
 STORE 433 (f(RSP) + 16) (RSP + -1668)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_memcmp_thunk mips64 [f(RSP)] 6
mips64 COPY mips64
1 COPY 1
 BRANCH VZERO
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
f() CALL libcall_memcmp_thunk ppc64 [f(RSP)] 5
ppc64 COPY ppc64
0 INT_EQUAL f() 0
(RSP + -1712) PTRSUB RSP -1712
 STORE 433 (f(RSP) + 16) (RSP + -1712)
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 8)] 7
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 7
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
 STORE 433 (f(RSP) + 16) (RSP + -1652)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1652) PTRSUB RSP -1652
1 COPY 1
 BRANCH VZERO
[f(RSP)] LOAD 433 f(RSP)
armeb COPY armeb
f() CALL libcall_memcmp_thunk armeb [f(RSP)] 5
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_EQUAL [(f(RSP) + 8)] 4
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 4)
1 COPY 1
 BRANCH VZERO
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1676)
(RSP + -1676) PTRSUB RSP -1676
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_memcmp_thunk shave [f(RSP)] 5
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
shave COPY shave
 BRANCH VZERO
1 COPY 1
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1660)
(RSP + -1660) PTRSUB RSP -1660
 CBRANCH f()
 CALL func (RSP + -152) 4724127
(f() # f()) PIECE f() f()
 CBRANCH (ARG2 INT_LESS f())
(f() # f()) CAST (f() # f())
(RSP + -152) PTRSUB RSP -152
 BRANCH VZERO
4724127 PTRSUB 0 4724127
f() COPY f()
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_memcmp_thunk 4725009 [f(RSP)] 4
0 INT_EQUAL [(f(RSP) + 8)] 4
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 4)
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f(RSP) COPY f(RSP)
4725009 PTRSUB 0 4725009
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 8)] 7
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 8)] 4
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 COPY 0
f(RSP) COPY f(RSP)
f() CALL libcall_memcmp_thunk 0 [f(RSP)] 6
0 INT_EQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 BRANCH VZERO
1 COPY 1
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_memcmp_thunk arm64 [f(RSP)] 5
arm64 COPY arm64
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 7
f() CALL libcall_memcmp_thunk spir64 [f(RSP)] 6
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
spir64 COPY spir64
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_memcmp_thunk ppc32 [f(RSP)] 5
0 INT_EQUAL f() 0
f(RSP) COPY f(RSP)
ppc32 COPY ppc32
[f(RSP)] LOAD 433 f(RSP)
(RSP + -1716) PTRSUB RSP -1716
 STORE 433 (f(RSP) + 16) (RSP + -1716)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1684)
(RSP + -1684) PTRSUB RSP -1684
(f(RSP) + 16) PTRADD f(RSP) 2 8
 BRANCH VZERO
1 COPY 1
 STORE 433 (f(RSP) + 16) (RSP + -1640)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1640) PTRSUB RSP -1640
(RSP + -1696) PTRSUB RSP -1696
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1696)
0 COPY 0
0 INT_EQUAL f() 0
4724999 PTRSUB 0 4724999
 CBRANCH (f() INT_EQUAL 0)
(RSP + -72) PTRSUB RSP -72
f() CALL libcall_memcmp_thunk 4724999 f(ARG1) 4
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 COPY 0
0 INT_LESS 6 [(f(RSP) + 8)]
 CBRANCH (6 INT_LESS [(f(RSP) + 8)])
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 8)] INT_NOTEQUAL 9)
0 INT_NOTEQUAL [(f(RSP) + 8)] 9
 BRANCH VZERO
1 COPY 1
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 3)
[f(RSP)] LOAD 433 f(RSP)
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk 4723573 [f(RSP)] 3
4723573 PTRSUB 0 4723573
0 COPY 0
0 INT_NOTEQUAL [(f(RSP) + 8)] 11
 CBRANCH ([(f(RSP) + 8)] INT_NOTEQUAL 11)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
1 COPY 1
 BRANCH VZERO
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 8)] 7
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
1 COPY 1
 BRANCH VZERO
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 8)] 5
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 COPY 0
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH (f() INT_NOTEQUAL 0)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 6
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
aarch64 COPY aarch64
 CBRANCH (ARG2 INT_LESS f())
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -168) aarch64
(f() # f()) CAST (f() # f())
f() COPY f()
(f() # f()) PIECE f() f()
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
1 COPY 1
0 INT_EQUAL [(f(RSP) + 8)] 14
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 14)
thumb COPY thumb
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk thumb [f(RSP)] 5
[f(RSP)] LOAD 433 f(RSP)
f() COPY f()
 CBRANCH (f() INT_EQUAL 0)
(f() # f()) COPY (f() # f())
0 INT_NOTEQUAL f() 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
f() CALL libcall_memcmp_thunk wasm32 [f(RSP)] 6
 CBRANCH (f() INT_NOTEQUAL 0)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
0 COPY 0
wasm32 COPY wasm32
0 COPY 0
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 3
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 3)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_memcmp_thunk xcore [f(RSP)] 5
 CBRANCH (f() INT_NOTEQUAL 0)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
xcore COPY xcore
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 STORE 433 (f(RSP) + 16) (RSP + -1756)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1756) PTRSUB RSP -1756
 CBRANCH (f() INT_EQUAL 0)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 3
f(RSP) COPY f(RSP)
(RSP + -1740) PTRSUB RSP -1740
 STORE 433 (f(RSP) + 16) (RSP + -1740)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[f(RSP)] LOAD 433 f(RSP)
4723757 PTRSUB 0 4723757
f() CALL libcall_memcmp_thunk 4723757 [f(RSP)] 4
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
 BRANCH VZERO
1 COPY 1
0 INT_EQUAL f() 0
mips64eb COPY mips64eb
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
f() CALL libcall_memcmp_thunk mips64eb [f(RSP)] 8
1 COPY 1
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
[[(f(RSP) + 16)]] LOAD 433 [(f(RSP) + 16)]
 BRANCH VZERO
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
[f(RSP)] LOAD 433 f(RSP)
sparcv9 COPY sparcv9
f() CALL libcall_memcmp_thunk sparcv9 [f(RSP)] 7
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
0 INT_EQUAL [(f(RSP) + 8)] 7
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
(RSP + -184) PTRSUB RSP -184
 STORE 433 (f(RSP) + 16) (RSP + -184)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1768) PTRSUB RSP -1768
 STORE 433 (f(RSP) + 16) (RSP + -1768)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1764)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1764) PTRSUB RSP -1764
0 INT_EQUAL [(f(RSP) + 8)] 6
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
1 COPY 1
 BRANCH VZERO
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1748) PTRSUB RSP -1748
 STORE 433 (f(RSP) + 16) (RSP + -1748)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk nvptx64 [f(RSP)] 7
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
nvptx64 COPY nvptx64
1 COPY 1
 BRANCH VZERO
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
f() CALL libcall_memcmp_thunk 4725014 [f(RSP)] 4
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
4725014 PTRSUB 0 4725014
0 INT_EQUAL f() 0
0 COPY 0
f(RSP) COPY f(RSP)
0 COPY 0
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_memcmp_thunk 0 [f(RSP)] 7
 STORE 433 (f(RSP) + 16) (RSP + -1632)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1632) PTRSUB RSP -1632
 STORE 433 (f(RSP) + 16) (RSP + -1688)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1688) PTRSUB RSP -1688
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 5
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
f() CALL libcall_memcmp_thunk 4723597 [f(RSP)] 4
4723597 PTRSUB 0 4723597
[f(RSP)] LOAD 433 f(RSP)
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_memcmp_thunk sparc [f(RSP)] 5
sparc COPY sparc
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
 BRANCH VZERO
1 COPY 1
f() CALL libcall_memcmp_thunk mipsel [f(RSP)] 6
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
mipsel COPY mipsel
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_EQUAL 0)
(f() # f()) COPY (f() # f())
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
f() COPY f()
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_EQUAL [(f(RSP) + 8)] 7
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1728) PTRSUB RSP -1728
 STORE 433 (f(RSP) + 16) (RSP + -1728)
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 5
 CBRANCH (f() INT_EQUAL 0)
 STORE 433 (f(RSP) + 16) (RSP + -120)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -120) PTRSUB RSP -120
 RETURN 0 f(RSP)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(RSP + -1664) PTRSUB RSP -1664
 STORE 433 (f(RSP) + 16) (RSP + -1664)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 10)
f(RSP) COPY f(RSP)
0 COPY 0
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk 0 [f(RSP)] 10
[f(RSP)] LOAD 433 f(RSP)
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 12
(f(RSP) + 8) PTRADD f(RSP) 1 8
(RSP + -72) COPY (RSP + -72)
 CBRANCH (f(ARG2) INT_NOTEQUAL 4)
0 INT_NOTEQUAL f(ARG2) 4
(RSP + -168) PTRSUB RSP -168
 STORE 433 (f(RSP) + 16) (RSP + -168)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1672)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1672) PTRSUB RSP -1672
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 8)] 4
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 BRANCH VZERO
1 COPY 1
0 INT_NOTEQUAL [(f(RSP) + 8)] 5
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_NOTEQUAL [(f(RSP) + 8)] 7
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 8)
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk xscaleeb [f(RSP)] 8
xscaleeb COPY xscaleeb
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 7
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_EQUAL [(f(RSP) + 8)] 3
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_memcmp_thunk amdgcn [f(RSP)] 6
amdgcn COPY amdgcn
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_memcmp_thunk hsail [f(RSP)] 5
hsail COPY hsail
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1772)
(RSP + -1772) PTRSUB RSP -1772
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk 4723563 [f(RSP)] 3
4723563 PTRSUB 0 4723563
1 COPY 1
 BRANCH VZERO
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk powerpc64 [f(RSP)] 9
powerpc64 COPY powerpc64
[f(RSP)] LOAD 433 f(RSP)
 STORE 433 (f(RSP) + 16) (RSP + -1680)
(RSP + -1680) PTRSUB RSP -1680
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_memcmp_thunk kalimba [f(RSP)] 7
kalimba COPY kalimba
[f(RSP)] LOAD 433 f(RSP)
sparc64 COPY sparc64
f() CALL libcall_memcmp_thunk sparc64 [f(RSP)] 7
f(RSP) COPY f(RSP)
0 INT_EQUAL f() 0
 BRANCH VZERO
1 COPY 1
f() CALL libcall_memcmp_thunk powerpc64le [f(RSP)] 11
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
powerpc64le COPY powerpc64le
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 8)] 10
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
(RSP + -1648) PTRSUB RSP -1648
 STORE 433 (f(RSP) + 16) (RSP + -1648)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1704) PTRSUB RSP -1704
 STORE 433 (f(RSP) + 16) (RSP + -1704)
0 INT_NOTEQUAL [(f(RSP) + 8)] 5
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 8)] INT_NOTEQUAL 5)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 4)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 4
1 COPY 1
 BRANCH VZERO
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_memcmp_thunk 4723790 [f(RSP)] 4
4723790 PTRSUB 0 4723790
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
(RSP + -1720) PTRSUB RSP -1720
 STORE 433 (f(RSP) + 16) (RSP + -1720)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f() CALL libcall_memcmp_thunk s390x [f(RSP)] 5
s390x COPY s390x
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (ARG2 INT_LESS f())
(f() # f()) COPY (f() # f())
 CBRANCH (f() INT_EQUAL 0)
f() COPY f()
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
(RSP + -1780) PTRSUB RSP -1780
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 8
 BRANCH VZERO
1 COPY 1
0 INT_EQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_memcmp_thunk mipseb [f(RSP)] 6
mipseb COPY mipseb
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 6
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 5
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
 STORE 433 (f(RSP) + 16) (RSP + -1656)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1656) PTRSUB RSP -1656
f(RSP) COPY f(RSP)
mipsallegrexel COPY mipsallegrexel
f() CALL libcall_memcmp_thunk mipsallegrexel [f(RSP)] 14
0 INT_EQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 STORE 433 (f(RSP) + 16) (RSP + -1776)
(RSP + -1776) PTRSUB RSP -1776
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -200) PTRSUB RSP -200
(f() # f()) CAST (f() # f())
(f() # f()) PIECE f() f()
4723720 PTRSUB 0 4723720
(RSP + -72) PTRSUB RSP -72
0 INT_NOTEQUAL f() 0
 CALL func (RSP + -200) 4723563
4723563 PTRSUB 0 4723563
f() COPY f()
4725004 PTRSUB 0 4725004
0 COPY 0
f() CALL libcall_memcmp_thunk 4725004 f(ARG1) 4
 BRANCH VZERO
(RSP + -72) COPY (RSP + -72)
0 INT_NOTEQUAL f() 0
0 COPY 0
 BRANCH VZERO
0 COPY 0
 BRANCH VZERO
0 COPY 0
 BRANCH VZERO
ARG1 COPY ARG1
((ARG2 + 4) + ARG1) INT_ADD (ARG2 + 4) ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
0 INT_LESS ARG2 4
(ARG2 + 4) INT_SUB ARG2 4
ARG2 COPY ARG2
[[(f(RSP) + 16)]] LOAD 433 [(f(RSP) + 16)]
3 COPY 3
0 INT_EQUAL f(RSP) 0
 CBRANCH (f(RSP) INT_EQUAL 0)
 CBRANCH f()
f() COPY f()
0 INT_NOTEQUAL [(f(RSP) + 16)] 0
(RSP + -40) PTRSUB RSP -40
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_NOTEQUAL 0)
0 COPY 0
 CBRANCH (ARG2 INT_LESS 4)
f(RSP) COPY f(RSP)
(f() + 40) CAST (f() + 40)
 CBRANCH f()
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_NOTEQUAL f() [(f() + 40)]
0 COPY 0
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) INT_ADD f() 40
(RSP + -40) PTRSUB RSP -40
[(f() + 40)] LOAD 433 (f() + 40)
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
1 COPY 1
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
2 COPY 2
f(RSP) COPY f(RSP)
 STORE 433 (f(RSP) + 16) (RSP + -164)
(RSP + -164) CAST (RSP + -164)
(RSP + -164) PTRSUB RSP -164
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 8)] CAST [(f(RSP) + 8)]
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH (4 INT_LESS [(f(RSP) + 8)])
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_LESS 4 [(f(RSP) + 8)]
f(RSP) COPY f(RSP)
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
0 INT_LESS 2 f(ARG2)
 CBRANCH (2 INT_LESS f(ARG2))
(RSP + -40) COPY (RSP + -40)
(RSP + -168) PTRSUB RSP -168
 STORE 433 (f(RSP) + 16) (RSP + -160)
(RSP + -160) CAST (RSP + -160)
(RSP + -160) PTRSUB RSP -160
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(RSP)
 RETURN 1
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
1 COPY 1
f() CALL libcall_memcmp_thunk macho ([f(RSP)] + ([(f(RSP) + 8)] + -5)) 5
([f(RSP)] + ([(f(RSP) + 8)] + -5)) CAST ([f(RSP)] + ([(f(RSP) + 8)] + -5))
macho COPY macho
0 INT_EQUAL f() 0
f() CALL libcall_memcmp_thunk 4725116 ((f(ARG2) + 3) + f(ARG1)) 3
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk 4725111 ((ARG2 + 4) + ARG1) 4
([f(RSP)] + ([(f(RSP) + 8)] + -5)) INT_ADD ([(f(RSP) + 8)] + -5) [f(RSP)]
[f(RSP)] LOAD 433 f(RSP)
([(f(RSP) + 8)] + -5) INT_ADD [(f(RSP) + 8)] -5
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
0 INT_EQUAL f() 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(ARG2) + 3) INT_SUB f(ARG2) 3
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
((f(ARG2) + 3) + f(ARG1)) CAST ((f(ARG2) + 3) + f(ARG1))
4725116 PTRSUB 0 4725116
[(f(RSP) + 16)] CAST [(f(RSP) + 16)]
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
((ARG2 + 4) + ARG1) CAST ((ARG2 + 4) + ARG1)
4725111 PTRSUB 0 4725111
((f(ARG2) + 3) + f(ARG1)) INT_ADD (f(ARG2) + 3) f(ARG1)
 BRANCH VZERO
(RSP + -40) COPY (RSP + -40)
(RSP + -40) COPY (RSP + -40)
f(RSP) COPY f(RSP)
[[(f(RSP) + 16)]] COPY [[(f(RSP) + 16)]]
(ARG1 + 16) INT_ADD ARG1 16
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
 RETURN 0 [(ARG1 + 16)]
(ARG1 + 16) CAST (ARG1 + 16)
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
((f() - [ARG1]) / 16) INT_SRIGHT (f() - [ARG1]) 4
(f() - [ARG1]) INT_SUB f() [ARG1]
 RETURN 0 ((f() - [ARG1]) / 16)
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 CALL func ARG1 ((ARG2 * 16) + [ARG1]) ((ARG2 * 16) + [ARG1])
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 CALL func ARG1 ARG2 ARG2
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 ((ARG2 * 16) + [ARG1]) ((ARG2 * 16) + [ARG1])
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
0 INT_LESS (([(ARG1 + 8)] - [ARG1]) / 16) ARG2
(ARG2 * 16) INT_MULT ARG2 16
0 INT_LESS ARG2 (([(ARG1 + 8)] - [ARG1]) / 16)
(ARG2 * 16) INT_MULT ARG2 16
(ARG2 * 16) INT_MULT ARG2 16
(ARG2 * 16) INT_MULT ARG2 16
0 INT_LESS f() ARG2
(([(ARG1 + 8)] - [ARG1]) / 16) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 4
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
(([(ARG1 + 8)] - [ARG1]) / 16) CAST (([(ARG1 + 8)] - [ARG1]) / 16)
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH (ARG2 INT_LESS (([(ARG1 + 8)] - [ARG1]) / 16))
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
 CALL func f(ARG1)
 CBRANCH (f() INT_LESS ARG2)
 CBRANCH ((([(ARG1 + 8)] - [ARG1]) / 16) INT_LESS ARG2)
([ARG1] + (ARG2 * 16)) INT_ADD [ARG1] (ARG2 * 16)
((ARG2 * 16) + [ARG1]) INT_ADD (ARG2 * 16) [ARG1]
0 INT_NOTEQUAL f(ARG1) ([ARG1] + (ARG2 * 16))
 CBRANCH (f(ARG1) INT_NOTEQUAL ([ARG1] + (ARG2 * 16)))
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
f(ARG1) CALL func 16 f(ARG1)
0 INT_NOTEQUAL f(ARG1) 0
 BRANCH VZERO
(f(ARG1) + 16) INT_ADD f(ARG1) 16
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([ARG1] + (ARG2 * 16)) INT_ADD [ARG1] (ARG2 * 16)
 BRANCH VZERO
(([(ARG1 + 8)] - [ARG1]) / 16) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 4
(([(ARG1 + 8)] - [ARG1]) / 16) CAST (([(ARG1 + 8)] - [ARG1]) / 16)
((ARG2 * 16) + [ARG1]) INT_ADD (ARG2 * 16) [ARG1]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL func ([ARG1] + (ARG2 * 16)) [(ARG1 + 8)] ([ARG1] + (ARG2 * 16)) (ARG2 * 16)
 CALL libcall_append_thunk ARG1 ARG2
 RETURN 0
0 INT_SLESS ARG1 2
0 INT_EQUAL ARG1 1
0 INT_EQUAL ARG1 2
0 INT_EQUAL ARG1 3
0 INT_EQUAL ARG1 0
 CBRANCH (ARG1 INT_EQUAL 1)
 CBRANCH (ARG1 INT_EQUAL 0)
f() COPY f()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp
 RETURN 0 Symbol
 RETURN 0 Symbol
 RETURN 0 f()
 RETURN 0 macho
 RETURN 0 Symbol
f() CAST f()
Symbol COPY Symbol
macho COPY macho
Symbol COPY Symbol
Symbol COPY Symbol
unknown object format type COPY unknown object format type
f() CALL func unknown object format type /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp 536
Symbol COPY Symbol
Symbol COPY Symbol
 CBRANCH (ARG1 INT_SLESS 2)
 CBRANCH (ARG1 INT_EQUAL 2)
Symbol COPY Symbol
 CBRANCH (ARG1 INT_EQUAL 3)
macho COPY macho
ARG1 COPY ARG1
f() CALL libcall_memcmp_thunk cloudabi ARG1 8
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG2 COPY ARG2
0 INT_LESS ARG2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
19 COPY 19
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
20 COPY 20
f() COPY f()
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
21 COPY 21
f(RSP) COPY f(RSP)
 CBRANCH f()
17 COPY 17
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
18 COPY 18
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
24 COPY 24
25 COPY 25
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
26 COPY 26
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
22 COPY 22
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
23 COPY 23
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
0 INT_EQUAL [(f(RSP) + 16)] 0
11 COPY 11
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(RSP + -40) PTRSUB RSP -40
(f(RSP) + 16) PTRADD f(RSP) 2 8
12 COPY 12
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 16)] 0
8 COPY 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
9 COPY 9
10 COPY 10
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
15 COPY 15
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
f(RSP) COPY f(RSP)
0 INT_EQUAL f(RSP) 0
 CBRANCH (f(RSP) INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
16 COPY 16
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
13 COPY 13
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f() + 40) CAST (f() + 40)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
13 COPY 13
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
f(RSP) COPY f(RSP)
14 COPY 14
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
1 COPY 1
2 COPY 2
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
[[(f(RSP) + 16)]] LOAD 433 [(f(RSP) + 16)]
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(RSP + -40) PTRSUB RSP -40
 CBRANCH f()
6 COPY 6
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
7 COPY 7
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
3 COPY 3
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH f()
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
4 COPY 4
5 COPY 5
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
27 COPY 27
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 COPY 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH (ARG2 INT_LESS 8)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_NOTEQUAL f() [(f() + 40)]
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f() + 40) INT_ADD f() 40
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 COPY 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -752)
(RSP + -752) PTRSUB RSP -752
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
(RSP + -804) PTRSUB RSP -804
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -804)
 CBRANCH (2 INT_LESS [(f(RSP) + 8)])
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk 4724566 [f(RSP)] 3
0 COPY 0
[f(RSP)] LOAD 433 f(RSP)
4724566 PTRSUB 0 4724566
 CBRANCH (4 INT_LESS [(f(RSP) + 8)])
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 COPY 0
f(RSP) COPY f(RSP)
0 INT_LESS 4 [(f(RSP) + 8)]
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(RSP + -844) PTRSUB RSP -844
0 INT_LESS 6 [(f(RSP) + 8)]
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
f(RSP) COPY f(RSP)
 CBRANCH (6 INT_LESS [(f(RSP) + 8)])
0 COPY 0
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 COPY 0
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
0 INT_LESS 4 [(f(RSP) + 8)]
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH (4 INT_LESS [(f(RSP) + 8)])
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (7 INT_LESS [(f(RSP) + 8)])
kfreebsd COPY kfreebsd
0 COPY 0
f() CALL libcall_memcmp_thunk kfreebsd [f(RSP)] 8
 CBRANCH (f() INT_NOTEQUAL 0)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -748)
(RSP + -748) PTRSUB RSP -748
0 INT_LESS 6 [(f(RSP) + 8)]
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH (6 INT_LESS [(f(RSP) + 8)])
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
(RSP + -760) PTRSUB RSP -760
 STORE 433 (f(RSP) + 16) (RSP + -760)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
freebsd COPY freebsd
f() CALL libcall_memcmp_thunk freebsd [f(RSP)] 7
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
rtems COPY rtems
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk rtems [f(RSP)] 5
[f(RSP)] LOAD 433 f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -812)
(RSP + -812) PTRSUB RSP -812
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
(RSP + -756) PTRSUB RSP -756
 STORE 433 (f(RSP) + 16) (RSP + -756)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_LESS 6 [(f(RSP) + 8)]
0 COPY 0
 CBRANCH (6 INT_LESS [(f(RSP) + 8)])
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH (8 INT_LESS [(f(RSP) + 8)])
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_LESS 8 [(f(RSP) + 8)]
 CBRANCH (2 INT_LESS [(f(RSP) + 8)])
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
4724482 PTRSUB 0 4724482
0 COPY 0
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk 4724482 [f(RSP)] 3
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (3 INT_LESS [(f(RSP) + 8)])
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk 4724561 [f(RSP)] 4
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
4724561 PTRSUB 0 4724561
0 COPY 0
(RSP + -808) PTRSUB RSP -808
 STORE 433 (f(RSP) + 16) (RSP + -808)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH (4 INT_LESS [(f(RSP) + 8)])
f(RSP) COPY f(RSP)
0 COPY 0
0 INT_LESS 4 [(f(RSP) + 8)]
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_LESS 2 [(f(RSP) + 8)]
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -840)
(RSP + -840) PTRSUB RSP -840
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_LESS 7 [(f(RSP) + 8)]
 STORE 433 (f(RSP) + 16) (RSP + -792)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -792) PTRSUB RSP -792
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (3 INT_LESS [(f(RSP) + 8)])
4724581 PTRSUB 0 4724581
f() CALL libcall_memcmp_thunk 4724581 [f(RSP)] 4
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
(RSP + -736) PTRSUB RSP -736
 STORE 433 (f(RSP) + 16) (RSP + -736)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH (5 INT_LESS [(f(RSP) + 8)])
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk macosx [f(RSP)] 6
[f(RSP)] LOAD 433 f(RSP)
macosx COPY macosx
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
(RSP + -836) PTRSUB RSP -836
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -836)
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (3 INT_LESS [(f(RSP) + 8)])
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
4724586 PTRSUB 0 4724586
f() CALL libcall_memcmp_thunk 4724586 [f(RSP)] 4
[f(RSP)] LOAD 433 f(RSP)
(RSP + -788) PTRSUB RSP -788
 STORE 433 (f(RSP) + 16) (RSP + -788)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
0 COPY 0
 CBRANCH (5 INT_LESS [(f(RSP) + 8)])
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_LESS 5 [(f(RSP) + 8)]
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(RSP + -800) PTRSUB RSP -800
 STORE 433 (f(RSP) + 16) (RSP + -800)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk bitrig [f(RSP)] 6
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
bitrig COPY bitrig
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
0 INT_LESS 2 [(f(RSP) + 8)]
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
(RSP + -744) PTRSUB RSP -744
 STORE 433 (f(RSP) + 16) (RSP + -744)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH (4 INT_LESS [(f(RSP) + 8)])
0 COPY 0
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
linux COPY linux
f() CALL libcall_memcmp_thunk linux [f(RSP)] 5
 CBRANCH (f() INT_NOTEQUAL 0)
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH (2 INT_LESS [(f(RSP) + 8)])
[f(RSP)] LOAD 433 f(RSP)
4724577 PTRSUB 0 4724577
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk 4724577 [f(RSP)] 3
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -796)
(RSP + -796) PTRSUB RSP -796
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
f(RSP) COPY f(RSP)
0 INT_LESS 3 [(f(RSP) + 8)]
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH (2 INT_LESS [(f(RSP) + 8)])
f() CALL libcall_memcmp_thunk 4724501 [f(RSP)] 3
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
4724501 PTRSUB 0 4724501
(RSP + -740) PTRSUB RSP -740
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -740)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_LESS 5 [(f(RSP) + 8)]
 CBRANCH (2 INT_LESS [(f(RSP) + 8)])
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk 4724598 [f(RSP)] 3
[f(RSP)] LOAD 433 f(RSP)
4724598 PTRSUB 0 4724598
(RSP + -780) PTRSUB RSP -780
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -780)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH (6 INT_LESS [(f(RSP) + 8)])
f() CALL libcall_memcmp_thunk solaris [f(RSP)] 7
solaris COPY solaris
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (7 INT_LESS [(f(RSP) + 8)])
[f(RSP)] LOAD 433 f(RSP)
elfiamcu COPY elfiamcu
f() CALL libcall_memcmp_thunk elfiamcu [f(RSP)] 8
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -776)
(RSP + -776) PTRSUB RSP -776
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_LESS 3 [(f(RSP) + 8)]
 STORE 433 (f(RSP) + 16) (RSP + -828)
(RSP + -828) PTRSUB RSP -828
(f(RSP) + 16) PTRADD f(RSP) 2 8
 BRANCH VZERO
1 COPY 1
 CBRANCH (4 INT_LESS [(f(RSP) + 8)])
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk win32 [f(RSP)] 5
win32 COPY win32
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (5 INT_LESS [(f(RSP) + 8)])
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_LESS 5 [(f(RSP) + 8)]
(f(RSP) + 8) PTRADD f(RSP) 1 8
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
[f(RSP)] LOAD 433 f(RSP)
netbsd COPY netbsd
f() CALL libcall_memcmp_thunk netbsd [f(RSP)] 6
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_LESS 4 [(f(RSP) + 8)]
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
1 COPY 1
 CBRANCH (5 INT_LESS [(f(RSP) + 8)])
f() CALL libcall_memcmp_thunk amdhsa [f(RSP)] 6
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
amdhsa COPY amdhsa
(RSP + -784) PTRSUB RSP -784
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -784)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_LESS 2 [(f(RSP) + 8)]
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH (6 INT_LESS [(f(RSP) + 8)])
openbsd COPY openbsd
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk openbsd [f(RSP)] 7
[f(RSP)] LOAD 433 f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_LESS 2 [(f(RSP) + 8)]
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -832) PTRSUB RSP -832
 STORE 433 (f(RSP) + 16) (RSP + -832)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_LESS 3 [(f(RSP) + 8)]
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(RSP)
 RETURN 1
1 COPY 1
 BRANCH VZERO
(RSP + -820) PTRSUB RSP -820
 STORE 433 (f(RSP) + 16) (RSP + -820)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f() CALL libcall_memcmp_thunk haiku [f(RSP)] 5
[f(RSP)] LOAD 433 f(RSP)
haiku COPY haiku
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_LESS 6 [(f(RSP) + 8)]
dragonfly COPY dragonfly
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk dragonfly [f(RSP)] 9
[f(RSP)] LOAD 433 f(RSP)
 BRANCH VZERO
1 COPY 1
 STORE 433 (f(RSP) + 16) (RSP + -764)
(RSP + -764) PTRSUB RSP -764
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_LESS 7 [(f(RSP) + 8)]
(f(RSP) + 8) PTRADD f(RSP) 1 8
minix COPY minix
f() CALL libcall_memcmp_thunk minix [f(RSP)] 5
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -816)
(RSP + -816) PTRSUB RSP -816
 BRANCH VZERO
1 COPY 1
 CBRANCH (5 INT_LESS f(ARG2))
(RSP + -40) COPY (RSP + -40)
0 INT_LESS 5 f(ARG2)
0 INT_LESS 4 [(f(RSP) + 8)]
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
 BRANCH VZERO
1 COPY 1
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH (3 INT_LESS [(f(RSP) + 8)])
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_LESS 3 [(f(RSP) + 8)]
4724611 PTRSUB 0 4724611
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk 4724611 [f(RSP)] 4
[f(RSP)] LOAD 433 f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -772)
(RSP + -772) PTRSUB RSP -772
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_LESS 5 [(f(RSP) + 8)]
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_LESS 6 [(f(RSP) + 8)]
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_LESS 2 [(f(RSP) + 8)]
f() CALL libcall_memcmp_thunk windows [f(RSP)] 7
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
windows COPY windows
(RSP + -824) PTRSUB RSP -824
 STORE 433 (f(RSP) + 16) (RSP + -824)
(f(RSP) + 16) PTRADD f(RSP) 2 8
1 COPY 1
 BRANCH VZERO
0 INT_EQUAL f() 0
f() CALL libcall_memcmp_thunk watchos [f(RSP)] 7
f(RSP) COPY f(RSP)
watchos COPY watchos
[f(RSP)] LOAD 433 f(RSP)
 STORE 433 (f(RSP) + 16) (RSP + -768)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -768) PTRSUB RSP -768
1 COPY 1
 BRANCH VZERO
[[(f(RSP) + 16)]] COPY [[(f(RSP) + 16)]]
0 INT_NOTEQUAL f() 0
cloudabi COPY cloudabi
(RSP + -40) PTRSUB RSP -40
f() CALL libcall_memcmp_thunk darwin f(ARG1) 6
darwin COPY darwin
(f(RSP) + 16) PTRADD f(RSP) 2 8
 BRANCH VZERO
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL f() 0
(RSP + -40) COPY (RSP + -40)
ARG3 COPY ARG3
ARG1 COPY ARG1
ARG2 COPY ARG2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -120) PTRSUB RSP -120
(FS_OFFSET + 40) INT_ADD 0 40
((A_Stack[-0x70]:8 - A_Stack[-0x78]:8) / 16) INT_SRIGHT (A_Stack[-0x70]:8 - A_Stack[-0x78]:8) 4
A_Stack[-0x78]:8 CAST A_Stack[-0x78]:8
 CALL func (RSP + -1832) (RSP + -120) 45 4294967295 1
 CALL func (RSP + -120)
0 INT_NOTEQUAL ((A_Stack[-0x70]:8 - A_Stack[-0x78]:8) / 16) 0
(RSP + -120) PTRSUB RSP -120
0 COPY 0
(RSP + -1832) PTRSUB RSP -1832
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 COPY 0
(RSP + -120) PTRSUB RSP -120
0 COPY 0
(RSP + -120) PTRSUB RSP -120
 CBRANCH (((A_Stack[-0x70]:8 - A_Stack[-0x78]:8) / 16) INT_NOTEQUAL 0)
(A_Stack[-0x70]:8 - A_Stack[-0x78]:8) INT_SUB A_Stack[-0x70]:8 A_Stack[-0x78]:8
 CBRANCH (4 INT_LESS ((f() - f()) / 16))
0 INT_NOTEQUAL f(RSP) 0
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
(f() - f()) INT_SUB f() f()
f() INT_ZEXT f()
0 INT_NOTEQUAL f(RSP) 0
0 INT_NOTEQUAL f(RSP) 0
 CBRANCH (f() INT_NOTEQUAL f())
f() CALL func (RSP + -188)
0 INT_NOTEQUAL f(RSP) 0
 CBRANCH (((f() - f()) / 16) INT_LESS 5)
(RSP + -120) COPY (RSP + -120)
((f() - f()) / 16) CAST ((f() - f()) / 16)
0 COPY 0
(RSP + -120) COPY (RSP + -120)
(RSP + -120) PTRSUB RSP -120
(RSP + -188) PTRSUB RSP -188
0 INT_LESS ((f() - f()) / 16) 5
f() CAST f()
4 COPY 4
0 INT_NOTEQUAL f() f()
 CBRANCH (f(RSP) INT_EQUAL 0)
(RSP + -120) COPY (RSP + -120)
0 INT_LESS ((f() - f()) / 16) 4
(RSP + -120) COPY (RSP + -120)
3 COPY 3
(RSP + -120) PTRSUB RSP -120
0 INT_EQUAL f(RSP) 1
 CBRANCH (((f() - f()) / 16) INT_LESS 4)
((f() - f()) / 16) CAST ((f() - f()) / 16)
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
 CBRANCH (f(RSP) INT_EQUAL 1)
(f() - f()) INT_SUB f() f()
f() CAST f()
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -152) CAST (RSP + -152)
(RSP + -152) PTRSUB RSP -152
 CALL libcall_operator+=_thunk (RSP + -152) 45
 CBRANCH ([(f() + 56)] INT_LESS f())
[(f() + 48)] LOAD 433 (f() + 48)
f() COPY f()
0 INT_NOTEQUAL f() 0
0 COPY 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
f() COPY f()
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_memcmp_thunk f() f() f()
0 COPY 0
f() CAST f()
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH ((f() + 1) INT_LESS f())
0 COPY 0
[((f() + 1) + (RSP + -188))] LOAD 433 ((f() + 1) + (RSP + -188))
(f() + 1) INT_ZEXT (f() + 1)
0 INT_NOTEQUAL [((f() + 1) + (RSP + -188))] 0
 CBRANCH ([((f() + 1) + (RSP + -188))] INT_NOTEQUAL 0)
(RSP + -188) PTRSUB RSP -188
((f() + 1) + (RSP + -188)) PTRADD (RSP + -188) (f() + 1) 1
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
0 COPY 0
f() CALL libcall_memcmp_thunk [((f() * 16) + f())] f() f()
f() CAST f()
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (f(RSP) INT_NOTEQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
0 INT_NOTEQUAL f(RSP) 0
 CBRANCH (f(RSP) INT_NOTEQUAL 1)
0 INT_EQUAL f() f()
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -120) 5
 CALL libcall_basic_string_thunk
(f() - f()) INT_SUB f() f()
0 COPY 0
f() COPY f()
4 COPY 4
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
((f() - f()) / 34359738352) SUBPIECE ((f() - f()) / 16) 0
(RSP + -120) COPY (RSP + -120)
((f() - f()) / 16) CAST ((f() - f()) / 16)
(f() - f()) INT_SUB f() f()
(RSP + -120) COPY (RSP + -120)
 CBRANCH (((f() - f()) / 16) INT_LESS 5)
f() CAST f()
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
(RSP + -120) PTRSUB RSP -120
f() CAST f()
0 INT_LESS ((f() - f()) / 16) 5
(RSP + -120) PTRSUB RSP -120
(RSP + -120) PTRSUB RSP -120
 CBRANCH (f() INT_EQUAL f())
 CBRANCH (f() INT_EQUAL 0)
f() CAST f()
 BRANCH VZERO
f() CALL libcall_memcmp_thunk [(f() + 32)] f() f()
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (((f() - f()) / 16) INT_LESS 3)
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
0 INT_LESS ((f() - f()) / 16) 3
((f() - f()) / 16) CAST ((f() - f()) / 16)
(RSP + -120) PTRSUB RSP -120
f() CAST f()
0 INT_NOTEQUAL f() 0
(f() - f()) INT_SUB f() f()
f() COPY f()
(RSP + -120) COPY (RSP + -120)
 CALL func (RSP + -120) 4
(RSP + -120) PTRSUB RSP -120
(RSP + -120) COPY (RSP + -120)
2 COPY 2
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
([f(RSP)] + [(f() + 48)]) COPY ([f(RSP)] + [(f() + 48)])
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
[f(RSP)] COPY [f(RSP)]
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
0 COPY 0
 CBRANCH ([f(RSP)] INT_EQUAL 0)
0 INT_EQUAL [f(RSP)] 0
 RETURN 1
 CBRANCH (3 INT_LESS ((f() - f()) / 16))
(f() - f()) INT_SUB f() f()
f() CAST f()
(RSP + -120) PTRSUB RSP -120
((f() - f()) / 16) CAST ((f() - f()) / 16)
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
3 COPY 3
0 COPY 0
f() CAST f()
(RSP + -120) PTRSUB RSP -120
0 INT_LESS 4 ((f() - f()) / 16)
 CBRANCH (((f() - f()) / 16) INT_LESS 4)
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
((f() - f()) / 16) CAST ((f() - f()) / 16)
(f() - f()) INT_SUB f() f()
(RSP + -120) COPY (RSP + -120)
0 INT_LESS ((f() - f()) / 16) 4
(RSP + -120) PTRSUB RSP -120
(RSP + -120) COPY (RSP + -120)
 CBRANCH ([((RSP + -188) + f())] INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_LESS f())
0 INT_LESSEQUAL ((f() - f()) / 16) f()
(RSP + -120) PTRSUB RSP -120
f() CAST f()
 CBRANCH (f() INT_LESS f())
(RSP + -216) PTRSUB RSP -216
0 INT_LESS f() f()
f() INT_ZEXT f()
((f() - f()) / 16) CAST ((f() - f()) / 16)
(RSP + -120) COPY (RSP + -120)
 CBRANCH (((f() - f()) / 16) INT_LESSEQUAL f())
 CALL func (RSP + -216) 4723533
(RSP + -120) COPY (RSP + -120)
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
(f() - f()) INT_SUB f() f()
4723533 PTRSUB 0 4723533
 CBRANCH (f(RSP) INT_EQUAL 0)
0 INT_EQUAL f(RSP) 0
0 INT_NOTEQUAL f() 0
(f() + 40) CAST (f() + 40)
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -120)
f(ARG1) COPY f(ARG1)
((f() - f()) / 16) CAST ((f() - f()) / 16)
f() CAST f()
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
 CALL libcall_~basic_string_thunk (RSP + -184)
(f() + 40) INT_ADD f() 40
(RSP + -120) PTRSUB RSP -120
 CBRANCH (f() INT_EQUAL [40])
f() INT_ZEXT f()
(RSP + -120) PTRSUB RSP -120
(f() - f()) INT_SUB f() f()
0 INT_EQUAL f() [40]
[40] LOAD 433 (f() + 40)
 CALL libcall_~basic_string_thunk (RSP + -152)
 CBRANCH (((f() - f()) / 16) INT_LESSEQUAL f())
(RSP + -120) COPY (RSP + -120)
(RSP + -120) COPY (RSP + -120)
(RSP + -184) PTRSUB RSP -184
0 INT_LESSEQUAL ((f() - f()) / 16) f()
 CALL libcall_basic_string_thunk f(ARG1)
(RSP + -152) CAST (RSP + -152)
 CBRANCH ((f() + 1) INT_LESS f())
(RSP + -120) PTRSUB RSP -120
f() CAST f()
0 INT_LESSEQUAL ((f() - f()) / 16) f()
f() INT_ZEXT f()
f() CAST f()
(RSP + -120) PTRSUB RSP -120
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
f() COPY f()
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -216) 4723533
0 INT_LESSEQUAL ((f() - f()) / 16) f()
f() INT_ZEXT f()
 CBRANCH (((f() - f()) / 16) INT_LESSEQUAL f())
 CBRANCH (((f() - f()) / 16) INT_LESSEQUAL f())
(f() - f()) INT_SUB f() f()
4723533 PTRSUB 0 4723533
(RSP + -120) PTRSUB RSP -120
((f() - f()) / 16) CAST ((f() - f()) / 16)
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
((f() - f()) / 16) CAST ((f() - f()) / 16)
(f() - f()) INT_SUB f() f()
(RSP + -216) PTRSUB RSP -216
 CBRANCH (f(RSP) INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH ((f() + 1) INT_LESS f())
(f() + 1) INT_ZEXT (f() + 1)
(RSP + -188) PTRSUB RSP -188
((f() + 1) + (RSP + -188)) PTRADD (RSP + -188) (f() + 1) 1
0 COPY 0
0 INT_NOTEQUAL [((f() + 1) + (RSP + -188))] 0
 CBRANCH ([((f() + 1) + (RSP + -188))] INT_NOTEQUAL 0)
[((f() + 1) + (RSP + -188))] LOAD 433 ((f() + 1) + (RSP + -188))
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -120) PTRSUB RSP -120
(RSP + -216) PTRSUB RSP -216
 CALL func (RSP + -120) (RSP + -216) (RSP + -216)
 CBRANCH ~(f())
f() CALL func (RSP + -188)
f() INT_ZEXT f()
 CBRANCH (f() INT_LESS f())
~(f()) BOOL_NEGATE f()
(RSP + -188) PTRSUB RSP -188
(f() + 1) INT_ADD f() 1
0 INT_LESS f() f()
 BRANCH VZERO
 CBRANCH (f() INT_LESSEQUAL [(f() + 40)])
[(f() + 32)] LOAD 433 (f() + 32)
0 COPY 0
f() COPY f()
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() COPY f()
 CBRANCH ([(((f() * 16) + f()) + 8)] INT_LESS f())
0 INT_EQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
[((f() * 16) + f())] COPY [((f() * 16) + f())]
f() COPY f()
0 COPY 0
f() COPY f()
 CBRANCH (f() INT_EQUAL 1)
0 INT_NOTEQUAL f() 0
0 INT_NOTEQUAL f(RSP) 0
 BRANCH VZERO
f(RSP) CALL func [((f() * 16) + f())] [(((f() * 16) + f()) + 8)] [((f() * 16) + f())]
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (f() INT_NOTEQUAL ((f() - f()) / 16))
(f() + 1) INT_ADD f() 1
f() CALL func (RSP + -188)
 BRANCH VZERO
 CBRANCH f()
0 INT_LESS f() f()
f() INT_ZEXT f()
(RSP + -188) PTRSUB RSP -188
 CBRANCH (f() INT_LESS f())
 CBRANCH (1 INT_LESS ((f() - f()) / 16))
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
1 COPY 1
0 COPY 0
0 INT_LESS 2 ((f() - f()) / 16)
(f() - f()) INT_SUB f() f()
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
f() CAST f()
(f() - f()) INT_SUB f() f()
(RSP + -120) PTRSUB RSP -120
((f() - f()) / 16) CAST ((f() - f()) / 16)
(RSP + -120) PTRSUB RSP -120
f() CAST f()
(RSP + -120) PTRSUB RSP -120
 CBRANCH (((f() - f()) / 16) INT_LESS 2)
 CBRANCH (2 INT_LESS ((f() - f()) / 16))
(RSP + -120) COPY (RSP + -120)
((f() - f()) / 16) CAST ((f() - f()) / 16)
(RSP + -120) COPY (RSP + -120)
0 INT_LESS ((f() - f()) / 16) 2
(f() - f()) INT_SUB f() f()
3 COPY 3
((f() - f()) / 16) CAST ((f() - f()) / 16)
 CBRANCH (((f() - f()) / 16) INT_LESS 4)
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
(RSP + -120) COPY (RSP + -120)
f() CAST f()
0 INT_LESS ((f() - f()) / 16) 4
(RSP + -120) COPY (RSP + -120)
(RSP + -120) PTRSUB RSP -120
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
f() CALL libcall_memcmp_thunk [(f() + 32)] f() f()
f() CAST f()
(f() - f()) INT_SUB f() f()
f() INT_ZEXT f()
f() CAST f()
(RSP + -120) PTRSUB RSP -120
f() CAST f()
 BRANCH VZERO
(f() - f()) INT_SUB f() f()
 CBRANCH (((f() - f()) / 16) INT_LESSEQUAL f())
(RSP + -120) PTRSUB RSP -120
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
(RSP + -120) PTRSUB RSP -120
0 INT_LESSEQUAL ((f() - f()) / 16) f()
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
f() INT_ZEXT f()
(f() + 1) INT_ADD f() 1
0 COPY 0
0 INT_NOTEQUAL f() ((f() - f()) / 16)
((f() - f()) / 16) CAST ((f() - f()) / 16)
(RSP + -120) COPY (RSP + -120)
(RSP + -120) COPY (RSP + -120)
0 INT_EQUAL f(RSP) 13
 CBRANCH (f(RSP) INT_EQUAL 13)
1 COPY 1
 BRANCH VZERO
 CBRANCH ([((RSP + -188) + f())] INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
(RSP + -120) COPY (RSP + -120)
(RSP + -120) COPY (RSP + -120)
(RSP + -120) PTRSUB RSP -120
(f() - f()) INT_SUB f() f()
0 INT_EQUAL ((A_Stack[-0x70]:8 - A_Stack[-0x78]:8) / 16) 0
((f() - f()) / 16) CAST ((f() - f()) / 16)
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
0 COPY 0
0 COPY 0
0 INT_LESS 1 ((f() - f()) / 16)
A_Stack[-0x78]:8 CAST A_Stack[-0x78]:8
(RSP + -120) PTRSUB RSP -120
 CBRANCH (((A_Stack[-0x70]:8 - A_Stack[-0x78]:8) / 16) INT_EQUAL 0)
((A_Stack[-0x70]:8 - A_Stack[-0x78]:8) / 16) INT_SRIGHT (A_Stack[-0x70]:8 - A_Stack[-0x78]:8) 4
f() CAST f()
(RSP + -120) PTRSUB RSP -120
(A_Stack[-0x70]:8 - A_Stack[-0x78]:8) INT_SUB A_Stack[-0x70]:8 A_Stack[-0x78]:8
 CBRANCH (f(RSP) INT_EQUAL 13)
(RSP + -120) PTRSUB RSP -120
(RSP + -120) PTRSUB RSP -120
(f() - f()) INT_SUB f() f()
 CALL func (RSP + -120) 4
2 COPY 2
(RSP + -120) COPY (RSP + -120)
(RSP + -120) COPY (RSP + -120)
((f() - f()) / 16) CAST ((f() - f()) / 16)
f() COPY f()
 CBRANCH (((f() - f()) / 16) INT_LESS 3)
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
0 INT_EQUAL f() 0
0 INT_LESS ((f() - f()) / 16) 3
f() CAST f()
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH ([(f() + 40)] INT_LESS f())
f() COPY f()
[(f() + 32)] LOAD 433 (f() + 32)
0 COPY 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
f() COPY f()
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_LESS f() f()
 CBRANCH (f(RSP) INT_EQUAL 8)
f() CAST f()
 CBRANCH (((f() - f()) / 16) INT_LESS 4)
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
 CALL func (RSP + -376) androideabi
 CBRANCH f()
androideabi COPY androideabi
(RSP + -120) PTRSUB RSP -120
0 INT_LESS ((f() - f()) / 16) 4
(RSP + -120) COPY (RSP + -120)
(RSP + -120) COPY (RSP + -120)
(RSP + -376) PTRSUB RSP -376
(f() - f()) INT_SUB f() f()
((f() - f()) / 16) CAST ((f() - f()) / 16)
0 COPY 0
3 COPY 3
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 2)
cygwin COPY cygwin
(RSP + -216) PTRSUB RSP -216
0 INT_LESS [(((f() * 16) + f()) + 8)] f()
0 INT_EQUAL f(RSP) 0
f() COPY f()
 CALL func (RSP + -216) mingw
mingw COPY mingw
f() COPY f()
 CALL func (RSP + -216) cygwin
f() COPY f()
0 INT_LESS f() f()
f() COPY f()
 CBRANCH (f() INT_LESS f())
f(RSP) CALL func [((f() * 16) + f())] [(((f() * 16) + f()) + 8)] [((f() * 16) + f())]
0 INT_EQUAL f() 3
 CBRANCH (f() INT_EQUAL 3)
(RSP + -216) PTRSUB RSP -216
 CBRANCH ([(((f() * 16) + f()) + 8)] INT_EQUAL f())
f() COPY f()
0 INT_NOTEQUAL f() 0
[((f() * 16) + f())] COPY [((f() * 16) + f())]
0 INT_EQUAL f() 0
f() COPY f()
 CBRANCH (f() INT_EQUAL 0)
 CALL libcall_basic_string_thunk
0 INT_EQUAL [((RSP + -188) + f())] 0
 CBRANCH ([((RSP + -188) + f())] INT_EQUAL 0)
f() INT_ZEXT f()
[((RSP + -188) + f())] LOAD 433 ((RSP + -188) + f())
0 INT_EQUAL f(RSP) 8
(RSP + -188) PTRSUB RSP -188
((RSP + -188) + f()) PTRADD (RSP + -188) f() 1
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
1 COPY 1
 BRANCH VZERO
f() COPY f()
f() COPY f()
f() COPY f()
0 INT_EQUAL f() 0
0 INT_NOTEQUAL f() 0
 CBRANCH f()
1 COPY 1
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
f() CAST f()
 CBRANCH (((f() - f()) / 16) INT_LESS 3)
((f() - f()) / 16) CAST ((f() - f()) / 16)
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
(RSP + -120) COPY (RSP + -120)
(RSP + -120) COPY (RSP + -120)
0 INT_LESS ((f() - f()) / 16) 3
(f() - f()) INT_SUB f() f()
(RSP + -120) PTRSUB RSP -120
f() CAST f()
((f() - f()) / 16) CAST ((f() - f()) / 16)
(f() - f()) INT_SUB f() f()
(RSP + -120) PTRSUB RSP -120
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
2 COPY 2
(RSP + -120) PTRSUB RSP -120
0 INT_LESS 3 ((f() - f()) / 16)
0 COPY 0
f(RSP) CALL func f() f() f()
0 INT_EQUAL f() 2
0 INT_NOTEQUAL f(RSP) 0
 BRANCH VZERO
0 INT_NOTEQUAL f(RSP) 0
 CBRANCH (f(RSP) INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL 0)
(f() - f()) INT_SUB f() f()
f() CAST f()
f() INT_ZEXT f()
(RSP + -120) COPY (RSP + -120)
(RSP + -120) PTRSUB RSP -120
 CBRANCH (((f() - f()) / 16) INT_LESSEQUAL f())
0 INT_LESSEQUAL ((f() - f()) / 16) f()
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
(RSP + -120) COPY (RSP + -120)
((f() - f()) / 16) CAST ((f() - f()) / 16)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(ARG1)
 RETURN 1
0 INT_NOTEQUAL f(RSP) 1
(RSP + -188) PTRSUB RSP -188
((RSP + -188) + f()) PTRADD (RSP + -188) f() 1
f() INT_ZEXT f()
0 INT_NOTEQUAL [((RSP + -188) + f())] 0
[((RSP + -188) + f())] LOAD 433 ((RSP + -188) + f())
 CBRANCH f()
(f() + 1) INT_ADD f() 1
(f() + 1) INT_ZEXT (f() + 1)
(RSP + -188) PTRSUB RSP -188
0 INT_LESS (f() + 1) f()
f() CALL func (RSP + -188)
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_NOTEQUAL f() 0
0 INT_LESS (f() + 1) f()
f() CALL func (RSP + -188)
0 INT_LESS (f() + 1) f()
(RSP + -188) PTRSUB RSP -188
(f() + 1) INT_ADD f() 1
 CBRANCH f()
(f() + 1) INT_ZEXT (f() + 1)
(RSP + -120) COPY (RSP + -120)
((f() - f()) / 16) CAST ((f() - f()) / 16)
(RSP + -120) COPY (RSP + -120)
 CBRANCH (((f() - f()) / 16) INT_LESS 4)
f() CAST f()
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
(f() - f()) INT_SUB f() f()
0 INT_EQUAL f(RSP) 13
0 INT_LESS ((f() - f()) / 16) 4
(RSP + -120) PTRSUB RSP -120
3 COPY 3
f() CALL libcall_memcmp_thunk [(f() + 48)] f() f()
 BRANCH VZERO
0 COPY 0
f() CAST f()
f() CAST f()
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
(RSP + -120) COPY (RSP + -120)
(RSP + -120) COPY (RSP + -120)
(f() - f()) INT_SUB f() f()
 RETURN 1
0 INT_LESSEQUAL ((f() - f()) / 16) f()
 CBRANCH (((f() - f()) / 16) INT_LESSEQUAL f())
0 COPY 0
 CALL libcall___assert_fail_thunk Pos < Components.size() && Components[Pos] == Comp && "Component moved wrong!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp 794 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp
Pos < Components.size() && Components[Pos] == Comp && "Component moved wrong!" COPY Pos < Components.size() && Components[Pos] == Comp && "Component moved wrong!"
(RSP + -120) PTRSUB RSP -120
((f() - f()) / 16) CAST ((f() - f()) / 16)
f() INT_ZEXT f()
f() CAST f()
(f() - f()) INT_SUB f() f()
 CBRANCH (((f() - f()) / 16) INT_LESSEQUAL f())
((f() - f()) / 16) CAST ((f() - f()) / 16)
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
(RSP + -120) COPY (RSP + -120)
(RSP + -120) COPY (RSP + -120)
f() INT_ZEXT f()
0 INT_LESSEQUAL ((f() - f()) / 16) f()
(RSP + -120) PTRSUB RSP -120
1 COPY 1
 BRANCH VZERO
0 INT_NOTEQUAL f(RSP) 0
f(RSP) CALL func [((f() * 16) + f())] [(((f() * 16) + f()) + 8)] [((f() * 16) + f())]
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp
unexpected component type! COPY unexpected component type!
 CBRANCH -1
0 CAST 0
-1 BOOL_NEGATE 0
 CALL func unexpected component type! /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp 719
f() INT_ZEXT f()
0 INT_NOTEQUAL [((RSP + -188) + f())] 0
(RSP + -188) PTRSUB RSP -188
((RSP + -188) + f()) PTRADD (RSP + -188) f() 1
[((RSP + -188) + f())] LOAD 433 ((RSP + -188) + f())
 CBRANCH (((f() - f()) / 16) INT_LESS 3)
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
0 INT_LESS ((f() - f()) / 16) 3
f() CAST f()
(RSP + -120) COPY (RSP + -120)
(RSP + -120) COPY (RSP + -120)
 CALL func (RSP + -120) 4
(RSP + -120) PTRSUB RSP -120
(f() - f()) INT_SUB f() f()
2 COPY 2
((f() - f()) / 16) CAST ((f() - f()) / 16)
f() COPY f()
(RSP + -120) PTRSUB RSP -120
0 INT_NOTEQUAL f() 0
3 COPY 3
((f() * 16) + f()) PTRADD f() (f() * 2) 8
(f() * 2) INT_MULT f() 2
0 COPY 0
 CALL func (RSP + -152) [((f() * 16) + f())] [(((f() * 16) + f()) + 8)] [((f() * 16) + f())]
[((f() * 16) + f())] LOAD 433 ((f() * 16) + f())
[(((f() * 16) + f()) + 8)] LOAD 433 (((f() * 16) + f()) + 8)
(RSP + -152) PTRSUB RSP -152
 STORE 433 (f() + 32) f(RSP)
([f(RSP)] + [(f() + 48)]) COPY ([f(RSP)] + [(f() + 48)])
(f() + 32) CAST (f() + 32)
f() CAST f()
 STORE 433 (f() + 40) f(RSP)
f() CAST f()
[f(RSP)] COPY [f(RSP)]
(f() + 40) PTRADD f() 5 8
(RSP + -120) PTRSUB RSP -120
(((f() * 16) + f()) + 8) PTRADD ((f() * 16) + f()) 1 8
[(f() + 48)] LOAD 433 (f() + 48)
(f() + 48) COPY (f() + 48)
 BRANCH VZERO
((f() - f()) / 16) CAST ((f() - f()) / 16)
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
(RSP + -216) PTRSUB RSP -216
f() CAST f()
(f() + 1) INT_ADD f() 1
(RSP + -120) PTRSUB RSP -120
(f() * 2) INT_MULT f() 2
(f() + 32) PTRADD f() 4 8
 CALL func (RSP + -216) mingw
(RSP + -216) PTRSUB RSP -216
mingw COPY mingw
([f(RSP)] + [(f() + 48)]) INT_ADD [f(RSP)] [(f() + 48)]
[f(RSP)] LOAD 433 f(RSP)
2 COPY 2
0 COPY 0
f() COPY f()
(f() + 1) INT_ADD f() 1
(RSP + -152) CAST (RSP + -152)
(RSP + -152) PTRSUB RSP -152
([(f() + 56)] - [f(RSP)]) INT_SUB [(f() + 56)] [f(RSP)]
[(f() + 56)] LOAD 433 (f() + 56)
 CALL func (RSP + -216) windows
windows COPY windows
(RSP + -216) PTRSUB RSP -216
(RSP + -120) PTRSUB RSP -120
(f() + 64) CAST (f() + 64)
(f() + 64) PTRADD f() 8 8
idx < size() COPY idx < size()
f(RSP) CALL func (RSP + -1752) (RSP + -360) (RSP + -360)
(RSP + -1752) PTRSUB RSP -1752
(RSP + -360) PTRSUB RSP -360
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CAST f(RSP)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
(f() - f()) INT_SUB f() f()
f() CAST f()
f() CALL libcall_data_thunk
0 INT_NOTEQUAL [f(RSP)] 0
(f() + 48) CAST (f() + 48)
(f() + 48) PTRADD f() 6 8
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
idx < size() COPY idx < size()
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
(f() - f()) INT_SUB f() f()
 RETURN 1
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
f() CALL libcall_length_thunk
f() CAST f()
0 COPY 0
(f() + 40) PTRADD f() 5 8
((f() * 16) + f()) PTRADD f() (f() * 2) 8
4724808 PTRSUB 0 4724808
(((f() * 16) + f()) + 8) PTRADD ((f() * 16) + f()) 1 8
(RSP + -120) PTRSUB RSP -120
(f() * 2) INT_MULT f() 2
f() COPY f()
(RSP + -120) PTRSUB RSP -120
 CBRANCH (([f(RSP)] + [(f() + 48)]) INT_EQUAL 0)
0 INT_EQUAL ([f(RSP)] + [(f() + 48)]) 0
([f(RSP)] + [(f() + 48)]) CAST ([f(RSP)] + [(f() + 48)])
(f() + 24) PTRADD f() 3 8
((f() * 16) + f()) PTRADD f() (f() * 2) 8
(f() + 16) PTRADD f() 2 8
(((f() * 16) + f()) + 8) PTRADD ((f() * 16) + f()) 1 8
3 COPY 3
 RETURN 1
(RSP + -120) PTRSUB RSP -120
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
0 COPY 0
idx < size() COPY idx < size()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
 RETURN 1
 CALL func (RSP + -216) ((f() * 16) + f()) ((f() * 16) + f())
((f() * 16) + f()) PTRADD f() (f() * 2) 8
(RSP + -216) PTRSUB RSP -216
cygwin COPY cygwin
(f() + 48) PTRADD f() 6 8
(RSP + -216) PTRSUB RSP -216
 CBRANCH (((f() - f()) / 16) INT_LESS 3)
0 INT_LESS ((f() - f()) / 16) 3
 CBRANCH (((f() - f()) / 16) INT_LESS 4)
0 INT_LESS ((f() - f()) / 16) 4
((f() - f()) / 16) CAST ((f() - f()) / 16)
((f() - f()) / 16) CAST ((f() - f()) / 16)
idx < size() COPY idx < size()
idx < size() COPY idx < size()
0 INT_XOR f() 1
 RETURN 1
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
0 COPY 0
idx < size() COPY idx < size()
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
idx < size() COPY idx < size()
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
0 COPY 0
0 COPY 0
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
0 COPY 0
idx < size() COPY idx < size()
(f() + 32) CAST (f() + 32)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) PTRADD f() 5 8
 RETURN 1
idx < size() COPY idx < size()
(RSP + -216) PTRSUB RSP -216
f() COPY f()
 STORE 433 (f() + 56) f(RSP)
(f() + 56) PTRADD f() 7 8
f(RSP) CALL func [A_Stack[-0x78]:8] [(A_Stack[-0x78]:8 + 8)] [A_Stack[-0x78]:8]
[(A_Stack[-0x78]:8 + 8)] LOAD 433 (A_Stack[-0x78]:8 + 8)
[A_Stack[-0x78]:8] LOAD 433 A_Stack[-0x78]:8
0 COPY 0
(f() - f()) INT_SUB f() f()
f() CAST f()
 STORE 433 (f() + 48) f(RSP)
(f() + 48) CAST (f() + 48)
0 INT_LESSEQUAL f() [(f() + 40)]
[(f() + 40)] CAST [(f() + 40)]
[(((f() * 16) + f()) + 8)] CAST [(((f() * 16) + f()) + 8)]
 CBRANCH (((f() - f()) / 16) INT_LESS 4)
0 INT_LESS ((f() - f()) / 16) 4
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
(RSP + -120) PTRSUB RSP -120
((f() - f()) / 16) CAST ((f() - f()) / 16)
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
idx < size() COPY idx < size()
(RSP + -120) PTRSUB RSP -120
 BRANCH VZERO
[((f() * 16) + f())] CAST [((f() * 16) + f())]
(f() + 56) PTRADD f() 7 8
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
(f() + 40) PTRADD f() 5 8
f() COPY f()
(f() + 32) PTRADD f() 4 8
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
(A_Stack[-0x78]:8 + 8) PTRADD A_Stack[-0x78]:8 1 8
 CALL func (RSP + -216) cygnus
cygnus COPY cygnus
(RSP + -216) PTRSUB RSP -216
(RSP + -188) PTRSUB RSP -188
((RSP + -188) + f()) PTRADD (RSP + -188) f() 1
f() INT_ZEXT f()
(RSP + -216) PTRSUB RSP -216
[((f() * 16) + f())] LOAD 433 ((f() * 16) + f())
0 INT_EQUAL f() 1
(f() + 56) PTRADD f() 7 8
(RSP + -120) PTRSUB RSP -120
(f() + 32) CAST (f() + 32)
[(((f() * 16) + f()) + 8)] CAST [(((f() * 16) + f()) + 8)]
[(((f() * 16) + f()) + 8)] LOAD 433 (((f() * 16) + f()) + 8)
[(((f() * 16) + f()) + 8)] LOAD 433 (((f() * 16) + f()) + 8)
windows COPY windows
[((f() * 16) + f())] CAST [((f() * 16) + f())]
[((f() * 16) + f())] LOAD 433 ((f() * 16) + f())
(RSP + -120) PTRSUB RSP -120
idx < size() COPY idx < size()
(f() + 48) PTRADD f() 6 8
0 COPY 0
 RETURN 1
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
idx < size() COPY idx < size()
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
 RETURN 1
(f() + 56) PTRADD f() 7 8
 CALL libcall_operator=_thunk (RSP + -184) (RSP + -152)
(RSP + -184) PTRSUB RSP -184
(RSP + -152) PTRSUB RSP -152
idx < size() COPY idx < size()
f() CAST f()
(f() + 48) CAST (f() + 48)
0 COPY 0
 CALL libcall_~basic_string_thunk (RSP + -152)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
3 COPY 3
0 CAST 0
 CALL func (RSP + -216) android
android COPY android
(RSP + -216) PTRSUB RSP -216
 CALL func (RSP + -216) android (RSP + -360)
(RSP + -216) PTRSUB RSP -216
(RSP + -360) PTRSUB RSP -360
android COPY android
(RSP + -120) PTRSUB RSP -120
(f() + 32) PTRADD f() 4 8
 STORE 433 (f() + 56) [f(RSP)]
(f() + 56) PTRADD f() 7 8
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
 BRANCH VZERO
 CALL func (RSP + -152) (RSP + -216) (RSP + -216)
(RSP + -216) PTRSUB RSP -216
(RSP + -152) PTRSUB RSP -152
 STORE 433 (f() + 48) ([f(RSP)] + [(f() + 48)])
(f() + 48) CAST (f() + 48)
(f() + 40) PTRADD f() 5 8
(f() + 48) PTRADD f() 6 8
 RETURN 1
(RSP + -120) COPY (RSP + -120)
(RSP + -120) COPY (RSP + -120)
(RSP + -120) PTRSUB RSP -120
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
idx < size() COPY idx < size()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
f() CALL func f(RSP)
f(RSP) CALL func [((f() * 16) + f())] [(((f() * 16) + f()) + 8)] [((f() * 16) + f())]
f(RSP) CALL func [(f() + 64)] [(f() + 72)] [(f() + 64)]
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
0 INT_NOTEQUAL f(RSP) 0
 STORE 433 (f() + 48) f(RSP)
(f() + 48) CAST (f() + 48)
idx < size() COPY idx < size()
(RSP + -120) PTRSUB RSP -120
(f() - f()) INT_SUB f() f()
 CALL func (RSP + -216) f() f()
(f() + 40) PTRADD f() 5 8
4724752 PTRSUB 0 4724752
f(RSP) CALL func [(f() + 48)] [(f() + 56)] [(f() + 48)]
(RSP + -120) PTRSUB RSP -120
idx < size() COPY idx < size()
(RSP + -216) PTRSUB RSP -216
f() COPY f()
(f() + 32) PTRADD f() 4 8
0 COPY 0
((f() - f()) / 16) CAST ((f() - f()) / 16)
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
 RETURN 1
f(RSP) CALL func [(f() + 16)] [(f() + 24)] [(f() + 16)]
[(f() + 24)] LOAD 433 (f() + 24)
[(f() + 16)] LOAD 433 (f() + 16)
(RSP + -120) PTRSUB RSP -120
f() CAST f()
idx < size() COPY idx < size()
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
0 COPY 0
idx < size() COPY idx < size()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
f(RSP) CALL func [(f() + 32)] [(f() + 40)] [(f() + 32)]
(RSP + -120) PTRSUB RSP -120
(f() + 32) PTRADD f() 4 8
0 COPY 0
(RSP + -120) PTRSUB RSP -120
0 INT_LESS ((f() - f()) / 16) 4
0 COPY 0
 BRANCH VZERO
size() >= N && "Dropping more elements than exist" COPY size() >= N && "Dropping more elements than exist"
 STORE 433 (f() + 56) f(RSP)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
 CBRANCH (((f() - f()) / 16) INT_LESS 4)
0 COPY 0
(RSP + -216) PTRSUB RSP -216
[(f() + 40)] CAST [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
((f() * 16) + f()) PTRADD f() (f() * 2) 8
(f() * 2) INT_MULT f() 2
 STORE 433 (f() + 56) f()
(f() + 56) PTRADD f() 7 8
(RSP + -120) COPY (RSP + -120)
(RSP + -120) COPY (RSP + -120)
 STORE 433 (f() + 48) f()
(f() + 32) CAST (f() + 32)
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
(f() + 48) PTRADD f() 6 8
(RSP + -216) PTRSUB RSP -216
(f() + 48) CAST (f() + 48)
(f() + 48) PTRADD f() 6 8
[(f() + 56)] CAST [(f() + 56)]
[(f() + 56)] LOAD 433 (f() + 56)
(f() + 56) PTRADD f() 7 8
 RETURN 1
(f() + 56) PTRADD f() 7 8
(RSP + -120) PTRSUB RSP -120
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
idx < size() COPY idx < size()
0 COPY 0
 RETURN 1
0 INT_LESS [(f() + 56)] f()
(RSP + -120) PTRSUB RSP -120
f() COPY f()
f() COPY f()
(f() + 32) PTRADD f() 4 8
f() COPY f()
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
(RSP + -1744) PTRSUB RSP -1744
[(f() + 56)] LOAD 433 (f() + 56)
(f() + 56) PTRADD f() 7 8
(f() + 32) CAST (f() + 32)
(f() + 56) PTRADD f() 7 8
[(f() + 48)] LOAD 433 (f() + 48)
(f() + 48) PTRADD f() 6 8
(f() + 56) PTRADD (f() + 48) 1 8
(RSP + -120) COPY (RSP + -120)
(RSP + -120) COPY (RSP + -120)
f() COPY f()
 RETURN 1
(f() + 48) CAST (f() + 48)
(RSP + -120) PTRSUB RSP -120
 RETURN 1
(f() * 2) INT_MULT f() 2
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
idx < size() COPY idx < size()
0 COPY 0
(RSP + -120) PTRSUB RSP -120
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
 RETURN 1
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
idx < size() COPY idx < size()
0 COPY 0
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
0 COPY 0
idx < size() COPY idx < size()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
 RETURN 1
 CALL func (RSP + -216) windows
 RETURN 1
((f() - f()) / 16) CAST ((f() - f()) / 16)
((f() - f()) / 16) INT_SRIGHT (f() - f()) 4
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
idx < size() COPY idx < size()
0 COPY 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
(f() + 48) COPY (f() + 48)
f() CAST f()
f() CAST f()
3 COPY 3
 STORE 433 (f() + 40) f(RSP)
(RSP + -120) PTRSUB RSP -120
 STORE 433 (f() + 32) f(RSP)
 RETURN 1
f() COPY f()
[(f() + 40)] LOAD 433 (f() + 40)
[(f() + 32)] LOAD 433 (f() + 32)
idx < size() COPY idx < size()
 CALL func (RSP + -216) f() f()
f() CALL func f(RSP)
(RSP + -216) PTRSUB RSP -216
(f() - f()) INT_SUB f() f()
(f() + 48) PTRADD f() 6 8
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
0 INT_EQUAL f(RSP) 0
 STORE 433 (f() + 72) f(RSP)
(f() + 72) PTRADD f() 9 8
0 COPY 0
 STORE 433 (f() + 64) f(RSP)
 CBRANCH (((f() - f()) / 16) INT_LESS 4)
0 INT_LESS ((f() - f()) / 16) 4
f() COPY f()
0 INT_NOTEQUAL f() 1
(RSP + -120) PTRSUB RSP -120
0 INT_EQUAL f() 0
 CALL func (RSP + -216) windows
windows COPY windows
 CALL func (RSP + -216) ((f() * 16) + f()) ((f() * 16) + f())
((f() * 16) + f()) PTRADD f() (f() * 2) 8
(RSP + -216) PTRSUB RSP -216
f() COPY f()
f() COPY f()
(RSP + -120) PTRSUB RSP -120
 STORE 433 (f() + 32) f(RSP)
[(f() + 56)] CAST [(f() + 56)]
[(f() + 56)] LOAD 433 (f() + 56)
 STORE 433 (f() + 40) f(RSP)
 RETURN 1
 BRANCH VZERO
 RETURN 1
0 INT_EQUAL [(((f() * 16) + f()) + 8)] f()
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
f(RSP) CAST f(RSP)
f(RSP) CALL func (RSP + -1744) (f() + 56) (f() + 56)
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -216) cygwin
2 COPY 2
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
(RSP + -120) COPY (RSP + -120)
([(f() + 56)] - [f(RSP)]) CAST ([(f() + 56)] - [f(RSP)])
(RSP + -120) COPY (RSP + -120)
(f() + 48) PTRADD f() 6 8
 RETURN 1
(RSP + -120) PTRSUB RSP -120
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
(RSP + -120) PTRSUB RSP -120
 RETURN 1
f() COPY f()
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
 CBRANCH 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
11 COPY 11
 STORE 433 ((RSP + -188) + f()) 1
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
f() CALL libcall_memcmp_thunk [((f() * 16) + f())] f() f()
 RETURN 1
(f() - f()) INT_SUB f() f()
[(f() + 64)] LOAD 433 (f() + 64)
(f() + 64) PTRADD f() 8 8
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
(RSP + -120) PTRSUB RSP -120
(f() * 2) INT_MULT f() 2
 RETURN 1
 CALL func (RSP + -216) 4724752
(RSP + -120) PTRSUB RSP -120
(RSP + -120) COPY (RSP + -120)
(RSP + -120) COPY (RSP + -120)
 CBRANCH (((f() - f()) / 16) INT_LESS 3)
0 INT_LESS ((f() - f()) / 16) 3
[(f() + 72)] LOAD 433 (f() + 72)
 STORE 433 (f() + 56) f(RSP)
 BRANCH VZERO
(f() + 72) PTRADD f() 9 8
 STORE 433 (f() + 48) f(RSP)
0 INT_LESS [(f() + 56)] 11
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -216) 4724808
 CBRANCH ([(f() + 56)] INT_LESS 11)
(RSP + -120) PTRSUB RSP -120
 RETURN 1
 BRANCH VZERO
f() COPY f()
0 INT_NOTEQUAL f() 0
 STORE 433 (f() + 56) f(RSP)
 CALL libcall___assert_fail_thunk size() >= N && "Dropping more elements than exist" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 427 0
f() COPY f()
 STORE 433 (f() + 48) f(RSP)
idx < size() COPY idx < size()
 BRANCH VZERO
 CALL func (RSP + -216) ((f() * 16) + f()) ((f() * 16) + f())
0 COPY 0
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
 RETURN 1
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
 RETURN 1
(RSP + -120) COPY (RSP + -120)
(RSP + -120) COPY (RSP + -120)
-1 COPY -1
0 INT_LESS [(f() + 40)] f()
11 COPY 11
 CALL libcall_basic_string_thunk ARG1 (RSP + -278)
ARG1 COPY ARG1
 CALL libcall_basic_string_thunk ARG1 4720324
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f() 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_uname_thunk (RSP + -408)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -408) PTRSUB RSP -408
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CALL libcall_~allocator_thunk (RSP + -409)
 CALL libcall_~allocator_thunk (RSP + -409)
(RSP + -408) PTRSUB RSP -408
 CALL libcall_allocator_thunk
 BRANCH VZERO
(RSP + -409) PTRSUB RSP -409
4720324 CAST 4720324
 CALL libcall_allocator_thunk
(RSP + -409) PTRSUB RSP -409
(RSP + -278) PTRSUB (RSP + -408) 130
(RSP + -278) CAST (RSP + -278)
4720324 PTRSUB 0 4720324
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
 CALL func ARG1 f() f() f()
ARG1 COPY ARG1
 CALL libcall_allocator_thunk
(RSP + -88) PTRSUB RSP -88
(RSP + -88) PTRSUB RSP -88
f() CALL libcall_length_thunk
(RSP + -88) CAST (RSP + -88)
-darwin CAST -darwin
 CALL libcall_~basic_string_thunk (RSP + -88)
 CBRANCH (f() INT_NOTEQUAL -1)
-darwin COPY -darwin
 CALL libcall_~allocator_thunk (RSP + -104)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL f() -1
(RSP + -88) PTRSUB RSP -88
 CALL libcall_basic_string_thunk (RSP + -88) 0
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
(RSP + -104) CAST (RSP + -104)
f() CALL libcall_data_thunk
0 CAST 0
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -88) CAST (RSP + -88)
f() CALL libcall_find_thunk (RSP + -88) -darwin
(RSP + -104) PTRSUB RSP -104
[(f() + 40)] LOAD 433 (f() + 40)
0 COPY 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
 RETURN 1
(RSP + -88) CAST (RSP + -88)
 CALL libcall_resize_thunk (RSP + -88)
 CALL libcall_~basic_string_thunk (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(RSP + -88) PTRSUB RSP -88
 CALL libcall_operator+=_thunk (RSP + -88) (RSP + -56)
(RSP + -56) CAST (RSP + -56)
 CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(RSP + -88) PTRSUB RSP -88
(f() / 2147483647) SUBPIECE f() 0
(RSP + -104) PTRSUB RSP -104
(RSP + -56) PTRSUB RSP -56
4706338 PTRSUB 0 4706338
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f() 15:07:45
(f() / 2147483647) SUBPIECE f() 8
(RSP + -88) PTRSUB RSP -88
f() CALL func f() 4705945
4706434 PTRSUB 0 4706434
f() CALL func f() (RSP + -88) f()
(f() / 2147483647) SUBPIECE f() 0
4705945 PTRSUB 0 4705945
Default target:  COPY Default target: 
(f() / 2147483647) SUBPIECE f() 8
(RSP + -88) PTRSUB RSP -88
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f() LLVM (http://llvm.org/): 
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func f() DEBUG build
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f() Default target: 
(f() / 2147483647) SUBPIECE f() 8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL libcall_~basic_string_thunk (RSP + -56)
(f() / 2147483647) SUBPIECE f() 8
(f() + 40) CAST (f() + 40)
LLVM (http://llvm.org/):  COPY LLVM (http://llvm.org/): 
f() CALL func f() version 
Built  COPY Built 
Host CPU:  COPY Host CPU: 
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
with assertions COPY with assertions
(f() / 2147483647) SUBPIECE f() 0
4706446 PTRSUB 0 4706446
(RSP + -88) PTRSUB RSP -88
f() CALL func
f() CALL func f() 4706338
(RSP + -88) PTRSUB RSP -88
DEBUG build COPY DEBUG build
(f() / 2147483647) SUBPIECE f() 8
 CALL func f() with assertions
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -56)
 CALL func f() 10
f() CALL func f() 4706446
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -88) (RSP + -104) (RSP + -104)
(f() / 2147483647) SUBPIECE f() 8
4706359 PTRSUB 0 4706359
 CALL func f() 3.8.1
(RSP + -56) PTRSUB RSP -56
f() CALL func f() Built 
[(f() + 40)] LOAD 433 (f() + 40)
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f() (RSP + -56) f()
(f() / 2147483647) SUBPIECE f() 0
 CALL libcall_~basic_string_thunk (RSP + -88)
(FS_OFFSET + 40) INT_ADD 0 40
Dec 13 2021 COPY Dec 13 2021
(f() / 2147483647) SUBPIECE f() 8
f() CALL func f() 4706410
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
3.8.1 COPY 3.8.1
f() CALL func f() Host CPU: 
(f() / 2147483647) SUBPIECE f() 0
f() CALL func f() 4706434
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func f() 4706359
version  COPY version 
generic COPY generic
f() CALL func f() Dec 13 2021
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL func (RSP + -88) generic
0 INT_NOTEQUAL 0 [(f() + 40)]
15:07:45 COPY 15:07:45
f() CALL func f() 10
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() + 40) INT_ADD f() 40
4706410 PTRSUB 0 4706410
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(unknown) COPY (unknown)
(RSP + -88) PTRSUB RSP -88
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall_operator=_thunk (RSP + -88) (unknown)
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
[f(ARG1)] LOAD 433 f(ARG1)
f(ARG1) CAST f(ARG1)
f(ARG2) CAST f(ARG2)
0 INT_ZEXT 0
[f(ARG2)] LOAD 433 f(ARG2)
([f(ARG2)] & -256) INT_AND [f(ARG2)] -256
([f(ARG2)] & -256) INT_OR ([f(ARG2)] & -256) 0
 RETURN 0 ([f(ARG2)] & -256)
0 INT_NOTEQUAL [f(ARG1)] [f(ARG2)]
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -24) PTRSUB RSP -24
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(ARG1 + 8) INT_ADD ARG1 8
(RSP + -24) PTRSUB RSP -24
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
 CALL func (RSP + -24) (ARG1 + 8) (ARG1 + 8)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
ARG1 COPY ARG1
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 ([ARG1] + 8)
([ARG1] + 8) INT_ADD [ARG1] 8
 RETURN 0 ARG1
0 INT_NOTEQUAL ARG2 1
 CALL func ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (ARG2 INT_NOTEQUAL 1)
 CBRANCH (f() INT_EQUAL 0)
(RSP + -32) PTRSUB RSP -32
 CALL func (RSP + -32)
[f()] LOAD 433 f()
f() CALL func (RSP + -32)
f() CALL func (RSP + -32) (RSP + -24) (RSP + -24)
 BRANCH VZERO
f() CAST f()
(RSP + -24) PTRSUB RSP -24
(RSP + -32) PTRSUB RSP -32
 CALLIND [f()]
0 INT_EQUAL f() 0
(RSP + -32) PTRSUB RSP -32
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
VZERO COPY VZERO
 RETURN 1
VZERO COPY VZERO
VZERO COPY VZERO
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
VZERO COPY VZERO
 CBRANCH (VZERO INT_NOTEQUAL 0)
 CALL libcall_exit_thunk 0
 RETURN 1
f() COPY f()
VZERO COPY VZERO
 CALLIND VZERO
 CBRANCH (VZERO INT_NOTEQUAL 0)
0 INT_NOTEQUAL VZERO 0
f() COPY f()
 RETURN 1
VZERO COPY VZERO
 CALL libcall_exit_thunk 0
f() CALL func VZERO
f() CALL func
 CALL func f() 10
f() CALL func VZERO
0 INT_NOTEQUAL VZERO 0
[40] LOAD 433 40
40 CAST 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
0 INT_EQUAL ARG1 1
0 INT_EQUAL ARG1 1
0 INT_EQUAL ARG1 0
0 INT_EQUAL ARG2 1
0 INT_EQUAL ARG2 0
0 INT_EQUAL ARG2 1
 CBRANCH (ARG1 INT_EQUAL 1)
 RETURN 0
 CBRANCH (ARG1 INT_EQUAL 1)
 CBRANCH (ARG2 INT_EQUAL 1)
 CBRANCH (ARG1 INT_EQUAL 0)
 CBRANCH (ARG2 INT_EQUAL 1)
 CALL func 6966352 1
6966352 PTRSUB 0 6966352
 CBRANCH (ARG2 INT_EQUAL 0)
6966304 PTRSUB 0 6966304
 CALL func 6966304 1
 BRANCH VZERO
6966320 PTRSUB 0 6966320
 BRANCH VZERO
 CALL func 6966320 1
 BRANCH VZERO
6966336 PTRSUB 0 6966336
 CALL func 6966336 1
 CALL func 6967208
 RETURN 0
6967208 PTRSUB 0 6967208
ARG1 COPY ARG1
 RETURN 0
 CALL libcall_operator.delete_thunk ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
0 INT_NOTEQUAL ARG2 0
 CBRANCH (ARG2 INT_NOTEQUAL 0)
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
2305843009213693951 COPY 2305843009213693951
 RETURN 0 2305843009213693951
 CALL func ARG1
 RETURN 0
f(ARG1) CALL func ARG1
 CALL func f(ARG1)
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 RETURN 0 (([(ARG1 + 8)] - [ARG1]) / 8)
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(([(ARG1 + 8)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 3
f() CALL func ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
 CALL libcall___throw_length_error_thunk ARG3
([f(RSP)] + f()) INT_ADD [f(RSP)] f()
0 INT_EQUAL f() [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
0 INT_LESS ([f(RSP)] + f()) f()
0 INT_LESS (f() - f()) ARG2
f() CALL func f(ARG1)
(f() + 40) CAST (f() + 40)
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (([f(RSP)] + f()) INT_LESS f())
(f() - f()) INT_SUB f() f()
f(RSP) CALL func (RSP + -48) (RSP + -72) (RSP + -72)
f(RSP) CAST f(RSP)
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL func f(ARG1)
f() CALL func ARG1
(f() - f()) CAST (f() - f())
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func f(ARG1)
(RSP + -72) PTRSUB RSP -72
(f() + 40) INT_ADD f() 40
(RSP + -48) PTRSUB RSP -48
 CBRANCH ((f() - f()) INT_LESS ARG2)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
f() CALL func f(ARG1)
0 INT_LESS f() ([f(RSP)] + f())
 CBRANCH (f() INT_LESS ([f(RSP)] + f()))
f() COPY f()
f() CALL func f(ARG1)
 BRANCH VZERO
([f(RSP)] + f()) COPY ([f(RSP)] + f())
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(RSP)
 RETURN 1
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
(RSP + -24) PTRSUB RSP -24
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
40 CAST 40
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
 RETURN 1
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
 CALL libcall_memmove_thunk ARG3 ARG1 (((ARG2 - ARG1) / 8) * 8)
ARG1 CAST ARG1
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG3 CAST ARG3
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) INT_ADD ARG3 (((ARG2 - ARG1) / 8) * 8)
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) CAST (ARG3 + (((ARG2 - ARG1) / 8) * 8))
0 INT_NOTEQUAL ((ARG2 - ARG1) / 8) 0
((ARG2 - ARG1) / 8) INT_SRIGHT (ARG2 - ARG1) 3
 RETURN 0 (ARG3 + (((ARG2 - ARG1) / 8) * 8))
 CBRANCH (((ARG2 - ARG1) / 8) INT_NOTEQUAL 0)
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 RETURN 0
 CALL func f() f() f()
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
ARG1 COPY ARG1
 RETURN 0
(RSP + -16) PTRSUB RSP -16
 CALL func (RSP + -16)
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG2 ARG5 ARG6 ARG4
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 ARG4
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG3) CALL func ARG3
f(ARG2) CALL func 8 ARG2
f(ARG2) CAST f(ARG2)
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG2) 0
f(ARG3) CAST f(ARG3)
[f(ARG3)] LOAD 433 f(ARG3)
 RETURN 0
 STORE 433 f(ARG2) [f(ARG3)]
 CALL func ARG1 ARG2 f(ARG3) ARG2
f(ARG3) CALL func ARG3
 RETURN 0
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
f() CALL func ARG1
0 INT_LESS f() ARG2
(ARG2 * 8) INT_LEFT ARG2 3
 CBRANCH (f() INT_LESS ARG2)
 RETURN 0
 CALL libcall_operator.new_thunk (ARG2 * 8)
 CALL libcall___throw_bad_alloc_thunk
 CALL func ARG1 ARG2 0 ARG2
 RETURN 0
f() CALL func ARG1 ARG2 ARG2
0 INT_EQUAL ARG2 0
 CBRANCH (ARG2 INT_EQUAL 0)
 RETURN 0 f()
 BRANCH VZERO
0 COPY 0
f(ARG2) CALL func ARG2
f(RSP) CALL func ARG1 1 0
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 8) [ARG1]
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
 CALL func ARG1 ((f() * 8) + f()) f(ARG2) ((f() * 8) + f())
f(ARG1) CALL func ARG1
f(ARG1) CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 f()
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
f() CALL func ARG1 f(RSP) f(RSP)
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 (ARG1 + 8) (f() + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (ARG1 + 16) ((f(RSP) * 8) + f())
(f(RSP) * 8) INT_MULT f(RSP) 8
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
((f(RSP) * 8) + f()) INT_ADD (f(RSP) * 8) f()
(([(ARG1 + 16)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 3
((f() * 8) + f()) INT_ADD (f() * 8) f()
(f() + 8) INT_ADD f() 8
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
(f() * 8) INT_MULT f() 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 COPY 0
 RETURN 0
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
f() CALL func [ARG1] [(ARG1 + 8)] f() f(ARG1)
 CALL func ARG1 ARG2 ARG2
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1 [(ARG1 + 8)] ARG2 [(ARG1 + 8)]
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0
 CBRANCH ([(ARG1 + 8)] INT_EQUAL [(ARG1 + 16)])
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_EQUAL [(ARG1 + 8)] [(ARG1 + 16)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 BRANCH VZERO
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 8)] + 8) INT_ADD [(ARG1 + 8)] 8
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0
 CALL func ARG1
 RETURN 0
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1
(ARG1 + 16) PTRADD ARG1 2 8
 STORE 433 (ARG1 + 16) 0
 STORE 433 (ARG1 + 8) 0
 RETURN 0
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 RETURN 0
ARG1 COPY ARG1
VZERO COPY VZERO
 CALL func f() (RSP + -32) (RSP + -32)
f() COPY f()
0 INT_EQUAL VZERO 0
(RSP + -32) PTRSUB RSP -32
 RETURN 0
 CBRANCH (VZERO INT_EQUAL 0)
f() COPY f()
f() CALL libcall_operator.new_thunk 24
 CALL func f()
(f() + 176) INT_ADD f() 176
6966272 PTRSUB 0 6966272
f() CALL func 6966272
 RETURN 0 (f() + 176)
0 INT_NOTEQUAL [([(f() + 8)] + 72)] ARG1
f() CALL func (f() + 176)
6966272 PTRSUB 0 6966272
f() CALL func (RSP + -48) (RSP + -40) (RSP + -40)
f() CALL func 6966272
(RSP + -48) PTRSUB RSP -48
f() CALL func (f() + 176)
(FS_OFFSET + 40) INT_ADD 0 40
[40] LOAD 433 (f() + 40)
(RSP + -40) PTRSUB RSP -40
 CBRANCH (0 INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [40]
 CBRANCH (f() INT_EQUAL 0)
(f() + 40) CAST (f() + 40)
0 INT_EQUAL f() 0
(f() + 176) INT_ADD f() 176
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CBRANCH ([([(f() + 8)] + 72)] INT_NOTEQUAL ARG1)
([(f() + 8)] + 72) INT_ADD [(f() + 8)] 72
[([(f() + 8)] + 72)] LOAD 433 ([(f() + 8)] + 72)
(f() + 8) CAST (f() + 8)
([(f() + 8)] + 72) CAST ([(f() + 8)] + 72)
(f() + 8) INT_ADD f() 8
[(f() + 8)] LOAD 433 (f() + 8)
6966400 PTRSUB 0 6966400
 CBRANCH ([([(f() + 8)] + 72)] INT_NOTEQUAL 6966400)
0 INT_NOTEQUAL [([(f() + 8)] + 72)] 6966400
(f() + 8) CAST (f() + 8)
f() CALL func (RSP + -48)
(f() + 8) INT_ADD f() 8
([(f() + 8)] + 72) INT_ADD [(f() + 8)] 72
([(f() + 8)] + 72) CAST ([(f() + 8)] + 72)
(RSP + -48) PTRSUB RSP -48
 BRANCH VZERO
[(f() + 8)] LOAD 433 (f() + 8)
[([(f() + 8)] + 72)] LOAD 433 ([(f() + 8)] + 72)
 CALL func (RSP + -48)
(RSP + -48) PTRSUB RSP -48
(f() + 8) CAST (f() + 8)
(f() + 8) INT_ADD f() 8
[(f() + 8)] LOAD 433 (f() + 8)
 CALL func [(f() + 8)] 2
 RETURN 0
[ARG1] LOAD 433 ARG1
[ARG2] LOAD 433 ARG2
([[ARG1]] & -256) INT_AND [[ARG1]] -256
 RETURN 0 ([[ARG1]] & -256)
0 INT_EQUAL [ARG2] [[ARG1]]
([[ARG1]] & -256) INT_OR ([[ARG1]] & -256) 0
0 INT_ZEXT 0
[[ARG1]] LOAD 433 [ARG1]
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG1 COPY ARG1
0 INT_SLESS 0 f(ARG1 , ARG2)
((ARG2 - ARG1) / 32) INT_SRIGHT (ARG2 - ARG1) 5
 CBRANCH (0 INT_SLESS f(ARG1 , ARG2))
 CBRANCH (f() INT_NOTEQUAL 0)
(f(ARG1) + 8) INT_ADD f(ARG1) 8
f() CALL func (RSP + -48) f(ARG1) f(ARG1)
 RETURN 0 f(ARG2)
f(ARG1) COPY f(ARG1)
(RSP + -48) PTRSUB RSP -48
(f(ARG1) + 24) COPY (f(ARG1) + 24)
f(ARG1) COPY f(ARG1)
 RETURN 0 f(ARG1)
 RETURN 0 f(ARG1)
 RETURN 0 f(ARG2)
 RETURN 0 (f(ARG1) + 24)
f(ARG2) COPY f(ARG2)
0 INT_EQUAL f() 0
 RETURN 0 f(ARG1)
 CBRANCH (f() INT_EQUAL 0)
 RETURN 0 (f(ARG1) + 8)
 RETURN 0 (f(ARG1) + 16)
(f(ARG1) + 8) COPY (f(ARG1) + 8)
(f(ARG1) + 16) COPY (f(ARG1) + 16)
 RETURN 0 f(ARG1)
f(ARG1) COPY f(ARG1)
f(ARG2) COPY f(ARG2)
f(ARG1) COPY f(ARG1)
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(RSP + -48) PTRSUB RSP -48
f() CALL func (RSP + -48) f(ARG1) f(ARG1)
(f(ARG1) + 8) INT_ADD f(ARG1) 8
(RSP + -48) PTRSUB RSP -48
((f(ARG2) - f(ARG1)) / 8) INT_SRIGHT (f(ARG2) - f(ARG1)) 3
(f(ARG2) - f(ARG1)) INT_SUB f(ARG2) f(ARG1)
0 INT_NOTEQUAL ((f(ARG2) - f(ARG1)) / 8) 2
f() CALL func (RSP + -48) f(ARG1) f(ARG1)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (((f(ARG2) - f(ARG1)) / 8) INT_NOTEQUAL 2)
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -48) PTRSUB RSP -48
f() CALL func (RSP + -48) (f(ARG1) + 24) (f(ARG1) + 24)
(f(ARG1) + 24) INT_ADD (f(ARG1) + 16) 8
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(f(ARG1 , ARG2) + -1) INT_ADD f(ARG1 , ARG2) -1
 BRANCH VZERO
(f(ARG1) + 32) INT_ADD (f(ARG1) + 24) 8
(f(ARG1) + 8) INT_ADD f(ARG1) 8
(RSP + -48) PTRSUB RSP -48
f() CALL func (RSP + -48) (f(ARG1) + 8) (f(ARG1) + 8)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL ((f(ARG2) - f(ARG1)) / 8) 3
 CBRANCH (((f(ARG2) - f(ARG1)) / 8) INT_NOTEQUAL 3)
0 INT_NOTEQUAL f() 0
f() CALL func (RSP + -48) f(ARG1) f(ARG1)
0 INT_NOTEQUAL ((f(ARG2) - f(ARG1)) / 8) 1
(RSP + -48) PTRSUB RSP -48
 CBRANCH (((f(ARG2) - f(ARG1)) / 8) INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 0
(RSP + -48) PTRSUB RSP -48
(f(ARG1) + 16) INT_ADD (f(ARG1) + 8) 8
f() CALL func (RSP + -48) (f(ARG1) + 16) (f(ARG1) + 16)
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG3 ARG2
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
(RSP + -48) PTRSUB RSP -48
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -48)
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
40 CAST 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -24) PTRSUB RSP -24
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 ARG2 f() ARG2
f() CALL func ARG3
 RETURN 0
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(([(ARG1 + 8)] * 8) + [ARG1]) INT_ADD ([(ARG1 + 8)] * 8) [ARG1]
 RETURN 0 (([(ARG1 + 8)] * 8) + [ARG1])
([(ARG1 + 8)] * 8) INT_MULT [(ARG1 + 8)] 8
ARG1 COPY ARG1
ARG2 COPY ARG2
f() CALL func (RSP + -64) (RSP + -56) (RSP + -56)
[40] LOAD 433 (f() + 40)
f() CALL func (RSP + -88)
f() CALL func (f() + 176)
f() CALL func 6966272
(RSP + -88) PTRSUB RSP -88
(f() + 40) CAST (f() + 40)
6966272 PTRSUB 0 6966272
f() CALL func (f() + 176)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
(RSP + -64) PTRSUB RSP -64
 CBRANCH (0 INT_NOTEQUAL [40])
f() CALL func (RSP + -88)
(RSP + -88) PTRSUB RSP -88
0 INT_EQUAL f() 0
(f() + 176) INT_ADD f() 176
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [40]
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([([(f() + 8)] + 72)] INT_NOTEQUAL 6966400)
1 COPY 1
0 COPY 0
 BRANCH VZERO
(RSP + -64) PTRSUB RSP -64
(f() + 8) CAST (f() + 8)
(f() + 8) INT_ADD f() 8
f() CALL func (RSP + -64)
f() CALL func f() f() ([(f() + 8)] + 72) f()
 CBRANCH f()
 BRANCH VZERO
0 INT_EQUAL f() f()
[(f() + 8)] LOAD 433 (f() + 8)
 CBRANCH (f() INT_EQUAL f())
(RSP + -64) PTRSUB RSP -64
 CALL func (RSP + -64)
([(f() + 8)] + 72) INT_ADD [(f() + 8)] 72
([(f() + 8)] + 72) INT_ADD [(f() + 8)] 72
[([(f() + 8)] + 72)] LOAD 433 ([(f() + 8)] + 72)
([(f() + 8)] + 72) CAST ([(f() + 8)] + 72)
6966400 PTRSUB 0 6966400
0 INT_NOTEQUAL [([(f() + 8)] + 72)] 6966400
(f() + 8) INT_ADD f() 8
[(f() + 8)] LOAD 433 (f() + 8)
(f() + 8) CAST (f() + 8)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
(f() + 8) CAST (f() + 8)
(f() + 8) INT_ADD f() 8
[(f() + 8)] LOAD 433 (f() + 8)
 CALL func [(f() + 8)] 2
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -24) PTRSUB RSP -24
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
 RETURN 1
 STORE 433 ARG1 Symbol
 CALL func ARG1
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 0
 RETURN 0
 CALL func (ARG1 + 8)
(ARG1 + 104) INT_ADD ARG1 104
 CALL func ARG1
 RETURN 0
 CALL func (ARG1 + 104)
 CALL func (RSP + -40) ARG1 ARG1
 CALL func ARG2 A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -40) PTRSUB RSP -40
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 ARG2 ARG2
 RETURN 0
(ARG1 + 72) INT_ADD ARG1 72
 STORE 433 (ARG1 + 72) ARG2
(ARG1 + 72) CAST (ARG1 + 72)
 RETURN 0
[ARG1] LOAD 433 ARG1
 CALL func ARG2 [ARG1] [ARG1]
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func [ARG2] ARG1 ARG1
 CALL func ARG1 ARG3 ARG3
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func ARG1 ARG3 ARG4 ARG3
 CALL func [ARG2] ARG1 ARG1
[ARG2] LOAD 433 ARG2
 RETURN 0
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 ARG3
[ARG1] LOAD 433 ARG1
f() CALL func ARG2 (RSP + -40) A_Stack[-0x38]:8 A_Stack[-0x30]:8
 CALL func (ARG1 + 8) ARG3 (ARG1 + 8)
 CBRANCH ([ARG1] INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_EQUAL [ARG1] 0
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CALL func (RSP + -56)
(RSP + -40) PTRSUB RSP -40
cl::location(x) specified more than once! COPY cl::location(x) specified more than once!
(RSP + -40) PTRSUB RSP -40
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40) cl::location(x) specified more than once!
0 COPY 0
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
[ARG1] LOAD 433 ARG1
 CALL func (ARG2 + 88) ARG2 [ARG1] (ARG2 + 88)
(ARG2 + 88) INT_ADD ARG2 88
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG3 ARG4 ARG5
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 CALL func ARG1 ARG3 ARG4 ARG5 ARG6
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 CALL func ARG1 ARG3 ARG4 ARG5 ARG6 ARG7
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5 ARG6 ARG7 4480893
(ARG1 + 104) PTRADD ARG1 13 8
 STORE 433 ARG1 Symbol
 CALL func ARG1
 CALL func ARG1 0 0
 CALL func (ARG1 + 104) ARG1 (ARG1 + 104)
(ARG1 + 88) PTRADD ARG1 11 8
4480893 COPY 4480893
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
 CALL func (ARG1 + 88)
 CALL func (RSP + -40) ARG1 ARG1
 CALL func ARG2 A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
40 INT_ADD 0 40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -40) PTRSUB RSP -40
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func ARG2 ARG1 ARG1
 CALL func ARG1 ARG3 ARG4 ARG5 ARG6 ARG7
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5 ARG6 ARG7 4481065
 STORE 433 ARG1 Symbol
 CALL func ARG1
 CALL func ARG1 0 0
 CALL func (ARG1 + 104) ARG1 (ARG1 + 104)
(ARG1 + 88) PTRADD ARG1 11 8
(ARG1 + 104) PTRADD ARG1 13 8
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
 CALL func (ARG1 + 88)
4481065 COPY 4481065
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -24) PTRSUB RSP -24
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
[40] LOAD 433 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
 RETURN 1
 CALL func (RSP + -40) ARG1 ARG1
 CALL func ARG2 A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
40 INT_ADD 0 40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -40) PTRSUB RSP -40
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 ARG3
[ARG1] LOAD 433 ARG1
f() CALL func ARG2 (RSP + -40) A_Stack[-0x38]:8 A_Stack[-0x30]:8
 CALL func (ARG1 + 8) ARG3 (ARG1 + 8)
(f() + 40) CAST (f() + 40)
 CBRANCH ([ARG1] INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL [ARG1] 0
 CALL func (RSP + -56)
(RSP + -40) PTRSUB RSP -40
cl::location(x) specified more than once! COPY cl::location(x) specified more than once!
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -40) cl::location(x) specified more than once!
0 COPY 0
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
[ARG1] LOAD 433 ARG1
 CALL func (ARG2 + 88) ARG2 [ARG1] (ARG2 + 88)
(ARG2 + 88) INT_ADD ARG2 88
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
[ARG1] LOAD 433 ARG1
 CALL func ARG2 [ARG1] [ARG1]
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func [ARG2] ARG1 ARG1
 CALL func ARG1 ARG3 ARG3
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 CALL func ARG1 ARG3 ARG4 ARG3
 RETURN 0
 CALL func ARG1 ARG3 ARG4 ARG5
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 CALL func ARG1 ARG3 ARG4 ARG5 ARG6
 RETURN 0
 CALL func ARG1
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func (ARG1 + 8)
 RETURN 0
(ARG1 + 104) INT_ADD ARG1 104
 CALL func ARG1
 CALL func (ARG1 + 104)
 RETURN 0
(ARG1 + 88) PTRADD ARG1 11 8
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5 ARG6
 STORE 433 ARG1 Symbol
(ARG1 + 104) PTRADD ARG1 13 8
 CALL func ARG1 0 0
 CALL func ARG1
 CALL func (ARG1 + 104) ARG1 (ARG1 + 104)
 CALL func (ARG1 + 88)
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 CALL func (RSP + -40) ARG1 ARG1
 CALL func ARG2 A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -40) PTRSUB RSP -40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CALL func [ARG2] ARG1 ARG1
 CALL func ARG1 ARG3 ARG4 ARG3
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 CALL func ARG1 ARG3 ARG4 ARG5
 RETURN 0
 CALL func ARG1 ARG3 ARG4 ARG5 ARG6
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG1 ARG3 ARG4 ARG5 ARG6 ARG7
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5 ARG6 ARG7 4481469
(ARG1 + 104) PTRADD ARG1 13 8
 STORE 433 ARG1 Symbol
 CALL func ARG1
 CALL func ARG1 0 0
 CALL func (ARG1 + 104) ARG1 (ARG1 + 104)
(ARG1 + 88) PTRADD ARG1 11 8
4481469 COPY 4481469
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
 CALL func (ARG1 + 88)
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
40 CAST 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -24) PTRSUB RSP -24
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 A_Stack[-0x18]:8
 CALL func (RSP + -40) ARG1 ARG1
 CALL func ARG2 A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
40 CAST 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -40) PTRSUB RSP -40
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 ARG3
[ARG1] LOAD 433 ARG1
f() CALL func ARG2 (RSP + -40) A_Stack[-0x38]:8 A_Stack[-0x30]:8
 CALL func (ARG1 + 8) ARG3 (ARG1 + 8)
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH ([ARG1] INT_EQUAL 0)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL [ARG1] 0
(RSP + -40) PTRSUB RSP -40
 BRANCH VZERO
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40) cl::location(x) specified more than once!
0 COPY 0
 CALL func (RSP + -56)
(RSP + -40) PTRSUB RSP -40
cl::location(x) specified more than once! COPY cl::location(x) specified more than once!
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
[ARG1] LOAD 433 ARG1
(ARG2 + 88) INT_ADD ARG2 88
 CALL func (ARG2 + 88) ARG2 [ARG1] (ARG2 + 88)
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
[ARG1] LOAD 433 ARG1
 CALL func ARG2 [ARG1] [ARG1]
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func [ARG2] ARG1 ARG1
 CALL func ARG1 ARG3 ARG3
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func ARG1 ARG3 ARG4 ARG3
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG1 ARG3 ARG4 ARG5
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG1 ARG3 ARG4 ARG5 ARG6
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG1
(ARG1 + 104) INT_ADD ARG1 104
 CALL func (ARG1 + 104)
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func ARG1
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func (ARG1 + 8)
 RETURN 0
(ARG1 + 88) PTRADD ARG1 11 8
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5 ARG6
 STORE 433 ARG1 Symbol
(ARG1 + 104) PTRADD ARG1 13 8
 CALL func ARG1 0 0
 CALL func ARG1
 CALL func (ARG1 + 104) ARG1 (ARG1 + 104)
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 CALL func (ARG1 + 88)
 RETURN 0
 STORE 433 ARG1 Symbol
(ARG1 + 104) PTRADD ARG1 13 8
 CALL func ARG1
 RETURN 0
 CALL func (ARG1 + 104)
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func ARG1
 CALL libcall_operator.delete_thunk ARG1
 RETURN 0
 CALL func ARG1
 STORE 433 ARG1 Symbol
(ARG1 + 104) PTRADD ARG1 13 8
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func (ARG1 + 104)
 CALL func ARG1
 CALL libcall_operator.delete_thunk ARG1
 RETURN 0
 CALL func ARG1
 STORE 433 ARG1 Symbol
(ARG1 + 104) PTRADD ARG1 13 8
 CALL func (ARG1 + 104)
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func ARG1
 CALL libcall_operator.delete_thunk ARG1
 RETURN 0
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func ARG1
 STORE 433 ARG1 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 (ARG1 + 8) ARG3
 RETURN 0
(ARG1 + 112) INT_ADD ARG1 112
 CALL func ARG1
 RETURN 0
 CALL func (ARG1 + 112)
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
 STORE 433 ARG1 0
(ARG1 + 8) PTRADD ARG1 8 1
 CALL func (ARG1 + 8) (RSP + -17) (ARG1 + 8)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -17) PTRSUB RSP -17
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 CAST 40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
0 COPY 0
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 CALL func ARG1 ARG2 ARG2
 RETURN 0
[ARG1] LOAD 433 ARG1
 CALL func ARG2 [ARG1] [ARG1]
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 RETURN 0
(ARG1 + 8) PTRADD ARG1 8 1
 STORE 433 ARG1 [ARG2]
 CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
[ARG2] LOAD 433 ARG2
0 INT_NOTEQUAL ARG3 0
 RETURN 0
 CBRANCH (ARG3 INT_NOTEQUAL 0)
(ARG1 + 88) INT_ADD ARG1 88
 CALL func (ARG1 + 88) ARG2 1 (ARG1 + 88)
 RETURN 0
[ARG1] LOAD 433 ARG1
 CALL func ARG2 [ARG1] [ARG1]
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
 CALL func ARG1 ARG3 ARG3
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func [ARG2] ARG1 ARG1
 CALL func ARG1 ARG3 ARG4 ARG3
[ARG2] LOAD 433 ARG2
 RETURN 0
 CALL func ARG2 ARG1 ARG1
 CALL func ARG1 ARG3 ARG4 ARG5
 RETURN 0
 CALL func (RSP + -40) ARG1 ARG1
 CALL func ARG2 A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 CALL func ARG1 ARG3 ARG4 ARG5 ARG6
 CALL func ARG2 ARG1 ARG1
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5 ARG6
 STORE 433 ARG1 Symbol
(ARG1 + 112) PTRADD ARG1 14 8
 CALL func ARG1
 CALL func (ARG1 + 112) ARG1 (ARG1 + 112)
 CALL func ARG1 0 0
(ARG1 + 88) PTRADD ARG1 11 8
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 CALL func (ARG1 + 88)
 STORE 433 ARG1 ARG2
 RETURN 0
 CALL func (RSP + -24) ARG1 ARG1
40 CAST 40
A_Stack[-0x18]:8 COPY A_Stack[-0x18]:8
[40] LOAD 433 40
40 INT_ADD 0 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -24) PTRSUB RSP -24
 RETURN 1
 RETURN 0 A_Stack[-0x18]:8
 CALL libcall___stack_chk_fail_thunk
 STORE 433 ARG1 Symbol
(ARG1 + 112) PTRADD ARG1 14 8
 CALL func ARG1
 CALL func (ARG1 + 112)
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func (RSP + -40) ARG1 ARG1
 CALL func ARG2 A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
40 CAST 40
(RSP + -40) PTRSUB RSP -40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 CALL func ARG2 ARG1 ARG1
 CALL func ARG1 ARG3 ARG4 ARG5 ARG6
 RETURN 0
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5 ARG6
 CALL func ARG1 0 0
(ARG1 + 88) PTRADD ARG1 11 8
 STORE 433 ARG1 Symbol
(ARG1 + 112) PTRADD ARG1 14 8
 CALL func ARG1
 CALL func (ARG1 + 112) ARG1 (ARG1 + 112)
 CALL func (ARG1 + 88)
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
0 INT_EQUAL ARG1 1
0 INT_EQUAL ARG2 65535
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CBRANCH (ARG1 INT_EQUAL 1)
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() COPY f()
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
f() COPY f()
 RETURN 0
 CBRANCH (ARG2 INT_EQUAL 65535)
General options COPY General options
6960440 PTRSUB 0 6960440
Display all available options COPY Display all available options
(RSP + -24) PTRSUB RSP -24
0 INT_AND 0 4294967040
Generic Options COPY Generic Options
 CALL libcall___cxa_atexit_thunk 4486328 6966432 6960440
6966352 PTRSUB 0 6966352
(RSP + -40) PTRSUB RSP -40
3 COPY 3
 CALL func 6966384 6966320 6966352
 CALL func (RSP + -24) 6966400
 CALL func 6966304 0
(RSP + -24) PTRSUB RSP -24
6966400 PTRSUB 0 6966400
6966336 PTRSUB 0 6966336
6960440 PTRSUB 0 6960440
4487393 COPY 4487393
 CALL libcall___cxa_atexit_thunk 4535190 6967072 6960440
 CALL func (RSP + -40) Display all available options
6966432 PTRSUB 0 6966432
4486212 PTRSUB 0 4486212
4486444 PTRSUB 0 4486444
f() CALL func 6967208
6966320 PTRSUB 0 6966320
4486096 PTRSUB 0 4486096
(RSP + -24) PTRSUB RSP -24
Print all option values after command line parsing COPY Print all option values after command line parsing
(RSP + -40) PTRSUB RSP -40
6966352 PTRSUB 0 6966352
1 COPY 1
 CALL func (RSP + -24) 6966400
 CALL func 6966944 print-options (RSP + -40) (RSP + -44) (RSP + -32) (RSP + -24)
(RSP + -32) PTRSUB RSP -32
6966400 PTRSUB 0 6966400
4535190 PTRSUB 0 4535190
(RSP + -24) PTRSUB RSP -24
6966688 PTRSUB 0 6966688
(RSP + -40) PTRSUB RSP -40
 CALL libcall___cxa_atexit_thunk 4474672 6966304 6960440
 CALL func 6966400 Generic Options 0
help-list-hidden COPY help-list-hidden
3 COPY 3
(RSP + -44) PTRSUB RSP -44
3 COPY 3
6966432 PTRSUB 0 6966432
6967208 PTRSUB 0 6967208
6960440 PTRSUB 0 6960440
 CALL func (RSP + -24) 6966400
f() CALL func 6966368
(RSP + -48) PTRSUB RSP -48
4486444 PTRSUB 0 4486444
(RSP + -24) PTRSUB RSP -24
6966320 PTRSUB 0 6966320
6966368 PTRSUB 0 6966368
6960440 PTRSUB 0 6960440
6966400 PTRSUB 0 6966400
(RSP + -24) PTRSUB RSP -24
(RSP + -40) PTRSUB RSP -40
 CALL libcall___cxa_atexit_thunk 4486444 6966352 6960440
1 COPY 1
(RSP + -40) PTRSUB RSP -40
6960440 PTRSUB 0 6960440
 CALL func (RSP + -24) 6966400
(RSP + -40) PTRSUB RSP -40
1 COPY 1
6966816 PTRSUB 0 6966816
 CALL func 6966560 help-list-hidden (RSP + -40) (RSP + -32) (RSP + -48) (RSP + -44) (RSP + -24) 4487105
Display the version of this program COPY Display the version of this program
3 COPY 3
6967072 PTRSUB 0 6967072
(RSP + -24) PTRSUB RSP -24
4707594 PTRSUB 0 4707594
 CALL libcall___cxa_atexit_thunk 4486328 6966560 6960440
(RSP + -40) PTRSUB RSP -40
(RSP + -40) PTRSUB RSP -40
 CALL func 6966240 General options 0
version COPY version
Display list of all available options COPY Display list of all available options
(RSP + -44) PTRSUB RSP -44
 CALL func (RSP + -40) Print non-default options after command line parsing
(RSP + -48) PTRSUB RSP -48
 CALL func 6966368 6966304 6966336
6960440 PTRSUB 0 6960440
(RSP + -32) PTRSUB RSP -32
6966400 PTRSUB 0 6966400
 CALL func 6966432 help-list (RSP + -40) (RSP + -32) (RSP + -48) (RSP + -44) (RSP + -24) 4486951
6966816 PTRSUB 0 6966816
(RSP + -44) PTRSUB RSP -44
6967072 PTRSUB 0 6967072
(RSP + -24) PTRSUB RSP -24
print-options COPY print-options
6966336 PTRSUB 0 6966336
4486328 PTRSUB 0 4486328
 CALL func 6967072 print-all-options (RSP + -40) (RSP + -44) (RSP + -32) (RSP + -24)
(RSP + -32) PTRSUB RSP -32
f() CALL func 6966384
 CALL libcall___cxa_atexit_thunk 4486444 6966336 6960440
(RSP + -40) PTRSUB RSP -40
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
6960440 PTRSUB 0 6960440
6966304 PTRSUB 0 6966304
(RSP + -24) PTRSUB RSP -24
 CALL func 6967232 version (RSP + -40) (RSP + -32) (RSP + -44) (RSP + -24)
(RSP + -40) PTRSUB RSP -40
help-list COPY help-list
0 INT_AND 1 4294967040
6960440 PTRSUB 0 6960440
6966400 PTRSUB 0 6966400
 CALL libcall___cxa_atexit_thunk 4486212 6966816 6960440
Display available options (-help-hidden for more) COPY Display available options (-help-hidden for more)
(RSP + -48) PTRSUB RSP -48
6966304 PTRSUB 0 6966304
 CALL func 6966688 4707594 (RSP + -40) (RSP + -32) (RSP + -44) (RSP + -24)
6966400 PTRSUB 0 6966400
(RSP + -32) PTRSUB RSP -32
 CALL func (RSP + -40) Display list of available options (-help-list-hidden for more)
4486328 PTRSUB 0 4486328
4486951 COPY 4486951
1 COPY 1
6967232 PTRSUB 0 6967232
(RSP + -44) PTRSUB RSP -44
(RSP + -32) PTRSUB RSP -32
4535190 PTRSUB 0 4535190
6966320 PTRSUB 0 6966320
6966560 PTRSUB 0 6966560
f() CALL func (RSP + -48)
6960440 PTRSUB 0 6960440
 CALL libcall___cxa_atexit_thunk 4486096 6967232 6960440
Print non-default options after command line parsing COPY Print non-default options after command line parsing
(RSP + -44) PTRSUB RSP -44
(RSP + -48) PTRSUB RSP -48
(RSP + -48) PTRSUB RSP -48
 CALL libcall___cxa_atexit_thunk 4486212 6966688 6960440
 CALL func 6966352 1
6966560 PTRSUB 0 6966560
4486212 PTRSUB 0 4486212
4474672 PTRSUB 0 4474672
 CALL func (RSP + -40) Print all option values after command line parsing
 CALL func (RSP + -24) 6966400
6966304 PTRSUB 0 6966304
6960440 PTRSUB 0 6960440
(RSP + -44) PTRSUB RSP -44
(RSP + -40) PTRSUB RSP -40
Display list of available options (-help-list-hidden for more) COPY Display list of available options (-help-list-hidden for more)
(RSP + -40) PTRSUB RSP -40
 CALL func 6966816 help-hidden (RSP + -40) (RSP + -32) (RSP + -48) (RSP + -44) (RSP + -24) 4487393
6966320 PTRSUB 0 6966320
 CALL func (RSP + -40) Display the version of this program
1 COPY 1
help-hidden COPY help-hidden
6966400 PTRSUB 0 6966400
(RSP + -24) PTRSUB RSP -24
6966944 PTRSUB 0 6966944
(RSP + -32) PTRSUB RSP -32
3 COPY 3
 CALL libcall___cxa_atexit_thunk 4535190 6966944 6960440
6960440 PTRSUB 0 6960440
 CALL func (RSP + -40) Display available options (-help-hidden for more)
f() CALL func 6966320
6966368 PTRSUB 0 6966368
 CALL func 6966320 1
6966304 PTRSUB 0 6966304
 CALL func (RSP + -24) 6966400
6966688 PTRSUB 0 6966688
6966336 PTRSUB 0 6966336
4474672 PTRSUB 0 4474672
 CALL func 6966336 0
f() CALL func (RSP + -48)
(RSP + -40) PTRSUB RSP -40
(RSP + -44) PTRSUB RSP -44
(RSP + -40) PTRSUB RSP -40
6966400 PTRSUB 0 6966400
(RSP + -32) PTRSUB RSP -32
6966240 PTRSUB 0 6966240
f() CALL func 6966304
(RSP + -24) PTRSUB RSP -24
6967232 PTRSUB 0 6967232
6966384 PTRSUB 0 6966384
4487105 COPY 4487105
 CALL func (RSP + -40) Display list of all available options
6966944 PTRSUB 0 6966944
print-all-options COPY print-all-options
(RSP + -24) PTRSUB RSP -24
 CALL libcall___cxa_atexit_thunk 4474672 6966320 6960440
 CALL func (RSP + -24) 6966400
6966352 PTRSUB 0 6966352
6966384 PTRSUB 0 6966384
[ARG1] LOAD 433 ARG1
 CBRANCH ([ARG1] INT_EQUAL 0)
0 INT_EQUAL [ARG1] 0
0 COPY 0
Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!" COPY Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
 RETURN 0
 CALL libcall___assert_fail_thunk Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 1099 0
 RETURN 1
 RETURN 0
 CALL func ARG1 ARG2 ARG2
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[ARG2] LOAD 433 ARG2
 CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
0 INT_NOTEQUAL ARG3 0
 CALL func [ARG1] [ARG2] [ARG2]
 CBRANCH (ARG3 INT_NOTEQUAL 0)
 RETURN 0
(ARG1 + 88) INT_ADD ARG1 88
 CALL func ARG1 ARG2 ARG2
(ARG1 + 104) INT_ADD ARG1 104
f() CALL func (ARG1 + 104) ARG1 ARG3 ARG4 ARG5 ARG6 (RSP + -33)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_EQUAL 0)
(RSP + -33) PTRSUB RSP -33
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
-1 BOOL_NEGATE 0
0 INT_EQUAL f() 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
-1 COPY -1
0 COPY 0
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 0 -1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func (ARG1 + 88) (RSP + -33) 0 (ARG1 + 88)
(RSP + -33) PTRSUB RSP -33
(ARG1 + 104) INT_ADD ARG1 104
 CALL func (ARG1 + 104)
 RETURN 0
(ARG1 + 104) INT_ADD ARG1 104
 CALL func (ARG1 + 104) ARG1 (ARG1 + 104)
 RETURN 0
(ARG1 + 104) INT_ADD ARG1 104
 CALL func (ARG1 + 104) ARG1 ARG2 (ARG1 + 104)
 RETURN 0
 CALL func ARG3 ARG2 ARG6 ARG2
 RETURN 0
 CALL func (RSP + -17) ARG1 ARG2 ARG3 ARG4 ARG5
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
40 INT_ADD 0 40
(RSP + -17) PTRSUB RSP -17
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 (ARG1 + 8)
0 COPY 0
 RETURN 0 0
 CALL func ARG1
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
0 INT_EQUAL ARG3 0
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 104) INT_ADD ARG1 104
(ARG1 + 88) INT_ADD ARG1 88
 CALL func ARG1 (ARG1 + 104) f() f() ARG2
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 88) INT_ADD ARG1 88
 CBRANCH (ARG3 INT_EQUAL 0)
 CBRANCH f()
 RETURN 0
0 INT_EQUAL f() 0
1 COPY 1
f() CALL func (ARG1 + 88)
f() CALL func (ARG1 + 88)
f() CALL func f() f()
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
f() CALL func (ARG1 + 88)
f() CALL func (ARG1 + 88)
0 COPY 0
(ARG1 + 104) INT_ADD ARG1 104
 CALL func (ARG1 + 104) ARG2 (ARG1 + 104)
 RETURN 0
0 COPY 0
 RETURN 0 0
[ARG1] LOAD 433 ARG1
0 INT_EQUAL [ARG1] 0
 CBRANCH ([ARG1] INT_EQUAL 0)
 CALL libcall___assert_fail_thunk Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 1099 0
0 COPY 0
Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!" COPY Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!"
 RETURN 0
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 CALL func ARG1
[ARG2] LOAD 433 ARG2
 CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
0 INT_NOTEQUAL ARG3 0
 CBRANCH (ARG3 INT_NOTEQUAL 0)
 RETURN 0
 CALL func [ARG1] [ARG2] [ARG2]
f() CALL func (ARG1 + 104) ARG1 ARG3 ARG4 ARG5 ARG6 (RSP + -33)
 CALL func ARG1 ARG2 ARG2
(ARG1 + 104) INT_ADD ARG1 104
(ARG1 + 88) INT_ADD ARG1 88
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
(RSP + -33) PTRSUB RSP -33
-1 COPY -1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
 CBRANCH (0 INT_EQUAL [(f() + 40)])
-1 BOOL_NEGATE 0
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_EQUAL 0 [(f() + 40)]
 RETURN 1
 RETURN 0 -1
 CALL libcall___stack_chk_fail_thunk
(RSP + -33) PTRSUB RSP -33
 CALL func (ARG1 + 88) (RSP + -33) 0 (ARG1 + 88)
(ARG1 + 104) INT_ADD ARG1 104
 CALL func (ARG1 + 104)
 RETURN 0
 CALL func (ARG1 + 104) ARG1 (ARG1 + 104)
(ARG1 + 104) INT_ADD ARG1 104
 RETURN 0
 CALL func (ARG1 + 104) ARG1 ARG2 (ARG1 + 104)
(ARG1 + 104) INT_ADD ARG1 104
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 (ARG1 + 8)
 CALL func ARG3 ARG2 ARG6 ARG2
 RETURN 0
 CALL func (RSP + -17) ARG1 ARG2 ARG3 ARG4 ARG5
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
(RSP + -17) PTRSUB RSP -17
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
0 COPY 0
 RETURN 0 0
[ARG1] LOAD 433 ARG1
 CALL func ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
0 INT_EQUAL ARG3 0
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 88) INT_ADD ARG1 88
 CALL func ARG1 (ARG1 + 104) f() f() ARG2
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 104) INT_ADD ARG1 104
(ARG1 + 88) INT_ADD ARG1 88
 CBRANCH f()
 CBRANCH (ARG3 INT_EQUAL 0)
 RETURN 0
f() CALL func (ARG1 + 88)
f() CALL func (ARG1 + 88)
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
f() CALL func (ARG1 + 88)
f() CALL func f() f()
f() CALL func (ARG1 + 88)
0 INT_EQUAL f() 0
(ARG1 + 104) INT_ADD ARG1 104
 CALL func (ARG1 + 104) ARG2 (ARG1 + 104)
 RETURN 0
 RETURN 0 0
0 COPY 0
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
 RETURN 0 ARG1
[ARG1] LOAD 433 ARG1
0 INT_EQUAL [ARG1] 0
 CBRANCH ([ARG1] INT_EQUAL 0)
 RETURN 0
 CALL libcall___assert_fail_thunk Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h 1099 0
 RETURN 1
0 COPY 0
Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!" COPY Location && "cl::location(...) not specified for a command " "line option with external storage, " "or cl::init specified before cl::location()!!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/Support/CommandLine.h
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
 CALL func ARG1
[ARG2] LOAD 433 ARG2
 CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
0 INT_NOTEQUAL ARG3 0
 RETURN 0
 CALL func [ARG1] [ARG2] [ARG2]
 CBRANCH (ARG3 INT_NOTEQUAL 0)
(ARG1 + 88) INT_ADD ARG1 88
 CALL func ARG1 ARG2 ARG2
(ARG1 + 104) INT_ADD ARG1 104
f() CALL func (ARG1 + 104) ARG1 ARG3 ARG4 ARG5 ARG6 (RSP + -33)
0 INT_EQUAL f() 0
-1 COPY -1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
-1 BOOL_NEGATE 0
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
(RSP + -33) PTRSUB RSP -33
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CALL func (ARG1 + 88) (RSP + -33) 0 (ARG1 + 88)
(RSP + -33) PTRSUB RSP -33
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 -1
(ARG1 + 104) INT_ADD ARG1 104
 CALL func (ARG1 + 104)
 RETURN 0
(ARG1 + 104) INT_ADD ARG1 104
 CALL func (ARG1 + 104) ARG1 (ARG1 + 104)
 RETURN 0
 CALL func (ARG1 + 104) ARG1 ARG2 (ARG1 + 104)
(ARG1 + 104) INT_ADD ARG1 104
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 (ARG1 + 8)
[ARG1] LOAD 433 ARG1
 CALL func ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
 CALL func ARG3 ARG2 ARG6 ARG2
 RETURN 0
 CALL func (RSP + -17) ARG1 ARG2 ARG3 ARG4 ARG5
(RSP + -17) PTRSUB RSP -17
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
0 COPY 0
 RETURN 0 0
0 INT_EQUAL ARG3 0
(ARG1 + 88) INT_ADD ARG1 88
 CALL func ARG1 (ARG1 + 104) f() f() ARG2
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 104) INT_ADD ARG1 104
 RETURN 0
 CBRANCH (ARG3 INT_EQUAL 0)
 CBRANCH f()
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
f() CALL func (ARG1 + 88)
f() CALL func f() f()
0 INT_EQUAL f() 0
f() CALL func (ARG1 + 88)
f() CALL func (ARG1 + 88)
f() CALL func (ARG1 + 88)
(ARG1 + 104) INT_ADD ARG1 104
 CALL func (ARG1 + 104) ARG2 (ARG1 + 104)
 RETURN 0
0 COPY 0
 RETURN 0 0
 RETURN 0
 CALL func 1 65535
f() CALL libcall_memcmp_thunk ARG1 ARG2 ARG3
0 INT_EQUAL ARG3 0
 CBRANCH (ARG3 INT_EQUAL 0)
 RETURN 0 f()
 BRANCH VZERO
0 COPY 0
1 COPY 1
 RETURN 0 1
 RETURN 0
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 Symbol
 CALL libcall_~basic_string_thunk (ARG1 + 8)
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 8) INT_ADD ARG1 8
 CALL libcall_operator=_thunk (ARG1 + 8) ARG2
(ARG1 + 40) CAST (ARG1 + 40)
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 40) 1
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
 RETURN 0 ARG1
 RETURN 0 value
value COPY value
 RETURN 0 0
0 COPY 0
 RETURN 0 0
0 COPY 0
 RETURN 0 Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0 Symbol
Symbol PTRSUB 0 Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0 Symbol
number COPY number
 RETURN 0 number
number COPY number
 RETURN 0 number
string COPY string
 RETURN 0 string
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG4 COPY ARG4
ARG5 COPY ARG5
ARG6 COPY ARG6
 STORE 433 ARG7 f()
f() CALL func (RSP + -56) 0
 RETURN 0 0
(RSP + -56) PTRSUB RSP -56
0 COPY 0
Symbol PTRSUB 0 Symbol
 RETURN 0 Symbol
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 88) INT_ADD ARG1 88
 CALLIND [[[(ARG1 + 88)]]] [(ARG1 + 88)] ARG2 [([(ARG1 + 88)] + 24)] [([(ARG1 + 88)] + 32)] ARG5 ARG6 ARG5 ARG6 ARG3 ARG4
(ARG1 + 88) CAST (ARG1 + 88)
([(ARG1 + 88)] + 32) INT_ADD [(ARG1 + 88)] 32
[[[(ARG1 + 88)]]] LOAD 433 [[(ARG1 + 88)]]
[[(ARG1 + 88)]] CAST [[(ARG1 + 88)]]
([(ARG1 + 88)] + 32) CAST ([(ARG1 + 88)] + 32)
 RETURN 0
[([(ARG1 + 88)] + 24)] LOAD 433 ([(ARG1 + 88)] + 24)
([(ARG1 + 88)] + 24) CAST ([(ARG1 + 88)] + 24)
[[(ARG1 + 88)]] LOAD 433 [(ARG1 + 88)]
[(ARG1 + 88)] LOAD 433 (ARG1 + 88)
(ARG1 + 88) CAST (ARG1 + 88)
[([(ARG1 + 88)] + 32)] LOAD 433 ([(ARG1 + 88)] + 32)
[(ARG1 + 88)] LOAD 433 (ARG1 + 88)
([(ARG1 + 88)] + 24) INT_ADD [(ARG1 + 88)] 24
[(ARG1 + 88)] LOAD 433 (ARG1 + 88)
(ARG1 + 88) CAST (ARG1 + 88)
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 88) INT_ADD ARG1 88
 CALLIND [([[(ARG1 + 88)]] + 56)] [(ARG1 + 88)] ARG2 [([(ARG1 + 88)] + 24)] [([(ARG1 + 88)] + 32)] ARG5 ARG6 ARG7
[([[(ARG1 + 88)]] + 56)] LOAD 433 ([[(ARG1 + 88)]] + 56)
[([(ARG1 + 88)] + 24)] LOAD 433 ([(ARG1 + 88)] + 24)
([(ARG1 + 88)] + 32) CAST ([(ARG1 + 88)] + 32)
[(ARG1 + 88)] LOAD 433 (ARG1 + 88)
([(ARG1 + 88)] + 24) CAST ([(ARG1 + 88)] + 24)
([[(ARG1 + 88)]] + 56) CAST ([[(ARG1 + 88)]] + 56)
 RETURN 0
[(ARG1 + 88)] LOAD 433 (ARG1 + 88)
[([(ARG1 + 88)] + 32)] LOAD 433 ([(ARG1 + 88)] + 32)
([(ARG1 + 88)] + 24) INT_ADD [(ARG1 + 88)] 24
(ARG1 + 88) CAST (ARG1 + 88)
[[(ARG1 + 88)]] LOAD 433 [(ARG1 + 88)]
(ARG1 + 88) CAST (ARG1 + 88)
(ARG1 + 88) CAST (ARG1 + 88)
[(ARG1 + 88)] LOAD 433 (ARG1 + 88)
([[(ARG1 + 88)]] + 56) INT_ADD [[(ARG1 + 88)]] 56
([(ARG1 + 88)] + 32) INT_ADD [(ARG1 + 88)] 32
 RETURN 0
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 88) CAST (ARG1 + 88)
 CALL func [(ARG1 + 88)]
 RETURN 0
[(ARG1 + 88)] LOAD 433 (ARG1 + 88)
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
f() CALL func (ARG1 + 112) ARG1 ARG3 ARG4 ARG5 ARG6 (RSP + -36)
(ARG1 + 112) INT_ADD ARG1 112
 CALL func ARG1 ARG2 ARG2
(ARG1 + 88) INT_ADD ARG1 88
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL 0 [(f() + 40)]
-1 BOOL_NEGATE 0
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -36) PTRSUB RSP -36
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 COPY 0
 CBRANCH (0 INT_EQUAL [(f() + 40)])
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
-1 COPY -1
 RETURN 0 -1
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
(RSP + -36) PTRSUB RSP -36
 CALL func (ARG1 + 88) (RSP + -36) 0 (ARG1 + 88)
(ARG1 + 112) INT_ADD ARG1 112
 CALL func (ARG1 + 112)
 RETURN 0
(ARG1 + 112) INT_ADD ARG1 112
 CALL func (ARG1 + 112) ARG2 (ARG1 + 112)
 RETURN 0
(ARG1 + 112) INT_ADD ARG1 112
 CALL func (ARG1 + 112) ARG1 (ARG1 + 112)
 RETURN 0
(ARG1 + 112) INT_ADD ARG1 112
 CALL func (ARG1 + 112) ARG1 ARG2 (ARG1 + 112)
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 (ARG1 + 8)
ARG1 CAST ARG1
 CALL func ARG1 ARG2 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 Symbol
(ARG2 + 12) INT_ADD ARG2 12
(ARG2 + 8) INT_ADD ARG2 8
 STORE 433 (ARG1 + 12) [(ARG2 + 12)]
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) [(ARG2 + 8)]
(ARG2 + 8) CAST (ARG2 + 8)
(ARG1 + 12) CAST (ARG1 + 12)
[(ARG2 + 12)] LOAD 433 (ARG2 + 12)
(ARG1 + 12) INT_ADD ARG1 12
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 RETURN 0
(ARG2 + 12) CAST (ARG2 + 12)
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func ARG3 ARG2 [ARG4] (RSP + -40) ARG6
[ARG4] LOAD 433 ARG4
 CALL func (RSP + -40) ARG5 ARG5
(RSP + -40) PTRSUB RSP -40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -40) PTRSUB RSP -40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func (RSP + -17) ARG1 ARG2 ARG3 ARG4 ARG5
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -17) PTRSUB RSP -17
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
0 INT_EQUAL ARG3 0
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 88) INT_ADD ARG1 88
 CALL func ARG1 (ARG1 + 112) (RSP + -36) f() ARG2
(ARG1 + 112) INT_ADD ARG1 112
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 88) INT_ADD ARG1 88
 CBRANCH f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 CBRANCH (ARG3 INT_EQUAL 0)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -36) PTRSUB RSP -36
f() CALL func (ARG1 + 88)
f() CALL func (ARG1 + 88)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 BRANCH VZERO
f() CALL func (ARG1 + 88)
f() CALL func (ARG1 + 88)
(RSP + -40) PTRSUB RSP -40
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
1 COPY 1
f() CALL func f() (RSP + -40) f()
0 COPY 0
(ARG1 + 112) INT_ADD ARG1 112
 RETURN 0 (ARG1 + 112)
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 8) INT_ADD ARG1 8
[ARG2] LOAD 433 ARG2
 STORE 433 (ARG1 + 12) 1
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 12) CAST (ARG1 + 12)
 STORE 433 (ARG1 + 8) [ARG2]
 RETURN 0
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
 RETURN 0 ARG1
(ARG1 + 8) PTRADD ARG1 2 4
 STORE 433 ARG1 [ARG2]
[ARG2] LOAD 433 ARG2
 CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
0 INT_NOTEQUAL ARG3 0
 RETURN 0
 CBRANCH (ARG3 INT_NOTEQUAL 0)
 CALL func ARG1 ARG2 ARG2
(ARG1 + 88) INT_ADD ARG1 88
f() CALL func (ARG1 + 112) ARG1 ARG3 ARG4 ARG5 ARG6 (RSP + -36)
(ARG1 + 112) INT_ADD ARG1 112
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 COPY 0
 CBRANCH (0 INT_EQUAL [(f() + 40)])
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
-1 COPY -1
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
-1 BOOL_NEGATE 0
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -36) PTRSUB RSP -36
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 -1
 RETURN 1
 CALL func (ARG1 + 88) (RSP + -36) 0 (ARG1 + 88)
(RSP + -36) PTRSUB RSP -36
(ARG1 + 112) INT_ADD ARG1 112
 CALL func (ARG1 + 112)
 RETURN 0
(ARG1 + 112) INT_ADD ARG1 112
 CALL func (ARG1 + 112) ARG2 (ARG1 + 112)
 RETURN 0
 CALL func (ARG1 + 112) ARG1 (ARG1 + 112)
(ARG1 + 112) INT_ADD ARG1 112
 RETURN 0
 CALL func (ARG1 + 112) ARG1 ARG2 (ARG1 + 112)
(ARG1 + 112) INT_ADD ARG1 112
 RETURN 0
[ARG1] LOAD 433 ARG1
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 (ARG1 + 8)
 STORE 433 ARG1 Symbol
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 ARG2 ARG2
ARG1 CAST ARG1
(ARG2 + 8) INT_ADD ARG2 8
(ARG2 + 12) INT_ADD ARG2 12
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG1 + 12) INT_ADD ARG1 12
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
(ARG1 + 12) CAST (ARG1 + 12)
[(ARG2 + 12)] LOAD 433 (ARG2 + 12)
(ARG2 + 12) CAST (ARG2 + 12)
 STORE 433 (ARG1 + 8) [(ARG2 + 8)]
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 12) [(ARG2 + 12)]
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func ARG3 ARG2 [ARG4] (RSP + -40) ARG6
[ARG4] LOAD 433 ARG4
 CALL func (RSP + -40) ARG5 ARG5
[40] LOAD 433 40
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -40) PTRSUB RSP -40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -40) PTRSUB RSP -40
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CALL func (RSP + -17) ARG1 ARG2 ARG3 ARG4 ARG5
(RSP + -17) PTRSUB RSP -17
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 12) INT_ADD ARG1 12
[ARG2] LOAD 433 ARG2
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(ARG1 + 12) CAST (ARG1 + 12)
 CBRANCH ([(ARG1 + 12)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 12)] 0
 RETURN 0 f()
 CBRANCH ([(ARG1 + 8)] INT_EQUAL [ARG2])
1 COPY 1
0 COPY 0
 BRANCH VZERO
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_EQUAL [(ARG1 + 8)] [ARG2]
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_EQUAL ARG3 0
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 88) INT_ADD ARG1 88
 CALL func ARG1 (ARG1 + 112) (RSP + -36) f() ARG2
(ARG1 + 112) INT_ADD ARG1 112
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 CBRANCH (ARG3 INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
(RSP + -36) PTRSUB RSP -36
f() CALL func (ARG1 + 88)
f() CALL func (ARG1 + 88)
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
0 INT_EQUAL f() 0
f() CALL func f() (RSP + -40) f()
f() CALL func (ARG1 + 88)
f() CALL func (ARG1 + 88)
(RSP + -40) PTRSUB RSP -40
(ARG1 + 112) INT_ADD ARG1 112
 CALL func ARG1
 RETURN 0
 CALL func (ARG1 + 112)
(ARG1 + 88) INT_ADD ARG1 88
 CALL func (ARG1 + 88) ARG2 1 (ARG1 + 88)
 RETURN 0
(ARG1 + 112) INT_ADD ARG1 112
 RETURN 0 (ARG1 + 112)
0 INT_NOTEQUAL ARG3 0
 CALL libcall_operator=_thunk ARG1 ARG2
(ARG1 + 32) PTRADD ARG1 32 1
 CALL func (ARG1 + 32) ARG2 (ARG1 + 32)
 CBRANCH (ARG3 INT_NOTEQUAL 0)
 RETURN 0
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 168) INT_ADD ARG1 168
f() CALL func (ARG1 + 168) ARG1 ARG3 ARG4 ARG5 ARG6 (RSP + -72) 4496391
 CALL func ARG1 ARG2 ARG2
4496391 COPY 4496391
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -72) PTRSUB RSP -72
 CBRANCH (0 INT_EQUAL [(f() + 40)])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
-1 COPY -1
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
(RSP + -72) PTRSUB RSP -72
 CALL libcall_~basic_string_thunk (RSP + -72)
-1 BOOL_NEGATE 0
 CBRANCH (f() INT_EQUAL 0)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_EQUAL f() 0
 CALL libcall_basic_string_thunk
 CALL func (ARG1 + 88) (RSP + -72) 0 (ARG1 + 88)
(RSP + -72) PTRSUB RSP -72
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 -1
(ARG1 + 168) INT_ADD ARG1 168
 CALL func (ARG1 + 168)
 RETURN 0
(ARG1 + 168) INT_ADD ARG1 168
 CALL func (ARG1 + 168) ARG2 (ARG1 + 168)
 RETURN 0
 CALL func (ARG1 + 168) ARG1 (ARG1 + 168)
(ARG1 + 168) INT_ADD ARG1 168
 RETURN 0
 CALL func (ARG1 + 168) ARG1 ARG2 (ARG1 + 168)
(ARG1 + 168) INT_ADD ARG1 168
 RETURN 0
f() CALL libcall_size_thunk
f() CALL libcall_size_thunk
0 INT_EQUAL f() f()
 CBRANCH (f() INT_EQUAL f())
 CBRANCH (f() INT_EQUAL 0)
 RETURN 0 1
1 COPY 1
 RETURN 0 0
0 COPY 0
f() CALL func f() f() f()
f() CALL libcall_data_thunk
f() CALL libcall_size_thunk
0 INT_EQUAL f() 0
f() CALL libcall_data_thunk
f() CALL func ARG1 ARG2 ARG2
0 COPY 0
 RETURN 0 0
0 INT_XOR f() 1
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 8) INT_ADD ARG1 8
f() CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
0 INT_NOTEQUAL [(ARG1 + 40)] 0
 CBRANCH ([(ARG1 + 40)] INT_NOTEQUAL 0)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 RETURN 0 1
 RETURN 0 0
1 COPY 1
0 INT_NOTEQUAL f() 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 Symbol
 CALL func ARG1
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func ARG1 ARG2 ARG2
(ARG1 + 40) PTRADD ARG1 5 8
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 Symbol
(ARG2 + 40) INT_ADD ARG2 40
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
[(ARG2 + 40)] LOAD 433 (ARG2 + 40)
(ARG2 + 40) CAST (ARG2 + 40)
 RETURN 0
 CALL libcall_basic_string_thunk (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 40) [(ARG2 + 40)]
(ARG1 + 40) CAST (ARG1 + 40)
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
 RETURN 0
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func (RSP + -72) ARG5 ARG5
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func ARG3 ARG2 f() f() (RSP + -72) ARG6 ARG6 ARG5 ARG4 ARG3 ARG2 ARG1
[40] LOAD 433 40
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL libcall_data_thunk
f() CALL libcall_length_thunk
 CALL func (RSP + -72)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -72) PTRSUB RSP -72
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 CALL func (RSP + -17) ARG1 ARG2 ARG3 ARG4 ARG5
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -17) PTRSUB RSP -17
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 32) INT_ADD ARG1 32
 RETURN 0 (ARG1 + 32)
0 INT_EQUAL ARG3 0
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 168) INT_ADD ARG1 168
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 88) INT_ADD ARG1 88
 CALL func ARG1 (ARG1 + 168) f(ARG1) f() ARG2
(ARG1 + 88) INT_ADD ARG1 88
 CBRANCH (ARG3 INT_EQUAL 0)
 CBRANCH f()
 RETURN 0
0 INT_EQUAL f() 0
1 COPY 1
f(ARG1) CALL func (ARG1 + 88)
f() CALL func (ARG1 + 88)
f() CALL func f() f(ARG1)
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
f(ARG1) CALL func (ARG1 + 88)
f() CALL func (ARG1 + 88)
0 COPY 0
(ARG1 + 168) INT_ADD ARG1 168
 CALL func ARG1
 RETURN 0
 CALL func (ARG1 + 168)
(ARG1 + 88) INT_ADD ARG1 88
 CALL func (ARG1 + 88) ARG2 1 (ARG1 + 88)
 RETURN 0
(ARG1 + 168) INT_ADD ARG1 168
 RETURN 0 (ARG1 + 168)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 9) INT_ADD ARG1 9
[ARG2] LOAD 433 ARG2
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 9) CAST (ARG1 + 9)
 RETURN 0
 STORE 433 (ARG1 + 8) [ARG2]
 STORE 433 (ARG1 + 9) 1
ARG1 COPY ARG1
 CALL func ARG1 ARG2 ARG2
 RETURN 0 ARG1
 STORE 433 ARG1 [ARG2]
(ARG1 + 8) PTRADD ARG1 8 1
[ARG2] LOAD 433 ARG2
 CALL func (ARG1 + 8) ARG2 (ARG1 + 8)
0 INT_NOTEQUAL ARG3 0
 CBRANCH (ARG3 INT_NOTEQUAL 0)
 RETURN 0
(ARG1 + 88) INT_ADD ARG1 88
 CALL func ARG1 ARG2 ARG2
(ARG1 + 112) INT_ADD ARG1 112
f() CALL func (ARG1 + 112) ARG1 ARG3 ARG4 ARG5 ARG6 (RSP + -33)
0 INT_EQUAL f() 0
-1 COPY -1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
-1 BOOL_NEGATE 0
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) INT_ADD f() 40
0 INT_EQUAL 0 [(f() + 40)]
(RSP + -33) PTRSUB RSP -33
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CALL func (ARG1 + 88) (RSP + -33) 0 (ARG1 + 88)
(RSP + -33) PTRSUB RSP -33
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 RETURN 0 -1
(ARG1 + 112) INT_ADD ARG1 112
 CALL func (ARG1 + 112)
 RETURN 0
(ARG1 + 112) INT_ADD ARG1 112
 CALL func (ARG1 + 112) ARG2 (ARG1 + 112)
 RETURN 0
 CALL func (ARG1 + 112) ARG1 (ARG1 + 112)
(ARG1 + 112) INT_ADD ARG1 112
 RETURN 0
 CALL func (ARG1 + 112) ARG1 ARG2 (ARG1 + 112)
(ARG1 + 112) INT_ADD ARG1 112
 RETURN 0
 STORE 433 ARG1 Symbol
ARG1 CAST ARG1
 CALL func ARG1 ARG2 ARG2
(ARG1 + 8) PTRADD ARG1 1 8
(ARG2 + 8) INT_ADD ARG2 8
(ARG2 + 9) INT_ADD ARG2 9
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 RETURN 0
(ARG1 + 9) CAST (ARG1 + 9)
(ARG2 + 8) CAST (ARG2 + 8)
[(ARG2 + 9)] LOAD 433 (ARG2 + 9)
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
(ARG1 + 9) INT_ADD ARG1 9
 STORE 433 (ARG1 + 8) [(ARG2 + 8)]
(ARG2 + 9) CAST (ARG2 + 9)
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 9) [(ARG2 + 9)]
 CALL func ARG1 ARG2 ARG2
 STORE 433 ARG1 Symbol
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1 ARG2 ARG2
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 RETURN 0
 CALL func ARG3 ARG2 [ARG4] (RSP + -40) ARG6
[ARG4] LOAD 433 ARG4
 CALL func (RSP + -40) ARG5 ARG5
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[ARG4] INT_SEXT [ARG4]
(RSP + -40) PTRSUB RSP -40
40 INT_ADD 0 40
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -40) PTRSUB RSP -40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func (RSP + -17) ARG1 ARG2 ARG3 ARG4 ARG5
(RSP + -17) PTRSUB RSP -17
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[40] LOAD 433 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
(ARG1 + 9) INT_ADD ARG1 9
(ARG1 + 8) INT_ADD ARG1 8
[ARG2] LOAD 433 ARG2
[(ARG1 + 9)] LOAD 433 (ARG1 + 9)
 CBRANCH ([(ARG1 + 9)] INT_EQUAL 0)
0 INT_EQUAL [(ARG1 + 9)] 0
(ARG1 + 9) CAST (ARG1 + 9)
 RETURN 0 f()
 CBRANCH ([(ARG1 + 8)] INT_EQUAL [ARG2])
1 COPY 1
 BRANCH VZERO
0 COPY 0
0 INT_EQUAL [(ARG1 + 8)] [ARG2]
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[ARG1] LOAD 433 ARG1
[ARG1] COPY [ARG1]
 RETURN 0 [ARG1]
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 (ARG1 + 8)
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 88) INT_ADD ARG1 88
 CALL func ARG1 (ARG1 + 112) (RSP + -33) f() ARG2
(ARG1 + 112) INT_ADD ARG1 112
0 INT_EQUAL ARG3 0
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH f()
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) CAST (f() + 40)
 CBRANCH (ARG3 INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 RETURN 1
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
f() CALL func (ARG1 + 88)
f() CALL func (ARG1 + 88)
(RSP + -33) PTRSUB RSP -33
f() CALL func f() (RSP + -34) f()
0 INT_EQUAL f() 0
f() CALL func (ARG1 + 88)
f() CALL func (ARG1 + 88)
(RSP + -34) PTRSUB RSP -34
 CALL func ARG1
(ARG1 + 112) INT_ADD ARG1 112
 CALL func (ARG1 + 112)
 RETURN 0
(ARG1 + 88) INT_ADD ARG1 88
 CALL func (ARG1 + 88) ARG2 1 (ARG1 + 88)
 RETURN 0
(ARG1 + 112) INT_ADD ARG1 112
 RETURN 0 (ARG1 + 112)
 CALL func ARG1 ARG2 ARG2
(ARG1 + 112) INT_ADD ARG1 112
(ARG1 + 88) INT_ADD ARG1 88
f() CALL func (ARG1 + 112) ARG1 ARG3 ARG4 ARG5 ARG6 (RSP + -33)
(f() + 40) CAST (f() + 40)
(RSP + -33) PTRSUB RSP -33
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (0 INT_EQUAL [(f() + 40)])
-1 BOOL_NEGATE 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
-1 COPY -1
0 COPY 0
0 INT_EQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
 RETURN 0 -1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(RSP + -33) PTRSUB RSP -33
 CALL func (ARG1 + 88) (RSP + -33) 0 (ARG1 + 88)
(ARG1 + 112) INT_ADD ARG1 112
 CALL func (ARG1 + 112)
 RETURN 0
(ARG1 + 112) INT_ADD ARG1 112
 CALL func (ARG1 + 112) ARG2 (ARG1 + 112)
 RETURN 0
(ARG1 + 112) INT_ADD ARG1 112
 CALL func (ARG1 + 112) ARG1 (ARG1 + 112)
 RETURN 0
 CALL func (ARG1 + 112) ARG1 ARG2 (ARG1 + 112)
(ARG1 + 112) INT_ADD ARG1 112
 RETURN 0
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 (ARG1 + 8)
(ARG1 + 112) INT_ADD ARG1 112
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 88) INT_ADD ARG1 88
(ARG1 + 88) INT_ADD ARG1 88
 CALL func ARG1 (ARG1 + 112) (RSP + -33) f() ARG2
0 INT_EQUAL ARG3 0
 CBRANCH (ARG3 INT_EQUAL 0)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
f() CALL func (ARG1 + 88)
(RSP + -34) PTRSUB RSP -34
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
1 COPY 1
f() CALL func f() (RSP + -34) f()
 BRANCH VZERO
f() CALL func (ARG1 + 88)
0 COPY 0
f() CALL func (ARG1 + 88)
(RSP + -33) PTRSUB RSP -33
f() CALL func (ARG1 + 88)
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(ARG1 + 112) INT_ADD ARG1 112
 RETURN 0 (ARG1 + 112)
 CALL func ARG1
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
 CALL func ARG1
 STORE 433 ARG1 Symbol
 RETURN 0
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
(ARG1 + 112) PTRADD ARG1 14 8
 STORE 433 ARG1 Symbol
 CALL func ARG1
 RETURN 0
 CALL func (ARG1 + 112)
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func ARG1
 CALL libcall_operator.delete_thunk ARG1
 RETURN 0
(ARG1 + 32) PTRADD ARG1 32 1
 CALL libcall_~basic_string_thunk ARG1
 CALL func (ARG1 + 32)
 RETURN 0
 CALL func ARG1
(ARG1 + 88) PTRADD ARG1 11 8
(ARG1 + 168) PTRADD ARG1 21 8
 STORE 433 ARG1 Symbol
 CALL func (ARG1 + 168)
 CALL func (ARG1 + 88)
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
 CALL libcall_operator.delete_thunk ARG1
 CALL func ARG1
 RETURN 0
 STORE 433 ARG1 Symbol
 CALL func ARG1
Symbol CAST Symbol
Symbol PTRSUB 0 Symbol
 RETURN 0
(ARG1 + 112) PTRADD ARG1 14 8
 STORE 433 ARG1 Symbol
 CALL func ARG1
 RETURN 0
 CALL func (ARG1 + 112)
Symbol PTRSUB 0 Symbol
Symbol CAST Symbol
 CALL func ARG1
 CALL libcall_operator.delete_thunk ARG1
 RETURN 0
f() CALL func ARG1 f() f()
f() CALL func ARG2
f() CALL func ARG2
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
 RETURN 0 f()
 BRANCH VZERO
0 COPY 0
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 8) INT_ADD ARG1 8
[ARG2] LOAD 433 ARG2
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
0 INT_EQUAL [(ARG1 + 12)] 0
(ARG1 + 12) CAST (ARG1 + 12)
 CBRANCH ([(ARG1 + 12)] INT_EQUAL 0)
 RETURN 0 f()
(ARG1 + 8) CAST (ARG1 + 8)
0 COPY 0
0 INT_EQUAL [(ARG1 + 8)] [ARG2]
 CBRANCH ([(ARG1 + 8)] INT_EQUAL [ARG2])
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
1 COPY 1
f() CALL func ARG1 f() f()
f() CALL func ARG2
f() CALL func ARG2
 RETURN 0 f()
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
 BRANCH VZERO
0 COPY 0
f() CALL func ARG1 f() f()
f() CALL func ARG2
f() CALL func ARG2
 RETURN 0 f()
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
 BRANCH VZERO
0 COPY 0
f() CALL func ARG1 f() f()
f() CALL func ARG2
f() CALL func ARG2
 RETURN 0 f()
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
 BRANCH VZERO
0 COPY 0
[ARG1] LOAD 433 ARG1
(ARG1 + ARG2) PTRADD ARG1 ARG2 1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
0 INT_NOTEQUAL ARG2 1
0 INT_NOTEQUAL ARG2 2
0 INT_NOTEQUAL ARG2 4
0 INT_SLESS ARG2 3
0 INT_NOTEQUAL ARG2 3
ARG2 INT_SEXT ARG2
 CBRANCH (ARG2 INT_NOTEQUAL 2)
 CBRANCH (255 INT_SLESS [((ARG1 + ARG2) + -1)])
0 COPY 0
 RETURN 0 0
0 INT_LESS 191 [((ARG1 + ARG2) + -1)]
0 COPY 0
 RETURN 0 0
 RETURN 0 0
 RETURN 0 f()
0 COPY 0
 RETURN 0 0
0 COPY 0
0 COPY 0
0 COPY 0
 RETURN 0 0
0 COPY 0
0 COPY 0
 CBRANCH (191 INT_LESS [((ARG1 + ARG2) + -1)])
 RETURN 0 0
0 COPY 0
 RETURN 0 0
 RETURN 0 0
0 COPY 0
 RETURN 0 0
 RETURN 0 0
 CBRANCH (255 INT_SLESS [(f(ARG1 , ARG2) + -1)])
0 INT_LESS 191 [(f(ARG1 , ARG2) + -1)]
 CBRANCH (191 INT_LESS [(f(ARG1 , ARG2) + -1)])
 CBRANCH ([ARG1] INT_LESS 194)
0 COPY 0
 CBRANCH ([ARG1] INT_LESS 245)
 BRANCH VZERO
0 INT_LESS [ARG1] 245
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH ([(f(ARG1 , ARG2) + -1)] INT_LESS 160)
0 INT_SLESS [ARG1] 0
[ARG1] CAST [ARG1]
 CBRANCH ([ARG1] INT_SLESS 0)
 CBRANCH ([ARG1] INT_EQUAL 240)
0 INT_EQUAL [ARG1] 244
0 INT_LESS [(f(ARG1 , ARG2) + -1)] 144
 CBRANCH ([ARG1] INT_EQUAL 244)
 CBRANCH ([(f(ARG1 , ARG2) + -1)] INT_LESS 144)
 CBRANCH (ARG2 INT_SLESS 3)
 CBRANCH (ARG2 INT_NOTEQUAL 1)
 CBRANCH (ARG2 INT_NOTEQUAL 3)
0 INT_LESS [ARG1] 194
 CBRANCH (255 INT_SLESS [(f(ARG1 , ARG2) + -1)])
0 INT_LESS 191 [(f(ARG1 , ARG2) + -1)]
 CBRANCH (191 INT_LESS [(f(ARG1 , ARG2) + -1)])
 CBRANCH (ARG2 INT_NOTEQUAL 4)
0 INT_SLESS 255 [((ARG1 + ARG2) + -1)]
((ARG1 + ARG2) + -1) PTRADD (ARG1 + ARG2) -1 1
[((ARG1 + ARG2) + -1)] LOAD 433 ((ARG1 + ARG2) + -1)
[((ARG1 + ARG2) + -1)] CAST [((ARG1 + ARG2) + -1)]
0 INT_SLESS 255 [(f(ARG1 , ARG2) + -1)]
[(f(ARG1 , ARG2) + -1)] LOAD 433 (f(ARG1 , ARG2) + -1)
[(f(ARG1 , ARG2) + -1)] CAST [(f(ARG1 , ARG2) + -1)]
(f(ARG1 , ARG2) + -1) PTRADD f(ARG1 , ARG2) -1 1
0 INT_EQUAL [ARG1] 237
 CBRANCH ([ARG1] INT_EQUAL 237)
 CBRANCH (159 INT_LESS [(f(ARG1 , ARG2) + -1)])
 CBRANCH ([ARG1] INT_LESS 238)
0 INT_EQUAL [ARG1] 240
0 INT_EQUAL [ARG1] 224
 CBRANCH ([ARG1] INT_EQUAL 224)
[(f(ARG1 , ARG2) + -1)] LOAD 433 (f(ARG1 , ARG2) + -1)
[(f(ARG1 , ARG2) + -1)] CAST [(f(ARG1 , ARG2) + -1)]
(f(ARG1 , ARG2) + -1) PTRADD f(ARG1 , ARG2) -1 1
0 INT_SLESS 255 [(f(ARG1 , ARG2) + -1)]
 CBRANCH (143 INT_LESS [(f(ARG1 , ARG2) + -1)])
[(f(ARG1 , ARG2) + -1)] CAST [(f(ARG1 , ARG2) + -1)]
0 INT_SLESS 255 [(f(ARG1 , ARG2) + -1)]
 CBRANCH (255 INT_SLESS [(f(ARG1 , ARG2) + -1)])
0 INT_LESS 143 [(f(ARG1 , ARG2) + -1)]
0 INT_LESS 159 [(f(ARG1 , ARG2) + -1)]
0 INT_LESS [ARG1] 238
0 INT_LESS [(f(ARG1 , ARG2) + -1)] 160
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 f(ARG1 , Symbol)
0 INT_LESSEQUAL ARG2 f(ARG1)
(ARG2 + (~(f(ARG1)) + 1)) PTRADD ARG2 (~(f(ARG1)) + 1) 1
 STORE 433 ARG3 f(ARG3)
[ARG3] LOAD 433 ARG3
0 INT_LESSEQUAL ARG4 (f(ARG3) + 2)
0 INT_LESSEQUAL ARG4 f(ARG3)
0 INT_EQUAL ARG5 0
0 INT_EQUAL ARG5 0
 BRANCH VZERO
 CBRANCH (ARG2 INT_LESSEQUAL f(ARG1))
[ARG3] COPY [ARG3]
 RETURN 0 f()
0 COPY 0
f() COPY f()
 CBRANCH (ARG4 INT_LESSEQUAL (f(ARG3) + 2))
((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) INT_SUB (f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) 65536
 BRANCH VZERO
(((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) / 2147483647) SUBPIECE ((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) 0
(((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) / 2199023254528) SUBPIECE (((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) / 1024) 0
(f(ARG1) + ~([([f(ARG1)] + Symbol)])) PTRADD f(ARG1) ~([([f(ARG1)] + Symbol)]) 1
(1023 & (((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) / 2147483647)) INT_AND (((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) / 2147483647) 1023
((((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) / 2199023254528) + 55296) INT_ADD (((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) / 2199023254528) 55296
 STORE 433 (f(ARG3) + 2) ((1023 & (((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) / 2147483647)) + 56320)
2 COPY 2
((1023 & (((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) / 2147483647)) + 56320) INT_ADD (1023 & (((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) / 2147483647)) 56320
(((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) / 1024) INT_RIGHT ((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) 10
(f(ARG3) + 4) PTRADD f(ARG3) 2 2
(f(ARG3) + 2) PTRADD f(ARG3) 1 2
 STORE 433 f(ARG3) ((((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) + 65536) / 2199023254528) + 55296)
~([([f(ARG1)] + Symbol)]) INT_NEGATE [([f(ARG1)] + Symbol)]
[([f(ARG1)] + Symbol)] INT_ZEXT [([f(ARG1)] + Symbol)]
 CBRANCH ((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) INT_LESS 65536)
0 INT_LESS (f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) 1114112
0 INT_LESS (f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) 55296
 CBRANCH ((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) INT_LESS 1114112)
 CBRANCH ((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) INT_LESS 55296)
 CBRANCH (57343 INT_LESS (f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]))
 CBRANCH (ARG5 INT_EQUAL 0)
(f(ARG3) + 2) PTRADD f(ARG3) 1 2
(f(ARG3) + 2) COPY (f(ARG3) + 2)
 STORE 433 f(ARG3) ((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) / 2147483647)
 BRANCH VZERO
((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) / 2147483647) SUBPIECE (f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) 0
 CBRANCH (ARG5 INT_EQUAL 0)
(f(ARG3) + 2) PTRADD f(ARG3) 1 2
(f(ARG3) + 2) PTRADD f(ARG3) 1 2
(f(ARG3) + 2) COPY (f(ARG3) + 2)
 STORE 433 f(ARG3) 65533
 BRANCH VZERO
[([f(ARG1)] + Symbol)] INT_ZEXT [([f(ARG1)] + Symbol)]
(f(ARG1) + ~([([f(ARG1)] + Symbol)])) PTRADD f(ARG1) ~([([f(ARG1)] + Symbol)]) 1
 BRANCH VZERO
~([([f(ARG1)] + Symbol)]) INT_NEGATE [([f(ARG1)] + Symbol)]
3 COPY 3
0 INT_SLESSEQUAL (ARG2 + (~(f(ARG1)) + 1)) [([f(ARG1)] + Symbol)]
[f(ARG1)] CAST [f(ARG1)]
f(ARG1) CAST f(ARG1)
 CBRANCH ((ARG2 + (~(f(ARG1)) + 1)) INT_SLESSEQUAL [([f(ARG1)] + Symbol)])
[f(ARG1)] LOAD 433 f(ARG1)
[([f(ARG1)] + Symbol)] LOAD 433 ([f(ARG1)] + Symbol)
([f(ARG1)] + Symbol) PTRADD Symbol [f(ARG1)] 1
[([f(ARG1)] + Symbol)] CAST [([f(ARG1)] + Symbol)]
Symbol PTRSUB 0 Symbol
[f(ARG1)] INT_ZEXT [f(ARG1)]
[f(ARG1)] INT_SEXT [f(ARG1)]
[([f(ARG1)] + Symbol)] INT_SEXT [([f(ARG1)] + Symbol)]
0 COPY 0
[([f(ARG1)] + Symbol)] INT_ZEXT [([f(ARG1)] + Symbol)]
(~(f(ARG1)) + 1) INT_2COMP f(ARG1)
(ARG2 + (~(f(ARG1)) + 1)) CAST (ARG2 + (~(f(ARG1)) + 1))
[([f(ARG1)] + Symbol)] CAST [([f(ARG1)] + Symbol)]
 CBRANCH (ARG4 INT_LESSEQUAL f(ARG3))
[([f(ARG1)] + Symbol)] INT_ZEXT [([f(ARG1)] + Symbol)]
 BRANCH VZERO
(f(ARG1) + ~([([f(ARG1)] + Symbol)])) PTRADD f(ARG1) ~([([f(ARG1)] + Symbol)]) 1
~([([f(ARG1)] + Symbol)]) INT_NEGATE [([f(ARG1)] + Symbol)]
2 COPY 2
0 INT_LESS (f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) 65536
 CBRANCH (f() INT_EQUAL 0)
f(ARG1) COPY f(ARG1)
Symbol PTRSUB 0 Symbol
f(ARG1) COPY f(ARG1)
[([f(ARG1)] + Symbol)] INT_ZEXT [([f(ARG1)] + Symbol)]
f(ARG1) COPY f(ARG1)
 BRANCHIND [([f(ARG1)] + Symbol)]
f(ARG1) COPY f(ARG1)
(Symbol + ([([f(ARG1)] + Symbol)] * 4)) CAST (Symbol + ([([f(ARG1)] + Symbol)] * 4))
([([f(ARG1)] + Symbol)] * 4) INT_MULT [([f(ARG1)] + Symbol)] 4
f(ARG1) COPY f(ARG1)
3 COPY 3
f(ARG1) COPY f(ARG1)
(f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) INT_SUB f(ARG1) [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]
(Symbol + ([([f(ARG1)] + Symbol)] * 4)) PTRADD Symbol ([([f(ARG1)] + Symbol)] * 4) 1
[(Symbol + ([([f(ARG1)] + Symbol)] * 4))] LOAD 433 (Symbol + ([([f(ARG1)] + Symbol)] * 4))
 BRANCH VZERO
[([f(ARG1)] + Symbol)] CAST [([f(ARG1)] + Symbol)]
[([f(ARG1)] + Symbol)] INT_SEXT [([f(ARG1)] + Symbol)]
3 COPY 3
[([f(ARG1)] + Symbol)] INT_ZEXT [([f(ARG1)] + Symbol)]
 STORE 433 f(ARG3) 65533
(f(ARG1) + ~([([f(ARG1)] + Symbol)])) PTRADD f(ARG1) ~([([f(ARG1)] + Symbol)]) 1
(f(ARG3) + 2) COPY (f(ARG3) + 2)
~([([f(ARG1)] + Symbol)]) INT_NEGATE [([f(ARG1)] + Symbol)]
(f(ARG3) + 2) PTRADD f(ARG3) 1 2
 BRANCH VZERO
 BRANCH VZERO
0 INT_LESS 57343 (f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))])
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
(f(ARG1) + 1) COPY (f(ARG1) + 1)
[([f(ARG1)] + Symbol)] INT_ZEXT [([f(ARG1)] + Symbol)]
[f(ARG1)] LOAD 433 f(ARG1)
(f(ARG1) + 1) COPY (f(ARG1) + 1)
[f(ARG1)] LOAD 433 f(ARG1)
(f(ARG1) + 1) COPY (f(ARG1) + 1)
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
[f(ARG1)] INT_ZEXT [f(ARG1)]
[f(ARG1)] LOAD 433 f(ARG1)
(f(ARG1) + [f(ARG1)]) INT_ADD f(ARG1) [f(ARG1)]
((f(ARG1) + [f(ARG1)]) * 64) INT_MULT (f(ARG1) + [f(ARG1)]) 64
[f(ARG1)] INT_ZEXT [f(ARG1)]
(f(ARG1) + 1) COPY (f(ARG1) + 1)
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
(f(ARG1) + [f(ARG1)]) INT_ADD f(ARG1) [f(ARG1)]
((f(ARG1) + [f(ARG1)]) * 64) INT_MULT (f(ARG1) + [f(ARG1)]) 64
[f(ARG1)] INT_ZEXT [f(ARG1)]
((f(ARG1) + [f(ARG1)]) * 64) INT_MULT (f(ARG1) + [f(ARG1)]) 64
(f(ARG1) + 1) COPY (f(ARG1) + 1)
([([f(ARG1)] + Symbol)] + 1) INT_ADD [([f(ARG1)] + Symbol)] 1
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
[f(ARG1)] LOAD 433 f(ARG1)
(f(ARG1) + [f(ARG1)]) INT_ADD f(ARG1) [f(ARG1)]
((f(ARG1) + [f(ARG1)]) * 64) INT_MULT (f(ARG1) + [f(ARG1)]) 64
1 COPY 1
0 INT_EQUAL f() 0
(f(ARG1) + 1) COPY (f(ARG1) + 1)
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
f() CALL func f(ARG1) ([([f(ARG1)] + Symbol)] + 1) ([([f(ARG1)] + Symbol)] + 1)
[f(ARG1)] INT_ZEXT [f(ARG1)]
[f(ARG1)] LOAD 433 f(ARG1)
(f(ARG1) + [f(ARG1)]) INT_ADD f(ARG1) [f(ARG1)]
[f(ARG1)] INT_ZEXT [f(ARG1)]
([f(ARG1)] * 64) INT_LEFT [f(ARG1)] 6
[f(ARG1)] INT_ZEXT [f(ARG1)]
(f(ARG1) + [f(ARG1)]) INT_ADD f(ARG1) [f(ARG1)]
 BRANCH VZERO
[f(ARG1)] LOAD 433 f(ARG1)
f(ARG1 , Symbol) LOAD 433 ARG1
f(ARG1 , Symbol) LOAD 433 ARG1
f(ARG1 , Symbol) LOAD 433 ARG1
f(ARG1 , Symbol) LOAD 433 ARG1
 STORE 433 ARG1 (f(ARG1 , Symbol) + ([([[ARG1]] + Symbol)] + 1))
f(ARG1 , Symbol) LOAD 433 ARG1
(ARG2 + (~(f(ARG1 , Symbol)) + 1)) PTRADD ARG2 (~(f(ARG1 , Symbol)) + 1) 1
0 INT_EQUAL f(ARG1 , Symbol) ARG2
 BRANCH VZERO
 CBRANCH (f(ARG1 , Symbol) INT_EQUAL ARG2)
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
([([[ARG1]] + Symbol)] + 1) INT_SEXT ([([[ARG1]] + Symbol)] + 1)
 RETURN 0 1
1 COPY 1
(f(ARG1 , Symbol) + ([([[ARG1]] + Symbol)] + 1)) PTRADD f(ARG1 , Symbol) ([([[ARG1]] + Symbol)] + 1) 1
 RETURN 0 0
f(ARG1 , Symbol) CAST f(ARG1 , Symbol)
Symbol PTRSUB 0 Symbol
[([[ARG1]] + Symbol)] CAST [([[ARG1]] + Symbol)]
[[ARG1]] INT_SEXT [[ARG1]]
[[ARG1]] LOAD 433 f(ARG1 , Symbol)
[[ARG1]] INT_ZEXT [[ARG1]]
0 INT_SLESS (ARG2 + (~(f(ARG1 , Symbol)) + 1)) ([([[ARG1]] + Symbol)] + 1)
(~(f(ARG1 , Symbol)) + 1) INT_2COMP f(ARG1 , Symbol)
[[ARG1]] CAST [[ARG1]]
([([[ARG1]] + Symbol)] + 1) INT_ADD [([[ARG1]] + Symbol)] 1
 CBRANCH ((ARG2 + (~(f(ARG1 , Symbol)) + 1)) INT_SLESS ([([[ARG1]] + Symbol)] + 1))
[([[ARG1]] + Symbol)] LOAD 433 ([[ARG1]] + Symbol)
([[ARG1]] + Symbol) PTRADD Symbol [[ARG1]] 1
(ARG2 + (~(f(ARG1 , Symbol)) + 1)) CAST (ARG2 + (~(f(ARG1 , Symbol)) + 1))
[([[ARG1]] + Symbol)] INT_SEXT [([[ARG1]] + Symbol)]
([([[ARG1]] + Symbol)] + 1) INT_SEXT ([([[ARG1]] + Symbol)] + 1)
0 INT_EQUAL f() 0
f() CALL func f(ARG1 , Symbol) ([([[ARG1]] + Symbol)] + 1) ([([[ARG1]] + Symbol)] + 1)
ARG1 CAST ARG1
f() CALL func ARG1 ([([ARG1] + Symbol)] + 1) ([([ARG1] + Symbol)] + 1)
[ARG1] LOAD 433 ARG1
(ARG2 - ARG1) INT_SUB ARG2 ARG1
Symbol PTRSUB 0 Symbol
[ARG1] CAST [ARG1]
[ARG1] INT_SEXT [ARG1]
[ARG1] INT_ZEXT [ARG1]
 RETURN 0 f()
[([ARG1] + Symbol)] LOAD 433 ([ARG1] + Symbol)
([ARG1] + Symbol) PTRADD Symbol [ARG1] 1
0 INT_SLESS (ARG2 - ARG1) ([([ARG1] + Symbol)] + 1)
([([ARG1] + Symbol)] + 1) INT_ADD [([ARG1] + Symbol)] 1
[([ARG1] + Symbol)] CAST [([ARG1] + Symbol)]
 CBRANCH ((ARG2 - ARG1) INT_SLESS ([([ARG1] + Symbol)] + 1))
([([ARG1] + Symbol)] + 1) INT_SEXT ([([ARG1] + Symbol)] + 1)
[([ARG1] + Symbol)] INT_SEXT [([ARG1] + Symbol)]
 BRANCH VZERO
0 COPY 0
[ARG1] LOAD 433 ARG1
(ARG1 + 1) PTRADD ARG1 1 1
f() CALL func ARG1 ARG2 ARG2
0 INT_EQUAL ARG1 ARG2
(ARG1 + 2) PTRADD ARG1 2 1
0 INT_EQUAL (ARG1 + 1) ARG2
0 INT_EQUAL (ARG1 + 2) ARG2
0 INT_EQUAL (ARG1 + 2) ARG2
0 INT_EQUAL (ARG1 + 2) ARG2
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH ([(ARG1 + 1)] INT_LESS 192)
1 COPY 1
 BRANCH VZERO
 CBRANCH ((ARG1 + 2) INT_EQUAL ARG2)
 CBRANCH ([ARG1] INT_LESS 238)
 CBRANCH ([ARG1] INT_EQUAL 240)
0 INT_LESS 239 [ARG1]
 CBRANCH (239 INT_LESS [ARG1])
0 INT_EQUAL [ARG1] 240
 CBRANCH ([(ARG1 + 1)] INT_SLESS 0)
1 COPY 1
 CBRANCH ([(ARG1 + 1)] INT_LESS 160)
 BRANCH VZERO
0 INT_LESS [(ARG1 + 1)] 160
 CBRANCH ([(ARG1 + 2)] INT_LESS 192)
2 COPY 2
3 COPY 3
 BRANCH VZERO
 BRANCH VZERO
 CBRANCH ([(ARG1 + 1)] INT_LESS 192)
1 COPY 1
2 COPY 2
 BRANCH VZERO
 BRANCH VZERO
 CALL libcall___assert_fail_thunk !isLegalUTF8Sequence(source, sourceEnd) /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTF.c 401 findMaximalSubpartOfIllFormedUTF8Sequence
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTF.c COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTF.c
 CBRANCH (ARG1 INT_EQUAL ARG2)
 RETURN 1
findMaximalSubpartOfIllFormedUTF8Sequence COPY findMaximalSubpartOfIllFormedUTF8Sequence
!isLegalUTF8Sequence(source, sourceEnd) COPY !isLegalUTF8Sequence(source, sourceEnd)
 CBRANCH ((ARG1 + 2) INT_EQUAL ARG2)
 BRANCH VZERO
 CBRANCH ([(ARG1 + 2)] INT_SLESS 0)
[(ARG1 + 2)] CAST [(ARG1 + 2)]
2 COPY 2
0 INT_SLESS [(ARG1 + 2)] 0
[(ARG1 + 2)] LOAD 433 (ARG1 + 2)
 CBRANCH ([(ARG1 + 1)] INT_SLESS 0)
 CBRANCH ([(ARG1 + 1)] INT_LESS 144)
1 COPY 1
0 INT_LESS [(ARG1 + 1)] 144
 BRANCH VZERO
 CBRANCH ([ARG1] INT_LESS 225)
0 INT_LESS 236 [ARG1]
0 INT_EQUAL [ARG1] 237
 CBRANCH ([ARG1] INT_EQUAL 237)
 CBRANCH (236 INT_LESS [ARG1])
 CBRANCH ([ARG1] INT_LESS 241)
 CBRANCH ([ARG1] INT_EQUAL 244)
 CBRANCH (243 INT_LESS [ARG1])
0 INT_EQUAL [ARG1] 244
0 INT_LESS 243 [ARG1]
 CBRANCH (193 INT_LESS [ARG1])
 CBRANCH ([ARG1] INT_LESS 245)
0 INT_LESS [ARG1] 245
1 COPY 1
 RETURN 0 f()
 CBRANCH ([(ARG1 + 1)] INT_LESS 192)
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
2 COPY 2
0 INT_LESS [(ARG1 + 1)] 144
0 INT_LESS [ARG1] 241
 CBRANCH ([(ARG1 + 1)] INT_LESS 144)
0 INT_LESS [(ARG1 + 2)] 192
 CBRANCH ([(ARG1 + 1)] INT_SLESS 0)
0 INT_LESS [(ARG1 + 1)] 192
 CBRANCH ([(ARG1 + 1)] INT_LESS 160)
 BRANCH VZERO
1 COPY 1
0 INT_LESS 191 [(ARG1 + 1)]
 CBRANCH (191 INT_LESS [(ARG1 + 1)])
 CBRANCH ([(ARG1 + 2)] INT_LESS 192)
 BRANCH VZERO
3 COPY 3
 BRANCH VZERO
2 COPY 2
 CBRANCH ([(ARG1 + 2)] INT_LESS 192)
 BRANCH VZERO
2 COPY 2
3 COPY 3
 BRANCH VZERO
[(ARG1 + 1)] CAST [(ARG1 + 1)]
0 INT_SLESS [(ARG1 + 1)] 0
0 INT_LESS [ARG1] 238
 CBRANCH (223 INT_LESS [ARG1])
 CBRANCH ((ARG1 + 1) INT_EQUAL ARG2)
 BRANCH VZERO
1 COPY 1
 CBRANCH ([(ARG1 + 1)] INT_SLESS 0)
0 INT_LESS [(ARG1 + 1)] 192
 CBRANCH ((ARG1 + 2) INT_EQUAL ARG2)
[(ARG1 + 2)] CAST [(ARG1 + 2)]
 BRANCH VZERO
2 COPY 2
0 INT_SLESS [(ARG1 + 2)] 0
 CBRANCH ([(ARG1 + 2)] INT_SLESS 0)
[(ARG1 + 2)] LOAD 433 (ARG1 + 2)
[ARG1] CAST [ARG1]
0 INT_SLESS 255 [ARG1]
[(ARG1 + 1)] CAST [(ARG1 + 1)]
 CBRANCH (255 INT_SLESS [ARG1])
0 INT_SLESS [(ARG1 + 1)] 0
 CBRANCH ([ARG1] INT_EQUAL 224)
0 INT_LESS [ARG1] 225
0 INT_LESS [(ARG1 + 1)] 160
 CBRANCH ([(ARG1 + 1)] INT_SLESS 0)
0 INT_LESS [(ARG1 + 1)] 192
0 INT_LESS 193 [ARG1]
 CBRANCH ([ARG1] INT_LESS 194)
0 INT_LESS 223 [ARG1]
[(ARG1 + 1)] CAST [(ARG1 + 1)]
0 INT_SLESS [(ARG1 + 1)] 0
0 INT_SLESS [(ARG1 + 2)] 0
[(ARG1 + 2)] LOAD 433 (ARG1 + 2)
 BRANCH VZERO
[(ARG1 + 2)] CAST [(ARG1 + 2)]
 CBRANCH ([(ARG1 + 2)] INT_SLESS 0)
2 COPY 2
 CBRANCH (191 INT_LESS [(ARG1 + 1)])
 BRANCH VZERO
1 COPY 1
0 INT_LESS [(ARG1 + 2)] 192
 CALL libcall___assert_fail_thunk (b1 >= 0x80 && b1 <= 0xC1) || b1 >= 0xF5 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTF.c 479 findMaximalSubpartOfIllFormedUTF8Sequence
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTF.c COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTF.c
findMaximalSubpartOfIllFormedUTF8Sequence COPY findMaximalSubpartOfIllFormedUTF8Sequence
(b1 >= 0x80 && b1 <= 0xC1) || b1 >= 0xF5 COPY (b1 >= 0x80 && b1 <= 0xC1) || b1 >= 0xF5
 RETURN 1
2 COPY 2
 BRANCH VZERO
1 COPY 1
[(ARG1 + 1)] LOAD 433 (ARG1 + 1)
 BRANCH VZERO
0 INT_EQUAL [ARG1] 224
0 INT_LESS [(ARG1 + 2)] 192
[(ARG1 + 1)] CAST [(ARG1 + 1)]
0 INT_SLESS [(ARG1 + 1)] 0
0 INT_LESS 191 [(ARG1 + 1)]
0 INT_LESS [ARG1] 194
 BRANCH VZERO
0 COPY 0
0 INT_SLESS [(ARG1 + 1)] 0
[(ARG1 + 1)] CAST [(ARG1 + 1)]
 BRANCH VZERO
2 COPY 2
 STORE 433 ARG1 f(ARG1 , Symbol)
[ARG1] LOAD 433 ARG1
0 INT_LESSEQUAL ARG2 f(ARG1)
(ARG2 + (~(f(ARG1)) + 1)) PTRADD ARG2 (~(f(ARG1)) + 1) 1
 STORE 433 ARG3 f(ARG3)
[ARG3] LOAD 433 ARG3
0 INT_LESSEQUAL ARG4 f(ARG3)
0 INT_EQUAL ARG5 0
0 INT_EQUAL ARG5 0
0 INT_EQUAL ARG5 0
0 INT_NOTEQUAL ARG6 0
f() COPY f()
[ARG3] COPY [ARG3]
 CBRANCH (ARG2 INT_LESSEQUAL f(ARG1))
 RETURN 0 f()
0 COPY 0
 BRANCH VZERO
 CBRANCH (ARG5 INT_EQUAL 0)
 BRANCH VZERO
 CBRANCH (ARG6 INT_NOTEQUAL 0)
1 COPY 1
 CBRANCH (ARG5 INT_EQUAL 0)
~([([f(ARG1)] + Symbol)]) INT_NEGATE [([f(ARG1)] + Symbol)]
 BRANCH VZERO
 STORE 433 f(ARG3) 65533
(f(ARG1) + ~([([f(ARG1)] + Symbol)])) PTRADD f(ARG1) ~([([f(ARG1)] + Symbol)]) 1
3 COPY 3
[([f(ARG1)] + Symbol)] INT_ZEXT [([f(ARG1)] + Symbol)]
 BRANCH VZERO
(f(ARG3) + 4) COPY (f(ARG3) + 4)
(f(ARG3) + 4) PTRADD f(ARG3) 1 4
(f(ARG3) + 4) PTRADD f(ARG3) 1 4
(f(ARG1) + f()) PTRADD f(ARG1) f() 1
3 COPY 3
(f(ARG3) + 4) COPY (f(ARG3) + 4)
 BRANCH VZERO
f() INT_ZEXT f()
f() CALL func f(ARG1)
 STORE 433 f(ARG3) 65533
 CBRANCH (ARG5 INT_EQUAL 0)
(f(ARG3) + 4) PTRADD f(ARG3) 1 4
f() INT_ZEXT f()
(f(ARG1) + f()) PTRADD f(ARG1) f() 1
f() CALL func f(ARG1)
 STORE 433 f(ARG3) 65533
(f(ARG3) + 4) COPY (f(ARG3) + 4)
 BRANCH VZERO
 CBRANCH (ARG4 INT_LESSEQUAL f(ARG3))
 BRANCH VZERO
0 INT_EQUAL f() 0
2 COPY 2
 CBRANCH (f() INT_EQUAL 0)
f() CALL func f(ARG1) ([([f(ARG1)] + Symbol)] + 1) ([([f(ARG1)] + Symbol)] + 1)
[([f(ARG1)] + Symbol)] INT_ZEXT [([f(ARG1)] + Symbol)]
([([f(ARG1)] + Symbol)] + 1) INT_ADD [([f(ARG1)] + Symbol)] 1
 CBRANCH ((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) INT_LESS 55296)
(f(ARG3) + 4) PTRADD f(ARG3) 1 4
(f(ARG3) + 4) COPY (f(ARG3) + 4)
 BRANCH VZERO
0 INT_LESS 57343 (f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))])
 CBRANCH (57343 INT_LESS (f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]))
 STORE 433 f(ARG3) (f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))])
f(ARG1) COPY f(ARG1)
f(ARG1) COPY f(ARG1)
f(ARG1) COPY f(ARG1)
([([f(ARG1)] + Symbol)] * 4) INT_MULT [([f(ARG1)] + Symbol)] 4
f(ARG1) COPY f(ARG1)
[(Symbol + ([([f(ARG1)] + Symbol)] * 4))] LOAD 433 (Symbol + ([([f(ARG1)] + Symbol)] * 4))
(Symbol + ([([f(ARG1)] + Symbol)] * 4)) CAST (Symbol + ([([f(ARG1)] + Symbol)] * 4))
(f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) INT_SUB f(ARG1) [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]
(Symbol + ([([f(ARG1)] + Symbol)] * 4)) PTRADD Symbol ([([f(ARG1)] + Symbol)] * 4) 1
3 COPY 3
f(ARG1) COPY f(ARG1)
[([f(ARG1)] + Symbol)] INT_ZEXT [([f(ARG1)] + Symbol)]
f(ARG1) COPY f(ARG1)
Symbol PTRSUB 0 Symbol
[([f(ARG1)] + Symbol)] INT_SEXT [([f(ARG1)] + Symbol)]
0 INT_LESS (f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) 1114112
 BRANCHIND [([f(ARG1)] + Symbol)]
[([f(ARG1)] + Symbol)] CAST [([f(ARG1)] + Symbol)]
 CBRANCH ((f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) INT_LESS 1114112)
[([f(ARG1)] + Symbol)] CAST [([f(ARG1)] + Symbol)]
[([f(ARG1)] + Symbol)] CAST [([f(ARG1)] + Symbol)]
0 INT_SLESSEQUAL (ARG2 + (~(f(ARG1)) + 1)) [([f(ARG1)] + Symbol)]
Symbol PTRSUB 0 Symbol
(~(f(ARG1)) + 1) INT_2COMP f(ARG1)
[f(ARG1)] INT_SEXT [f(ARG1)]
 CBRANCH ((ARG2 + (~(f(ARG1)) + 1)) INT_SLESSEQUAL [([f(ARG1)] + Symbol)])
[f(ARG1)] LOAD 433 f(ARG1)
(ARG2 + (~(f(ARG1)) + 1)) CAST (ARG2 + (~(f(ARG1)) + 1))
[f(ARG1)] INT_ZEXT [f(ARG1)]
[f(ARG1)] CAST [f(ARG1)]
[([f(ARG1)] + Symbol)] INT_ZEXT [([f(ARG1)] + Symbol)]
[([f(ARG1)] + Symbol)] LOAD 433 ([f(ARG1)] + Symbol)
([f(ARG1)] + Symbol) PTRADD Symbol [f(ARG1)] 1
f(ARG1) CAST f(ARG1)
0 COPY 0
[([f(ARG1)] + Symbol)] INT_SEXT [([f(ARG1)] + Symbol)]
 STORE 433 f(ARG3) 65533
3 COPY 3
(f(ARG3) + 4) COPY (f(ARG3) + 4)
0 INT_LESS (f(ARG1) - [(Symbol + ([([f(ARG1)] + Symbol)] * 4))]) 55296
(f(ARG3) + 4) PTRADD f(ARG3) 1 4
(f(ARG1) + 1) COPY (f(ARG1) + 1)
((f(ARG1) + [f(ARG1)]) * 64) INT_MULT (f(ARG1) + [f(ARG1)]) 64
(f(ARG1) + [f(ARG1)]) INT_ADD f(ARG1) [f(ARG1)]
[f(ARG1)] LOAD 433 f(ARG1)
[f(ARG1)] INT_ZEXT [f(ARG1)]
[f(ARG1)] LOAD 433 f(ARG1)
(f(ARG1) + 1) COPY (f(ARG1) + 1)
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
(f(ARG1) + 1) COPY (f(ARG1) + 1)
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
(f(ARG1) + 1) COPY (f(ARG1) + 1)
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
[f(ARG1)] LOAD 433 f(ARG1)
(f(ARG1) + 1) COPY (f(ARG1) + 1)
(f(ARG1) + [f(ARG1)]) INT_ADD f(ARG1) [f(ARG1)]
((f(ARG1) + [f(ARG1)]) * 64) INT_MULT (f(ARG1) + [f(ARG1)]) 64
[f(ARG1)] LOAD 433 f(ARG1)
[f(ARG1)] INT_ZEXT [f(ARG1)]
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
(f(ARG1) + [f(ARG1)]) INT_ADD f(ARG1) [f(ARG1)]
((f(ARG1) + [f(ARG1)]) * 64) INT_MULT (f(ARG1) + [f(ARG1)]) 64
[f(ARG1)] INT_ZEXT [f(ARG1)]
((f(ARG1) + [f(ARG1)]) * 64) INT_MULT (f(ARG1) + [f(ARG1)]) 64
[f(ARG1)] INT_ZEXT [f(ARG1)]
(f(ARG1) + 1) COPY (f(ARG1) + 1)
(f(ARG1) + 1) PTRADD f(ARG1) 1 1
[f(ARG1)] LOAD 433 f(ARG1)
[f(ARG1)] INT_ZEXT [f(ARG1)]
[f(ARG1)] LOAD 433 f(ARG1)
(f(ARG1) + [f(ARG1)]) INT_ADD f(ARG1) [f(ARG1)]
([f(ARG1)] * 64) INT_LEFT [f(ARG1)] 6
(f(ARG1) + [f(ARG1)]) INT_ADD f(ARG1) [f(ARG1)]
[f(ARG1)] INT_ZEXT [f(ARG1)]
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5 0
 RETURN 0
0 INT_EQUAL ARG1 2
ARG1 COPY ARG1
0 INT_NOTEQUAL ARG1 2
0 INT_EQUAL ARG1 4
0 INT_NOTEQUAL ARG1 4
0 INT_EQUAL ARG1 1
0 INT_NOTEQUAL ARG1 1
ARG2 COPY ARG2
ARG2 CAST ARG2
ARG2 CAST ARG2
ARG2 COPY ARG2
ARG2 COPY ARG2
(ARG3 * 4) INT_MULT ARG3 4
(ARG2 + ARG3) INT_ADD ARG2 ARG3
(ARG3 * 16) INT_MULT ARG3 16
(ARG2 + ARG3) INT_ADD ARG2 ARG3
ARG3 COPY ARG3
ARG4 COPY ARG4
[ARG4] LOAD 433 ARG4
[ARG4] LOAD 433 ARG4
ARG5 COPY ARG5
 STORE 433 ARG5 ARG2
ARG5 COPY ARG5
 STORE 433 ARG5 f()
 STORE 433 ARG5 ARG2
0 COPY 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG1 INT_NOTEQUAL 1)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (ARG1 INT_NOTEQUAL 2)
0 COPY 0
 CBRANCH (ARG1 INT_NOTEQUAL 4)
0 INT_EQUAL f() 2
 CBRANCH (f() INT_EQUAL 2)
 CBRANCH (ARG1 INT_EQUAL 1)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 RETURN 1
 RETURN 0 (f(ARG4 , ARG5) & -256)
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (ARG1 INT_EQUAL 2)
0 COPY 0
 CBRANCH (ARG1 INT_EQUAL 4)
f() CALL func (RSP + -32) (ARG2 + ARG3) (RSP + -24) ([ARG4] + (ARG3 * 4)) 0
0 COPY 0
(RSP + -24) PTRSUB RSP -24
(RSP + -32) PTRSUB RSP -32
[ARG4] CAST [ARG4]
([ARG4] + (ARG3 * 4)) CAST ([ARG4] + (ARG3 * 4))
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
([ARG4] + (ARG3 * 4)) INT_ADD [ARG4] (ARG3 * 4)
 RETURN 1
WideCharWidth == 1 || WideCharWidth == 2 || WideCharWidth == 4 COPY WideCharWidth == 1 || WideCharWidth == 2 || WideCharWidth == 4
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp
 CALL libcall___assert_fail_thunk WideCharWidth == 1 || WideCharWidth == 2 || WideCharWidth == 4 /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp 19 bool llvm::ConvertUTF8toWide(unsigned int, llvm::StringRef, char*&, const UTF8*&)
bool llvm::ConvertUTF8toWide(unsigned int, llvm::StringRef, char*&, const UTF8*&) COPY bool llvm::ConvertUTF8toWide(unsigned int, llvm::StringRef, char*&, const UTF8*&)
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
3 COPY 3
f(ARG3 , ARG4) CAST f(ARG3 , ARG4)
ARG4 COPY ARG4
 STORE 433 ARG4 (ARG3 + f(ARG3 , ARG4))
 BRANCH VZERO
f(ARG3 , ARG4) LOAD 433 ARG4
[ARG4] LOAD 433 ARG4
ARG4 COPY ARG4
(ARG3 + f(ARG3 , ARG4)) CAST (ARG3 + f(ARG3 , ARG4))
 CALL libcall_memcpy_thunk [ARG4] ARG2 ARG3
(ARG3 + f(ARG3 , ARG4)) INT_ADD ARG3 f(ARG3 , ARG4)
 BRANCH VZERO
 STORE 433 ARG4 [ARG4]
ARG4 COPY ARG4
ARG4 COPY ARG4
 BRANCH VZERO
 CBRANCH (f() INT_EQUAL 0)
ARG4 COPY ARG4
 STORE 433 ARG4 [ARG4]
 BRANCH VZERO
ARG4 COPY ARG4
[(f() + 40)] LOAD 433 (f() + 40)
f(ARG4 , ARG5) CAST f(ARG4 , ARG5)
 CALL libcall___assert_fail_thunk (result != targetExhausted) && "ConvertUTF8toUTFXX exhausted target buffer" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp 59 bool llvm::ConvertUTF8toWide(unsigned int, llvm::StringRef, char*&, const UTF8*&)
bool llvm::ConvertUTF8toWide(unsigned int, llvm::StringRef, char*&, const UTF8*&) COPY bool llvm::ConvertUTF8toWide(unsigned int, llvm::StringRef, char*&, const UTF8*&)
(f(ARG4 , ARG5) & -256) INT_OR (f(ARG4 , ARG5) & -256) 0
(f(ARG4 , ARG5) & -256) INT_AND f(ARG4 , ARG5) -256
 RETURN 1
(result != targetExhausted) && "ConvertUTF8toUTFXX exhausted target buffer" COPY (result != targetExhausted) && "ConvertUTF8toUTFXX exhausted target buffer"
0 INT_ZEXT 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() 0
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(RSP + -88) PTRSUB RSP -88
f() CALL func (RSP + -32) (ARG2 + ARG3) (RSP + -24) ([ARG4] + (ARG3 * 16)) 0
(RSP + -24) PTRSUB RSP -24
(RSP + -32) PTRSUB RSP -32
([ARG4] + (ARG3 * 16)) CAST ([ARG4] + (ARG3 * 16))
(RSP + -88) PTRSUB RSP -88
0 INT_EQUAL f() 0
(RSP + -24) PTRSUB RSP -24
([ARG4] + (ARG3 * 16)) INT_ADD [ARG4] (ARG3 * 16)
[ARG4] CAST [ARG4]
0 INT_EQUAL f() 0
0 COPY 0
f() CALL func (RSP + -24) f() f()
f() CAST f()
f() CALL func (RSP + -88)
f() CALL func (RSP + -88)
 STORE 433 ARG1 f(ARG1)
[ARG1] LOAD 433 ARG1
0 INT_LESSEQUAL ARG2 f(ARG1)
 STORE 433 ARG3 f(ARG3)
[ARG3] LOAD 433 ARG3
0 INT_LESS ARG4 (f(ARG3) + f())
0 INT_EQUAL ARG5 0
 CBRANCH (ARG2 INT_LESSEQUAL f(ARG1))
 RETURN 0 f()
[ARG1] COPY [ARG1]
0 COPY 0
 BRANCH VZERO
f() COPY f()
 CBRANCH ([f(ARG1)] INT_LESS 1114112)
4 COPY 4
3 COPY 3
65533 COPY 65533
3 COPY 3
 BRANCH VZERO
(f(ARG1) + 4) PTRADD f(ARG1) 1 4
 CBRANCH (ARG5 INT_EQUAL 0)
[f(ARG1)] LOAD 433 f(ARG1)
 CBRANCH (f() INT_EQUAL 2)
 STORE 433 (f(ARG3) + -1) (128 | (191 & (f(ARG1) / 2147483647)))
(f(ARG1) / 64) INT_RIGHT f(ARG1) 6
(f(ARG3) + -1) PTRADD f(ARG3) -1 1
4722456 PTRSUB 0 4722456
f() INT_SEXT f()
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
([(f() + 4722456)] | (f(ARG1) / 2147483647)) INT_OR (f(ARG1) / 2147483647) [(f() + 4722456)]
f() CAST f()
[(f() + 4722456)] LOAD 433 (f() + 4722456)
0 INT_LESS 2 f()
(f(ARG3) + -1) PTRADD f(ARG3) -1 1
 STORE 433 (f(ARG3) + -1) ([(f() + 4722456)] | (f(ARG1) / 2147483647))
(f() + 4722456) PTRADD 4722456 f() 1
f() INT_ZEXT f()
(128 | (191 & (f(ARG1) / 2147483647))) INT_OR (191 & (f(ARG1) / 2147483647)) 128
(191 & (f(ARG1) / 2147483647)) INT_AND (f(ARG1) / 2147483647) 191
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
 CBRANCH (2 INT_LESS f())
 CBRANCH (f() INT_NOTEQUAL 3)
(f(ARG1) / 64) INT_RIGHT f(ARG1) 6
(128 | (191 & (f(ARG1) / 2147483647))) INT_OR (191 & (f(ARG1) / 2147483647)) 128
0 INT_NOTEQUAL f() 4
 STORE 433 (f(ARG3) + -1) (128 | (191 & (f(ARG1) / 2147483647)))
(f(ARG3) + -1) PTRADD f(ARG3) -1 1
 CBRANCH (f() INT_NOTEQUAL 4)
(191 & (f(ARG1) / 2147483647)) INT_AND (f(ARG1) / 2147483647) 191
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
0 INT_LESS [f(ARG1)] 128
 CBRANCH (55295 INT_LESS [f(ARG1)])
 CBRANCH (ARG4 INT_LESS (f(ARG3) + f()))
 CBRANCH ([f(ARG1)] INT_LESS 128)
(f(ARG3) + f()) PTRADD f(ARG3) f() 1
0 INT_LESS 55295 [f(ARG1)]
f() INT_ZEXT f()
 CBRANCH (f() INT_EQUAL 1)
 CBRANCH ([f(ARG1)] INT_LESS 65536)
 BRANCH VZERO
0 INT_LESS [f(ARG1)] 1114112
3 COPY 3
 CBRANCH ([f(ARG1)] INT_LESS 2048)
 BRANCH VZERO
0 INT_LESS [f(ARG1)] 65536
2 COPY 2
0 INT_LESS [f(ARG1)] 57344
 CBRANCH ([f(ARG1)] INT_LESS 57344)
 BRANCH VZERO
1 COPY 1
0 INT_LESS [f(ARG1)] 2048
(f(ARG1) / 64) INT_RIGHT f(ARG1) 6
(191 & (f(ARG1) / 2147483647)) INT_AND (f(ARG1) / 2147483647) 191
(f(ARG1) / 2147483647) SUBPIECE f(ARG1) 0
(128 | (191 & (f(ARG1) / 2147483647))) INT_OR (191 & (f(ARG1) / 2147483647)) 128
 STORE 433 ((f(ARG3) + f()) + -1) (128 | (191 & (f(ARG1) / 2147483647)))
((f(ARG3) + f()) + -1) PTRADD (f(ARG3) + f()) -1 1
3 COPY 3
 BRANCH VZERO
0 INT_EQUAL f() 1
0 INT_NOTEQUAL f() 3
f() INT_ZEXT f()
(f(ARG1) + 4) COPY (f(ARG1) + 4)
(f(ARG3) + f()) PTRADD f(ARG3) f() 1
2 COPY 2
((f(ARG3) + f()) + (~(f()) + 1)) PTRADD (f(ARG3) + f()) (~(f()) + 1) 1
 BRANCH VZERO
(~(f()) + 1) INT_2COMP f()
0 INT_EQUAL f() 2
f() INT_ZEXT f()
ARG1 COPY ARG1
 STORE 433 ARG2 [ARG2]
[ARG2] LOAD 433 ARG2
f() CALL func (RSP + -48) (RSP + -56) (RSP + -40) ([ARG2] + 4) 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
[40] LOAD 433 40
0 COPY 0
 CBRANCH ([(FS_OFFSET + 40)] INT_EQUAL [40])
([ARG2] + 4) INT_ADD [ARG2] 4
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -48) PTRSUB RSP -48
(RSP + -60) PTRSUB RSP -60
0 INT_EQUAL [(FS_OFFSET + 40)] [40]
(RSP + -40) PTRSUB RSP -40
40 CAST 40
40 INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 0 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func ARG1 (ARG1 + 24) ARG2 ARG3
(ARG1 + 24) INT_ADD ARG1 24
 RETURN 0
 CALL func ARG1 (ARG2 * 2) 2 (ARG2 * 2)
(ARG2 * 2) INT_MULT ARG2 2
 RETURN 0
(ARG1 + 16) INT_ADD ARG1 16
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] COPY [(ARG1 + 16)]
 RETURN 0 [(ARG1 + 16)]
(ARG1 + 16) CAST (ARG1 + 16)
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
((f() - [ARG1]) / 2) INT_SRIGHT (f() - [ARG1]) 1
(f() - [ARG1]) INT_SUB f() [ARG1]
 RETURN 0 ((f() - [ARG1]) / 2)
(ARG1 + 8) INT_ADD ARG1 8
 STORE 433 (ARG1 + 8) ARG2
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
 RETURN 0
f() CALL func ARG1
 CALL func ARG1 ARG2 ARG2
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 CALL func ARG1 ((ARG2 * 2) + [ARG1]) ((ARG2 * 2) + [ARG1])
(ARG1 + 8) PTRADD ARG1 1 8
 CALL func ARG1 ((ARG2 * 2) + [ARG1]) ((ARG2 * 2) + [ARG1])
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
0 INT_LESS ARG2 (([(ARG1 + 8)] - [ARG1]) / 2)
0 INT_LESS f() ARG2
0 INT_LESS (([(ARG1 + 8)] - [ARG1]) / 2) ARG2
(ARG2 * 2) INT_MULT ARG2 2
(ARG2 * 2) INT_MULT ARG2 2
(ARG2 * 2) INT_MULT ARG2 2
(ARG2 * 2) INT_MULT ARG2 2
 CBRANCH (ARG2 INT_LESS (([(ARG1 + 8)] - [ARG1]) / 2))
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(([(ARG1 + 8)] - [ARG1]) / 2) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 1
(([(ARG1 + 8)] - [ARG1]) / 2) CAST (([(ARG1 + 8)] - [ARG1]) / 2)
 CBRANCH (f(ARG1) INT_NOTEQUAL ([ARG1] + (ARG2 * 2)))
(f(ARG1) + 2) INT_ADD f(ARG1) 2
f(ARG1) CAST f(ARG1)
 BRANCH VZERO
0 INT_NOTEQUAL f(ARG1) 0
f(ARG1) CALL func 2 f(ARG1)
 CBRANCH (f(ARG1) INT_NOTEQUAL 0)
0 INT_NOTEQUAL f(ARG1) ([ARG1] + (ARG2 * 2))
 CALL func ([ARG1] + (ARG2 * 2)) [(ARG1 + 8)] ([ARG1] + (ARG2 * 2)) (ARG2 * 2)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
((ARG2 * 2) + [ARG1]) INT_ADD (ARG2 * 2) [ARG1]
(([(ARG1 + 8)] - [ARG1]) / 2) INT_SRIGHT ([(ARG1 + 8)] - [ARG1]) 1
([ARG1] + (ARG2 * 2)) INT_ADD [ARG1] (ARG2 * 2)
([(ARG1 + 8)] - [ARG1]) INT_SUB [(ARG1 + 8)] [ARG1]
(([(ARG1 + 8)] - [ARG1]) / 2) CAST (([(ARG1 + 8)] - [ARG1]) / 2)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
 CBRANCH ((([(ARG1 + 8)] - [ARG1]) / 2) INT_LESS ARG2)
 CBRANCH (f() INT_LESS ARG2)
([ARG1] + (ARG2 * 2)) INT_ADD [ARG1] (ARG2 * 2)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
((ARG2 * 2) + [ARG1]) INT_ADD (ARG2 * 2) [ARG1]
 STORE 433 f(ARG1) 0
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1 ([(ARG1 + 8)] + -2) ([(ARG1 + 8)] + -2)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0
(ARG1 + 8) CAST (ARG1 + 8)
([(ARG1 + 8)] + -2) INT_ADD [(ARG1 + 8)] -2
(ARG1 + 8) INT_ADD ARG1 8
 CALL func ARG1 ([(ARG1 + 8)] + 2) ([(ARG1 + 8)] + 2)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1 0
[ARG2] LOAD 433 ARG2
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([(ARG1 + 16)] INT_LESSEQUAL [(ARG1 + 8)])
([(ARG1 + 8)] + 2) INT_ADD [(ARG1 + 8)] 2
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 RETURN 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 [(ARG1 + 8)] [ARG2]
(ARG1 + 8) CAST (ARG1 + 8)
0 INT_LESSEQUAL [(ARG1 + 16)] [(ARG1 + 8)]
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 RETURN 0
 CALL func [ARG1] [(ARG1 + 8)] [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (ARG1 + 8) [ARG1]
ARG1 COPY ARG1
[ARG3] LOAD 433 ARG3
 CALL func ARG3 (RSP + -190) (RSP + -190)
(ARG3 + 8) PTRADD ARG3 1 8
(ARG3 + 8) PTRADD ARG3 1 8
ARG3 COPY ARG3
ARG3 COPY ARG3
 CALL func ARG3 (RSP + -176) (RSP + -176)
ARG3 COPY ARG3
ARG3 COPY ARG3
[ARG3] LOAD 433 ARG3
 CALL func ARG3
f() CALL func ARG3
[ARG3] LOAD 433 ARG3
ARG3 COPY ARG3
ARG3 COPY ARG3
 CALL func ARG3 (ARG2 + 1) (ARG2 + 1)
(ARG3 + 8) PTRADD ARG3 1 8
ARG3 COPY ARG3
ARG3 COPY ARG3
ARG3 COPY ARG3
ARG3 COPY ARG3
ARG3 COPY ARG3
ARG3 COPY ARG3
 CALL func ARG3
ARG3 COPY ARG3
[ARG3] LOAD 433 ARG3
 CALL func ARG3 (([ARG3] - [ARG3]) / 2) (([ARG3] - [ARG3]) / 2) ([ARG3] - [ARG3])
[ARG3] LOAD 433 ARG3
 CALL func ARG3
ARG2 COPY ARG2
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL f() 0
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL (([(ARG3 + 8)] - [ARG3]) / 2) 0
(f() + 40) INT_ADD f() 40
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 COPY 0
([(ARG3 + 8)] - [ARG3]) CAST ([(ARG3 + 8)] - [ARG3])
(f() + 40) CAST (f() + 40)
 BRANCH VZERO
0 INT_NOTEQUAL 0 [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
0 COPY 0
(([(ARG3 + 8)] - [ARG3]) / 2) INT_SRIGHT ([(ARG3 + 8)] - [ARG3]) 1
([(ARG3 + 8)] - [ARG3]) INT_SUB [(ARG3 + 8)] [ARG3]
 CBRANCH ((([(ARG3 + 8)] - [ARG3]) / 2) INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 2)
bool llvm::convertUTF8ToUTF16String(llvm::StringRef, llvm::SmallVectorImpl<short unsigned int>&) COPY bool llvm::convertUTF8ToUTF16String(llvm::StringRef, llvm::SmallVectorImpl<short unsigned int>&)
 CALL libcall___assert_fail_thunk CR != targetExhausted /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp 158 bool llvm::convertUTF8ToUTF16String(llvm::StringRef, llvm::SmallVectorImpl<short unsigned int>&)
0 INT_EQUAL f() 0
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp
CR != targetExhausted COPY CR != targetExhausted
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (ARG2 INT_EQUAL 0)
(([(ARG3 + 8)] - [ARG3]) / 2) INT_SRIGHT ([(ARG3 + 8)] - [ARG3]) 1
 CBRANCH ((([(ARG3 + 8)] - [ARG3]) / 2) INT_EQUAL 0)
0 COPY 0
(RSP + -216) PTRSUB RSP -216
0 INT_EQUAL (([(ARG3 + 8)] - [ARG3]) / 2) 0
([(ARG3 + 8)] - [ARG3]) CAST ([(ARG3 + 8)] - [ARG3])
f() CALL func (RSP + -216)
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
([(ARG3 + 8)] - [ARG3]) INT_SUB [(ARG3 + 8)] [ARG3]
(A_Stack[-0xb0]:8 & -65536) INT_AND A_Stack[-0xb0]:8 -65536
(RSP + -216) PTRSUB RSP -216
f() CALL func (RSP + -216)
(ARG2 + 1) INT_ADD ARG2 1
 BRANCH VZERO
(RSP + -176) PTRSUB RSP -176
1 COPY 1
 RETURN 1
0 INT_EQUAL ARG2 0
bool llvm::convertUTF8ToUTF16String(llvm::StringRef, llvm::SmallVectorImpl<short unsigned int>&) COPY bool llvm::convertUTF8ToUTF16String(llvm::StringRef, llvm::SmallVectorImpl<short unsigned int>&)
DstUTF16.empty() COPY DstUTF16.empty()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp
 CALL libcall___assert_fail_thunk DstUTF16.empty() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/ConvertUTFWrapper.cpp 135 bool llvm::convertUTF8ToUTF16String(llvm::StringRef, llvm::SmallVectorImpl<short unsigned int>&)
(([ARG3] - [ARG3]) / 2) INT_SRIGHT ([ARG3] - [ARG3]) 1
([ARG3] - [ARG3]) CAST ([ARG3] - [ARG3])
(([(ARG3 + 8)] - [ARG3]) / 2) INT_SRIGHT ([(ARG3 + 8)] - [ARG3]) 1
([(ARG3 + 8)] - [ARG3]) CAST ([(ARG3 + 8)] - [ARG3])
(RSP + -190) PTRSUB RSP -190
idx < size() COPY idx < size()
0 COPY 0
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
(((([(ARG3 + 8)] - [ARG3]) / 2) * 2) + [ARG3]) INT_ADD ((([(ARG3 + 8)] - [ARG3]) / 2) * 2) [ARG3]
((([(ARG3 + 8)] - [ARG3]) / 2) * 2) INT_MULT (([(ARG3 + 8)] - [ARG3]) / 2) 2
([ARG3] - [ARG3]) INT_SUB [ARG3] [ARG3]
0 COPY 0
([(ARG3 + 8)] - [ARG3]) INT_SUB [(ARG3 + 8)] [ARG3]
(RSP + -184) PTRSUB RSP -184
(RSP + -176) PTRSUB RSP -176
1 COPY 1
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
f() CALL func (RSP + -184) f() (RSP + -176) (((([(ARG3 + 8)] - [ARG3]) / 2) * 2) + [ARG3]) 0
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
0 COPY 0
idx < size() COPY idx < size()
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
 RETURN 1
 RETURN 1
0 INT_EQUAL f() 2
VZERO COPY VZERO
 RETURN 0
 RETURN 0
 CALL func 1 65535
ARG1 CAST ARG1
ARG1 CAST ARG1
ARG1 CAST ARG1
ARG1 CAST ARG1
f(ARG1) CALL func ARG1 ARG2 ARG2
(ARG1 + 24) PTRADD ARG1 3 8
[ARG1] LOAD 433 ARG1
(ARG1 + 24) PTRADD ARG1 3 8
f() CALL func ARG1
ARG1 CAST ARG1
[ARG1] LOAD 433 ARG1
0 INT_EQUAL f(ARG1) ARG2
0 INT_EQUAL f(ARG1) ARG2
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (f(ARG1) INT_EQUAL ARG2)
f() CALL func
(ARG1 + 20) CAST (ARG1 + 20)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
 BRANCH VZERO
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
([(ARG1 + 20)] + 4294967295) INT_ADD [(ARG1 + 20)] 4294967295
(ARG1 + 24) CAST (ARG1 + 24)
(ARG1 + 20) INT_ADD ARG1 20
1 COPY 1
 STORE 433 (ARG1 + 24) ([(ARG1 + 24)] + 1)
(ARG1 + 24) CAST (ARG1 + 24)
(ARG1 + 20) INT_ADD ARG1 20
 STORE 433 f(ARG1) f()
 STORE 433 (ARG1 + 20) ([(ARG1 + 20)] + 4294967295)
0 COPY 0
(ARG1 + 20) CAST (ARG1 + 20)
([(ARG1 + 24)] + 1) INT_ADD [(ARG1 + 24)] 1
 CBRANCH (f(ARG1) INT_NOTEQUAL ([ARG1] + ([(ARG1 + 20)] * 8)))
0 COPY 0
f(ARG1) LOAD 433 f(ARG1)
 RETURN 0 f()
 RETURN 0 1
 BRANCH VZERO
1 COPY 1
 CBRANCH (f(ARG1) INT_EQUAL ARG2)
[(([ARG1] + ([(ARG1 + 20)] * 8)) + -8)] LOAD 433 (([ARG1] + ([(ARG1 + 20)] * 8)) + -8)
 BRANCH VZERO
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 20) INT_ADD ARG1 20
(([ARG1] + ([(ARG1 + 20)] * 8)) + -8) PTRADD ([ARG1] + ([(ARG1 + 20)] * 8)) -1 8
0 INT_NOTEQUAL f(ARG1) ([ARG1] + ([(ARG1 + 20)] * 8))
 STORE 433 f(ARG1) [(([ARG1] + ([(ARG1 + 20)] * 8)) + -8)]
([(ARG1 + 20)] + 4294967295) INT_ADD [(ARG1 + 20)] 4294967295
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
(ARG1 + 20) CAST (ARG1 + 20)
(([ARG1] + ([(ARG1 + 20)] * 8)) + -8) PTRADD ([ARG1] + ([(ARG1 + 20)] * 8)) -1 8
(ARG1 + 20) CAST (ARG1 + 20)
f() CALL func
 STORE 433 (([ARG1] + ([(ARG1 + 20)] * 8)) + -8) f()
 STORE 433 (ARG1 + 20) ([(ARG1 + 20)] + 4294967295)
([ARG1] + ([(ARG1 + 20)] * 8)) PTRADD [ARG1] [(ARG1 + 20)] 8
[(ARG1 + 20)] LOAD 433 (ARG1 + 20)
(ARG1 + 20) CAST (ARG1 + 20)
f(ARG1) LOAD 433 f(ARG1)
[(ARG1 + 20)] INT_ZEXT [(ARG1 + 20)]
(ARG1 + 20) INT_ADD ARG1 20
f(ARG1) CAST f(ARG1)
 STORE 433 ARG1 ARG2
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
ARG2 LOAD 433 ARG1
ARG1 CAST ARG1
f() CALL func ARG3
(ARG3 + 16) INT_ADD ARG3 16
(ARG3 + 16) INT_ADD ARG3 16
(ARG3 + 24) INT_ADD ARG3 24
(ARG3 + 20) INT_ADD ARG3 20
(ARG3 + 8) INT_ADD ARG3 8
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
[(ARG1 + 8)] CAST [(ARG1 + 8)]
 STORE 433 (ARG1 + 16) [(ARG3 + 16)]
CurArray && "Failed to allocate memory?" COPY CurArray && "Failed to allocate memory?"
 STORE 433 (ARG1 + 24) [(ARG3 + 24)]
llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(const void**, const llvm::SmallPtrSetImplBase&) COPY llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(const void**, const llvm::SmallPtrSetImplBase&)
([(ARG1 + 16)] * 8) INT_MULT [(ARG1 + 16)] 8
(ARG1 + 20) INT_ADD ARG1 20
(ARG3 + 8) CAST (ARG3 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG3 + 16)] LOAD 433 (ARG3 + 16)
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
[(ARG3 + 24)] LOAD 433 (ARG3 + 24)
 STORE 433 (ARG1 + 20) [(ARG3 + 20)]
(ARG1 + 24) CAST (ARG1 + 24)
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
(ARG1 + 16) CAST (ARG1 + 16)
(ARG3 + 24) CAST (ARG3 + 24)
[(ARG3 + 20)] LOAD 433 (ARG3 + 20)
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 20) CAST (ARG1 + 20)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CALL libcall_memcpy_thunk [(ARG1 + 8)] [(ARG3 + 8)] ([(ARG1 + 16)] * 8)
(ARG3 + 16) CAST (ARG3 + 16)
 RETURN 0
(ARG3 + 20) CAST (ARG3 + 20)
 CALL libcall___assert_fail_thunk CurArray && "Failed to allocate memory?" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp 179 llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(const void**, const llvm::SmallPtrSetImplBase&)
 RETURN 1
 STORE 433 (ARG1 + 8) f()
f() CALL libcall_malloc_thunk ([(ARG3 + 16)] * 8)
[(ARG3 + 16)] LOAD 433 (ARG3 + 16)
 BRANCH VZERO
0 INT_EQUAL [(ARG1 + 8)] 0
([(ARG3 + 16)] * 8) INT_LEFT [(ARG3 + 16)] 3
 STORE 433 (ARG1 + 8) ARG2
[(ARG3 + 16)] INT_ZEXT [(ARG3 + 16)]
(ARG3 + 16) CAST (ARG3 + 16)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 CAST ARG1
(ARG1 + 24) PTRADD ARG1 3 8
ARG2 LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 ARG2
(ARG1 + 16) PTRADD ARG1 2 8
(ARG4 + 8) PTRADD ARG4 1 8
[ARG4] LOAD 433 ARG4
(ARG4 + 24) PTRADD ARG4 3 8
(ARG4 + 8) PTRADD ARG4 1 8
ARG4 CAST ARG4
(ARG4 + 16) PTRADD ARG4 2 8
[ARG4] LOAD 433 ARG4
f() CALL func ARG4
(ARG4 + 8) PTRADD ARG4 1 8
(ARG4 + 16) PTRADD ARG4 2 8
(ARG4 + 8) PTRADD ARG4 1 8
ARG4 CAST ARG4
(ARG4 + 24) PTRADD ARG4 3 8
 STORE 433 (ARG4 + 16) ARG3
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_NOTEQUAL [(ARG4 + 8)] [ARG4]
(ARG4 + 16) CAST (ARG4 + 16)
(ARG1 + 24) CAST (ARG1 + 24)
(ARG4 + 20) INT_ADD ARG4 20
 CBRANCH ([(ARG4 + 8)] INT_NOTEQUAL [ARG4])
 STORE 433 (ARG1 + 20) [(ARG4 + 20)]
(ARG4 + 24) CAST (ARG4 + 24)
(ARG1 + 20) CAST (ARG1 + 20)
[(ARG4 + 20)] LOAD 433 (ARG4 + 20)
 STORE 433 (ARG1 + 16) [(ARG4 + 16)]
(ARG4 + 20) CAST (ARG4 + 20)
[(ARG4 + 8)] LOAD 433 (ARG4 + 8)
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG4 + 16)] LOAD 433 (ARG4 + 16)
 STORE 433 (ARG1 + 24) [(ARG4 + 24)]
(ARG4 + 16) CAST (ARG4 + 16)
(ARG1 + 20) INT_ADD ARG1 20
[(ARG4 + 24)] LOAD 433 (ARG4 + 24)
[(ARG4 + 8)] LOAD 433 (ARG4 + 8)
 BRANCH VZERO
 CALL libcall_memcpy_thunk [(ARG1 + 8)] [(ARG4 + 8)] ([(ARG1 + 16)] * 8)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
 STORE 433 (ARG1 + 8) [(ARG4 + 8)]
 STORE 433 (ARG1 + 8) ARG2
[(ARG4 + 8)] CAST [(ARG4 + 8)]
 STORE 433 (ARG4 + 8) [ARG4]
[(ARG4 + 8)] LOAD 433 (ARG4 + 8)
[(ARG1 + 8)] CAST [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 16)] * 8) INT_MULT [(ARG1 + 16)] 8
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG4 + 24) 0
(ARG4 + 20) INT_ADD ARG4 20
llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(const void**, unsigned int, llvm::SmallPtrSetImplBase&&) COPY llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(const void**, unsigned int, llvm::SmallPtrSetImplBase&&)
(ARG4 + 20) CAST (ARG4 + 20)
 RETURN 0
 STORE 433 (ARG4 + 20) 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
that.CurArray == that.SmallArray COPY that.CurArray == that.SmallArray
(ARG4 + 24) CAST (ARG4 + 24)
 CALL libcall___assert_fail_thunk that.CurArray == that.SmallArray /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp 214 llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(const void**, unsigned int, llvm::SmallPtrSetImplBase&&)
 RETURN 1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 24) PTRADD ARG1 3 8
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
0 INT_EQUAL ARG2 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG2 + 16) PTRADD ARG2 2 8
(ARG2 + 16) PTRADD ARG2 2 8
f() CALL func ARG2
f() CALL func ARG2
(ARG2 + 24) PTRADD ARG2 3 8
ARG2 CAST ARG2
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 16) PTRADD ARG2 2 8
(ARG2 + 16) PTRADD ARG2 2 8
(ARG2 + 16) PTRADD ARG2 2 8
 CBRANCH (ARG2 INT_EQUAL ARG1)
 CBRANCH (f() INT_NOTEQUAL 1)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL libcall_free_thunk [(ARG1 + 8)]
[(ARG1 + 8)] CAST [(ARG1 + 8)]
 CBRANCH (f() INT_EQUAL 0)
[(ARG1 + 8)] CAST [(ARG1 + 8)]
 CALL libcall_free_thunk [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH f()
0 INT_EQUAL f() 0
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
 CBRANCH (f() INT_EQUAL 0)
(ARG2 + 16) CAST (ARG2 + 16)
 CBRANCH ([(ARG1 + 16)] INT_NOTEQUAL [(ARG2 + 16)])
0 INT_NOTEQUAL [(ARG1 + 16)] [(ARG2 + 16)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_NOTEQUAL f() 1
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
([(ARG1 + 16)] * 8) INT_MULT [(ARG1 + 16)] 8
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 20) INT_ADD ARG1 20
(ARG1 + 20) CAST (ARG1 + 20)
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
 BRANCH VZERO
(ARG2 + 16) CAST (ARG2 + 16)
(ARG2 + 20) CAST (ARG2 + 20)
(ARG2 + 16) CAST (ARG2 + 16)
 STORE 433 (ARG1 + 8) [ARG1]
(ARG2 + 20) INT_ADD ARG2 20
 STORE 433 (ARG1 + 20) [(ARG2 + 20)]
(ARG1 + 16) CAST (ARG1 + 16)
 CBRANCH ([(ARG1 + 16)] INT_NOTEQUAL [(ARG2 + 16)])
0 INT_NOTEQUAL [(ARG1 + 16)] [(ARG2 + 16)]
 RETURN 0
[(ARG2 + 20)] LOAD 433 (ARG2 + 20)
[(ARG1 + 8)] CAST [(ARG1 + 8)]
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
[(ARG2 + 8)] CAST [(ARG2 + 8)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CALL libcall_memcpy_thunk [(ARG1 + 8)] [(ARG2 + 8)] ([(ARG1 + 16)] * 8)
 STORE 433 (ARG1 + 16) [(ARG2 + 16)]
 STORE 433 (ARG1 + 24) [(ARG2 + 24)]
(ARG1 + 24) CAST (ARG1 + 24)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 16) CAST (ARG1 + 16)
(ARG2 + 24) CAST (ARG2 + 24)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_realloc_thunk [(ARG1 + 8)] ([(ARG2 + 16)] * 8)
([(ARG2 + 16)] * 8) INT_LEFT [(ARG2 + 16)] 3
(ARG2 + 16) CAST (ARG2 + 16)
(ARG2 + 16) CAST (ARG2 + 16)
f() CALL libcall_malloc_thunk ([(ARG2 + 16)] * 8)
[(ARG2 + 16)] INT_ZEXT [(ARG2 + 16)]
([(ARG2 + 16)] * 8) INT_MULT [(ARG2 + 16)] 8
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
0 INT_EQUAL f() 0
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
[(ARG1 + 8)] CAST [(ARG1 + 8)]
[(ARG2 + 16)] INT_ZEXT [(ARG2 + 16)]
 STORE 433 (ARG1 + 8) f()
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
 STORE 433 (ARG1 + 8) f()
1 COPY 1
 BRANCH VZERO
 CALL libcall___assert_fail_thunk &RHS != this && "Self-copy should be handled by the caller." /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp 222 void llvm::SmallPtrSetImplBase::CopyFrom(const llvm::SmallPtrSetImplBase&)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
0 INT_NOTEQUAL f() 0
 RETURN 1
&RHS != this && "Self-copy should be handled by the caller." COPY &RHS != this && "Self-copy should be handled by the caller."
void llvm::SmallPtrSetImplBase::CopyFrom(const llvm::SmallPtrSetImplBase&) COPY void llvm::SmallPtrSetImplBase::CopyFrom(const llvm::SmallPtrSetImplBase&)
 CALL libcall___assert_fail_thunk CurArraySize == RHS.CurArraySize && "Cannot assign sets with different small sizes" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp 226 void llvm::SmallPtrSetImplBase::CopyFrom(const llvm::SmallPtrSetImplBase&)
 RETURN 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
void llvm::SmallPtrSetImplBase::CopyFrom(const llvm::SmallPtrSetImplBase&) COPY void llvm::SmallPtrSetImplBase::CopyFrom(const llvm::SmallPtrSetImplBase&)
CurArraySize == RHS.CurArraySize && "Cannot assign sets with different small sizes" COPY CurArraySize == RHS.CurArraySize && "Cannot assign sets with different small sizes"
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
 RETURN 1
 CALL libcall___assert_fail_thunk CurArray && "Failed to allocate memory?" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp 244 void llvm::SmallPtrSetImplBase::CopyFrom(const llvm::SmallPtrSetImplBase&)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
CurArray && "Failed to allocate memory?" COPY CurArray && "Failed to allocate memory?"
void llvm::SmallPtrSetImplBase::CopyFrom(const llvm::SmallPtrSetImplBase&) COPY void llvm::SmallPtrSetImplBase::CopyFrom(const llvm::SmallPtrSetImplBase&)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_EQUAL f() 0
0 INT_EQUAL [(ARG1 + 8)] 0
[ARG1] LOAD 433 ARG1
(ARG1 + 24) PTRADD ARG1 3 8
ARG1 CAST ARG1
(ARG1 + 8) PTRADD ARG1 1 8
0 INT_EQUAL ARG3 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG3 + 8) PTRADD ARG3 1 8
ARG3 CAST ARG3
ARG3 CAST ARG3
(ARG3 + 8) PTRADD ARG3 1 8
(ARG3 + 24) PTRADD ARG3 3 8
(ARG3 + 16) PTRADD ARG3 2 8
(ARG3 + 16) PTRADD ARG3 2 8
f() CALL func ARG3
[ARG3] LOAD 433 ARG3
[ARG3] LOAD 433 ARG3
(ARG3 + 8) PTRADD ARG3 1 8
(ARG3 + 24) PTRADD ARG3 3 8
(ARG3 + 8) PTRADD ARG3 1 8
(ARG3 + 16) PTRADD ARG3 2 8
 STORE 433 (ARG3 + 16) ARG2
 CBRANCH (ARG3 INT_EQUAL ARG1)
 CBRANCH (f() INT_NOTEQUAL 1)
[(ARG1 + 8)] CAST [(ARG1 + 8)]
 CALL libcall_free_thunk [(ARG1 + 8)]
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CALL libcall___assert_fail_thunk &RHS != this && "Self-move should be handled by the caller." /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp 259 void llvm::SmallPtrSetImplBase::MoveFrom(unsigned int, llvm::SmallPtrSetImplBase&&)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
 RETURN 1
[(ARG3 + 16)] LOAD 433 (ARG3 + 16)
 STORE 433 (ARG1 + 24) [(ARG3 + 24)]
 CBRANCH ([(ARG3 + 8)] INT_NOTEQUAL [ARG3])
(ARG1 + 16) CAST (ARG1 + 16)
0 INT_NOTEQUAL [(ARG3 + 8)] [ARG3]
(ARG1 + 20) INT_ADD ARG1 20
0 INT_NOTEQUAL f() 1
(ARG3 + 16) CAST (ARG3 + 16)
0 INT_EQUAL f() 0
[(ARG3 + 24)] LOAD 433 (ARG3 + 24)
 CBRANCH (f() INT_EQUAL 0)
(ARG3 + 16) CAST (ARG3 + 16)
 STORE 433 (ARG1 + 20) [(ARG3 + 20)]
(ARG3 + 20) INT_ADD ARG3 20
(ARG1 + 24) CAST (ARG1 + 24)
(ARG3 + 24) CAST (ARG3 + 24)
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
[(ARG3 + 20)] LOAD 433 (ARG3 + 20)
(ARG1 + 20) CAST (ARG1 + 20)
void llvm::SmallPtrSetImplBase::MoveFrom(unsigned int, llvm::SmallPtrSetImplBase&&) COPY void llvm::SmallPtrSetImplBase::MoveFrom(unsigned int, llvm::SmallPtrSetImplBase&&)
(ARG3 + 20) CAST (ARG3 + 20)
 STORE 433 (ARG1 + 16) [(ARG3 + 16)]
&RHS != this && "Self-move should be handled by the caller." COPY &RHS != this && "Self-move should be handled by the caller."
void llvm::SmallPtrSetImplBase::MoveFrom(unsigned int, llvm::SmallPtrSetImplBase&&) COPY void llvm::SmallPtrSetImplBase::MoveFrom(unsigned int, llvm::SmallPtrSetImplBase&&)
 CALL libcall___assert_fail_thunk RHS.CurArray == RHS.SmallArray /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp 280 void llvm::SmallPtrSetImplBase::MoveFrom(unsigned int, llvm::SmallPtrSetImplBase&&)
RHS.CurArray == RHS.SmallArray COPY RHS.CurArray == RHS.SmallArray
 STORE 433 (ARG3 + 24) 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
(ARG3 + 20) INT_ADD ARG3 20
 STORE 433 (ARG3 + 20) 0
 RETURN 0
(ARG3 + 24) CAST (ARG3 + 24)
 RETURN 1
(ARG3 + 20) CAST (ARG3 + 20)
 STORE 433 (ARG1 + 8) [ARG1]
[(ARG1 + 8)] CAST [(ARG1 + 8)]
(ARG3 + 16) CAST (ARG3 + 16)
 STORE 433 (ARG3 + 8) [ARG3]
[(ARG3 + 16)] INT_ZEXT [(ARG3 + 16)]
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(ARG3 + 8)] CAST [(ARG3 + 8)]
 BRANCH VZERO
([(ARG3 + 16)] * 8) INT_MULT [(ARG3 + 16)] 8
[(ARG3 + 8)] LOAD 433 (ARG3 + 8)
 STORE 433 (ARG1 + 8) [(ARG3 + 8)]
[(ARG3 + 16)] LOAD 433 (ARG3 + 16)
 CALL libcall_memcpy_thunk [(ARG1 + 8)] [(ARG3 + 8)] ([(ARG3 + 16)] * 8)
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 [f(ARG2)]
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
 STORE 433 ARG2 [f(RSP)]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f(RSP) CAST f(RSP)
[f(ARG2)] LOAD 433 f(ARG2)
[40] LOAD 433 40
f(ARG1) CAST f(ARG1)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -20) PTRSUB RSP -20
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
f(RSP) CALL func (RSP + -20)
[f(RSP)] LOAD 433 f(RSP)
[f(ARG1)] LOAD 433 f(ARG1)
f(ARG2) CAST f(ARG2)
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) CALL func ARG1
 STORE 433 ARG1 [f(ARG2)]
 STORE 433 ARG2 [f(RSP)]
f(ARG2) CALL func ARG2
f(ARG1) CAST f(ARG1)
[f(ARG1)] LOAD 433 f(ARG1)
40 CAST 40
f(RSP) CALL func (RSP + -24)
[40] LOAD 433 40
(FS_OFFSET + 40) INT_ADD 0 40
[f(ARG2)] LOAD 433 f(ARG2)
(RSP + -24) PTRSUB RSP -24
[f(RSP)] LOAD 433 f(RSP)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f(ARG2) CAST f(ARG2)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
f(RSP) CAST f(RSP)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1
 RETURN 0
ARG1 CAST ARG1
 CALL libcall_memmove_thunk ARG3 ARG1 (((ARG2 - ARG1) / 8) * 8)
(ARG2 - ARG1) INT_SUB ARG2 ARG1
ARG3 CAST ARG3
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
 RETURN 0 (ARG3 + (((ARG2 - ARG1) / 8) * 8))
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) CAST (ARG3 + (((ARG2 - ARG1) / 8) * 8))
(ARG3 + (((ARG2 - ARG1) / 8) * 8)) INT_ADD ARG3 (((ARG2 - ARG1) / 8) * 8)
 CBRANCH (((ARG2 - ARG1) / 8) INT_NOTEQUAL 0)
((ARG2 - ARG1) / 8) INT_SRIGHT (ARG2 - ARG1) 3
0 INT_NOTEQUAL ((ARG2 - ARG1) / 8) 0
(((ARG2 - ARG1) / 8) * 8) INT_MULT ((ARG2 - ARG1) / 8) 8
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
f() CALL func ARG3
 CALL func f() f() f()
 RETURN 0
f() CALL func ARG1
f() CALL func ARG2
 CALL func f() f() ARG3 f()
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 [f(ARG2)]
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
 STORE 433 ARG2 [f(RSP)]
[40] LOAD 433 40
f(RSP) CALL func (RSP + -24)
[f(RSP)] LOAD 433 f(RSP)
(RSP + -24) PTRSUB RSP -24
(FS_OFFSET + 40) INT_ADD 0 40
[f(ARG2)] LOAD 433 f(ARG2)
40 CAST 40
f(ARG1) CAST f(ARG1)
[f(ARG1)] LOAD 433 f(ARG1)
f(ARG2) CAST f(ARG2)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
f(RSP) CAST f(RSP)
40 INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 CALL func ARG1 ARG2 ARG2
 RETURN 0
ARG1 COPY ARG1
0 INT_NOTEQUAL f(ARG1) ARG2
ARG3 COPY ARG3
 CBRANCH (f(ARG1) INT_NOTEQUAL ARG2)
f(ARG3) COPY f(ARG3)
 RETURN 0 f(ARG3)
 CALL func f(ARG1) f(ARG3) f(ARG3)
(f(ARG1) + 8) INT_ADD f(ARG1) 8
(f(ARG3) + 8) INT_ADD f(ARG3) 8
 BRANCH VZERO
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 24) PTRADD ARG1 3 8
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 24) PTRADD ARG1 3 8
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 CAST ARG1
f() CALL func ARG1
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 24) PTRADD ARG1 3 8
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1
ARG1 CAST ARG1
(ARG1 + 16) PTRADD ARG1 2 8
ARG1 CAST ARG1
(ARG1 + 8) PTRADD ARG1 1 8
0 INT_EQUAL ARG1 ARG2
[ARG1] LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 24) PTRADD ARG1 3 8
(ARG2 + 16) PTRADD ARG2 2 8
[ARG2] LOAD 433 ARG2
(ARG2 + 8) PTRADD ARG2 1 8
ARG2 CAST ARG2
(ARG2 + 24) PTRADD ARG2 3 8
[ARG2] LOAD 433 ARG2
(ARG2 + 24) PTRADD ARG2 3 8
ARG2 CAST ARG2
[ARG2] LOAD 433 ARG2
[ARG2] LOAD 433 ARG2
(ARG2 + 16) PTRADD ARG2 2 8
f() CALL func ARG2
(ARG2 + 16) PTRADD ARG2 2 8
f() CALL func ARG2
(ARG2 + 8) PTRADD ARG2 1 8
(ARG2 + 16) PTRADD ARG2 2 8
(ARG2 + 8) PTRADD ARG2 1 8
ARG2 CAST ARG2
ARG2 CAST ARG2
f() CALL func ARG2
(ARG2 + 24) PTRADD ARG2 3 8
(ARG2 + 24) PTRADD ARG2 3 8
[ARG2] LOAD 433 ARG2
f() CALL func ARG2
(ARG2 + 16) PTRADD ARG2 2 8
(ARG2 + 8) PTRADD ARG2 1 8
 CBRANCH (ARG1 INT_EQUAL ARG2)
 CBRANCH (f() INT_EQUAL 1)
 CBRANCH (f() INT_EQUAL 1)
0 COPY 0
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
this->isSmall() && RHS.isSmall() COPY this->isSmall() && RHS.isSmall()
0 INT_EQUAL f() 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
 CBRANCH (f() INT_EQUAL 1)
 CALL libcall___assert_fail_thunk this->isSmall() && RHS.isSmall() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp 328 void llvm::SmallPtrSetImplBase::swap(llvm::SmallPtrSetImplBase&)
void llvm::SmallPtrSetImplBase::swap(llvm::SmallPtrSetImplBase&) COPY void llvm::SmallPtrSetImplBase::swap(llvm::SmallPtrSetImplBase&)
 RETURN 1
 CBRANCH ([(ARG1 + 16)] INT_EQUAL [(ARG2 + 16)])
(ARG1 + 16) CAST (ARG1 + 16)
(ARG2 + 20) INT_ADD ARG2 20
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp
void llvm::SmallPtrSetImplBase::swap(llvm::SmallPtrSetImplBase&) COPY void llvm::SmallPtrSetImplBase::swap(llvm::SmallPtrSetImplBase&)
this->CurArraySize == RHS.CurArraySize COPY this->CurArraySize == RHS.CurArraySize
([(ARG1 + 16)] * 8) INT_MULT [(ARG1 + 16)] 8
 CALL libcall___assert_fail_thunk this->CurArraySize == RHS.CurArraySize /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/SmallPtrSet.cpp 329 void llvm::SmallPtrSetImplBase::swap(llvm::SmallPtrSetImplBase&)
 RETURN 0
 RETURN 1
 CALL func [ARG1] ([ARG1] + ([(ARG1 + 16)] * 8)) [ARG2] ([ARG1] + ([(ARG1 + 16)] * 8))
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
([ARG1] + ([(ARG1 + 16)] * 8)) INT_ADD [ARG1] ([(ARG1 + 16)] * 8)
 CALL func (ARG1 + 20) (ARG2 + 20) (ARG2 + 20)
 RETURN 0
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
 RETURN 0
 RETURN 0
 RETURN 0
(ARG1 + 20) INT_ADD ARG1 20
1 COPY 1
 BRANCH VZERO
0 INT_EQUAL f() 1
 CBRANCH f()
0 INT_EQUAL [(ARG1 + 16)] [(ARG2 + 16)]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG2 + 16) CAST (ARG2 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
0 INT_EQUAL f() 1
 CBRANCH (f() INT_EQUAL 1)
 CBRANCH f()
(ARG1 + 24) CAST (ARG1 + 24)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_EQUAL f() 0
([ARG2] + ([(ARG2 + 16)] * 8)) INT_ADD [ARG2] ([(ARG2 + 16)] * 8)
 CALL func (ARG1 + 20) (ARG2 + 20) (ARG2 + 20)
 STORE 433 (ARG1 + 8) [ARG1]
[(ARG2 + 16)] LOAD 433 (ARG2 + 16)
(ARG2 + 16) CAST (ARG2 + 16)
(ARG1 + 20) INT_ADD ARG1 20
 CALL func (ARG1 + 16) (ARG2 + 16) (ARG2 + 16)
(ARG2 + 20) INT_ADD ARG2 20
 STORE 433 (ARG2 + 24) [(ARG1 + 24)]
(ARG2 + 24) CAST (ARG2 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
([(ARG2 + 16)] * 8) INT_MULT [(ARG2 + 16)] 8
~(f()) BOOL_NEGATE f()
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
 STORE 433 (ARG1 + 24) 0
 STORE 433 (ARG2 + 8) [(ARG1 + 8)]
[(ARG2 + 16)] INT_ZEXT [(ARG2 + 16)]
 CALL func [ARG2] ([ARG2] + ([(ARG2 + 16)] * 8)) [ARG1] ([ARG2] + ([(ARG2 + 16)] * 8))
 CBRANCH ~(f())
 CBRANCH (f() INT_EQUAL 1)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
(ARG1 + 20) INT_ADD ARG1 20
0 INT_EQUAL f() 1
 CALL func (ARG1 + 24) (ARG2 + 24) (ARG2 + 24)
 CALL func (ARG1 + 16) (ARG2 + 16) (ARG2 + 16)
(ARG2 + 20) INT_ADD ARG2 20
 CALL func (ARG1 + 20) (ARG2 + 20) (ARG2 + 20)
 CALL func (ARG1 + 8) (ARG2 + 8) (ARG2 + 8)
 STORE 433 (ARG2 + 24) 0
(ARG2 + 24) CAST (ARG2 + 24)
 STORE 433 (ARG2 + 8) [ARG2]
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
([(ARG1 + 16)] * 8) INT_MULT [(ARG1 + 16)] 8
[(ARG1 + 16)] INT_ZEXT [(ARG1 + 16)]
 STORE 433 (ARG1 + 8) [(ARG2 + 8)]
[(ARG2 + 8)] LOAD 433 (ARG2 + 8)
(ARG2 + 24) CAST (ARG2 + 24)
 CALL func (ARG2 + 16) (ARG1 + 16) (ARG1 + 16)
 STORE 433 (ARG1 + 24) [(ARG2 + 24)]
[(ARG2 + 24)] LOAD 433 (ARG2 + 24)
(ARG1 + 24) CAST (ARG1 + 24)
 CALL func (ARG2 + 20) (ARG1 + 20) (ARG1 + 20)
(ARG1 + 20) INT_ADD ARG1 20
(ARG2 + 20) INT_ADD ARG2 20
0 INT_EQUAL f() 1
([ARG1] + ([(ARG1 + 16)] * 8)) INT_ADD [ARG1] ([(ARG1 + 16)] * 8)
 CALL func [ARG1] ([ARG1] + ([(ARG1 + 16)] * 8)) [ARG2] ([ARG1] + ([(ARG1 + 16)] * 8))
 RETURN 0
VZERO COPY VZERO
 CALL func 1 65535
 RETURN 0
0 INT_EQUAL ARG2 0
 CALL func ARG1 ARG2 ARG2
(ARG1 + 16) PTRADD ARG1 2 8
ARG1 CAST ARG1
ARG1 CAST ARG1
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 0
 STORE 433 (ARG1 + 20) ARG3
(ARG1 + 20) CAST (ARG1 + 20)
(ARG1 + 20) INT_ADD ARG1 20
 RETURN 0
 CBRANCH (ARG2 INT_EQUAL 0)
 STORE 433 (ARG1 + 12) 0
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 12) CAST (ARG1 + 12)
 STORE 433 (ARG1 + 16) 0
(ARG1 + 12) INT_ADD ARG1 12
 BRANCH VZERO
 STORE 433 (ARG1 + 8) 0
f() CALL libcall_read_thunk A_Stack[-0x74]:4 ARG1 ARG2
(RSP + -88) PTRSUB RSP -88
f() CALL func
0 COPY 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
f() CALL func (RSP + -88) (RSP + -116) (RSP + -116)
(RSP + -88) PTRSUB RSP -88
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CALL func (RSP + -88) /proc/cpuinfo
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
 CBRANCH (f() INT_EQUAL 0)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -116) PTRSUB RSP -116
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) CAST (f() + 40)
/proc/cpuinfo COPY /proc/cpuinfo
0 INT_EQUAL f() 0
 CBRANCH (VZERO INT_EQUAL 0)
0 COPY 0
host-detection COPY host-detection
 CBRANCH (f() INT_EQUAL 0)
f() CALL func host-detection
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
-1 COPY -1
f() CALL libcall_close_thunk A_Stack[-0x74]:4
 CBRANCH f()
0 INT_EQUAL VZERO 0
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() 0
(f() / 2147483647) INT_SEXT (f() / 2147483647)
 BRANCH VZERO
-1 COPY -1
 RETURN 1
f() COPY f()
 CALL libcall___stack_chk_fail_thunk
f() COPY f()
 RETURN 0 f()
 CALL libcall_~basic_string_thunk (RSP + -56)
f() CALL func f() Unable to open /proc/cpuinfo: 
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) (RSP + -104) (RSP + -104)
Unable to open /proc/cpuinfo:  COPY Unable to open /proc/cpuinfo: 
(RSP + -56) PTRSUB RSP -56
f() CALL func f() (RSP + -56) f()
4720423 PTRSUB 0 4720423
(RSP + -56) PTRSUB RSP -56
(RSP + -104) PTRSUB RSP -104
 CALL func f() 4720423
f() CALL func
 BRANCH VZERO
1 COPY 1
[ARG1] LOAD 433 ARG1
 RETURN 0 [[ARG1]]
[[ARG1]] LOAD 433 [ARG1]
[[ARG1]] COPY [[ARG1]]
[ARG1] CAST [ARG1]
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
 STORE 433 ARG1 [f(ARG2)]
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
 STORE 433 (ARG1 + 8) [(f(ARG2) + 8)]
(f(ARG2) + 8) PTRADD f(ARG2) 1 8
 RETURN 0
[f(ARG3)] LOAD 433 f(ARG3)
f(ARG3) CAST f(ARG3)
f(ARG2) CAST f(ARG2)
[f(ARG2)] LOAD 433 f(ARG2)
 STORE 433 (ARG1 + 16) [f(ARG3)]
(ARG1 + 16) CAST (ARG1 + 16)
[(f(ARG2) + 8)] LOAD 433 (f(ARG2) + 8)
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
 CALL func ARG1 f(ARG2) f(ARG3) f(ARG2)
ARG1 COPY ARG1
 RETURN 0 ARG1
f(ARG1) LOAD 433 ARG1
f(ARG1) LOAD 433 ARG1
f(ARG1) LOAD 433 ARG1
 STORE 433 ARG1 (f(ARG1) + 8)
~(f()) BOOL_NEGATE f()
 RETURN 0
 CBRANCH ~(f())
0 INT_EQUAL [[ARG1]] 0
[[ARG1]] LOAD 433 f(ARG1)
 CBRANCH ([[ARG1]] INT_EQUAL 0)
(f(ARG1) + 8) PTRADD f(ARG1) 1 8
 BRANCH VZERO
 CBRANCH ([[ARG1]] INT_EQUAL f())
1 COPY 1
0 COPY 0
 BRANCH VZERO
0 INT_EQUAL [[ARG1]] f()
f() CALL func
[[ARG1]] LOAD 433 f(ARG1)
 STORE 433 ARG1 ARG2
0 INT_NOTEQUAL ARG3 1
 CALL func ARG1
 RETURN 0
 CBRANCH (ARG3 INT_NOTEQUAL 1)
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
 STORE 433 ARG1 [f(ARG2)]
(ARG1 + 8) PTRADD ARG1 1 8
f(ARG2) CALL func ARG2
f(ARG3) CALL func ARG3
f(ARG2) CAST f(ARG2)
(ARG1 + 8) CAST (ARG1 + 8)
f(ARG3) CAST f(ARG3)
 STORE 433 (ARG1 + 8) [f(ARG3)]
[f(ARG3)] LOAD 433 f(ARG3)
[f(ARG2)] LOAD 433 f(ARG2)
 RETURN 0
f(ARG1) CALL func ARG1
f(ARG2) CALL func ARG2
40 INT_ADD 0 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -56) f(ARG1) f(ARG2) f(ARG1)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 CAST 40
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
(RSP + -56) PTRSUB RSP -56
 RETURN 1
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
4 COPY 4
 RETURN 0 4
 CALL func ARG1 ARG2 ARG2
(ARG1 + 4) INT_ADD ARG1 4
f(ARG3) CALL func ARG3
 STORE 433 (ARG1 + 4) [f(ARG3)]
[f(ARG3)] LOAD 433 f(ARG3)
(ARG1 + 4) CAST (ARG1 + 4)
 RETURN 0
f(ARG3) CAST f(ARG3)
(ARG1 + 8) INT_ADD ARG1 8
 RETURN 0 (ARG1 + 8)
f(ARG4) CALL func ARG4
 CALL func f() ARG2 f(ARG4) ARG2
ARG2 INT_ZEXT ARG2
ARG2 INT_ZEXT ARG2
(ARG2 + 9) INT_ADD ARG2 9
0 INT_NOTEQUAL ARG2 0
 CALL libcall_memcpy_thunk f() ARG1 ARG2
f() CALL func ARG3 (ARG2 + 9) f() (ARG2 + 9)
 STORE 433 (ARG2 + f()) 0
 CBRANCH (ARG2 INT_NOTEQUAL 0)
f() CALL func
f() COPY f()
(ARG2 + f()) INT_ADD f() ARG2
f() CAST f()
(ARG2 + f()) CAST (ARG2 + f())
f() CALL func f()
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
f() CAST f()
f() CALL func 8 f()
 RETURN 0 f()
ARG1 CAST ARG1
ARG1 CAST ARG1
[ARG1] LOAD 433 ARG1
f(ARG1) CALL func ARG1 f(ARG1) f(ARG1)
ARG1 CAST ARG1
f(ARG1) CALL func ARG1 A_Stack[0x8]:8 A_Stack[0x10]:8 A_Stack[0x8]:8
[ARG1] LOAD 433 ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
[ARG1] LOAD 433 ARG1
(ARG1 + 24) PTRADD ARG1 3 8
 CBRANCH ([([ARG1] + (f(ARG1) * 8))] INT_NOTEQUAL 0)
([ARG1] + (f(ARG1) * 8)) CAST ([ARG1] + (f(ARG1) * 8))
 CBRANCH f()
0 INT_NOTEQUAL [([ARG1] + (f(ARG1) * 8))] 0
([ARG1] + (f(ARG1) * 8)) INT_ADD [ARG1] (f(ARG1) * 8)
f(ARG1) INT_ZEXT f(ARG1)
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f(ARG1) * 8) INT_MULT f(ARG1) 8
[([ARG1] + (f(ARG1) * 8))] LOAD 433 ([ARG1] + (f(ARG1) * 8))
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 COPY 0
0 INT_NOTEQUAL [([ARG1] + (f(ARG1) * 8))] f()
 CBRANCH ([([ARG1] + (f(ARG1) * 8))] INT_NOTEQUAL f())
f() CALL func
[([ARG1] + (f(ARG1) * 8))] LOAD 433 ([ARG1] + (f(ARG1) * 8))
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
([(ARG1 + 12)] + 1) INT_ADD [(ARG1 + 12)] 1
([(ARG1 + 12)] + [(ARG1 + 16)]) INT_ADD [(ARG1 + 12)] [(ARG1 + 16)]
 CALL func (RSP + -48) ([ARG1] + (f(ARG1) * 8)) 0 ([ARG1] + (f(ARG1) * 8))
(RSP + 24) PTRSUB RSP 24
(f() + 40) INT_ADD f() 40
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 CBRANCH ([f(ARG1)] INT_EQUAL f())
(RSP + -48) PTRSUB RSP -48
(ARG1 + 12) CAST (ARG1 + 12)
f(RSP) CALL func (RSP + 24)
([ARG1] + (f(ARG1) * 8)) INT_ADD [ARG1] (f(ARG1) * 8)
0 INT_NOTEQUAL f() [(f() + 40)]
(RSP + -53) PTRSUB RSP -53
[(f() + 40)] LOAD 433 (f() + 40)
(ARG1 + 12) INT_ADD ARG1 12
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
([(ARG1 + 12)] + [(ARG1 + 16)]) CAST ([(ARG1 + 12)] + [(ARG1 + 16)])
 STORE 433 f(ARG1) f()
0 INT_EQUAL [f(ARG1)] f()
0 COPY 0
 CALL func (RSP + -48) (RSP + -53) (RSP + -53)
(RSP + -48) PTRSUB RSP -48
(ARG1 + 8) CAST (ARG1 + 8)
(f() + 40) CAST (f() + 40)
f() CALL func A_Stack[0x8]:8 A_Stack[0x10]:8 (ARG1 + 24) f(RSP)
0 INT_LESS [(ARG1 + 8)] ([(ARG1 + 12)] + [(ARG1 + 16)])
f() CALL func
 BRANCH VZERO
[(ARG1 + 12)] LOAD 433 (ARG1 + 12)
(f(ARG1) * 8) INT_MULT f(ARG1) 8
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 12) INT_ADD ARG1 12
(ARG1 + 12) CAST (ARG1 + 12)
 CBRANCH ([(ARG1 + 8)] INT_LESS ([(ARG1 + 12)] + [(ARG1 + 16)]))
[f(ARG1)] LOAD 433 f(ARG1)
(ARG1 + 12) CAST (ARG1 + 12)
(ARG1 + 12) INT_ADD ARG1 12
 STORE 433 (ARG1 + 12) ([(ARG1 + 12)] + 1)
f(ARG1) INT_ZEXT f(ARG1)
1 COPY 1
 BRANCH VZERO
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
([(ARG1 + 16)] + 4294967295) INT_ADD [(ARG1 + 16)] 4294967295
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG1 + 16) ([(ARG1 + 16)] + 4294967295)
(RSP + -48) PTRSUB RSP -48
(RSP + -53) PTRSUB RSP -53
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringMap.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringMap.h
NumItems + NumTombstones <= NumBuckets COPY NumItems + NumTombstones <= NumBuckets
std::pair<llvm::StringMapIterator<ValueTy>, bool> llvm::StringMap<ValueTy, AllocatorTy>::insert(std::pair<llvm::StringRef, ValueTy>) [with ValueTy = bool; AllocatorTy = llvm::MallocAllocator] COPY std::pair<llvm::StringMapIterator<ValueTy>, bool> llvm::StringMap<ValueTy, AllocatorTy>::insert(std::pair<llvm::StringRef, ValueTy>) [with ValueTy = bool; AllocatorTy = llvm::MallocAllocator]
(f(ARG1) * 8) INT_MULT f(ARG1) 8
f(ARG1) INT_ZEXT f(ARG1)
 RETURN 1
([ARG1] + (f(ARG1) * 8)) INT_ADD [ARG1] (f(ARG1) * 8)
 CALL libcall___assert_fail_thunk NumItems + NumTombstones <= NumBuckets /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringMap.h 342 std::pair<llvm::StringMapIterator<ValueTy>, bool> llvm::StringMap<ValueTy, AllocatorTy>::insert(std::pair<llvm::StringRef, ValueTy>) [with ValueTy = bool; AllocatorTy = llvm::MallocAllocator]
(RSP + -48) PTRSUB RSP -48
1 COPY 1
 CALL func (RSP + -48) (RSP + -53) (RSP + -53)
 CALL func (RSP + -48) ([ARG1] + (f(ARG1) * 8)) 0 ([ARG1] + (f(ARG1) * 8))
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -40) (RSP + -104) (RSP + -57) (RSP + -104)
(RSP + -40) PTRSUB RSP -40
[40] LOAD 433 40
(f() / 2147483647) SUBPIECE f() 0
f() CALL func ARG1
40 CAST 40
0 COPY 0
(f() + 4) INT_ADD f() 4
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL func (RSP + -56)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -57) PTRSUB RSP -57
40 INT_ADD 0 40
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -104) PTRSUB RSP -104
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (f() + 4)
(f() / 2147483647) SUBPIECE f() 0
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 f() f() f()
f() CALL func ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8 A_Stack[-0x38]:8
f() CALL func ARG1 f() f() f()
(FS_OFFSET + 40) INT_ADD 0 40
f() CALL func 0 (RSP + -64) (RSP + -28) (RSP + -20) (RSP + -24)
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -28) PTRSUB RSP -28
(f() + 40) CAST (f() + 40)
0 COPY 0
 CBRANCH f()
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 COPY 0
(RSP + -20) PTRSUB RSP -20
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 COPY 0
(RSP + -24) PTRSUB RSP -24
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -64) PTRSUB RSP -64
0 COPY 0
 CBRANCH f()
(f() & 8) INT_AND f() 8
 CBRANCH ((f() & 8) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (f() & 8) 0
0 COPY 0
 CBRANCH ((f() & 67108864) INT_EQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH f()
0 COPY 0
0 INT_NOTEQUAL (f() & 2048) 0
 CBRANCH ((f() & 2048) INT_NOTEQUAL 0)
(f() & 2048) INT_AND f() 2048
 CBRANCH ((f() & 65536) INT_NOTEQUAL 0)
 CBRANCH f()
0 COPY 0
 CBRANCH f()
(f() & 131072) INT_AND f() 131072
0 COPY 0
0 INT_NOTEQUAL (f() & 131072) 0
 CBRANCH ((f() & 131072) INT_NOTEQUAL 0)
 CBRANCH ((f() & 32) INT_NOTEQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH ((f() & 16) INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH (f() INT_EQUAL 1)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH ((f() & 536870912) INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH f()
0 COPY 0
(f() & 256) INT_AND f() 256
 CBRANCH ((f() & 256) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (f() & 256) 0
 CBRANCH f()
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH ~(f())
~(f()) BOOL_NEGATE f()
0 COPY 0
 CBRANCH (f() INT_LESS 13)
0 INT_EQUAL f() 1
(RSP + -80) PTRSUB RSP -80
 CBRANCH (f() INT_EQUAL 1)
f() CALL func 13 1 (RSP + -80) (RSP + -76) (RSP + -72) (RSP + -68)
(RSP + -68) PTRSUB RSP -68
(RSP + -72) PTRSUB RSP -72
(RSP + -76) PTRSUB RSP -76
0 COPY 0
 BRANCH VZERO
0 INT_NOTEQUAL A_Stack[-0x40]:4 0
 CBRANCH (A_Stack[-0x40]:4 INT_NOTEQUAL 0)
1 COPY 1
 CBRANCH ~(f())
0 INT_EQUAL (f() & 2) 0
 CBRANCH ((f() & 2) INT_EQUAL 0)
(f() & 2) INT_AND f() 2
0 COPY 0
 CBRANCH f()
 CBRANCH ((f() & 1) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (f() & 1) 0
(f() & 1) INT_AND f() 1
0 COPY 0
 CBRANCH ((f() & 1) INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH ((f() & 134217728) INT_NOTEQUAL 0)
 CBRANCH (f() INT_EQUAL 1)
0 COPY 0
 CBRANCH (0 INT_NOTEQUAL 6)
0 INT_AND 0 6
0 INT_NOTEQUAL 0 6
 CBRANCH ~(f())
0 COPY 0
0 INT_EQUAL (f() & 32) 0
(f() & 32) INT_AND f() 32
 CBRANCH ((f() & 32) INT_EQUAL 0)
 CBRANCH f()
(f() & 64) INT_AND f() 64
 CBRANCH ((f() & 64) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (f() & 64) 0
0 COPY 0
 CBRANCH ((f() & 536870912) INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_EQUAL 1)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH ((f() & 4096) INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH ((f() & 2097152) INT_NOTEQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
1 COPY 1
 BRANCH VZERO
 CBRANCH f()
 CBRANCH ((f() & 65536) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (f() & 65536) 0
(f() & 65536) INT_AND f() 65536
0 COPY 0
 CBRANCH f()
0 COPY 0
(f() & 2048) INT_AND f() 2048
 CBRANCH ((f() & 2048) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (f() & 2048) 0
 CBRANCH f()
(f() & 67108864) INT_AND f() 67108864
0 COPY 0
0 INT_NOTEQUAL (f() & 67108864) 0
 CBRANCH ((f() & 67108864) INT_NOTEQUAL 0)
f() CAST f()
 STORE 433 f() f()
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) rdseed
 STORE 433 f() 0
f() CAST f()
4721462 PTRSUB 0 4721462
4721551 PTRSUB 0 4721551
avx512bw COPY avx512bw
0 INT_AND 0 524288
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) avx512vl
 STORE 433 f() f()
0 INT_NOTEQUAL 0 0
f() CAST f()
 CALL func (RSP + -56) 4721389
 STORE 433 f() f()
 STORE 433 f() f()
(RSP + -68) PTRSUB RSP -68
4721523 PTRSUB 0 4721523
4721380 PTRSUB 0 4721380
 CALL func (RSP + -56) avx512f
(RSP + -56) PTRSUB RSP -56
0 INT_LESS f() 7
f() CAST f()
(RSP + -56) PTRSUB RSP -56
f() CAST f()
 CALL func 2147483648 (RSP + -60) (RSP + -76) (RSP + -72) (RSP + -68)
 CBRANCH (f() INT_LESS 7)
 STORE 433 f() f()
 CALL func (RSP + -56) 4721462
 CALL func (RSP + -56) sse4.2
0 INT_NOTEQUAL 0 0
 CALL func (RSP + -56) avx512er
0 INT_AND 0 8388608
(RSP + -56) PTRSUB RSP -56
 STORE 433 f() 0
4721458 PTRSUB 0 4721458
 CALL func (RSP + -56) 4721523
f() CAST f()
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) 4721458
 CALL func (RSP + -56) prfchw
prfchw COPY prfchw
 CALL func (RSP + -56) popcnt
(RSP + -56) PTRSUB RSP -56
f() CAST f()
(RSP + -56) PTRSUB RSP -56
f() CAST f()
(RSP + -56) PTRSUB RSP -56
 STORE 433 f() f()
4721547 PTRSUB 0 4721547
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CAST f()
(RSP + -56) PTRSUB RSP -56
0 INT_EQUAL f() 0
 CBRANCH f()
 STORE 433 f() f()
(RSP + -56) PTRSUB RSP -56
 CBRANCH (f() INT_EQUAL 0)
 STORE 433 f() f()
 STORE 433 f() 0
f() CAST f()
0 INT_AND 0 8388608
 CBRANCH f()
pclmul COPY pclmul
0 INT_NOTEQUAL 0 0
 CALL func (RSP + -56) 4721547
(RSP + -56) PTRSUB RSP -56
f() CAST f()
0 INT_LESS f() 13
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) pclmul
0 INT_NOTEQUAL 0 0
0 INT_EQUAL f() 0
(RSP + -56) PTRSUB RSP -56
f() CAST f()
popcnt COPY popcnt
f() CAST f()
 STORE 433 f() f()
 STORE 433 f() 0
4721527 PTRSUB 0 4721527
0 INT_AND 0 33554432
f() CAST f()
(RSP + -56) PTRSUB RSP -56
f() CAST f()
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL 0 0
0 COPY 0
avx512dq COPY avx512dq
f() CAST f()
 CALL func (RSP + -56) lzcnt
0 INT_AND 0 67108864
 CALL func (RSP + -56) 4721509
4721389 PTRSUB 0 4721389
4721500 PTRSUB 0 4721500
 CALL func (RSP + -56) 4721466
 CALL func (RSP + -56) rdrnd
 STORE 433 f() f()
 CBRANCH f()
movbe COPY movbe
 CBRANCH f()
4721466 PTRSUB 0 4721466
4721430 PTRSUB 0 4721430
4721555 PTRSUB 0 4721555
0 INT_EQUAL f() 0
0 INT_NOTEQUAL 0 0
f() CAST f()
0 INT_AND 0 33554432
0 INT_LESS f() 2147483649
 CALL func (RSP + -56) xsaves
 STORE 433 f() 0
 STORE 433 f() f()
(RSP + -76) PTRSUB RSP -76
(RSP + -56) PTRSUB RSP -56
f() CAST f()
 CBRANCH f()
(RSP + -80) PTRSUB RSP -80
 CALL func (RSP + -56) 4721448
(RSP + -56) PTRSUB RSP -56
(RSP + -72) PTRSUB RSP -72
 CBRANCH f()
 CBRANCH (f() INT_LESS 2147483649)
(RSP + -56) PTRSUB RSP -56
f() CAST f()
 STORE 433 f() f()
f() CAST f()
 STORE 433 f() f()
 CBRANCH f()
4721385 PTRSUB 0 4721385
 STORE 433 f() f()
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL 0 0
 CALL func (RSP + -56) 4721393
 STORE 433 f() 0
avx512f COPY avx512f
xsave COPY xsave
0 INT_AND 0 1048576
f() CAST f()
4721496 PTRSUB 0 4721496
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) 4721496
avx512vl COPY avx512vl
 CBRANCH (f() INT_EQUAL 0)
f() CAST f()
 CALL func (RSP + -56) 4721527
 CALL func (RSP + -56) xsaveopt
(RSP + -56) PTRSUB RSP -56
f() CAST f()
 CALL func 1 (RSP + -80) (RSP + -76) (RSP + -72) (RSP + -68)
rdrnd COPY rdrnd
avx512pf COPY avx512pf
f() CAST f()
4721448 PTRSUB 0 4721448
 STORE 433 f() f()
4721505 PTRSUB 0 4721505
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) 4721500
 STORE 433 f() 0
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
lzcnt COPY lzcnt
f() CAST f()
 CALL func (RSP + -56) xsave
f() CAST f()
rdseed COPY rdseed
4721398 PTRSUB 0 4721398
(RSP + -56) PTRSUB RSP -56
f() CAST f()
f() CAST f()
 STORE 433 f() f()
 CALL func (RSP + -56) 4721380
0 INT_AND 0 1
0 INT_NOTEQUAL 0 0
ssse3 COPY ssse3
f() CAST f()
 STORE 433 f() 0
 CBRANCH f()
 STORE 433 f() f()
 STORE 433 f() f()
0 INT_EQUAL 0 0
 CBRANCH (0 INT_EQUAL 0)
 CALL func (RSP + -56) 4721551
0 INT_AND 0 134217728
4721536 PTRSUB 0 4721536
 STORE 433 f() f()
1 COPY 1
f() CAST f()
 CALL func (RSP + -56) avx512dq
 CALL func (RSP + -56) 4721398
0 INT_NOTEQUAL 0 0
0 INT_AND 0 2
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
 CBRANCH f()
 STORE 433 f() f()
4721531 PTRSUB 0 4721531
f() CAST f()
(RSP + -56) PTRSUB RSP -56
 STORE 433 f() f()
 STORE 433 f() 0
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) avx512cd
f() CAST f()
 BRANCH VZERO
f() CAST f()
 CBRANCH f()
 CALL func (RSP + -56) 4721430
0 INT_AND 0 1073741824
xsaveopt COPY xsaveopt
 CBRANCH f()
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL 0 0
4721393 PTRSUB 0 4721393
 CALL func (RSP + -56) 4721531
f() CAST f()
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 STORE 433 f() 0
(RSP + -56) PTRSUB RSP -56
 STORE 433 f() f()
f() CAST f()
f() CAST f()
 STORE 433 f() 0
xsaves COPY xsaves
 STORE 433 f() f()
f() CAST f()
f() CAST f()
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL 0 0
 CALL func (RSP + -56) 4721385
 STORE 433 f() f()
0 INT_AND 0 512
sse4a COPY sse4a
 STORE 433 f() f()
f() CAST f()
(RSP + -56) PTRSUB RSP -56
 STORE 433 f() 0
avx512cd COPY avx512cd
 STORE 433 f() f()
fsgsbase COPY fsgsbase
 CALL func (RSP + -56) 4721555
f() CAST f()
 CALL func (RSP + -56) sse4.1
0 INT_NOTEQUAL 0 0
 CALL func (RSP + -56) xsavec
0 INT_AND 0 Symbol
 STORE 433 f() f()
(RSP + -56) PTRSUB RSP -56
f() CAST f()
 CALL func (RSP + -56) 4721505
 CBRANCH f()
4721509 PTRSUB 0 4721509
(RSP + -56) PTRSUB RSP -56
sse4.2 COPY sse4.2
(RSP + -56) PTRSUB RSP -56
f() CAST f()
f() CAST f()
(RSP + -60) PTRSUB RSP -60
0 INT_EQUAL f() 0
 CALL func (RSP + -56) fsgsbase
 CBRANCH (f() INT_EQUAL 0)
(RSP + -56) PTRSUB RSP -56
xsavec COPY xsavec
 CALL func (RSP + -56) sse4a
0 INT_NOTEQUAL 0 0
 CALL func (RSP + -56) ssse3
(RSP + -72) PTRSUB RSP -72
(RSP + -76) PTRSUB RSP -76
 STORE 433 f() 0
0 INT_AND 0 8192
 STORE 433 f() f()
(RSP + -68) PTRSUB RSP -68
 CBRANCH (f() INT_EQUAL 0)
0 INT_NOTEQUAL 0 0
 CALL func (RSP + -56) 4721536
 CALL func (RSP + -56) avx512pf
 STORE 433 f() 0
(RSP + -56) PTRSUB RSP -56
0 INT_AND 0 32768
0 INT_EQUAL f() 0
(RSP + -56) PTRSUB RSP -56
f() CAST f()
 CALL func (RSP + -56) movbe
 CALL func (RSP + -56) avx512bw
 CBRANCH f()
 STORE 433 f() f()
sse4.1 COPY sse4.1
avx512er COPY avx512er
 STORE 433 f() f()
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
1 COPY 1
 CBRANCH f()
0 COPY 0
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
1 COPY 1
 CBRANCH ((f() & 8) INT_EQUAL 0)
(f() & 8) INT_AND f() 8
0 INT_EQUAL (f() & 8) 0
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH ((f() & 256) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (f() & 256) 0
(f() & 256) INT_AND f() 256
(RSP + -76) PTRSUB RSP -76
f() CALL func 7 0 (RSP + -80) (RSP + -76) (RSP + -72) (RSP + -68)
(RSP + -80) PTRSUB RSP -80
0 INT_EQUAL f() 1
(RSP + -68) PTRSUB RSP -68
(RSP + -72) PTRSUB RSP -72
 CBRANCH ((f() & 268435456) INT_NOTEQUAL 0)
(f() & 1073741824) INT_AND f() 1073741824
0 COPY 0
 CBRANCH ((f() & 1073741824) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (f() & 1073741824) 0
0 COPY 0
1 COPY 1
 BRANCH VZERO
0 INT_EQUAL 0 0
 CBRANCH (0 INT_EQUAL 0)
0 INT_AND 0 268435456
0 COPY 0
0 INT_NOTEQUAL (f() & 16) 0
(f() & 16) INT_AND f() 16
 CBRANCH ((f() & 16) INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 CBRANCH f()
1 COPY 1
 BRANCH VZERO
0 INT_NOTEQUAL (f() & 134217728) 0
(f() & 134217728) INT_AND f() 134217728
1 COPY 1
 BRANCH VZERO
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 RETURN 1
0 INT_NOTEQUAL (f() & 524288) 0
 CBRANCH ((f() & 524288) INT_NOTEQUAL 0)
(f() & 524288) INT_AND f() 524288
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 CBRANCH ~(f())
~(f()) BOOL_NEGATE f()
 CBRANCH (f() INT_SLESS 0)
 CBRANCH f()
0 COPY 0
 CBRANCH f()
 BRANCH VZERO
1 COPY 1
1 COPY 1
 BRANCH VZERO
(RSP + -68) PTRSUB RSP -68
(RSP + -80) PTRSUB RSP -80
0 INT_EQUAL f() 1
f() CALL func (RSP + -80) (RSP + -68) (RSP + -68)
(f() & 262144) INT_AND f() 262144
 CBRANCH ((f() & 262144) INT_NOTEQUAL 0)
0 INT_NOTEQUAL (f() & 262144) 0
0 COPY 0
0 INT_NOTEQUAL f() 0
f() CAST f()
0 INT_SLESS f() 0
 BRANCH VZERO
1 COPY 1
0 INT_EQUAL f() 1
(RSP + -76) PTRSUB RSP -76
(RSP + -68) PTRSUB RSP -68
(RSP + -80) PTRSUB RSP -80
(RSP + -72) PTRSUB RSP -72
f() CALL func 2147483649 (RSP + -80) (RSP + -76) (RSP + -72) (RSP + -68)
0 COPY 0
0 INT_NOTEQUAL (f() & 224) 224
 CBRANCH ((f() & 224) INT_NOTEQUAL 224)
(f() & 224) INT_AND f() 224
1 COPY 1
 BRANCH VZERO
(f() & 67108864) INT_AND f() 67108864
0 INT_EQUAL (f() & 67108864) 0
0 INT_NOTEQUAL (f() & 32) 0
(f() & 32) INT_AND f() 32
0 INT_NOTEQUAL (f() & 65536) 0
(f() & 65536) INT_AND f() 65536
0 INT_NOTEQUAL (f() & 268435456) 0
(f() & 268435456) INT_AND f() 268435456
0 INT_NOTEQUAL (f() & 16) 0
(f() & 16) INT_AND f() 16
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH f()
 BRANCH VZERO
1 COPY 1
~(f()) BOOL_NEGATE f()
0 INT_EQUAL (f() & 1) 0
(f() & 1) INT_AND f() 1
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
1 COPY 1
~(f()) BOOL_NEGATE f()
 BRANCH VZERO
1 COPY 1
(f() & 536870912) INT_AND f() 536870912
0 INT_EQUAL (f() & 536870912) 0
1 COPY 1
 BRANCH VZERO
0 INT_NOTEQUAL f() 0
0 INT_NOTEQUAL (f() & 536870912) 0
(f() & 536870912) INT_AND f() 536870912
(f() & 2097152) INT_AND f() 2097152
0 INT_NOTEQUAL (f() & 2097152) 0
 BRANCH VZERO
1 COPY 1
(f() & 4096) INT_AND f() 4096
0 INT_EQUAL (f() & 4096) 0
(ARG1 + 44) PTRADD ARG1 44 1
ARG1 COPY ARG1
(ARG1 + 32) PTRADD ARG1 32 1
(ARG1 + 40) PTRADD ARG1 40 1
(ARG1 + 52) PTRADD ARG1 52 1
 CALL libcall_operator=_thunk ARG1 ARG2
(ARG1 + 36) PTRADD ARG1 36 1
(ARG1 + 48) PTRADD ARG1 48 1
(ARG2 + 32) PTRADD ARG2 32 1
(ARG2 + 44) PTRADD ARG2 44 1
(ARG2 + 52) PTRADD ARG2 52 1
(ARG2 + 40) PTRADD ARG2 40 1
(ARG2 + 36) PTRADD ARG2 36 1
(ARG2 + 48) PTRADD ARG2 48 1
 STORE 433 (ARG1 + 36) [(ARG2 + 36)]
[(ARG2 + 48)] LOAD 433 (ARG2 + 48)
(ARG2 + 40) CAST (ARG2 + 40)
 RETURN 0 ARG1
(ARG1 + 36) CAST (ARG1 + 36)
(ARG1 + 52) CAST (ARG1 + 52)
[(ARG2 + 36)] LOAD 433 (ARG2 + 36)
(ARG2 + 36) CAST (ARG2 + 36)
(ARG2 + 52) CAST (ARG2 + 52)
 STORE 433 (ARG1 + 44) [(ARG2 + 44)]
(ARG1 + 32) CAST (ARG1 + 32)
(ARG1 + 48) CAST (ARG1 + 48)
 STORE 433 (ARG1 + 52) [(ARG2 + 52)]
(ARG2 + 32) CAST (ARG2 + 32)
(ARG2 + 48) CAST (ARG2 + 48)
[(ARG2 + 44)] LOAD 433 (ARG2 + 44)
 STORE 433 (ARG1 + 32) [(ARG2 + 32)]
 STORE 433 (ARG1 + 40) [(ARG2 + 40)]
(ARG1 + 44) CAST (ARG1 + 44)
[(ARG2 + 52)] LOAD 433 (ARG2 + 52)
(ARG2 + 44) CAST (ARG2 + 44)
 STORE 433 (ARG1 + 48) [(ARG2 + 48)]
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
[(ARG2 + 40)] LOAD 433 (ARG2 + 40)
(ARG1 + 40) CAST (ARG1 + 40)
ARG1 COPY ARG1
 RETURN 0 ARG1
 BRANCHIND ARG1
 RETURN 0 f(Symbol , aarch64 , amdgcn , amdil , amdil64 , armeb , bpfeb , bpfel , hexagon , hsail , hsail64 , kalimba , mips64 , mips64el , mipsel , msp430 , nvptx , nvptx64 , powerpc , powerpc64 , powerpc64le , s390x , shave , sparc , sparcel , sparcv9 , spir64 , thumb , thumbeb , unknown , wasm32 , wasm64 , xcore)
powerpc64 COPY powerpc64
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
0 COPY 0
 BRANCH VZERO
msp430 COPY msp430
 BRANCH VZERO
unknown COPY unknown
 BRANCH VZERO
aarch64 COPY aarch64
wasm64 COPY wasm64
 BRANCH VZERO
Symbol COPY Symbol
 BRANCH VZERO
 BRANCH VZERO
thumbeb COPY thumbeb
mips64el COPY mips64el
f() CAST f()
f() CALL func Invalid ArchType! /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp 68
 BRANCH VZERO
wasm32 COPY wasm32
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
thumb COPY thumb
shave COPY shave
Symbol COPY Symbol
 BRANCH VZERO
 BRANCH VZERO
sparcv9 COPY sparcv9
amdil64 COPY amdil64
bpfeb COPY bpfeb
amdil COPY amdil
Symbol COPY Symbol
sparc COPY sparc
bpfel COPY bpfel
Symbol COPY Symbol
Symbol COPY Symbol
amdgcn COPY amdgcn
spir64 COPY spir64
kalimba COPY kalimba
mips64 COPY mips64
nvptx64 COPY nvptx64
armeb COPY armeb
nvptx COPY nvptx
Symbol COPY Symbol
Symbol COPY Symbol
Symbol COPY Symbol
powerpc COPY powerpc
mipsel COPY mipsel
hsail64 COPY hsail64
Symbol COPY Symbol
xcore COPY xcore
s390x COPY s390x
hsail COPY hsail
sparcel COPY sparcel
hexagon COPY hexagon
0 COPY 0
powerpc64le COPY powerpc64le
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp
Invalid ArchType! COPY Invalid ArchType!
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 CALL func ARG1
 RETURN 0
 CALL libcall_~basic_string_thunk ARG1
 RETURN 0
((ARG2 + 8) + ARG1) INT_ADD (ARG2 + 8) ARG1
ARG1 COPY ARG1
f() CALL func ARG1 ARG2 ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
(ARG2 + 8) INT_SUB ARG2 8
ARG2 COPY ARG2
0 INT_LESS ARG2 8
 CBRANCH ((f() / 4611686014132420609) INT_NOTEQUAL 0)
0 INT_EQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) INT_RIGHT f() 64
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL (f() / 4611686014132420609) 0
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (0 INT_EQUAL [(f() + 40)])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_LESS 7 [(f(RSP) + 8)]
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 COPY 0
 CBRANCH (7 INT_LESS [(f(RSP) + 8)])
[(f(RSP) + 8)] CAST [(f(RSP) + 8)]
f(RSP) COPY f(RSP)
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -176)
(RSP + -176) PTRSUB RSP -176
(RSP + -176) CAST (RSP + -176)
 CBRANCH (ARG2 INT_LESS 8)
(f() / 2147483647) SUBPIECE f() 8
f(RSP) COPY f(RSP)
0 COPY 0
0 COPY 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -40) PTRSUB RSP -40
f(Symbol) CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
(f() / 2147483647) SUBPIECE f() 0
16 COPY 16
0 INT_EQUAL [(f(RSP) + 16)] 0
17 COPY 17
(RSP + -40) PTRSUB RSP -40
 CBRANCH f()
f() COPY f()
f(RSP) COPY f(RSP)
 CBRANCH (f(RSP) INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
18 COPY 18
 BRANCHIND f(Symbol)
0 INT_EQUAL f(RSP) 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(f(RSP) + 16)] 0
(RSP + -180) PTRSUB RSP -180
(RSP + -180) CAST (RSP + -180)
 STORE 433 (f(RSP) + 16) (RSP + -180)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
(RSP + -184) PTRSUB RSP -184
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
0 INT_LESS 7 f(ARG2)
(RSP + -40) COPY (RSP + -40)
 CBRANCH (7 INT_LESS f(ARG2))
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 RETURN 0 f(RSP)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
4 COPY 4
10 COPY 10
11 COPY 11
12 COPY 12
14 COPY 14
7 COPY 7
5 COPY 5
(f() / 2147483647) SUBPIECE f() 0
8 COPY 8
6 COPY 6
(f(RSP) + 16) PTRADD f(RSP) 2 8
([f(RSP)] + ([(f(RSP) + 8)] + -8)) INT_ADD ([(f(RSP) + 8)] + -8) [f(RSP)]
([(f(RSP) + 8)] + -8) INT_ADD [(f(RSP) + 8)] -8
[f(RSP)] LOAD 433 f(RSP)
(f() / 2147483647) SUBPIECE f() 0
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk kalimba4 ((f(ARG2) + 8) + f(ARG1)) 8
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk kalimba3 ((ARG2 + 8) + ARG1) 8
kalimba4 COPY kalimba4
((f(ARG2) + 8) + f(ARG1)) CAST ((f(ARG2) + 8) + f(ARG1))
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
1 COPY 1
1 COPY 1
kalimba3 COPY kalimba3
((ARG2 + 8) + ARG1) CAST ((ARG2 + 8) + ARG1)
(RSP + -40) COPY (RSP + -40)
(RSP + -40) COPY (RSP + -40)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk kalimba5 ([f(RSP)] + ([(f(RSP) + 8)] + -8)) 8
[[(f(RSP) + 16)]] COPY [[(f(RSP) + 16)]]
[[(f(RSP) + 16)]] LOAD 433 [(f(RSP) + 16)]
9 COPY 9
13 COPY 13
15 COPY 15
([f(RSP)] + ([(f(RSP) + 8)] + -8)) CAST ([f(RSP)] + ([(f(RSP) + 8)] + -8))
kalimba5 COPY kalimba5
(f() / 2147483647) SUBPIECE f() 8
0 COPY 0
 BRANCH VZERO
 BRANCH VZERO
4 COPY 4
8 COPY 8
 BRANCH VZERO
12 COPY 12
f(RSP) COPY f(RSP)
10 COPY 10
 BRANCH VZERO
11 COPY 11
 BRANCH VZERO
2 COPY 2
2 COPY 2
((f(ARG2) + 8) + f(ARG1)) INT_ADD (f(ARG2) + 8) f(ARG1)
(f(ARG2) + 8) INT_SUB f(ARG2) 8
0 COPY 0
0 COPY 0
3 COPY 3
3 COPY 3
(f(RSP) + 8) PTRADD f(RSP) 1 8
(f() / 2147483647) SUBPIECE f() 8
5 COPY 5
 BRANCH VZERO
7 COPY 7
(f() / 2147483647) SUBPIECE f() 0
6 COPY 6
f(RSP) COPY f(RSP)
 BRANCH VZERO
(RSP + -40) PTRSUB RSP -40
 BRANCH VZERO
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
[(f(RSP) + 16)] CAST [(f(RSP) + 16)]
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
9 COPY 9
13 COPY 13
15 COPY 15
14 COPY 14
0 COPY 0
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
(RSP + -40) PTRSUB RSP -40
 BRANCH VZERO
(ARG1 + 44) INT_ADD ARG1 44
[(ARG1 + 44)] LOAD 433 (ARG1 + 44)
 RETURN 0 [(ARG1 + 44)]
[(ARG1 + 44)] COPY [(ARG1 + 44)]
(ARG1 + 44) CAST (ARG1 + 44)
f() CALL func ARG1
 RETURN 0 (f() & -256)
0 INT_EQUAL (f() / 2147483647) 13
(f() / 2147483647) SUBPIECE f() 0
(f() & -256) INT_AND f() -256
(f() & -256) INT_OR (f() & -256) 0
0 INT_ZEXT 0
(ARG1 + 32) INT_ADD ARG1 32
 RETURN 0 [(ARG1 + 32)]
[(ARG1 + 32)] COPY [(ARG1 + 32)]
(ARG1 + 32) CAST (ARG1 + 32)
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
f() CALL func ARG1
f() CALL func ARG1
 CBRANCH (f() INT_NOTEQUAL 2)
0 INT_NOTEQUAL f() 2
0 INT_NOTEQUAL f() 9
 RETURN 0 0
 CBRANCH (f() INT_NOTEQUAL 9)
0 COPY 0
1 COPY 1
 RETURN 0 1
f() CALL func ARG1
(f() & -256) INT_OR (f() & -256) 0
0 INT_ZEXT 0
 RETURN 0 (f() & -256)
0 INT_EQUAL (f() / 2147483647) 26
(f() / 2147483647) SUBPIECE f() 0
(f() & -256) INT_AND f() -256
f() CALL func ARG1
f() CALL func ARG1
0 INT_NOTEQUAL f() 5
 CBRANCH (f() INT_NOTEQUAL 5)
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 RETURN 0 0
 RETURN 0 1
0 COPY 0
0 INT_EQUAL f() 0
f() CALL func ARG1
(f() & -256) INT_OR (f() & -256) 0
0 INT_ZEXT 0
 RETURN 0 (f() & -256)
0 INT_EQUAL (f() / 2147483647) 27
(f() / 2147483647) SUBPIECE f() 0
(f() & -256) INT_AND f() -256
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 RETURN 0 1
1 COPY 1
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
 RETURN 0 0
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
 RETURN 0 f()
 BRANCHIND f()
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
 BRANCH VZERO
2 COPY 2
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
 BRANCH VZERO
3 COPY 3
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
2 COPY 2
3 COPY 3
 BRANCH VZERO
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp
unknown architecture COPY unknown architecture
0 INT_EQUAL f() 0
f() CALL func unknown architecture /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp 596
2 COPY 2
 BRANCH VZERO
0 INT_EQUAL f() 0
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 36) INT_ADD ARG1 36
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 36) INT_ADD ARG1 36
(ARG1 + 52) INT_ADD ARG1 52
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 44) INT_ADD ARG1 44
(ARG1 + 48) INT_ADD ARG1 48
 CALL func ARG1 ARG2 ARG2
(ARG1 + 52) INT_ADD ARG1 52
f() CALL func ARG1
(ARG1 + 52) INT_ADD ARG1 52
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 44) INT_ADD ARG1 44
(ARG1 + 52) INT_ADD ARG1 52
(ARG1 + 40) CAST (ARG1 + 40)
A_Stack[-0x68]:8 CAST A_Stack[-0x68]:8
 STORE 433 (ARG1 + 52) 0
 CBRANCH (((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) INT_NOTEQUAL 0)
(A_Stack[-0x60]:8 - A_Stack[-0x68]:8) INT_SUB A_Stack[-0x60]:8 A_Stack[-0x68]:8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 STORE 433 (ARG1 + 48) 0
(ARG1 + 36) CAST (ARG1 + 36)
 STORE 433 (ARG1 + 36) 0
(RSP + -120) PTRSUB RSP -120
(ARG1 + 52) CAST (ARG1 + 52)
0 INT_NOTEQUAL ((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) 0
(RSP + -104) PTRSUB RSP -104
(FS_OFFSET + 40) INT_ADD 0 40
(ARG1 + 32) CAST (ARG1 + 32)
 STORE 433 (ARG1 + 32) 0
f() CALL libcall_length_thunk
(RSP + -104) PTRSUB RSP -104
(ARG1 + 48) CAST (ARG1 + 48)
 CALL func (RSP + -104)
 STORE 433 (ARG1 + 44) 0
(ARG1 + 44) CAST (ARG1 + 44)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -120) (RSP + -104) 45 3 1
f() CALL libcall_data_thunk
((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) INT_SRIGHT (A_Stack[-0x60]:8 - A_Stack[-0x68]:8) 4
 STORE 433 (ARG1 + 40) 0
0 INT_EQUAL ((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) 0
A_Stack[-0x68]:8 CAST A_Stack[-0x68]:8
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
[(ARG1 + 52)] LOAD 433 (ARG1 + 52)
(ARG1 + 52) CAST (ARG1 + 52)
(A_Stack[-0x60]:8 - A_Stack[-0x68]:8) INT_SUB A_Stack[-0x60]:8 A_Stack[-0x68]:8
0 INT_EQUAL [(ARG1 + 52)] 0
 CBRANCH ([(ARG1 + 52)] INT_EQUAL 0)
(RSP + -104) PTRSUB RSP -104
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
 CBRANCH (((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) INT_EQUAL 0)
 CALL func (RSP + -104)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) INT_SRIGHT (A_Stack[-0x60]:8 - A_Stack[-0x68]:8) 4
 CBRANCH (((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) INT_LESS 3)
0 COPY 0
 CBRANCH (3 INT_LESS ((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16))
 STORE 433 (ARG1 + 44) f(RSP)
 RETURN 1
idx < size() COPY idx < size()
0 INT_LESS 3 ((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16)
A_Stack[-0x68]:8 CAST A_Stack[-0x68]:8
((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) INT_SRIGHT (A_Stack[-0x60]:8 - A_Stack[-0x68]:8) 4
[(A_Stack[-0x68]:8 + 40)] LOAD 433 (A_Stack[-0x68]:8 + 40)
(A_Stack[-0x60]:8 - A_Stack[-0x68]:8) INT_SUB A_Stack[-0x60]:8 A_Stack[-0x68]:8
(A_Stack[-0x68]:8 + 32) PTRADD A_Stack[-0x68]:8 4 8
f(RSP) CALL func [(A_Stack[-0x68]:8 + 32)] [(A_Stack[-0x68]:8 + 40)] [(A_Stack[-0x68]:8 + 32)]
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
[(A_Stack[-0x68]:8 + 32)] LOAD 433 (A_Stack[-0x68]:8 + 32)
(A_Stack[-0x68]:8 + 40) PTRADD A_Stack[-0x68]:8 5 8
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
(ARG1 + 44) CAST (ARG1 + 44)
((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) CAST ((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16)
((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) CAST ((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16)
((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) INT_SRIGHT (A_Stack[-0x60]:8 - A_Stack[-0x68]:8) 4
A_Stack[-0x68]:8 CAST A_Stack[-0x68]:8
(A_Stack[-0x60]:8 - A_Stack[-0x68]:8) INT_SUB A_Stack[-0x60]:8 A_Stack[-0x68]:8
 CBRANCH (((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) INT_LESS 4)
0 INT_LESS ((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) 4
 CBRANCH (((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) INT_LESS 2)
((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) CAST ((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16)
(ARG1 + 40) CAST (ARG1 + 40)
f(RSP) CALL func [(A_Stack[-0x68]:8 + 16)] [(A_Stack[-0x68]:8 + 24)] [(A_Stack[-0x68]:8 + 16)]
 STORE 433 (ARG1 + 40) f(RSP)
0 COPY 0
[(A_Stack[-0x68]:8 + 24)] LOAD 433 (A_Stack[-0x68]:8 + 24)
(A_Stack[-0x68]:8 + 24) PTRADD A_Stack[-0x68]:8 3 8
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
(A_Stack[-0x60]:8 - A_Stack[-0x68]:8) INT_SUB A_Stack[-0x60]:8 A_Stack[-0x68]:8
A_Stack[-0x68]:8 CAST A_Stack[-0x68]:8
idx < size() COPY idx < size()
 CBRANCH (2 INT_LESS ((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16))
[(A_Stack[-0x68]:8 + 16)] LOAD 433 (A_Stack[-0x68]:8 + 16)
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
(A_Stack[-0x68]:8 + 16) PTRADD A_Stack[-0x68]:8 2 8
 RETURN 1
0 INT_LESS 2 ((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16)
((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) INT_SRIGHT (A_Stack[-0x60]:8 - A_Stack[-0x68]:8) 4
(ARG1 + 52) CAST (ARG1 + 52)
 STORE 433 (ARG1 + 52) f()
 RETURN 1
0 COPY 0
((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) INT_SRIGHT (A_Stack[-0x60]:8 - A_Stack[-0x68]:8) 4
(A_Stack[-0x60]:8 - A_Stack[-0x68]:8) INT_SUB A_Stack[-0x60]:8 A_Stack[-0x68]:8
 STORE 433 (ARG1 + 48) f(RSP)
(ARG1 + 48) CAST (ARG1 + 48)
idx < size() COPY idx < size()
[(A_Stack[-0x68]:8 + 56)] LOAD 433 (A_Stack[-0x68]:8 + 56)
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) CAST ((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16)
 CBRANCH (((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) INT_LESS 4)
(A_Stack[-0x68]:8 + 56) PTRADD A_Stack[-0x68]:8 7 8
f(RSP) CALL func [(A_Stack[-0x68]:8 + 48)] [(A_Stack[-0x68]:8 + 56)] [(A_Stack[-0x68]:8 + 48)]
A_Stack[-0x68]:8 CAST A_Stack[-0x68]:8
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
[(A_Stack[-0x68]:8 + 48)] LOAD 433 (A_Stack[-0x68]:8 + 48)
0 INT_LESS ((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) 4
(A_Stack[-0x68]:8 + 48) PTRADD A_Stack[-0x68]:8 6 8
((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) CAST ((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16)
(A_Stack[-0x60]:8 - A_Stack[-0x68]:8) INT_SUB A_Stack[-0x60]:8 A_Stack[-0x68]:8
((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) INT_SRIGHT (A_Stack[-0x60]:8 - A_Stack[-0x68]:8) 4
A_Stack[-0x68]:8 CAST A_Stack[-0x68]:8
0 INT_LESS ((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) 3
 CBRANCH (((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) INT_EQUAL 0)
 RETURN 1
0 INT_LESS 1 ((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16)
((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) INT_SRIGHT (A_Stack[-0x60]:8 - A_Stack[-0x68]:8) 4
[(A_Stack[-0x68]:8 + 8)] LOAD 433 (A_Stack[-0x68]:8 + 8)
(A_Stack[-0x60]:8 - A_Stack[-0x68]:8) INT_SUB A_Stack[-0x60]:8 A_Stack[-0x68]:8
((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) CAST ((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16)
f(RSP) CALL func [A_Stack[-0x68]:8] [(A_Stack[-0x68]:8 + 8)] [A_Stack[-0x68]:8]
[A_Stack[-0x68]:8] LOAD 433 A_Stack[-0x68]:8
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
idx < size() COPY idx < size()
0 COPY 0
(ARG1 + 36) CAST (ARG1 + 36)
A_Stack[-0x68]:8 CAST A_Stack[-0x68]:8
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
(A_Stack[-0x68]:8 + 8) PTRADD A_Stack[-0x68]:8 1 8
 CBRANCH (1 INT_LESS ((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16))
 STORE 433 (ARG1 + 36) f(RSP)
((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) INT_SRIGHT (A_Stack[-0x60]:8 - A_Stack[-0x68]:8) 4
((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) CAST ((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16)
0 INT_LESS ((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) 2
(A_Stack[-0x60]:8 - A_Stack[-0x68]:8) INT_SUB A_Stack[-0x60]:8 A_Stack[-0x68]:8
A_Stack[-0x68]:8 CAST A_Stack[-0x68]:8
(A_Stack[-0x60]:8 - A_Stack[-0x68]:8) INT_SUB A_Stack[-0x60]:8 A_Stack[-0x68]:8
A_Stack[-0x68]:8 CAST A_Stack[-0x68]:8
0 COPY 0
[(A_Stack[-0x68]:8 + 8)] LOAD 433 (A_Stack[-0x68]:8 + 8)
(ARG1 + 32) CAST (ARG1 + 32)
((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) INT_SRIGHT (A_Stack[-0x60]:8 - A_Stack[-0x68]:8) 4
 STORE 433 (ARG1 + 32) f(RSP)
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
idx < size() COPY idx < size()
[A_Stack[-0x68]:8] LOAD 433 A_Stack[-0x68]:8
 RETURN 1
(A_Stack[-0x68]:8 + 8) PTRADD A_Stack[-0x68]:8 1 8
0 INT_EQUAL ((A_Stack[-0x60]:8 - A_Stack[-0x68]:8) / 16) 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
f(RSP) CALL func [A_Stack[-0x68]:8] [(A_Stack[-0x68]:8 + 8)] [A_Stack[-0x68]:8]
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL libcall___assert_fail_thunk idx < size() /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h 145 0
0 COPY 0
f(RSP) CALL func [(A_Stack[-0x68]:8 + 48)] [(A_Stack[-0x68]:8 + 56)] [(A_Stack[-0x68]:8 + 48)]
(A_Stack[-0x68]:8 + 56) PTRADD A_Stack[-0x68]:8 7 8
idx < size() COPY idx < size()
(A_Stack[-0x68]:8 + 48) PTRADD A_Stack[-0x68]:8 6 8
[(A_Stack[-0x68]:8 + 56)] LOAD 433 (A_Stack[-0x68]:8 + 56)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/SmallVector.h
[(A_Stack[-0x68]:8 + 48)] LOAD 433 (A_Stack[-0x68]:8 + 48)
(ARG1 + 52) CAST (ARG1 + 52)
 STORE 433 (ARG1 + 52) f(RSP)
 RETURN 1
 CALL func ARG1 (RSP + -72) (RSP + -72)
 CALL func (RSP + -72) ARG2 ARG2
(RSP + -72) PTRSUB RSP -72
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -72) PTRSUB RSP -72
(FS_OFFSET + 40) INT_ADD 0 40
40 CAST 40
[40] LOAD 433 40
 CALL func (RSP + -72)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -72) PTRSUB RSP -72
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 CALL func ARG1 ARG2 ARG3 ARG2
 RETURN 0
ARG2 COPY ARG2
ARG3 COPY ARG3
ARG1 COPY ARG1
ARG1 COPY ARG1
 RETURN 0 ARG1
f() CALL func (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
f() CALL func (RSP + -56)
 CALL func ARG1 f() f() f()
(RSP + -72) PTRSUB RSP -72
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
(RSP + -56) PTRSUB RSP -56
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -56) (RSP + -88) 45 (RSP + -88)
 CALL func (RSP + -56) (RSP + -72) 45 (RSP + -72)
(RSP + -56) PTRSUB RSP -56
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
A_Stack[-0x20]:8 COPY A_Stack[-0x20]:8
f() CALL libcall_length_thunk
[40] LOAD 433 40
f() CALL libcall_data_thunk
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -88) PTRSUB RSP -88
40 CAST 40
A_Stack[-0x28]:8 COPY A_Stack[-0x28]:8
 RETURN 1
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) COPY (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 RETURN 0 (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 CALL libcall___stack_chk_fail_thunk
f() CALL libcall_data_thunk
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -56) (RSP + -88) 45 (RSP + -88)
 CALL func (RSP + -56) (RSP + -72) 45 (RSP + -72)
f() CALL libcall_length_thunk
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
[40] LOAD 433 40
A_Stack[-0x20]:8 COPY A_Stack[-0x20]:8
(RSP + -56) PTRSUB RSP -56
(RSP + -88) PTRSUB RSP -88
40 CAST 40
(RSP + -56) PTRSUB RSP -56
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -72) PTRSUB RSP -72
A_Stack[-0x28]:8 COPY A_Stack[-0x28]:8
40 INT_ADD 0 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL libcall___stack_chk_fail_thunk
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 RETURN 1
 CALL func ARG1
 RETURN 0
f() CALL func ARG1
 CALL func ARG1 (RSP + -152) (RSP + -152)
f() CALL func ARG1
 CALL func (RSP + -120) ARG2 ARG3 ARG2
(f() / 2147483647) SUBPIECE f() 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -120) PTRSUB RSP -120
4726128 PTRSUB 0 4726128
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(RSP + -152) PTRSUB RSP -152
40 INT_ADD 0 40
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -120)
[40] LOAD 433 40
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -152) 4726128
 CALL func (RSP + -152) 4726128
40 CAST 40
(RSP + -152) PTRSUB RSP -152
(f() / 2147483647) INT_RIGHT f() 64
 CALL func (RSP + -152) (RSP + -120) (RSP + -120)
 CALL func (RSP + -120) A_Stack[-0x98]:8 A_Stack[-0x90]:8 A_Stack[-0x98]:8
(RSP + -120) PTRSUB RSP -120
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
 CALL func (RSP + -120)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -120) PTRSUB RSP -120
(RSP + -120) PTRSUB RSP -120
 CALL func (RSP + -120) A_Stack[-0x98]:8 A_Stack[-0x90]:8 A_Stack[-0x98]:8
(FS_OFFSET + 40) INT_ADD 0 40
 CALL func (RSP + -120) (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
 CALL func (RSP + -120) (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
(f() / 2147483647) INT_RIGHT f() 64
(RSP + -120) PTRSUB RSP -120
4726128 PTRSUB 0 4726128
(RSP + -120) PTRSUB RSP -120
(RSP + -152) PTRSUB RSP -152
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -120) PTRSUB RSP -120
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
 CALL func ARG1 A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
f(Symbol , aarch64 , amdgcn , amdil , amdil64 , armeb , bpfeb , bpfel , hexagon , hsail , hsail64 , kalimba , mips64 , mips64el , mipsel , msp430 , nvptx , nvptx64 , powerpc , powerpc64 , powerpc64le , s390x , shave , sparc , sparcel , sparcv9 , spir64 , thumb , thumbeb , unknown , wasm32 , wasm64 , xcore) CALL func ARG2
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -40) f(Symbol , aarch64 , amdgcn , amdil , amdil64 , armeb , bpfeb , bpfel , hexagon , hsail , hsail64 , kalimba , mips64 , mips64el , mipsel , msp430 , nvptx , nvptx64 , powerpc , powerpc64 , powerpc64le , s390x , shave , sparc , sparcel , sparcv9 , spir64 , thumb , thumbeb , unknown , wasm32 , wasm64 , xcore) f(Symbol , aarch64 , amdgcn , amdil , amdil64 , armeb , bpfeb , bpfel , hexagon , hsail , hsail64 , kalimba , mips64 , mips64el , mipsel , msp430 , nvptx , nvptx64 , powerpc , powerpc64 , powerpc64le , s390x , shave , sparc , sparcel , sparcv9 , spir64 , thumb , thumbeb , unknown , wasm32 , wasm64 , xcore)
40 INT_ADD 0 40
[40] LOAD 433 40
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -40) PTRSUB RSP -40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 48) PTRADD ARG1 48 1
 CALL libcall_basic_string_thunk ARG1
(ARG1 + 36) PTRADD ARG1 36 1
(ARG1 + 32) PTRADD ARG1 32 1
(ARG1 + 44) PTRADD ARG1 44 1
(ARG1 + 40) PTRADD ARG1 40 1
(ARG1 + 52) PTRADD ARG1 52 1
(ARG2 + 52) INT_ADD ARG2 52
(ARG2 + 48) INT_ADD ARG2 48
(ARG2 + 36) INT_ADD ARG2 36
(ARG2 + 32) INT_ADD ARG2 32
(ARG2 + 44) INT_ADD ARG2 44
(ARG2 + 40) INT_ADD ARG2 40
 RETURN 0
(ARG2 + 40) CAST (ARG2 + 40)
[(ARG2 + 48)] LOAD 433 (ARG2 + 48)
 STORE 433 (ARG1 + 36) [(ARG2 + 36)]
(ARG1 + 52) CAST (ARG1 + 52)
 STORE 433 (ARG1 + 44) [(ARG2 + 44)]
(ARG1 + 36) CAST (ARG1 + 36)
 STORE 433 (ARG1 + 52) [(ARG2 + 52)]
(ARG2 + 36) CAST (ARG2 + 36)
(ARG2 + 52) CAST (ARG2 + 52)
[(ARG2 + 36)] LOAD 433 (ARG2 + 36)
 STORE 433 (ARG1 + 32) [(ARG2 + 32)]
(ARG1 + 32) CAST (ARG1 + 32)
[(ARG2 + 44)] LOAD 433 (ARG2 + 44)
(ARG1 + 48) CAST (ARG1 + 48)
[(ARG2 + 52)] LOAD 433 (ARG2 + 52)
(ARG2 + 32) CAST (ARG2 + 32)
(ARG2 + 48) CAST (ARG2 + 48)
[(ARG2 + 32)] LOAD 433 (ARG2 + 32)
(ARG1 + 44) CAST (ARG1 + 44)
 STORE 433 (ARG1 + 40) [(ARG2 + 40)]
(ARG2 + 44) CAST (ARG2 + 44)
 STORE 433 (ARG1 + 48) [(ARG2 + 48)]
(ARG1 + 40) CAST (ARG1 + 40)
[(ARG2 + 40)] LOAD 433 (ARG2 + 40)
ARG1 COPY ARG1
 CALL func ARG1 42
 CALL func ARG1 30
 CALL func ARG1 12
 CALL func ARG1 4
 CALL func ARG1 11
 CALL func ARG1 32
 CALL func ARG1 38
 CALL func ARG1 27
 CALL func ARG1 36
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 0
 CALL func ARG1 20
 CALL func ARG1 4
 CALL func ARG1 34
 CALL func ARG1 15
 CALL func ARG1 3
 CALL func ARG1 3
f() CALL func ARG2
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
 BRANCHIND f()
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCHIND ARG1
 RETURN 0 f()
 BRANCH VZERO
Invalid architecture value COPY Invalid architecture value
f() CALL func Invalid architecture value /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp 1138
32 COPY 32
0 COPY 0
64 COPY 64
16 COPY 16
 BRANCH VZERO
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp
 BRANCH VZERO
 BRANCH VZERO
f() CALL func ARG1
(f() & -256) INT_AND f() -256
(f() / 2147483647) SUBPIECE f() 0
(f() & -256) INT_OR (f() & -256) 0
0 INT_ZEXT 0
 RETURN 0 (f() & -256)
0 INT_EQUAL (f() / 2147483647) 32
f() CALL func f()
 CALL func ARG1 9
 CALL func ARG1 0
 CALL func ARG1 19
 CALL func ARG1 26
 CALL func ARG1 35
 CALL func ARG1 2
 CALL func ARG1 14
 CALL func ARG1 1
ARG1 COPY ARG1
 CALL func ARG1 41
 CALL func ARG1 33
 CALL func ARG1 29
 CALL func ARG1 37
 CALL func ARG1 31
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 10
f() CALL func ARG2
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
 BRANCHIND f()
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 CALL libcall_basic_string_thunk ARG1
ARG1 COPY ARG1
 CALL func (RSP + -136) (RSP + -168) (RSP + -168)
(RSP + -72) PTRSUB RSP -72
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -72) A_Stack[-0xb8]:8 A_Stack[-0xb0]:8 A_Stack[-0xb8]:8
 CALL func (RSP + -136)
0 COPY 0
(RSP + -168) PTRSUB RSP -168
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_NOTEQUAL f() 0
(RSP + -136) PTRSUB RSP -136
(RSP + -168) PTRSUB RSP -168
(RSP + -184) PTRSUB RSP -184
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -136) PTRSUB RSP -136
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL func (RSP + -136)
 CALL func (RSP + -168) (RSP + -72) (RSP + -72)
(RSP + -72) PTRSUB RSP -72
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CALL func (RSP + -184) 0
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
[(f() + 40)] LOAD 433 (f() + 40)
(RSP + -136) PTRSUB RSP -136
(RSP + -72) PTRSUB RSP -72
 CALL libcall_~basic_string_thunk (RSP + -72)
 CALL func (RSP + -136)
(RSP + -72) PTRSUB RSP -72
(RSP + -72) PTRSUB RSP -72
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -72)
 CALL func (RSP + -136) (RSP + -72) (RSP + -72)
(RSP + -72) PTRSUB RSP -72
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -72) (RSP + -136) (RSP + -136)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 ARG1
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 f(ARG1)
0 INT_LESSEQUAL ARG2 f(ARG1)
[ARG3] LOAD 433 ARG3
 STORE 433 ARG3 f(ARG3)
0 INT_LESSEQUAL ARG4 (f(ARG3) + 2)
0 INT_LESSEQUAL ARG4 f(ARG3)
0 INT_EQUAL ARG5 0
0 INT_EQUAL ARG5 0
[ARG1] COPY [ARG1]
f() COPY f()
 CBRANCH (ARG2 INT_LESSEQUAL f(ARG1))
0 COPY 0
 BRANCH VZERO
 RETURN 0 f()
[ARG3] COPY [ARG3]
 CBRANCH ([f(ARG1)] INT_LESS 1114112)
 CBRANCH (ARG5 INT_EQUAL 0)
(f(ARG3) + 2) PTRADD f(ARG3) 1 2
 CBRANCH (ARG4 INT_LESSEQUAL (f(ARG3) + 2))
 BRANCH VZERO
 BRANCH VZERO
(f(ARG3) + 2) COPY (f(ARG3) + 2)
(f(ARG3) + 2) PTRADD f(ARG3) 1 2
3 COPY 3
(f(ARG1) + 4) COPY (f(ARG1) + 4)
(f(ARG1) + 4) COPY (f(ARG1) + 4)
 STORE 433 f(ARG3) 65533
f(ARG3) COPY f(ARG3)
 CBRANCH ([f(ARG1)] INT_LESS 65536)
0 INT_LESS [f(ARG1)] 55296
0 INT_LESS [f(ARG1)] 1114112
 CBRANCH ([f(ARG1)] INT_LESS 55296)
 CBRANCH (57343 INT_LESS [f(ARG1)])
 STORE 433 f(ARG3) ([f(ARG1)] / 2147483647)
(f(ARG3) + 2) COPY (f(ARG3) + 2)
(f(ARG3) + 2) PTRADD f(ARG3) 1 2
 BRANCH VZERO
([f(ARG1)] / 2147483647) SUBPIECE [f(ARG1)] 0
(f(ARG1) + 4) COPY (f(ARG1) + 4)
 CBRANCH (ARG5 INT_EQUAL 0)
 CBRANCH (ARG4 INT_LESSEQUAL f(ARG3))
((([f(ARG1)] + 65536) / 2199023254528) + 55296) INT_ADD (([f(ARG1)] + 65536) / 2199023254528) 55296
(1023 & (([f(ARG1)] + 65536) / 2147483647)) INT_AND (([f(ARG1)] + 65536) / 2147483647) 1023
 STORE 433 (f(ARG3) + 2) ((1023 & (([f(ARG1)] + 65536) / 2147483647)) + 56320)
2 COPY 2
((1023 & (([f(ARG1)] + 65536) / 2147483647)) + 56320) INT_ADD (1023 & (([f(ARG1)] + 65536) / 2147483647)) 56320
(([f(ARG1)] + 65536) / 1024) INT_RIGHT ([f(ARG1)] + 65536) 10
 STORE 433 f(ARG3) ((([f(ARG1)] + 65536) / 2199023254528) + 55296)
(([f(ARG1)] + 65536) / 2199023254528) SUBPIECE (([f(ARG1)] + 65536) / 1024) 0
([f(ARG1)] + 65536) INT_SUB [f(ARG1)] 65536
 BRANCH VZERO
(f(ARG3) + 4) PTRADD f(ARG3) 2 2
(f(ARG3) + 2) PTRADD f(ARG3) 1 2
(([f(ARG1)] + 65536) / 2147483647) SUBPIECE ([f(ARG1)] + 65536) 0
(f(ARG1) + 4) COPY (f(ARG1) + 4)
0 INT_LESS 57343 [f(ARG1)]
[f(ARG1)] LOAD 433 f(ARG1)
 BRANCH VZERO
(f(ARG1) + 4) PTRADD f(ARG1) 1 4
0 INT_LESS [f(ARG1)] 65536
2 COPY 2
(f(ARG1) + 4) COPY (f(ARG1) + 4)
3 COPY 3
 STORE 433 f(ARG3) 65533
(f(ARG3) + 2) COPY (f(ARG3) + 2)
 BRANCH VZERO
 BRANCH VZERO
(f(ARG3) + 2) PTRADD f(ARG3) 1 2
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 f(ARG1)
0 INT_LESSEQUAL ARG2 f(ARG1)
0 INT_LESSEQUAL ARG2 (f(ARG1) + 2)
 STORE 433 ARG3 f(ARG3)
[ARG3] LOAD 433 ARG3
0 INT_LESSEQUAL ARG4 f(ARG3)
0 INT_EQUAL ARG5 0
0 INT_EQUAL ARG5 0
[ARG3] COPY [ARG3]
f(ARG1) COPY f(ARG1)
f() COPY f()
 RETURN 0 f()
0 COPY 0
 BRANCH VZERO
 CBRANCH (ARG2 INT_LESSEQUAL f(ARG1))
 CBRANCH (56319 INT_LESS [f(ARG1)])
(f(ARG1) + 2) COPY (f(ARG1) + 2)
 CBRANCH (ARG5 INT_EQUAL 0)
 CBRANCH (ARG2 INT_LESSEQUAL (f(ARG1) + 2))
 CBRANCH (57343 INT_LESS [(f(ARG1) + 2)])
(f(ARG1) + 2) COPY (f(ARG1) + 2)
 CBRANCH (ARG5 INT_EQUAL 0)
(f(ARG1) + 4) PTRADD f(ARG1) 2 2
([f(ARG1)] + 55296) INT_SUB [f(ARG1)] 55296
(([f(ARG1)] + 55296) * 1024) INT_MULT ([f(ARG1)] + 55296) 1024
 BRANCH VZERO
(([(f(ARG1) + 2)] + (([f(ARG1)] + 55296) * 1024)) + 9216) INT_ADD ([(f(ARG1) + 2)] + (([f(ARG1)] + 55296) * 1024)) 9216
(f(ARG1) + 4) COPY (f(ARG1) + 4)
 CBRANCH (ARG4 INT_LESSEQUAL f(ARG3))
([(f(ARG1) + 2)] + (([f(ARG1)] + 55296) * 1024)) INT_ADD [(f(ARG1) + 2)] (([f(ARG1)] + 55296) * 1024)
 CBRANCH ([f(ARG1)] INT_LESS 55296)
0 INT_LESS 56319 [f(ARG1)]
 BRANCH VZERO
(f(ARG3) + 4) PTRADD f(ARG3) 1 4
 STORE 433 f(ARG3) f(ARG1)
(f(ARG3) + 4) COPY (f(ARG3) + 4)
2 COPY 2
[f(ARG1)] INT_ZEXT [f(ARG1)]
(f(ARG1) + 2) PTRADD f(ARG1) 1 2
[f(ARG1)] LOAD 433 f(ARG1)
0 INT_LESS [f(ARG1)] 55296
[(f(ARG1) + 2)] INT_ZEXT [(f(ARG1) + 2)]
0 INT_LESS [(f(ARG1) + 2)] 56320
[(f(ARG1) + 2)] LOAD 433 (f(ARG1) + 2)
 BRANCH VZERO
 CBRANCH ([(f(ARG1) + 2)] INT_LESS 56320)
1 COPY 1
0 INT_LESS 57343 [(f(ARG1) + 2)]
 BRANCH VZERO
(f(ARG1) + 2) COPY (f(ARG1) + 2)
(f(ARG1) + 2) COPY (f(ARG1) + 2)
3 COPY 3
 BRANCH VZERO
3 COPY 3
 CBRANCH (56319 INT_LESS [f(ARG1)])
0 INT_LESS 56319 [f(ARG1)]
0 INT_LESS [f(ARG1)] 57344
 CBRANCH ([f(ARG1)] INT_LESS 57344)
ARG1 INT_ZEXT ARG1
[(Symbol + ARG1)] CAST [(Symbol + ARG1)]
([(Symbol + ARG1)] + 1) COPY ([(Symbol + ARG1)] + 1)
ARG1 CAST ARG1
[(Symbol + ARG1)] LOAD 433 (Symbol + ARG1)
(Symbol + ARG1) PTRADD Symbol ARG1 1
([(Symbol + ARG1)] + 1) INT_ADD [(Symbol + ARG1)] 1
ARG1 INT_SEXT ARG1
Symbol PTRSUB 0 Symbol
 RETURN 0 ([(Symbol + ARG1)] + 1)
[(Symbol + ARG1)] INT_SEXT [(Symbol + ARG1)]
 CALL func ARG1 ARG2 ARG3 ARG4 ARG5 1
 RETURN 0
 BRANCHIND ARG1
 RETURN 0 f(Symbol , aarch64 , amdgpu , amdil , hexagon , hsail , kalimba , nvptx , shave , sparc , xcore)
hsail COPY hsail
 BRANCH VZERO
 BRANCH VZERO
Symbol COPY Symbol
sparc COPY sparc
 BRANCH VZERO
amdil COPY amdil
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
0 COPY 0
 BRANCH VZERO
amdgpu COPY amdgpu
Symbol COPY Symbol
 BRANCH VZERO
aarch64 COPY aarch64
 BRANCH VZERO
Symbol COPY Symbol
 BRANCH VZERO
 BRANCH VZERO
nvptx COPY nvptx
xcore COPY xcore
Symbol COPY Symbol
Symbol COPY Symbol
nvptx COPY nvptx
kalimba COPY kalimba
Symbol COPY Symbol
Symbol COPY Symbol
shave COPY shave
Symbol COPY Symbol
Symbol COPY Symbol
hexagon COPY hexagon
Symbol COPY Symbol
Symbol COPY Symbol
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCHIND ARG1
 RETURN 0 f(Symbol , apple , myriad , nvidia , unknown)
 BRANCH VZERO
Symbol COPY Symbol
 BRANCH VZERO
f() CALL func Invalid VendorType! /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp 153
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp
Invalid VendorType! COPY Invalid VendorType!
Symbol COPY Symbol
 BRANCH VZERO
Symbol COPY Symbol
 BRANCH VZERO
Symbol COPY Symbol
Symbol COPY Symbol
 BRANCH VZERO
myriad COPY myriad
Symbol COPY Symbol
 BRANCH VZERO
 BRANCH VZERO
Symbol COPY Symbol
Symbol COPY Symbol
 BRANCH VZERO
f() CAST f()
 BRANCH VZERO
nvidia COPY nvidia
apple COPY apple
 BRANCH VZERO
 BRANCH VZERO
Symbol COPY Symbol
unknown COPY unknown
 BRANCH VZERO
 BRANCH VZERO
 BRANCHIND ARG1
 RETURN 0 f(Symbol , amdhsa , bitrig , cloudabi , darwin , dragonfly , elfiamcu , freebsd , haiku , kfreebsd , linux , macosx , minix , netbsd , openbsd , rtems , solaris , unknown , watchos , windows)
 BRANCH VZERO
darwin COPY darwin
Invalid OSType COPY Invalid OSType
f() CALL func Invalid OSType /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp 189
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp
 BRANCH VZERO
haiku COPY haiku
cloudabi COPY cloudabi
unknown COPY unknown
 BRANCH VZERO
windows COPY windows
 BRANCH VZERO
solaris COPY solaris
 BRANCH VZERO
Symbol COPY Symbol
 BRANCH VZERO
 BRANCH VZERO
Symbol COPY Symbol
Symbol COPY Symbol
freebsd COPY freebsd
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
rtems COPY rtems
dragonfly COPY dragonfly
 BRANCH VZERO
 BRANCH VZERO
Symbol COPY Symbol
amdhsa COPY amdhsa
f() CAST f()
linux COPY linux
Symbol COPY Symbol
Symbol COPY Symbol
bitrig COPY bitrig
Symbol COPY Symbol
kfreebsd COPY kfreebsd
watchos COPY watchos
openbsd COPY openbsd
Symbol COPY Symbol
elfiamcu COPY elfiamcu
netbsd COPY netbsd
Symbol COPY Symbol
minix COPY minix
macosx COPY macosx
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCHIND ARG1
 RETURN 0 f(Symbol , amdopencl , android , code16 , coreclr , cygnus , eabihf , gnueabi , gnueabihf , gnux32 , itanium , unknown)
 BRANCH VZERO
code16 COPY code16
Symbol COPY Symbol
 BRANCH VZERO
coreclr COPY coreclr
gnux32 COPY gnux32
 BRANCH VZERO
 BRANCH VZERO
amdopencl COPY amdopencl
Invalid EnvironmentType! COPY Invalid EnvironmentType!
f() CAST f()
f() CALL func Invalid EnvironmentType! /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp 210
 BRANCH VZERO
gnueabi COPY gnueabi
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp
 BRANCH VZERO
cygnus COPY cygnus
gnueabihf COPY gnueabihf
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
itanium COPY itanium
Symbol COPY Symbol
Symbol COPY Symbol
unknown COPY unknown
android COPY android
eabihf COPY eabihf
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
f() CALL func ARG1 ARG2 ARG1
ARG1 COPY ARG1
ARG1 COPY ARG1
f() CALL libcall_memcmp_thunk aarch64 ARG1 7
0 INT_EQUAL ARG2 7
ARG2 COPY ARG2
ARG2 COPY ARG2
34 COPY 34
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 COPY 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
35 COPY 35
(f() + 40) CAST (f() + 40)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
36 COPY 36
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
32 COPY 32
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
33 COPY 33
[(f() + 40)] LOAD 433 (f() + 40)
39 COPY 39
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
(RSP + -40) PTRSUB RSP -40
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
40 COPY 40
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
[[(f(RSP) + 16)]] LOAD 433 [(f(RSP) + 16)]
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
3 COPY 3
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
37 COPY 37
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
f(RSP) COPY f(RSP)
(f() + 40) INT_ADD f() 40
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
38 COPY 38
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
0 INT_NOTEQUAL f() [(f() + 40)]
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
24 COPY 24
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
25 COPY 25
26 COPY 26
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
22 COPY 22
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
23 COPY 23
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
29 COPY 29
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH (ARG2 INT_EQUAL 7)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
30 COPY 30
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
31 COPY 31
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH f()
27 COPY 27
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
28 COPY 28
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
14 COPY 14
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
16 COPY 16
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
17 COPY 17
15 COPY 15
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
14 COPY 14
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
19 COPY 19
 CBRANCH f()
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
21 COPY 21
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
20 COPY 20
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
0 INT_EQUAL f(RSP) 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
 CBRANCH (f(RSP) INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
18 COPY 18
8 COPY 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
f() COPY f()
2 COPY 2
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
5 COPY 5
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
4 COPY 4
41 COPY 41
(f(RSP) + 16) PTRADD f(RSP) 2 8
42 COPY 42
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH ([(f(RSP) + 16)] INT_NOTEQUAL 0)
f(RSP) COPY f(RSP)
 CBRANCH f()
3 COPY 3
f(RSP) COPY f(RSP)
1 COPY 1
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
0 COPY 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
11 COPY 11
12 COPY 12
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
13 COPY 13
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
9 COPY 9
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 16)] 0
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -40) PTRSUB RSP -40
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
10 COPY 10
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 8)] 5
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
0 COPY 0
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1136) PTRSUB RSP -1136
 STORE 433 (f(RSP) + 16) (RSP + -1136)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk shave [f(RSP)] 5
[f(RSP)] LOAD 433 f(RSP)
shave COPY shave
0 COPY 0
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 COPY 0
0 INT_EQUAL [(f(RSP) + 8)] 6
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
(RSP + -1188) PTRSUB RSP -1188
 STORE 433 (f(RSP) + 16) (RSP + -1188)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
f() CALL libcall_memcmp_thunk x86-64 [f(RSP)] 6
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
x86-64 COPY x86-64
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
f(RSP) COPY f(RSP)
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 6
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
f(RSP) COPY f(RSP)
arm64 COPY arm64
0 COPY 0
[f(RSP)] LOAD 433 f(RSP)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk arm64 [f(RSP)] 5
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk wasm32 [f(RSP)] 6
0 COPY 0
wasm32 COPY wasm32
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1132)
(RSP + -1132) PTRSUB RSP -1132
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 3)
4724116 PTRSUB 0 4724116
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk 4724116 [f(RSP)] 3
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1264) PTRSUB RSP -1264
 STORE 433 (f(RSP) + 16) (RSP + -1264)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk xcore [f(RSP)] 5
xcore COPY xcore
0 COPY 0
[f(RSP)] LOAD 433 f(RSP)
 STORE 433 (f(RSP) + 16) (RSP + -1184)
(RSP + -1184) PTRSUB RSP -1184
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 7
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
0 COPY 0
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
f(RSP) COPY f(RSP)
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 7
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk thumbeb [f(RSP)] 7
thumbeb COPY thumbeb
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1196)
(RSP + -1196) PTRSUB RSP -1196
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk kalimba [f(RSP)] 7
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
kalimba COPY kalimba
[f(RSP)] LOAD 433 f(RSP)
0 COPY 0
 STORE 433 (f(RSP) + 16) (RSP + -1140)
(RSP + -1140) PTRSUB RSP -1140
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
f(RSP) COPY f(RSP)
ppc64 COPY ppc64
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk ppc64 [f(RSP)] 5
0 COPY 0
[f(RSP)] LOAD 433 f(RSP)
 STORE 433 (f(RSP) + 16) (RSP + -1244)
(RSP + -1244) PTRSUB RSP -1244
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 6
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
0 COPY 0
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 8)] 7
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 3)
4724136 PTRSUB 0 4724136
0 COPY 0
[f(RSP)] LOAD 433 f(RSP)
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk 4724136 [f(RSP)] 3
 STORE 433 (f(RSP) + 16) (RSP + -1192)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1192) PTRSUB RSP -1192
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 3
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 3)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 COPY 0
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 4)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 4
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 8)
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 COPY 0
0 INT_EQUAL [(f(RSP) + 8)] 8
(RSP + -1240) PTRSUB RSP -1240
 STORE 433 (f(RSP) + 16) (RSP + -1240)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
0 COPY 0
[f(RSP)] LOAD 433 f(RSP)
ppc32 COPY ppc32
f() CALL libcall_memcmp_thunk ppc32 [f(RSP)] 5
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 8)] 5
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk nvptx64 [f(RSP)] 7
nvptx64 COPY nvptx64
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1176) PTRSUB RSP -1176
 STORE 433 (f(RSP) + 16) (RSP + -1176)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 STORE 433 (f(RSP) + 16) (RSP + -1120)
(RSP + -1120) PTRSUB RSP -1120
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk armeb [f(RSP)] 5
armeb COPY armeb
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 6
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 3
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_memcmp_thunk amdgcn [f(RSP)] 6
amdgcn COPY amdgcn
 STORE 433 (f(RSP) + 16) (RSP + -1228)
(RSP + -1228) PTRSUB RSP -1228
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1172)
(RSP + -1172) PTRSUB RSP -1172
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 4)
[f(RSP)] LOAD 433 f(RSP)
4723752 PTRSUB 0 4723752
f() CALL libcall_memcmp_thunk 4723752 [f(RSP)] 4
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 8)] 5
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 COPY 0
0 INT_EQUAL [(f(RSP) + 8)] 6
(RSP + -1116) PTRSUB RSP -1116
 STORE 433 (f(RSP) + 16) (RSP + -1116)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 3
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 3)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
hexagon COPY hexagon
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk hexagon [f(RSP)] 7
(RSP + -1224) PTRSUB RSP -1224
 STORE 433 (f(RSP) + 16) (RSP + -1224)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
0 COPY 0
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 7
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
[f(RSP)] LOAD 433 f(RSP)
ppc64le COPY ppc64le
f() CALL libcall_memcmp_thunk ppc64le [f(RSP)] 7
 CBRANCH (f() INT_NOTEQUAL 0)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1236)
(RSP + -1236) PTRSUB RSP -1236
wasm64 COPY wasm64
0 INT_EQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_memcmp_thunk wasm64 [f(RSP)] 6
 STORE 433 (f(RSP) + 16) (RSP + -1128)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1128) PTRSUB RSP -1128
0 INT_EQUAL f(ARG2) 10
0 COPY 0
 CBRANCH (f(ARG2) INT_EQUAL 10)
(RSP + -40) COPY (RSP + -40)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 7
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 8)] 5
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 3
(RSP + -1180) PTRSUB RSP -1180
 STORE 433 (f(RSP) + 16) (RSP + -1180)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
4723563 PTRSUB 0 4723563
f() CALL libcall_memcmp_thunk 4723563 [f(RSP)] 3
0 INT_NOTEQUAL f() 0
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_memcmp_thunk nvptx [f(RSP)] 5
nvptx COPY nvptx
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 5
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 8)] 5
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(RSP)
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 6
(RSP + -1124) PTRSUB RSP -1124
 STORE 433 (f(RSP) + 16) (RSP + -1124)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 4)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk 4723662 [f(RSP)] 4
4723662 PTRSUB 0 4723662
[f(RSP)] LOAD 433 f(RSP)
(RSP + -1232) PTRSUB RSP -1232
 STORE 433 (f(RSP) + 16) (RSP + -1232)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1108)
(RSP + -1108) PTRSUB RSP -1108
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1216)
(RSP + -1216) PTRSUB RSP -1216
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
[f(RSP)] LOAD 433 f(RSP)
sparcel COPY sparcel
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk sparcel [f(RSP)] 7
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 6
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 4)
f() CALL libcall_memcmp_thunk 4723597 [f(RSP)] 4
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
4723597 PTRSUB 0 4723597
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
(RSP + -1256) PTRSUB RSP -1256
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1256)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk amdil64 [f(RSP)] 7
amdil64 COPY amdil64
(RSP + -1160) PTRSUB RSP -1160
 STORE 433 (f(RSP) + 16) (RSP + -1160)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 4
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 7
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
sparcv9 COPY sparcv9
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_memcmp_thunk sparcv9 [f(RSP)] 7
(RSP + -1212) PTRSUB RSP -1212
 STORE 433 (f(RSP) + 16) (RSP + -1212)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 BRANCH VZERO
1 COPY 1
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 3)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 3
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 8)] 4
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 4)
(RSP + -1104) PTRSUB RSP -1104
 STORE 433 (f(RSP) + 16) (RSP + -1104)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 5
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_memcmp_thunk 4723573 [f(RSP)] 3
4723573 PTRSUB 0 4723573
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
(RSP + -1260) PTRSUB RSP -1260
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 8)] 4
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
4723757 PTRSUB 0 4723757
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk 4723757 [f(RSP)] 4
[f(RSP)] LOAD 433 f(RSP)
(RSP + -1168) PTRSUB RSP -1168
 STORE 433 (f(RSP) + 16) (RSP + -1168)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
f() CALL libcall_memcmp_thunk sparc [f(RSP)] 5
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
sparc COPY sparc
[f(RSP)] LOAD 433 f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1220) PTRSUB RSP -1220
 STORE 433 (f(RSP) + 16) (RSP + -1220)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1112) PTRSUB RSP -1112
 STORE 433 (f(RSP) + 16) (RSP + -1112)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 8)] 5
(f(RSP) + 8) PTRADD f(RSP) 1 8
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 7
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
amdil COPY amdil
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_memcmp_thunk amdil [f(RSP)] 5
 STORE 433 (f(RSP) + 16) (RSP + -1164)
(RSP + -1164) PTRSUB RSP -1164
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 CBRANCH (2 INT_LESS [(f(RSP) + 8)])
4724127 PTRSUB 0 4724127
[f(RSP)] LOAD 433 f(RSP)
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
f() CALL libcall_memcmp_thunk 4724127 [f(RSP)] 3
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 7
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
 BRANCH VZERO
1 COPY 1
4723790 PTRSUB 0 4723790
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_memcmp_thunk 4723790 [f(RSP)] 4
(RSP + -1148) PTRSUB RSP -1148
 STORE 433 (f(RSP) + 16) (RSP + -1148)
(f(RSP) + 16) PTRADD f(RSP) 2 8
1 COPY 1
 BRANCH VZERO
[f(RSP)] LOAD 433 f(RSP)
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
f() CALL libcall_memcmp_thunk mips64el [f(RSP)] 8
mips64el COPY mips64el
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 4
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
 STORE 433 (f(RSP) + 16) (RSP + -1248)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1248) PTRSUB RSP -1248
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 7
 BRANCH VZERO
1 COPY 1
0 INT_EQUAL [(f(RSP) + 8)] 5
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 6
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
1 COPY 1
 BRANCH VZERO
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
f() CALL libcall_memcmp_thunk thumb [f(RSP)] 5
thumb COPY thumb
[f(RSP)] LOAD 433 f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1200) PTRSUB RSP -1200
 STORE 433 (f(RSP) + 16) (RSP + -1200)
1 COPY 1
 BRANCH VZERO
f() CALL libcall_memcmp_thunk msp430 [f(RSP)] 6
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
msp430 COPY msp430
(RSP + -1144) PTRSUB RSP -1144
 STORE 433 (f(RSP) + 16) (RSP + -1144)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 BRANCH VZERO
1 COPY 1
spir64 COPY spir64
[f(RSP)] LOAD 433 f(RSP)
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
f() CALL libcall_memcmp_thunk spir64 [f(RSP)] 6
0 INT_EQUAL [(f(RSP) + 8)] 5
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
1 COPY 1
 BRANCH VZERO
f() CALL libcall_memcmp_thunk hsail [f(RSP)] 5
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
hsail COPY hsail
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1156) PTRSUB RSP -1156
 STORE 433 (f(RSP) + 16) (RSP + -1156)
1 COPY 1
 BRANCH VZERO
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
f() CALL libcall_memcmp_thunk mipsel [f(RSP)] 6
[f(RSP)] LOAD 433 f(RSP)
mipsel COPY mipsel
(RSP + -1252) PTRSUB RSP -1252
 STORE 433 (f(RSP) + 16) (RSP + -1252)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
1 COPY 1
 STORE 433 (f(RSP) + 16) (RSP + -1100)
(RSP + -1100) PTRSUB RSP -1100
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1208) PTRSUB RSP -1208
 STORE 433 (f(RSP) + 16) (RSP + -1208)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 BRANCH VZERO
1 COPY 1
systemz COPY systemz
[f(RSP)] LOAD 433 f(RSP)
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
f() CALL libcall_memcmp_thunk systemz [f(RSP)] 7
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1152)
(RSP + -1152) PTRSUB RSP -1152
1 COPY 1
 BRANCH VZERO
[f(RSP)] LOAD 433 f(RSP)
hsail64 COPY hsail64
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk hsail64 [f(RSP)] 7
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 5
f(RSP) COPY f(RSP)
0 INT_LESS 2 [(f(RSP) + 8)]
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_memcmp_thunk mips64 [f(RSP)] 6
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
mips64 COPY mips64
1 COPY 1
 BRANCH VZERO
 STORE 433 (f(RSP) + 16) (RSP + -1204)
(RSP + -1204) PTRSUB RSP -1204
(f(RSP) + 16) PTRADD f(RSP) 2 8
f() CALL libcall_memcmp_thunk 4723702 [f(RSP)] 3
4723702 PTRSUB 0 4723702
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
 BRANCH VZERO
1 COPY 1
(RSP + -1096) PTRSUB RSP -1096
 STORE 433 (f(RSP) + 16) (RSP + -1096)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 8)] 7
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -40) COPY (RSP + -40)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 BRANCH VZERO
aarch64 COPY aarch64
0 INT_NOTEQUAL f() 0
[[(f(RSP) + 16)]] COPY [[(f(RSP) + 16)]]
0 INT_EQUAL f() 0
f() CALL libcall_memcmp_thunk 0 f(ARG1) 10
0 COPY 0
(RSP + -40) PTRSUB RSP -40
 STORE 433 ARG1 ARG2
(ARG1 + 17) PTRADD ARG1 17 1
(ARG1 + 16) PTRADD ARG1 16 1
 RETURN 0
 STORE 433 (ARG1 + 17) 1
 STORE 433 (ARG1 + 16) 7
(ARG1 + 44) INT_ADD ARG1 44
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 36) INT_ADD ARG1 36
f() CALL func ARG1
(ARG1 + 52) INT_ADD ARG1 52
(ARG1 + 52) INT_ADD ARG1 52
(ARG1 + 40) INT_ADD ARG1 40
 CALL func ARG1 (RSP + -248) (RSP + -248)
(ARG1 + 32) INT_ADD ARG1 32
 CALL func (RSP + -56) ARG2 ARG2
 CALL func (RSP + -152) ARG2 (RSP + -120) ARG2
 CALL func (RSP + -56) ARG2 ARG2
 CALL func (RSP + -184) (RSP + -152) ARG3 (RSP + -152)
 CALL func (RSP + -56) ARG3 ARG3
 CALL func (RSP + -56) ARG4 ARG4
 CALL func (RSP + -248) (RSP + -216) ARG4 (RSP + -216)
 STORE 433 (ARG1 + 32) f(RSP)
f(RSP) CALL func f() f() f()
 STORE 433 (ARG1 + 52) 0
(RSP + -120) PTRSUB RSP -120
(RSP + -248) PTRSUB RSP -248
(RSP + -152) PTRSUB RSP -152
(RSP + -56) PTRSUB RSP -56
f() CALL libcall_data_thunk
f() CALL libcall_length_thunk
(FS_OFFSET + 40) INT_ADD 0 40
(ARG1 + 32) CAST (ARG1 + 32)
f(RSP) CALL func f() f() f()
(RSP + -152) PTRSUB RSP -152
(ARG1 + 48) CAST (ARG1 + 48)
 STORE 433 (ARG1 + 52) f()
f(RSP) CALL func f() f() f()
 CALL func (RSP + -88) 45
(RSP + -56) PTRSUB RSP -56
(RSP + -184) PTRSUB RSP -184
 CALL libcall_~basic_string_thunk (RSP + -56)
 STORE 433 (ARG1 + 36) f(RSP)
f() CALL libcall_length_thunk
(ARG1 + 44) CAST (ARG1 + 44)
(RSP + -56) PTRSUB RSP -56
(RSP + -184) PTRSUB RSP -184
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL libcall_~basic_string_thunk (RSP + -56)
 STORE 433 (ARG1 + 44) f(RSP)
40 INT_ADD 0 40
f() CALL libcall_data_thunk
(RSP + -56) PTRSUB RSP -56
(RSP + -88) PTRSUB RSP -88
f(RSP) CALL func f() f() f()
f() CALL libcall_data_thunk
 CALL func (RSP + -120) 45
(ARG1 + 52) CAST (ARG1 + 52)
(RSP + -216) PTRSUB RSP -216
[40] LOAD 433 40
 CALL libcall_~basic_string_thunk (RSP + -56)
(ARG1 + 40) CAST (ARG1 + 40)
 STORE 433 (ARG1 + 40) f(RSP)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -216) (RSP + -184) (RSP + -88) (RSP + -184)
(RSP + -120) PTRSUB RSP -120
(RSP + -216) PTRSUB RSP -216
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 STORE 433 (ARG1 + 48) 0
(RSP + -56) PTRSUB RSP -56
f() CALL libcall_data_thunk
f() CALL libcall_length_thunk
40 CAST 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(ARG1 + 52) CAST (ARG1 + 52)
(RSP + -248) PTRSUB RSP -248
 CALL libcall_~basic_string_thunk (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
f() CALL libcall_length_thunk
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(ARG1 + 36) CAST (ARG1 + 36)
(RSP + -88) PTRSUB RSP -88
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 48) INT_ADD ARG1 48
f() CALL func ARG1
(ARG1 + 52) INT_ADD ARG1 52
(ARG1 + 40) INT_ADD ARG1 40
(ARG1 + 52) INT_ADD ARG1 52
 CALL func ARG1 (RSP + -344) (RSP + -344)
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 52) INT_ADD ARG1 52
(ARG1 + 44) INT_ADD ARG1 44
(ARG1 + 36) INT_ADD ARG1 36
 CALL func (RSP + -184) ARG2 (RSP + -152) ARG2
 CALL func (RSP + -56) ARG2 ARG2
 CALL func (RSP + -56) ARG2 ARG2
 CALL func (RSP + -56) ARG3 ARG3
 CALL func (RSP + -216) (RSP + -184) ARG3 (RSP + -184)
 CALL func (RSP + -280) (RSP + -248) ARG4 (RSP + -248)
 CALL func (RSP + -56) ARG4 ARG4
 CALL func (RSP + -56) ARG5 ARG5
 CALL func (RSP + -344) (RSP + -312) ARG5 (RSP + -312)
 CALL func (RSP + -56) ARG5 ARG5
f() CALL libcall_length_thunk
(ARG1 + 52) CAST (ARG1 + 52)
(ARG1 + 32) CAST (ARG1 + 32)
(RSP + -56) PTRSUB RSP -56
 STORE 433 (ARG1 + 44) f(RSP)
f() CALL libcall_length_thunk
(RSP + -184) PTRSUB RSP -184
f(RSP) CALL func f() f() f()
f() CALL libcall_data_thunk
(RSP + -56) PTRSUB RSP -56
(ARG1 + 52) CAST (ARG1 + 52)
(RSP + -56) PTRSUB RSP -56
(RSP + -120) PTRSUB RSP -120
 CALL libcall_~basic_string_thunk (RSP + -56)
 CALL func (RSP + -248) (RSP + -216) (RSP + -120) (RSP + -216)
f() CALL libcall_data_thunk
(RSP + -216) PTRSUB RSP -216
f(RSP) CALL func f() f() f()
(RSP + -248) PTRSUB RSP -248
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
f() CALL libcall_length_thunk
(RSP + -184) PTRSUB RSP -184
f(RSP) CALL func f() f() f()
(RSP + -152) PTRSUB RSP -152
f() CALL libcall_data_thunk
 CALL libcall_~basic_string_thunk (RSP + -56)
(RSP + -216) PTRSUB RSP -216
f() CALL libcall_data_thunk
 STORE 433 (ARG1 + 36) f(RSP)
(RSP + -56) PTRSUB RSP -56
(ARG1 + 40) CAST (ARG1 + 40)
(RSP + -152) PTRSUB RSP -152
f(RSP) CALL func f() f() f()
f() CALL libcall_data_thunk
(RSP + -312) PTRSUB RSP -312
 CALL libcall_~basic_string_thunk (RSP + -56)
 CALL func (RSP + -120) 45
 CALL func (RSP + -312) (RSP + -280) (RSP + -88) (RSP + -280)
(RSP + -344) PTRSUB RSP -344
(RSP + -56) PTRSUB RSP -56
(f() + 40) INT_ADD f() 40
(RSP + -56) PTRSUB RSP -56
 CALL libcall_~basic_string_thunk (RSP + -56)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
f() CALL libcall_length_thunk
0 INT_NOTEQUAL 0 [(f() + 40)]
(RSP + -120) PTRSUB RSP -120
 STORE 433 (ARG1 + 48) f(RSP)
[(f() + 40)] LOAD 433 (f() + 40)
 CALL func (RSP + -152) 45
(RSP + -344) PTRSUB RSP -344
(RSP + -56) PTRSUB RSP -56
(RSP + -56) PTRSUB RSP -56
(ARG1 + 48) CAST (ARG1 + 48)
(RSP + -88) PTRSUB RSP -88
f() CALL libcall_data_thunk
(RSP + -248) PTRSUB RSP -248
 STORE 433 (ARG1 + 32) f(RSP)
(FS_OFFSET + 40) INT_ADD 0 40
 CALL libcall_~basic_string_thunk (RSP + -56)
(RSP + -56) PTRSUB RSP -56
(RSP + -280) PTRSUB RSP -280
f(RSP) CALL func f() f() f()
 STORE 433 (ARG1 + 52) f(RSP)
(ARG1 + 44) CAST (ARG1 + 44)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
f() CALL libcall_length_thunk
(f() + 40) CAST (f() + 40)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -88) 45
 STORE 433 (ARG1 + 40) f(RSP)
(ARG1 + 36) CAST (ARG1 + 36)
(RSP + -280) PTRSUB RSP -280
0 INT_EQUAL [(ARG1 + 52)] 0
f() CALL libcall_length_thunk
 CBRANCH ([(ARG1 + 52)] INT_EQUAL 0)
(RSP + -88) PTRSUB RSP -88
f(RSP) CALL func f() f() f()
[(ARG1 + 52)] LOAD 433 (ARG1 + 52)
(RSP + -312) PTRSUB RSP -312
 CALL libcall_~basic_string_thunk (RSP + -56)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
(ARG1 + 52) CAST (ARG1 + 52)
 STORE 433 (ARG1 + 52) f()
f() CALL libcall_length_thunk
[40] LOAD 433 40
f() CALL libcall_data_thunk
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
40 INT_ADD 0 40
(RSP + -56) PTRSUB RSP -56
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -72) PTRSUB RSP -72
40 CAST 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -56) (RSP + -72) 45 (RSP + -72)
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 RETURN 1
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL libcall___stack_chk_fail_thunk
(RSP + -88) PTRSUB RSP -88
40 CAST 40
f() CALL libcall_data_thunk
 CALL func (RSP + -56) (RSP + -88) 45 (RSP + -88)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -56) (RSP + -88) 45 (RSP + -88)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -56) (RSP + -72) 45 (RSP + -72)
(RSP + -56) PTRSUB RSP -56
[40] LOAD 433 40
A_Stack[-0x20]:8 COPY A_Stack[-0x20]:8
f() CALL libcall_length_thunk
A_Stack[-0x20]:8 COPY A_Stack[-0x20]:8
(RSP + -56) PTRSUB RSP -56
(FS_OFFSET + 40) INT_ADD 0 40
A_Stack[-0x28]:8 COPY A_Stack[-0x28]:8
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -88) PTRSUB RSP -88
A_Stack[-0x28]:8 COPY A_Stack[-0x28]:8
40 INT_ADD 0 40
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) PIECE A_Stack[-0x30]:8 A_Stack[-0x38]:8
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(RSP + -72) PTRSUB RSP -72
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 RETURN 0 (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(A_Stack[-0x30]:8 # A_Stack[-0x38]:8) COPY (A_Stack[-0x30]:8 # A_Stack[-0x38]:8)
A_Stack[-0x28]:8 COPY A_Stack[-0x28]:8
[40] LOAD 433 40
A_Stack[-0x20]:8 COPY A_Stack[-0x20]:8
(RSP + -56) PTRSUB RSP -56
A_Stack[-0x20]:8 COPY A_Stack[-0x20]:8
f() CALL libcall_length_thunk
(RSP + -56) PTRSUB RSP -56
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(FS_OFFSET + 40) INT_ADD 0 40
(RSP + -88) PTRSUB RSP -88
40 CAST 40
A_Stack[-0x28]:8 COPY A_Stack[-0x28]:8
 CALL func (RSP + -56) (RSP + -72) 45 (RSP + -72)
40 INT_ADD 0 40
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) PIECE A_Stack[-0x20]:8 A_Stack[-0x28]:8
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(RSP + -88) PTRSUB RSP -88
(RSP + -72) PTRSUB RSP -72
f() CALL libcall_data_thunk
 CALL func (RSP + -56) (RSP + -88) 45 (RSP + -88)
(RSP + -56) PTRSUB RSP -56
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CALL func (RSP + -56) (RSP + -88) 45 (RSP + -88)
 RETURN 0 (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(A_Stack[-0x20]:8 # A_Stack[-0x28]:8) COPY (A_Stack[-0x20]:8 # A_Stack[-0x28]:8)
ARG1 COPY ARG1
f() CALL func ARG1 0
f() CALL func ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
ARG1 COPY ARG1
 STORE 433 ARG1 ([f(ARG1 , RSP)] + [ARG1])
ARG1 COPY ARG1
f() CALL func ARG1 0
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1 0
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_NOTEQUAL [(ARG1 + 8)] 0
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
 CBRANCH ([(ARG1 + 8)] INT_EQUAL 0)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 STORE 433 (ARG1 + 8) [f(RSP)]
 RETURN 1
 CBRANCH f()
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_EQUAL [(ARG1 + 8)] 0
0 COPY 0
 CBRANCH (57 INT_SLESS f())
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH (f() INT_SLESS 48)
0 INT_SLESS 57 f()
 CBRANCH (f() INT_EQUAL [(f() + 40)])
 RETURN 0 (((f() * 10) + f()) + 4294967248)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (f() INT_SLESS 58)
0 COPY 0
 RETURN 1
[ARG1] LOAD 433 ARG1
f() INT_SEXT f()
(ARG1 + 8) PTRADD ARG1 1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[f(RSP)] LOAD 433 f(RSP)
 CALL libcall___assert_fail_thunk !Str.empty() && Str[0] >= '0' && Str[0] <= '9' && "Not a number" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp 875 unsigned int EatNumber(llvm::StringRef&)
!Str.empty() && Str[0] >= '0' && Str[0] <= '9' && "Not a number" COPY !Str.empty() && Str[0] >= '0' && Str[0] <= '9' && "Not a number"
f(ARG1 , RSP) CAST f(ARG1 , RSP)
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp
(f() * 10) INT_MULT f() 10
unsigned int EatNumber(llvm::StringRef&) COPY unsigned int EatNumber(llvm::StringRef&)
f(RSP) CALL func (RSP + -112) (RSP + -104) (RSP + -104)
-1 COPY -1
1 COPY 1
f(RSP) CAST f(RSP)
f(ARG1 , RSP) CALL func (RSP + -120) (ARG1 + 8) (ARG1 + 8)
([f(ARG1 , RSP)] + [ARG1]) INT_ADD [f(ARG1 , RSP)] [ARG1]
[f(ARG1 , RSP)] LOAD 433 f(ARG1 , RSP)
([(ARG1 + 8)] - [f(ARG1 , RSP)]) INT_SUB [(ARG1 + 8)] [f(ARG1 , RSP)]
(((f() * 10) + f()) + 4294967248) INT_ADD ((f() * 10) + f()) 4294967248
 CBRANCH (([f(ARG1 , RSP)] + [ARG1]) INT_EQUAL 0)
(RSP + -120) PTRSUB RSP -120
[f(RSP)] COPY [f(RSP)]
([f(ARG1 , RSP)] + [ARG1]) COPY ([f(ARG1 , RSP)] + [ARG1])
(RSP + -112) PTRSUB RSP -112
0 INT_EQUAL ([f(ARG1 , RSP)] + [ARG1]) 0
(RSP + -104) PTRSUB RSP -104
((f() * 10) + f()) INT_ADD f() (f() * 10)
 CBRANCH (47 INT_SLESS f())
0 INT_SLESS f() 58
(f() + 40) INT_ADD f() 40
(((f() * 10) + f()) + 4294967248) COPY (((f() * 10) + f()) + 4294967248)
0 INT_EQUAL f() [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
0 INT_SLESS f() 48
0 INT_NOTEQUAL [f(RSP)] 0
0 INT_SLESS 47 f()
ARG3 COPY ARG3
 STORE 433 ARG3 0
 STORE 433 ARG4 0
0 LOAD 433 ARG4
ARG4 COPY ARG4
 STORE 433 ARG5 0
0 LOAD 433 ARG5
ARG5 COPY ARG5
ARG1 COPY ARG1
ARG2 COPY ARG2
[(FS_OFFSET + 40)] COPY [(FS_OFFSET + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_NOTEQUAL f() 3
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 3)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f(RSP) INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
f() CALL libcall_memcmp_thunk f(ARG1 , RSP) f(ARG1 , RSP) f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH (f(ARG2 , RSP) INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
(RSP + -184) PTRSUB RSP -184
0 INT_SLESS f() 48
 CBRANCH (f() INT_SLESS 48)
f() CALL func (RSP + -184) 0
0 INT_EQUAL f(ARG2 , RSP) 0
 CBRANCH f()
0 INT_EQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
 CALL func (RSP + -72) 4725841
f() CALL func (RSP + -184)
4725841 PTRSUB 0 4725841
(RSP + -56) PTRSUB RSP -56
 STORE 433 [((f() * 8) + (RSP + -56))] f()
f(RSP) COPY f(RSP)
(RSP + -72) PTRSUB RSP -72
0 INT_LESS f(ARG2 , RSP) f(RSP)
 CBRANCH (f(ARG2 , RSP) INT_LESS f(RSP))
f(ARG1 , RSP) COPY f(ARG1 , RSP)
[((f() * 8) + (RSP + -56))] LOAD 433 ((f() * 8) + (RSP + -56))
f(ARG1 , RSP) COPY f(ARG1 , RSP)
(RSP + -184) PTRSUB RSP -184
f() INT_ZEXT f()
f(ARG2 , RSP) COPY f(ARG2 , RSP)
((f() * 8) + (RSP + -56)) PTRADD (RSP + -56) f() 8
 CBRANCH f()
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
 RETURN 1
f(ARG2 , RSP) COPY f(ARG2 , RSP)
(f() + 1) INT_ADD f() 1
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 BRANCH VZERO
f(ARG1 , RSP) COPY f(ARG1 , RSP)
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
0 COPY 0
 CBRANCH (57 INT_SLESS f())
0 COPY 0
0 INT_SLESS 57 f()
f() CALL func (RSP + -184) 0
(RSP + -184) PTRSUB RSP -184
f(RSP) COPY f(RSP)
f(ARG1 , RSP) COPY f(ARG1 , RSP)
0 INT_EQUAL f(RSP) 0
0 INT_NOTEQUAL f() 0
f(ARG1 , RSP) COPY f(ARG1 , RSP)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
0 INT_NOTEQUAL [f(RSP)] 0
[f(RSP)] LOAD 433 f(RSP)
-1 COPY -1
1 COPY 1
 CBRANCH ((f(ARG1 , RSP) + [f(RSP)]) INT_EQUAL 0)
0 INT_EQUAL (f(ARG1 , RSP) + [f(RSP)]) 0
(RSP + -152) PTRSUB RSP -152
(f(ARG1 , RSP) + [f(RSP)]) CAST (f(ARG1 , RSP) + [f(RSP)])
(RSP + -136) PTRSUB RSP -136
(RSP + -144) PTRSUB RSP -144
f(RSP) CAST f(RSP)
f(RSP) CALL func (RSP + -152) (RSP + -176) (RSP + -176)
(f(ARG1 , RSP) + [f(RSP)]) INT_ADD [f(RSP)] f(ARG1 , RSP)
[f(RSP)] LOAD 433 f(RSP)
f(ARG1 , RSP) CAST f(ARG1 , RSP)
(RSP + -176) PTRSUB RSP -176
[f(RSP)] COPY [f(RSP)]
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
[f(RSP)] COPY [f(RSP)]
(f(ARG2 , RSP) - [f(RSP)]) INT_SUB f(ARG2 , RSP) [f(RSP)]
(f(ARG1 , RSP) + [f(RSP)]) COPY (f(ARG1 , RSP) + [f(RSP)])
f(RSP) CAST f(RSP)
f(RSP) CALL func (RSP + -144) (RSP + -136) (RSP + -136)
(ARG1 + 48) INT_ADD ARG1 48
[(ARG1 + 48)] COPY [(ARG1 + 48)]
(ARG1 + 48) CAST (ARG1 + 48)
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
 RETURN 0 [(ARG1 + 48)]
f() CALL func ARG1
f() CALL func ARG1
 CALL func (f(RSP) / 2147483647) (f(RSP) / 4611686014132420609) ARG2 ARG3 ARG4
A_Stack[-0x40]:8 COPY A_Stack[-0x40]:8
0 INT_LESSEQUAL A_Stack[-0x40]:8 (f() / 2147483647)
 CBRANCH (A_Stack[-0x40]:8 INT_LESSEQUAL (f() / 2147483647))
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
A_Stack[-0x48]:8 COPY A_Stack[-0x48]:8
(f() / 2147483647) SUBPIECE f() 8
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() COPY f()
f(Symbol , amdopencl , android , code16 , coreclr , cygnus , eabihf , gnueabi , gnueabihf , gnux32 , itanium , unknown) CALL func f()
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -72) f(Symbol , amdopencl , android , code16 , coreclr , cygnus , eabihf , gnueabi , gnueabihf , gnux32 , itanium , unknown) f(Symbol , amdopencl , android , code16 , coreclr , cygnus , eabihf , gnueabi , gnueabihf , gnux32 , itanium , unknown)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH f()
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH (A_Stack[-0x40]:8 INT_EQUAL 0)
f() CALL libcall_memcmp_thunk (f() / 2147483647) A_Stack[-0x48]:8 A_Stack[-0x40]:8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
 BRANCH VZERO
0 INT_EQUAL f() 0
A_Stack[-0x48]:8 COPY A_Stack[-0x48]:8
A_Stack[-0x40]:8 COPY A_Stack[-0x40]:8
(f() / 2147483647) COPY (f() / 2147483647)
0 INT_EQUAL A_Stack[-0x40]:8 0
 CBRANCH (f() INT_EQUAL [(f() + 40)])
 RETURN 1
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f() [(f() + 40)]
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
f(RSP) CAST f(RSP)
f(RSP) CALL func (RSP + -144) (RSP + -136) (RSP + -136)
f(RSP) COPY f(RSP)
0 COPY 0
[(f() + 40)] LOAD 433 (f() + 40)
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
([f(RSP)] # ([f(RSP)] + (f() / 2147483647))) COPY ([f(RSP)] # ([f(RSP)] + (f() / 2147483647)))
([f(RSP)] # ([f(RSP)] + (f() / 2147483647))) PIECE [f(RSP)] ([f(RSP)] + (f() / 2147483647))
(f() + 40) CAST (f() + 40)
(f(RSP) / 2147483647) CAST (f(RSP) / 2147483647)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
[f(RSP)] COPY [f(RSP)]
[f(RSP)] LOAD 433 f(RSP)
([f(RSP)] # ([f(RSP)] + (f() / 2147483647))) COPY ([f(RSP)] # ([f(RSP)] + (f() / 2147483647)))
([f(RSP)] # ([f(RSP)] + (f() / 2147483647))) PIECE [f(RSP)] ([f(RSP)] + (f() / 2147483647))
([f(RSP)] + (f() / 2147483647)) INT_ADD [f(RSP)] (f() / 2147483647)
(RSP + -144) PTRSUB RSP -144
(RSP + -136) PTRSUB RSP -136
(RSP + -80) PTRSUB RSP -80
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) CAST (f() / 2147483647)
(f() / 2147483647) SUBPIECE f() 0
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CAST f(RSP)
f(RSP) CALL func (RSP + -152) (RSP + -80) (RSP + -80)
(RSP + -152) PTRSUB RSP -152
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
 RETURN 1
(f(RSP) / 4611686014132420609) SUBPIECE (f(RSP) / 2147483647) 0
(f(RSP) / 2147483647) INT_RIGHT f(RSP) 64
(f() / 2147483647) SUBPIECE f() 8
0 INT_NOTEQUAL [f(RSP)] 0
-1 COPY -1
([f(RSP)] + (f() / 2147483647)) COPY ([f(RSP)] + (f() / 2147483647))
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() COPY f()
(f() / 2147483647) SUBPIECE f() 8
((f() / 2147483647) - [f(RSP)]) INT_SUB (f() / 2147483647) [f(RSP)]
0 INT_EQUAL ([f(RSP)] + (f() / 2147483647)) 0
 CBRANCH (([f(RSP)] + (f() / 2147483647)) INT_EQUAL 0)
f() CALL func ARG1
f() CALL func ARG1
 CALL func (f(RSP) / 2147483647) (f(RSP) / 4611686014132420609) ARG2 ARG3 ARG4
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH f()
(f() / 2147483647) SUBPIECE f() 0
f() COPY f()
f(Symbol , amdhsa , bitrig , cloudabi , darwin , dragonfly , elfiamcu , freebsd , haiku , kfreebsd , linux , macosx , minix , netbsd , openbsd , rtems , solaris , unknown , watchos , windows) CALL func f()
 CBRANCH (A_Stack[-0x40]:8 INT_LESSEQUAL (f() / 2147483647))
(f() / 2147483647) SUBPIECE f() 8
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -72) f(Symbol , amdhsa , bitrig , cloudabi , darwin , dragonfly , elfiamcu , freebsd , haiku , kfreebsd , linux , macosx , minix , netbsd , openbsd , rtems , solaris , unknown , watchos , windows) f(Symbol , amdhsa , bitrig , cloudabi , darwin , dragonfly , elfiamcu , freebsd , haiku , kfreebsd , linux , macosx , minix , netbsd , openbsd , rtems , solaris , unknown , watchos , windows)
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 8
A_Stack[-0x40]:8 COPY A_Stack[-0x40]:8
0 INT_LESSEQUAL A_Stack[-0x40]:8 (f() / 2147483647)
(f() / 2147483647) SUBPIECE f() 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
A_Stack[-0x48]:8 COPY A_Stack[-0x48]:8
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH (A_Stack[-0x40]:8 INT_EQUAL 0)
 BRANCH VZERO
f() CALL libcall_memcmp_thunk (f() / 2147483647) A_Stack[-0x48]:8 A_Stack[-0x40]:8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
0 INT_EQUAL A_Stack[-0x40]:8 0
A_Stack[-0x48]:8 COPY A_Stack[-0x48]:8
0 INT_EQUAL f() 0
A_Stack[-0x40]:8 COPY A_Stack[-0x40]:8
(f() / 2147483647) COPY (f() / 2147483647)
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
 RETURN 1
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) CAST (f() / 2147483647)
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f() [(f() + 40)]
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
0 COPY 0
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
f(RSP) CAST f(RSP)
f(RSP) CALL func (RSP + -144) (RSP + -136) (RSP + -136)
f(RSP) COPY f(RSP)
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) INT_ADD f() 40
(f() / 2147483647) SUBPIECE f() 8
(RSP + -80) PTRSUB RSP -80
(RSP + -152) PTRSUB RSP -152
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CAST f(RSP)
f(RSP) CALL func (RSP + -152) (RSP + -80) (RSP + -80)
([f(RSP)] + (f() / 2147483647)) INT_ADD [f(RSP)] (f() / 2147483647)
(f() + 40) CAST (f() + 40)
 CBRANCH (([f(RSP)] + (f() / 2147483647)) INT_EQUAL 0)
0 INT_EQUAL ([f(RSP)] + (f() / 2147483647)) 0
((f() / 2147483647) - [f(RSP)]) INT_SUB (f() / 2147483647) [f(RSP)]
([f(RSP)] # ([f(RSP)] + (f() / 2147483647))) COPY ([f(RSP)] # ([f(RSP)] + (f() / 2147483647)))
([f(RSP)] # ([f(RSP)] + (f() / 2147483647))) COPY ([f(RSP)] # ([f(RSP)] + (f() / 2147483647)))
(f(RSP) / 4611686014132420609) SUBPIECE (f(RSP) / 2147483647) 0
(f(RSP) / 2147483647) INT_RIGHT f(RSP) 64
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
[f(RSP)] LOAD 433 f(RSP)
([f(RSP)] # ([f(RSP)] + (f() / 2147483647))) PIECE [f(RSP)] ([f(RSP)] + (f() / 2147483647))
(RSP + -136) PTRSUB RSP -136
(RSP + -144) PTRSUB RSP -144
([f(RSP)] # ([f(RSP)] + (f() / 2147483647))) PIECE [f(RSP)] ([f(RSP)] + (f() / 2147483647))
-1 COPY -1
([f(RSP)] + (f() / 2147483647)) COPY ([f(RSP)] + (f() / 2147483647))
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [f(RSP)] 0
(f(RSP) / 2147483647) CAST (f(RSP) / 2147483647)
(f(RSP) / 2147483647) SUBPIECE f(RSP) 8
[f(RSP)] COPY [f(RSP)]
(f() / 2147483647) SUBPIECE f() 8
(f(RSP) / 2147483647) SUBPIECE f(RSP) 0
f() COPY f()
 STORE 433 ARG2 10
 STORE 433 ARG2 10
f(ARG2) LOAD 433 ARG2
f(ARG2) LOAD 433 ARG2
 STORE 433 ARG2 10
f(ARG2) LOAD 433 ARG2
f(ARG2) LOAD 433 ARG2
 CALL func ARG1 ARG2 ARG3 ARG4
 STORE 433 ARG2 8
f(ARG2) LOAD 433 ARG2
 STORE 433 ARG3 4
 STORE 433 ARG3 4
 STORE 433 ARG3 (f(ARG2) + 4)
 STORE 433 ARG4 0
 STORE 433 ARG4 0
f() CALL func ARG1
 BRANCHIND f()
 CBRANCH (f(ARG2) INT_NOTEQUAL 10)
 RETURN 0 1
1 COPY 1
 RETURN 0 0
 RETURN 0 0
0 COPY 0
0 COPY 0
 CBRANCH (f(ARG2) INT_EQUAL 0)
 CBRANCH (f(ARG2) INT_EQUAL 0)
 CBRANCH (f(ARG2) INT_LESS 4)
(f(ARG2) + 4) INT_SUB f(ARG2) 4
 BRANCH VZERO
0 INT_NOTEQUAL f(ARG2) 10
 CALL func unexpected OS for Darwin triple /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp 935
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp
unexpected OS for Darwin triple COPY unexpected OS for Darwin triple
0 INT_EQUAL f(ARG2) 0
 BRANCH VZERO
0 INT_EQUAL f(ARG2) 0
0 INT_LESS f(ARG2) 4
f() CALL func ARG1
 CALL func ARG1 ARG2 ARG3 ARG4
f() CALL func ARG1
 STORE 433 ARG2 f()
 STORE 433 ARG2 5
f(ARG2) LOAD 433 ARG2
 STORE 433 ARG3 0
 STORE 433 ARG4 0
 BRANCHIND f()
 RETURN 0
 CBRANCH (f() INT_EQUAL 3)
5 COPY 5
 BRANCH VZERO
7 COPY 7
 CBRANCH (f(ARG2) INT_EQUAL 0)
 BRANCH VZERO
0 INT_EQUAL f() 3
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp
conflicting triple info COPY conflicting triple info
0 INT_EQUAL f(ARG2) 0
unexpected OS for Darwin triple COPY unexpected OS for Darwin triple
 CALL func unexpected OS for Darwin triple /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp 974
 BRANCH VZERO
 CALL func conflicting triple info /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp 993
 CALL func ARG1 ARG2 ARG3 ARG4
f() CALL func ARG1
 STORE 433 ARG2 2
f(ARG2) LOAD 433 ARG2
 STORE 433 ARG2 2
 STORE 433 ARG3 0
 STORE 433 ARG4 0
0 INT_EQUAL f() 5
 CBRANCH (f() INT_EQUAL 5)
 CBRANCH (f() INT_SLESS 6)
 RETURN 0
 CBRANCH (f() INT_EQUAL 2)
 RETURN 0
 RETURN 0
 RETURN 0
0 INT_EQUAL f() 9
 CBRANCH (f() INT_EQUAL 9)
0 INT_EQUAL f() 2
 CALL func unexpected OS for Darwin triple /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp 1000
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp
unexpected OS for Darwin triple COPY unexpected OS for Darwin triple
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
 CBRANCH (f() INT_EQUAL 27)
0 INT_NOTEQUAL f(ARG2) 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp
 CALL func conflicting triple info /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/lib/Support/Triple.cpp 1017
conflicting triple info COPY conflicting triple info
0 INT_SLESS f() 6
0 INT_EQUAL f() 27
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
f() CALL func ARG1
ARG1 CAST ARG1
 STORE 433 ARG1 ARG2
 STORE 433 (ARG1 + 8) ARG3
 CBRANCH (f() INT_NOTEQUAL 1)
0 INT_NOTEQUAL f() 1
(ARG1 + 16) CAST (ARG1 + 16)
 STORE 433 (ARG1 + 16) 5
(ARG1 + 17) INT_ADD ARG1 17
 STORE 433 (ARG1 + 17) 3
(ARG1 + 17) CAST (ARG1 + 17)
isValid() && "Invalid twine!" COPY isValid() && "Invalid twine!"
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h
llvm::Twine::Twine(const llvm::StringRef&, const char*) COPY llvm::Twine::Twine(const llvm::StringRef&, const char*)
 CALL libcall___assert_fail_thunk isValid() && "Invalid twine!" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/Twine.h 370 llvm::Twine::Twine(const llvm::StringRef&, const char*)
 RETURN 0
 RETURN 1
 CALL func ARG1 ARG2 ARG3 ARG2
ARG1 COPY ARG1
 RETURN 0 ARG1
ARG3 COPY ARG3
f() CALL func ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
[40] LOAD 433 40
(RSP + -200) PTRSUB RSP -200
(RSP + -168) PTRSUB RSP -168
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 0
(RSP + -296) PTRSUB RSP -296
(f() / 2147483647) SUBPIECE f() 8
(RSP + -136) PTRSUB RSP -136
(f() / 2147483647) SUBPIECE f() 8
 CALL func ARG1 (RSP + -40) (RSP + -40)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -136) 4726128
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -104) PTRSUB RSP -104
(f() / 2147483647) SUBPIECE f() 0
(RSP + -40) PTRSUB RSP -40
(f() / 2147483647) SUBPIECE f() 0
f() CALL func ARG1
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -200) (RSP + -296) (RSP + -296)
40 INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 0
(RSP + -72) PTRSUB RSP -72
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -168) (RSP + -232) (RSP + -200) (RSP + -232)
(RSP + -104) PTRSUB RSP -104
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -40) PTRSUB RSP -40
40 CAST 40
(RSP + -248) PTRSUB RSP -248
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
4726128 PTRSUB 0 4726128
(RSP + -264) PTRSUB RSP -264
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -104) (RSP + -168) (RSP + -136) (RSP + -168)
(RSP + -232) PTRSUB RSP -232
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -232) (RSP + -264) 4726128 (RSP + -264)
4726128 PTRSUB 0 4726128
(RSP + -232) PTRSUB RSP -232
(f() / 2147483647) SUBPIECE f() 8
(RSP + -136) PTRSUB RSP -136
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -72) (RSP + -248) (RSP + -248)
 CALL func (RSP + -40) (RSP + -104) (RSP + -72) (RSP + -104)
(RSP + -168) PTRSUB RSP -168
(f() / 2147483647) SUBPIECE f() 8
(RSP + -72) PTRSUB RSP -72
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
 CALL func ARG1 A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
f(Symbol , apple , myriad , nvidia , unknown) CALL func ARG2
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -40) PTRSUB RSP -40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -40) f(Symbol , apple , myriad , nvidia , unknown) f(Symbol , apple , myriad , nvidia , unknown)
40 INT_ADD 0 40
[40] LOAD 433 40
40 CAST 40
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
f() CALL func ARG1
A_Stack[-0x70]:8 COPY A_Stack[-0x70]:8
(f() + 40) CAST (f() + 40)
 CALL func (RSP + -120) 4723533
A_Stack[-0x70]:8 COPY A_Stack[-0x70]:8
 CBRANCH ((f() / 4611686014132420609) INT_EQUAL A_Stack[-0x70]:8)
4723533 PTRSUB 0 4723533
(f() / 2147483647) SUBPIECE f() 0
A_Stack[-0x78]:8 COPY A_Stack[-0x78]:8
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
A_Stack[-0x78]:8 COPY A_Stack[-0x78]:8
0 INT_EQUAL (f() / 4611686014132420609) A_Stack[-0x70]:8
(RSP + -120) PTRSUB RSP -120
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL f() [(f() + 40)]
f() COPY f()
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
0 COPY 0
(f() / 2147483647) INT_RIGHT f() 64
(FS_OFFSET + 40) INT_ADD 0 40
[(f() + 40)] LOAD 433 (f() + 40)
A_Stack[-0x70]:8 COPY A_Stack[-0x70]:8
0 INT_XOR f() 1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
A_Stack[-0x78]:8 COPY A_Stack[-0x78]:8
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 RETURN 0 0
 CALL libcall___stack_chk_fail_thunk
 CBRANCH (A_Stack[-0x70]:8 INT_EQUAL 0)
(f() / 2147483647) SUBPIECE f() 8
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL libcall_memcmp_thunk (f() / 2147483647) A_Stack[-0x78]:8 A_Stack[-0x70]:8
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
0 INT_EQUAL A_Stack[-0x70]:8 0
0 INT_EQUAL f() 0
f() CALL func ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -104) (RSP + -168) (RSP + -136) (RSP + -168)
(RSP + -200) PTRSUB RSP -200
(RSP + -360) PTRSUB RSP -360
(RSP + -264) PTRSUB RSP -264
(RSP + -328) PTRSUB RSP -328
 CALL func (RSP + -296) (RSP + -360) (RSP + -328) (RSP + -360)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -136) 4726128
(f() / 2147483647) SUBPIECE f() 0
(RSP + -296) PTRSUB RSP -296
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -72) (RSP + -440) (RSP + -440)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
4726128 PTRSUB 0 4726128
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -40) (RSP + -104) (RSP + -72) (RSP + -104)
(f() / 2147483647) SUBPIECE f() 8
f() CALL func ARG1
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -232) (RSP + -296) (RSP + -264) (RSP + -296)
(RSP + -296) PTRSUB RSP -296
(RSP + -376) PTRSUB RSP -376
(RSP + -264) PTRSUB RSP -264
 CALL func (RSP + -136) 4726128
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -200) (RSP + -440) (RSP + -440)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -232) PTRSUB RSP -232
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -136) PTRSUB RSP -136
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func ARG1 (RSP + -40) (RSP + -40)
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -232) (RSP + -296) 4726128 (RSP + -296)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -72) PTRSUB RSP -72
4726128 PTRSUB 0 4726128
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
4726128 PTRSUB 0 4726128
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -408) PTRSUB RSP -408
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -168) (RSP + -232) (RSP + -200) (RSP + -232)
(RSP + -360) PTRSUB RSP -360
 CALL func (RSP + -360) (RSP + -408) 4726128 (RSP + -408)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -72) (RSP + -376) (RSP + -376)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -104) PTRSUB RSP -104
(RSP + -40) PTRSUB RSP -40
(A_Stack[-0x120]:8 # A_Stack[-0x128]:8) PIECE A_Stack[-0x120]:8 A_Stack[-0x128]:8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(A_Stack[-0x100]:8 # A_Stack[-0x108]:8) PIECE A_Stack[-0x100]:8 A_Stack[-0x108]:8
(RSP + -136) PTRSUB RSP -136
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -328) (RSP + -392) (RSP + -392)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -168) PTRSUB RSP -168
(RSP + -72) PTRSUB RSP -72
(A_Stack[-0x180]:8 # A_Stack[-0x188]:8) PIECE A_Stack[-0x180]:8 A_Stack[-0x188]:8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(A_Stack[-0x170]:8 # A_Stack[-0x178]:8) PIECE A_Stack[-0x170]:8 A_Stack[-0x178]:8
f() CALL func ARG1
(RSP + -104) PTRSUB RSP -104
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -104) (RSP + -168) (RSP + -136) (RSP + -168)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -40) PTRSUB RSP -40
(f() / 2147483647) SUBPIECE f() 8
(RSP + -440) PTRSUB RSP -440
(f() / 2147483647) SUBPIECE f() 8
(RSP + -328) PTRSUB RSP -328
f() CALL func ARG1
(RSP + -392) PTRSUB RSP -392
 CALL func (RSP + -40) (RSP + -104) (RSP + -72) (RSP + -104)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -104) PTRSUB RSP -104
(RSP + -40) PTRSUB RSP -40
(f() / 2147483647) SUBPIECE f() 0
f() CALL func ARG1
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -40) PTRSUB RSP -40
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -72) PTRSUB RSP -72
(f() / 2147483647) SUBPIECE f() 8
(RSP + -232) PTRSUB RSP -232
(f() / 2147483647) SUBPIECE f() 0
(RSP + -440) PTRSUB RSP -440
(f() / 2147483647) SUBPIECE f() 8
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 0
 CALL func ARG1 (RSP + -40) (RSP + -40)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
f() CALL func ARG1
(RSP + -168) PTRSUB RSP -168
(RSP + -296) PTRSUB RSP -296
(f() / 2147483647) SUBPIECE f() 0
4726128 PTRSUB 0 4726128
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -264) 4726128
(RSP + -232) PTRSUB RSP -232
(f() / 2147483647) SUBPIECE f() 0
(RSP + -136) PTRSUB RSP -136
4726128 PTRSUB 0 4726128
(A_Stack[-0x190]:8 # A_Stack[-0x198]:8) PIECE A_Stack[-0x190]:8 A_Stack[-0x198]:8
(RSP + -136) PTRSUB RSP -136
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -232) PTRSUB RSP -232
(f() / 2147483647) SUBPIECE f() 8
(RSP + -264) PTRSUB RSP -264
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -168) PTRSUB RSP -168
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -200) (RSP + -264) (RSP + -264)
(RSP + -104) PTRSUB RSP -104
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -168) (RSP + -232) (RSP + -200) (RSP + -232)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -168) PTRSUB RSP -168
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 RETURN 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CALL func ARG1 A_Stack[-0x28]:8 A_Stack[-0x20]:8 A_Stack[-0x28]:8
f(Symbol , amdhsa , bitrig , cloudabi , darwin , dragonfly , elfiamcu , freebsd , haiku , kfreebsd , linux , macosx , minix , netbsd , openbsd , rtems , solaris , unknown , watchos , windows) CALL func ARG2
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -40) f(Symbol , amdhsa , bitrig , cloudabi , darwin , dragonfly , elfiamcu , freebsd , haiku , kfreebsd , linux , macosx , minix , netbsd , openbsd , rtems , solaris , unknown , watchos , windows) f(Symbol , amdhsa , bitrig , cloudabi , darwin , dragonfly , elfiamcu , freebsd , haiku , kfreebsd , linux , macosx , minix , netbsd , openbsd , rtems , solaris , unknown , watchos , windows)
40 INT_ADD 0 40
[40] LOAD 433 40
40 CAST 40
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -40) PTRSUB RSP -40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
ARG1 COPY ARG1
ARG2 COPY ARG2
ARG3 COPY ARG3
(RSP + -392) PTRSUB RSP -392
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -40) PTRSUB RSP -40
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -264) 4726128
 CALL func (RSP + -232) (RSP + -296) (RSP + -264) (RSP + -296)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -104) PTRSUB RSP -104
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
40 CAST 40
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -168) (RSP + -232) (RSP + -200) (RSP + -232)
f() CALL func ARG1
(f() / 2147483647) SUBPIECE f() 0
(RSP + -328) PTRSUB RSP -328
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -104) PTRSUB RSP -104
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -200) PTRSUB RSP -200
(RSP + -232) PTRSUB RSP -232
(RSP + -376) PTRSUB RSP -376
(RSP + -200) PTRSUB RSP -200
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func ARG1
(RSP + -40) PTRSUB RSP -40
 CALL func (RSP + -200) (RSP + -376) (RSP + -376)
(RSP + -72) PTRSUB RSP -72
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
4726128 PTRSUB 0 4726128
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -296) (RSP + -360) (RSP + -328) (RSP + -360)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -264) PTRSUB RSP -264
(RSP + -168) PTRSUB RSP -168
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -136) PTRSUB RSP -136
(f() / 2147483647) SUBPIECE f() 8
(RSP + -264) PTRSUB RSP -264
 CALL func ARG1 (RSP + -40) (RSP + -40)
 CALL func (RSP + -72) (RSP + -440) (RSP + -440)
(RSP + -232) PTRSUB RSP -232
(f() / 2147483647) SUBPIECE f() 0
(RSP + -72) PTRSUB RSP -72
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 8
(RSP + -440) PTRSUB RSP -440
(RSP + -360) PTRSUB RSP -360
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -168) PTRSUB RSP -168
40 INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
 CALL func (RSP + -360) (RSP + -408) 4726128 (RSP + -408)
(f() / 2147483647) SUBPIECE f() 8
[40] LOAD 433 40
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -136) 4726128
(f() / 2147483647) SUBPIECE f() 0
4726128 PTRSUB 0 4726128
(f() / 2147483647) SUBPIECE f() 8
(RSP + -296) PTRSUB RSP -296
(RSP + -408) PTRSUB RSP -408
 CALL func (RSP + -104) (RSP + -168) (RSP + -136) (RSP + -168)
(f() / 2147483647) SUBPIECE f() 0
(RSP + -360) PTRSUB RSP -360
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func ARG1
(RSP + -328) PTRSUB RSP -328
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -40) (RSP + -104) (RSP + -72) (RSP + -104)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -296) PTRSUB RSP -296
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
4726128 PTRSUB 0 4726128
 CALL func (RSP + -328) (RSP + -392) (RSP + -392)
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 8
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
f() CALL func ARG1
(ARG1 + 52) INT_ADD ARG1 52
 CALL func ARG1 A_Stack[-0x68]:8 A_Stack[-0x60]:8 A_Stack[-0x68]:8
 CALL func ARG1 f() f() f()
(ARG1 + 52) INT_ADD ARG1 52
f(Symbol , amdopencl , android , code16 , coreclr , cygnus , eabihf , gnueabi , gnueabihf , gnux32 , itanium , unknown) CALL func ARG2
f(Symbol , amdopencl , android , code16 , coreclr , cygnus , eabihf , gnueabi , gnueabihf , gnux32 , itanium , unknown) CALL func ARG2
(f() + 40) INT_ADD f() 40
0 INT_EQUAL [(ARG1 + 52)] f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(ARG1 + 52) CAST (ARG1 + 52)
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH ([(ARG1 + 52)] INT_EQUAL f())
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
[(ARG1 + 52)] LOAD 433 (ARG1 + 52)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -72) PTRSUB RSP -72
(RSP + -168) PTRSUB RSP -168
 CALL func (RSP + -232) 4726128
 CALL func (RSP + -200) f(Symbol , amdopencl , android , code16 , coreclr , cygnus , eabihf , gnueabi , gnueabihf , gnux32 , itanium , unknown) f(Symbol , amdopencl , android , code16 , coreclr , cygnus , eabihf , gnueabi , gnueabihf , gnux32 , itanium , unknown)
(RSP + -104) PTRSUB RSP -104
(RSP + -136) PTRSUB RSP -136
(ARG1 + 52) CAST (ARG1 + 52)
[(ARG1 + 52)] LOAD 433 (ARG1 + 52)
(RSP + -200) PTRSUB RSP -200
(RSP + -168) PTRSUB RSP -168
f() CALL libcall_data_thunk
 CALL func (RSP + -136) f() f()
(RSP + -104) PTRSUB RSP -104
(RSP + -136) PTRSUB RSP -136
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -168) (RSP + -200) (RSP + -232) (RSP + -200)
 CALL func (RSP + -72) (RSP + -104) (RSP + -104)
4726128 PTRSUB 0 4726128
 CALL libcall_~basic_string_thunk (RSP + -72)
 CALL func (RSP + -104) f(Symbol , amdopencl , android , code16 , coreclr , cygnus , eabihf , gnueabi , gnueabihf , gnux32 , itanium , unknown) f(Symbol , amdopencl , android , code16 , coreclr , cygnus , eabihf , gnueabi , gnueabihf , gnux32 , itanium , unknown)
f() CALL libcall_length_thunk
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -104) (RSP + -168) (RSP + -136) (RSP + -168)
(RSP + -232) PTRSUB RSP -232
(RSP + -104) PTRSUB RSP -104
 BRANCH VZERO
(RSP + -232) PTRSUB RSP -232
f() CALL func [(ARG1 + 52)]
 RETURN 0
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
(ARG1 + 48) INT_ADD ARG1 48
(ARG1 + 48) INT_ADD ARG1 48
 CALL func ARG1 f() f() f()
 CALL func ARG1 A_Stack[-0x58]:8 A_Stack[-0x50]:8 A_Stack[-0x58]:8
f() CALL func ARG2
f() CALL func ARG2
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL [(ARG1 + 48)] 0
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) INT_ADD 0 40
(ARG1 + 48) CAST (ARG1 + 48)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
0 INT_NOTEQUAL 0 [(f() + 40)]
 CBRANCH ([(ARG1 + 48)] INT_EQUAL 0)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
f() CALL libcall_length_thunk
 BRANCH VZERO
(RSP + -184) PTRSUB RSP -184
4726128 PTRSUB 0 4726128
(RSP + -88) PTRSUB RSP -88
[(ARG1 + 48)] LOAD 433 (ARG1 + 48)
(RSP + -216) PTRSUB RSP -216
(RSP + -56) PTRSUB RSP -56
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -88) (RSP + -152) (RSP + -120) (RSP + -152)
(RSP + -216) PTRSUB RSP -216
 CALL func (RSP + -216) 4726128
(RSP + -184) PTRSUB RSP -184
(RSP + -152) PTRSUB RSP -152
f() CALL libcall_data_thunk
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -184) f(Symbol , amdopencl , android , code16 , coreclr , cygnus , eabihf , gnueabi , gnueabihf , gnux32 , itanium , unknown) f(Symbol , amdopencl , android , code16 , coreclr , cygnus , eabihf , gnueabi , gnueabihf , gnux32 , itanium , unknown)
(RSP + -120) PTRSUB RSP -120
(RSP + -120) PTRSUB RSP -120
(ARG1 + 48) CAST (ARG1 + 48)
 CALL func (RSP + -152) (RSP + -184) (RSP + -216) (RSP + -184)
 CALL func (RSP + -56) (RSP + -88) (RSP + -88)
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -88) f() f()
f(Symbol , amdopencl , android , code16 , coreclr , cygnus , eabihf , gnueabi , gnueabihf , gnux32 , itanium , unknown) CALL func [(ARG1 + 48)]
 CALL libcall_~basic_string_thunk (RSP + -56)
(RSP + -56) PTRSUB RSP -56
 CALL func (RSP + -120) f() f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 0
 RETURN 1
ARG3 COPY ARG3
ARG1 COPY ARG1
ARG2 COPY ARG2
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -40) (RSP + -104) (RSP + -72) (RSP + -104)
(RSP + -232) PTRSUB RSP -232
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -200) PTRSUB RSP -200
 CALL func (RSP + -136) 4726128
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -168) PTRSUB RSP -168
4726128 PTRSUB 0 4726128
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
4726128 PTRSUB 0 4726128
(f() / 2147483647) SUBPIECE f() 0
(RSP + -136) PTRSUB RSP -136
40 CAST 40
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -200) PTRSUB RSP -200
 CALL func ARG1 (RSP + -40) (RSP + -40)
(RSP + -168) PTRSUB RSP -168
(RSP + -104) PTRSUB RSP -104
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -248) PTRSUB RSP -248
(RSP + -136) PTRSUB RSP -136
 CALL func (RSP + -232) (RSP + -264) 4726128 (RSP + -264)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
f() CALL func ARG1
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -104) PTRSUB RSP -104
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
(RSP + -72) PTRSUB RSP -72
 CALL func (RSP + -200) (RSP + -248) (RSP + -248)
40 INT_ADD 0 40
 CALL func (RSP + -168) (RSP + -232) (RSP + -200) (RSP + -232)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
[40] LOAD 433 40
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(RSP + -40) PTRSUB RSP -40
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) SUBPIECE f() 0
 CALL func (RSP + -104) (RSP + -168) (RSP + -136) (RSP + -168)
 CALL func (RSP + -72) (RSP + -296) (RSP + -296)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(RSP + -264) PTRSUB RSP -264
(RSP + -72) PTRSUB RSP -72
(RSP + -40) PTRSUB RSP -40
(f() / 2147483647) SUBPIECE f() 0
f() CALL func ARG1
(RSP + -232) PTRSUB RSP -232
(RSP + -296) PTRSUB RSP -296
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() / 2147483647) SUBPIECE f() 0
 RETURN 1
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 RETURN 0
 CALL libcall___stack_chk_fail_thunk
f() CALL func ARG1
0 INT_ZEXT 0
 RETURN 0 (f() & -256)
0 INT_EQUAL (f() / 2147483647) 64
f() CALL func f()
(f() & -256) INT_AND f() -256
(f() / 2147483647) SUBPIECE f() 0
(f() & -256) INT_OR (f() & -256) 0
f() CALL func ARG1
0 INT_ZEXT 0
 RETURN 0 (f() & -256)
0 INT_EQUAL (f() / 2147483647) 16
f() CALL func f()
(f() & -256) INT_AND f() -256
(f() / 2147483647) SUBPIECE f() 0
(f() & -256) INT_OR (f() & -256) 0
 CALL func ARG1 7
ARG1 COPY ARG1
 CALL func ARG1 11
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 4
 CALL func ARG1 19
 CALL func ARG1 15
 CALL func ARG1 9
 CALL func ARG1 0
f() CALL func ARG2
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
 BRANCHIND f()
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
 RETURN 1
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 CALL func ARG1 ARG2 ARG2
 CALL func ARG1 3
 CALL func ARG1 21
 CALL func ARG1 16
 CALL func ARG1 10
 CALL func ARG1 0
 CALL func ARG1 6
ARG1 COPY ARG1
 CALL func ARG1 12
f() CALL func ARG2
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
 BRANCHIND f()
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
 RETURN 0 ARG1
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
 BRANCH VZERO
[ARG1] LOAD 433 ARG1
ARG1 PTRSUB ARG1 0
ARG1 PTRSUB ARG1 0
0 INT_EQUAL [ARG1] 0
[ARG1] LOAD 433 ARG1
 CBRANCH ([ARG1] INT_EQUAL 0)
ARG1 CAST ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(ARG1 + 8) PTRADD ARG1 8 1
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
 RETURN 1
0 INT_NOTEQUAL [(ARG1 + 8)] 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
[40] LOAD 433 40
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 0)
40 CAST 40
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
0 COPY 0
 RETURN 1
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
f(Symbol) CALL func ARG1 ARG2 ARG1
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f(Symbol) 0
0 INT_NOTEQUAL 0 [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f(Symbol) INT_EQUAL 0)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CBRANCH (([(f(Symbol) + 16)] / 2147483647) INT_EQUAL f(Symbol))
(f(Symbol) + 32) PTRADD f(Symbol) 4 8
6954848 CAST 6954848
([(f(Symbol) + 16)] / 4611686014132420609) SUBPIECE ([(f(Symbol) + 16)] / 2147483647) 0
[(f(Symbol) + 16)] CAST [(f(Symbol) + 16)]
6954848 PTRSUB 0 6954848
 BRANCH VZERO
([(f(Symbol) + 16)] / 2147483647) INT_RIGHT [(f(Symbol) + 16)] 32
0 INT_NOTEQUAL f(Symbol) 6954848
0 INT_NOTEQUAL ([(f(Symbol) + 16)] / 4611686014132420609) 0
 CBRANCH (([(f(Symbol) + 16)] / 4611686014132420609) INT_NOTEQUAL 0)
 CBRANCH (f(Symbol) INT_NOTEQUAL 6954848)
Symbol PTRSUB 0 Symbol
A_Stack[-0x38]:8 COPY A_Stack[-0x38]:8
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
 CALL func (RSP + -56)
 RETURN 0 f(Symbol)
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 BRANCH VZERO
f() COPY f()
(RSP + -56) PTRSUB RSP -56
f() CAST f()
f() CALL func (RSP + -56)
[(f(Symbol) + 16)] LOAD 433 (f(Symbol) + 16)
[f(Symbol)] LOAD 433 f(Symbol)
f(Symbol) COPY f(Symbol)
(f(Symbol) + 8) PTRADD f(Symbol) 1 8
(f(Symbol) + 24) PTRADD f(Symbol) 3 8
([(f(Symbol) + 16)] / 2147483647) SUBPIECE [(f(Symbol) + 16)] 0
(f(Symbol) + 16) PTRADD f(Symbol) 2 8
0 INT_EQUAL ([(f(Symbol) + 16)] / 2147483647) f(Symbol)
 CALL func (RSP + -56) generic
[(f(Symbol) + 8)] LOAD 433 (f(Symbol) + 8)
(RSP + -56) PTRSUB RSP -56
generic COPY generic
[(f(Symbol) + 24)] LOAD 433 (f(Symbol) + 24)
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
f() CALL func ARG1
(ARG3 # ARG2) PIECE ARG3 ARG2
0 INT_EQUAL ARG3 0
 BRANCHIND f()
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f(ARG2 , ARG3) / 2147483647) SUBPIECE f(ARG2 , ARG3) 0
(f(ARG2 , ARG3) / 4611686014132420609) SUBPIECE (f(ARG2 , ARG3) / 2147483647) 0
(f() + 40) INT_ADD f() 40
f() CALL func (f(ARG2 , ARG3) / 2147483647) (f(ARG2 , ARG3) / 4611686014132420609) (f(ARG2 , ARG3) / 2147483647)
(f() # f()) PIECE f() f()
(f() # f()) PIECE f() f()
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
0 INT_NOTEQUAL f() [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
(f(ARG2 , ARG3) / 2147483647) INT_RIGHT f(ARG2 , ARG3) 64
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) INT_RIGHT f() 64
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (ARG3 INT_EQUAL 0)
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_memcmp_thunk (f() / 2147483647) f() f()
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
 CBRANCH ((f() / 4611686014132420609) INT_EQUAL f())
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 INT_EQUAL f() 0
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH (3 INT_SLESS f())
(RSP + -152) PTRSUB RSP -152
(f(Symbol) / 2147483647) SUBPIECE f(Symbol) 0
(f(Symbol) / 2147483647) SUBPIECE f(Symbol) 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
0 INT_LESS 1 (f() + 6)
arm926ej-s COPY arm926ej-s
(f() # f()) COPY (f() # f())
 CALL func (RSP + -152) arm926ej-s
 CBRANCH (1 INT_LESS (f() + 6))
 BRANCH VZERO
(f() + 6) INT_SUB f() 6
(f() # f()) PIECE f() f()
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH f()
f() COPY f()
0 INT_EQUAL (f() / 4611686014132420609) 0
 CALL func (RSP + -56) arm1176jzf-s
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() # f()) PIECE f() f()
(RSP + -56) PTRSUB RSP -56
(f() # f()) PIECE f() f()
arm1176jzf-s COPY arm1176jzf-s
 BRANCH VZERO
(f() # f()) COPY (f() # f())
 CBRANCH ((f() / 4611686014132420609) INT_EQUAL 0)
(f() # f()) PIECE f() f()
f() COPY f()
 CBRANCH (f() INT_EQUAL 3)
 CALL func (RSP + -152) arm1176jzf-s
(f() # f()) PIECE f() f()
(f() # f()) COPY (f() # f())
 BRANCH VZERO
(f(Symbol) / 2147483647) SUBPIECE f(Symbol) 0
(f(Symbol) / 2147483647) SUBPIECE f(Symbol) 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL f() 7
 CBRANCH (f() INT_EQUAL 7)
arm1176jzf-s COPY arm1176jzf-s
(RSP + -152) PTRSUB RSP -152
 CALL libcall___stack_chk_fail_thunk
f(Symbol) COPY f(Symbol)
 RETURN 0 f(Symbol)
 RETURN 1
(f(Symbol) / 2147483647) SUBPIECE f(Symbol) 0
(f(Symbol) / 2147483647) SUBPIECE f(Symbol) 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH ((f() / 4611686014132420609) INT_EQUAL f())
0 INT_NOTEQUAL f() 0
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 17)
(f() # f()) PIECE f() f()
 BRANCH VZERO
(f(Symbol) / 2147483647) SUBPIECE f(Symbol) 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f(Symbol) / 2147483647) SUBPIECE f(Symbol) 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
cortex-a8 COPY cortex-a8
(RSP + -152) PTRSUB RSP -152
 CALL func (RSP + -152) cortex-a8
(f() # f()) COPY (f() # f())
0 INT_EQUAL f() 3
(f(Symbol) / 2147483647) SUBPIECE f(Symbol) 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f(Symbol) / 2147483647) SUBPIECE f(Symbol) 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(RSP + -152) PTRSUB RSP -152
(f(Symbol) / 2147483647) SUBPIECE f(Symbol) 0
(f(Symbol) / 2147483647) SUBPIECE f(Symbol) 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() # f()) PIECE f() f()
(f() # f()) COPY (f() # f())
strongarm COPY strongarm
 CALL func (RSP + -152) strongarm
 CBRANCH (f() INT_SLESS 2)
0 INT_SLESS 3 f()
 CBRANCH (f() INT_EQUAL 10)
(f(Symbol) / 2147483647) SUBPIECE f(Symbol) 0
(f(Symbol) / 2147483647) SUBPIECE f(Symbol) 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL f() 17
0 INT_SLESS f() 2
(f() # f()) PIECE f() f()
arm7tdmi COPY arm7tdmi
 CALL func (RSP + -152) arm7tdmi
(f() # f()) COPY (f() # f())
(RSP + -152) PTRSUB RSP -152
(f(Symbol) / 2147483647) SUBPIECE f(Symbol) 0
(f(Symbol) / 2147483647) SUBPIECE f(Symbol) 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
0 COPY 0
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() COPY f()
 BRANCH VZERO
f() CALL libcall_memcmp_thunk (f() / 2147483647) f() f()
~(f()) BOOL_NEGATE f()
0 INT_EQUAL (f() / 4611686014132420609) f()
(f() # f()) PIECE f() f()
f() COPY f()
(f() # f()) COPY (f() # f())
 CALL func (RSP + -56) cortex-a9
(RSP + -56) PTRSUB RSP -56
cortex-a9 COPY cortex-a9
(f(Symbol) / 4611686014132420609) SUBPIECE (f(Symbol) / 2147483647) 0
(f(Symbol) / 2147483647) INT_RIGHT f(Symbol) 64
(f() # f()) PIECE f() f()
f() COPY f()
f(Symbol) CALL func (f() / 2147483647) (f() / 4611686014132420609) (f() / 2147483647)
0 COPY 0
(f() # f()) PIECE f() f()
(f(Symbol) / 2147483647) SUBPIECE f(Symbol) 8
0 INT_EQUAL (f(Symbol) / 4611686014132420609) 0
(f() / 2147483647) SUBPIECE f() 0
(RSP + -104) PTRSUB RSP -104
1 COPY 1
(f() # f()) COPY (f() # f())
4727020 PTRSUB 0 4727020
 CBRANCH ((f(Symbol) / 4611686014132420609) INT_EQUAL 0)
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(RSP + -184) PTRSUB RSP -184
(f() / 2147483647) SUBPIECE f() 0
f() COPY f()
(f() # f()) PIECE f() f()
f() COPY f()
0 INT_EQUAL (f() / 4611686014132420609) f()
cortex-a7 COPY cortex-a7
(f() # f()) PIECE f() f()
(f() # f()) COPY (f() # f())
(f() # f()) PIECE f() f()
f() COPY f()
(f(Symbol) / 2147483647) SUBPIECE f(Symbol) 0
f() COPY f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH f()
(f() / 2147483647) SUBPIECE f() 8
0 INT_EQUAL f() 10
(f() # f()) PIECE f() f()
(RSP + -152) PTRSUB RSP -152
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
f(Symbol) COPY f(Symbol)
 CBRANCH ~(f())
(f() / 2147483647) SUBPIECE f() 0
(f() # f()) PIECE f() f()
0 INT_EQUAL (f() / 4611686014132420609) 0
(f() # f()) PIECE f() f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() # f()) COPY (f() # f())
 CBRANCH ((f() / 4611686014132420609) INT_EQUAL 0)
(f() # f()) PIECE f() f()
 CALL func (RSP + -104) cortex-a7
(f() / 2147483647) SUBPIECE f() 0
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() # f()) PIECE f() f()
f() COPY f()
 BRANCH VZERO
f() COPY f()
f() COPY f()
 CALL func (RSP + -104) 4727046
(RSP + -104) PTRSUB RSP -104
4727046 PTRSUB 0 4727046
f() COPY f()
(f() / 2147483647) SUBPIECE f() 8
 CALL func (RSP + -184) 4727020
 CALL func (RSP + -152)
ARG1 PTRSUB ARG1 0
ARG1 PTRSUB ARG1 0
[ARG1] LOAD 433 ARG1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
ARG1 CAST ARG1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(ARG1 + 8) PTRADD ARG1 8 1
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH ([ARG1] INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[ARG1] LOAD 433 ARG1
0 INT_EQUAL [ARG1] 0
0 INT_NOTEQUAL [(ARG1 + 8)] 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
[40] LOAD 433 40
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 0)
40 CAST 40
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
0 COPY 0
 RETURN 1
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
 RETURN 1
(ARG1 + 16) INT_ADD ARG1 16
(ARG1 + 24) INT_ADD ARG1 24
(ARG1 + 16) CAST (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 24)] LOAD 433 (ARG1 + 24)
(ARG1 + 16) PTRSUB (ARG1 + 16) 0
 CBRANCH ([(ARG1 + 16)] INT_EQUAL 0)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(ARG1 + 24) CAST (ARG1 + 24)
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
0 INT_EQUAL [(ARG1 + 16)] 0
0 INT_NOTEQUAL [(ARG1 + 24)] 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
40 CAST 40
[40] LOAD 433 40
 CBRANCH ([(ARG1 + 24)] INT_NOTEQUAL 0)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
0 COPY 0
 RETURN 1
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 [(ARG1 + 16)]
[(ARG1 + 16)] COPY [(ARG1 + 16)]
 RETURN 1
(ARG1 + 32) INT_ADD ARG1 32
(ARG1 + 40) INT_ADD ARG1 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(ARG1 + 40) CAST (ARG1 + 40)
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
0 INT_EQUAL [(ARG1 + 32)] 0
 CBRANCH ([(ARG1 + 32)] INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(ARG1 + 32)] LOAD 433 (ARG1 + 32)
[(ARG1 + 40)] LOAD 433 (ARG1 + 40)
(ARG1 + 32) PTRSUB (ARG1 + 32) 0
(ARG1 + 32) CAST (ARG1 + 32)
(ARG1 + 32) CAST (ARG1 + 32)
 CBRANCH ([(ARG1 + 40)] INT_NOTEQUAL 0)
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
40 CAST 40
[40] LOAD 433 40
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
0 COPY 0
 RETURN 1
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
 RETURN 0 [(ARG1 + 32)]
[(ARG1 + 32)] COPY [(ARG1 + 32)]
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
0 INT_NOTEQUAL [(ARG1 + 40)] 0
ARG1 PTRSUB ARG1 0
[ARG1] LOAD 433 ARG1
ARG1 PTRSUB ARG1 0
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_EQUAL [ARG1] 0
[ARG1] LOAD 433 ARG1
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
ARG1 CAST ARG1
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(ARG1 + 8) PTRADD ARG1 8 1
(ARG1 + 8) CAST (ARG1 + 8)
 CBRANCH ([ARG1] INT_EQUAL 0)
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 0)
[40] LOAD 433 40
40 CAST 40
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
0 COPY 0
 RETURN 1
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
0 INT_NOTEQUAL [(ARG1 + 8)] 0
ARG1 PTRSUB ARG1 0
[ARG1] LOAD 433 ARG1
ARG1 PTRSUB ARG1 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(ARG1 + 8) PTRADD ARG1 8 1
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 CBRANCH ([ARG1] INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
0 INT_EQUAL [ARG1] 0
[ARG1] LOAD 433 ARG1
ARG1 CAST ARG1
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ([(FS_OFFSET + 40)] INT_NOTEQUAL [40])
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 [ARG1]
[ARG1] COPY [ARG1]
 RETURN 1
40 CAST 40
0 INT_NOTEQUAL [(ARG1 + 8)] 0
0 INT_NOTEQUAL [(FS_OFFSET + 40)] [40]
40 INT_ADD 0 40
 CBRANCH ([(ARG1 + 8)] INT_NOTEQUAL 0)
[40] LOAD 433 40
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
0 COPY 0
 RETURN 1
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
f() CALL func ((ARG1 * 32) + 6949344) ARG2 (ARG1 * 32)
ARG1 INT_ZEXT ARG1
0 INT_LESS ARG1 22
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(f() + 40) CAST (f() + 40)
 CBRANCH (ARG1 INT_LESS 22)
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
 BRANCH VZERO
(ARG1 * 32) INT_MULT ARG1 32
(RSP + -40) PTRSUB RSP -40
6949344 PTRSUB 0 6949344
(ARG1 * 4) INT_MULT ARG1 4
 CALL func (RSP + -40)
((ARG1 * 32) + 6949344) PTRADD 6949344 (ARG1 * 4) 8
0 INT_LESS ARG1 22
ARG1 INT_ZEXT ARG1
 RETURN 0 f(ARG1)
 CBRANCH (ARG1 INT_LESS 22)
((ARG1 * 32) + 6949364) CAST ((ARG1 * 32) + 6949364)
6949360 CAST 6949360
 BRANCH VZERO
((ARG1 * 32) + 4) INT_ADD (ARG1 * 32) 4
0 COPY 0
((ARG1 * 32) + 6949364) INT_ADD 6949360 ((ARG1 * 32) + 4)
[((ARG1 * 32) + 6949364)] LOAD 433 ((ARG1 * 32) + 6949364)
6949360 PTRSUB 0 6949360
(ARG1 * 32) INT_MULT ARG1 32
ARG1 INT_ZEXT ARG1
0 INT_LESS ARG1 22
 CBRANCH (ARG1 INT_LESS 22)
 RETURN 0 f(ARG1 , Symbol)
[(Symbol + (ARG1 * 32))] LOAD 433 (Symbol + (ARG1 * 32))
Symbol PTRSUB 0 Symbol
(ARG1 * 4) INT_MULT ARG1 4
(Symbol + (ARG1 * 32)) PTRADD Symbol (ARG1 * 4) 8
(Symbol + (ARG1 * 32)) CAST (Symbol + (ARG1 * 32))
 BRANCH VZERO
0 COPY 0
ARG1 INT_ZEXT ARG1
0 INT_LESS ARG1 22
 RETURN 0 f(ARG1)
 CBRANCH (ARG1 INT_LESS 22)
(ARG1 * 32) INT_MULT ARG1 32
6949368 PTRSUB 0 6949368
((ARG1 * 32) + 6949372) CAST ((ARG1 * 32) + 6949372)
6949368 CAST 6949368
 BRANCH VZERO
((ARG1 * 32) + 4) INT_ADD (ARG1 * 32) 4
0 COPY 0
((ARG1 * 32) + 6949372) INT_ADD 6949368 ((ARG1 * 32) + 4)
[((ARG1 * 32) + 6949372)] LOAD 433 ((ARG1 * 32) + 6949372)
f() CALL libcall_memcmp_thunk ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8
f() CALL libcall_memcmp_thunk 4729798 ARG1 4
ARG1 COPY ARG1
ARG1 COPY ARG1
ARG1 COPY ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
0 INT_EQUAL ARG2 4
ARG2 COPY ARG2
0 INT_EQUAL ARG2 A_Stack[-0x30]:8
ARG2 COPY ARG2
ARG3 INT_ZEXT ARG3
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
 CALL func (RSP + -56) generic
[(f() + 40)] LOAD 433 (f() + 40)
A_Stack[-0x38]:8 COPY A_Stack[-0x38]:8
A_Stack[-0x30]:8 COPY A_Stack[-0x30]:8
 CBRANCH f()
A_Stack[-0x30]:8 COPY A_Stack[-0x30]:8
 CBRANCH (ARG2 INT_EQUAL A_Stack[-0x30]:8)
(FS_OFFSET + 40) INT_ADD 0 40
generic COPY generic
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
A_Stack[-0x38]:8 COPY A_Stack[-0x38]:8
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(RSP + -56) PTRSUB RSP -56
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 7
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
0 COPY 0
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
f() CALL libcall_memcmp_thunk cortex-m4 [f(RSP)] 9
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
cortex-m4 COPY cortex-m4
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk strongarm [f(RSP)] 9
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
strongarm COPY strongarm
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -2064)
(RSP + -2064) PTRSUB RSP -2064
 CBRANCH f()
 STORE 433 (f(RSP) + 16) (RSP + -1900)
(RSP + -1900) PTRSUB RSP -1900
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
 STORE 433 (f(RSP) + 16) (RSP + -2116)
(RSP + -2116) PTRSUB RSP -2116
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
0 COPY 0
cortex-a7 COPY cortex-a7
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk cortex-a7 [f(RSP)] 9
 CBRANCH (f() INT_NOTEQUAL 0)
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 8)] 7
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 11)
[f(RSP)] LOAD 433 f(RSP)
0 COPY 0
arm1136jz-s COPY arm1136jz-s
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk arm1136jz-s [f(RSP)] 11
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
 CBRANCH f()
(RSP + -1952) PTRSUB RSP -1952
 STORE 433 (f(RSP) + 16) (RSP + -1952)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 5
0 COPY 0
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 4
0 COPY 0
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 4)
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -2004) PTRSUB RSP -2004
 STORE 433 (f(RSP) + 16) (RSP + -2004)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
ep9312 COPY ep9312
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk ep9312 [f(RSP)] 6
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 COPY 0
0 INT_EQUAL [(f(RSP) + 8)] 5
 CBRANCH f()
(RSP + -1908) PTRSUB RSP -1908
 STORE 433 (f(RSP) + 16) (RSP + -1908)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
(RSP + -2124) PTRSUB RSP -2124
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -2124)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
[f(RSP)] LOAD 433 f(RSP)
sc000 COPY sc000
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk sc000 [f(RSP)] 5
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 COPY 0
0 INT_EQUAL [(f(RSP) + 8)] 6
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 10)
f() CALL libcall_memcmp_thunk arm1136j-s [f(RSP)] 10
arm1136j-s COPY arm1136j-s
 CBRANCH (f() INT_NOTEQUAL 0)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1960) PTRSUB RSP -1960
 STORE 433 (f(RSP) + 16) (RSP + -1960)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
0 COPY 0
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 9
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 4)
0 COPY 0
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 4
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
arm9312 COPY arm9312
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk arm9312 [f(RSP)] 7
[f(RSP)] LOAD 433 f(RSP)
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 13
0 COPY 0
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 13)
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 8)
 CBRANCH f()
 STORE 433 (f(RSP) + 16) (RSP + -2012)
(RSP + -2012) PTRSUB RSP -2012
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
(RSP + -1996) PTRSUB RSP -1996
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1996)
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 8)
f() CALL libcall_memcmp_thunk arm1020t [f(RSP)] 8
[f(RSP)] LOAD 433 f(RSP)
arm1020t COPY arm1020t
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 9
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 10)
f() CALL libcall_memcmp_thunk cortex-a57 [f(RSP)] 10
cortex-a57 COPY cortex-a57
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 8)
arm7tdmi COPY arm7tdmi
f() CALL libcall_memcmp_thunk arm7tdmi [f(RSP)] 8
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH f()
 STORE 433 (f(RSP) + 16) (RSP + -2048)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -2048) PTRSUB RSP -2048
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 11
 CBRANCH f()
(RSP + -2100) PTRSUB RSP -2100
 STORE 433 (f(RSP) + 16) (RSP + -2100)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 10)
cortex-a15 COPY cortex-a15
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
f() CALL libcall_memcmp_thunk cortex-a15 [f(RSP)] 10
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 6
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 10
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 10)
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -2152) PTRSUB RSP -2152
 STORE 433 (f(RSP) + 16) (RSP + -2152)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 13)
0 COPY 0
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 13
 CBRANCH f()
 STORE 433 (f(RSP) + 16) (RSP + -1884)
(RSP + -1884) PTRSUB RSP -1884
(f(RSP) + 16) PTRADD f(RSP) 2 8
strongarm1100 COPY strongarm1100
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk strongarm1100 [f(RSP)] 13
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH f()
(RSP + -2056) PTRSUB RSP -2056
 STORE 433 (f(RSP) + 16) (RSP + -2056)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 10
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 7
cortex-a35 COPY cortex-a35
f() CALL libcall_memcmp_thunk cortex-a35 [f(RSP)] 10
 CBRANCH (f() INT_NOTEQUAL 0)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
f(RSP) COPY f(RSP)
3 COPY 3
1 COPY 1
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1 COPY 1
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
3 COPY 3
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
1 COPY 1
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1 COPY 1
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
1 COPY 1
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 16)] 0
3 COPY 3
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
 CBRANCH f()
1 COPY 1
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
1 COPY 1
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
1 COPY 1
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
1 COPY 1
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1 COPY 1
f(RSP) COPY f(RSP)
1 COPY 1
f(RSP) COPY f(RSP)
 CBRANCH f()
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
1 COPY 1
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
1 COPY 1
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
1 COPY 1
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1 COPY 1
1 COPY 1
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
3 COPY 3
1 COPY 1
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
1 COPY 1
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_NOTEQUAL [(f(RSP) + 16)] 0
f(RSP) COPY f(RSP)
 CBRANCH f()
1 COPY 1
 CBRANCH ([(f(RSP) + 16)] INT_NOTEQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
1 COPY 1
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1 COPY 1
f(RSP) COPY f(RSP)
1 COPY 1
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1 COPY 1
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
1 COPY 1
(RSP + -56) PTRSUB RSP -56
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1 COPY 1
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
1 COPY 1
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
1 COPY 1
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
1 COPY 1
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(ARG3 * 8) INT_MULT ARG3 8
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1 COPY 1
1 COPY 1
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
1 COPY 1
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
(RSP + -56) PTRSUB RSP -56
f(RSP) COPY f(RSP)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
1 COPY 1
1 COPY 1
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1 COPY 1
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
1 COPY 1
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
1 COPY 1
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f() COPY f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
1 COPY 1
0 INT_EQUAL [(f(RSP) + 16)] 0
[(Symbol + (ARG3 * 64))] LOAD 433 (Symbol + (ARG3 * 64))
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
1 COPY 1
Symbol PTRSUB 0 Symbol
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1 COPY 1
0 INT_EQUAL [(f(RSP) + 16)] 0
(Symbol + (ARG3 * 64)) PTRADD Symbol (ARG3 * 8) 8
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
1 COPY 1
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
1 COPY 1
f(RSP) COPY f(RSP)
1 COPY 1
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1 COPY 1
(f(RSP) + 16) PTRADD f(RSP) 2 8
1 COPY 1
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
18 COPY 18
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
20 COPY 20
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH (ARG2 INT_EQUAL 4)
(f(RSP) + 16) PTRADD f(RSP) 2 8
20 COPY 20
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 COPY 0
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 BRANCH VZERO
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 COPY 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 COPY 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
1 COPY 1
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1 COPY 1
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(Symbol + (ARG3 * 64)) CAST (Symbol + (ARG3 * 64))
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
12 COPY 12
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH f()
6 COPY 6
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
7 COPY 7
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
f(RSP) COPY f(RSP)
 CBRANCH f()
20 COPY 20
 CBRANCH f()
20 COPY 20
0 INT_EQUAL [(f(RSP) + 16)] 0
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(Symbol + (ARG3 * 64))] COPY [(Symbol + (ARG3 * 64))]
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
20 COPY 20
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
13 COPY 13
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
20 COPY 20
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
17 COPY 17
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
18 COPY 18
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
18 COPY 18
f(RSP) COPY f(RSP)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
18 COPY 18
(f(RSP) + 16) PTRADD f(RSP) 2 8
16 COPY 16
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
1 COPY 1
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH (f(RSP) INT_EQUAL 0)
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
0 INT_EQUAL f(RSP) 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
6 COPY 6
18 COPY 18
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
18 COPY 18
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH f()
18 COPY 18
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 9
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1892)
(RSP + -1892) PTRSUB RSP -1892
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -2108)
(RSP + -2108) PTRSUB RSP -2108
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk cortex-a9 [f(RSP)] 9
cortex-a9 COPY cortex-a9
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 11)
arm1176jz-s COPY arm1176jz-s
f() CALL libcall_memcmp_thunk arm1176jz-s [f(RSP)] 11
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 STORE 433 (f(RSP) + 16) (RSP + -1944)
(RSP + -1944) PTRSUB RSP -1944
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 9
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 STORE 433 (f(RSP) + 16) (RSP + -2160)
(RSP + -2160) PTRSUB RSP -2160
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -2036) PTRSUB RSP -2036
 STORE 433 (f(RSP) + 16) (RSP + -2036)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
exynos-m1 COPY exynos-m1
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk exynos-m1 [f(RSP)] 9
[f(RSP)] LOAD 433 f(RSP)
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
[f(RSP)] LOAD 433 f(RSP)
arm720t COPY arm720t
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
0 COPY 0
f() CALL libcall_memcmp_thunk arm720t [f(RSP)] 7
 CBRANCH (f() INT_NOTEQUAL 0)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 COPY 0
0 INT_EQUAL [(f(RSP) + 8)] 6
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -2088) PTRSUB RSP -2088
 STORE 433 (f(RSP) + 16) (RSP + -2088)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
0 COPY 0
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 5
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 10
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 10)
0 COPY 0
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 10
0 COPY 0
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 10)
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk cortex-r4 [f(RSP)] 9
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
cortex-r4 COPY cortex-r4
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 STORE 433 (f(RSP) + 16) (RSP + -1924)
(RSP + -1924) PTRSUB RSP -1924
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -2140)
(RSP + -2140) PTRSUB RSP -2140
(f(RSP) + 16) PTRADD f(RSP) 2 8
 BRANCH VZERO
1 COPY 1
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 12)
0 COPY 0
arm1156t2f-s COPY arm1156t2f-s
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk arm1156t2f-s [f(RSP)] 12
 CBRANCH (f() INT_NOTEQUAL 0)
[f(RSP)] LOAD 433 f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 9
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
f(RSP) COPY f(RSP)
0 COPY 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -2044)
(RSP + -2044) PTRSUB RSP -2044
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk cortex-a72 [f(RSP)] 10
 CBRANCH (f() INT_NOTEQUAL 0)
cortex-a72 COPY cortex-a72
[f(RSP)] LOAD 433 f(RSP)
0 COPY 0
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 13
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 13)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 10)
cortex-a17 COPY cortex-a17
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
f() CALL libcall_memcmp_thunk cortex-a17 [f(RSP)] 10
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
 STORE 433 (f(RSP) + 16) (RSP + -1880)
(RSP + -1880) PTRSUB RSP -1880
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 STORE 433 (f(RSP) + 16) (RSP + -2096)
(RSP + -2096) PTRSUB RSP -2096
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1932) PTRSUB RSP -1932
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1932)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -2148)
(RSP + -2148) PTRSUB RSP -2148
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 12)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk arm1176jzf-s [f(RSP)] 12
[f(RSP)] LOAD 433 f(RSP)
arm1176jzf-s COPY arm1176jzf-s
0 COPY 0
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 10
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 10)
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
arm966e-s COPY arm966e-s
f() CALL libcall_memcmp_thunk arm966e-s [f(RSP)] 9
 CBRANCH (f() INT_NOTEQUAL 0)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 STORE 433 (f(RSP) + 16) (RSP + -1984)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1984) PTRSUB RSP -1984
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 10)
0 COPY 0
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 10
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 9
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1916)
(RSP + -1916) PTRSUB RSP -1916
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 12
 BRANCH VZERO
1 COPY 1
arm1022e COPY arm1022e
f() CALL libcall_memcmp_thunk arm1022e [f(RSP)] 8
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 STORE 433 (f(RSP) + 16) (RSP + -1968)
(RSP + -1968) PTRSUB RSP -1968
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -2020)
(RSP + -2020) PTRSUB RSP -2020
f() CALL libcall_memcmp_thunk invalid [f(RSP)] 7
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
invalid COPY invalid
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk arm920t [f(RSP)] 7
arm920t COPY arm920t
[f(RSP)] LOAD 433 f(RSP)
1 COPY 1
 BRANCH VZERO
sc300 COPY sc300
f() CALL libcall_memcmp_thunk sc300 [f(RSP)] 5
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
1 COPY 1
 BRANCH VZERO
f() CALL libcall_memcmp_thunk 4729819 [f(RSP)] 4
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
4729819 PTRSUB 0 4729819
 BRANCH VZERO
1 COPY 1
 STORE 433 (f(RSP) + 16) (RSP + -2072)
(RSP + -2072) PTRSUB RSP -2072
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 COPY 0
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 6
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
f() CALL libcall_memcmp_thunk arm10e [f(RSP)] 6
 CBRANCH (f() INT_NOTEQUAL 0)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
arm10e COPY arm10e
1 COPY 1
 BRANCH VZERO
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1976)
(RSP + -1976) PTRSUB RSP -1976
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 10
(f(RSP) + 8) PTRADD f(RSP) 1 8
 STORE 433 (f(RSP) + 16) (RSP + -2028)
(RSP + -2028) PTRSUB RSP -2028
(f(RSP) + 16) PTRADD f(RSP) 2 8
xscale COPY xscale
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
f() CALL libcall_memcmp_thunk xscale [f(RSP)] 6
[f(RSP)] LOAD 433 f(RSP)
arm9tdmi COPY arm9tdmi
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk arm9tdmi [f(RSP)] 8
 CBRANCH (f() INT_NOTEQUAL 0)
[f(RSP)] LOAD 433 f(RSP)
 BRANCH VZERO
1 COPY 1
0 INT_EQUAL [(f(RSP) + 8)] 12
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 BRANCH VZERO
1 COPY 1
cortex-r5 COPY cortex-r5
f() CALL libcall_memcmp_thunk cortex-r5 [f(RSP)] 9
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
1 COPY 1
 BRANCH VZERO
[f(RSP)] LOAD 433 f(RSP)
4729808 PTRSUB 0 4729808
f() CALL libcall_memcmp_thunk 4729808 [f(RSP)] 4
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
(RSP + -2080) PTRSUB RSP -2080
 STORE 433 (f(RSP) + 16) (RSP + -2080)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 9
(f(RSP) + 8) PTRADD f(RSP) 1 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -2132) PTRSUB RSP -2132
 STORE 433 (f(RSP) + 16) (RSP + -2132)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
cortex-m0plus COPY cortex-m0plus
f() CALL libcall_memcmp_thunk cortex-m0plus [f(RSP)] 13
[f(RSP)] LOAD 433 f(RSP)
 BRANCH VZERO
1 COPY 1
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 9
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 7
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1956)
(RSP + -1956) PTRSUB RSP -1956
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 11)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk arm1136jf-s [f(RSP)] 11
 CBRANCH (f() INT_NOTEQUAL 0)
arm1136jf-s COPY arm1136jf-s
[f(RSP)] LOAD 433 f(RSP)
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
arm940t COPY arm940t
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
f() CALL libcall_memcmp_thunk arm940t [f(RSP)] 7
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
 STORE 433 (f(RSP) + 16) (RSP + -2008)
(RSP + -2008) PTRSUB RSP -2008
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 COPY 0
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 9
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(RSP + -2060) PTRSUB RSP -2060
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -2060)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
[f(RSP)] LOAD 433 f(RSP)
cortex-m7 COPY cortex-m7
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
0 COPY 0
f() CALL libcall_memcmp_thunk cortex-m7 [f(RSP)] 9
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 12)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk strongarm110 [f(RSP)] 12
[f(RSP)] LOAD 433 f(RSP)
strongarm110 COPY strongarm110
0 COPY 0
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
f(RSP) COPY f(RSP)
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 10
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 10)
(f(RSP) + 8) PTRADD f(RSP) 1 8
 BRANCH VZERO
1 COPY 1
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
f() CALL libcall_memcmp_thunk cortex-a8 [f(RSP)] 9
cortex-a8 COPY cortex-a8
 CBRANCH (f() INT_NOTEQUAL 0)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
0 COPY 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1896) PTRSUB RSP -1896
 STORE 433 (f(RSP) + 16) (RSP + -1896)
 STORE 433 (f(RSP) + 16) (RSP + -2112)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -2112) PTRSUB RSP -2112
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
0 COPY 0
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 7
(RSP + -2164) PTRSUB RSP -2164
[f(RSP)] LOAD 433 f(RSP)
arm922t COPY arm922t
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk arm922t [f(RSP)] 7
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
(RSP + -2016) PTRSUB RSP -2016
 STORE 433 (f(RSP) + 16) (RSP + -2016)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 9
0 COPY 0
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
(f(RSP) + 8) PTRADD f(RSP) 1 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -2068) PTRSUB RSP -2068
 STORE 433 (f(RSP) + 16) (RSP + -2068)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
cortex-m3 COPY cortex-m3
f() CALL libcall_memcmp_thunk cortex-m3 [f(RSP)] 9
 CBRANCH (f() INT_NOTEQUAL 0)
[f(RSP)] LOAD 433 f(RSP)
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
arm810 COPY arm810
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk arm810 [f(RSP)] 6
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 COPY 0
0 INT_EQUAL [(f(RSP) + 8)] 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 5
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
f(RSP) COPY f(RSP)
0 COPY 0
(RSP + -2120) PTRSUB RSP -2120
 STORE 433 (f(RSP) + 16) (RSP + -2120)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 6
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
0 COPY 0
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
0 COPY 0
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 9
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 5
0 COPY 0
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
cortex-a5 COPY cortex-a5
0 COPY 0
f() CALL libcall_memcmp_thunk cortex-a5 [f(RSP)] 9
 CBRANCH (f() INT_NOTEQUAL 0)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 STORE 433 (f(RSP) + 16) (RSP + -1904)
(RSP + -1904) PTRSUB RSP -1904
(f(RSP) + 16) PTRADD f(RSP) 2 8
[f(RSP)] LOAD 433 f(RSP)
cortex-a12 COPY cortex-a12
f() CALL libcall_memcmp_thunk cortex-a12 [f(RSP)] 10
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
1 COPY 1
 BRANCH VZERO
(RSP + -1888) PTRSUB RSP -1888
 STORE 433 (f(RSP) + 16) (RSP + -1888)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -2104)
(RSP + -2104) PTRSUB RSP -2104
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 7
(f(RSP) + 8) PTRADD f(RSP) 1 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1940) PTRSUB RSP -1940
 STORE 433 (f(RSP) + 16) (RSP + -1940)
 STORE 433 (f(RSP) + 16) (RSP + -2156)
(RSP + -2156) PTRSUB RSP -2156
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
mpcore COPY mpcore
f() CALL libcall_memcmp_thunk mpcore [f(RSP)] 6
[f(RSP)] LOAD 433 f(RSP)
 BRANCH VZERO
1 COPY 1
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 9
0 INT_EQUAL [(f(RSP) + 8)] 12
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
arm9e COPY arm9e
f() CALL libcall_memcmp_thunk arm9e [f(RSP)] 5
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 BRANCH VZERO
1 COPY 1
(RSP + -1992) PTRSUB RSP -1992
 STORE 433 (f(RSP) + 16) (RSP + -1992)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 9
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
arm7tdmi-s COPY arm7tdmi-s
f() CALL libcall_memcmp_thunk arm7tdmi-s [f(RSP)] 10
[f(RSP)] LOAD 433 f(RSP)
 BRANCH VZERO
1 COPY 1
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 10)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 10
0 COPY 0
arm1176j-s COPY arm1176j-s
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk arm1176j-s [f(RSP)] 10
[f(RSP)] LOAD 433 f(RSP)
1 COPY 1
 BRANCH VZERO
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 9
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 6
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 9
 STORE 433 (f(RSP) + 16) (RSP + -1948)
(RSP + -1948) PTRSUB RSP -1948
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 11
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
f() CALL libcall_memcmp_thunk arm10tdmi [f(RSP)] 9
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
arm10tdmi COPY arm10tdmi
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -2000)
(RSP + -2000) PTRSUB RSP -2000
 STORE 433 (f(RSP) + 16) (RSP + -2052)
(RSP + -2052) PTRSUB RSP -2052
(f(RSP) + 16) PTRADD f(RSP) 2 8
 BRANCH VZERO
1 COPY 1
cortex-a53 COPY cortex-a53
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk cortex-a53 [f(RSP)] 10
[f(RSP)] LOAD 433 f(RSP)
 BRANCH VZERO
1 COPY 1
strongarm1110 COPY strongarm1110
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk strongarm1110 [f(RSP)] 13
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 11)
arm1156t2-s COPY arm1156t2-s
f() CALL libcall_memcmp_thunk arm1156t2-s [f(RSP)] 11
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
(RSP + -1928) PTRSUB RSP -1928
 STORE 433 (f(RSP) + 16) (RSP + -1928)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 10
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
(RSP + -2144) PTRSUB RSP -2144
 STORE 433 (f(RSP) + 16) (RSP + -2144)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 8
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
arm968e-s COPY arm968e-s
f() CALL libcall_memcmp_thunk arm968e-s [f(RSP)] 9
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 10
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 11
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 11)
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1980)
(RSP + -1980) PTRSUB RSP -1980
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 9
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
iwmmxt COPY iwmmxt
f() CALL libcall_memcmp_thunk iwmmxt [f(RSP)] 6
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
 BRANCH VZERO
1 COPY 1
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 4)
f() CALL libcall_memcmp_thunk 4729918 [f(RSP)] 4
f(RSP) COPY f(RSP)
4729918 PTRSUB 0 4729918
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 STORE 433 (f(RSP) + 16) (RSP + -2032)
(RSP + -2032) PTRSUB RSP -2032
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 9
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
f() CALL libcall_memcmp_thunk mpcorenovfp [f(RSP)] 11
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
mpcorenovfp COPY mpcorenovfp
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1936)
(RSP + -1936) PTRSUB RSP -1936
 STORE 433 (f(RSP) + 16) (RSP + -1988)
(RSP + -1988) PTRSUB RSP -1988
(f(RSP) + 16) PTRADD f(RSP) 2 8
arm946e-s COPY arm946e-s
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk arm946e-s [f(RSP)] 9
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
[f(RSP)] LOAD 433 f(RSP)
cyclone COPY cyclone
f() CALL libcall_memcmp_thunk cyclone [f(RSP)] 7
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
f() CALL libcall_memcmp_thunk arm710t [f(RSP)] 7
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
arm710t COPY arm710t
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -2040)
(RSP + -2040) PTRSUB RSP -2040
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 11
(f(RSP) + 8) PTRADD f(RSP) 1 8
 STORE 433 (f(RSP) + 16) (RSP + -2092)
(RSP + -2092) PTRSUB RSP -2092
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
krait COPY krait
f() CALL libcall_memcmp_thunk krait [f(RSP)] 5
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(ARG3 , RSP , Symbol)
 RETURN 1
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 INT_EQUAL [(f(RSP) + 8)] 8
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
arm7m COPY arm7m
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
f() CALL libcall_memcmp_thunk arm7m [f(RSP)] 5
[f(RSP)] LOAD 433 f(RSP)
1 COPY 1
 BRANCH VZERO
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 9
f(RSP) COPY f(RSP)
f() CALL libcall_memcmp_thunk swift [f(RSP)] 5
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
swift COPY swift
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 4
 STORE 433 (f(RSP) + 16) (RSP + -2076)
(RSP + -2076) PTRSUB RSP -2076
(f(RSP) + 16) PTRADD f(RSP) 2 8
cortex-r7 COPY cortex-r7
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk cortex-r7 [f(RSP)] 9
[f(RSP)] LOAD 433 f(RSP)
 BRANCH VZERO
1 COPY 1
0 INT_EQUAL f(ARG2) 4
 CBRANCH (f(ARG2) INT_EQUAL 4)
(RSP + -56) COPY (RSP + -56)
f() CALL libcall_memcmp_thunk cortex-m1 [f(RSP)] 9
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
cortex-m1 COPY cortex-m1
1 COPY 1
 BRANCH VZERO
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1912)
(RSP + -1912) PTRSUB RSP -1912
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 6
(f(RSP) + 8) PTRADD f(RSP) 1 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -2128)
(RSP + -2128) PTRSUB RSP -2128
 STORE 433 (f(RSP) + 16) (RSP + -1964)
(RSP + -1964) PTRSUB RSP -1964
(f(RSP) + 16) PTRADD f(RSP) 2 8
 BRANCH VZERO
1 COPY 1
arm926ej-s COPY arm926ej-s
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk arm926ej-s [f(RSP)] 10
[f(RSP)] LOAD 433 f(RSP)
0 INT_EQUAL [(f(RSP) + 8)] 10
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 10)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -2084)
(RSP + -2084) PTRSUB RSP -2084
f() CALL libcall_memcmp_thunk cortex-r4f [f(RSP)] 10
[f(RSP)] LOAD 433 f(RSP)
cortex-r4f COPY cortex-r4f
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
1 COPY 1
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
cortex-m0 COPY cortex-m0
f() CALL libcall_memcmp_thunk cortex-m0 [f(RSP)] 9
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
1 COPY 1
 BRANCH VZERO
 STORE 433 (f(RSP) + 16) (RSP + -1920)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1920) PTRSUB RSP -1920
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 7
 STORE 433 (f(RSP) + 16) (RSP + -2136)
(RSP + -2136) PTRSUB RSP -2136
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 7
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(RSP + -1972) PTRSUB RSP -1972
 STORE 433 (f(RSP) + 16) (RSP + -1972)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[f(RSP)] LOAD 433 f(RSP)
arm1020e COPY arm1020e
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk arm1020e [f(RSP)] 8
1 COPY 1
 BRANCH VZERO
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 5
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
 BRANCH VZERO
1 COPY 1
f() CALL libcall_memcmp_thunk arm920 [f(RSP)] 6
arm920 COPY arm920
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -2024) PTRSUB RSP -2024
 STORE 433 (f(RSP) + 16) (RSP + -2024)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 11
[[(f(RSP) + 16)]] COPY [[(f(RSP) + 16)]]
0 INT_EQUAL A_Stack[-0x30]:8 0
A_Stack[-0x30]:8 COPY A_Stack[-0x30]:8
 BRANCH VZERO
 CBRANCH (A_Stack[-0x30]:8 INT_EQUAL 0)
A_Stack[-0x38]:8 COPY A_Stack[-0x38]:8
[[(f(RSP) + 16)]] LOAD 433 [(f(RSP) + 16)]
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_NOTEQUAL f() 0
0 COPY 0
4729798 PTRSUB 0 4729798
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk 4729803 f(ARG1) 4
4729803 PTRSUB 0 4729803
0 INT_EQUAL f() 0
 BRANCH VZERO
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(RSP + -56) PTRSUB RSP -56
(RSP + -56) COPY (RSP + -56)
f() CALL libcall_memcmp_thunk ARG1 A_Stack[-0x38]:8 A_Stack[-0x30]:8
ARG1 COPY ARG1
ARG1 COPY ARG1
ARG1 COPY ARG1
ARG1 COPY ARG1
f() CALL libcall_memcmp_thunk 4729798 ARG1 4
0 INT_EQUAL ARG2 4
ARG2 COPY ARG2
ARG2 COPY ARG2
ARG2 COPY ARG2
0 INT_EQUAL ARG2 A_Stack[-0x30]:8
ARG3 INT_ZEXT ARG3
0 INT_NOTEQUAL f() [(f() + 40)]
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
A_Stack[-0x38]:8 COPY A_Stack[-0x38]:8
 CALL func (RSP + -56) generic
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (ARG2 INT_EQUAL A_Stack[-0x30]:8)
A_Stack[-0x30]:8 COPY A_Stack[-0x30]:8
(f() + 40) CAST (f() + 40)
 CBRANCH f()
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
generic COPY generic
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
A_Stack[-0x38]:8 COPY A_Stack[-0x38]:8
(RSP + -56) PTRSUB RSP -56
A_Stack[-0x30]:8 COPY A_Stack[-0x30]:8
 CBRANCH f()
(RSP + -1920) PTRSUB RSP -1920
 STORE 433 (f(RSP) + 16) (RSP + -1920)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
(RSP + -2136) PTRSUB RSP -2136
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -2136)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 COPY 0
0 INT_EQUAL [(f(RSP) + 8)] 7
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
f() CALL libcall_memcmp_thunk cortex-m0 [f(RSP)] 9
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
[f(RSP)] LOAD 433 f(RSP)
cortex-m0 COPY cortex-m0
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 8)
arm1020e COPY arm1020e
0 COPY 0
f() CALL libcall_memcmp_thunk arm1020e [f(RSP)] 8
 CBRANCH (f() INT_NOTEQUAL 0)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH f()
 STORE 433 (f(RSP) + 16) (RSP + -1972)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1972) PTRSUB RSP -1972
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 COPY 0
0 INT_EQUAL [(f(RSP) + 8)] 5
 CBRANCH f()
 STORE 433 (f(RSP) + 16) (RSP + -2024)
(RSP + -2024) PTRSUB RSP -2024
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
0 COPY 0
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
swift COPY swift
f() CALL libcall_memcmp_thunk swift [f(RSP)] 5
 CBRANCH (f() INT_NOTEQUAL 0)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
[f(RSP)] LOAD 433 f(RSP)
arm920 COPY arm920
0 COPY 0
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk arm920 [f(RSP)] 6
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 11
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 11)
f(RSP) COPY f(RSP)
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
arm7m COPY arm7m
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk arm7m [f(RSP)] 5
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
0 COPY 0
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -2076) PTRSUB RSP -2076
 STORE 433 (f(RSP) + 16) (RSP + -2076)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 COPY 0
0 INT_EQUAL [(f(RSP) + 8)] 9
arm968e-s COPY arm968e-s
f() CALL libcall_memcmp_thunk arm968e-s [f(RSP)] 9
 CBRANCH (f() INT_NOTEQUAL 0)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH f()
(RSP + -1980) PTRSUB RSP -1980
 STORE 433 (f(RSP) + 16) (RSP + -1980)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 COPY 0
0 INT_EQUAL [(f(RSP) + 8)] 10
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 10)
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 4)
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
4729918 PTRSUB 0 4729918
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk 4729918 [f(RSP)] 4
[f(RSP)] LOAD 433 f(RSP)
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 11)
f(RSP) COPY f(RSP)
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 11
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 9
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
0 COPY 0
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk iwmmxt [f(RSP)] 6
f(RSP) COPY f(RSP)
0 COPY 0
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
iwmmxt COPY iwmmxt
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -2032)
(RSP + -2032) PTRSUB RSP -2032
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 COPY 0
0 INT_EQUAL [(f(RSP) + 8)] 7
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 10)
0 COPY 0
cortex-r4f COPY cortex-r4f
f() CALL libcall_memcmp_thunk cortex-r4f [f(RSP)] 10
 CBRANCH (f() INT_NOTEQUAL 0)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH f()
(RSP + -2084) PTRSUB RSP -2084
 STORE 433 (f(RSP) + 16) (RSP + -2084)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
cortex-m3 COPY cortex-m3
f() CALL libcall_memcmp_thunk cortex-m3 [f(RSP)] 9
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
[f(RSP)] LOAD 433 f(RSP)
arm810 COPY arm810
f() CALL libcall_memcmp_thunk arm810 [f(RSP)] 6
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH f()
(RSP + -2068) PTRSUB RSP -2068
 STORE 433 (f(RSP) + 16) (RSP + -2068)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 8
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -2120)
(RSP + -2120) PTRSUB RSP -2120
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 5
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
cortex-a5 COPY cortex-a5
f() CALL libcall_memcmp_thunk cortex-a5 [f(RSP)] 9
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 6
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 9
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
0 COPY 0
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 5
f(RSP) COPY f(RSP)
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1904) PTRSUB RSP -1904
 STORE 433 (f(RSP) + 16) (RSP + -1904)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 COPY 0
0 INT_EQUAL [(f(RSP) + 8)] 9
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 11)
arm1136jf-s COPY arm1136jf-s
f() CALL libcall_memcmp_thunk arm1136jf-s [f(RSP)] 11
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH f()
(RSP + -1956) PTRSUB RSP -1956
 STORE 433 (f(RSP) + 16) (RSP + -1956)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 8)] 6
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 4
f(RSP) COPY f(RSP)
f() CALL libcall_memcmp_thunk cortex-r7 [f(RSP)] 9
 CBRANCH (f() INT_NOTEQUAL 0)
f(RSP) COPY f(RSP)
cortex-r7 COPY cortex-r7
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH (f(RSP) INT_EQUAL 0)
0 COPY 0
(RSP + -56) COPY (RSP + -56)
0 INT_EQUAL f(ARG2) 4
 CBRANCH (f(ARG2) INT_EQUAL 4)
 CBRANCH f()
 STORE 433 (f(RSP) + 16) (RSP + -1912)
(RSP + -1912) PTRSUB RSP -1912
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
 STORE 433 (f(RSP) + 16) (RSP + -2128)
(RSP + -2128) PTRSUB RSP -2128
(f(RSP) + 16) PTRADD f(RSP) 2 8
cortex-m1 COPY cortex-m1
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk cortex-m1 [f(RSP)] 9
 CBRANCH (f() INT_NOTEQUAL 0)
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
0 COPY 0
 BRANCH VZERO
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 10)
f() CALL libcall_memcmp_thunk arm926ej-s [f(RSP)] 10
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
arm926ej-s COPY arm926ej-s
 CBRANCH f()
(RSP + -1964) PTRSUB RSP -1964
 STORE 433 (f(RSP) + 16) (RSP + -1964)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 10
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH f()
 STORE 433 (f(RSP) + 16) (RSP + -2016)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -2016) PTRSUB RSP -2016
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
arm922t COPY arm922t
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
f() CALL libcall_memcmp_thunk arm922t [f(RSP)] 7
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 8)] 9
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH f()
(RSP + -2108) PTRSUB RSP -2108
 STORE 433 (f(RSP) + 16) (RSP + -2108)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 COPY 0
0 INT_EQUAL [(f(RSP) + 8)] 7
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 COPY 0
0 INT_EQUAL [(f(RSP) + 8)] 9
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
f(RSP) COPY f(RSP)
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 9
 CBRANCH f()
(RSP + -1892) PTRSUB RSP -1892
 STORE 433 (f(RSP) + 16) (RSP + -1892)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
0 COPY 0
cortex-a9 COPY cortex-a9
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk cortex-a9 [f(RSP)] 9
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH f()
(RSP + -1944) PTRSUB RSP -1944
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1944)
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -2160)
(RSP + -2160) PTRSUB RSP -2160
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 11)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk arm1176jz-s [f(RSP)] 11
arm1176jz-s COPY arm1176jz-s
0 COPY 0
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 8)
0 COPY 0
arm1020t COPY arm1020t
f() CALL libcall_memcmp_thunk arm1020t [f(RSP)] 8
 CBRANCH (f() INT_NOTEQUAL 0)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 BRANCH VZERO
1 COPY 1
 CBRANCH f()
 STORE 433 (f(RSP) + 16) (RSP + -1996)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1996) PTRSUB RSP -1996
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 8)] 9
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 COPY 0
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 COPY 0
0 INT_EQUAL [(f(RSP) + 8)] 4
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 4)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk cortex-a7 [f(RSP)] 9
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
cortex-a7 COPY cortex-a7
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 7
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
 CBRANCH f()
(RSP + -1900) PTRSUB RSP -1900
 STORE 433 (f(RSP) + 16) (RSP + -1900)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -2116) PTRSUB RSP -2116
 STORE 433 (f(RSP) + 16) (RSP + -2116)
 CBRANCH f()
 STORE 433 (f(RSP) + 16) (RSP + -1952)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1952) PTRSUB RSP -1952
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 11)
arm1136jz-s COPY arm1136jz-s
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
f() CALL libcall_memcmp_thunk arm1136jz-s [f(RSP)] 11
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 COPY 0
0 INT_EQUAL [(f(RSP) + 8)] 5
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
[f(RSP)] LOAD 433 f(RSP)
ep9312 COPY ep9312
0 COPY 0
f() CALL libcall_memcmp_thunk ep9312 [f(RSP)] 6
 CBRANCH (f() INT_NOTEQUAL 0)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH f()
(RSP + -2004) PTRSUB RSP -2004
 STORE 433 (f(RSP) + 16) (RSP + -2004)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 COPY 0
0 INT_EQUAL [(f(RSP) + 8)] 5
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -2056)
(RSP + -2056) PTRSUB RSP -2056
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 10)
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
cortex-a35 COPY cortex-a35
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk cortex-a35 [f(RSP)] 10
[f(RSP)] LOAD 433 f(RSP)
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 13)
strongarm1100 COPY strongarm1100
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk strongarm1100 [f(RSP)] 13
 CBRANCH (f() INT_NOTEQUAL 0)
[f(RSP)] LOAD 433 f(RSP)
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 10)
f(RSP) COPY f(RSP)
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 10
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 8)] 11
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
f() CALL libcall_memcmp_thunk arm946e-s [f(RSP)] 9
f(RSP) COPY f(RSP)
arm946e-s COPY arm946e-s
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
1 COPY 1
 BRANCH VZERO
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1988) PTRSUB RSP -1988
 STORE 433 (f(RSP) + 16) (RSP + -1988)
 CBRANCH f()
 STORE 433 (f(RSP) + 16) (RSP + -2040)
(RSP + -2040) PTRSUB RSP -2040
(f(RSP) + 16) PTRADD f(RSP) 2 8
cyclone COPY cyclone
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
f() CALL libcall_memcmp_thunk cyclone [f(RSP)] 7
1 COPY 1
 BRANCH VZERO
 BRANCH VZERO
1 COPY 1
arm710t COPY arm710t
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk arm710t [f(RSP)] 7
[f(RSP)] LOAD 433 f(RSP)
1 COPY 1
 BRANCH VZERO
[f(RSP)] LOAD 433 f(RSP)
krait COPY krait
f() CALL libcall_memcmp_thunk krait [f(RSP)] 5
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
1 COPY 1
 BRANCH VZERO
 CBRANCH f()
(RSP + -2092) PTRSUB RSP -2092
 STORE 433 (f(RSP) + 16) (RSP + -2092)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 8
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
1 COPY 1
 BRANCH VZERO
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1928)
(RSP + -1928) PTRSUB RSP -1928
 CBRANCH f()
 STORE 433 (f(RSP) + 16) (RSP + -2144)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -2144) PTRSUB RSP -2144
arm1156t2-s COPY arm1156t2-s
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk arm1156t2-s [f(RSP)] 11
[f(RSP)] LOAD 433 f(RSP)
1 COPY 1
 BRANCH VZERO
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 10)
f(RSP) COPY f(RSP)
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 10
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 8)] 8
0 COPY 0
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 8)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 BRANCH VZERO
1 COPY 1
 CBRANCH f()
(RSP + -2048) PTRSUB RSP -2048
 STORE 433 (f(RSP) + 16) (RSP + -2048)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[f(RSP)] LOAD 433 f(RSP)
cortex-a57 COPY cortex-a57
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk cortex-a57 [f(RSP)] 10
1 COPY 1
 BRANCH VZERO
f() CALL libcall_memcmp_thunk arm7tdmi [f(RSP)] 8
 CBRANCH (f() INT_NOTEQUAL 0)
[f(RSP)] LOAD 433 f(RSP)
arm7tdmi COPY arm7tdmi
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 11
(f(RSP) + 8) PTRADD f(RSP) 1 8
cortex-a15 COPY cortex-a15
f() CALL libcall_memcmp_thunk cortex-a15 [f(RSP)] 10
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
1 COPY 1
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1884)
(RSP + -1884) PTRSUB RSP -1884
 CBRANCH f()
 STORE 433 (f(RSP) + 16) (RSP + -2100)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -2100) PTRSUB RSP -2100
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 6
 CBRANCH f()
 STORE 433 (f(RSP) + 16) (RSP + -2152)
(RSP + -2152) PTRSUB RSP -2152
(f(RSP) + 16) PTRADD f(RSP) 2 8
 BRANCH VZERO
1 COPY 1
mpcorenovfp COPY mpcorenovfp
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk mpcorenovfp [f(RSP)] 11
[f(RSP)] LOAD 433 f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
1025 COPY 1025
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 16)] 0
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 16)] 0
1025 COPY 1025
1041 COPY 1041
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1 COPY 1
17 COPY 17
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
1041 COPY 1041
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
1025 COPY 1025
0 INT_EQUAL [(f(RSP) + 16)] 0
1906 COPY 1906
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 16)] 0
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1906 COPY 1906
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL f(RSP) 0
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1025 COPY 1025
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
1136 COPY 1136
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1 COPY 1
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
1 COPY 1
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
1041 COPY 1041
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
17 COPY 17
0 INT_EQUAL [(f(RSP) + 16)] 0
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1 COPY 1
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
1 COPY 1
1136 COPY 1136
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
1 COPY 1
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
1904 COPY 1904
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -56) PTRSUB RSP -56
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
1 COPY 1
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1904 COPY 1904
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1041 COPY 1041
f(RSP) COPY f(RSP)
((ARG3 * 64) + 4) INT_ADD (ARG3 * 64) 4
1 COPY 1
f(RSP) COPY f(RSP)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
1 COPY 1
6950096 PTRSUB 0 6950096
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1 COPY 1
f(RSP) COPY f(RSP)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
1072 COPY 1072
1904 COPY 1904
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
(RSP + -56) PTRSUB RSP -56
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
1 COPY 1
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1344 COPY 1344
0 INT_NOTEQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_NOTEQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
1 COPY 1
1344 COPY 1344
f(RSP) COPY f(RSP)
 CBRANCH f()
1 COPY 1
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1904 COPY 1904
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1280 COPY 1280
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1 COPY 1
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1 COPY 1
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1 COPY 1
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
1 COPY 1
((ARG3 * 64) + 6950100) CAST ((ARG3 * 64) + 6950100)
(f(RSP) + 16) PTRADD f(RSP) 2 8
6950096 CAST 6950096
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
1 COPY 1
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
1 COPY 1
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
1 COPY 1
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 16)] 0
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
1 COPY 1
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1 COPY 1
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
[((ARG3 * 64) + 6950100)] COPY [((ARG3 * 64) + 6950100)]
1 COPY 1
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
(ARG3 * 64) INT_MULT ARG3 64
f(RSP) COPY f(RSP)
1025 COPY 1025
0 INT_EQUAL [(f(RSP) + 16)] 0
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
1 COPY 1
f(RSP) COPY f(RSP)
((ARG3 * 64) + 6950100) INT_ADD 6950096 ((ARG3 * 64) + 4)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1 COPY 1
0 INT_EQUAL [(f(RSP) + 16)] 0
 BRANCH VZERO
1025 COPY 1025
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
[((ARG3 * 64) + 6950100)] LOAD 433 ((ARG3 * 64) + 6950100)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1 COPY 1
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1025 COPY 1025
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
f() COPY f()
1 COPY 1
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
1025 COPY 1025
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 16)] 0
1281 COPY 1281
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
1 COPY 1
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1072 COPY 1072
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 COPY 0
f(RSP) COPY f(RSP)
1025 COPY 1025
f(RSP) COPY f(RSP)
1025 COPY 1025
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
f(RSP) COPY f(RSP)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
1025 COPY 1025
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
1 COPY 1
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 COPY 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1281 COPY 1281
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1025 COPY 1025
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
1 COPY 1
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 16)] 0
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
1025 COPY 1025
1906 COPY 1906
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
1906 COPY 1906
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
f(RSP) COPY f(RSP)
 CBRANCH f()
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
1025 COPY 1025
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
1025 COPY 1025
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH f()
1906 COPY 1906
0 INT_EQUAL [(f(RSP) + 16)] 0
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
 CBRANCH (ARG2 INT_EQUAL 4)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 CBRANCH f()
0 INT_EQUAL [(f(RSP) + 16)] 0
f(RSP) COPY f(RSP)
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
f(RSP) COPY f(RSP)
1 COPY 1
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
1906 COPY 1906
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
1025 COPY 1025
0 INT_EQUAL [(f(RSP) + 16)] 0
 CBRANCH f()
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 16)] INT_EQUAL 0)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 10
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 13
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 9
 STORE 433 (f(RSP) + 16) (RSP + -1936)
(RSP + -1936) PTRSUB RSP -1936
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
[f(RSP)] LOAD 433 f(RSP)
xscale COPY xscale
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk xscale [f(RSP)] 6
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 8)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk arm9tdmi [f(RSP)] 8
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
arm9tdmi COPY arm9tdmi
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
(RSP + -2028) PTRSUB RSP -2028
 STORE 433 (f(RSP) + 16) (RSP + -2028)
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 COPY 0
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 12
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 12)
(f(RSP) + 8) PTRADD f(RSP) 1 8
 STORE 433 (f(RSP) + 16) (RSP + -2080)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -2080) PTRSUB RSP -2080
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
cortex-r5 COPY cortex-r5
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk cortex-r5 [f(RSP)] 9
 CBRANCH (f() INT_NOTEQUAL 0)
[f(RSP)] LOAD 433 f(RSP)
0 COPY 0
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 4)
4729808 PTRSUB 0 4729808
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk 4729808 [f(RSP)] 4
0 COPY 0
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
0 COPY 0
0 INT_EQUAL [(f(RSP) + 8)] 9
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 13)
cortex-m0plus COPY cortex-m0plus
f() CALL libcall_memcmp_thunk cortex-m0plus [f(RSP)] 13
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
1 COPY 1
 BRANCH VZERO
(RSP + -1916) PTRSUB RSP -1916
 STORE 433 (f(RSP) + 16) (RSP + -1916)
(f(RSP) + 16) PTRADD f(RSP) 2 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 COPY 0
0 INT_EQUAL [(f(RSP) + 8)] 9
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
f(RSP) COPY f(RSP)
(RSP + -2132) PTRSUB RSP -2132
 STORE 433 (f(RSP) + 16) (RSP + -2132)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 COPY 0
0 INT_EQUAL [(f(RSP) + 8)] 7
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 8)
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
arm1022e COPY arm1022e
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk arm1022e [f(RSP)] 8
[f(RSP)] LOAD 433 f(RSP)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
f(RSP) COPY f(RSP)
0 COPY 0
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 9
 STORE 433 (f(RSP) + 16) (RSP + -2088)
(RSP + -2088) PTRSUB RSP -2088
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
cortex-r4 COPY cortex-r4
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk cortex-r4 [f(RSP)] 9
 CBRANCH (f() INT_NOTEQUAL 0)
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 5
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 5)
f(RSP) COPY f(RSP)
0 COPY 0
0 COPY 0
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 10
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 10)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -2140) PTRSUB RSP -2140
 STORE 433 (f(RSP) + 16) (RSP + -2140)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 10)
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 10
0 COPY 0
0 COPY 0
0 INT_EQUAL [(f(RSP) + 8)] 10
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 10)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 12)
f() CALL libcall_memcmp_thunk arm1156t2f-s [f(RSP)] 12
 CBRANCH (f() INT_NOTEQUAL 0)
f(RSP) COPY f(RSP)
arm1156t2f-s COPY arm1156t2f-s
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
0 COPY 0
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1924) PTRSUB RSP -1924
 STORE 433 (f(RSP) + 16) (RSP + -1924)
 STORE 433 (f(RSP) + 16) (RSP + -1976)
(RSP + -1976) PTRSUB RSP -1976
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
arm10e COPY arm10e
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
0 COPY 0
f() CALL libcall_memcmp_thunk arm10e [f(RSP)] 6
 CBRANCH (f() INT_NOTEQUAL 0)
[f(RSP)] LOAD 433 f(RSP)
 STORE 433 (f(RSP) + 16) (RSP + -1960)
(RSP + -1960) PTRSUB RSP -1960
(f(RSP) + 16) PTRADD f(RSP) 2 8
[f(RSP)] LOAD 433 f(RSP)
arm1136j-s COPY arm1136j-s
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
f() CALL libcall_memcmp_thunk arm1136j-s [f(RSP)] 10
1 COPY 1
 BRANCH VZERO
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 9
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 4
(f(RSP) + 8) PTRADD f(RSP) 1 8
arm9312 COPY arm9312
f() CALL libcall_memcmp_thunk arm9312 [f(RSP)] 7
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 BRANCH VZERO
1 COPY 1
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -2012) PTRSUB RSP -2012
 STORE 433 (f(RSP) + 16) (RSP + -2012)
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 13
 BRANCH VZERO
1 COPY 1
strongarm COPY strongarm
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk strongarm [f(RSP)] 9
[f(RSP)] LOAD 433 f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 8
f(RSP) COPY f(RSP)
0 COPY 0
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 7
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
 STORE 433 (f(RSP) + 16) (RSP + -2064)
(RSP + -2064) PTRSUB RSP -2064
(f(RSP) + 16) PTRADD f(RSP) 2 8
 BRANCH VZERO
1 COPY 1
cortex-m4 COPY cortex-m4
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk cortex-m4 [f(RSP)] 9
[f(RSP)] LOAD 433 f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 12
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1968)
(RSP + -1968) PTRSUB RSP -1968
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 6
(f(RSP) + 8) PTRADD f(RSP) 1 8
1 COPY 1
 BRANCH VZERO
arm920t COPY arm920t
 CBRANCH (f() INT_NOTEQUAL 0)
f() CALL libcall_memcmp_thunk arm920t [f(RSP)] 7
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
invalid COPY invalid
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk invalid [f(RSP)] 7
 CBRANCH (f() INT_NOTEQUAL 0)
(RSP + -2020) PTRSUB RSP -2020
 STORE 433 (f(RSP) + 16) (RSP + -2020)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -2072) PTRSUB RSP -2072
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -2072)
f() CALL libcall_memcmp_thunk sc300 [f(RSP)] 5
[f(RSP)] LOAD 433 f(RSP)
sc300 COPY sc300
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
1 COPY 1
 BRANCH VZERO
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
4729819 PTRSUB 0 4729819
f() CALL libcall_memcmp_thunk 4729819 [f(RSP)] 4
[f(RSP)] LOAD 433 f(RSP)
1 COPY 1
 BRANCH VZERO
sc000 COPY sc000
f() CALL libcall_memcmp_thunk sc000 [f(RSP)] 5
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 BRANCH VZERO
1 COPY 1
 STORE 433 (f(RSP) + 16) (RSP + -1908)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1908) PTRSUB RSP -1908
 STORE 433 (f(RSP) + 16) (RSP + -2124)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -2124) PTRSUB RSP -2124
0 INT_EQUAL [(f(RSP) + 8)] 8
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
0 INT_EQUAL [(f(RSP) + 8)] 6
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
arm10tdmi COPY arm10tdmi
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk arm10tdmi [f(RSP)] 9
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 9
f(RSP) COPY f(RSP)
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 11
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 STORE 433 (f(RSP) + 16) (RSP + -2000)
(RSP + -2000) PTRSUB RSP -2000
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_EQUAL [(f(RSP) + 8)] 7
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 7)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 10)
f() CALL libcall_memcmp_thunk cortex-a53 [f(RSP)] 10
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
cortex-a53 COPY cortex-a53
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 13)
f() CALL libcall_memcmp_thunk strongarm1110 [f(RSP)] 13
f(RSP) COPY f(RSP)
strongarm1110 COPY strongarm1110
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -2052) PTRSUB RSP -2052
 STORE 433 (f(RSP) + 16) (RSP + -2052)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1888)
(RSP + -1888) PTRSUB RSP -1888
 STORE 433 (f(RSP) + 16) (RSP + -2104)
(RSP + -2104) PTRSUB RSP -2104
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 10)
cortex-a12 COPY cortex-a12
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
f() CALL libcall_memcmp_thunk cortex-a12 [f(RSP)] 10
[f(RSP)] LOAD 433 f(RSP)
1 COPY 1
 BRANCH VZERO
(RSP + -2008) PTRSUB RSP -2008
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -2008)
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk arm940t [f(RSP)] 7
arm940t COPY arm940t
[f(RSP)] LOAD 433 f(RSP)
(RSP + -2164) PTRSUB RSP -2164
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
cortex-m7 COPY cortex-m7
f() CALL libcall_memcmp_thunk cortex-m7 [f(RSP)] 9
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 12)
strongarm110 COPY strongarm110
f() CALL libcall_memcmp_thunk strongarm110 [f(RSP)] 12
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 STORE 433 (f(RSP) + 16) (RSP + -2060)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -2060) PTRSUB RSP -2060
0 INT_EQUAL [(f(RSP) + 8)] 10
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(RSP + -2112) PTRSUB RSP -2112
 STORE 433 (f(RSP) + 16) (RSP + -2112)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1896)
(RSP + -1896) PTRSUB RSP -1896
(f(RSP) + 16) PTRADD f(RSP) 2 8
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 9)
[f(RSP)] LOAD 433 f(RSP)
cortex-a8 COPY cortex-a8
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
f() CALL libcall_memcmp_thunk cortex-a8 [f(RSP)] 9
 CBRANCH (f() INT_NOTEQUAL 0)
1 COPY 1
 BRANCH VZERO
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 7
(f(RSP) + 8) PTRADD f(RSP) 1 8
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
1 COPY 1
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 10)
arm1176j-s COPY arm1176j-s
f() CALL libcall_memcmp_thunk arm1176j-s [f(RSP)] 10
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1948) PTRSUB RSP -1948
 STORE 433 (f(RSP) + 16) (RSP + -1948)
f(RSP) COPY f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 9
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 6
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 13
f(RSP) COPY f(RSP)
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -2096)
(RSP + -2096) PTRSUB RSP -2096
(RSP + -1880) PTRSUB RSP -1880
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1880)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk cortex-a17 [f(RSP)] 10
cortex-a17 COPY cortex-a17
[f(RSP)] LOAD 433 f(RSP)
1 COPY 1
 BRANCH VZERO
arm1176jzf-s COPY arm1176jzf-s
f() CALL libcall_memcmp_thunk arm1176jzf-s [f(RSP)] 12
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 BRANCH VZERO
1 COPY 1
 STORE 433 (f(RSP) + 16) (RSP + -1932)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1932) PTRSUB RSP -1932
0 INT_EQUAL [(f(RSP) + 8)] 10
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(RSP + -2148) PTRSUB RSP -2148
 STORE 433 (f(RSP) + 16) (RSP + -2148)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -1984) PTRSUB RSP -1984
 STORE 433 (f(RSP) + 16) (RSP + -1984)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f() CALL libcall_memcmp_thunk arm966e-s [f(RSP)] 9
[f(RSP)] LOAD 433 f(RSP)
arm966e-s COPY arm966e-s
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
1 COPY 1
 BRANCH VZERO
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 10
(f(RSP) + 8) PTRADD f(RSP) 1 8
 RETURN 0 f(ARG3 , RSP)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
 BRANCH VZERO
1 COPY 1
arm720t COPY arm720t
f() CALL libcall_memcmp_thunk arm720t [f(RSP)] 7
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
 STORE 433 (f(RSP) + 16) (RSP + -2036)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(RSP + -2036) PTRSUB RSP -2036
 BRANCH VZERO
1 COPY 1
exynos-m1 COPY exynos-m1
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk exynos-m1 [f(RSP)] 9
 CBRANCH ([(f(RSP) + 8)] INT_EQUAL 6)
(f(RSP) + 8) PTRADD f(RSP) 1 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 6
1 COPY 1
 BRANCH VZERO
[f(RSP)] LOAD 433 f(RSP)
mpcore COPY mpcore
f() CALL libcall_memcmp_thunk mpcore [f(RSP)] 6
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
(RSP + -1940) PTRSUB RSP -1940
 STORE 433 (f(RSP) + 16) (RSP + -1940)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 9
(f(RSP) + 8) PTRADD f(RSP) 1 8
(RSP + -2156) PTRSUB RSP -2156
 STORE 433 (f(RSP) + 16) (RSP + -2156)
(f(RSP) + 16) PTRADD f(RSP) 2 8
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 12
(f(RSP) + 8) PTRADD f(RSP) 1 8
(f(RSP) + 16) PTRADD f(RSP) 2 8
 STORE 433 (f(RSP) + 16) (RSP + -1992)
(RSP + -1992) PTRSUB RSP -1992
1 COPY 1
 BRANCH VZERO
arm9e COPY arm9e
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk arm9e [f(RSP)] 5
[f(RSP)] LOAD 433 f(RSP)
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 9
1 COPY 1
 BRANCH VZERO
arm7tdmi-s COPY arm7tdmi-s
f() CALL libcall_memcmp_thunk arm7tdmi-s [f(RSP)] 10
f(RSP) COPY f(RSP)
0 INT_NOTEQUAL f() 0
[f(RSP)] LOAD 433 f(RSP)
(RSP + -2044) PTRSUB RSP -2044
 STORE 433 (f(RSP) + 16) (RSP + -2044)
(f(RSP) + 16) PTRADD f(RSP) 2 8
(f(RSP) + 8) PTRADD f(RSP) 1 8
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
0 INT_EQUAL [(f(RSP) + 8)] 10
f(RSP) COPY f(RSP)
 BRANCH VZERO
1 COPY 1
f(RSP) COPY f(RSP)
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
(f(RSP) + 8) PTRADD f(RSP) 1 8
0 INT_EQUAL [(f(RSP) + 8)] 9
1 COPY 1
 BRANCH VZERO
cortex-a72 COPY cortex-a72
f() CALL libcall_memcmp_thunk cortex-a72 [f(RSP)] 10
0 INT_NOTEQUAL f() 0
f(RSP) COPY f(RSP)
[f(RSP)] LOAD 433 f(RSP)
4729798 PTRSUB 0 4729798
4729803 PTRSUB 0 4729803
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
 CBRANCH (A_Stack[-0x30]:8 INT_EQUAL 0)
0 INT_EQUAL A_Stack[-0x30]:8 0
A_Stack[-0x30]:8 COPY A_Stack[-0x30]:8
A_Stack[-0x38]:8 COPY A_Stack[-0x38]:8
0 INT_NOTEQUAL f() 0
0 COPY 0
(RSP + -56) COPY (RSP + -56)
[[(f(RSP) + 16)]] COPY [[(f(RSP) + 16)]]
[[(f(RSP) + 16)]] LOAD 433 [(f(RSP) + 16)]
(f(RSP) + 16) PTRADD f(RSP) 2 8
0 INT_NOTEQUAL f() 0
0 INT_EQUAL f() 0
f() CALL libcall_memcmp_thunk 4729803 f(ARG1) 4
[(f(RSP) + 16)] LOAD 433 (f(RSP) + 16)
 BRANCH VZERO
f(ARG3) CALL func ARG3
f(ARG2) CALL func 8 ARG2
0 INT_NOTEQUAL f(ARG2) 0
 CBRANCH (f(ARG2) INT_NOTEQUAL 0)
[f(ARG3)] LOAD 433 f(ARG3)
 RETURN 0
f(ARG3) CAST f(ARG3)
f(ARG2) CAST f(ARG2)
 STORE 433 f(ARG2) [f(ARG3)]
 CALL func ARG1 ARG2 f(ARG3) ARG2
f(ARG3) CALL func ARG3
 RETURN 0
f(ARG2) CALL func ARG2
 CALL func ARG1 [ARG1] (([(ARG1 + 16)] - [ARG1]) / 8) [ARG1]
f(RSP) CALL func ARG1 1 0
f() CALL func ARG1
[ARG1] LOAD 433 ARG1
f() CALL func ARG1 f(RSP) f(RSP)
 CALL func ARG1 ((f() * 8) + f()) f(ARG2) ((f() * 8) + f())
(ARG1 + 8) PTRADD ARG1 1 8
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
[ARG1] LOAD 433 ARG1
 STORE 433 ARG1 f()
f(ARG1) CALL func ARG1
f(ARG1) CALL func ARG1
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 16) PTRADD ARG1 2 8
(ARG1 + 8) PTRADD ARG1 1 8
(ARG1 + 8) PTRADD ARG1 1 8
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 STORE 433 (ARG1 + 8) (f() + 8)
f() CALL func [ARG1] [(ARG1 + 8)] f() f(ARG1)
(([(ARG1 + 16)] - [ARG1]) / 8) INT_SRIGHT ([(ARG1 + 16)] - [ARG1]) 3
((f(RSP) * 8) + f()) INT_ADD (f(RSP) * 8) f()
 STORE 433 (ARG1 + 16) ((f(RSP) * 8) + f())
((f() * 8) + f()) INT_ADD (f() * 8) f()
(f(RSP) * 8) INT_MULT f(RSP) 8
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(f() * 8) INT_MULT f() 8
 CALL func [ARG1] [(ARG1 + 8)] f(ARG1) [(ARG1 + 8)]
(f() + 8) INT_ADD f() 8
([(ARG1 + 16)] - [ARG1]) INT_SUB [(ARG1 + 16)] [ARG1]
0 COPY 0
 RETURN 0
 CALL func ARG1 f(ARG2) f(ARG2)
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 16) INT_ADD ARG1 16
 CALL func ARG1 [(ARG1 + 8)] f(ARG2) [(ARG1 + 8)]
(ARG1 + 8) INT_ADD ARG1 8
(ARG1 + 8) INT_ADD ARG1 8
f(ARG2) CALL func ARG2
f(ARG2) CALL func ARG2
[(ARG1 + 16)] LOAD 433 (ARG1 + 16)
(ARG1 + 16) CAST (ARG1 + 16)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
0 INT_EQUAL [(ARG1 + 8)] [(ARG1 + 16)]
 RETURN 0
 CBRANCH ([(ARG1 + 8)] INT_EQUAL [(ARG1 + 16)])
(ARG1 + 8) CAST (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
 STORE 433 (ARG1 + 8) ([(ARG1 + 8)] + 8)
([(ARG1 + 8)] + 8) INT_ADD [(ARG1 + 8)] 8
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
(ARG1 + 8) CAST (ARG1 + 8)
[(ARG1 + 8)] LOAD 433 (ARG1 + 8)
 BRANCH VZERO
ARG1 COPY ARG1
 RETURN 0 ARG1
 CALL func ARG1 f(ARG2) f(ARG2)
f(ARG2) CALL func ARG2
 RETURN 0
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
(ARG1 & 16) INT_AND ARG1 16
(ARG1 & 32) INT_AND ARG1 32
0 INT_EQUAL ARG1 0
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CBRANCH (ARG1 INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH ((ARG1 & 16) INT_EQUAL 0)
(RSP + -24) PTRSUB RSP -24
+hwdiv COPY +hwdiv
-hwdiv COPY -hwdiv
(RSP + -24) PTRSUB RSP -24
 BRANCH VZERO
 CBRANCH ((ARG1 & 32) INT_EQUAL 0)
-hwdiv-arm COPY -hwdiv-arm
(RSP + -24) PTRSUB RSP -24
 BRANCH VZERO
+hwdiv-arm COPY +hwdiv-arm
(RSP + -24) PTRSUB RSP -24
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
0 INT_EQUAL (ARG1 & 32) 0
0 INT_EQUAL (ARG1 & 16) 0
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
f() CALL func ARG1 ARG2 ARG2
(ARG1 & 2) INT_AND ARG1 2
(ARG1 & 1024) INT_AND ARG1 1024
0 INT_EQUAL ARG1 0
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (ARG1 INT_EQUAL 0)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) CAST (f() + 40)
(f() + 40) INT_ADD f() 40
[(f() + 40)] LOAD 433 (f() + 40)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f()
 RETURN 1
0 COPY 0
 CBRANCH ((ARG1 & 2) INT_EQUAL 0)
 BRANCH VZERO
0 INT_EQUAL (ARG1 & 1024) 0
0 INT_EQUAL (ARG1 & 2) 0
 CBRANCH ((ARG1 & 1024) INT_EQUAL 0)
Symbol PTRSUB 0 Symbol
(RSP + -24) PTRSUB RSP -24
Symbol PTRSUB 0 Symbol
(RSP + -24) PTRSUB RSP -24
 BRANCH VZERO
(RSP + -24) PTRSUB RSP -24
Symbol PTRSUB 0 Symbol
(RSP + -24) PTRSUB RSP -24
Symbol PTRSUB 0 Symbol
 BRANCH VZERO
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
 CALL func ARG2 (RSP + -24) (RSP + -24)
0 INT_LESS ARG1 22
ARG1 INT_ZEXT ARG1
ARG1 INT_ZEXT ARG1
0 INT_NOTEQUAL ARG1 0
ARG1 INT_ZEXT ARG1
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CBRANCH (ARG1 INT_LESS 22)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (ARG1 INT_NOTEQUAL 0)
(ARG1 * 32) INT_MULT ARG1 32
 CBRANCH ([((ARG1 * 32) + 6949372)] INT_EQUAL 1)
[(Symbol + (ARG1 * 32))] LOAD 433 (Symbol + (ARG1 * 32))
((ARG1 * 32) + 4) INT_ADD (ARG1 * 32) 4
0 COPY 0
6949368 PTRSUB 0 6949368
Symbol PTRSUB 0 Symbol
((ARG1 * 32) + 6949372) INT_ADD 6949368 ((ARG1 * 32) + 4)
0 INT_EQUAL [((ARG1 * 32) + 6949372)] 1
1 COPY 1
 BRANCHIND [((ARG1 * 32) + 6949364)]
(ARG1 * 4) INT_MULT ARG1 4
[((ARG1 * 32) + 6949372)] LOAD 433 ((ARG1 * 32) + 6949372)
((ARG1 * 32) + 6949364) INT_ADD 6949360 ((ARG1 * 32) + 4)
((ARG1 * 32) + 6949372) CAST ((ARG1 * 32) + 6949372)
6949368 CAST 6949368
6949360 PTRSUB 0 6949360
(Symbol + (ARG1 * 32)) CAST (Symbol + (ARG1 * 32))
((ARG1 * 32) + 4) INT_ADD (ARG1 * 32) 4
(Symbol + (ARG1 * 32)) PTRADD Symbol (ARG1 * 4) 8
[((ARG1 * 32) + 6949364)] LOAD 433 ((ARG1 * 32) + 6949364)
 BRANCH VZERO
((ARG1 * 32) + 6949364) CAST ((ARG1 * 32) + 6949364)
(ARG1 * 32) INT_MULT ARG1 32
6949360 CAST 6949360
0 INT_EQUAL [(Symbol + (ARG1 * 32))] 1
 CBRANCH ([(Symbol + (ARG1 * 32))] INT_EQUAL 1)
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 CBRANCH ([((ARG1 * 32) + 6949372)] INT_EQUAL 0)
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
Symbol COPY Symbol
-fp-only-sp COPY -fp-only-sp
(RSP + -24) PTRSUB RSP -24
Symbol COPY Symbol
(RSP + -24) PTRSUB RSP -24
0 INT_EQUAL [((ARG1 * 32) + 6949372)] 2
 BRANCH VZERO
 CBRANCH ([((ARG1 * 32) + 6949372)] INT_EQUAL 2)
-fp-only-sp COPY -fp-only-sp
0 INT_EQUAL [((ARG1 * 32) + 6949372)] 0
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
Symbol COPY Symbol
+fp-only-sp COPY +fp-only-sp
 BRANCH VZERO
 CBRANCH ([(Symbol + (ARG1 * 32))] INT_EQUAL 0)
-crypto COPY -crypto
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
-neon COPY -neon
 CBRANCH ([(Symbol + (ARG1 * 32))] INT_EQUAL 2)
+crypto COPY +crypto
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
+neon COPY +neon
0 INT_EQUAL [(Symbol + (ARG1 * 32))] 0
 BRANCH VZERO
-crypto COPY -crypto
(RSP + -24) PTRSUB RSP -24
 BRANCH VZERO
+neon COPY +neon
(RSP + -24) PTRSUB RSP -24
0 INT_EQUAL [(Symbol + (ARG1 * 32))] 2
+vfp3 COPY +vfp3
(RSP + -24) PTRSUB RSP -24
-fp-armv8 COPY -fp-armv8
(RSP + -24) PTRSUB RSP -24
-vfp4 COPY -vfp4
 BRANCH VZERO
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
-fp-armv8 COPY -fp-armv8
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
-vfp4 COPY -vfp4
(RSP + -24) PTRSUB RSP -24
-fp16 COPY -fp16
(RSP + -24) PTRSUB RSP -24
+vfp3 COPY +vfp3
 BRANCH VZERO
(RSP + -24) PTRSUB RSP -24
-fp16 COPY -fp16
(RSP + -24) PTRSUB RSP -24
-vfp4 COPY -vfp4
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
-fp-armv8 COPY -fp-armv8
-fp-armv8 COPY -fp-armv8
-vfp3 COPY -vfp3
+fp-armv8 COPY +fp-armv8
(RSP + -24) PTRSUB RSP -24
(RSP + -24) PTRSUB RSP -24
+vfp2 COPY +vfp2
+vfp4 COPY +vfp4
-fp16 COPY -fp16
-vfp3 COPY -vfp3
(RSP + -24) PTRSUB RSP -24
 BRANCH VZERO
(RSP + -24) PTRSUB RSP -24
 BRANCH VZERO
-fp-armv8 COPY -fp-armv8
(RSP + -24) PTRSUB RSP -24
+fp16 COPY +fp16
-vfp4 COPY -vfp4
 BRANCH VZERO
-vfp2 COPY -vfp2
f() CALL func ((ARG1 * 64) + 6950048) ARG2 (ARG1 * 64)
0 INT_LESS ARG1 27
ARG1 INT_ZEXT ARG1
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CBRANCH (ARG1 INT_LESS 27)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
(RSP + -40) PTRSUB RSP -40
6950048 PTRSUB 0 6950048
(ARG1 * 8) INT_MULT ARG1 8
 CALL func (RSP + -40)
((ARG1 * 64) + 6950048) PTRADD 6950048 (ARG1 * 8) 8
 BRANCH VZERO
(ARG1 * 64) INT_MULT ARG1 64
f() CALL func ((ARG1 * 64) + 6950048) ARG2 (ARG1 * 64)
ARG1 INT_ZEXT ARG1
0 INT_LESS ARG1 27
(f() + 40) CAST (f() + 40)
 CBRANCH (ARG1 INT_LESS 27)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
6950048 PTRSUB 0 6950048
(ARG1 * 8) INT_MULT ARG1 8
 CALL func (RSP + -40)
((ARG1 * 64) + 6950048) PTRADD 6950048 (ARG1 * 8) 8
 BRANCH VZERO
(ARG1 * 64) INT_MULT ARG1 64
(RSP + -40) PTRSUB RSP -40
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
f() CALL func ((ARG1 * 64) + 6950048) ARG2 (ARG1 * 64)
0 INT_LESS ARG1 27
ARG1 INT_ZEXT ARG1
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CBRANCH (ARG1 INT_LESS 27)
(f() + 40) CAST (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 RETURN 1
 RETURN 0 f()
 CALL libcall___stack_chk_fail_thunk
(RSP + -40) PTRSUB RSP -40
6950048 PTRSUB 0 6950048
(ARG1 * 8) INT_MULT ARG1 8
 CALL func (RSP + -40)
((ARG1 * 64) + 6950048) PTRADD 6950048 (ARG1 * 8) 8
 BRANCH VZERO
(ARG1 * 64) INT_MULT ARG1 64
ARG1 INT_ZEXT ARG1
0 INT_LESS ARG1 27
 RETURN 0 f(ARG1)
 CBRANCH (ARG1 INT_LESS 27)
0 COPY 0
((ARG1 * 64) + 6950108) INT_ADD 6950104 ((ARG1 * 64) + 4)
[((ARG1 * 64) + 6950108)] LOAD 433 ((ARG1 * 64) + 6950108)
6950104 PTRSUB 0 6950104
(ARG1 * 64) INT_MULT ARG1 64
((ARG1 * 64) + 6950108) CAST ((ARG1 * 64) + 6950108)
6950104 CAST 6950104
 BRANCH VZERO
((ARG1 * 64) + 4) INT_ADD (ARG1 * 64) 4
0 INT_EQUAL ([(f(Symbol) + 16)] / 2147483647) ARG1
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
0 INT_NOTEQUAL 0 [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_EQUAL f(Symbol) 6952416
(f() + 40) CAST (f() + 40)
6952416 PTRSUB 0 6952416
(f() + 40) INT_ADD f() 40
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
 CBRANCH (f(Symbol) INT_EQUAL 6952416)
Symbol PTRSUB 0 Symbol
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(Symbol)
 RETURN 1
 CBRANCH (([(f(Symbol) + 16)] / 2147483647) INT_EQUAL ARG1)
f() CAST f()
f() CALL func (RSP + -56)
(f(Symbol) + 40) PTRADD f(Symbol) 5 8
f() COPY f()
(RSP + -56) PTRSUB RSP -56
 BRANCH VZERO
 BRANCH VZERO
[(f(Symbol) + 8)] LOAD 433 (f(Symbol) + 8)
(f(Symbol) + 16) PTRADD f(Symbol) 2 8
(f(Symbol) + 8) PTRADD f(Symbol) 1 8
(RSP + -56) PTRSUB RSP -56
[(f(Symbol) + 24)] LOAD 433 (f(Symbol) + 24)
([(f(Symbol) + 16)] / 2147483647) SUBPIECE [(f(Symbol) + 16)] 0
[f(Symbol)] LOAD 433 f(Symbol)
(f(Symbol) + 32) PTRADD f(Symbol) 4 8
(f(Symbol) + 24) PTRADD f(Symbol) 3 8
 CALL func (RSP + -56)
[(f(Symbol) + 32)] LOAD 433 (f(Symbol) + 32)
[(f(Symbol) + 16)] LOAD 433 (f(Symbol) + 16)
f(Symbol) COPY f(Symbol)
f() CALL libcall_memcmp_thunk ARG1 A_Stack[-0x48]:8 A_Stack[-0x40]:8
ARG1 COPY ARG1
f() CALL libcall_memcmp_thunk ARG1 (f() / 2147483647) (f() / 4611686014132420609)
ARG1 COPY ARG1
ARG1 CAST ARG1
ARG1 COPY ARG1
ARG2 COPY ARG2
(FS_OFFSET + 40) INT_ADD 0 40
(f() # f()) PIECE f() f()
(RSP + -72) PTRSUB RSP -72
A_Stack[-0x40]:8 COPY A_Stack[-0x40]:8
A_Stack[-0x48]:8 COPY A_Stack[-0x48]:8
(f() # f()) PIECE f() f()
(f() # f()) PIECE f() f()
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH f()
 CALL func (RSP + -72) 4730640
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_LESSEQUAL A_Stack[-0x40]:8 ARG2
4730640 PTRSUB 0 4730640
 CBRANCH (A_Stack[-0x40]:8 INT_LESSEQUAL ARG2)
 CBRANCH ([(f(Symbol) + 24)] INT_EQUAL 0)
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL f(ARG2) (f() / 4611686014132420609)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
f(ARG2) COPY f(ARG2)
(f() / 2147483647) SUBPIECE f() 0
f() COPY f()
(f(ARG1 , RSP) / 2147483647) SUBPIECE f(ARG1 , RSP) 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) INT_RIGHT f() 64
(f() / 2147483647) SUBPIECE f() 8
 CBRANCH ~(f())
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f() CALL func (RSP + -72)
(f() / 2147483647) SUBPIECE f() 8
~(f()) BOOL_NEGATE f()
 CBRANCH (f(ARG2) INT_EQUAL (f() / 4611686014132420609))
(f(ARG1 , RSP) / 2147483647) SUBPIECE f(ARG1 , RSP) 8
(RSP + -72) PTRSUB RSP -72
 CBRANCH (f() INT_EQUAL [(f() + 40)])
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f(ARG1 , RSP) / 2147483647) SUBPIECE f(ARG1 , RSP) 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f(ARG1 , RSP) / 2147483647) SUBPIECE f(ARG1 , RSP) 8
(f() / 2147483647) SUBPIECE f() 0
 CALL libcall___stack_chk_fail_thunk
(f() / 2147483647) SUBPIECE f() 8
 RETURN 0 f(Symbol)
 RETURN 1
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH ([f(RSP)] INT_NOTEQUAL 0)
[f(RSP)] COPY [f(RSP)]
0 COPY 0
(f() + 40) CAST (f() + 40)
Symbol PTRSUB 0 Symbol
0 INT_EQUAL f() [(f() + 40)]
6952416 PTRSUB 0 6952416
/home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h COPY /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h
(f() + 40) INT_ADD f() 40
([f(RSP)] + ARG1) COPY ([f(RSP)] + ARG1)
(data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" COPY (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length"
Symbol PTRSUB 0 Symbol
 CBRANCH (f(Symbol) INT_NOTEQUAL f())
 CALL libcall___assert_fail_thunk (data || length == 0) && "StringRef cannot be built from a NULL argument with non-null length" /home/yijiufly/Downloads/projects/binaries/WorkDir/llvm-project/llvm/include/llvm/ADT/StringRef.h 82 0
0 INT_NOTEQUAL f(Symbol) f()
[(f() + 40)] LOAD 433 (f() + 40)
 RETURN 1
 CBRANCH (f() INT_NOTEQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH (f(Symbol) INT_NOTEQUAL f())
0 INT_EQUAL [(f(Symbol) + 24)] 0
[(f(Symbol) + 16)] LOAD 433 (f(Symbol) + 16)
 CBRANCH f()
(f(Symbol) + 16) PTRADD f(Symbol) 2 8
(f(Symbol) + 32) PTRADD f(Symbol) 4 8
(f(Symbol) + 8) PTRADD f(Symbol) 1 8
[(f(Symbol) + 32)] LOAD 433 (f(Symbol) + 32)
0 COPY 0
[(f(Symbol) + 24)] LOAD 433 (f(Symbol) + 24)
[(f(Symbol) + 8)] LOAD 433 (f(Symbol) + 8)
f(Symbol) COPY f(Symbol)
[f(Symbol)] LOAD 433 f(Symbol)
0 COPY 0
(f(Symbol) + 24) PTRADD f(Symbol) 3 8
 CBRANCH ([(f(Symbol) + 32)] INT_EQUAL 0)
f() COPY f()
(f() / 2147483647) SUBPIECE f() 8
f(ARG1 , RSP) COPY f(ARG1 , RSP)
~(f()) BOOL_NEGATE f()
f() COPY f()
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(RSP + -72) PTRSUB RSP -72
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
 CBRANCH (f(RSP) INT_EQUAL (f() / 4611686014132420609))
f(RSP) COPY f(RSP)
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH ~(f())
(f() / 2147483647) SUBPIECE f() 0
0 COPY 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) INT_RIGHT f() 64
f() CALL func (RSP + -72)
0 INT_EQUAL f(RSP) (f() / 4611686014132420609)
[f(Symbol)] LOAD 433 f(Symbol)
6952416 PTRSUB 0 6952416
0 INT_EQUAL [(f(Symbol) + 32)] 0
[(f(Symbol) + 16)] LOAD 433 (f(Symbol) + 16)
Symbol PTRSUB 0 Symbol
f(Symbol) COPY f(Symbol)
(f(Symbol) + 24) PTRADD f(Symbol) 3 8
(f() # f()) PIECE f() f()
 CBRANCH f()
0 INT_NOTEQUAL f(Symbol) f()
(f() # f()) PIECE f() f()
[(f(Symbol) + 32)] LOAD 433 (f(Symbol) + 32)
(f(RSP) # f(ARG1 , RSP)) PIECE f(RSP) f(ARG1 , RSP)
(f(Symbol) + 16) PTRADD f(Symbol) 2 8
[(f(Symbol) + 24)] LOAD 433 (f(Symbol) + 24)
(f(Symbol) + 32) PTRADD f(Symbol) 4 8
(f(RSP) # f(ARG1 , RSP)) PIECE f(RSP) f(ARG1 , RSP)
(f() # f()) PIECE f() f()
[(f(Symbol) + 8)] LOAD 433 (f(Symbol) + 8)
(f(Symbol) + 8) PTRADD f(Symbol) 1 8
(f() # f()) PIECE f() f()
Symbol PTRSUB 0 Symbol
1 COPY 1
 BRANCH VZERO
0 INT_EQUAL ([f(RSP)] + ARG1) 0
([f(RSP)] + ARG1) INT_ADD [f(RSP)] ARG1
(f() # f()) PIECE f() f()
2 COPY 2
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CALL func (RSP + -336) (RSP + -352) (RSP + -352)
([f(RSP)] + ARG1) CAST ([f(RSP)] + ARG1)
(f() # f()) PIECE f() f()
(f(ARG2) + (~([f(RSP)]) + 1)) PTRADD f(ARG2) (~([f(RSP)]) + 1) 1
(~([f(RSP)]) + 1) INT_2COMP [f(RSP)]
(f() # f()) PIECE f() f()
[f(RSP)] LOAD 433 f(RSP)
f(RSP) CAST f(RSP)
[f(RSP)] CAST [f(RSP)]
([f(RSP)] + ARG1) COPY ([f(RSP)] + ARG1)
f(RSP) CAST f(RSP)
[f(RSP)] COPY [f(RSP)]
(RSP + -336) PTRSUB RSP -336
f(RSP) CALL func (RSP + -328) (RSP + -88) (RSP + -88)
(RSP + -88) PTRSUB RSP -88
-1 COPY -1
 CBRANCH (([f(RSP)] + ARG1) INT_EQUAL 0)
(RSP + -352) PTRSUB RSP -352
(RSP + -328) PTRSUB RSP -328
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
A_Stack[-0x40]:8 COPY A_Stack[-0x40]:8
 CBRANCH (A_Stack[-0x40]:8 INT_EQUAL 0)
A_Stack[-0x48]:8 COPY A_Stack[-0x48]:8
0 INT_EQUAL f() 0
0 INT_EQUAL A_Stack[-0x40]:8 0
f() COPY f()
(f() / 2147483647) SUBPIECE f() 0
(f(Symbol) + 40) PTRADD f(Symbol) 5 8
f() COPY f()
 BRANCH VZERO
 CBRANCH ((f() / 4611686014132420609) INT_EQUAL 0)
0 INT_EQUAL (f() / 4611686014132420609) 0
(f() / 4611686014132420609) CAST (f() / 4611686014132420609)
0 COPY 0
(f(Symbol) + 40) PTRADD f(Symbol) 5 8
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 8
0 INT_NOTEQUAL f() 0
f() CALL libcall_memcmp_thunk f(ARG1 , RSP) (f() / 2147483647) (f() / 4611686014132420609)
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) CAST (f() / 4611686014132420609)
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
0 COPY 0
 BRANCH VZERO
0 INT_NOTEQUAL f() 0
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
A_Stack[-0x40]:8 CAST A_Stack[-0x40]:8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
 BRANCH VZERO
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
f(ARG1 , RSP) COPY f(ARG1 , RSP)
 CBRANCH ((f() / 4611686014132420609) INT_EQUAL 0)
0 INT_EQUAL (f() / 4611686014132420609) 0
0 INT_NOTEQUAL [f(RSP)] 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 8
(f() / 2147483647) SUBPIECE f() 0
0 INT_EQUAL ([(f(Symbol) + 16)] / 2147483647) ARG1
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
0 INT_EQUAL f(Symbol) 6952536
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL 0 [(f() + 40)]
(f() + 40) INT_ADD f() 40
6952536 PTRSUB 0 6952536
6952536 CAST 6952536
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f(Symbol) INT_EQUAL 6952536)
Symbol PTRSUB 0 Symbol
(f() + 40) CAST (f() + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(Symbol)
 RETURN 1
 CBRANCH (([(f(Symbol) + 16)] / 2147483647) INT_EQUAL ARG1)
f() CALL func (RSP + -40)
f() CAST f()
 BRANCH VZERO
 BRANCH VZERO
f() COPY f()
(f(Symbol) + 24) PTRADD f(Symbol) 3 8
(RSP + -40) PTRSUB RSP -40
[f(Symbol)] LOAD 433 f(Symbol)
(f(Symbol) + 8) PTRADD f(Symbol) 1 8
(RSP + -40) PTRSUB RSP -40
f(Symbol) COPY f(Symbol)
(f(Symbol) + 16) PTRADD f(Symbol) 2 8
 CALL func (RSP + -40)
[(f(Symbol) + 16)] LOAD 433 (f(Symbol) + 16)
[(f(Symbol) + 8)] LOAD 433 (f(Symbol) + 8)
([(f(Symbol) + 16)] / 2147483647) SUBPIECE [(f(Symbol) + 16)] 0
ARG2 COPY ARG2
ARG2 COPY ARG2
0 INT_EQUAL ARG2 9
f() CALL libcall_memcmp_thunk thumb,arm ARG1 9
ARG1 COPY ARG1
ARG1 COPY ARG1
(FS_OFFSET + 40) INT_ADD 0 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
(f() + 40) INT_ADD f() 40
0 INT_NOTEQUAL 0 [(f() + 40)]
0 INT_NOTEQUAL f(RSP) 0
0 COPY 0
(RSP + -72) PTRSUB RSP -72
 CBRANCH (f(RSP) INT_NOTEQUAL 0)
(f() + 40) CAST (f() + 40)
 CBRANCH (ARG2 INT_EQUAL 9)
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
arm,thumb COPY arm,thumb
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (0 INT_NOTEQUAL [(f() + 40)])
 CALL func (RSP + -72) arm,thumb
 CBRANCH f()
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
[f(RSP)] LOAD 433 f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
 RETURN 0 (f(ARG2 , RSP) # f(ARG1 , RSP))
 CALL libcall___stack_chk_fail_thunk
 RETURN 1
(f(ARG2 , RSP) # f(ARG1 , RSP)) PIECE f(ARG2 , RSP) f(ARG1 , RSP)
(RSP + -72) PTRSUB RSP -72
thumb,arm COPY thumb,arm
0 INT_EQUAL f() 0
ARG1 COPY ARG1
ARG1 COPY ARG1
f() CALL libcall_memcmp_thunk 4730653 ARG1 3
0 INT_EQUAL ARG2 3
ARG2 COPY ARG2
ARG2 COPY ARG2
0 INT_EQUAL f(RSP) 0
 CBRANCH f()
(RSP + -120) PTRSUB RSP -120
 CBRANCH (f(RSP) INT_EQUAL 0)
 CBRANCH (ARG2 INT_EQUAL 3)
0 INT_EQUAL f(RSP) 0
(RSP + -216) PTRSUB RSP -216
 CALL func (RSP + -168) vfpv3-d16
0 INT_EQUAL f(RSP) 0
vfpv3-d16 COPY vfpv3-d16
 CALL func (RSP + -88) fpv5-d16
0 INT_EQUAL f(RSP) 0
 CBRANCH (f(RSP) INT_EQUAL 0)
 CBRANCH (f(RSP) INT_EQUAL 0)
(RSP + -200) PTRSUB RSP -200
 CBRANCH f()
 CALL func (RSP + -232) invalid
(RSP + -104) PTRSUB RSP -104
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CALL func (RSP + -120) vfpv4-d16
fpv5-sp-d16 COPY fpv5-sp-d16
0 INT_EQUAL f(RSP) 0
0 INT_EQUAL f(RSP) 0
 CBRANCH (f(RSP) INT_EQUAL 0)
 CBRANCH (f(RSP) INT_EQUAL 0)
(RSP + -232) PTRSUB RSP -232
vfpv3 COPY vfpv3
 CBRANCH f()
fpv5-d16 COPY fpv5-d16
 CBRANCH f()
[(f() + 40)] LOAD 433 (f() + 40)
 CALL func (RSP + -184) vfpv4
(RSP + -136) PTRSUB RSP -136
vfpv4 COPY vfpv4
 CBRANCH (f(RSP) INT_EQUAL 0)
(f() + 40) CAST (f() + 40)
 CALL func (RSP + -104) fpv5-sp-d16
 CALL func (RSP + -136) fpv4-sp-d16
(RSP + -168) PTRSUB RSP -168
4729239 PTRSUB 0 4729239
invalid COPY invalid
(RSP + -72) PTRSUB RSP -72
 CBRANCH f()
 CBRANCH f()
0 INT_EQUAL f(RSP) 0
 CBRANCH (f(RSP) INT_EQUAL 0)
(FS_OFFSET + 40) INT_ADD 0 40
vfpv2 COPY vfpv2
 CALL func (RSP + -200) vfpv3
vfpv4-d16 COPY vfpv4-d16
0 INT_EQUAL f(RSP) 0
 CBRANCH f()
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
(RSP + -152) PTRSUB RSP -152
 CBRANCH f()
0 COPY 0
 CBRANCH (f(RSP) INT_EQUAL 0)
0 INT_EQUAL f(RSP) 0
 CBRANCH f()
 CBRANCH (f(RSP) INT_EQUAL 0)
 CALL func (RSP + -72) 4729239
(RSP + -88) PTRSUB RSP -88
 CALL func (RSP + -152) vfpv4-d16
vfpv4-d16 COPY vfpv4-d16
 CBRANCH (f(RSP) INT_NOTEQUAL 0)
 CBRANCH f()
0 INT_NOTEQUAL f(RSP) 0
 CALL func (RSP + -216) vfpv2
 CBRANCH (f(RSP) INT_EQUAL 0)
 CBRANCH f()
(RSP + -184) PTRSUB RSP -184
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
fpv4-sp-d16 COPY fpv4-sp-d16
0 INT_EQUAL f(RSP) 0
(RSP + -168) PTRSUB RSP -168
 CBRANCH (f(ARG2) INT_EQUAL 4)
4730657 PTRSUB 0 4730657
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
0 INT_EQUAL f(ARG2) 4
f() CALL libcall_memcmp_thunk 4730657 f(ARG1) 4
 CBRANCH (f(ARG2) INT_EQUAL 4)
 CBRANCH (f(ARG2) INT_EQUAL 10)
0 COPY 0
0 INT_EQUAL f(ARG2) 10
 CBRANCH (f(ARG2) INT_EQUAL 8)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_memcmp_thunk vfp4-d16 f(ARG1) 8
0 COPY 0
vfp4-d16 COPY vfp4-d16
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
0 COPY 0
1 COPY 1
 CBRANCH (f(ARG2) INT_EQUAL 10)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
fp4-sp-d16 COPY fp4-sp-d16
f() CALL libcall_memcmp_thunk fp4-sp-d16 f(ARG1) 10
0 INT_EQUAL f(ARG2) 12
 CBRANCH (f(ARG2) INT_EQUAL 12)
 CBRANCH (f(ARG2) INT_EQUAL 8)
f() CALL libcall_memcmp_thunk maverick f(ARG1) 8
 CBRANCH (f() INT_EQUAL 0)
maverick COPY maverick
0 COPY 0
0 INT_EQUAL f() 0
0 INT_EQUAL f() 0
vfpv4-sp-d16 COPY vfpv4-sp-d16
0 COPY 0
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_memcmp_thunk vfpv4-sp-d16 f(ARG1) 12
0 INT_EQUAL f() 0
0 INT_EQUAL f(ARG2) 8
f() CALL libcall_memcmp_thunk 4730662 f(ARG1) 4
 CBRANCH (f() INT_EQUAL 0)
4730662 PTRSUB 0 4730662
 CBRANCH (f() INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
0 INT_EQUAL f(ARG2) 4
 CBRANCH (f(ARG2) INT_EQUAL 4)
0 INT_EQUAL f(ARG2) 10
 CBRANCH (f(ARG2) INT_EQUAL 10)
 CBRANCH (f(ARG2) INT_EQUAL 11)
fpv4-dp-d16 COPY fpv4-dp-d16
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_memcmp_thunk fpv4-dp-d16 f(ARG1) 11
0 COPY 0
(RSP + -152) PTRSUB RSP -152
 CBRANCH (f(ARG2) INT_EQUAL 8)
0 INT_EQUAL f() 0
 CBRANCH (f() INT_EQUAL 0)
f() CALL libcall_memcmp_thunk vfp3-d16 f(ARG1) 8
0 COPY 0
vfp3-d16 COPY vfp3-d16
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
1 COPY 1
0 COPY 0
 CBRANCH (f(ARG2) INT_EQUAL 4)
0 COPY 0
0 INT_EQUAL f(ARG2) 4
 CBRANCH (f(ARG2) INT_EQUAL 10)
0 INT_EQUAL f(ARG2) 10
 CBRANCH (f() INT_EQUAL 0)
1 COPY 1
 BRANCH VZERO
(RSP + -72) PTRSUB RSP -72
(RSP + -184) PTRSUB RSP -184
 CBRANCH (f() INT_EQUAL 0)
 CBRANCH (f(ARG2) INT_EQUAL 11)
 BRANCH VZERO
1 COPY 1
0 INT_EQUAL f(ARG2) 11
 CBRANCH (f(ARG2) INT_EQUAL 4)
0 COPY 0
0 INT_EQUAL f(ARG2) 4
 CBRANCH (f() INT_EQUAL 0)
 BRANCH VZERO
1 COPY 1
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f() 0
4730672 PTRSUB 0 4730672
f() CALL libcall_memcmp_thunk 4730672 f(ARG1) 4
1 COPY 1
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
fp5-dp-d16 COPY fp5-dp-d16
0 INT_EQUAL f() 0
f() CALL libcall_memcmp_thunk fp5-dp-d16 f(ARG1) 10
fpv5-dp-d16 COPY fpv5-dp-d16
0 INT_EQUAL f() 0
f() CALL libcall_memcmp_thunk fpv5-dp-d16 f(ARG1) 11
(RSP + -104) PTRSUB RSP -104
(RSP + -216) PTRSUB RSP -216
0 INT_EQUAL f(ARG2) 10
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f(ARG2) 11
1 COPY 1
 BRANCH VZERO
(RSP + -200) PTRSUB RSP -200
f() CALL libcall_memcmp_thunk neon-vfpv3 f(ARG1) 10
0 INT_EQUAL f() 0
neon-vfpv3 COPY neon-vfpv3
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 (f(ARG2 , RSP) # f(ARG1 , RSP))
 RETURN 1
(f(ARG2 , RSP) # f(ARG1 , RSP)) PIECE f(ARG2 , RSP) f(ARG1 , RSP)
(RSP + -88) PTRSUB RSP -88
0 INT_EQUAL f() 0
f() CALL libcall_memcmp_thunk 4730677 f(ARG1) 4
4730677 PTRSUB 0 4730677
0 INT_EQUAL f(ARG2) 10
 CBRANCH (f(ARG2) INT_EQUAL 10)
(RSP + -136) PTRSUB RSP -136
0 INT_EQUAL f(ARG2) 8
fp4-dp-d16 COPY fp4-dp-d16
f() CALL libcall_memcmp_thunk fp4-dp-d16 f(ARG1) 10
0 INT_EQUAL f() 0
1 COPY 1
 BRANCH VZERO
[(f(RSP) + 8)] LOAD 433 (f(RSP) + 8)
[f(RSP)] LOAD 433 f(RSP)
(f(RSP) + 8) PTRADD f(RSP) 1 8
 BRANCH VZERO
(RSP + -232) PTRSUB RSP -232
f() CALL libcall_memcmp_thunk fp5-sp-d16 f(ARG1) 10
fp5-sp-d16 COPY fp5-sp-d16
0 INT_EQUAL f() 0
0 INT_EQUAL f(ARG2) 8
(RSP + -120) PTRSUB RSP -120
1 COPY 1
 BRANCH VZERO
0 INT_EQUAL f() 0
4730667 PTRSUB 0 4730667
f() CALL libcall_memcmp_thunk 4730667 f(ARG1) 4
 CBRANCH (f() INT_EQUAL 0)
0 INT_EQUAL f(ARG2) 4
4730653 PTRSUB 0 4730653
0 INT_EQUAL f() 0
f() CALL func ARG1 ARG2 ARG1
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() / 2147483647) INT_RIGHT f() 64
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 CBRANCH (f(Symbol) INT_EQUAL 6952536)
(f() / 2147483647) SUBPIECE f() 0
Symbol PTRSUB 0 Symbol
(f() + 40) CAST (f() + 40)
0 INT_NOTEQUAL f() [(f() + 40)]
(FS_OFFSET + 40) INT_ADD 0 40
(f() + 40) INT_ADD f() 40
0 INT_EQUAL f(Symbol) 6952536
[(f() + 40)] LOAD 433 (f() + 40)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
6952536 PTRSUB 0 6952536
6952536 CAST 6952536
 CBRANCH ((f() / 4611686014132420609) INT_EQUAL (f() / 4611686014132420609))
 CBRANCH ((f() / 4611686014132420609) INT_EQUAL 0)
0 INT_NOTEQUAL f() 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
0 INT_EQUAL (f() / 4611686014132420609) 0
 CBRANCH f()
f(Symbol) CAST f(Symbol)
(f(Symbol) + 24) PTRADD f(Symbol) 3 8
 BRANCH VZERO
 BRANCH VZERO
(f(Symbol) & 4294967295) INT_AND f(Symbol) 4294967295
0 COPY 0
f() CALL libcall_memcmp_thunk (f() / 2147483647) (f() / 2147483647) (f() / 4611686014132420609)
 BRANCH VZERO
1 COPY 1
 BRANCH VZERO
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(Symbol)
 RETURN 1
(f(Symbol) + 8) PTRADD f(Symbol) 1 8
f() CALL func (RSP + -56)
[(f(Symbol) + 16)] LOAD 433 (f(Symbol) + 16)
[(f(Symbol) + 8)] LOAD 433 (f(Symbol) + 8)
(f() / 2147483647) INT_RIGHT f() 64
0 COPY 0
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(RSP + -56) PTRSUB RSP -56
[f(Symbol)] LOAD 433 f(Symbol)
(f(Symbol) + 16) PTRADD f(Symbol) 2 8
0 INT_EQUAL (f() / 4611686014132420609) (f() / 4611686014132420609)
f() CALL func ARG1 ARG2 ARG1
(f() + 40) CAST (f() + 40)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
 CBRANCH (f(Symbol) INT_EQUAL 6950048)
Symbol PTRSUB 0 Symbol
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) INT_ADD 0 40
(f() / 2147483647) INT_RIGHT f() 64
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
6950048 PTRSUB 0 6950048
0 INT_EQUAL f(Symbol) 6950048
(f() / 2147483647) SUBPIECE f() 0
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
[(f() + 40)] LOAD 433 (f() + 40)
 CALL libcall___stack_chk_fail_thunk
 RETURN 0 f(Symbol)
 RETURN 1
 CBRANCH ((f() / 4611686014132420609) INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
f() CALL libcall_memcmp_thunk (f() / 2147483647) (f() / 2147483647) (f() / 4611686014132420609)
[(f(Symbol) + 8)] LOAD 433 (f(Symbol) + 8)
0 COPY 0
(f(Symbol) + 16) PTRADD f(Symbol) 2 8
0 INT_EQUAL (f() / 4611686014132420609) (f() / 4611686014132420609)
 CBRANCH f()
 CBRANCH ((f() / 4611686014132420609) INT_EQUAL (f() / 4611686014132420609))
(f(Symbol) + 8) PTRADD f(Symbol) 1 8
f() CALL func (RSP + -72)
(f() / 2147483647) INT_RIGHT f() 64
[(f(Symbol) + 24)] LOAD 433 (f(Symbol) + 24)
(f() / 2147483647) SUBPIECE f() 0
[f(Symbol)] LOAD 433 f(Symbol)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(RSP + -72) PTRSUB RSP -72
(f(Symbol) + 24) PTRADD f(Symbol) 3 8
[(f(Symbol) + 16)] LOAD 433 (f(Symbol) + 16)
 BRANCH VZERO
 BRANCH VZERO
(f(Symbol) & 4294967295) INT_AND f(Symbol) 4294967295
f(Symbol) CAST f(Symbol)
(f(Symbol) + 32) PTRADD f(Symbol) 4 8
0 INT_NOTEQUAL f() 0
0 INT_EQUAL (f() / 4611686014132420609) 0
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
f() CALL libcall_memcmp_thunk ARG1 (f() / 2147483647) (f() / 4611686014132420609)
0 INT_EQUAL ARG2 (f() / 4611686014132420609)
0 INT_NOTEQUAL f() [(f() + 40)]
0 INT_EQUAL f(Symbol) 6952416
(f() + 40) INT_ADD f() 40
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
6952416 PTRSUB 0 6952416
[(f() + 40)] LOAD 433 (f() + 40)
(f() + 40) CAST (f() + 40)
 CBRANCH (f(Symbol) INT_EQUAL 6952416)
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
Symbol PTRSUB 0 Symbol
(FS_OFFSET + 40) INT_ADD 0 40
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
 CBRANCH ((f() / 4611686014132420609) INT_EQUAL 0)
0 COPY 0
 BRANCH VZERO
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
(f(Symbol) + 24) PTRADD f(Symbol) 3 8
[(f(Symbol) + 8)] LOAD 433 (f(Symbol) + 8)
(f() / 2147483647) INT_RIGHT f() 64
 CBRANCH (ARG2 INT_EQUAL (f() / 4611686014132420609))
[(f(Symbol) + 24)] LOAD 433 (f(Symbol) + 24)
(f() / 2147483647) SUBPIECE f() 0
[(f(Symbol) + 16)] LOAD 433 (f(Symbol) + 16)
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
(RSP + -72) PTRSUB RSP -72
[f(Symbol)] LOAD 433 f(Symbol)
(f(Symbol) + 16) PTRADD f(Symbol) 2 8
0 COPY 0
(f(Symbol) + 32) PTRADD f(Symbol) 4 8
f() CALL func (RSP + -72)
[(f(Symbol) + 32)] LOAD 433 (f(Symbol) + 32)
(f(Symbol) + 8) PTRADD f(Symbol) 1 8
 CBRANCH f()
 RETURN 0 f(Symbol)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
0 INT_NOTEQUAL f() 0
0 INT_EQUAL (f() / 4611686014132420609) 0
(f(Symbol) & 4294967295) INT_AND f(Symbol) 4294967295
 BRANCH VZERO
 BRANCH VZERO
f(Symbol) CAST f(Symbol)
(f(Symbol) + 40) PTRADD f(Symbol) 5 8
f() CALL libcall_memcmp_thunk ARG1 (f() / 2147483647) (f() / 4611686014132420609)
0 INT_EQUAL ARG2 (f() / 4611686014132420609)
(FS_OFFSET + 40) CAST (FS_OFFSET + 40)
6954848 PTRSUB 0 6954848
[(f() + 40)] LOAD 433 (f() + 40)
 CBRANCH (f(Symbol) INT_EQUAL 6954848)
Symbol PTRSUB 0 Symbol
[(FS_OFFSET + 40)] LOAD 433 (FS_OFFSET + 40)
(f() + 40) CAST (f() + 40)
0 INT_EQUAL f(Symbol) 6954848
0 INT_NOTEQUAL f() [(f() + 40)]
(f() + 40) INT_ADD f() 40
 CBRANCH (f() INT_NOTEQUAL [(f() + 40)])
6954848 CAST 6954848
(FS_OFFSET + 40) INT_ADD 0 40
 CBRANCH (f() INT_NOTEQUAL 0)
0 COPY 0
 BRANCH VZERO
1 COPY 1
(f(Symbol) + 16) PTRADD f(Symbol) 2 8
(f() / 4611686014132420609) SUBPIECE (f() / 2147483647) 0
0 COPY 0
f() CALL func (RSP + -72)
(RSP + -72) PTRSUB RSP -72
[(f(Symbol) + 24)] LOAD 433 (f(Symbol) + 24)
(f(Symbol) + 8) PTRADD f(Symbol) 1 8
 CBRANCH f()
(f() / 2147483647) INT_RIGHT f() 64
[(f(Symbol) + 8)] LOAD 433 (f(Symbol) + 8)
[f(Symbol)] LOAD 433 f(Symbol)
(f() / 2147483647) SUBPIECE f() 0
 CBRANCH (ARG2 INT_EQUAL (f() / 4611686014132420609))
[(f(Symbol) + 16)] LOAD 433 (f(Symbol) + 16)
(f(Symbol) + 24) PTRADD f(Symbol) 3 8
 RETURN 0 f(Symbol)
 RETURN 1
 CALL libcall___stack_chk_fail_thunk
0 INT_NOTEQUAL f() 0
0 INT_EQUAL (f() / 4611686014132420609) 0
 CBRANCH ((f() / 4611686014132420609) INT_EQUAL 0)
f(Symbol) CAST f(Symbol)
(f(Symbol) + 32) PTRADD f(Symbol) 4 8
(f(Symbol) & 4294967295) INT_AND f(Symbol) 4294967295
 BRANCH VZERO
 BRANCH VZERO
0 COPY 0
 BRANCH VZERO
 RETURN 0

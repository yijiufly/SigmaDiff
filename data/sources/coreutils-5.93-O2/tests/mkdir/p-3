#!/bin/sh
# Ensure that mkdir-p.c's fail-to-return-to-initial-working-directory
# causes immediate failure.  Also, ensure that we don't create
# subsequent, relative command-line arguments in the wrong place.

if test "$VERBOSE" = yes; then
  set -x
  mkdir --version
fi

PRIV_CHECK_ARG=require-non-root . $srcdir/../priv-check

pwd=`pwd`
t0=`echo "$0"|sed 's,.*/,,'`.tmp; tmp=$t0/$$
trap 'status=$?; cd $pwd; chmod -R u+rwx $t0; rm -rf $t0 && exit $status' 0
trap '(exit $?); exit $?' 1 2 13 15

framework_failure=0
mkdir -p $tmp || framework_failure=1
cd $tmp || framework_failure=1
mkdir no-access || framework_failure=1
mkdir no-acce2s || framework_failure=1
mkdir no-acce3s || framework_failure=1

if test $framework_failure = 1; then
  echo "$0: failure in testing framework" 1>&2
  (exit 1); exit 1
fi

p=$pwd/$tmp
(cd no-access; chmod 0 . && mkdir -p $p/a/b u/v) 2> /dev/null && fail=1
test -d $p/a/b || fail=1

# Same as above, but with a following *absolute* name, it should succeed
(cd no-acce2s; chmod 0 . && mkdir -p $p/b/b $p/z) || fail=1

test -d $p/z || fail=1

b=`ls $p/a|tr -d '\n'`
# With coreutils-5.3.0, this would fail with $b=bu.
test "x$b" = xb || fail=1

# Ensure that the re_protect code is run on absolute names, even
# after failure to return to the initial working directory.
# This is actually a test of the underlying mkdir-p.c code.
# The part in question cannot be tested via mkdir(1) because that
# program cannot create leading directories that lack u=wx permissions,
# so we have to test with install (aka ginstall in the build directory).
(cd no-acce3s; chmod 0 . && ginstall -m 0 -d $p/c/b $p/y/z) || fail=1
p=`ls -ld $p/y|sed 's/ .*//'`
case $p in d---------);; *) fail=1;; esac

exit $fail
